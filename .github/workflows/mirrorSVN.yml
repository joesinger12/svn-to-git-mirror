name: Mirror SVN to Git

on:
  workflow_dispatch: # Allows to run manually also

jobs:
  mirrorSVN:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout this repository
      uses: actions/checkout@v4
      with:
        path: git-repo

    - name: Install SVN
      run: sudo apt-get install -y subversion

    - name: Install Git LFS
      run: |
        sudo apt-get install -y git-lfs
        git lfs install
        
    - name: Configure Checked-Out Git repository
      run: |
        cd git-repo
        git config --global user.name "${{ secrets.GIT_USERNAME }}"
        git config --global user.email "${{ secrets.GIT_EMAIL }}"
 
    - name: Set Branch Name
      run: |
        echo "BRANCH_NAME=automation-branch-$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
        echo "Done Setting Name As: ${{ env.BRANCH_NAME }} or $BRANCH_NAME"

    - name: Confirm Name
      run: |
        echo "Done Setting Name As: ${{ env.BRANCH_NAME }}"

    - name: Clone SVN repository
      run: |
        svn checkout --username ${{ secrets.SVN_USERNAME }} --password ${{ secrets.SVN_PASSWORD }} https://svn.code.sf.net/p/cbecc-com/code/branches/CBECC-Com_MFamRestructure/ svn-repo
  
    - name: Generate SVN log
      run: |
        cd svn-repo
        LAST_REVISION=$(cat ../git-repo/last_revision.txt)
        echo "LAST_REVISION=$LAST_REVISION" >> $GITHUB_ENV
        echo "Last revision number is: $LAST_REVISION"
        
        svn log -r $LAST_REVISION:HEAD --xml > ../svn_log.xml
        echo "svn log file created"

    - name: Upload SVN log artifact
      uses: actions/upload-artifact@v4
      with:
        name: svn-log
        path: svn_log.xml
        
    - name: Check to see if there are new commits
      run: |
        cd git-repo
        if [ -z "$(git status --porcelain)" ]; then
          echo "HAS_UPDATES=yes" >> $GITHUB_ENV
        else
          echo "HAS_UPDATES=no" >> $GITHUB_ENV
        fi
        echo "Does repo have updates: ${{ env.HAS_UPDATES }} or $HAS_UPDATES"

    - name: Commit SVN Commits to Git
      if: ${{ env.HAS_UPDATES }} == 'yes'
      run: |
        cd git-repo
        declare -A AUTHORS_MAP
        while IFS=: read -r svn_username name_email; do
          AUTHORS_MAP["$svn_username"]="$name_email"
        done < authors.txt
        echo "authors map array created"

        cd ../svn-repo
        
        while read -r line; do
          if [[ $line == "<msg>"* ]]; then
            COMMIT_MSG=$(echo $line | sed -e 's/<[^>]*>//g')
            echo "SET Commit Message: $COMMIT_MSG"
          elif [[ $line == "<author>"* ]]; then
            SVN_AUTHOR=$(echo $line | sed -e 's/<[^>]*>//g')
            AUTHOR=${AUTHORS_MAP[$SVN_AUTHOR]}
            if [ -z "$AUTHOR" ]; then
              echo "Error: No mapping found for SVN author $SVN_AUTHOR"
              AUTHOR="Unknown <>"
            fi
            AUTHOR_NAME=$(echo "$AUTHOR" | sed -E 's/(.*) <.*/\1/')
            AUTHOR_EMAIL=$(echo "$AUTHOR" | sed -E 's/.*<(.*)>/\1/')
            echo "SET author: $AUTHOR"
          elif [[ $line == "<date>"* ]]; then
            COMMIT_DATE=$(echo $line | sed -e 's/<[^>]*>//g')
            export GIT_COMMITTER_DATE="$COMMIT_DATE"
            echo "SET Commit Date: $COMMIT_DATE"
          elif [[ $line == *"revision="* ]]; then
            REV_NUMBER=$(echo $line | sed -n 's/.*revision="\([0-9]*\)".*/\1/p')
            echo "SET RevNumber: $REV_NUMBER"
          elif [[ $line == "</logentry>"* ]]; then
            if [ -z "$REV_NUMBER" ]; then
              echo "Error: Revision number is empty"  # Debugging statement
              exit 1
            fi
            cd ../svn-repo
            echo "RevNumber: $REV_NUMBER"
            echo "author: $AUTHOR"
            echo "date: $COMMIT_DATE"
            echo "Commit Message: $COMMIT_MSG"
            svn update -r $REV_NUMBER
            echo "files updated for revision $REV_NUMBER"
            cp -R ../svn-repo/* ../git-repo/
            echo "Copied files to git-repo"
            cd ../git-repo
            git config --global user.name "$AUTHOR_NAME"
            git config --global user.email "$AUTHOR_EMAIL"
            git add .
            if ! git diff-index --quiet HEAD --; then
              git commit --author="$AUTHOR" --date="$COMMIT_DATE" -m "SVN Revision #$REV_NUMBER
              $COMMIT_MSG"
              echo "FINISHED: Successfully committed revision $REV_NUMBER"
              
            else
              echo "Skipping revision number $REV_NUMBER: Nothing to commit, working tree clean."
            fi
            echo ""
            cd ../svn-repo
          fi
        done < ../svn_log.xml

        cd ../git-repo
        git config --global user.name "${{ secrets.GIT_USERNAME }}"
        git config --global user.email "${{ secrets.GIT_EMAIL }}"
        
        export GIT_COMMITTER_DATE="$(date +'%Y-%m-%d %H:%M:%S')"
        
        echo $REV_NUMBER > ../git-repo/last_revision.txt
        echo "Last revision number saved as: $REV_NUMBER"
        
        git add .
        
        if ! git diff-index --quiet HEAD --; then
          git commit -m "updating last_revision.txt to #$REV_NUMBER to track automations."
          echo "FINISHED: Successfully committed last revision number txt file"
        else
          echo "Last revision same as old one: Nothing to commit, working tree clean."
        fi

        
    - name: Create Pull Request
      if: ${{ env.HAS_UPDATES }} == 'yes'
      uses: peter-evans/create-pull-request@v7
      with:
        path: git-repo
        branch: ${{ env.BRANCH_NAME }}
        title: "Automated Pull Request"
        body: "This pull request was created automatically by GitHub Actions. It mirrors the SVN repository to Git with no history."