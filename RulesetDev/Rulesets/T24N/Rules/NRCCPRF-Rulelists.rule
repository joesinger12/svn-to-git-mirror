; -------------------------------------------------------------------------
; Rulelists pertaining to:   Population of NRCCPRF XML objects
; CEC Title-24 Nonresidential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2020, California Energy Commission
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
; STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------


;*************************************************************************
RULELIST "NRCCPRF_Proposed"  1 0 0 1
  ; ----------------------------------------------------------------------
  ; Rules to clear past NRCCPRF objects and create those objects populated w/ Proposed model info
   "Delete existing NRCCPRF objects"    nrccComplianceDocumentPackage:Action  = {  DeleteComp()  }

;   "Default Proj:SoftwareVersionDetail to SoftwareVersion if undefined"    Proj:SoftwareVersionDetail  =    ; SAC 2/13/20 (tic #1192)
;      {  if (LocalStatus( SoftwareVersionDetail ) < 1 .AND. LocalStatus( SoftwareVersion ) > 0)
;         then  SoftwareVersion  else  UNCHANGED  endif  }

   "Create & initialize new nrccComplianceDocumentPackage object"
      Proj:Action  = {  CreateComp( nrccComplianceDocumentPackage, "NRCC CompDocPckg", "NRCCPRF_Init_nrccComplianceDocumentPackage" )  }
   "Create & initialize new nrccDocID object"
      nrccComplianceDocumentPackage:Action  = {  CreateChildren( nrccDocID,        1, "NRCC DocID",      "NRCCPRF_Init_nrccDocID" )  }
   "Create & initialize new nrccPayload object"
      nrccComplianceDocumentPackage:Action  = {  CreateChildren( nrccPayload,      1, "NRCC Payload",    "NRCCPRF_Init_nrccPayload" )  }
   "Create & initialize new nrccDocumentData object"
      nrccComplianceDocumentPackage:Action  = {  CreateChildren( nrccDocumentData, 1, "NRCC DocData" )  }     ; no init needed - "NRCCPRF_Init_nrccDocumentData" )  }

;   "Set nrccDocumentData:ProjectNotes"   nrccDocumentData:ProjectNotes   =  { Project:Notes }

   "Set nrccComplianceDocumentPackage:afterchildren_Report"   nrccComplianceDocumentPackage:afterchildren_Report   = {  " "  }
   "Set nrccComplianceDocumentPackage:afterchildren_Report2"  nrccComplianceDocumentPackage:afterchildren_Report2  = {  " "  }
   "Set nrccComplianceDocumentPackage:afterchildren_Input"  nrccComplianceDocumentPackage:afterchildren_Input  = {  " "  }

   "Create & initialize new nrccHeader object"
      nrccDocumentData:Action  = {  CreateChildren( nrccHeader,       1, "NRCC Header",     "NRCCPRF_Init_nrccHeader" )  }

   "Create nrccNRCCPRF object"
      nrccDocumentData:Action  = {  CreateChildren( nrccNRCCPRF,   1, "NRCC Main" )  }     ; no init needed

   "Create nrccSection_Info object"
      nrccNRCCPRF:Action    = {  CreateChildren( nrccSection_Info,    1, "NRCC Info" )  }
;      nrccNRCCPRF:Action    = {  CreateChildren( nrccSection_Info,    1, "NRCC SecA", "NRCCPRF_Auto_nrccSection_Info" )  }

   "Create nrccSection_Proj object"
      nrccNRCCPRF:Action    = {  CreateChildren( nrccSection_Proj,    1, "NRCC Proj" )  }


;  ...
;  ...


   "Create nrccSection_C22Result1 object"
      nrccNRCCPRF:Action    = {  if (Proj:AnalysisVersion >= 220000) then CreateChildren( nrccSection_C22Result1,    1, "NRCC C22Result1" ) else UNDEFINED endif  }

   "Create nrccSection_C22Result2 object"
      nrccNRCCPRF:Action    = {  if (Proj:AnalysisVersion >= 220000) then CreateChildren( nrccSection_C22Result2,    1, "NRCC C22Result2" ) else UNDEFINED endif  }

   "Create nrccSection_C22Result3 object"
      nrccNRCCPRF:Action    = {  if (Proj:AnalysisVersion >= 220000) then CreateChildren( nrccSection_C22Result3,    1, "NRCC C22Result3" ) else UNDEFINED endif  }

   "Create nrccSection_C22Result4 object"
      nrccNRCCPRF:Action    = {  if (Proj:AnalysisVersion >= 220000) then CreateChildren( nrccSection_C22Result4,    1, "NRCC C22Result4" ) else UNDEFINED endif  }

   "Create nrccSection_C22Result5 object"
      nrccNRCCPRF:Action    = {  if (Proj:AnalysisVersion >= 220000) then CreateChildren( nrccSection_C22Result5,    1, "NRCC C22Result5" ) else UNDEFINED endif  }

   "Create nrccSection_C22Result6Tier object"
      nrccNRCCPRF:Action    = {  if (Proj:AnalysisVersion >= 220000) then CreateChildren( nrccSection_C22Result6Tier,    1, "NRCC C22Result6Tier" ) else UNDEFINED endif  }

   "Create nrccSection_C22Result7 object"
      nrccNRCCPRF:Action    = {  if (Proj:AnalysisVersion >= 220000) then CreateChildren( nrccSection_C22Result7,    1, "NRCC C22Result7" ) else UNDEFINED endif  }

   "Create nrccSection_C22Result8 object"
      nrccNRCCPRF:Action    = {  if (Proj:AnalysisVersion >= 220000) then CreateChildren( nrccSection_C22Result8,    1, "NRCC C22Result8" ) else UNDEFINED endif  }

   "Create nrccSection_C22Result9 object"
      nrccNRCCPRF:Action    = {  if (Proj:AnalysisVersion >= 220000) then CreateChildren( nrccSection_C22Result9,    1, "NRCC C22Result9" ) else UNDEFINED endif  }
   "Create nrccSection_C22Result9 nrccTableUMLHC22 object"              nrccSection_C22Result9:Action  =
      {  CreateChildren( nrccTableUMLHC22, 1, "NRCC UMLHC22 table" )  }


   "Create nrccSection_Result1 object"
      nrccNRCCPRF:Action    = {  if (Proj:AnalysisVersion < 220000) then CreateChildren( nrccSection_Result1,    1, "NRCC Result1" ) else UNDEFINED endif  }

   "Create nrccSection_Result2 object"
      nrccNRCCPRF:Action    = {  if (Proj:AnalysisVersion < 220000) then CreateChildren( nrccSection_Result2,    1, "NRCC Result2" ) else UNDEFINED endif  }

   "Create nrccSection_Result3 object"
      nrccNRCCPRF:Action    = {  if (Proj:AnalysisVersion < 220000) then CreateChildren( nrccSection_Result3,    1, "NRCC Result3" ) else UNDEFINED endif  }

   "Create nrccSection_Result4 object" 
      nrccNRCCPRF:Action    = {  if (Proj:AnalysisVersion < 220000) then CreateChildren( nrccSection_Result4,    1, "NRCC Result4" ) else UNDEFINED endif  }
   "Create nrccSection_Result4 nrccTableUMLH object"              nrccSection_Result4:Action  =
      {  CreateChildren( nrccTableUMLH, 1, "NRCC UMLH table" )  }
; moved rules requiring Proposed simulation results to 'NRCCPRF_ap_PostSim' rulelist - SAC 04/14/21

   "Create nrccSection_Except object"
      nrccNRCCPRF:Action    = {  CreateChildren( nrccSection_Except,    1, "NRCC Except" )  }
  ; Rule to Delete empty nrccSection_Except located in RULELIST "NRCCPRF_ap_PostSim"


   "Create nrccSection_HERS object"
      nrccNRCCPRF:Action    = {  CreateChildren( nrccSection_HERS,    1, "NRCC HERS" )  }
  ; Rule to Delete empty nrccSection_HERS located in RULELIST "NRCCPRF_ap_PostSim"

   "Create nrccSection_Remarks object"
      nrccNRCCPRF:Action    = {  CreateChildren( nrccSection_Remarks,    1, "NRCC Remarks" )  }
  ; Rule to Delete empty nrccSection_Remarks
   "DELETE empty nrccSection_Remarks object"
      nrccSection_Remarks:Action   = {  if (LocalStatus(Remarks01_CommentsToPermitAuthority) > 0) then  UNCHANGED  else  DeleteComp()  endif }
;  ...
;  ...


   "Create nrccSection_Env object"
      nrccNRCCPRF:Action    = {  if (Proj:CompPathEnv == "Performance") 
                                 then CreateChildren( nrccSection_Env,    1, "NRCC Env" )
                                 else UNCHANGED 
                                 endif }

   "Create nrccSection_CRRC object"                               nrccNRCCPRF:Action       =
      {  if (Proj:CompPathEnv != "Performance" .OR. SumAcrossIf( ConsAssm:AreaNew, ConsAssm:CompatibleSurfTypeRpt = "Roof" ) < 1) then  UNCHANGED
         else  CreateChildren( nrccSection_CRRC, 1, "NRCC CRRC" )  endif  }
   "Create nrccSection_CRRC nrccTableCRRC object"                 nrccSection_CRRC:Action  =
      {  CreateChildren( nrccTableCRRC, 1, "NRCC CRRC table" )  }
   "Create nrcctblRowCRRC object for each pertinent ConsAssm"     ConsAssm:nrcctblRowCRRCRef =
      {  if (LocalCompAssigned( nrcctblRowCRRCRef ) > 0 .OR.
             ComponentCount( nrccTableCRRC ) < 1 .OR.
             IfValidAnd( AreaNew > 0.1 )==0) then  UNDEFINED
         else if (IfValidAnd(CompatibleSurfTypeRpt == "Roof") .AND. IfValidAnd(HasCRRCProdID == 1))
              then CreateComp( nrcctblRowCRRC, Format( "%s CRRC tblRow", Name ) )
              else UNDEFINED
              endif
         endif  }
   "Set ConsAssm:nrcctblRowCRRCRef:noXMLoutput_ConsAssmRef"    ConsAssm:nrcctblRowCRRCRef:noXMLoutput_ConsAssmRef = {  Name  }

  ; Rule to Delete empty nrccSection_CRRC
   "DELETE empty nrccSection_CRRC object"
      nrccSection_CRRC:Action   = {  if (ComponentCount( nrcctblRowCRRC ) < 1) then  DeleteComp()  else  UNCHANGED  endif }

   "Create nrccSection_Opaq object"                               nrccNRCCPRF:Action       =
      {  if (Proj:CompPathEnv == "Performance") 
         then CreateChildren( nrccSection_Opaq, 1, "NRCC Opaq" )
         else UNCHANGED 
         endif }
   "Create nrccSection_Opaq nrccTableOpaq object"                 nrccSection_Opaq:Action  =
      {  CreateChildren( nrccTableOpaq, 1, "NRCC Opaq table" )  }
   "Create nrcctblRowOpaq object for each pertinent ConsAssm"     ConsAssm:nrcctblRowOpaqRef =
      {  if (LocalCompAssigned( nrcctblRowOpaqRef ) > 0 .OR.
             ComponentCount( nrccTableOpaq ) < 1 .OR.
             (IfValidAnd( AreaNew > 0.1 )==0 .AND. IfValidAnd( AreaExisting > 0.1 )==0 .AND. IfValidAnd( AreaAltered > 0.1 )==0)) then  UNDEFINED
         else  CreateComp( nrcctblRowOpaq, Format( "%s Opaq tblRow", Name ) )
         endif  }
   "Set ConsAssm:nrcctblRowOpaqRef:noXMLoutput_ConsAssmRef"    ConsAssm:nrcctblRowOpaqRef:noXMLoutput_ConsAssmRef = {  Name  }

   "Create nrccOpaq09 child object for each nrcctblRowOpaq"     ConsAssm:nrccOpaq09Ref =
      {  if (IfValidAnd( AreaNew > 0.1 )==0 .AND. IfValidAnd( AreaExisting > 0.1 )==0 .AND. IfValidAnd( AreaAltered > 0.1 )==0) then  UNDEFINED
         else  CreateComp( nrccOpaq09, Format( "%s Opaq09", Name ) )
         endif  }
   "Set ConsAssm:nrccOpaq09Ref:noXMLoutput_ConsAssmRef"    ConsAssm:nrccOpaq09Ref:noXMLoutput_ConsAssmRef = {  Name  }

   "Create nrccOpaq09Slab child object for each Slab nrcctblRowOpaq"     ConsAssm:nrccOpaq09SlabRef =
      {  if ((IfValidAnd( AreaNew > 0.1 )==0 .AND. IfValidAnd( AreaExisting > 0.1 )==0 .AND. IfValidAnd( AreaAltered > 0.1 )==0) .OR.
             CompatibleSurfaceType != "UndergroundFloor" .OR. SlabType == "- specify -") then  UNDEFINED
         else  CreateComp( nrccOpaq09Slab, Format( "%s Opaq09Slab", Name ) )
         endif  }
   "Set ConsAssm:nrccOpaq09SlabRef:noXMLoutput_ConsAssmRef"    ConsAssm:nrccOpaq09SlabRef:noXMLoutput_ConsAssmRef = {  Name  }

   "Create nrccOpaq09Layers child object for each nrcctblRowOpaq except UndergroundFloor"     ConsAssm:nrccOpaq09LayersRef =
      {  if ((IfValidAnd( AreaNew > 0.1 )==0 .AND. IfValidAnd( AreaExisting > 0.1 )==0 .AND. IfValidAnd( AreaAltered > 0.1 )==0) .OR.
             CompatibleSurfaceType == "UndergroundFloor") then  UNDEFINED
         else  CreateComp( nrccOpaq09Layers, Format( "%s Opaq09Layers", Name ) )
         endif  }
   "Set ConsAssm:nrccOpaq09LayersRef:noXMLoutput_ConsAssmRef"    ConsAssm:nrccOpaq09LayersRef:noXMLoutput_ConsAssmRef = {  Name  }

  ; Rule to Delete empty nrccSection_Opaq
   "DELETE empty nrccSection_Opaq object"
      nrccSection_Opaq:Action   = {  if (ComponentCount( nrcctblRowOpaq ) < 1) then  DeleteComp()  else  UNCHANGED  endif }

   "Create nrccSection_Door object"                               nrccNRCCPRF:Action       =
      {  if (Proj:CompPathEnv == "Performance") 
         then CreateChildren( nrccSection_Door, 1, "NRCC Door" )
         else UNCHANGED 
         endif }
   "Create nrccSection_Door nrccTableDoor object"                 nrccSection_Door:Action  =
      {  CreateChildren( nrccTableDoor, 1, "NRCC Door table" )  }
   "Create nrcctblRowDoor object for each pertinent DrCons"     DrCons:nrcctblRowDoorRef =
      {  if (LocalCompAssigned( nrcctblRowDoorRef ) > 0 .OR.
             ComponentCount( nrccTableDoor ) < 1) then  UNDEFINED
         else  CreateComp( nrcctblRowDoor, Format( "%s Door tblRow", Name ) )
         endif  }
   "Set DrCons:nrcctblRowDoorRef:noXMLoutput_DrConsRef"    DrCons:nrcctblRowDoorRef:noXMLoutput_DrConsRef = {  Name  }
  ; Rule to Delete empty nrccSection_Door
   "DELETE empty nrccTableDoor object"
      nrccSection_Door:Action   = {  if (ComponentCount( nrcctblRowDoor ) < 1) then  DeleteComp()  else  UNCHANGED  endif }

   "Create nrccSection_Fen object"                               nrccNRCCPRF:Action       =
      {  if (Proj:CompPathEnv == "Performance") 
         then CreateChildren( nrccSection_Fen, 1, "NRCC Fenestration" )
         else UNCHANGED 
         endif }
   "Create nrccSection_Fen nrccTableFen object"                 nrccSection_Fen:Action  =
      {  CreateChildren( nrccTableFen, 1, "NRCC Fenestration table" )  }
   "Create nrcctblRowFen object for each pertinent FenCons"     FenCons:nrcctblRowFenRef =
      {  if (LocalCompAssigned( nrcctblRowFenRef ) > 0 .OR.
             ComponentCount( nrccTableFen ) < 1) then  UNDEFINED
         else if (IfValidAnd( AreaNew > 0 ) .OR. IfValidAnd( AreaAltered > 0 ) .OR. IfValidAnd( AreaExisting > 0 )) 
              then CreateComp( nrcctblRowFen, Format( "%s Fenestration tblRow", Name ) )
              else UNDEFINED
              endif
         endif  }
   "Set FenCons:nrcctblRowFenRef:noXMLoutput_FenConsRef"    FenCons:nrcctblRowFenRef:noXMLoutput_FenConsRef = {  Name  }
  ; Rule to Delete empty nrccSection_Fen
   "DELETE empty nrccSection_Fen object"
      nrccSection_Fen:Action   = {  if (ComponentCount( nrcctblRowFen ) < 1) then  DeleteComp()  else  UNCHANGED  endif }

   "Create nrccSection_OverHang object"                   nrccNRCCPRF:Action       =
      {  if (Proj:CompPathEnv != "Performance" .OR. SumAcrossIf( Win:Area, Win:EnableWinShades > 0 ) < 1) then  UNCHANGED
         else  CreateChildren( nrccSection_OverHang, 1, "NRCC OverHang" )  endif  }
   "Create nrccSection_OverHang nrccTableOverHang object"           nrccSection_OverHang:Action  =
      {  CreateChildren( nrccTableOverHang, 1, "NRCC OverHang table" )  }
   "Create nrcctblRowOverHang object for each pertinent Win"     Win:nrcctblRowOverHangRef =
      {  if (LocalCompAssigned( nrcctblRowOverHangRef ) > 0 .OR.
             ComponentCount( nrccTableOverHang ) < 1 .OR.
             IfValidAnd( EnableWinShades > 0 )==0 .OR.
             IfValidAnd( Area > 0 )==0 .OR.
             IfValidAnd( OverhangDepth >= 0.05 )==0) then  UNDEFINED
         else  CreateComp( nrcctblRowOverHang, Format( "%s OverHang tblRow", Name ) )
         endif  }
   "Set Win:nrcctblRowOverHangRef:noXMLoutput_WinRef"    Win:nrcctblRowOverHangRef:noXMLoutput_WinRef = {  Name  }
  ; Rule to Delete empty nrccSection_OverHang
   "DELETE empty nrccSection_OverHang object"
      nrccSection_OverHang:Action   = {  if (ComponentCount( nrcctblRowOverHang ) < 1) then  DeleteComp()  else  UNCHANGED  endif }

   "Create nrccSection_Fins object"                   nrccNRCCPRF:Action       =
      {  if (Proj:CompPathEnv != "Performance" .OR. SumAcrossIf( Win:Area, Win:EnableWinShades > 0 ) < 1) then  UNCHANGED
         else  CreateChildren( nrccSection_Fins, 1, "NRCC Fins" )  endif  }
   "Create nrccSection_Fins nrccTableFins object"           nrccSection_Fins:Action  =
      {  CreateChildren( nrccTableFins, 1, "NRCC Fins table" )  }
   "Create nrcctblRowFins object for each pertinent Win"     Win:nrcctblRowFinsRef =
      {  if (LocalCompAssigned( nrcctblRowFinsRef ) > 0 .OR.
             ComponentCount( nrccTableFins ) < 1 .OR.
             IfValidAnd( EnableWinShades > 0 )==0 .OR.
             IfValidAnd( Area > 0 )==0 ) then  UNDEFINED
         else  if (IfValidAnd(LeftFinDepth >= 0.05) .OR. IfValidAnd(RightFinDepth >= 0.05)) 
               then CreateComp( nrcctblRowFins, Format( "%s Fins tblRow", Name ) )
               else UNDEFINED
               endif
         endif  }
   "Set Win:nrcctblRowFinsRef:noXMLoutput_WinRef"    Win:nrcctblRowFinsRef:noXMLoutput_WinRef = {  Name  }
  ; Rule to Delete empty nrccSection_Fins
   "DELETE empty nrccSection_Fins object"
      nrccSection_Fins:Action   = {  if (ComponentCount( nrcctblRowFins ) < 1) then  DeleteComp()  else  UNCHANGED  endif }


   ; setup SEER and EER report values to be used in populating Section_HvacDry data - RJH 11/04/21
   "Set AirSys:ClgEffEERRpt"  AirSys:ClgEffEERRpt = 
      { if (SumChildrenIf( CoilClg:CapTotNetRtd, CoilClg:Type = "DirectExpansion" ) > 0 .AND. IfValidAnd( MaxChild( CoilClg:DXSEER ) > 0 ))
        then Format( FltToStr( MaxChild( CoilClg:DXEERRnd ), MaxChild( CoilClg:EERSEERRndScl ) ) )
        else UNDEFINED
        endif  }
   "Set AirSys:ClgEffSEERRpt"  AirSys:ClgEffSEERRpt = 
      { if (SumChildrenIf( CoilClg:CapTotNetRtd, CoilClg:Type = "DirectExpansion" ) > 0 .AND. IfValidAnd( MaxChild( CoilClg:DXSEER ) > 0 ))
        then Format( FltToStr( MaxChild( CoilClg:DXSEERRnd ), MaxChild( CoilClg:EERSEERRndScl ) ) )
        else UNDEFINED
        endif  }
   "Set ZnSys:ClgEffEERRpt"  ZnSys:ClgEffEERRpt = 
      { if (SumChildrenIf( CoilClg:CapTotNetRtd, CoilClg:Type = "DirectExpansion" ) > 0 .AND. IfValidAnd( MaxChild( CoilClg:DXSEER ) > 0 ))
        then Format( FltToStr( MaxChild( CoilClg:DXEERRnd ), MaxChild( CoilClg:EERSEERRndScl ) ) )
        else UNDEFINED
        endif  }
   "Set ZnSys:ClgEffSEERRpt"  ZnSys:ClgEffSEERRpt = 
      { if (SumChildrenIf( CoilClg:CapTotNetRtd, CoilClg:Type = "DirectExpansion" ) > 0 .AND. IfValidAnd( MaxChild( CoilClg:DXSEER ) > 0 ))
        then Format( FltToStr( MaxChild( CoilClg:DXSEERRnd ), MaxChild( CoilClg:EERSEERRndScl ) ) )
        else UNDEFINED
        endif  }



   "Create nrccSection_HvacDry object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathMech == "Performance") 
         then  CreateChildren( nrccSection_HvacDry, 1, "HVAC Dry" )
         else UNCHANGED 
         endif }
   "Create nrccSection_HvacDry nrccTableHvacDry object"              nrccSection_HvacDry:Action  =
      {  CreateChildren( nrccTableHvacDry, 1, "HVAC Dry table" )  }

   "Create nrcctblRowHvacDry object for each pertinent AirSys"     AirSys:nrcctblRowHvacDryRef =
      {  if (LocalCompAssigned( nrcctblRowHvacDryRef ) > 0 .OR.
             ComponentCount( nrccTableHvacDry ) < 1 .OR.
             ComponentCount( AirSys ) < 1 .OR.
             IfValidAnd( Type == "Exhaust" ) .OR.
             IfValidAnd( BaseSysNum > 0 ) .OR.
             IfValidAnd( ExcludeFromRpt > 0 ) .OR.
             IfValidAnd( IsHlthCareSys > 0 ) ) then  UNDEFINED
         else  CreateComp( nrcctblRowHvacDry, Format( "%s HvacDry tblRow", Name ) )
         endif  }

   "Set AirSys:nrcctblRowHvacDryRef:noXMLoutput_AirSysRef"    AirSys:nrcctblRowHvacDryRef:noXMLoutput_AirSysRef = 
      {  if (ComponentCount( AirSys ) < 1) then  UNDEFINED
         else Name
         endif  }

   "Create nrccHvacDry08b child object for each AirSys nrcctblRowHvacDry"     AirSys:nrccHvacDry08bRef =
      {  if (ComponentCount( AirSys ) < 1) then  UNDEFINED
         else  CreateComp( nrccHvacDry08b, Format( "%s HvacDry08b", Name ) )
         endif  }
   "Set AirSys:nrccHvacDry08bRef:noXMLoutput_AirSysRef"    AirSys:nrccHvacDry08bRef:noXMLoutput_AirSysRef = {  Name  }

   "Create nrccHvacDry08c child object for each AirSys SEER/EER nrcctblRowHvacDry"     AirSys:nrccHvacDry08cRef =
      {  if ( IfValidAnd( ClgEffUnitRpt == "SEER/EER" ) ) then  CreateComp( nrccHvacDry08c, Format( "%s HvacDry08c", Name ) )
         else  UNDEFINED
         endif  }
   "Set AirSys:nrccHvacDry08cRef:noXMLoutput_AirSysRef"    AirSys:nrccHvacDry08cRef:noXMLoutput_AirSysRef = {  Name  }


   "Create nrcctblRowHvacDry object for each pertinent ZnSys"     ZnSys:nrcctblRowHvacDryRef =
      {  if (LocalCompAssigned( nrcctblRowHvacDryRef ) > 0 .OR.
             ComponentCount( nrccTableHvacDry ) < 1 .OR.
             ComponentCount( ZnSys ) < 1 .OR.
             IfValidAnd( Type == "VRF" ) .OR.
             IfValidAnd( Type == "Exhaust" ) .OR.
             IfValidAnd( Type == "VentilationOnly" ) .OR.
             IfValidAnd( BaseSysNum > 0 ) .OR.
             IfValidAnd( IsHlthCareSys > 0 ) ) then  UNDEFINED
         else  CreateComp( nrcctblRowHvacDry, Format( "%s HvacDry tblRow", Name ) )
         endif  }
   "Set ZnSys:nrcctblRowHvacDryRef:noXMLoutput_ZnSysRef"    ZnSys:nrcctblRowHvacDryRef:noXMLoutput_ZnSysRef = 
      {  if (ComponentCount( ZnSys ) < 1) then  UNDEFINED
         else Name
         endif  }

   "Create nrccHvacDry08b child object for each ZnSys nrcctblRowHvacDry"     ZnSys:nrccHvacDry08bRef =
      {  if (ComponentCount( ZnSys ) < 1) then  UNDEFINED
         else  CreateComp( nrccHvacDry08b, Format( "%s HvacDry08b", Name ) )
         endif  }
   "Set ZnSys:nrccHvacDry08bRef:noXMLoutput_ZnSysRef"    ZnSys:nrccHvacDry08bRef:noXMLoutput_ZnSysRef = {  Name  }

   "Create nrccHvacDry08c child object for each ZnSys SEER/EER nrcctblRowHvacDry"     ZnSys:nrccHvacDry08cRef =
      {  if ( IfValidAnd( ClgEffUnitRpt == "SEER/EER" ) ) then  CreateComp( nrccHvacDry08c, Format( "%s HvacDry08c", Name ) )
         else  UNDEFINED
         endif  }
   "Set ZnSys:nrccHvacDry08cRef:noXMLoutput_ZnSysRef"    ZnSys:nrccHvacDry08cRef:noXMLoutput_ZnSysRef = {  Name  }


   "Create nrcctblRowHvacDry object for each pertinent VRFSys"     VRFSys:nrcctblRowHvacDryRef =
      {  if (LocalCompAssigned( nrcctblRowHvacDryRef ) > 0 .OR.
             ComponentCount( nrccTableHvacDry ) < 1 .OR.
             ComponentCount( VRFSys ) < 1) then  UNDEFINED
         else  CreateComp( nrcctblRowHvacDry, Format( "%s HvacDry tblRow", Name ) )
         endif  }
   "Set VRFSys:nrcctblRowHvacDryRef:noXMLoutput_VRFSysRef"    VRFSys:nrcctblRowHvacDryRef:noXMLoutput_VRFSysRef = 
      {  if (ComponentCount( VRFSys ) < 1) then  UNDEFINED
         else Name
         endif  }

   "Create nrccHvacDry08b child object for each VRFSys nrcctblRowHvacDry"     VRFSys:nrccHvacDry08bRef =
      {  if (ComponentCount( VRFSys ) < 1) then  UNDEFINED
         else  CreateComp( nrccHvacDry08b, Format( "%s HvacDry08b", Name ) )
         endif  }
   "Set VRFSys:nrccHvacDry08bRef:noXMLoutput_VRFSysRef"    VRFSys:nrccHvacDry08bRef:noXMLoutput_VRFSysRef = {  Name  }


  ; Rule to Delete empty nrccSection_HvacDry
   "DELETE empty nrccTableHvacDry object"
      nrccSection_HvacDry:Action   = {  if (ComponentCount( nrcctblRowHvacDry ) < 1) then  DeleteComp()  else  UNCHANGED  endif }


   ; setup Fan references to be used in populating Fan data in table - SAC 06/28/21
   ; Also used in populating Section_Zone - RJH 09/30/21
   "Set ZnSys:RptFanRef"   ZnSys:RptFanRef = 
      {  MaxChildComp( Fan:FlowCap )  }
   "Set AirSeg:RptFanRef"  AirSeg:RptFanRef = 
      {  MaxChildComp( Fan:FlowCap )  }

   "Create nrccSection_Fan object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathMech == "Performance") 
         then CreateChildren( nrccSection_Fan, 1, "Fan" )
         else UNCHANGED 
         endif }
   "Create nrccSection_Fan nrccTableFan object"              nrccSection_Fan:Action  =
      {  CreateChildren( nrccTableFan, 1, "Fan table" )  }
   "Create nrcctblRowFan object for each pertinent AirSys"     AirSys:nrcctblRowFanRef =
      {  if (LocalCompAssigned( nrcctblRowFanRef ) > 0 .OR.
             ComponentCount( nrccTableFan ) < 1 .OR.
             ComponentCount( AirSys ) < 1 .OR.
             IfValidAnd( Type == "Exhaust" ) .OR.
             IfValidAnd( BaseSysNum > 0 ) .OR.
             IfValidAnd( ExcludeFromRpt > 0 ) ) then  UNDEFINED
         else  CreateComp( nrcctblRowFan, Format( "%s Fan tblRow", Name ) )
         endif  }
   "Set AirSys:nrcctblRowFanRef:noXMLoutput_AirSysRef"    AirSys:nrcctblRowFanRef:noXMLoutput_AirSysRef = 
      {  if (ComponentCount( AirSys ) < 1) then  UNDEFINED
         else Name
         endif  }
   "Create nrcctblRowFan object for each pertinent ZnSys"     ZnSys:nrcctblRowFanRef =
      {  if (LocalCompAssigned( nrcctblRowFanRef ) > 0 .OR.
             ComponentCount( nrccTableFan ) < 1 .OR.
             ComponentCount( ZnSys ) < 1 .OR.
             IfValidAnd( Type == "Exhaust" ) .OR.
             IfValidAnd( Type == "VentilationOnly" ) .OR.
             IfValidAnd( Type == "Baseboard" ) .OR.
             IfValidAnd( Type == "PassiveBeam" ) .OR.
             IfValidAnd( Type == "Radiant" ) .OR.
             (IfValidAnd( Type != "Furnace" ) .AND. IfValidAnd( RptFanRef:IsDummy == 0 )) .OR.
             IfValidAnd( BaseSysNum > 0 ) .OR.
             IfValidAnd( IsActiveBeam > 0 ) .OR.
             IfValidAnd( ExcludeFromRpt > 0 ) ) then  UNDEFINED
         else  CreateComp( nrcctblRowFan, Format( "%s Fan tblRow", Name ) )
         endif  }
   "Set ZnSys:nrcctblRowFanRef:noXMLoutput_ZnSysRef"    ZnSys:nrcctblRowFanRef:noXMLoutput_ZnSysRef = 
      {  if (ComponentCount( ZnSys ) < 1) then  UNDEFINED
         else Name
         endif  }
  ; Rule to Delete empty nrccSection_Fan
   "DELETE empty nrccSection_Fan object"
      nrccSection_Fan:Action   = {  if (ComponentCount( nrcctblRowFan ) < 1) then  DeleteComp()  else  UNCHANGED  endif }


   ; setup Fan Parent Report properties to be used in populating FanExh data in table - RJH 06/30/21
   "Set Fan:ParentSysNameRpt"   Fan:ParentSysNameRpt = 
      {  if (Parent( Type ) == "Exhaust" .AND. IfValidAnd( ParentComp == "AirSys" ))
            then Parent2( Name )
         else if (Parent( Type ) == "Exhaust" .AND. IfValidAnd( ParentComp == "ZnSys" ))
            then Parent( Name )
         else UNDEFINED
         endif endif }
   "Set Fan:ParentSysZnServedAsExhRpt"   Fan:ParentSysZnServedAsExhRpt = 
      {  if (Parent( Type ) == "Exhaust" .AND. IfValidAnd( ParentComp == "AirSys" ))
            then Parent2( ZnServedAsExhSys )
         else if (Parent( Type ) == "Exhaust" .AND. IfValidAnd( ParentComp == "ZnSys" ))
            then Parent( ZnServedAsExhSys )
         else UNDEFINED
         endif endif }

   "Create nrccSection_FanExh object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathMech == "Performance") 
         then CreateChildren( nrccSection_FanExh, 1, "FanExh" )
         else UNCHANGED 
         endif }
   "Create nrccSection_FanExh nrccTableFan object"              nrccSection_FanExh:Action  =
      {  CreateChildren( nrccTableFanExh, 1, "FanExh table" )  }
   "Create nrcctblRowFanExh object for each pertinent Fan"     Fan:nrcctblRowFanExhRef =
      {  if (LocalCompAssigned( nrcctblRowFanExhRef ) > 0 .OR.
             ComponentCount( nrccTableFanExh ) < 1 .OR.
             ComponentCount( Fan ) < 1 .OR.
             IfValidAnd(Parent(Type) != "Exhaust") .OR.
             (IfValidAnd(ParentComp == "AirSys") .AND. IfValidAnd(Parent2(IsHlthCareSys) > 0)) .OR.
             (IfValidAnd(ParentComp == "ZnSys") .AND. IfValidAnd(Parent(ExcludeFromRpt) > 0) ) ) then  UNDEFINED
; BaseSysNum throws an error            (IfValidAnd(ParentComp == "ZnSys") .AND. IfValidAnd(Parent(ExcludeFromRpt) > 0) .AND. IfValidAnd(Parent(BaseSysNum) > 0)) ) then  UNDEFINED
         else  CreateComp( nrcctblRowFanExh, Format( "%s FanExh tblRow", Name ) )
         endif  }
   "Set Fan:nrcctblRowFanExhRef:noXMLoutput_FanExhRef"    Fan:nrcctblRowFanExhRef:noXMLoutput_FanExhRef = 
      {  if (ComponentCount( Fan ) < 1 .OR.
             Parent( Type ) != "Exhaust") then  UNDEFINED
         else Name
         endif  }
  ; Rule to Delete empty nrccSection_FanExh
   "DELETE empty nrccSection_FanExh object"
      nrccSection_FanExh:Action   = {  if (ComponentCount( nrcctblRowFanExh ) < 1) then  DeleteComp()  else  UNCHANGED  endif }


   ; setup Equipment Parent Names to be used in populating HVACWet data in table
   "Set Blr:ParentSysNameRpt"   Blr:ParentSysNameRpt = 
      {  Parent( Name )  }
   "Set Chlr:ParentSysNameRpt"   Chlr:ParentSysNameRpt = 
      {  Parent( Name )  }
   "Set HX:ParentSysNameRpt"   HX:ParentSysNameRpt = 
      {  Parent( Name )  }
   "Set HtRej:ParentSysNameRpt"   HtRej:ParentSysNameRpt = 
      {  Parent( Name )  }
   "Set ThrmlEngyStor:ParentSysNameRpt"   ThrmlEngyStor:ParentSysNameRpt = 
      {  Parent( Name )  }


   "Create nrccSection_HvacWet object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathMech == "Performance") 
         then CreateChildren( nrccSection_HvacWet, 1, "HvacWet" )
         else UNCHANGED 
         endif }
   "Create nrccSection_HvacWet nrccTableHvacWet object"              nrccSection_HvacWet:Action  =
      {  CreateChildren( nrccTableHvacWet, 1, "HvacWet table" )  }
   "Create nrcctblRowHvacWet object for each pertinent Blr"     Blr:nrcctblRowHvacWetRef =
      {  if (LocalCompAssigned( nrcctblRowHvacWetRef ) > 0 .OR.
             ComponentCount( nrccTableHvacWet ) < 1 .OR.
             ComponentCount( Blr ) < 1 .OR.
             Parent( IsBaseSys ) > 0) then  UNDEFINED
         else  CreateComp( nrcctblRowHvacWet, Format( "%s HvacWet tblRow", Name ) )
         endif  }
   "Set Blr:nrcctblRowHvacWetRef:noXMLoutput_BlrRef"    Blr:nrcctblRowHvacWetRef:noXMLoutput_BlrRef = 
      {  if (ComponentCount( Blr ) < 1) then  UNDEFINED
         else Name
         endif  }
   "Create nrcctblRowHvacWet object for each pertinent Chlr"     Chlr:nrcctblRowHvacWetRef =
      {  if (LocalCompAssigned( nrcctblRowHvacWetRef ) > 0 .OR.
             ComponentCount( nrccTableHvacWet ) < 1 .OR.
             ComponentCount( Chlr ) < 1 .OR.
             Parent( IsBaseSys ) > 0) then  UNDEFINED
         else  CreateComp( nrcctblRowHvacWet, Format( "%s HvacWet tblRow", Name ) )
         endif  }
   "Set Chlr:nrcctblRowHvacWetRef:noXMLoutput_ChlrRef"    Chlr:nrcctblRowHvacWetRef:noXMLoutput_ChlrRef = 
      {  if (ComponentCount( Chlr ) < 1) then  UNDEFINED
         else Name
         endif  }
   "Create nrcctblRowHvacWet object for each pertinent HX"     HX:nrcctblRowHvacWetRef =
      {  if (LocalCompAssigned( nrcctblRowHvacWetRef ) > 0 .OR.
             ComponentCount( nrccTableHvacWet ) < 1 .OR.
             ComponentCount( HX ) < 1 .OR.
             Parent( IsBaseSys ) > 0) then  UNDEFINED
         else  CreateComp( nrcctblRowHvacWet, Format( "%s HvacWet tblRow", Name ) )
         endif  }
   "Set HX:nrcctblRowHvacWetRef:noXMLoutput_HXRef"    HX:nrcctblRowHvacWetRef:noXMLoutput_HXRef = 
      {  if (ComponentCount( HX ) < 1) then  UNDEFINED
         else Name
         endif  }
   "Create nrcctblRowHvacWet object for each pertinent HtRej"     HtRej:nrcctblRowHvacWetRef =
      {  if (LocalCompAssigned( nrcctblRowHvacWetRef ) > 0 .OR.
             ComponentCount( nrccTableHvacWet ) < 1 .OR.
             ComponentCount( HtRej ) < 1 .OR.
             Parent( IsBaseSys ) > 0) then  UNDEFINED
         else  CreateComp( nrcctblRowHvacWet, Format( "%s HvacWet tblRow", Name ) )
         endif  }
   "Set HtRej:nrcctblRowHvacWetRef:noXMLoutput_HtRejRef"    HtRej:nrcctblRowHvacWetRef:noXMLoutput_HtRejRef = 
      {  if (ComponentCount( HtRej ) < 1) then  UNDEFINED
         else Name
         endif  }
   "Create nrcctblRowHvacWet object for each pertinent ThrmlEngyStor"     ThrmlEngyStor:nrcctblRowHvacWetRef =
      {  if (LocalCompAssigned( nrcctblRowHvacWetRef ) > 0 .OR.
             ComponentCount( nrccTableHvacWet ) < 1 .OR.
             ComponentCount( ThrmlEngyStor ) < 1 .OR.
             Parent( IsBaseSys ) > 0) then  UNDEFINED
         else  CreateComp( nrcctblRowHvacWet, Format( "%s HvacWet tblRow", Name ) )
         endif  }
   "Set ThrmlEngyStor:nrcctblRowHvacWetRef:noXMLoutput_ThrmlEngyStorRef"    ThrmlEngyStor:nrcctblRowHvacWetRef:noXMLoutput_ThrmlEngyStorRef = 
      {  if (ComponentCount( ThrmlEngyStor ) < 1) then  UNDEFINED
         else Name
         endif  }
  ; Rule to Delete empty nrccSection_HvacWet
   "DELETE empty nrccSection_HvacWet object"
      nrccSection_HvacWet:Action   = {  if (ComponentCount( nrcctblRowHvacWet ) < 1) then  DeleteComp()  else  UNCHANGED  endif }


   ; setup Equipment Parent Name and Status to be used in populating Pump data in table
   "Set Pump:ParentNameRpt"   Pump:ParentNameRpt = 
      {  if (ParentComponentType() = "FluidSeg") 
         then Parent2( Name )
         else Parent( Name )
         endif }
   "Set Pump:ParentStatusRpt"   Pump:ParentStatusRpt = 
      {  if (ParentComponentType() = "FluidSeg") 
         then Parent2( Status )
         else Parent( Status )
         endif }


   "Create nrccSection_Pump object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathMech == "Performance") 
         then CreateChildren( nrccSection_Pump, 1, "Pump" )
         else UNCHANGED 
         endif }
   "Create nrccSection_Pump nrccTablePump object"              nrccSection_Pump:Action  =
      {  CreateChildren( nrccTablePump, 1, "Pump table" )  }
   "Create nrcctblRowPump object for each pertinent Pump"     Pump:nrcctblRowPumpRef =
      {  if (LocalCompAssigned( nrcctblRowPumpRef ) > 0 .OR.
             ComponentCount( nrccTablePump ) < 1 .OR.
             ComponentCount( Pump ) < 1 .OR.
             Parent2( IsBaseSys ) > 0) then  UNDEFINED
         else  CreateComp( nrcctblRowPump, Format( "%s Pump tblRow", Name ) )
         endif  }
   "Set Pump:nrcctblRowPumpRef:noXMLoutput_PumpRef"    Pump:nrcctblRowPumpRef:noXMLoutput_PumpRef = 
      {  if (ComponentCount( Pump ) < 1) then  UNDEFINED
         else Name
         endif  }
  ; Rule to Delete empty nrccSection_Pump
   "DELETE empty nrccSection_Pump object"
      nrccSection_Pump:Action   = {  if (ComponentCount( nrcctblRowPump ) < 1) then  DeleteComp()  else  UNCHANGED  endif }


   "Create nrccSection_HvacSpec object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathMech == "Performance") 
         then CreateChildren( nrccSection_HvacSpec, 1, "HVAC Spec" )
         else UNCHANGED 
         endif }
   "Create nrccSection_HvacSpec nrccTableHvacSpec object"              nrccSection_HvacSpec:Action  =
      {  CreateChildren( nrccTableHvacSpec, 1, "HVAC Spec table" )  }

   "Create nrcctblRowHvacSpec object for each pertinent AirSys"     AirSys:nrcctblRowHvacSpecRef =
      {  if (LocalCompAssigned( nrcctblRowHvacSpecRef ) > 0 .OR.
             ComponentCount( nrccTableHvacSpec ) < 1 .OR.
             IfValidAnd( Type == "Exhaust" ) .OR.
             IfValidAnd( BaseSysNum > 0 ) .OR.
             IfValidAnd( IsHlthCareSys > 0 ) .OR.
             IfValidAnd( ExcludeFromRpt > 0 ) .OR.
             (SysCtrlRpt[1] == "NA" .AND. SysCtrlRpt[2] == "NA" .AND. SysCtrlRpt[3] == "NA" .AND. SysCtrlRpt[4] == "NA" .AND. SysCtrlRpt[5] == "NA" .AND. 
              SysCtrlRpt[6] == "NA" .AND. SysCtrlRpt[7] == "NA" .AND. SysCtrlRpt[8] == "NA" .AND. SysCtrlRpt[9] == "NA" .AND. SysCtrlRpt[10] == "NA" .AND. 
              OperableWinInterlockRpt == "NA") ) then  UNDEFINED
         else if (SysCtrlRpt[1] != "NA" .OR. SysCtrlRpt[2] != "NA" .OR. SysCtrlRpt[3] != "NA" .OR. SysCtrlRpt[4] != "NA" .OR. SysCtrlRpt[5] != "NA" .OR. 
                  SysCtrlRpt[6] != "NA" .OR. SysCtrlRpt[7] != "NA" .OR. SysCtrlRpt[8] != "NA" .OR. SysCtrlRpt[9] != "NA" .OR. SysCtrlRpt[10] != "NA" .OR. 
                  OperableWinInterlockRpt != "NA") 
              then CreateComp( nrcctblRowHvacSpec, Format( "%s HvacSpec tblRow", Name ) )
              else UNDEFINED
              endif
         endif  }
   "Set AirSys:nrcctblRowHvacSpecRef:noXMLoutput_AirSysRef"    AirSys:nrcctblRowHvacSpecRef:noXMLoutput_AirSysRef = {  Name }
   "Create nrccHvacSpec04Choice child object for each AirSys nrcctblRowHvacSpec"     AirSys:nrccHvacSpec04ChoiceRef =
      {  CreateComp( nrccHvacSpec04Choice, Format( "%s HvacSpec04Choice", Name ) )  }
   "Set AirSys:nrccHvacSpec04ChoiceRef:noXMLoutput_AirSysRef"    AirSys:nrccHvacSpec04ChoiceRef:noXMLoutput_AirSysRef = {  Name  }
   "Create nrccHvacSpec04 child object for each AirSys nrcctblRowHvacSpec"     AirSys:nrccHvacSpec04Ref =
      {  CreateComp( nrccHvacSpec04, Format( "%s HvacSpec04", Name ) ) }
   "Set AirSys:nrccHvacSpec04Ref:noXMLoutput_AirSysRef"    AirSys:nrccHvacSpec04Ref:noXMLoutput_AirSysRef = {  Name  }

   "Create nrcctblRowHvacSpec object for each pertinent ZnSys"     ZnSys:nrcctblRowHvacSpecRef =
      {  if (LocalCompAssigned( nrcctblRowHvacSpecRef ) > 0 .OR.
             ComponentCount( nrccTableHvacSpec ) < 1 .OR.
             IFValidAnd( Type = "VRF" ) .OR.
             (SysCtrlRpt[1] == "NA" .AND. SysCtrlRpt[2] == "NA" .AND. SysCtrlRpt[3] == "NA" .AND. OperableWinInterlockRpt == "NA") ) then  UNDEFINED
         else  CreateComp( nrcctblRowHvacSpec, Format( "%s HvacSpec tblRow", Name ) )
         endif  }
   "Set ZnSys:nrcctblRowHvacSpecRef:noXMLoutput_ZnSysRef"    ZnSys:nrcctblRowHvacSpecRef:noXMLoutput_ZnSysRef = {  Name  }
   "Create nrccHvacSpec04Choice child object for each pertinent ZnSys nrcctblRowHvacSpec"     ZnSys:nrccHvacSpec04ChoiceRef =
      {  if (IFValidAnd( Type = "VRF" )) then  UNDEFINED
         else  CreateComp( nrccHvacSpec04Choice, Format( "%s HvacSpec04Choice", Name ) )
         endif  }
   "Set ZnSys:nrccHvacSpec04ChoiceRef:noXMLoutput_ZnSysRef"    ZnSys:nrccHvacSpec04ChoiceRef:noXMLoutput_ZnSysRef = {  Name  }
   "Create nrccHvacSpec04 child object for each pertinent ZnSys nrcctblRowHvacSpec"     ZnSys:nrccHvacSpec04Ref =
      {  if (IFValidAnd( Type = "VRF" )) then  UNDEFINED
         else  CreateComp( nrccHvacSpec04, Format( "%s HvacSpec04", Name ) )
         endif  }
   "Set ZnSys:nrccHvacSpec04Ref:noXMLoutput_ZnSysRef"    ZnSys:nrccHvacSpec04Ref:noXMLoutput_ZnSysRef = {  Name  }

   "Create nrcctblRowHvacSpec object for each pertinent VRFSys"     VRFSys:nrcctblRowHvacSpecRef =
      {  if (LocalCompAssigned( nrcctblRowHvacSpecRef ) > 0 .OR.
             ComponentCount( nrccTableHvacSpec ) < 1 .OR.
             (SysCtrlRpt == "NA" .AND. OperableWinInterlockRpt == "NA") ) then  UNDEFINED
         else  CreateComp( nrcctblRowHvacSpec, Format( "%s HvacSpec tblRow", Name ) )
         endif  }
   "Set VRFSys:nrcctblRowHvacSpecRef:noXMLoutput_VRFSysRef"    VRFSys:nrcctblRowHvacSpecRef:noXMLoutput_VRFSysRef = {  Name  } 
   "Create nrccHvacSpec04Choice child object for each pertinent VRFSys nrcctblRowHvacSpec"     VRFSys:nrccHvacSpec04ChoiceRef =
      {  CreateComp( nrccHvacSpec04Choice, Format( "%s HvacSpec04Choice", Name ) )  }
   "Set VRFSys:nrccHvacSpec04ChoiceRef:noXMLoutput_VRFSysRef"    VRFSys:nrccHvacSpec04ChoiceRef:noXMLoutput_VRFSysRef = {  Name  }
   "Create nrccHvacSpec04 child object for each pertinent VRFSys nrcctblRowHvacSpec"     VRFSys:nrccHvacSpec04Ref =
      {  CreateComp( nrccHvacSpec04, Format( "%s HvacSpec04", Name ) )  }
   "Set VRFSys:nrccHvacSpec04Ref:noXMLoutput_VRFSysRef"    VRFSys:nrccHvacSpec04Ref:noXMLoutput_VRFSysRef = {  Name  }

   "Create nrcctblRowHvacSpec object for each pertinent FluidSys"     FluidSys:nrcctblRowHvacSpecRef =
      {  if (LocalCompAssigned( nrcctblRowHvacSpecRef ) > 0 .OR.
             ComponentCount( nrccTableHvacSpec ) < 1 .OR.
             IsBaseSys > 0) then  UNDEFINED
         else if (SysCtrlRpt[1] != "NA" .OR. SysCtrlRpt[2] != "NA") 
              then CreateComp( nrcctblRowHvacSpec, Format( "%s HvacSpec tblRow", Name ) )
              else UNDEFINED
              endif
         endif  }
   "Set FluidSys:nrcctblRowHvacSpecRef:noXMLoutput_FluidSysRef"    FluidSys:nrcctblRowHvacSpecRef:noXMLoutput_FluidSysRef = {  Name  }
   "Create nrccHvacSpec04Choice child object for each pertinent FluidSys nrcctblRowHvacSpec"     FluidSys:nrccHvacSpec04ChoiceRef =
      {  CreateComp( nrccHvacSpec04Choice, Format( "%s HvacSpec04Choice", Name ) ) }
   "Set FluidSys:nrccHvacSpec04ChoiceRef:noXMLoutput_FluidSysRef"    FluidSys:nrccHvacSpec04ChoiceRef:noXMLoutput_FluidSysRef = {  Name  }
   "Create nrccHvacSpec04 child object for each pertinent FluidSys nrcctblRowHvacSpec"     FluidSys:nrccHvacSpec04Ref =
      {  CreateComp( nrccHvacSpec04, Format( "%s HvacSpec04", Name ) ) }
   "Set FluidSys:nrccHvacSpec04Ref:noXMLoutput_FluidSysRef"    FluidSys:nrccHvacSpec04Ref:noXMLoutput_FluidSysRef = {  Name  }

  ; Rule to Delete empty nrccHvacSpec04 and set nrccHvacSpec04Choice:HvacSpec04_NotApplicableMessage in RULELIST "NRCCPRF_ap_PostSim"

  ; Rule to Delete empty nrccSection_HvacSpec
   "DELETE empty nrccTableHvacSpec object"
      nrccSection_HvacSpec:Action   = {  if (ComponentCount( nrcctblRowHvacSpec ) < 1) then  DeleteComp()  else  UNCHANGED  endif }


   "Create nrccSection_VentNR object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathMech == "Performance") 
         then CreateChildren( nrccSection_VentNR, 1, "Vent" )
         else UNCHANGED 
         endif }
   "Create nrccSection_VentNR nrccTableVentNR object"              nrccSection_VentNR:Action  =
      {  CreateChildren( nrccTableVentNR, 1, "VentNR table" )  }
   "Create nrcctblRowVentNR object for each pertinent ThrmlZn"     ThrmlZn:nrcctblRowVentNRRef =
      {  if (LocalCompAssigned( nrcctblRowVentNRRef ) > 0 .OR.
             ComponentCount( nrccTableVentNR ) < 1 .OR.
             ComponentCount( ThrmlZn ) < 1 .OR.
             IFValidAnd( CondgStatus = 0 ) .OR.
             IFValidAnd( HasUnknownHVAC != 0 ) .OR.
             IFValidAnd( OccClass != "Nonresidential") ) then  UNDEFINED
         else  CreateComp( nrcctblRowVentNR, Format( "%s VentNR tblRow", Name ) )
         endif  }
   "Set ThrmlZn:nrcctblRowVentNRRef:noXMLoutput_ThrmlZnRef"    ThrmlZn:nrcctblRowVentNRRef:noXMLoutput_ThrmlZnRef = 
      {  if (ComponentCount( ThrmlZn ) < 1) then  UNDEFINED
         else Name
         endif  }
  ; Rule to Delete empty nrccSection_VentNR
   "DELETE empty nrccSection_VentNR object"
      nrccSection_VentNR:Action   = {  if (ComponentCount( nrcctblRowVentNR ) < 1) then  DeleteComp()  else  UNCHANGED  endif }


   "Create nrccSection_VentRes object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathMech == "Performance") 
         then CreateChildren( nrccSection_VentRes, 1, "VentRes" )
         else UNCHANGED 
         endif }
   "Create nrccSection_VentRes nrccTableVentRes object"              nrccSection_VentRes:Action  =
      {  CreateChildren( nrccTableVentRes, 1, "VentRes table" )  }
   "Create nrcctblRowVentRes object for each pertinent ThrmlZn"     ThrmlZn:nrcctblRowVentResRef =
      {  if (LocalCompAssigned( nrcctblRowVentResRef ) > 0 .OR.
             ComponentCount( nrccTableVentRes ) < 1 .OR.
             ComponentCount( ThrmlZn ) < 1 .OR.
             IFValidAnd( CondgStatus = 0 ) .OR.
             IFValidAnd( HasUnknownHVAC != 0 ) .OR.
             OccClass != "Residential") then  UNDEFINED
         else  CreateComp( nrcctblRowVentRes, Format( "%s VentRes tblRow", Name ) )
         endif  }
   "Set ThrmlZn:nrcctblRowVentResRef:noXMLoutput_ThrmlZnRef"    ThrmlZn:nrcctblRowVentResRef:noXMLoutput_ThrmlZnRef = 
      {  if (ComponentCount( ThrmlZn ) < 1) then  UNDEFINED
         else Name
         endif  }
  ; Rule to Delete empty nrccSection_VentRes
   "DELETE empty nrccSection_VentRes object"
      nrccSection_VentRes:Action   = {  if (ComponentCount( nrcctblRowVentRes ) < 1) then  DeleteComp()  else  UNCHANGED  endif }


   "Create nrccSection_Zone object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathMech == "Performance") 
         then CreateChildren( nrccSection_Zone, 1, "Zone" )
         else UNCHANGED 
         endif }
   "Create nrccSection_Zone nrccTableZone object"              nrccSection_Zone:Action  =
      {  CreateChildren( nrccTableZone, 1, "Zone table" )  }

   "Create nrcctblRowZone object for each pertinent TrmlUnit"     TrmlUnit:nrcctblRowZoneRef =
      {  if (LocalCompAssigned( nrcctblRowZoneRef ) > 0 .OR.
             ComponentCount( nrccTableZone ) < 1 .OR.
             ComponentCount( TrmlUnit ) < 1) then  UNDEFINED
         else  if (IfValidAnd(Parent(BaseSysNum) = 0) .OR. IfValidAnd(Parent(IsHlthCareSys) = 0))
               then CreateComp( nrcctblRowZone, Format( "%s Zone tblRow", Name ) )
               else UNDEFINED
               endif
         endif  }
   "Set TrmlUnit:nrcctblRowZoneRef:noXMLoutput_TrmlUnitRef"    TrmlUnit:nrcctblRowZoneRef:noXMLoutput_TrmlUnitRef = 
      {  if (ComponentCount( TrmlUnit ) < 1) then  UNDEFINED
         else Name
         endif  }

   "Create nrcctblRowZone object for each pertinent ZnSys"     ZnSys:nrcctblRowZoneRef =
      {  if (LocalCompAssigned( nrcctblRowZoneRef ) > 0 .OR.
             ComponentCount( nrccTableZone ) < 1 .OR.
             ComponentCount( ZnSys ) < 1 .OR.
             IFValidAnd( Type = "Baseboard" ) .OR.
             IFValidAnd( Type = "Exhaust" ) ) then  UNDEFINED
         else  if (IfValidAnd(BaseSysNum = 0) .OR. IfValidAnd(IsHlthCareSys = 0))
               then CreateComp( nrcctblRowZone, Format( "%s Zone tblRow", Name ) )
               else UNDEFINED
               endif
         endif  }
   "Set ZnSys:nrcctblRowZoneRef:noXMLoutput_ZnSysRef"    ZnSys:nrcctblRowZoneRef:noXMLoutput_ZnSysRef = 
      {  if (ComponentCount( ZnSys ) < 1) then  UNDEFINED
         else Name
         endif  }

  ; Rule to Delete empty nrccSection_Zone
   "DELETE empty nrccTableZone object"
      nrccSection_Zone:Action   = {  if (ComponentCount( nrcctblRowZone ) < 1) then  DeleteComp()  else  UNCHANGED  endif }


   "Create nrccSection_Evap object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathMech == "Performance") 
         then CreateChildren( nrccSection_Evap, 1, "Evap" )
         else UNCHANGED 
         endif }
   "Create nrccSection_Evap nrccTableEvap object"           nrccSection_Evap:Action  =
      {  CreateChildren( nrccTableEvap, 1, "NRCC Evap table" )  }
   "Create nrcctblRowEvap object for each pertinent EvapClr"     EvapClr:nrcctblRowEvapRef =
      {  if (LocalCompAssigned( nrcctblRowEvapRef ) > 0 .OR.
             ComponentCount( nrccTableEvap ) < 1 .OR.
             ComponentCount( EvapClr ) < 1 ) then  UNDEFINED
         else  if (IfValidAnd(SysCnt > 0))
               then CreateComp( nrcctblRowEvap, Format( "%s Evap tblRow", Name ) )
               else UNDEFINED
               endif
         endif  }
   "Set EvapClr:nrcctblRowEvapRef:noXMLoutput_EvapClrRef"    EvapClr:nrcctblRowEvapRef:noXMLoutput_EvapClrRef = 
      {  if (ComponentCount( EvapClr ) < 1) then  UNDEFINED
         else Name
         endif  }
  ; Rule to Delete empty nrccSection_Evap
   "DELETE empty nrccSection_Evap object"
      nrccSection_Evap:Action   = {  if (ComponentCount( nrcctblRowEvap ) < 1) then  DeleteComp()  else  UNCHANGED  endif }


   "Create nrccSection_HtRecovery object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathMech == "Performance") 
         then CreateChildren( nrccSection_HtRecovery, 1, "HtRecovery" )
         else UNCHANGED 
         endif }
   "Create nrccSection_HtRecovery nrccTableHtRecovery object"              nrccSection_HtRecovery:Action  =
      {  CreateChildren( nrccTableHtRecovery, 1, "HtRecovery table" )  }

   "Create nrcctblRowHtRecovery object for each pertinent AirSys"     AirSys:nrcctblRowHtRecoveryRef =
      {  if (LocalCompAssigned( nrcctblRowHtRecoveryRef ) > 0 .OR.
             ComponentCount( nrccTableHtRecovery ) < 1 .OR.
             ComponentCount( AirSys ) < 1 .OR.
             BaseSysNum != 0 .OR.
             Type == "Exhaust" .OR.
             LocalCompAssigned( HtRcvryRef ) < 1) then  UNDEFINED
         else  CreateComp( nrcctblRowHtRecovery, Format( "%s HtRecovery tblRow", Name ) )
         endif  }
   "Set AirSys:nrcctblRowHtRecoveryRef:noXMLoutput_AirSysRef"    AirSys:nrcctblRowHtRecoveryRef:noXMLoutput_AirSysRef = 
      {  if (ComponentCount( AirSys ) < 1 .OR.
             BaseSysNum != 0 .OR.
             Type = "Exhaust" .OR.
             LocalCompAssigned( HtRcvryRef ) < 1) then  UNDEFINED
         else Name
         endif  }

   "Create nrcctblRowHtRecovery object for each pertinent ZnSys"     ZnSys:nrcctblRowHtRecoveryRef =
      {  if (LocalCompAssigned( nrcctblRowHtRecoveryRef ) > 0 .OR.
             ComponentCount( nrccTableHtRecovery ) < 1 .OR.
             ComponentCount( ZnSys ) < 1 .OR.
             BaseSysNum != 0 .OR.
             Type == "Exhaust" .OR.
             Type != "VentilationOnly" .OR.
             IFValidAnd( SysCtrlRpt[1] != "Heat Recovery" ) ) then  UNDEFINED
         else  CreateComp( nrcctblRowHtRecovery, Format( "%s HtRecovery tblRow", Name ) )
         endif  }
   "Set ZnSys:nrcctblRowHtRecoveryRef:noXMLoutput_ZnSysRef"    ZnSys:nrcctblRowHtRecoveryRef:noXMLoutput_ZnSysRef = 
      {  if (ComponentCount( ZnSys ) < 1 .OR.
             BaseSysNum != 0 .OR.
             Type == "Exhaust" .OR.
             Type != "VentilationOnly" .OR.
             IFValidAnd( SysCtrlRpt[1] != "Heat Recovery" ) ) then  UNDEFINED
         else Name
         endif  }

  ; Rule to Delete empty nrccSection_HtRecovery
   "DELETE empty nrccTableHtRecovery object"
      nrccSection_HtRecovery:Action   = {  if (ComponentCount( nrcctblRowHtRecovery ) < 1) then  DeleteComp()  else  UNCHANGED  endif }


   ; setup ResWtrHtr Parent CentralRecircType and CentralSysType to be used in triggering Section_Water table rows
   "Set ResWtrHtr:ParentCentralRecircTypeStr"   ResWtrHtr:ParentCentralRecircTypeStr = 
      {  EnumString( CentralRecircType )  }
   "Set ResWtrHtr:ParentCentralSysTypeStr"   ResWtrHtr:ParentCentralSysTypeStr = 
      {  EnumString( CentralSysType )  }

   "Create nrccSection_Water object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathDHW == "Performance") 
         then CreateChildren( nrccSection_Water, 1, "NRCC Water" )
         else UNCHANGED 
         endif }
   "Create nrccSection_Water nrccTableWater object"              nrccSection_Water:Action  =
      {  CreateChildren( nrccTableWater, 1, "NRCC Water table" )  }
   "Create nrcctblRowWater object for each pertinent ResWtrHtr"     ResWtrHtr:nrcctblRowWaterRef =
      {  if (LocalCompAssigned( nrcctblRowWaterRef ) > 0 .OR.
             ComponentCount( nrccTableWater ) < 1 .OR.
             ComponentCount( ResWtrHtr ) < 1) then  UNDEFINED
         else if (ParentCentralRecircTypeStr == "Non-Central" .OR. ParentCentralSysTypeStr != "HPWH") 
              then CreateComp( nrcctblRowWater, Format( "%s Water tblRow", Name ) )
              else UNDEFINED
              endif
         endif  }
   "Set ResWtrHtr:nrcctblRowWaterRef:noXMLoutput_ResWtrHtrRef"    ResWtrHtr:nrcctblRowWaterRef:noXMLoutput_ResWtrHtrRef = 
      {  if (ComponentCount( ResWtrHtr ) < 1) then  UNDEFINED
         else Name
         endif  }
   "Create nrcctblRowWater object for each pertinent WtrHtr"     WtrHtr:nrcctblRowWaterRef =
      {  if (LocalCompAssigned( nrcctblRowWaterRef ) > 0 .OR.
             ComponentCount( nrccTableWater ) < 1 .OR.
             ComponentCount( WtrHtr ) < 1) then  UNDEFINED
         else  CreateComp( nrcctblRowWater, Format( "%s Water tblRow", Name ) )
         endif  }
   "Set WtrHtr:nrcctblRowWaterRef:noXMLoutput_WtrHtrRef"    WtrHtr:nrcctblRowWaterRef:noXMLoutput_WtrHtrRef = 
      {  if (ComponentCount( WtrHtr ) < 1) then  UNDEFINED
         else Name
         endif  }
  ; Rule to Delete empty nrccSection_Water
   "DELETE empty nrccTableWater object"
      nrccSection_Water:Action   = {  if (ComponentCount( nrcctblRowWater ) < 1) then  DeleteComp()  else  UNCHANGED  endif }




   ; setup ResDHWSys child ResWtrHtr:Name to be used in populating nrccSection_WaterMF data
   "Set ResDHWSys:ResWtrHtrName[1]"   ResDHWSys:ResWtrHtrName[1] = 
      {  if (ChildCount( ResWtrHtr ) > 0) 
         then  ChildRef  ( ResWtrHtr:Name, 1 )
         else UNDEFINED
         endif  }
   "Set ResDHWSys:ResWtrHtrName[2]"   ResDHWSys:ResWtrHtrName[2] = 
      {  if (ChildCount( ResWtrHtr ) > 1) 
         then  ChildRef  ( ResWtrHtr:Name, 2 )
         else UNDEFINED
         endif  }
   "Set ResDHWSys:ResWtrHtrName[3]"   ResDHWSys:ResWtrHtrName[3] = 
      {  if (ChildCount( ResWtrHtr ) > 2) 
         then  ChildRef  ( ResWtrHtr:Name, 3 )
         else UNDEFINED
         endif  }
   "Set ResDHWSys:ResWtrHtrName[4]"   ResDHWSys:ResWtrHtrName[4] = 
      {  if (ChildCount( ResWtrHtr ) > 3) 
         then  ChildRef  ( ResWtrHtr:Name, 4 )
         else UNDEFINED
         endif  }
   "Set ResDHWSys:ResWtrHtrName[5]"   ResDHWSys:ResWtrHtrName[5] = 
      {  if (ChildCount( ResWtrHtr ) > 4) 
         then  ChildRef  ( ResWtrHtr:Name, 5 )
         else UNDEFINED
         endif  }
   "Set ResDHWSys:ResWtrHtrName[6]"   ResDHWSys:ResWtrHtrName[6] = 
      {  if (ChildCount( ResWtrHtr ) > 5) 
         then  ChildRef  ( ResWtrHtr:Name, 6 )
         else UNDEFINED
         endif  }
   "Set ResDHWSys:ResWtrHtrName[7]"   ResDHWSys:ResWtrHtrName[7] = 
      {  if (ChildCount( ResWtrHtr ) > 6) 
         then  ChildRef  ( ResWtrHtr:Name, 7 )
         else UNDEFINED
         endif  }
   "Set ResDHWSys:ResWtrHtrName[8]"   ResDHWSys:ResWtrHtrName[8] = 
      {  if (ChildCount( ResWtrHtr ) > 7) 
         then  ChildRef  ( ResWtrHtr:Name, 8 )
         else UNDEFINED
         endif  }
   "Set ResDHWSys:ResWtrHtrName[9]"   ResDHWSys:ResWtrHtrName[9] = 
      {  if (ChildCount( ResWtrHtr ) > 8) 
         then  ChildRef  ( ResWtrHtr:Name, 9 )
         else UNDEFINED
         endif  }
   "Set ResDHWSys:ResWtrHtrName[10]"   ResDHWSys:ResWtrHtrName[10] = 
      {  if (ChildCount( ResWtrHtr ) > 9) 
         then  ChildRef  ( ResWtrHtr:Name, 10 )
         else UNDEFINED
         endif  }


   "Create nrccSection_WaterMF object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathDHW == "Performance") 
         then CreateChildren( nrccSection_WaterMF, 1, "NRCC WaterMF" )
         else UNCHANGED 
         endif }
   "Create nrccSection_WaterMF nrccTableWaterMF object"              nrccSection_WaterMF:Action  =
      {  CreateChildren( nrccTableWaterMF, 1, "NRCC WaterMF table" )  }
   "Create nrcctblRowWaterMF object for each pertinent ResDHWSys"     ResDHWSys:nrcctblRowWaterMFRef =
      {  if (LocalCompAssigned( nrcctblRowWaterMFRef ) > 0 .OR.
             ComponentCount( nrccTableWaterMF ) < 1 .OR.
             ComponentCount( ResDHWSys ) < 1) then  UNDEFINED
         else  CreateComp( nrcctblRowWaterMF, Format( "%s WaterMF tblRow", Name ) )
         endif  }
   "Set ResDHWSys:nrcctblRowWaterMFRef:noXMLoutput_ResDHWSysRef"    ResDHWSys:nrcctblRowWaterMFRef:noXMLoutput_ResDHWSysRef = 
      {  if (ComponentCount( ResDHWSys ) < 1) then  UNDEFINED
         else Name
         endif  }
  ; Rule to Delete empty nrccSection_WaterMF
   "DELETE empty nrccTableWaterMF object"
      nrccSection_WaterMF:Action   = {  if (ComponentCount( nrcctblRowWaterMF ) < 1) then  DeleteComp()  else  UNCHANGED  endif }


   "Create nrccSection_WaterCHPWH object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathDHW == "Performance") 
         then CreateChildren( nrccSection_WaterCHPWH, 1, "NRCC WaterCHPWH" )
         else UNCHANGED 
         endif }
   "Create nrccSection_WaterCHPWH nrccTableCHPWH object"              nrccSection_WaterCHPWH:Action  =
      {  CreateChildren( nrccTableCHPWH, 1, "NRCC CHPWH table" )  }
; NRCC Res DHW
;   "Create nrcctblRowCHPWH object for each pertinent ResDHWSys"     ResDHWSys:nrcctblRowCHPWHRef =
;      {  if (LocalCompAssigned( nrcctblRowCHPWHRef ) > 0 .OR.
;             ComponentCount( nrccTableCHPWH ) < 1 .OR.
;             ComponentCount( ResDHWSys ) < 1 .OR.
;             ResDHWSys:CentralSys == 0 .OR.
;             ResDHWSys:CentralSysType != "HPWH") then  UNDEFINED
;         else  CreateComp( nrcctblRowCHPWH, Format( "%s CHPWH tblRow", Name ) )
;         endif  }
   "Set ResDHWSys:nrcctblRowCHPWHRef:noXMLoutput_ResDHWSysRef"    ResDHWSys:nrcctblRowCHPWHRef:noXMLoutput_ResDHWSysRef = 
      {  if (ComponentCount( ResDHWSys ) < 1) then  UNDEFINED
         else Name
         endif  }

; NRCC Res DHW
;   "Create nrccWaterCHPWH02 child object for each nrcctblRowCHPWH"     ResDHWSys:nrccWaterCHPWH02Ref =
;      {  if (ComponentCount( ResDHWSys ) < 1 .OR. ResDHWSys:CentralSys == 0 .OR. ResDHWSys:CentralSysType != "HPWH") then  UNDEFINED
;         else  CreateComp( nrccWaterCHPWH02, Format( "%s WaterCHPWH02", Name ) )
;         endif  }
   "Set ResDHWSys:nrccWaterCHPWH02Ref:noXMLoutput_ResDHWSysRef"    ResDHWSys:nrccWaterCHPWH02Ref:noXMLoutput_ResDHWSysRef = {  Name  }

  ; Rule to Delete empty nrccSection_WaterCHPWH
   "DELETE empty nrccTableCHPWH object"
      nrccSection_WaterCHPWH:Action   = {  if (ComponentCount( nrcctblRowCHPWH ) < 1) then  DeleteComp()  else  UNCHANGED  endif }



   "Create nrccSection_LpTank object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathDHW == "Performance") 
         then CreateChildren( nrccSection_LpTank, 1, "NRCC LpTank" )
         else UNCHANGED 
         endif }
   "Create nrccSection_LpTank nrccTableLpTank object"              nrccSection_LpTank:Action  =
      {  CreateChildren( nrccTableLpTank, 1, "NRCC LpTank table" )  }
; NRCC Res DHW
;   "Create nrcctblRowLpTank object for each pertinent ResDHWSys"     ResDHWSys:nrcctblRowLpTankRef =
;      {  if (LocalCompAssigned( nrcctblRowLpTankRef ) > 0 .OR.
;             ComponentCount( nrccTableLpTank ) < 1 .OR.
;             ComponentCount( ResDHWSys ) < 1 .OR.
;             ResDHWSys:CentralSys == 0 .OR.
;             ResDHWSys:CentralSysType != "HPWH" .OR.
;             ResDHWSys:CentralHPWHLpTankType == "- none -") then  UNDEFINED
;         else  CreateComp( nrcctblRowLpTank, Format( "%s LpTank tblRow", Name ) )
;         endif  }
   "Set ResDHWSys:nrcctblRowLpTankRef:noXMLoutput_ResDHWSysRef"    ResDHWSys:nrcctblRowLpTankRef:noXMLoutput_ResDHWSysRef = 
      {  if (ComponentCount( ResDHWSys ) < 1) then  UNDEFINED
         else Name
         endif  }

; NRCC Res DHW
;   "Create nrccLpTank02 child object for each nrcctblRowLpTank"     ResDHWSys:nrccLpTank02Ref =
;      {  if (ComponentCount( ResDHWSys ) < 1 .OR. ResDHWSys:CentralSys == 0 .OR. ResDHWSys:CentralSysType != "HPWH" .OR. ResDHWSys:CentralHPWHLpTankType == "- none -") then  UNDEFINED
;         else  CreateComp( nrccLpTank02, Format( "%s LpTank02", Name ) )
;         endif  }
   "Set ResDHWSys:nrccLpTank02Ref:noXMLoutput_ResDHWSysRef"    ResDHWSys:nrccLpTank02Ref:noXMLoutput_ResDHWSysRef = {  Name  }

  ; Rule to Delete empty nrccSection_LpTank
   "DELETE empty nrccTableLpTank object"
      nrccSection_LpTank:Action   = {  if (ComponentCount( nrcctblRowLpTank ) < 1) then  DeleteComp()  else  UNCHANGED  endif }


   "Create nrccSection_RecircLp object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathDHW == "Performance") 
         then CreateChildren( nrccSection_RecircLp, 1, "NRCC RecircLp" )
         else UNCHANGED 
         endif }
   "Create nrccSection_RecircLp nrccTableRecircLp object"              nrccSection_RecircLp:Action  =
      {  CreateChildren( nrccTableRecircLp, 1, "NRCC RecircLp table" )  }
; NRCC Res DHW
;   "Create nrcctblRowRecircLp object for each pertinent ResDHWSys"     ResDHWSys:nrcctblRowRecircLpRef =
;      {  if (LocalCompAssigned( nrcctblRowRecircLpRef ) > 0 .OR.
;             ComponentCount( nrccTableRecircLp ) < 1 .OR.
;             ComponentCount( ResDHWSys ) < 1 .OR.
;             IfValidAnd( ResDHWSys:CentralSys != 0 )==0 .OR.
;             IfValidAnd( ResDHWSys:LpCnt > 0 )==0) then  UNDEFINED
;         else if (IfValidAnd( ResDHWSys:IsRecircSys == 1 )) 
;              then CreateComp( nrcctblRowRecircLp, Format( "%s RecircLp tblRow", Name ) ) 
;              else UNDEFINED endif
;         endif  }
   "Set ResDHWSys:nrcctblRowRecircLpRef:noXMLoutput_ResDHWSysRef"    ResDHWSys:nrcctblRowRecircLpRef:noXMLoutput_ResDHWSysRef = 
      {  if (ComponentCount( ResDHWSys ) < 1) then  UNDEFINED
         else Name
         endif  }
  ; Rule to Delete empty nrccSection_RecircLp
   "DELETE empty nrccTableRecircLp object"
      nrccSection_RecircLp:Action   = {  if (ComponentCount( nrcctblRowRecircLp ) < 1) then  DeleteComp()  else  UNCHANGED  endif }


   "Create nrccSection_WaterSolar object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathDHW == "Performance" .AND. Proj:SolThrmlComp == "Performance") 
         then CreateChildren( nrccSection_WaterSolar, 1, "NRCC WaterSolar" )
         else UNCHANGED 
         endif }
   "Create nrccSection_WaterSolar nrccTableWaterSolar object"              nrccSection_WaterSolar:Action  =
      {  CreateChildren( nrccTableWaterSolar, 1, "NRCC WaterSolar table" )  }
   "Create nrcctblRowWaterSolar object for each pertinent DHWSolarSys"     DHWSolarSys:nrcctblRowWaterSolarRef =
      {  if (LocalCompAssigned( nrcctblRowWaterSolarRef ) > 0 .OR.
             ComponentCount( nrccTableWaterSolar ) < 1 .OR.
             ComponentCount( DHWSolarSys ) < 1 .OR.
             DHWSolarSys:FloorAreaServed <= 0 ) then  UNDEFINED
         else  CreateComp( nrcctblRowWaterSolar, Format( "%s WaterSolar tblRow", Name ) )
         endif  }
   "Set DHWSolarSys:nrcctblRowWaterSolarRef:noXMLoutput_DHWSolarSysRef"    DHWSolarSys:nrcctblRowWaterSolarRef:noXMLoutput_DHWSolarSysRef = 
      {  if (ComponentCount( DHWSolarSys ) < 1) then  UNDEFINED
         else Name
         endif  }
  ; Rule to Delete empty nrccSection_WaterSolar
   "DELETE empty nrccTableWaterSolar object"
      nrccSection_WaterSolar:Action   = {  if (ComponentCount( nrcctblRowWaterSolar ) < 1) then  DeleteComp()  else  UNCHANGED  endif }




   ; setup ResSpcDHWFeatures Parent Space Name and ResDHWSysRef to be used in populating Section_WaterCompact data in table
   "Set ResSpcDHWFeatures:ParentSpcNameRpt"   ResSpcDHWFeatures:ParentSpcNameRpt = 
      {  Parent( Name )  }
   "Set ResSpcDHWFeatures:ParentResDHWSysRefRpt"   ResSpcDHWFeatures:ParentResDHWSysRefRpt = 
      {  Parent( ResDHWSysRef )  }


   "Create nrccSection_WaterCompact object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathDHW == "Performance") 
         then CreateChildren( nrccSection_WaterCompact, 1, "WaterCompact" )
         else UNCHANGED 
         endif }
   "Create nrccSection_WaterCompact nrccTableWaterCompact object"              nrccSection_WaterCompact:Action  =
      {  CreateChildren( nrccTableWaterCompact, 1, "WaterCompact table" )  }
   "Create nrcctblRowWaterCompact object for each pertinent ResSpcDHWFeatures"     ResSpcDHWFeatures:nrcctblRowWaterCompactRef =
      {  if (LocalCompAssigned( nrcctblRowWaterCompactRef ) > 0 .OR.
             ComponentCount( nrccTableWaterCompact ) < 1 .OR.
             ComponentCount( ResSpcDHWFeatures ) < 1 .OR.
             IfValidAnd( CompactDistErrorID = 0 )==0 .OR.
             IfValidAnd( CompactDistIdx > 0 )==0) then  UNDEFINED
         else  CreateComp( nrcctblRowWaterCompact, Format( "%s WaterCompact tblRow", Name ) )
         endif  }
   "Set ResSpcDHWFeatures:nrcctblRowWaterCompactRef:noXMLoutput_ResSpcDHWFeaturesRef"    ResSpcDHWFeatures:nrcctblRowWaterCompactRef:noXMLoutput_ResSpcDHWFeaturesRef = 
      {  if (ComponentCount( ResSpcDHWFeatures ) < 1) then  UNDEFINED
         else Name
         endif  }

  ; Rule to Delete empty nrccSection_WaterCompact
   "DELETE empty nrccSection_WaterCompact object"
      nrccSection_WaterCompact:Action   = {  if (ComponentCount( nrcctblRowWaterCompact ) < 1) then  DeleteComp()  else  UNCHANGED  endif }




   ; setup ResSpcDHWFeatures Parent Space Name and ResDHWSysRef to be used in populating Section_WaterDWHR data in table
   "Set ResSpcDHWFeatures:ParentSpcNameRpt"   ResSpcDHWFeatures:ParentSpcNameRpt = 
      {  Parent( Name )  }
   "Set ResSpcDHWFeatures:ParentResDHWSysRefRpt"   ResSpcDHWFeatures:ParentResDHWSysRefRpt = 
      {  Parent( ResDHWSysRef )  }


   "Create nrccSection_WaterDWHR object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathDHW == "Performance") 
         then CreateChildren( nrccSection_WaterDWHR, 1, "WaterDWHR" )
         else UNCHANGED 
         endif }
   "Create nrccSection_WaterDWHR nrccTableDWHR object"              nrccSection_WaterDWHR:Action  =
      {  CreateChildren( nrccTableDWHR, 1, "DWHR table" )  }


  ; Rules to create individual Water Heating - Drain Water Heat Recovery (DWHR) table rows
   "Create & populate all DWHR table rows"
      nrccSection_WaterDWHR:Action = {  EvalRulelist( "NRCCPRF_Section_WaterDWHR" )  }
   "Set nrcctblRowDWHR parent"   nrcctblRowDWHR:Parent  = { nrccTableDWHR:Name  }


  ; Rule to Delete empty nrccSection_WaterDWHR
   "DELETE empty nrccSection_WaterDWHR object"
      nrccSection_WaterDWHR:Action   = {  if (ComponentCount( nrcctblRowDWHR ) < 1) then  DeleteComp()  else  UNCHANGED  endif }




   "Create nrccSection_ProcGarage object"
      nrccNRCCPRF:Action    = {  if (Proj:CompPathMech == "Performance") 
                                 then CreateChildren( nrccSection_ProcGarage, 1, "NRCC ProcGarage" )
                                 else UNCHANGED 
                                 endif }
   "Create nrccSection_ProcGarage nrccTableProcGarage object"              nrccSection_ProcGarage:Action  =
      {  CreateChildren( nrccTableProcGarage, 1, "NRCC ProcGarage table" )  }
   "Create nrcctblRowProcGarage object for each pertinent AirSys"     AirSys:nrcctblRowProcGarageRef =
      {  if (LocalCompAssigned( nrcctblRowProcGarageRef ) > 0 .OR.
             ComponentCount( nrccTableProcGarage ) < 1 .OR.
             ComponentCount( AirSys ) < 1 ) then  UNDEFINED
         else if (IfValidAnd(ExhSysType == "ParkingGarage")) then CreateComp( nrcctblRowProcGarage, Format( "%s ProcGarage tblRow", Name ) ) else UNDEFINED endif
         endif  }
   "Set AirSys:nrcctblRowProcGarageRef:noXMLoutput_AirSysRef"    AirSys:nrcctblRowProcGarageRef:noXMLoutput_AirSysRef = 
      {  if (ComponentCount( AirSys ) < 1) then  UNDEFINED
         else Name
         endif  }
   "Create nrcctblRowProcGarage object for each pertinent ZnSys"     ZnSys:nrcctblRowProcGarageRef =
      {  if (LocalCompAssigned( nrcctblRowProcGarageRef ) > 0 .OR.
             ComponentCount( nrccTableProcGarage ) < 1 .OR.
             ComponentCount( ZnSys ) < 1 ) then  UNDEFINED
         else if (IfValidAnd(ExhSysType == "ParkingGarage")) then CreateComp( nrcctblRowProcGarage, Format( "%s ProcGarage tblRow", Name ) ) else UNDEFINED endif
         endif  }
   "Set ZnSys:nrcctblRowProcGarageRef:noXMLoutput_ZnSysRef"    ZnSys:nrcctblRowProcGarageRef:noXMLoutput_ZnSysRef = 
      {  if (ComponentCount( ZnSys ) < 1) then  UNDEFINED
         else Name
         endif  }
  ; Rule to Delete empty nrccSection_ProcGarage
   "DELETE empty nrccTableProcGarage object"
      nrccSection_ProcGarage:Action   = {  if (ComponentCount( nrcctblRowProcGarage ) < 1) then  DeleteComp()  else  UNCHANGED  endif }


   "Create nrccSection_ProcKitch object"
      nrccNRCCPRF:Action    = {  if (Proj:CompPathMech == "Performance") 
                                 then CreateChildren( nrccSection_ProcKitch, 1, "NRCC ProcKitch" )
                                 else UNCHANGED 
                                 endif }
   "Create nrccSection_ProcKitch nrccTableProcKitch object"              nrccSection_ProcKitch:Action  =
      {  CreateChildren( nrccTableProcKitch, 1, "NRCC ProcKitch table" )  }
   "Create nrcctblRowProcKitch object for each pertinent Spc"     Spc:nrcctblRowProcKitchRef =
      {  if (LocalCompAssigned( nrcctblRowProcKitchRef ) > 0 .OR.
             ComponentCount( nrccTableProcKitch ) < 1 .OR.
             ComponentCount( Spc ) < 1 ) then  UNDEFINED
         else if (IfValidAnd(SpcFunc == "Kitchen/Food Preparation Area") .AND. IfValidAnd(Proj:CompPathKit == "Performance") 
                  .AND. (IfValidAnd(KitExhHoodFlow > 0) .OR. IfValidAnd(KitExhHoodLen > 0)))
              then CreateComp( nrcctblRowProcKitch, Format( "%s ProcKitch tblRow", Name ) )
              else UNDEFINED
              endif
         endif  }
   "Set Spc:nrcctblRowProcKitchRef:noXMLoutput_SpcRef"    Spc:nrcctblRowProcKitchRef:noXMLoutput_SpcRef = {  Name  }

   "Create nrccTableKitchHoodsRef object for each pertinent Spc"     Spc:nrccTableKitchHoodsRef =
      {  if (LocalCompAssigned( nrcctblRowProcKitchRef ) < 1 )
         then  UNDEFINED
         else  CreateComp( nrccTableKitchHoods, Format( "%s TableKitchHoods", Name ) )
         endif  }
   "Set Spc:nrccTableKitchHoodsRef:noXMLoutput_SpcRef"    Spc:nrccTableKitchHoodsRef:noXMLoutput_SpcRef = {  Name  }

   "Create nrcctblRowKitchHoodsRef1 object for each pertinent Spc"     Spc:nrcctblRowKitchHoodsRef1 =
      {  if (LocalCompAssigned( nrccTableKitchHoodsRef ) < 1) then UNDEFINED
         else if (LocalStatus( KitExhHoodStyle[1] ) > 0 .AND. KitExhHoodStyle[1] != "None") 
         then CreateComp( nrcctblRowKitchHoods, Format( "%s ProcKitchRowKitchHoods1", Name ) )
         else UNDEFINED
         endif endif }

   "Set Spc:nrcctblRowKitchHoodsRef1:noXMLoutput_SpcRef"                  Spc:nrcctblRowKitchHoodsRef1:noXMLoutput_SpcRef                  = {  Name  }
   "Set Spc:nrcctblRowKitchHoodsRef1:ProcKitch02_KitchenExhaustHoodStyle" Spc:nrcctblRowKitchHoodsRef1:ProcKitch02_KitchenExhaustHoodStyle = { 
        if (LocalStatus( KitExhHoodStyle[1] ) > 0) 
        then
            switch (KitExhHoodStyle[1])
                case "BackshelfOrPassover" : "BackshelfPassover"
                case "DoubleIsland"        : "DoubleIsland"
                case "Eyebrow"             : "Eyebrow"
                case "None"                : "None"
                case "SingleIsland"        : "SingleIsland"
                case "WallMountedCanopy"   : "WallMountedCanopy"
                default :  UNDEFINED
            endswitch
        else  UNDEFINED  endif }
   "Set Spc:nrcctblRowKitchHoodsRef1:ProcKitch03_KitchenExhaustHoodDuty" Spc:nrcctblRowKitchHoodsRef1:ProcKitch03_KitchenExhaustHoodDuty = { 
        if (LocalStatus( KitExhHoodDuty[1] ) > 0 .AND. LocalStatus( KitExhHoodStyle[1] ) > 0) 
        then
            switch (KitExhHoodDuty[1])
                case "Light"      : "LightDuty"
                case "Medium"     : "MediumDuty"
                case "Heavy"      : "HeavyDuty"
                case "ExtraHeavy" : "ExtraHeavyDuty"
                default :  UNDEFINED
            endswitch
        else  UNDEFINED  endif }
   "Set Spc:nrcctblRowKitchHoodsRef1:ProcKitch03_NotApplicableMessage" Spc:nrcctblRowKitchHoodsRef1:ProcKitch03_NotApplicableMessage = { 
        if (LocalStatus( nrcctblRowKitchHoodsRef1:ProcKitch03_KitchenExhaustHoodDuty ) > 0) then UNDEFINED  
        else if (LocalStatus( KitExhHoodStyle[1] ) > 0) then "NotApplicable" 
        else UNDEFINED
        endif endif }

   "Set Spc:nrcctblRowKitchHoodsRef1:ProcKitch04_KitchenExhaustHoodLength" Spc:nrcctblRowKitchHoodsRef1:ProcKitch04_KitchenExhaustHoodLength = { 
        if (LocalStatus( KitExhHoodLen[1] ) > 0 .AND. LocalStatus( KitExhHoodStyle[1] ) > 0) 
        then atof( Format( "%.2f", KitExhHoodLen[1] ) )
        else UNDEFINED endif }
   "Set Spc:nrcctblRowKitchHoodsRef1:ProcKitch04_NotApplicableMessage" Spc:nrcctblRowKitchHoodsRef1:ProcKitch04_NotApplicableMessage = { 
        if (LocalStatus( nrcctblRowKitchHoodsRef1:ProcKitch04_KitchenExhaustHoodLength ) > 0) then UNDEFINED  
        else if (LocalStatus( KitExhHoodStyle[1] ) > 0) then "NotApplicable" 
        else UNDEFINED
        endif endif }

   "Set Spc:nrcctblRowKitchHoodsRef1:ProcKitch05_KitchenExhaustHoodFlow" Spc:nrcctblRowKitchHoodsRef1:ProcKitch05_KitchenExhaustHoodFlow = { 
        if (LocalStatus( KitExhHoodFlow[1] ) > 0 .AND. LocalStatus( KitExhHoodStyle[1] ) > 0) 
        then atof( Format( "%.2f", KitExhHoodFlow[1] ) )
        else UNDEFINED endif }
   "Set Spc:nrcctblRowKitchHoodsRef1:ProcKitch05_NotApplicableMessage" Spc:nrcctblRowKitchHoodsRef1:ProcKitch05_NotApplicableMessage = { 
        if (LocalStatus( nrcctblRowKitchHoodsRef1:ProcKitch05_KitchenExhaustHoodFlow ) > 0) then UNDEFINED  
        else if (LocalStatus( KitExhHoodStyle[1] ) > 0) then "NotApplicable" 
        else UNDEFINED
        endif endif }


   "Create nrcctblRowKitchHoodsRef2 object for each pertinent Spc"     Spc:nrcctblRowKitchHoodsRef2 =
      {  if (LocalCompAssigned( nrccTableKitchHoodsRef ) < 1) then UNDEFINED
         else if (LocalStatus( KitExhHoodStyle[2] ) > 0 .AND. KitExhHoodStyle[2] != "None") 
         then CreateComp( nrcctblRowKitchHoods, Format( "%s ProcKitchRowKitchHoods2", Name ) )
         else UNDEFINED
         endif endif }

   "Set Spc:nrcctblRowKitchHoodsRef2:noXMLoutput_SpcRef"                  Spc:nrcctblRowKitchHoodsRef2:noXMLoutput_SpcRef                  = {  Name  }
   "Set Spc:nrcctblRowKitchHoodsRef2:ProcKitch02_KitchenExhaustHoodStyle" Spc:nrcctblRowKitchHoodsRef2:ProcKitch02_KitchenExhaustHoodStyle = { 
        if (LocalStatus( KitExhHoodStyle[2] ) > 0) 
        then
            switch (KitExhHoodStyle[2])
                case "BackshelfOrPassover" : "BackshelfPassover"
                case "DoubleIsland"        : "DoubleIsland"
                case "Eyebrow"             : "Eyebrow"
                case "None"                : "None"
                case "SingleIsland"        : "SingleIsland"
                case "WallMountedCanopy"   : "WallMountedCanopy"
                default :  UNDEFINED
            endswitch
        else  UNDEFINED  endif }
   "Set Spc:nrcctblRowKitchHoodsRef2:ProcKitch03_KitchenExhaustHoodDuty" Spc:nrcctblRowKitchHoodsRef2:ProcKitch03_KitchenExhaustHoodDuty = { 
        if (LocalStatus( KitExhHoodDuty[2] ) > 0 .AND. LocalStatus( KitExhHoodStyle[2] ) > 0) 
        then
            switch (KitExhHoodDuty[2])
                case "Light"      : "LightDuty"
                case "Medium"     : "MediumDuty"
                case "Heavy"      : "HeavyDuty"
                case "ExtraHeavy" : "ExtraHeavyDuty"
                default :  UNDEFINED
            endswitch
        else  UNDEFINED  endif }
   "Set Spc:nrcctblRowKitchHoodsRef2:ProcKitch03_NotApplicableMessage" Spc:nrcctblRowKitchHoodsRef2:ProcKitch03_NotApplicableMessage = { 
        if (LocalStatus( nrcctblRowKitchHoodsRef2:ProcKitch03_KitchenExhaustHoodDuty ) > 0) then UNDEFINED  
        else if (LocalStatus( KitExhHoodStyle[2] ) > 0) then "NotApplicable" 
        else UNDEFINED
        endif endif }

   "Set Spc:nrcctblRowKitchHoodsRef2:ProcKitch04_KitchenExhaustHoodLength" Spc:nrcctblRowKitchHoodsRef2:ProcKitch04_KitchenExhaustHoodLength = { 
        if (LocalStatus( KitExhHoodLen[2] ) > 0 .AND. LocalStatus( KitExhHoodStyle[2] ) > 0) 
        then atof( Format( "%.2f", KitExhHoodLen[2] ) )
        else UNDEFINED endif }
   "Set Spc:nrcctblRowKitchHoodsRef2:ProcKitch04_NotApplicableMessage" Spc:nrcctblRowKitchHoodsRef2:ProcKitch04_NotApplicableMessage = { 
        if (LocalStatus( nrcctblRowKitchHoodsRef2:ProcKitch04_KitchenExhaustHoodLength ) > 0) then UNDEFINED  
        else if (LocalStatus( KitExhHoodStyle[2] ) > 0) then "NotApplicable" 
        else UNDEFINED
        endif endif }

   "Set Spc:nrcctblRowKitchHoodsRef2:ProcKitch05_KitchenExhaustHoodFlow" Spc:nrcctblRowKitchHoodsRef2:ProcKitch05_KitchenExhaustHoodFlow = { 
        if (LocalStatus( KitExhHoodFlow[2] ) > 0 .AND. LocalStatus( KitExhHoodStyle[2] ) > 0) 
        then atof( Format( "%.2f", KitExhHoodFlow[2] ) )
        else UNDEFINED endif }
   "Set Spc:nrcctblRowKitchHoodsRef2:ProcKitch05_NotApplicableMessage" Spc:nrcctblRowKitchHoodsRef2:ProcKitch05_NotApplicableMessage = { 
        if (LocalStatus( nrcctblRowKitchHoodsRef2:ProcKitch05_KitchenExhaustHoodFlow ) > 0) then UNDEFINED  
        else if (LocalStatus( KitExhHoodStyle[2] ) > 0) then "NotApplicable" 
        else UNDEFINED
        endif endif }

   "Create nrcctblRowKitchHoodsRef3 object for each pertinent Spc"     Spc:nrcctblRowKitchHoodsRef3 =
      {  if (LocalCompAssigned( nrccTableKitchHoodsRef ) < 1) then UNDEFINED
         else if (LocalStatus( KitExhHoodStyle[3] ) > 0 .AND. KitExhHoodStyle[3] != "None") 
         then CreateComp( nrcctblRowKitchHoods, Format( "%s ProcKitchRowKitchHoods3", Name ) )
         else UNDEFINED
         endif endif }

   "Set Spc:nrcctblRowKitchHoodsRef3:noXMLoutput_SpcRef"                  Spc:nrcctblRowKitchHoodsRef3:noXMLoutput_SpcRef                  = {  Name  }
   "Set Spc:nrcctblRowKitchHoodsRef3:ProcKitch02_KitchenExhaustHoodStyle" Spc:nrcctblRowKitchHoodsRef3:ProcKitch02_KitchenExhaustHoodStyle = { 
        if (LocalStatus( KitExhHoodStyle[3] ) > 0) 
        then
            switch (KitExhHoodStyle[3])
                case "BackshelfOrPassover" : "BackshelfPassover"
                case "DoubleIsland"        : "DoubleIsland"
                case "Eyebrow"             : "Eyebrow"
                case "None"                : "None"
                case "SingleIsland"        : "SingleIsland"
                case "WallMountedCanopy"   : "WallMountedCanopy"
                default :  UNDEFINED
            endswitch
        else  UNDEFINED  endif }
   "Set Spc:nrcctblRowKitchHoodsRef3:ProcKitch03_KitchenExhaustHoodDuty" Spc:nrcctblRowKitchHoodsRef3:ProcKitch03_KitchenExhaustHoodDuty = { 
        if (LocalStatus( KitExhHoodDuty[3] ) > 0 .AND. LocalStatus( KitExhHoodStyle[3] ) > 0) 
        then
            switch (KitExhHoodDuty[3])
                case "Light"      : "LightDuty"
                case "Medium"     : "MediumDuty"
                case "Heavy"      : "HeavyDuty"
                case "ExtraHeavy" : "ExtraHeavyDuty"
                default :  UNDEFINED
            endswitch
        else  UNDEFINED  endif }
   "Set Spc:nrcctblRowKitchHoodsRef3:ProcKitch03_NotApplicableMessage" Spc:nrcctblRowKitchHoodsRef3:ProcKitch03_NotApplicableMessage = { 
        if (LocalStatus( nrcctblRowKitchHoodsRef3:ProcKitch03_KitchenExhaustHoodDuty ) > 0) then UNDEFINED  
        else if (LocalStatus( KitExhHoodStyle[3] ) > 0) then "NotApplicable" 
        else UNDEFINED
        endif endif }

   "Set Spc:nrcctblRowKitchHoodsRef3:ProcKitch04_KitchenExhaustHoodLength" Spc:nrcctblRowKitchHoodsRef3:ProcKitch04_KitchenExhaustHoodLength = { 
        if (LocalStatus( KitExhHoodLen[3] ) > 0 .AND. LocalStatus( KitExhHoodStyle[3] ) > 0) 
        then atof( Format( "%.2f", KitExhHoodLen[3] ) )
        else UNDEFINED endif }
   "Set Spc:nrcctblRowKitchHoodsRef3:ProcKitch04_NotApplicableMessage" Spc:nrcctblRowKitchHoodsRef3:ProcKitch04_NotApplicableMessage = { 
        if (LocalStatus( nrcctblRowKitchHoodsRef3:ProcKitch04_KitchenExhaustHoodLength ) > 0) then UNDEFINED  
        else if (LocalStatus( KitExhHoodStyle[3] ) > 0) then "NotApplicable" 
        else UNDEFINED
        endif endif }

   "Set Spc:nrcctblRowKitchHoodsRef3:ProcKitch05_KitchenExhaustHoodFlow" Spc:nrcctblRowKitchHoodsRef3:ProcKitch05_KitchenExhaustHoodFlow = { 
        if (LocalStatus( KitExhHoodFlow[3] ) > 0 .AND. LocalStatus( KitExhHoodStyle[3] ) > 0) 
        then atof( Format( "%.2f", KitExhHoodFlow[3] ) )
        else UNDEFINED endif }
   "Set Spc:nrcctblRowKitchHoodsRef3:ProcKitch05_NotApplicableMessage" Spc:nrcctblRowKitchHoodsRef3:ProcKitch05_NotApplicableMessage = { 
        if (LocalStatus( nrcctblRowKitchHoodsRef3:ProcKitch05_KitchenExhaustHoodFlow ) > 0) then UNDEFINED  
        else if (LocalStatus( KitExhHoodStyle[3] ) > 0) then "NotApplicable" 
        else UNDEFINED
        endif endif }

   "Create nrcctblRowKitchHoodsRef4 object for each pertinent Spc"     Spc:nrcctblRowKitchHoodsRef4 =
      {  if (LocalCompAssigned( nrccTableKitchHoodsRef ) < 1) then UNDEFINED
         else if (LocalStatus( KitExhHoodStyle[4] ) > 0 .AND. KitExhHoodStyle[4] != "None") 
         then CreateComp( nrcctblRowKitchHoods, Format( "%s ProcKitchRowKitchHoods4", Name ) )
         else UNDEFINED
         endif endif }

   "Set Spc:nrcctblRowKitchHoodsRef4:noXMLoutput_SpcRef"                  Spc:nrcctblRowKitchHoodsRef4:noXMLoutput_SpcRef                  = {  Name  }
   "Set Spc:nrcctblRowKitchHoodsRef4:ProcKitch02_KitchenExhaustHoodStyle" Spc:nrcctblRowKitchHoodsRef4:ProcKitch02_KitchenExhaustHoodStyle = { 
        if (LocalStatus( KitExhHoodStyle[4] ) > 0) 
        then
            switch (KitExhHoodStyle[4])
                case "BackshelfOrPassover" : "BackshelfPassover"
                case "DoubleIsland"        : "DoubleIsland"
                case "Eyebrow"             : "Eyebrow"
                case "None"                : "None"
                case "SingleIsland"        : "SingleIsland"
                case "WallMountedCanopy"   : "WallMountedCanopy"
                default :  UNDEFINED
            endswitch
        else  UNDEFINED  endif }
   "Set Spc:nrcctblRowKitchHoodsRef4:ProcKitch03_KitchenExhaustHoodDuty" Spc:nrcctblRowKitchHoodsRef4:ProcKitch03_KitchenExhaustHoodDuty = { 
        if (LocalStatus( KitExhHoodDuty[4] ) > 0 .AND. LocalStatus( KitExhHoodStyle[4] ) > 0) 
        then
            switch (KitExhHoodDuty[4])
                case "Light"      : "LightDuty"
                case "Medium"     : "MediumDuty"
                case "Heavy"      : "HeavyDuty"
                case "ExtraHeavy" : "ExtraHeavyDuty"
                default :  UNDEFINED
            endswitch
        else  UNDEFINED  endif }
   "Set Spc:nrcctblRowKitchHoodsRef4:ProcKitch03_NotApplicableMessage" Spc:nrcctblRowKitchHoodsRef4:ProcKitch03_NotApplicableMessage = { 
        if (LocalStatus( nrcctblRowKitchHoodsRef4:ProcKitch03_KitchenExhaustHoodDuty ) > 0) then UNDEFINED  
        else if (LocalStatus( KitExhHoodStyle[4] ) > 0) then "NotApplicable" 
        else UNDEFINED
        endif endif }

   "Set Spc:nrcctblRowKitchHoodsRef4:ProcKitch04_KitchenExhaustHoodLength" Spc:nrcctblRowKitchHoodsRef4:ProcKitch04_KitchenExhaustHoodLength = { 
        if (LocalStatus( KitExhHoodLen[4] ) > 0 .AND. LocalStatus( KitExhHoodStyle[4] ) > 0) 
        then atof( Format( "%.2f", KitExhHoodLen[4] ) )
        else UNDEFINED endif }
   "Set Spc:nrcctblRowKitchHoodsRef4:ProcKitch04_NotApplicableMessage" Spc:nrcctblRowKitchHoodsRef4:ProcKitch04_NotApplicableMessage = { 
        if (LocalStatus( nrcctblRowKitchHoodsRef4:ProcKitch04_KitchenExhaustHoodLength ) > 0) then UNDEFINED  
        else if (LocalStatus( KitExhHoodStyle[4] ) > 0) then "NotApplicable" 
        else UNDEFINED
        endif endif }

   "Set Spc:nrcctblRowKitchHoodsRef4:ProcKitch05_KitchenExhaustHoodFlow" Spc:nrcctblRowKitchHoodsRef4:ProcKitch05_KitchenExhaustHoodFlow = { 
        if (LocalStatus( KitExhHoodFlow[4] ) > 0 .AND. LocalStatus( KitExhHoodStyle[4] ) > 0) 
        then atof( Format( "%.2f", KitExhHoodFlow[4] ) )
        else UNDEFINED endif }
   "Set Spc:nrcctblRowKitchHoodsRef4:ProcKitch05_NotApplicableMessage" Spc:nrcctblRowKitchHoodsRef4:ProcKitch05_NotApplicableMessage = { 
        if (LocalStatus( nrcctblRowKitchHoodsRef4:ProcKitch05_KitchenExhaustHoodFlow ) > 0) then UNDEFINED  
        else if (LocalStatus( KitExhHoodStyle[4] ) > 0) then "NotApplicable" 
        else UNDEFINED
        endif endif }

   "Create nrcctblRowKitchHoodsRef5 object for each pertinent Spc"     Spc:nrcctblRowKitchHoodsRef5 =
      {  if (LocalCompAssigned( nrccTableKitchHoodsRef ) < 1) then UNDEFINED
         else if (LocalStatus( KitExhHoodStyle[5] ) > 0 .AND. KitExhHoodStyle[5] != "None") 
         then CreateComp( nrcctblRowKitchHoods, Format( "%s ProcKitchRowKitchHoods5", Name ) )
         else UNDEFINED
         endif endif }

   "Set Spc:nrcctblRowKitchHoodsRef5:noXMLoutput_SpcRef"                  Spc:nrcctblRowKitchHoodsRef5:noXMLoutput_SpcRef                  = {  Name  }
   "Set Spc:nrcctblRowKitchHoodsRef5:ProcKitch02_KitchenExhaustHoodStyle" Spc:nrcctblRowKitchHoodsRef5:ProcKitch02_KitchenExhaustHoodStyle = { 
        if (LocalStatus( KitExhHoodStyle[5] ) > 0) 
        then
            switch (KitExhHoodStyle[5])
                case "BackshelfOrPassover" : "BackshelfPassover"
                case "DoubleIsland"        : "DoubleIsland"
                case "Eyebrow"             : "Eyebrow"
                case "None"                : "None"
                case "SingleIsland"        : "SingleIsland"
                case "WallMountedCanopy"   : "WallMountedCanopy"
                default :  UNDEFINED
            endswitch
        else  UNDEFINED  endif }
   "Set Spc:nrcctblRowKitchHoodsRef5:ProcKitch03_KitchenExhaustHoodDuty" Spc:nrcctblRowKitchHoodsRef5:ProcKitch03_KitchenExhaustHoodDuty = { 
        if (LocalStatus( KitExhHoodDuty[5] ) > 0 .AND. LocalStatus( KitExhHoodStyle[5] ) > 0) 
        then
            switch (KitExhHoodDuty[5])
                case "Light"      : "LightDuty"
                case "Medium"     : "MediumDuty"
                case "Heavy"      : "HeavyDuty"
                case "ExtraHeavy" : "ExtraHeavyDuty"
                default :  UNDEFINED
            endswitch
        else  UNDEFINED  endif }
   "Set Spc:nrcctblRowKitchHoodsRef5:ProcKitch03_NotApplicableMessage" Spc:nrcctblRowKitchHoodsRef5:ProcKitch03_NotApplicableMessage = { 
        if (LocalStatus( nrcctblRowKitchHoodsRef5:ProcKitch03_KitchenExhaustHoodDuty ) > 0) then UNDEFINED  
        else if (LocalStatus( KitExhHoodStyle[5] ) > 0) then "NotApplicable" 
        else UNDEFINED
        endif endif }

   "Set Spc:nrcctblRowKitchHoodsRef5:ProcKitch04_KitchenExhaustHoodLength" Spc:nrcctblRowKitchHoodsRef5:ProcKitch04_KitchenExhaustHoodLength = { 
        if (LocalStatus( KitExhHoodLen[5] ) > 0 .AND. LocalStatus( KitExhHoodStyle[5] ) > 0) 
        then atof( Format( "%.2f", KitExhHoodLen[5] ) )
        else UNDEFINED endif }
   "Set Spc:nrcctblRowKitchHoodsRef5:ProcKitch04_NotApplicableMessage" Spc:nrcctblRowKitchHoodsRef5:ProcKitch04_NotApplicableMessage = { 
        if (LocalStatus( nrcctblRowKitchHoodsRef5:ProcKitch04_KitchenExhaustHoodLength ) > 0) then UNDEFINED  
        else if (LocalStatus( KitExhHoodStyle[5] ) > 0) then "NotApplicable" 
        else UNDEFINED
        endif endif }

   "Set Spc:nrcctblRowKitchHoodsRef5:ProcKitch05_KitchenExhaustHoodFlow" Spc:nrcctblRowKitchHoodsRef5:ProcKitch05_KitchenExhaustHoodFlow = { 
        if (LocalStatus( KitExhHoodFlow[5] ) > 0 .AND. LocalStatus( KitExhHoodStyle[5] ) > 0) 
        then atof( Format( "%.2f", KitExhHoodFlow[5] ) )
        else UNDEFINED endif }
   "Set Spc:nrcctblRowKitchHoodsRef5:ProcKitch05_NotApplicableMessage" Spc:nrcctblRowKitchHoodsRef5:ProcKitch05_NotApplicableMessage = { 
        if (LocalStatus( nrcctblRowKitchHoodsRef5:ProcKitch05_KitchenExhaustHoodFlow ) > 0) then UNDEFINED  
        else if (LocalStatus( KitExhHoodStyle[5] ) > 0) then "NotApplicable" 
        else UNDEFINED
        endif endif }

  ; Rule to Delete empty nrccSection_ProcKitch
   "DELETE empty nrccTableProcKitch object"
      nrccSection_ProcKitch:Action   = {  if (ComponentCount( nrcctblRowProcKitch ) < 1) then  DeleteComp()  else  UNCHANGED  endif }


   "Create nrccSection_ProcComp object"
      nrccNRCCPRF:Action    = {  if (Proj:CompPathMech == "Performance") 
                                 then CreateChildren( nrccSection_ProcComp, 1, "NRCC ProcComp" )
                                 else UNCHANGED 
                                 endif }
   "Create nrccSection_ProcComp nrccTableProcComp object"              nrccSection_ProcComp:Action  =
      {  CreateChildren( nrccTableProcComp, 1, "NRCC ProcComp table" )  }
   "Create nrcctblRowProcComp object for each pertinent AirSys"     AirSys:nrcctblRowProcCompRef =
      {  if (LocalCompAssigned( nrcctblRowProcCompRef ) > 0 .OR.
             ComponentCount( nrccTableProcComp ) < 1 .OR.
             ComponentCount( AirSys ) < 1 ) then  UNDEFINED
         else if ((IfValidAnd(Subtype == "CRAC") .OR. IfValidAnd(Subtype == "CRAH")) .AND. IfValidAnd(Proj:CompPathComputerRm == "Performance"))
              then CreateComp( nrcctblRowProcComp, Format( "%s ProcComp tblRow", Name ) )
              else UNDEFINED
              endif
         endif  }
   "Set AirSys:nrcctblRowProcCompRef:noXMLoutput_AirSysRef"    AirSys:nrcctblRowProcCompRef:noXMLoutput_AirSysRef = 
      {  if (ComponentCount( AirSys ) < 1) then  UNDEFINED
         else Name
         endif  }
  ; Rule to Delete empty nrccSection_ProcComp
   "DELETE empty nrccTableProcComp object"
      nrccSection_ProcComp:Action   = {  if (ComponentCount( nrcctblRowProcComp ) < 1) then  DeleteComp()  else  UNCHANGED  endif }


   "Create nrccSection_ProcLab object"
      nrccNRCCPRF:Action    = {  if (Proj:CompPathMech == "Performance") 
                                 then CreateChildren( nrccSection_ProcLab, 1, "NRCC ProcLab" )
                                 else UNCHANGED 
                                 endif }
   "Create nrccSection_ProcLab nrccTableProcLab object"              nrccSection_ProcLab:Action  =
      {  CreateChildren( nrccTableProcLab, 1, "NRCC ProcLab table" )  }
   "Create nrcctblRowProcLab object for each pertinent Spc"     Spc:nrcctblRowProcLabRef =
      {  if (LocalCompAssigned( nrcctblRowProcLabRef ) > 0 .OR.
             ComponentCount( nrccTableProcLab ) < 1 .OR.
             ComponentCount( Spc ) < 1 ) then  UNDEFINED
         else if ((IfValidAnd(SpcFunc == "Scientific Laboratory Area") .OR.
                   IfValidAnd(SpcFunc == "Laboratory, Scientific"    )) .AND. IfValidAnd(Proj:CompPathLab == "Performance"))
              then CreateComp( nrcctblRowProcLab, Format( "%s ProcLab tblRow", Name ) )
              else UNDEFINED
              endif
         endif  }
   "Set Spc:nrcctblRowProcLabRef:noXMLoutput_SpcRef"    Spc:nrcctblRowProcLabRef:noXMLoutput_SpcRef = 
      {  if (ComponentCount( Spc ) < 1) then  UNDEFINED
         else Name
         endif  }
  ; Rule to Delete empty nrccSection_ProcLab
   "DELETE empty nrccTableProcLab object"
      nrccSection_ProcLab:Action   = {  if (ComponentCount( nrcctblRowProcLab ) < 1) then  DeleteComp()  else  UNCHANGED  endif }



   "Create nrccSection_LtgInfo object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathLtg == "Performance") 
         then CreateChildren( nrccSection_LtgInfo, 1, "NRCC LtgInfo" )
         else UNCHANGED 
         endif }
   "Create nrccSection_LtgInfo nrccTableLtgInfo object"              nrccSection_LtgInfo:Action  =
      {  CreateChildren( nrccTableLtgInfo, 1, "NRCC LtgInfo table" )  }


;   "Create nrcctblRowLtgInfo object for each pertinent Space"     Spc:nrcctblRowLtgInfoRef =
;      {  if (LocalCompAssigned( nrcctblRowLtgInfoRef ) > 0 .OR.
;             ComponentCount( nrccTableLtgInfo ) < 1) then  UNDEFINED
;         else if (LtgStatus != "Existing" .AND. LtgStatus != "Future" .AND. CondFlrAreaWithMult > 0 .AND. OccClass != "Residential") 
;              then CreateComp( nrcctblRowLtgInfo, Format( "%s LtgInfo tblRow", Name ) )
;              else UNDEFINED
;              endif
;         endif  }
;   "Set Spc:nrcctblRowLtgInfoRef:noXMLoutput_SpcRef"    Spc:nrcctblRowLtgInfoRef:noXMLoutput_SpcRef = {  Name  }
; replaced above w/ following to create nrcctblRowLtgInfo by SpcFunc rather than Spc - SAC 04/29/22
   "Create nrcctblRowLtgInfo object for each SpcFunc (as opposed to each Spc)"   Proj:Action =
      {  if (MaxAll( Spc:nrcctblRowLtgBucketVal ) > 0)
         then  CreateCompFor( MinAll( Spc:nrcctblRowLtgBucketVal ), MaxAll( Spc:nrcctblRowLtgBucketVal ),
                   "Spc:nrcctblRowLtgBucketVal", nrccTableLtgInfo:Name,
                   "nrcctblRowLtgInfo:noXMLoutput_LtgTblBucketVal",
                   "nrcctblRowLtgInfo:noXMLoutput_SpcRef"  )
         else  UNCHANGED  endif  }

  ; Rule to Delete empty nrccSection_LtgInfo
   "DELETE empty nrccTableLtgInfo object"
      nrccSection_LtgInfo:Action   = {  if (ComponentCount( nrcctblRowLtgInfo ) < 1) then  DeleteComp()  else  UNCHANGED  endif }



   "Create nrccSection_LtgSched object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathLtg == "Performance" .AND. SumAll( Lum:CondCnt ) > 0) 
         then CreateChildren( nrccSection_LtgSched, 1, "NRCC LtgSched" )
         else UNCHANGED 
         endif }
   "Create nrccSection_LtgSched nrccTableLtgSched object"              nrccSection_LtgSched:Action  =
      {  CreateChildren( nrccTableLtgSched, 1, "NRCC LtgSched table" )  }
   "Create nrcctblRowLtgSched object for each pertinent Luminaire"     Lum:nrcctblRowLtgSchedRef =
      {  if (LocalCompAssigned( nrcctblRowLtgSchedRef ) > 0 .OR.
             ComponentCount( nrccTableLtgSched ) < 1) then  UNDEFINED
         else if (CondCnt > 0) 
              then CreateComp( nrcctblRowLtgSched, Format( "%s LtgSched tblRow", Name ) )
              else UNDEFINED
              endif
         endif  }
   "Set Lum:nrcctblRowLtgSchedRef:noXMLoutput_LumRef"    Lum:nrcctblRowLtgSchedRef:noXMLoutput_LumRef = {  Name  }
  ; Rule to Delete empty nrccSection_LtgSched
   "DELETE empty nrccTableLtgSched object"
      nrccSection_LtgSched:Action   = {  if (ComponentCount( nrcctblRowLtgSched ) < 1) then  DeleteComp()  else  UNCHANGED  endif }



   "Create nrccSection_LtgCredits object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathLtg == "Performance") 
         then CreateChildren( nrccSection_LtgCredits, 1, "NRCC LtgCredits" )
         else UNCHANGED 
         endif }
   "Create nrccSection_LtgCredits nrccTableLtgCredits object"              nrccSection_LtgCredits:Action  =
      {  CreateChildren( nrccTableLtgCredits, 1, "NRCC LtgCredits table" )  }
   "Create nrcctblRowLtgCredits object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowLtgCreditsRef =
      {  if (LocalCompAssigned( nrcctblRowLtgCreditsRef ) > 0 .OR.
             ComponentCount( nrccTableLtgCredits ) < 1) then  UNDEFINED
         else if (ParentSpcIsCond == 1 .AND. IfValidAnd(Parent(OccClass) != "Residential")) 
              then CreateComp( nrcctblRowLtgCredits, Format( "%s LtgCredits tblRow", Name ) )
              else UNDEFINED
              endif
         endif  }
   "Set IntLtgSys:nrcctblRowLtgCreditsRef:noXMLoutput_IntLtgSysRef"    IntLtgSys:nrcctblRowLtgCreditsRef:noXMLoutput_IntLtgSysRef = {  Name  }

   "Create nrccTableLuminairesCreditsRef object for each pertinent IntLtgSys"     IntLtgSys:nrccTableLuminairesCreditsRef =
      {  if (LocalCompAssigned( nrcctblRowLtgCreditsRef ) < 1 .OR.
               (LocalCompAssigned( LumRef[1] ) < 1 .AND. LocalCompAssigned( LumRef[2] ) < 1 .AND.
                LocalCompAssigned( LumRef[3] ) < 1 .AND. LocalCompAssigned( LumRef[4] ) < 1 .AND.
                LocalCompAssigned( LumRef[5] ) < 1 ))
         then  UNDEFINED
         else  CreateComp( nrccTableLuminairesCredits, Format( "%s TableLuminairesCredits", Name ) )
         endif  }
   "Set IntLtgSys:nrccTableLuminairesCreditsRef:noXMLoutput_IntLtgSysRef"    IntLtgSys:nrccTableLuminairesCreditsRef:noXMLoutput_IntLtgSysRef = {  Name  }

   "Create nrcctblRowLuminairesCreditsRef1 object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowLuminairesCreditsRef1 =
      {  if (LocalCompAssigned( nrccTableLuminairesCreditsRef ) < 1 .OR.
             LocalCompAssigned( LumRef[1] ) < 1)
         then  UNDEFINED
         else  CreateComp( nrcctblRowLuminairesCredits, Format( "%s LtgCreditsRowLuminaires1", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowLuminairesCreditsRef1:noXMLoutput_IntLtgSysRef"           IntLtgSys:nrcctblRowLuminairesCreditsRef1:noXMLoutput_IntLtgSysRef          = {  Name  }
   "Set IntLtgSys:nrcctblRowLuminairesCreditsRef1:LtgCredits05_LuminaireName"         IntLtgSys:nrcctblRowLuminairesCreditsRef1:LtgCredits05_LuminaireName        = {  LumRef[1]:Name  }
   "Set IntLtgSys:nrcctblRowLuminairesCreditsRef1:LtgCredits06_LuminairePower"        IntLtgSys:nrcctblRowLuminairesCreditsRef1:LtgCredits06_LuminairePower       = {  LumRef[1]:Pwr  }
   "Set IntLtgSys:nrcctblRowLuminairesCreditsRef1:LtgCredits07_LuminaireCountByType"  IntLtgSys:nrcctblRowLuminairesCreditsRef1:LtgCredits07_LuminaireCountByType = {  LumCnt[1]  }

   "Create nrcctblRowLuminairesCreditsRef2 object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowLuminairesCreditsRef2 =
      {  if (LocalCompAssigned( nrccTableLuminairesCreditsRef ) < 1 .OR.
             LocalCompAssigned( LumRef[2] ) < 1)
         then  UNDEFINED
         else  CreateComp( nrcctblRowLuminairesCredits, Format( "%s LtgCreditsRowLuminaires2", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowLuminairesCreditsRef2:noXMLoutput_IntLtgSysRef"           IntLtgSys:nrcctblRowLuminairesCreditsRef2:noXMLoutput_IntLtgSysRef          = {  Name  }
   "Set IntLtgSys:nrcctblRowLuminairesCreditsRef2:LtgCredits05_LuminaireName"         IntLtgSys:nrcctblRowLuminairesCreditsRef2:LtgCredits05_LuminaireName        = {  LumRef[2]:Name  }
   "Set IntLtgSys:nrcctblRowLuminairesCreditsRef2:LtgCredits06_LuminairePower"        IntLtgSys:nrcctblRowLuminairesCreditsRef2:LtgCredits06_LuminairePower       = {  LumRef[2]:Pwr  }
   "Set IntLtgSys:nrcctblRowLuminairesCreditsRef2:LtgCredits07_LuminaireCountByType"  IntLtgSys:nrcctblRowLuminairesCreditsRef2:LtgCredits07_LuminaireCountByType = {  LumCnt[2]  }

   "Create nrcctblRowLuminairesCreditsRef3 object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowLuminairesCreditsRef3 =
      {  if (LocalCompAssigned( nrccTableLuminairesCreditsRef ) < 1 .OR.
             LocalCompAssigned( LumRef[3] ) < 1)
         then  UNDEFINED
         else  CreateComp( nrcctblRowLuminairesCredits, Format( "%s LtgCreditsRowLuminaires3", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowLuminairesCreditsRef3:noXMLoutput_IntLtgSysRef"           IntLtgSys:nrcctblRowLuminairesCreditsRef3:noXMLoutput_IntLtgSysRef          = {  Name  }
   "Set IntLtgSys:nrcctblRowLuminairesCreditsRef3:LtgCredits05_LuminaireName"         IntLtgSys:nrcctblRowLuminairesCreditsRef3:LtgCredits05_LuminaireName        = {  LumRef[3]:Name  }
   "Set IntLtgSys:nrcctblRowLuminairesCreditsRef3:LtgCredits06_LuminairePower"        IntLtgSys:nrcctblRowLuminairesCreditsRef3:LtgCredits06_LuminairePower       = {  LumRef[3]:Pwr  }
   "Set IntLtgSys:nrcctblRowLuminairesCreditsRef3:LtgCredits07_LuminaireCountByType"  IntLtgSys:nrcctblRowLuminairesCreditsRef3:LtgCredits07_LuminaireCountByType = {  LumCnt[3]  }

   "Create nrcctblRowLuminairesCreditsRef4 object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowLuminairesCreditsRef4 =
      {  if (LocalCompAssigned( nrccTableLuminairesCreditsRef ) < 1 .OR.
             LocalCompAssigned( LumRef[4] ) < 1)
         then  UNDEFINED
         else  CreateComp( nrcctblRowLuminairesCredits, Format( "%s LtgCreditsRowLuminaires4", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowLuminairesCreditsRef4:noXMLoutput_IntLtgSysRef"           IntLtgSys:nrcctblRowLuminairesCreditsRef4:noXMLoutput_IntLtgSysRef          = {  Name  }
   "Set IntLtgSys:nrcctblRowLuminairesCreditsRef4:LtgCredits05_LuminaireName"         IntLtgSys:nrcctblRowLuminairesCreditsRef4:LtgCredits05_LuminaireName        = {  LumRef[4]:Name  }
   "Set IntLtgSys:nrcctblRowLuminairesCreditsRef4:LtgCredits06_LuminairePower"        IntLtgSys:nrcctblRowLuminairesCreditsRef4:LtgCredits06_LuminairePower       = {  LumRef[4]:Pwr  }
   "Set IntLtgSys:nrcctblRowLuminairesCreditsRef4:LtgCredits07_LuminaireCountByType"  IntLtgSys:nrcctblRowLuminairesCreditsRef4:LtgCredits07_LuminaireCountByType = {  LumCnt[4]  }

   "Create nrcctblRowLuminairesCreditsRef5 object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowLuminairesCreditsRef5 =
      {  if (LocalCompAssigned( nrccTableLuminairesCreditsRef ) < 1 .OR.
             LocalCompAssigned( LumRef[5] ) < 1)
         then  UNDEFINED
         else  CreateComp( nrcctblRowLuminairesCredits, Format( "%s LtgCreditsRowLuminaires5", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowLuminairesCreditsRef5:noXMLoutput_IntLtgSysRef"           IntLtgSys:nrcctblRowLuminairesCreditsRef5:noXMLoutput_IntLtgSysRef          = {  Name  }
   "Set IntLtgSys:nrcctblRowLuminairesCreditsRef5:LtgCredits05_LuminaireName"         IntLtgSys:nrcctblRowLuminairesCreditsRef5:LtgCredits05_LuminaireName        = {  LumRef[5]:Name  }
   "Set IntLtgSys:nrcctblRowLuminairesCreditsRef5:LtgCredits06_LuminairePower"        IntLtgSys:nrcctblRowLuminairesCreditsRef5:LtgCredits06_LuminairePower       = {  LumRef[5]:Pwr  }
   "Set IntLtgSys:nrcctblRowLuminairesCreditsRef5:LtgCredits07_LuminaireCountByType"  IntLtgSys:nrcctblRowLuminairesCreditsRef5:LtgCredits07_LuminaireCountByType = {  LumCnt[5]  }

  ; Rule to Delete empty nrccSection_LtgCredits
   "DELETE empty nrccTableLtgCredits object"
      nrccSection_LtgCredits:Action   = {  if (ComponentCount( nrcctblRowLtgCredits ) < 1) then  DeleteComp()  else  UNCHANGED  endif }



   "Create nrccSection_LtgControls object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathLtg == "Performance") 
         then CreateChildren( nrccSection_LtgControls, 1, "NRCC LtgControls" )
         else UNCHANGED 
         endif }
   "Create nrccSection_LtgControls nrccTableLtgControls object"              nrccSection_LtgControls:Action  =
      {  CreateChildren( nrccTableLtgControls, 1, "NRCC LtgControls table" )  }

   "Create nrccSection_LtgControls nrcctblRowLtgControls #1 object"     nrccTableLtgControls:Action  =      ; SAC 05/17/21
      {  if (GlobalStatus( Proj:MandatoryLtgCtrlDescRpt[1] ) < 1 .OR.
             EnumValue( Proj:MandatoryLtgCtrlSpcFunctRpt[1] ) < 1)
         then  UNCHANGED
         else if (strlen( Proj:MandatoryLtgCtrlDescRpt[1] ) > 0)
         then  CreateChildren( nrcctblRowLtgControls, 1, "NRCC LtgControls row1", "NRCCPRF_RowLtgControls_row1" )
         else  UNCHANGED  endif endif  }
   "Create nrccSection_LtgControls nrcctblRowLtgControls #2 object"     nrccTableLtgControls:Action  = 
      {  if (GlobalStatus( Proj:MandatoryLtgCtrlDescRpt[2] ) < 1 .OR.
             EnumValue( Proj:MandatoryLtgCtrlSpcFunctRpt[2] ) < 1)
         then  UNCHANGED
         else if (strlen( Proj:MandatoryLtgCtrlDescRpt[2] ) > 0)
         then  CreateChildren( nrcctblRowLtgControls, 1, "NRCC LtgControls row2", "NRCCPRF_RowLtgControls_row2" )
         else  UNCHANGED  endif endif  }
   "Create nrccSection_LtgControls nrcctblRowLtgControls #3 object"     nrccTableLtgControls:Action  = 
      {  if (GlobalStatus( Proj:MandatoryLtgCtrlDescRpt[3] ) < 1 .OR.
             EnumValue( Proj:MandatoryLtgCtrlSpcFunctRpt[3] ) < 1)
         then  UNCHANGED
         else if (strlen( Proj:MandatoryLtgCtrlDescRpt[3] ) > 0)
         then  CreateChildren( nrcctblRowLtgControls, 1, "NRCC LtgControls row3", "NRCCPRF_RowLtgControls_row3" )
         else  UNCHANGED  endif endif  }
   "Create nrccSection_LtgControls nrcctblRowLtgControls #4 object"     nrccTableLtgControls:Action  = 
      {  if (GlobalStatus( Proj:MandatoryLtgCtrlDescRpt[4] ) < 1 .OR.
             EnumValue( Proj:MandatoryLtgCtrlSpcFunctRpt[4] ) < 1)
         then  UNCHANGED
         else if (strlen( Proj:MandatoryLtgCtrlDescRpt[4] ) > 0)
         then  CreateChildren( nrcctblRowLtgControls, 1, "NRCC LtgControls row4", "NRCCPRF_RowLtgControls_row4" )
         else  UNCHANGED  endif endif  }
   "Create nrccSection_LtgControls nrcctblRowLtgControls #5 object"     nrccTableLtgControls:Action  = 
      {  if (GlobalStatus( Proj:MandatoryLtgCtrlDescRpt[5] ) < 1 .OR.
             EnumValue( Proj:MandatoryLtgCtrlSpcFunctRpt[5] ) < 1)
         then  UNCHANGED
         else if (strlen( Proj:MandatoryLtgCtrlDescRpt[5] ) > 0)
         then  CreateChildren( nrcctblRowLtgControls, 1, "NRCC LtgControls row5", "NRCCPRF_RowLtgControls_row5" )
         else  UNCHANGED  endif endif  }
   "Create nrccSection_LtgControls nrcctblRowLtgControls #6 object"     nrccTableLtgControls:Action  = 
      {  if (GlobalStatus( Proj:MandatoryLtgCtrlDescRpt[6] ) < 1 .OR.
             EnumValue( Proj:MandatoryLtgCtrlSpcFunctRpt[6] ) < 1)
         then  UNCHANGED
         else if (strlen( Proj:MandatoryLtgCtrlDescRpt[6] ) > 0)
         then  CreateChildren( nrcctblRowLtgControls, 1, "NRCC LtgControls row6", "NRCCPRF_RowLtgControls_row6" )
         else  UNCHANGED  endif endif  }
   "Create nrccSection_LtgControls nrcctblRowLtgControls #7 object"     nrccTableLtgControls:Action  = 
      {  if (GlobalStatus( Proj:MandatoryLtgCtrlDescRpt[7] ) < 1 .OR.
             EnumValue( Proj:MandatoryLtgCtrlSpcFunctRpt[7] ) < 1)
         then  UNCHANGED
         else if (strlen( Proj:MandatoryLtgCtrlDescRpt[7] ) > 0)
         then  CreateChildren( nrcctblRowLtgControls, 1, "NRCC LtgControls row7", "NRCCPRF_RowLtgControls_row7" )
         else  UNCHANGED  endif endif  }
   "Create nrccSection_LtgControls nrcctblRowLtgControls #8 object"     nrccTableLtgControls:Action  = 
      {  if (GlobalStatus( Proj:MandatoryLtgCtrlDescRpt[8] ) < 1 .OR.
             EnumValue( Proj:MandatoryLtgCtrlSpcFunctRpt[8] ) < 1)
         then  UNCHANGED
         else if (strlen( Proj:MandatoryLtgCtrlDescRpt[8] ) > 0)
         then  CreateChildren( nrcctblRowLtgControls, 1, "NRCC LtgControls row8", "NRCCPRF_RowLtgControls_row8" )
         else  UNCHANGED  endif endif  }
   "Create nrccSection_LtgControls nrcctblRowLtgControls #9 object"     nrccTableLtgControls:Action  = 
      {  if (GlobalStatus( Proj:MandatoryLtgCtrlDescRpt[9] ) < 1 .OR.
             EnumValue( Proj:MandatoryLtgCtrlSpcFunctRpt[9] ) < 1)
         then  UNCHANGED
         else if (strlen( Proj:MandatoryLtgCtrlDescRpt[9] ) > 0)
         then  CreateChildren( nrcctblRowLtgControls, 1, "NRCC LtgControls row9", "NRCCPRF_RowLtgControls_row9" )
         else  UNCHANGED  endif endif  }
   "Create nrccSection_LtgControls nrcctblRowLtgControls #10 object"    nrccTableLtgControls:Action  = 
      {  if (GlobalStatus( Proj:MandatoryLtgCtrlDescRpt[10] ) < 1 .OR.
             EnumValue( Proj:MandatoryLtgCtrlSpcFunctRpt[10] ) < 1)
         then  UNCHANGED
         else if (strlen( Proj:MandatoryLtgCtrlDescRpt[10] ) > 0)
         then  CreateChildren( nrcctblRowLtgControls, 1, "NRCC LtgControls row10", "NRCCPRF_RowLtgControls_row10" )
         else  UNCHANGED  endif endif  }

  ; Rule to Delete empty nrccSection_LtgControls
   "DELETE empty nrccTableLtgControls object"
      nrccSection_LtgControls:Action   = {  if (ComponentCount( nrcctblRowLtgControls ) < 1) then  DeleteComp()  else  UNCHANGED  endif }



   "Create nrccSection_TailoredSum object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathLtg == "Performance" .AND. Bldg:CondTMBaseGenlPwr) 
         then CreateChildren( nrccSection_TailoredSum,    1, "NRCC TailoredSum" )
         else UNCHANGED 
         endif }



   "Create nrccSection_TailoredGen object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathLtg == "Performance") 
         then CreateChildren( nrccSection_TailoredGen, 1, "NRCC TailoredGen" )
         else UNCHANGED 
         endif }
   "Create nrccSection_TailoredGen nrccTableTailoredGen object"              nrccSection_TailoredGen:Action  =
      {  CreateChildren( nrccTableTailoredGen, 1, "NRCC TailoredGen table" )  }
   "Create nrcctblRowTailoredGen object for each pertinent Space"     Spc:nrcctblRowTailoredGenRef =
      {  if (LocalCompAssigned( nrcctblRowTailoredGenRef ) > 0 .OR.
             ComponentCount( nrccTableTailoredGen ) < 1 .OR.
             IntLtgSpecMthd != "TailoredMethod") then  UNDEFINED
         else if (CondgType == "DirectlyConditioned" .OR. CondgType == "IndirectlyConditioned") 
              then CreateComp( nrcctblRowTailoredGen, Format( "%s TailoredGen tblRow", Name ) )
              else UNDEFINED
              endif
         endif  }
   "Set Spc:nrcctblRowTailoredGenRef:noXMLoutput_SpcRef"    Spc:nrcctblRowTailoredGenRef:noXMLoutput_SpcRef = {  Name  }
  ; Rule to Delete empty nrccSection_TailoredGen
   "DELETE empty nrccTableTailoredGen object"
      nrccSection_TailoredGen:Action   = {  if (ComponentCount( nrcctblRowTailoredGen ) < 1) then  DeleteComp()  else  UNCHANGED  endif }



   "Create nrccSection_TailoredRCR object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathLtg == "Performance") 
         then CreateChildren( nrccSection_TailoredRCR, 1, "NRCC TailoredRCR" )
         else UNCHANGED 
         endif }
   "Create nrccSection_TailoredRCR nrccTableTailoredRCR object"              nrccSection_TailoredRCR:Action  =
      {  CreateChildren( nrccTableTailoredRCR, 1, "NRCC TailoredRCR table" )  }
   "Create nrcctblRowTailoredRCR object for each pertinent Space"     Spc:nrcctblRowTailoredRCRRef =
      {  if (LocalCompAssigned( nrcctblRowTailoredRCRRef ) > 0 .OR.
             ComponentCount( nrccTableTailoredRCR ) < 1 .OR.
             IntLtgSpecMthd != "TailoredMethod" .OR.
             ( CondgType != "DirectlyConditioned" .AND. CondgType != "IndirectlyConditioned" ) ) then  UNDEFINED
         else  CreateComp( nrcctblRowTailoredRCR, Format( "%s TailoredRCR tblRow", Name ) )
         endif  }
   "Set Spc:nrcctblRowTailoredRCRRef:noXMLoutput_SpcRef"    Spc:nrcctblRowTailoredRCRRef:noXMLoutput_SpcRef = {  Name  }
  ; Rule to Delete empty nrccSection_TailoredRCR
   "DELETE empty nrccTableTailoredRCR object"
      nrccSection_TailoredRCR:Action   = {  if (ComponentCount( nrcctblRowTailoredRCR ) < 1) then  DeleteComp()  else  UNCHANGED  endif }



   "Create nrccSection_TailoredWall object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathLtg == "Performance") 
         then CreateChildren( nrccSection_TailoredWall, 1, "NRCC TailoredWall" )
         else UNCHANGED 
         endif }
   "Create nrccSection_TailoredWall nrccTableTailoredWall object"              nrccSection_TailoredWall:Action  =
      {  CreateChildren( nrccTableTailoredWall, 1, "NRCC TailoredWall table" )  }
   "Create nrcctblRowTailoredWall object for each pertinent Space"     Spc:nrcctblRowTailoredWallRef =
      {  if (LocalCompAssigned( nrcctblRowTailoredWallRef ) > 0 .OR.
             TMWallDispAllow <= 0 ) then  UNDEFINED
         else if (CondgType == "DirectlyConditioned" .OR. CondgType == "IndirectlyConditioned") 
              then CreateComp( nrcctblRowTailoredWall, Format( "%s TailoredWall tblRow", Name ) )
              else UNDEFINED
              endif
         endif  }
   "Set Spc:nrcctblRowTailoredWallRef:noXMLoutput_SpcRef"    Spc:nrcctblRowTailoredWallRef:noXMLoutput_SpcRef = {  Name  }

   "Create nrccTableIntLtgSysWallRef object for each pertinent Space"     Spc:nrccTableIntLtgSysWallRef =
      {  if (LocalCompAssigned( nrcctblRowTailoredWallRef ) < 1)
         then  UNDEFINED
         else  CreateComp( nrccTableIntLtgSysWall, Format( "%s TableIntLtgSysWall", Name ) )
         endif  }
   "Set Spc:nrccTableIntLtgSysWallRef:noXMLoutput_SpcRef"    Spc:nrccTableIntLtgSysWallRef:noXMLoutput_SpcRef = {  Name  }

   "Create nrcctblRowIntLtgSysWallRef object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowIntLtgSysWallRef =
      {  if (ParentCompAssigned( Spc:nrcctblRowTailoredWallRef ) < 1 .OR. AllowType != "TailoredWallDisplayAllowance")
         then  UNDEFINED
         else  CreateComp( nrcctblRowIntLtgSysWall, Format( "%s RowIntLtgSysWall", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowIntLtgSysWallRef:noXMLoutput_IntLtgSysRef"    IntLtgSys:nrcctblRowIntLtgSysWallRef:noXMLoutput_IntLtgSysRef = {  Name  }

   "Set nrcctblRowIntLtgSysWall Parent"    IntLtgSys:nrcctblRowIntLtgSysWallRef:Parent = {  Spc:nrccTableIntLtgSysWallRef  }

;   "Debug"    IntLtgSys:Action = {  PostMessageToLog("IntLtgSys '%s'  Parent: %s", Name, Parent(Name) )  }
;   "Debug"    IntLtgSys:Action = {  if ( ParentCompAssigned(nrcctblRowTailoredWallRef)) then PostMessageToLog("IntLtgSys '%s'  Parent:nrcctblRowTailoredWallRef '%s'", Name, nrcctblRowTailoredWallRef:Name ) else PostMessageToLog("IntLtgSys '%s'  No Parent:nrcctblRowTailoredWallRef", Name ) endif  }
;   "Debug"    nrcctblRowIntLtgSysWall:Action = {  if ( ParentCompAssigned(noXMLoutput_SpcRef)) then PostMessageToLog("tblRowIntLtgSysWall '%s  Parent: %s", Name, Parent(Name) ) else PostMessageToLog("tblRowIntLtgSysWall '%s  No Parent", Name ) endif  }

   "Create nrccTableLuminairesWallRef object for each pertinent IntLtgSys"     IntLtgSys:nrccTableLuminairesWallRef =
      {  if (LocalCompAssigned( nrcctblRowIntLtgSysWallRef ) < 1 .OR.
               (LocalCompAssigned( LumRef[1] ) < 1 .AND. LocalCompAssigned( LumRef[2] ) < 1 .AND.
                LocalCompAssigned( LumRef[3] ) < 1 .AND. LocalCompAssigned( LumRef[4] ) < 1 .AND.
                LocalCompAssigned( LumRef[5] ) < 1 ))
         then  UNDEFINED
         else  CreateComp( nrccTableLuminairesWall, Format( "%s TableLuminairesWall", Name ) )
         endif  }
   "Set IntLtgSys:nrccTableLuminairesWallRef:noXMLoutput_IntLtgSysRef"    IntLtgSys:nrccTableLuminairesWallRef:noXMLoutput_IntLtgSysRef = {  Name  }

   "Create nrcctblRowLuminairesWallRef1 object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowLuminairesWallRef1 =
      {  if (LocalCompAssigned( nrccTableLuminairesWallRef ) < 1 .OR.
             LocalCompAssigned( LumRef[1] ) < 1)
         then  UNDEFINED
         else  CreateComp( nrcctblRowLuminairesWall, Format( "%s RowLuminaires1", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowLuminairesWallRef1:noXMLoutput_IntLtgSysRef"             IntLtgSys:nrcctblRowLuminairesWallRef1:noXMLoutput_IntLtgSysRef      = {  Name  }
   "Set IntLtgSys:nrcctblRowLuminairesWallRef1:TailoredWall09_LuminaireName"         IntLtgSys:nrcctblRowLuminairesWallRef1:TailoredWall09_LuminaireName  = {  LumRef[1]:Name  }
   "Set IntLtgSys:nrcctblRowLuminairesWallRef1:TailoredWall10_LuminairePower"        IntLtgSys:nrcctblRowLuminairesWallRef1:TailoredWall10_LuminairePower = {  LumRef[1]:Pwr  }
   "Set IntLtgSys:nrcctblRowLuminairesWallRef1:TailoredWall11_LuminaireCountByType"  IntLtgSys:nrcctblRowLuminairesWallRef1:TailoredWall11_LuminaireCountByType = {  LumCnt[1]  }

   "Create nrcctblRowLuminairesWallRef2 object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowLuminairesWallRef2 =
      {  if (LocalCompAssigned( nrccTableLuminairesWallRef ) < 1 .OR.
             LocalCompAssigned( LumRef[2] ) < 1)
         then  UNDEFINED
         else  CreateComp( nrcctblRowLuminairesWall, Format( "%s RowLuminaires2", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowLuminairesWallRef2:noXMLoutput_IntLtgSysRef"             IntLtgSys:nrcctblRowLuminairesWallRef2:noXMLoutput_IntLtgSysRef      = {  Name  }
   "Set IntLtgSys:nrcctblRowLuminairesWallRef2:TailoredWall09_LuminaireName"         IntLtgSys:nrcctblRowLuminairesWallRef2:TailoredWall09_LuminaireName  = {  LumRef[2]:Name  }
   "Set IntLtgSys:nrcctblRowLuminairesWallRef2:TailoredWall10_LuminairePower"        IntLtgSys:nrcctblRowLuminairesWallRef2:TailoredWall10_LuminairePower = {  LumRef[2]:Pwr  }
   "Set IntLtgSys:nrcctblRowLuminairesWallRef2:TailoredWall11_LuminaireCountByType"  IntLtgSys:nrcctblRowLuminairesWallRef2:TailoredWall11_LuminaireCountByType = {  LumCnt[2]  }

   "Create nrcctblRowLuminairesWallRef3 object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowLuminairesWallRef3 =
      {  if (LocalCompAssigned( nrccTableLuminairesWallRef ) < 1 .OR.
             LocalCompAssigned( LumRef[3] ) < 1)
         then  UNDEFINED
         else  CreateComp( nrcctblRowLuminairesWall, Format( "%s RowLuminaires3", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowLuminairesWallRef3:noXMLoutput_IntLtgSysRef"             IntLtgSys:nrcctblRowLuminairesWallRef3:noXMLoutput_IntLtgSysRef      = {  Name  }
   "Set IntLtgSys:nrcctblRowLuminairesWallRef3:TailoredWall09_LuminaireName"         IntLtgSys:nrcctblRowLuminairesWallRef3:TailoredWall09_LuminaireName  = {  LumRef[3]:Name  }
   "Set IntLtgSys:nrcctblRowLuminairesWallRef3:TailoredWall10_LuminairePower"        IntLtgSys:nrcctblRowLuminairesWallRef3:TailoredWall10_LuminairePower = {  LumRef[3]:Pwr  }
   "Set IntLtgSys:nrcctblRowLuminairesWallRef3:TailoredWall11_LuminaireCountByType"  IntLtgSys:nrcctblRowLuminairesWallRef3:TailoredWall11_LuminaireCountByType = {  LumCnt[3]  }

   "Create nrcctblRowLuminairesWallRef4 object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowLuminairesWallRef4 =
      {  if (LocalCompAssigned( nrccTableLuminairesWallRef ) < 1 .OR.
             LocalCompAssigned( LumRef[4] ) < 1)
         then  UNDEFINED
         else  CreateComp( nrcctblRowLuminairesWall, Format( "%s RowLuminaires4", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowLuminairesWallRef4:noXMLoutput_IntLtgSysRef"             IntLtgSys:nrcctblRowLuminairesWallRef4:noXMLoutput_IntLtgSysRef      = {  Name  }
   "Set IntLtgSys:nrcctblRowLuminairesWallRef4:TailoredWall09_LuminaireName"         IntLtgSys:nrcctblRowLuminairesWallRef4:TailoredWall09_LuminaireName  = {  LumRef[4]:Name  }
   "Set IntLtgSys:nrcctblRowLuminairesWallRef4:TailoredWall10_LuminairePower"        IntLtgSys:nrcctblRowLuminairesWallRef4:TailoredWall10_LuminairePower = {  LumRef[4]:Pwr  }
   "Set IntLtgSys:nrcctblRowLuminairesWallRef4:TailoredWall11_LuminaireCountByType"  IntLtgSys:nrcctblRowLuminairesWallRef4:TailoredWall11_LuminaireCountByType = {  LumCnt[4]  }

   "Create nrcctblRowLuminairesWallRef5 object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowLuminairesWallRef5 =
      {  if (LocalCompAssigned( nrccTableLuminairesWallRef ) < 1 .OR.
             LocalCompAssigned( LumRef[5] ) < 1)
         then  UNDEFINED
         else  CreateComp( nrcctblRowLuminairesWall, Format( "%s RowLuminaires5", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowLuminairesWallRef5:noXMLoutput_IntLtgSysRef"             IntLtgSys:nrcctblRowLuminairesWallRef5:noXMLoutput_IntLtgSysRef      = {  Name  }
   "Set IntLtgSys:nrcctblRowLuminairesWallRef5:TailoredWall09_LuminaireName"         IntLtgSys:nrcctblRowLuminairesWallRef5:TailoredWall09_LuminaireName  = {  LumRef[5]:Name  }
   "Set IntLtgSys:nrcctblRowLuminairesWallRef5:TailoredWall10_LuminairePower"        IntLtgSys:nrcctblRowLuminairesWallRef5:TailoredWall10_LuminairePower = {  LumRef[5]:Pwr  }
   "Set IntLtgSys:nrcctblRowLuminairesWallRef5:TailoredWall11_LuminaireCountByType"  IntLtgSys:nrcctblRowLuminairesWallRef5:TailoredWall11_LuminaireCountByType = {  LumCnt[5]  }

  ; Rule to Delete empty nrccSection_TailoredWall
   "DELETE empty nrccTableTailoredWall object"
      nrccSection_TailoredWall:Action   = {  if (ComponentCount( nrcctblRowTailoredWall ) < 1) then  DeleteComp()  else  UNCHANGED  endif }



   "Create nrccSection_TailoredFloor object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathLtg == "Performance") 
         then CreateChildren( nrccSection_TailoredFloor, 1, "NRCC TailoredFloor" )
         else UNCHANGED 
         endif }
   "Create nrccSection_TailoredFloor nrccTableTailoredFloor object"              nrccSection_TailoredFloor:Action  =
      {  CreateChildren( nrccTableTailoredFloor, 1, "NRCC TailoredFloor table" )  }
   "Create nrcctblRowTailoredFloor object for each pertinent Space"     Spc:nrcctblRowTailoredFloorRef =
      {  if (LocalCompAssigned( nrcctblRowTailoredFloorRef ) > 0 .OR.
             TMCmbdFlrDispTaskAllow <= 0 ) then  UNDEFINED
         else if (CondgType == "DirectlyConditioned" .OR. CondgType == "IndirectlyConditioned") 
              then CreateComp( nrcctblRowTailoredFloor, Format( "%s TailoredFloor tblRow", Name ) )
              else UNDEFINED
              endif
         endif  }
   "Set Spc:nrcctblRowTailoredFloorRef:noXMLoutput_SpcRef"    Spc:nrcctblRowTailoredFloorRef:noXMLoutput_SpcRef = {  Name  }

   "Create nrccTableIntLtgSysFloorRef object for each pertinent Space"     Spc:nrccTableIntLtgSysFloorRef =
      {  if (LocalCompAssigned( nrcctblRowTailoredFloorRef ) < 1)
         then  UNDEFINED
         else  CreateComp( nrccTableIntLtgSysFloor, Format( "%s TableIntLtgSysFloor", Name ) )
         endif  }
   "Set Spc:nrccTableIntLtgSysFloorRef:noXMLoutput_SpcRef"    Spc:nrccTableIntLtgSysFloorRef:noXMLoutput_SpcRef = {  Name  }

   "Create nrcctblRowIntLtgSysFloorRef object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowIntLtgSysFloorRef =
      {  if (ParentCompAssigned( Spc:nrcctblRowTailoredFloorRef ) < 1 .OR.
              (AllowType != "TailoredFloorDisplayAllowance" .AND. AllowType != "TailoredTaskAllowance") )
         then  UNDEFINED
         else  CreateComp( nrcctblRowIntLtgSysFloor, Format( "%s RowIntLtgSysFloor", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowIntLtgSysFloorRef:noXMLoutput_IntLtgSysRef"    IntLtgSys:nrcctblRowIntLtgSysFloorRef:noXMLoutput_IntLtgSysRef = {  Name  }

   "Set nrcctblRowIntLtgSysFloor Parent"    IntLtgSys:nrcctblRowIntLtgSysFloorRef:Parent = {  Spc:nrccTableIntLtgSysFloorRef  }

;   "Debug"    IntLtgSys:Action = {  PostMessageToLog("IntLtgSys '%s'  Parent: %s", Name, Parent(Name) )  }
;   "Debug"    IntLtgSys:Action = {  if ( ParentCompAssigned(nrcctblRowTailoredFloorRef)) then PostMessageToLog("IntLtgSys '%s'  Parent:nrcctblRowTailoredFloorRef '%s'", Name, nrcctblRowTailoredFloorRef:Name ) else PostMessageToLog("IntLtgSys '%s'  No Parent:nrcctblRowTailoredFloorRef", Name ) endif  }
;   "Debug"    nrcctblRowIntLtgSysFloor:Action = {  if ( ParentCompAssigned(noXMLoutput_SpcRef)) then PostMessageToLog("tblRowIntLtgSysFloor '%s  Parent: %s", Name, Parent(Name) ) else PostMessageToLog("tblRowIntLtgSysFloor '%s  No Parent", Name ) endif  }

   "Create nrccTableLuminairesFloorRef object for each pertinent IntLtgSys"     IntLtgSys:nrccTableLuminairesFloorRef =
      {  if (LocalCompAssigned( nrcctblRowIntLtgSysFloorRef ) < 1 .OR.
               (LocalCompAssigned( LumRef[1] ) < 1 .AND. LocalCompAssigned( LumRef[2] ) < 1 .AND.
                LocalCompAssigned( LumRef[3] ) < 1 .AND. LocalCompAssigned( LumRef[4] ) < 1 .AND.
                LocalCompAssigned( LumRef[5] ) < 1 ))
         then  UNDEFINED
         else  CreateComp( nrccTableLuminairesFloor, Format( "%s TableLuminairesFloor", Name ) )
         endif  }
   "Set IntLtgSys:nrccTableLuminairesFloorRef:noXMLoutput_IntLtgSysRef"    IntLtgSys:nrccTableLuminairesFloorRef:noXMLoutput_IntLtgSysRef = {  Name  }

   "Create nrcctblRowLuminairesFloorRef1 object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowLuminairesFloorRef1 =
      {  if (LocalCompAssigned( nrccTableLuminairesFloorRef ) < 1 .OR.
             LocalCompAssigned( LumRef[1] ) < 1)
         then  UNDEFINED
         else  CreateComp( nrcctblRowLuminairesFloor, Format( "%s TailoredFloorRowLuminaires1", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowLuminairesFloorRef1:noXMLoutput_IntLtgSysRef"             IntLtgSys:nrcctblRowLuminairesFloorRef1:noXMLoutput_IntLtgSysRef      = {  Name  }
   "Set IntLtgSys:nrcctblRowLuminairesFloorRef1:TailoredFloor09_LuminaireName"         IntLtgSys:nrcctblRowLuminairesFloorRef1:TailoredFloor09_LuminaireName  = {  LumRef[1]:Name  }
   "Set IntLtgSys:nrcctblRowLuminairesFloorRef1:TailoredFloor10_LuminairePower"        IntLtgSys:nrcctblRowLuminairesFloorRef1:TailoredFloor10_LuminairePower = {  LumRef[1]:Pwr  }
   "Set IntLtgSys:nrcctblRowLuminairesFloorRef1:TailoredFloor11_LuminaireCountByType"  IntLtgSys:nrcctblRowLuminairesFloorRef1:TailoredFloor11_LuminaireCountByType = {  LumCnt[1]  }

   "Create nrcctblRowLuminairesFloorRef2 object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowLuminairesFloorRef2 =
      {  if (LocalCompAssigned( nrccTableLuminairesFloorRef ) < 1 .OR.
             LocalCompAssigned( LumRef[2] ) < 1)
         then  UNDEFINED
         else  CreateComp( nrcctblRowLuminairesFloor, Format( "%s TailoredFloorRowLuminaires2", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowLuminairesFloorRef2:noXMLoutput_IntLtgSysRef"             IntLtgSys:nrcctblRowLuminairesFloorRef2:noXMLoutput_IntLtgSysRef      = {  Name  }
   "Set IntLtgSys:nrcctblRowLuminairesFloorRef2:TailoredFloor09_LuminaireName"         IntLtgSys:nrcctblRowLuminairesFloorRef2:TailoredFloor09_LuminaireName  = {  LumRef[2]:Name  }
   "Set IntLtgSys:nrcctblRowLuminairesFloorRef2:TailoredFloor10_LuminairePower"        IntLtgSys:nrcctblRowLuminairesFloorRef2:TailoredFloor10_LuminairePower = {  LumRef[2]:Pwr  }
   "Set IntLtgSys:nrcctblRowLuminairesFloorRef2:TailoredFloor11_LuminaireCountByType"  IntLtgSys:nrcctblRowLuminairesFloorRef2:TailoredFloor11_LuminaireCountByType = {  LumCnt[2]  }

   "Create nrcctblRowLuminairesFloorRef3 object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowLuminairesFloorRef3 =
      {  if (LocalCompAssigned( nrccTableLuminairesFloorRef ) < 1 .OR.
             LocalCompAssigned( LumRef[3] ) < 1)
         then  UNDEFINED
         else  CreateComp( nrcctblRowLuminairesFloor, Format( "%s TailoredFloorRowLuminaires3", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowLuminairesFloorRef3:noXMLoutput_IntLtgSysRef"             IntLtgSys:nrcctblRowLuminairesFloorRef3:noXMLoutput_IntLtgSysRef      = {  Name  }
   "Set IntLtgSys:nrcctblRowLuminairesFloorRef3:TailoredFloor09_LuminaireName"         IntLtgSys:nrcctblRowLuminairesFloorRef3:TailoredFloor09_LuminaireName  = {  LumRef[3]:Name  }
   "Set IntLtgSys:nrcctblRowLuminairesFloorRef3:TailoredFloor10_LuminairePower"        IntLtgSys:nrcctblRowLuminairesFloorRef3:TailoredFloor10_LuminairePower = {  LumRef[3]:Pwr  }
   "Set IntLtgSys:nrcctblRowLuminairesFloorRef3:TailoredFloor11_LuminaireCountByType"  IntLtgSys:nrcctblRowLuminairesFloorRef3:TailoredFloor11_LuminaireCountByType = {  LumCnt[3]  }

   "Create nrcctblRowLuminairesFloorRef4 object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowLuminairesFloorRef4 =
      {  if (LocalCompAssigned( nrccTableLuminairesFloorRef ) < 1 .OR.
             LocalCompAssigned( LumRef[4] ) < 1)
         then  UNDEFINED
         else  CreateComp( nrcctblRowLuminairesFloor, Format( "%s TailoredFloorRowLuminaires4", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowLuminairesFloorRef4:noXMLoutput_IntLtgSysRef"             IntLtgSys:nrcctblRowLuminairesFloorRef4:noXMLoutput_IntLtgSysRef      = {  Name  }
   "Set IntLtgSys:nrcctblRowLuminairesFloorRef4:TailoredFloor09_LuminaireName"         IntLtgSys:nrcctblRowLuminairesFloorRef4:TailoredFloor09_LuminaireName  = {  LumRef[4]:Name  }
   "Set IntLtgSys:nrcctblRowLuminairesFloorRef4:TailoredFloor10_LuminairePower"        IntLtgSys:nrcctblRowLuminairesFloorRef4:TailoredFloor10_LuminairePower = {  LumRef[4]:Pwr  }
   "Set IntLtgSys:nrcctblRowLuminairesFloorRef4:TailoredFloor11_LuminaireCountByType"  IntLtgSys:nrcctblRowLuminairesFloorRef4:TailoredFloor11_LuminaireCountByType = {  LumCnt[4]  }

   "Create nrcctblRowLuminairesFloorRef5 object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowLuminairesFloorRef5 =
      {  if (LocalCompAssigned( nrccTableLuminairesFloorRef ) < 1 .OR.
             LocalCompAssigned( LumRef[5] ) < 1)
         then  UNDEFINED
         else  CreateComp( nrcctblRowLuminairesFloor, Format( "%s TailoredFloorRowLuminaires5", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowLuminairesFloorRef5:noXMLoutput_IntLtgSysRef"             IntLtgSys:nrcctblRowLuminairesFloorRef5:noXMLoutput_IntLtgSysRef      = {  Name  }
   "Set IntLtgSys:nrcctblRowLuminairesFloorRef5:TailoredFloor09_LuminaireName"         IntLtgSys:nrcctblRowLuminairesFloorRef5:TailoredFloor09_LuminaireName  = {  LumRef[5]:Name  }
   "Set IntLtgSys:nrcctblRowLuminairesFloorRef5:TailoredFloor10_LuminairePower"        IntLtgSys:nrcctblRowLuminairesFloorRef5:TailoredFloor10_LuminairePower = {  LumRef[5]:Pwr  }
   "Set IntLtgSys:nrcctblRowLuminairesFloorRef5:TailoredFloor11_LuminaireCountByType"  IntLtgSys:nrcctblRowLuminairesFloorRef5:TailoredFloor11_LuminaireCountByType = {  LumCnt[5]  }

  ; Rule to Delete empty nrccSection_TailoredFloor
   "DELETE empty nrccTableTailoredFloor object"
      nrccSection_TailoredFloor:Action   = {  if (ComponentCount( nrcctblRowTailoredFloor ) < 1) then  DeleteComp()  else  UNCHANGED  endif }



   "Create nrccSection_TailoredOrnamental object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathLtg == "Performance") 
         then CreateChildren( nrccSection_TailoredOrnamental, 1, "NRCC TailoredOrnamental" )
         else UNCHANGED 
         endif }
   "Create nrccSection_TailoredOrnamental nrccTableTailoredOrnamental object"              nrccSection_TailoredOrnamental:Action  =
      {  CreateChildren( nrccTableTailoredOrnamental, 1, "NRCC TailoredOrnamental table" )  }
   "Create nrcctblRowTailoredOrnamental object for each pertinent Space"     Spc:nrcctblRowTailoredOrnamentalRef =
      {  if (LocalCompAssigned( nrcctblRowTailoredOrnamentalRef ) > 0 .OR.
             TMOrnAndSpclEftAllow <= 0 ) then  UNDEFINED
         else if (CondgType == "DirectlyConditioned" .OR. CondgType == "IndirectlyConditioned") 
              then CreateComp( nrcctblRowTailoredOrnamental, Format( "%s TailoredOrnamental tblRow", Name ) )
              else UNDEFINED
              endif
         endif  }
   "Set Spc:nrcctblRowTailoredOrnamentalRef:noXMLoutput_SpcRef"    Spc:nrcctblRowTailoredOrnamentalRef:noXMLoutput_SpcRef = {  Name  }

   "Create nrccTableIntLtgSysOrnamentalRef object for each pertinent IntLtgSys"     Spc:nrccTableIntLtgSysOrnamentalRef =
      {  if (LocalCompAssigned( nrcctblRowTailoredOrnamentalRef ) < 1)
         then  UNDEFINED
         else  CreateComp( nrccTableIntLtgSysOrnamental, Format( "%s TableIntLtgSysOrnamental", Name ) )
         endif  }
   "Set Spc:nrccTableIntLtgSysOrnamentalRef:noXMLoutput_SpcRef"    Spc:nrccTableIntLtgSysOrnamentalRef:noXMLoutput_SpcRef = {  Name  }

   "Create nrcctblRowIntLtgSysOrnamentalRef object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowIntLtgSysOrnamentalRef =
      {  if (ParentCompAssigned( Spc:nrcctblRowTailoredOrnamentalRef ) < 1 .OR.
              AllowType != "TailoredOrnamentalAndSpecialEffectAllowance" )
         then  UNDEFINED
         else  CreateComp( nrcctblRowIntLtgSysOrnamental, Format( "%s TailoredOrnamentalRowIntLtgSys", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowIntLtgSysOrnamentalRef:noXMLoutput_IntLtgSysRef"    IntLtgSys:nrcctblRowIntLtgSysOrnamentalRef:noXMLoutput_IntLtgSysRef = {  Name  }

   "Set nrcctblRowIntLtgSysOrnamental Parent"    IntLtgSys:nrcctblRowIntLtgSysOrnamentalRef:Parent = {  Spc:nrccTableIntLtgSysOrnamentalRef  }

   "Create nrccTableLuminairesOrnamentalRef object for each pertinent IntLtgSys"     IntLtgSys:nrccTableLuminairesOrnamentalRef =
      {  if (LocalCompAssigned( nrcctblRowIntLtgSysOrnamentalRef ) < 1 .OR.
               (LocalCompAssigned( LumRef[1] ) < 1 .AND. LocalCompAssigned( LumRef[2] ) < 1 .AND.
                LocalCompAssigned( LumRef[3] ) < 1 .AND. LocalCompAssigned( LumRef[4] ) < 1 .AND.
                LocalCompAssigned( LumRef[5] ) < 1 ))
         then  UNDEFINED
         else  CreateComp( nrccTableLuminairesOrnamental, Format( "%s TableLuminairesOrnamental", Name ) )
         endif  }
   "Set IntLtgSys:nrccTableLuminairesOrnamentalRef:noXMLoutput_IntLtgSysRef"    IntLtgSys:nrccTableLuminairesOrnamentalRef:noXMLoutput_IntLtgSysRef = {  Name  }

   "Create nrcctblRowLuminairesOrnamentalRef1 object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowLuminairesOrnamentalRef1 =
      {  if (LocalCompAssigned( nrccTableLuminairesOrnamentalRef ) < 1 .OR.
             LocalCompAssigned( LumRef[1] ) < 1)
         then  UNDEFINED
         else  CreateComp( nrcctblRowLuminairesOrnamental, Format( "%s TailoredOrnamentalRowLuminaires1", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowLuminairesOrnamentalRef1:noXMLoutput_IntLtgSysRef"             IntLtgSys:nrcctblRowLuminairesOrnamentalRef1:noXMLoutput_IntLtgSysRef      = {  Name  }
   "Set IntLtgSys:nrcctblRowLuminairesOrnamentalRef1:TailoredOrnamental09_LuminaireName"         IntLtgSys:nrcctblRowLuminairesOrnamentalRef1:TailoredOrnamental09_LuminaireName  = {  LumRef[1]:Name  }
   "Set IntLtgSys:nrcctblRowLuminairesOrnamentalRef1:TailoredOrnamental10_LuminairePower"        IntLtgSys:nrcctblRowLuminairesOrnamentalRef1:TailoredOrnamental10_LuminairePower = {  LumRef[1]:Pwr  }
   "Set IntLtgSys:nrcctblRowLuminairesOrnamentalRef1:TailoredOrnamental11_LuminaireCountByType"  IntLtgSys:nrcctblRowLuminairesOrnamentalRef1:TailoredOrnamental11_LuminaireCountByType = {  LumCnt[1]  }

   "Create nrcctblRowLuminairesOrnamentalRef2 object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowLuminairesOrnamentalRef2 =
      {  if (LocalCompAssigned( nrccTableLuminairesOrnamentalRef ) < 1 .OR.
             LocalCompAssigned( LumRef[2] ) < 1)
         then  UNDEFINED
         else  CreateComp( nrcctblRowLuminairesOrnamental, Format( "%s TailoredOrnamentalRowLuminaires2", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowLuminairesOrnamentalRef2:noXMLoutput_IntLtgSysRef"             IntLtgSys:nrcctblRowLuminairesOrnamentalRef2:noXMLoutput_IntLtgSysRef      = {  Name  }
   "Set IntLtgSys:nrcctblRowLuminairesOrnamentalRef2:TailoredOrnamental09_LuminaireName"         IntLtgSys:nrcctblRowLuminairesOrnamentalRef2:TailoredOrnamental09_LuminaireName  = {  LumRef[2]:Name  }
   "Set IntLtgSys:nrcctblRowLuminairesOrnamentalRef2:TailoredOrnamental10_LuminairePower"        IntLtgSys:nrcctblRowLuminairesOrnamentalRef2:TailoredOrnamental10_LuminairePower = {  LumRef[2]:Pwr  }
   "Set IntLtgSys:nrcctblRowLuminairesOrnamentalRef2:TailoredOrnamental11_LuminaireCountByType"  IntLtgSys:nrcctblRowLuminairesOrnamentalRef2:TailoredOrnamental11_LuminaireCountByType = {  LumCnt[2]  }

   "Create nrcctblRowLuminairesOrnamentalRef3 object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowLuminairesOrnamentalRef3 =
      {  if (LocalCompAssigned( nrccTableLuminairesOrnamentalRef ) < 1 .OR.
             LocalCompAssigned( LumRef[3] ) < 1)
         then  UNDEFINED
         else  CreateComp( nrcctblRowLuminairesOrnamental, Format( "%s TailoredOrnamentalRowLuminaires3", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowLuminairesOrnamentalRef3:noXMLoutput_IntLtgSysRef"             IntLtgSys:nrcctblRowLuminairesOrnamentalRef3:noXMLoutput_IntLtgSysRef      = {  Name  }
   "Set IntLtgSys:nrcctblRowLuminairesOrnamentalRef3:TailoredOrnamental09_LuminaireName"         IntLtgSys:nrcctblRowLuminairesOrnamentalRef3:TailoredOrnamental09_LuminaireName  = {  LumRef[3]:Name  }
   "Set IntLtgSys:nrcctblRowLuminairesOrnamentalRef3:TailoredOrnamental10_LuminairePower"        IntLtgSys:nrcctblRowLuminairesOrnamentalRef3:TailoredOrnamental10_LuminairePower = {  LumRef[3]:Pwr  }
   "Set IntLtgSys:nrcctblRowLuminairesOrnamentalRef3:TailoredOrnamental11_LuminaireCountByType"  IntLtgSys:nrcctblRowLuminairesOrnamentalRef3:TailoredOrnamental11_LuminaireCountByType = {  LumCnt[3]  }

   "Create nrcctblRowLuminairesOrnamentalRef4 object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowLuminairesOrnamentalRef4 =
      {  if (LocalCompAssigned( nrccTableLuminairesOrnamentalRef ) < 1 .OR.
             LocalCompAssigned( LumRef[4] ) < 1)
         then  UNDEFINED
         else  CreateComp( nrcctblRowLuminairesOrnamental, Format( "%s TailoredOrnamentalRowLuminaires4", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowLuminairesOrnamentalRef4:noXMLoutput_IntLtgSysRef"             IntLtgSys:nrcctblRowLuminairesOrnamentalRef4:noXMLoutput_IntLtgSysRef      = {  Name  }
   "Set IntLtgSys:nrcctblRowLuminairesOrnamentalRef4:TailoredOrnamental09_LuminaireName"         IntLtgSys:nrcctblRowLuminairesOrnamentalRef4:TailoredOrnamental09_LuminaireName  = {  LumRef[4]:Name  }
   "Set IntLtgSys:nrcctblRowLuminairesOrnamentalRef4:TailoredOrnamental10_LuminairePower"        IntLtgSys:nrcctblRowLuminairesOrnamentalRef4:TailoredOrnamental10_LuminairePower = {  LumRef[4]:Pwr  }
   "Set IntLtgSys:nrcctblRowLuminairesOrnamentalRef4:TailoredOrnamental11_LuminaireCountByType"  IntLtgSys:nrcctblRowLuminairesOrnamentalRef4:TailoredOrnamental11_LuminaireCountByType = {  LumCnt[4]  }

   "Create nrcctblRowLuminairesOrnamentalRef5 object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowLuminairesOrnamentalRef5 =
      {  if (LocalCompAssigned( nrccTableLuminairesOrnamentalRef ) < 1 .OR.
             LocalCompAssigned( LumRef[5] ) < 1)
         then  UNDEFINED
         else  CreateComp( nrcctblRowLuminairesOrnamental, Format( "%s TailoredOrnamentalRowLuminaires5", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowLuminairesOrnamentalRef5:noXMLoutput_IntLtgSysRef"             IntLtgSys:nrcctblRowLuminairesOrnamentalRef5:noXMLoutput_IntLtgSysRef      = {  Name  }
   "Set IntLtgSys:nrcctblRowLuminairesOrnamentalRef5:TailoredOrnamental09_LuminaireName"         IntLtgSys:nrcctblRowLuminairesOrnamentalRef5:TailoredOrnamental09_LuminaireName  = {  LumRef[5]:Name  }
   "Set IntLtgSys:nrcctblRowLuminairesOrnamentalRef5:TailoredOrnamental10_LuminairePower"        IntLtgSys:nrcctblRowLuminairesOrnamentalRef5:TailoredOrnamental10_LuminairePower = {  LumRef[5]:Pwr  }
   "Set IntLtgSys:nrcctblRowLuminairesOrnamentalRef5:TailoredOrnamental11_LuminaireCountByType"  IntLtgSys:nrcctblRowLuminairesOrnamentalRef5:TailoredOrnamental11_LuminaireCountByType = {  LumCnt[5]  }

  ; Rule to Delete empty nrccSection_TailoredOrnamental
   "DELETE empty nrccTableTailoredOrnamental object"
      nrccSection_TailoredOrnamental:Action   = {  if (ComponentCount( nrcctblRowTailoredOrnamental ) < 1) then  DeleteComp()  else  UNCHANGED  endif }



   "Create nrccSection_TailoredValuable object"   nrccNRCCPRF:Action =
      {  if (Proj:CompPathLtg == "Performance") 
         then CreateChildren( nrccSection_TailoredValuable, 1, "NRCC TailoredValuable" )
         else UNCHANGED 
         endif }
   "Create nrccSection_TailoredValuable nrccTableTailoredValuable object"              nrccSection_TailoredValuable:Action  =
      {  CreateChildren( nrccTableTailoredValuable, 1, "NRCC TailoredValuable table" )  }
   "Create nrcctblRowTailoredValuable object for each pertinent Space"     Spc:nrcctblRowTailoredValuableRef =
      {  if (LocalCompAssigned( nrcctblRowTailoredValuableRef ) > 0 .OR.
             TMVeryValDispAllow <= 0 ) then  UNDEFINED
         else if (CondgType == "DirectlyConditioned" .OR. CondgType == "IndirectlyConditioned") 
              then CreateComp( nrcctblRowTailoredValuable, Format( "%s TailoredValuable tblRow", Name ) )
              else UNDEFINED
              endif
         endif  }
   "Set Spc:nrcctblRowTailoredValuableRef:noXMLoutput_SpcRef"    Spc:nrcctblRowTailoredValuableRef:noXMLoutput_SpcRef = {  Name  }

   "Create nrccTableTailoredCaseRef object for each pertinent IntLtgSys"     Spc:nrccTableTailoredCaseRef =
      {  if (LocalCompAssigned( nrcctblRowTailoredValuableRef ) < 1)
         then  UNDEFINED
         else  CreateComp( nrccTableTailoredCase, Format( "%s TableTailoredCase", Name ) )
         endif  }
   "Set Spc:nrccTableTailoredCaseRef:noXMLoutput_SpcRef"    Spc:nrccTableTailoredCaseRef:noXMLoutput_SpcRef = {  Name  }

   "Create nrcctblRowTailoredCaseRef object for each pertinent IntLtgSys"     IntLtgSys:nrcctblRowTailoredCaseRef =
      {  if (ParentCompAssigned( Spc:nrccTableTailoredCaseRef ) < 1 .OR.
              AllowType != "TailoredVeryValuableDisplayCaseAllowance" )
         then  UNDEFINED
         else  CreateComp( nrcctblRowTailoredCase, Format( "%s RowTailoredCase", Name ) )
         endif  }
   "Set IntLtgSys:nrcctblRowTailoredCaseRef:noXMLoutput_IntLtgSysRef"    IntLtgSys:nrcctblRowTailoredCaseRef:noXMLoutput_IntLtgSysRef = {  Name  }

   "Set nrcctblRowTailoredCase Parent"    IntLtgSys:nrcctblRowTailoredCaseRef:Parent = {  Spc:nrccTableTailoredCaseRef  }

  ; Rule to Delete empty nrccSection_TailoredValuable
   "DELETE empty nrccTableTailoredValuable object"
      nrccSection_TailoredValuable:Action   = {  if (ComponentCount( nrcctblRowTailoredValuable ) < 1) then  DeleteComp()  else  UNCHANGED  endif }


   "Create nrccSection_Nrci object"
      nrccNRCCPRF:Action    = {  CreateChildren( nrccSection_Nrci,    1, "Nrci" )  }
  ; Rule to denote empty nrccSection_Nrci:Nrci00_NoRequiredNRCI located in Project-NRCCPRF.rule

   "Create nrccSection_Nrca object"
      nrccNRCCPRF:Action    = {  CreateChildren( nrccSection_Nrca,    1, "Nrca" )  }
  ; Rule to denote empty nrccSection_Nrca:Nrca00_NoRequiredNRCA located in Project-NRCCPRF.rule


   "Create nrccSection_Nrcv object"
      nrccNRCCPRF:Action    = {  CreateChildren( nrccSection_Nrcv,    1, "Nrcv" )  }
  ; Rule to denote empty nrccSection_Nrcv:Nrcv00_NoRequiredNRCV located in Project-NRCCPRF.rule



   "Create & initialize new nrccDeclarationsBlock object"
      nrccDocumentData:Action  = {  CreateChildren( nrccDeclarationsBlock,       1, "NRCC DeclarationsBlock" ) } ; no init needed

   "Create & initialize new nrcccomp_DocumentAuthorNRCC object"
      nrccDeclarationsBlock:Action  = {  CreateChildren( nrcccomp_DocumentAuthorNRCC,       1, "NRCC DocumentAuthorNRCC",     "NRCCPRF_Init_nrccDocumentAuthorNRCC" )  }

   "Create & initialize new nrcccomp_ResponsiblePersonNRCCPRF object"
      nrccDeclarationsBlock:Action  = {  CreateChildren( nrcccomp_ResponsiblePersonNRCCPRF,       1, "NRCC ResponsiblePersonNRCCPRF" ) } ; no init needed

   "Create & initialize new nrcccomp_ResponsiblePersonEnvelopeDesigner object"
      nrcccomp_ResponsiblePersonNRCCPRF:Action  = {  CreateChildren( nrcccomp_ResponsiblePersonEnvelopeDesigner,       1, "NRCC ResponsiblePersonEnvelopeDesigner",     "NRCCPRF_Init_nrccResponsiblePersonEnvelopeDesigner" )  }

   "Create & initialize new nrcccomp_ResponsiblePersonLightingDesigner object"
      nrcccomp_ResponsiblePersonNRCCPRF:Action  = {  CreateChildren( nrcccomp_ResponsiblePersonLightingDesigner,       1, "NRCC ResponsiblePersonLightingDesigner",     "NRCCPRF_Init_nrccResponsiblePersonLightingDesigner" )  }

   "Create & initialize new nrcccomp_ResponsiblePersonMechanicalDesigner object"
      nrcccomp_ResponsiblePersonNRCCPRF:Action  = {  CreateChildren( nrcccomp_ResponsiblePersonMechanicalDesigner,       1, "NRCC ResponsiblePersonMechanicalDesigner",     "NRCCPRF_Init_nrccResponsiblePersonMechanicalDesigner" )  }

   "Create & initialize new nrccFooter object"
      nrccDocumentData:Action  = {  CreateChildren( nrccFooter,       1, "NRCC Footer",     "NRCCPRF_Init_nrccFooter" )  }

END


;************************************************************************* rulelist evaluated AFTER Proposed simulation but before copying of nrcc* objects to following transform - SAC 04/14/21
RULELIST "NRCCPRF_ap_PostSim"  1 0 0 1

; moved from above due to requirement of having access to Proposed simulation results - SAC 04/14/21
   "Create nrcctblRowUMLH object for each pertinent ThrmlZn"     ThrmlZn:nrcctblRowUMLHRef =
      {  if (LocalCompAssigned( nrcctblRowUMLHRef ) > 0 .OR.
             ComponentCount( nrccTableUMLH ) < 1 .OR.
             (IfValidAnd( ClgUnmetLdHrs <= ClgUMLHLimit ) .AND.
              IfValidAnd( HtgUnmetLdHrs <= HtgUMLHLimit )) ) 
         then UNDEFINED
         else if ( (IfValidAnd( ClgUnmetLdHrs > ClgUMLHLimit + 0.1 ) .AND. IfValidAnd( BypassClgUMLHLimit = 0 )) .OR.
                   (IfValidAnd( HtgUnmetLdHrs > HtgUMLHLimit + 0.1 ) .AND. IfValidAnd( BypassHtgUMLHLimit = 0 )) )
              then CreateComp( nrcctblRowUMLH, Format( "%s UMLH tblRow", Name ) )
              else UNDEFINED
              endif
         endif  }
   "Set ThrmlZn:nrcctblRowUMLHRef:noXMLoutput_ThrmlZnRef"      ThrmlZn:nrcctblRowUMLHRef:noXMLoutput_ThrmlZnRef   = {  Name  }
   "Set ThrmlZn:nrcctblRowUMLHRef:Parent"                      ThrmlZn:nrcctblRowUMLHRef:Parent                   = {  nrccTableUMLH:Name  }
   "Set ThrmlZn:nrcctblRowUMLHRef:Result4_01_ThermalZoneName"              ThrmlZn:nrcctblRowUMLHRef:Result4_01_ThermalZoneName           = {  Name  }
   "Set ThrmlZn:nrcctblRowUMLHRef:Result4_02_ZoneUnmetCoolingLoadHours"    ThrmlZn:nrcctblRowUMLHRef:Result4_02_ZoneUnmetCoolingLoadHours = {  ClgUMLHLimit  }
   "Set ThrmlZn:nrcctblRowUMLHRef:Result4_03_UnmetCoolingLoadHours"        ThrmlZn:nrcctblRowUMLHRef:Result4_03_UnmetCoolingLoadHours     = {  ClgUnmetLdHrs  }
   "Set ThrmlZn:nrcctblRowUMLHRef:Result4_04_ZoneUnmetHeatingLoadHours"    ThrmlZn:nrcctblRowUMLHRef:Result4_04_ZoneUnmetHeatingLoadHours = {  HtgUMLHLimit  }
   "Set ThrmlZn:nrcctblRowUMLHRef:Result4_05_UnmetHeatingLoadHours"        ThrmlZn:nrcctblRowUMLHRef:Result4_05_UnmetHeatingLoadHours     = {  HtgUnmetLdHrs  }

  ; Rule to Delete empty nrccSection_Result4
   "DELETE empty nrccTableUMLH object"
      nrccSection_Result4:Action   = {  if (ComponentCount( nrcctblRowUMLH ) < 1) then  DeleteComp()  else  UNCHANGED  endif }

   "Create nrcctblRowUMLHC22 object for each pertinent ThrmlZn"     ThrmlZn:nrcctblRowUMLHC22Ref =
      {  if (LocalCompAssigned( nrcctblRowUMLHC22Ref ) > 0 .OR.
             ComponentCount( nrccTableUMLHC22 ) < 1 .OR.
             (IfValidAnd( ClgUnmetLdHrs <= ClgUMLHLimit ) .AND.
              IfValidAnd( HtgUnmetLdHrs <= HtgUMLHLimit )) ) 
         then UNDEFINED
         else if ( (IfValidAnd( ClgUnmetLdHrs > ClgUMLHLimit + 0.1 ) .AND. IfValidAnd( BypassClgUMLHLimit = 0 )) .OR.
                   (IfValidAnd( HtgUnmetLdHrs > HtgUMLHLimit + 0.1 ) .AND. IfValidAnd( BypassHtgUMLHLimit = 0 )) )
              then CreateComp( nrcctblRowUMLHC22, Format( "%s UMLHC22 tblRow", Name ) )
              else UNDEFINED
              endif
         endif  }
   "Set ThrmlZn:nrcctblRowUMLHC22Ref:noXMLoutput_ThrmlZnRef"      ThrmlZn:nrcctblRowUMLHC22Ref:noXMLoutput_ThrmlZnRef   = {  Name  }
   "Set ThrmlZn:nrcctblRowUMLHC22Ref:Parent"                      ThrmlZn:nrcctblRowUMLHC22Ref:Parent                   = {  nrccTableUMLH:Name  }
   "Set ThrmlZn:nrcctblRowUMLHC22Ref:C22Result9_01_ThermalZoneName"              ThrmlZn:nrcctblRowUMLHC22Ref:C22Result9_01_ThermalZoneName           = {  Name  }
   "Set ThrmlZn:nrcctblRowUMLHC22Ref:C22Result9_02_ZoneUnmetCoolingLoadHours"    ThrmlZn:nrcctblRowUMLHC22Ref:C22Result9_02_ZoneUnmetCoolingLoadHours = {  ClgUMLHLimit  }
   "Set ThrmlZn:nrcctblRowUMLHC22Ref:C22Result9_03_UnmetCoolingLoadHours"        ThrmlZn:nrcctblRowUMLHC22Ref:C22Result9_03_UnmetCoolingLoadHours     = {  ClgUnmetLdHrs  }
   "Set ThrmlZn:nrcctblRowUMLHC22Ref:C22Result9_04_ZoneUnmetHeatingLoadHours"    ThrmlZn:nrcctblRowUMLHC22Ref:C22Result9_04_ZoneUnmetHeatingLoadHours = {  HtgUMLHLimit  }
   "Set ThrmlZn:nrcctblRowUMLHC22Ref:C22Result9_05_UnmetHeatingLoadHours"        ThrmlZn:nrcctblRowUMLHC22Ref:C22Result9_05_UnmetHeatingLoadHours     = {  HtgUnmetLdHrs  }

  ; Rule to Delete empty nrccSection_C22Result9
   "DELETE empty nrccTableUMLHC22 object"
      nrccSection_C22Result9:Action   = {  if (ComponentCount( nrcctblRowUMLHC22 ) < 1) then  DeleteComp()  else  UNCHANGED  endif }


  ; Rule to Delete empty nrccSection_Except
   "Set nrccSection_Except:noXMLoutput_DeleteFlag"      nrccSection_Except:noXMLoutput_DeleteFlag   = { 1 }
   "Set nrccSection_Except:noXMLoutput_DeleteFlag"      for:#S=(1to23)   nrccSection_Except:noXMLoutput_DeleteFlag   = {  if (LocalStatus(Except01_ExceptionalConditionMessageNRCCPRFE[#S]) > 0) then 0 else UNCHANGED endif }
   "DELETE empty nrccSection_Except object"
      nrccSection_Except:Action   = {  if (noXMLoutput_DeleteFlag > 0) then  DeleteComp()  else  UNCHANGED  endif }

  ; Rule to Delete empty nrccSection_HERS
   "Set nrccSection_HERS:noXMLoutput_DeleteFlag"      nrccSection_HERS:noXMLoutput_DeleteFlag   = { 1 }
   "Set nrccSection_HERS:noXMLoutput_DeleteFlag"      for:#S=(1to10)   nrccSection_HERS:noXMLoutput_DeleteFlag   = {  if (LocalStatus(HERS_01_HERS_VerificationMeasure[#S]) > 0) then 0 else UNCHANGED endif }
   "DELETE empty nrccSection_HERS object"
      nrccSection_HERS:Action   = {  if (noXMLoutput_DeleteFlag > 0) then  DeleteComp()  else  UNCHANGED  endif }

  ; Rule to Delete empty nrccHvacSpec04 and set nrccHvacSpec04Choice:HvacSpec04_NotApplicableMessage
   "Set nrccHvacSpec04:noXMLoutput_DeleteFlag"      nrccHvacSpec04:noXMLoutput_DeleteFlag   = { 1 }
   "Set nrccHvacSpec04:noXMLoutput_DeleteFlag"      for:#S=(1to8)   nrccHvacSpec04:noXMLoutput_DeleteFlag   = {  if (LocalStatus(HvacSpec04_HvacControls[#S]) > 0) then 0 else UNCHANGED endif }
   "Set nrccHvacSpec04:noXMLoutput_DeleteFlag"      for:#S=(1to8)   nrccHvacSpec04:noXMLoutput_DeleteFlag   = {  if (LocalStatus(HvacSpec04_EconomizerControlMethod[#S]) > 0) then 0 else UNCHANGED endif }
   "Set nrccHvacSpec04:noXMLoutput_DeleteFlag"      for:#S=(1to8)   nrccHvacSpec04:noXMLoutput_DeleteFlag   = {  if (LocalStatus(HvacSpec04_EvaporativeCoolerType[#S]) > 0) then 0 else UNCHANGED endif }
   "DELETE empty nrccHvacSpec04 object"
      nrccHvacSpec04:Action   = {  if (noXMLoutput_DeleteFlag > 0) then  DeleteComp()  else  UNCHANGED  endif }
   "Set nrccHvacSpec04Choice:HvacSpec04_NotApplicableMessage"      nrccHvacSpec04Choice:HvacSpec04_NotApplicableMessage   = {  if (ChildCount( nrccHvacSpec04 ) < 1) then "NotApplicable" else UNDEFINED endif }
END



;*************************************************************************
RULELIST "NRCCPRF_Init_nrccComplianceDocumentPackage"  1 0 0 1
   "Set nrccComplianceDocumentPackage:attrib_xmlns"               nrccComplianceDocumentPackage:attrib_xmlns              = {  "http://www.lmonte.com/besm/NRCCPRF01E"  }     
   "Set nrccComplianceDocumentPackage:attrib_xmlns_lit"           nrccComplianceDocumentPackage:attrib_xmlns_lit          = {  "http://www.lmonte.com/besm/lit"  }            
   "Set nrccComplianceDocumentPackage:attrib_xmlns_com"           nrccComplianceDocumentPackage:attrib_xmlns_com          = {  "http://www.lmonte.com/besm/com"  }            
   "Set nrccComplianceDocumentPackage:attrib_xmlns_dtyp"          nrccComplianceDocumentPackage:attrib_xmlns_dtyp         = {  "http://www.lmonte.com/besm/dtyp"  }           
   "Set nrccComplianceDocumentPackage:attrib_xmlns_bld"           nrccComplianceDocumentPackage:attrib_xmlns_bld          = {  "http://www.lmonte.com/besm/bld"  }            
   "Set nrccComplianceDocumentPackage:attrib_xmlns_env"           nrccComplianceDocumentPackage:attrib_xmlns_env          = {  "http://www.lmonte.com/besm/env"  }            
   "Set nrccComplianceDocumentPackage:attrib_xmlns_hvac"          nrccComplianceDocumentPackage:attrib_xmlns_hvac         = {  "http://www.lmonte.com/besm/hvac"  }           
   "Set nrccComplianceDocumentPackage:attrib_xmlns_comp"          nrccComplianceDocumentPackage:attrib_xmlns_comp         = {  "http://www.lmonte.com/besm/comp"  }           
   "Set nrccComplianceDocumentPackage:attrib_xmlns_d"             nrccComplianceDocumentPackage:attrib_xmlns_d            = {  "http://www.lmonte.com/besm/d"  }              
   "Set nrccComplianceDocumentPackage:attrib_xmlns_altova"        nrccComplianceDocumentPackage:attrib_xmlns_altova       = {  "http://www.altova.com/xml-schema-extensions"  }
   "Set nrccComplianceDocumentPackage:attrib_xmlns_xsi"           nrccComplianceDocumentPackage:attrib_xmlns_xsi          = {  "http://www.w3.org/2001/XMLSchema-instance"  } 
   "Set nrccComplianceDocumentPackage:attrib_xsi_schemaLocation"  nrccComplianceDocumentPackage:attrib_xsi_schemaLocation = {  "http://www.lmonte.com/besm/NRCCPRF.xsd"   }
   "Set nrccComplianceDocumentPackage:attrib_revision"            nrccComplianceDocumentPackage:attrib_revision           = {  "rev 20220601"  } 
   "Set nrccComplianceDocumentPackage:attrib_doc"                 nrccComplianceDocumentPackage:attrib_doc                = {  "NRCCPRFE"  }     
END
;*************************************************************************

;*************************************************************************
RULELIST "NRCCPRF_Init_nrccDocID"  1 0 0 1
   "Set nrccDocID:attrib_doc"          nrccDocID:attrib_doc      = {  "NRCCPRFE"  }
   "Set nrccDocID:attrib_docType"      nrccDocID:attrib_docType  = {  "CertificateComplianceNonResPerformance"  }
   "Set nrccDocID:attrib_docTitle"     nrccDocID:attrib_docTitle = {  "NonResidentialPerformanceCompliance"  }
END
;*************************************************************************

;*************************************************************************
RULELIST "NRCCPRF_Init_nrccPayload"  1 0 0 1
   "Set nrccPayload:attrib_complianceDocumentGUID"             nrccPayload:attrib_complianceDocumentGUID           = {  "complianceDocumentGUID1"  }
   "Set nrccPayload:attrib_complianceDocumentSchemaVersion"    nrccPayload:attrib_complianceDocumentSchemaVersion  = {  "complianceDocumentSchemaVersion1"  }
   "Set nrccPayload:attrib_compMgrVersion"                     nrccPayload:attrib_compMgrVersion                   = {  ValidOr( Proj:CompManagerVersion, "Unknown" )  }
   "Set nrccPayload:attrib_displayTagNR"                       nrccPayload:attrib_displayTagNR                     = {  "NRCC-PRF-E"  }
   "Set nrccPayload:attrib_payloadDocumentNR"                  nrccPayload:attrib_payloadDocumentNR                = {  "NRCCPRFE"  }
   "Set nrccPayload:attrib_processedDate"                      nrccPayload:attrib_processedDate                    = {  ValidOr( Proj:RunDateISO, "2006-05-04T18:13:51.0" )  }
   "Set nrccPayload:attrib_projectID"                          nrccPayload:attrib_projectID                        = {  " "  }
   "Set nrccPayload:attrib_reportRequestor"                    nrccPayload:attrib_reportRequestor                  = {  "reportRequestor1"  }
   "Set nrccPayload:attrib_reportRequestorIP_Address"          nrccPayload:attrib_reportRequestorIP_Address        = {  "reportRequestorIP_Address1"  }
   "Set nrccPayload:attrib_revision"                           nrccPayload:attrib_revision                         = {  "revision3"  }
   "Set nrccPayload:attrib_validates"                          nrccPayload:attrib_validates                        = {  "false"  }
END
;*************************************************************************

;*************************************************************************
RULELIST "NRCCPRF_Init_nrccHeader"  1 0 0 1
   "Set nrccHeader:comp_header01_ProjectName"      nrccHeader:comp_header01_ProjectName     = {  if (GlobalStatus( Proj:Name ) > 0) then  Proj:Name  else  UNDEFINED  endif  }
   "Set nrccHeader:comp_header02_RunDateTime"      nrccHeader:comp_header02_RunDateTime     = {  if (GlobalStatus( Proj:RunDateISO ) > 0) then  Proj:RunDateISO  else  UNDEFINED  endif  }
   "Set nrccHeader:comp_header04_InputFilename"    nrccHeader:comp_header04_InputFilename   = {  if (GlobalStatus( Proj:ProjFileName ) > 0) then  Proj:ProjFileName  else  UNDEFINED  endif  }
   "Set nrccHeader:comp_streetAddress"             nrccHeader:comp_streetAddress            = {  if (GlobalStatus( Proj:StreetAddress ) > 0) then  Proj:StreetAddress  else  UNDEFINED  endif  }
;   "Set nrccHeader:comp_header05_ProjectCity"           nrccHeader:comp_header05_ProjectCity           = {  Proj:City  }
;   "Set nrccHeader:comp_header06_ProjectZipcode"        nrccHeader:comp_header06_ProjectZipcode        = {  Proj:ZipCode  }
;   "Set nrccHeader:comp_header07_DatePreparedNRPres"    nrccHeader:comp_header07_DatePreparedNRPres    = {  Proj:RunDateISO  }
;   "Set nrccHeader:comp_header03_RunDescription"   nrccHeader:comp_header03_RunDescription  = {  if (GlobalStatus( Proj:RunTitle     ) > 0) then  Proj:RunTitle      else  UNDEFINED  endif  }
END
;*************************************************************************

;*************************************************************************
RULELIST "NRCCPRF_Init_nrccDocumentAuthorNRCC"  1 0 0 1
   "Set nrcccomp_DocumentAuthorNRCC:comp_documentAuthor01Name" nrcccomp_DocumentAuthorNRCC:comp_documentAuthor01Name = { 
        if (GlobalStatus(Proj:DocAuthName) > 0) 
        then if (Proj:DocAuthName != " - specify - ") then Proj:DocAuthName else UNDEFINED endif 
        else UNDEFINED endif }

   "Set nrcccomp_DocumentAuthorNRCC:comp_documentAuthor03Company" nrcccomp_DocumentAuthorNRCC:comp_documentAuthor03Company = { 
        if (GlobalStatus(Proj:DocAuthCompany) > 0) 
        then if (Proj:DocAuthCompany != " - specify - ") then Proj:DocAuthCompany else UNDEFINED endif 
        else UNDEFINED endif }

   "Set nrcccomp_DocumentAuthorNRCC:comp_documentAuthor05Address" nrcccomp_DocumentAuthorNRCC:comp_documentAuthor05Address = { 
        if (GlobalStatus(Proj:DocAuthAddress) > 0) 
        then if (Proj:DocAuthAddress != " - specify - ") then Proj:DocAuthAddress else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcccomp_DocumentAuthorNRCC:comp_documentAuthor06Certification" nrcccomp_DocumentAuthorNRCC:comp_documentAuthor06Certification = { 
        if (GlobalStatus(Proj:DocAuthCEAIdent) > 0) 
        then if (Proj:DocAuthCEAIdent != " - specify - ") then Proj:DocAuthCEAIdent else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcccomp_DocumentAuthorNRCC:comp_documentAuthor07CityDA" nrcccomp_DocumentAuthorNRCC:comp_documentAuthor07CityDA = { 
        if (GlobalStatus(Proj:DocAuthCity) > 0) 
        then if (Proj:DocAuthCity != " - specify - ") then Proj:DocAuthCity else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcccomp_DocumentAuthorNRCC:comp_documentAuthor08State" nrcccomp_DocumentAuthorNRCC:comp_documentAuthor08State = { 
        if (GlobalStatus(Proj:DocAuthState) > 0) 
        then if (Proj:DocAuthState != " - specify - ") then Proj:DocAuthState else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcccomp_DocumentAuthorNRCC:comp_documentAuthor09Zipcode" nrcccomp_DocumentAuthorNRCC:comp_documentAuthor09Zipcode = { 
        if (GlobalStatus(Proj:DocAuthZipCode) > 0) 
        then if (Proj:DocAuthZipCode != " - specify - ") then Proj:DocAuthZipCode else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcccomp_DocumentAuthorNRCC:comp_documentAuthor10Phone" nrcccomp_DocumentAuthorNRCC:comp_documentAuthor10Phone = { 
        if (GlobalStatus(Proj:DocAuthPhone) > 0) 
        then if (Proj:DocAuthPhone != " - specify - ") then Proj:DocAuthPhone else UNDEFINED endif 
        else UNDEFINED endif }
END
;*************************************************************************

;*************************************************************************
RULELIST "NRCCPRF_Init_nrccResponsiblePersonEnvelopeDesigner"  1 0 0 1
   "Set nrcResponsiblePersonEnvelopeDesigner:comp_responsibleEnvelopeDesigner01_Name" nrcccomp_ResponsiblePersonEnvelopeDesigner:comp_responsibleEnvelopeDesigner01_Name = { 
        if (GlobalStatus(Proj:RespDsgnrName01) > 0) 
        then if (Proj:RespDsgnrName01 != " - specify - " .AND. Proj:RespDsgnrName01 != "- specify -") then Proj:RespDsgnrName01 else UNDEFINED endif 
        else UNDEFINED endif }

   "Set nrcResponsiblePersonEnvelopeDesigner:comp_responsiblePerson03_Company" nrcccomp_ResponsiblePersonEnvelopeDesigner:comp_responsiblePerson03_Company = { 
        if (GlobalStatus(Proj:RespDsgnrCompany01) > 0) 
        then if (Proj:RespDsgnrCompany01 != " - specify - " .AND. Proj:RespDsgnrCompany01 != "- specify -") then Proj:RespDsgnrCompany01 else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcResponsiblePersonEnvelopeDesigner:comp_responsiblePerson04_Address" nrcccomp_ResponsiblePersonEnvelopeDesigner:comp_responsiblePerson04_Address = { 
        if (GlobalStatus(Proj:RespDsgnrAddress01) > 0) 
        then if (Proj:RespDsgnrAddress01 != " - specify - " .AND. Proj:RespDsgnrAddress01 != "- specify -") then Proj:RespDsgnrAddress01 else UNDEFINED endif 
        else UNDEFINED endif }

   "Set nrcResponsiblePersonEnvelopeDesigner:comp_responsiblePerson06_City" nrcccomp_ResponsiblePersonEnvelopeDesigner:comp_responsiblePerson06_City = { 
        if (GlobalStatus(Proj:RespDsgnrCity01) > 0) 
        then if (Proj:RespDsgnrCity01 != " - specify - " .AND. Proj:RespDsgnrCity01 != "- specify -") then Proj:RespDsgnrCity01 else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcResponsiblePersonEnvelopeDesigner:comp_responsiblePerson07_State" nrcccomp_ResponsiblePersonEnvelopeDesigner:comp_responsiblePerson07_State = { 
        if (GlobalStatus(Proj:RespDsgnrState01) > 0) 
        then if (Proj:RespDsgnrState01 != " - specify - " .AND. Proj:RespDsgnrState01 != "- specify -") then Proj:RespDsgnrState01 else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcResponsiblePersonEnvelopeDesigner:comp_responsiblePerson08_Zipcode" nrcccomp_ResponsiblePersonEnvelopeDesigner:comp_responsiblePerson08_Zipcode = { 
        if (GlobalStatus(Proj:RespDsgnrZipCode01) > 0) 
        then if (Proj:RespDsgnrZipCode01 != " - specify - " .AND. Proj:RespDsgnrZipCode01 != "- specify -") then Proj:RespDsgnrZipCode01 else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcResponsiblePersonEnvelopeDesigner:comp_responsiblePerson09_Phone" nrcccomp_ResponsiblePersonEnvelopeDesigner:comp_responsiblePerson09_Phone = { 
        if (GlobalStatus(Proj:RespDsgnrPhone01) > 0) 
        then if (Proj:RespDsgnrPhone01 != " - specify - " .AND. Proj:RespDsgnrPhone01 != "- specify -") then Proj:RespDsgnrPhone01 else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcResponsiblePersonEnvelopeDesigner:comp_responsiblePerson10_JobTitle" nrcccomp_ResponsiblePersonEnvelopeDesigner:comp_responsiblePerson10_JobTitle = { 
        if (GlobalStatus(Proj:RespDsgnrType01) > 0) 
        then if (Proj:RespDsgnrType01 != " - specify - " .AND. Proj:RespDsgnrType01 != "- specify -") then Proj:RespDsgnrType01 else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcResponsiblePersonEnvelopeDesigner:comp_responsiblePerson11_License" nrcccomp_ResponsiblePersonEnvelopeDesigner:comp_responsiblePerson11_License = { 
        if (GlobalStatus(Proj:RespDsgnrLicense01) > 0) 
        then if (Proj:RespDsgnrLicense01 != " - specify - " .AND. Proj:RespDsgnrLicense01 != "- specify -") then Proj:RespDsgnrLicense01 else UNDEFINED endif 
        else UNDEFINED endif }
END
;*************************************************************************

;*************************************************************************
RULELIST "NRCCPRF_Init_nrccResponsiblePersonLightingDesigner"  1 0 0 1
   "Set nrcResponsiblePersonLightingDesigner:comp_responsibleLightingDesigner01_Name" nrcccomp_ResponsiblePersonLightingDesigner:comp_responsibleLightingDesigner01_Name = { 
        if (GlobalStatus(Proj:RespDsgnrName02) > 0) 
        then if (Proj:RespDsgnrName02 != " - specify - " .AND. Proj:RespDsgnrName02 != "- specify -") then Proj:RespDsgnrName02 else UNDEFINED endif 
        else UNDEFINED endif }

   "Set nrcResponsiblePersonLightingDesigner:comp_responsiblePerson03_Company" nrcccomp_ResponsiblePersonLightingDesigner:comp_responsiblePerson03_Company = { 
        if (GlobalStatus(Proj:RespDsgnrCompany02) > 0) 
        then if (Proj:RespDsgnrCompany02 != " - specify - " .AND. Proj:RespDsgnrCompany02 != "- specify -") then Proj:RespDsgnrCompany02 else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcResponsiblePersonLightingDesigner:comp_responsiblePerson04_Address" nrcccomp_ResponsiblePersonLightingDesigner:comp_responsiblePerson04_Address = { 
        if (GlobalStatus(Proj:RespDsgnrAddress02) > 0) 
        then if (Proj:RespDsgnrAddress02 != " - specify - " .AND. Proj:RespDsgnrAddress02 != "- specify -") then Proj:RespDsgnrAddress02 else UNDEFINED endif 
        else UNDEFINED endif }

   "Set nrcResponsiblePersonLightingDesigner:comp_responsiblePerson06_City" nrcccomp_ResponsiblePersonLightingDesigner:comp_responsiblePerson06_City = { 
        if (GlobalStatus(Proj:RespDsgnrCity02) > 0) 
        then if (Proj:RespDsgnrCity02 != " - specify - " .AND. Proj:RespDsgnrCity02 != "- specify -") then Proj:RespDsgnrCity02 else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcResponsiblePersonLightingDesigner:comp_responsiblePerson07_State" nrcccomp_ResponsiblePersonLightingDesigner:comp_responsiblePerson07_State = { 
        if (GlobalStatus(Proj:RespDsgnrState02) > 0) 
        then if (Proj:RespDsgnrState02 != " - specify - " .AND. Proj:RespDsgnrState02 != "- specify -") then Proj:RespDsgnrState02 else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcResponsiblePersonLightingDesigner:comp_responsiblePerson08_Zipcode" nrcccomp_ResponsiblePersonLightingDesigner:comp_responsiblePerson08_Zipcode = { 
        if (GlobalStatus(Proj:RespDsgnrZipCode02) > 0) 
        then if (Proj:RespDsgnrZipCode02 != " - specify - " .AND. Proj:RespDsgnrZipCode02 != "- specify -") then Proj:RespDsgnrZipCode02 else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcResponsiblePersonLightingDesigner:comp_responsiblePerson09_Phone" nrcccomp_ResponsiblePersonLightingDesigner:comp_responsiblePerson09_Phone = { 
        if (GlobalStatus(Proj:RespDsgnrPhone02) > 0) 
        then if (Proj:RespDsgnrPhone02 != " - specify - " .AND. Proj:RespDsgnrPhone02 != "- specify -") then Proj:RespDsgnrPhone02 else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcResponsiblePersonLightingDesigner:comp_responsiblePerson10_JobTitle" nrcccomp_ResponsiblePersonLightingDesigner:comp_responsiblePerson10_JobTitle = { 
        if (GlobalStatus(Proj:RespDsgnrType02) > 0) 
        then if (Proj:RespDsgnrType02 != " - specify - " .AND. Proj:RespDsgnrType02 != "- specify -") then Proj:RespDsgnrType02 else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcResponsiblePersonLightingDesigner:comp_responsiblePerson11_License" nrcccomp_ResponsiblePersonLightingDesigner:comp_responsiblePerson11_License = { 
        if (GlobalStatus(Proj:RespDsgnrLicense02) > 0) 
        then if (Proj:RespDsgnrLicense02 != " - specify - " .AND. Proj:RespDsgnrLicense02 != "- specify -") then Proj:RespDsgnrLicense02 else UNDEFINED endif 
        else UNDEFINED endif }
END
;*************************************************************************

;*************************************************************************
RULELIST "NRCCPRF_Init_nrccResponsiblePersonMechanicalDesigner"  1 0 0 1
   "Set nrcResponsiblePersonMechanicalDesigner:comp_responsibleMechanicalDesigner01_Name" nrcccomp_ResponsiblePersonMechanicalDesigner:comp_responsibleMechanicalDesigner01_Name = { 
        if (GlobalStatus(Proj:RespDsgnrName03) > 0) 
        then if (Proj:RespDsgnrName03 != " - specify - " .AND. Proj:RespDsgnrName03 != "- specify -") then Proj:RespDsgnrName03 else UNDEFINED endif 
        else UNDEFINED endif }

   "Set nrcResponsiblePersonMechanicalDesigner:comp_responsiblePerson03_Company" nrcccomp_ResponsiblePersonMechanicalDesigner:comp_responsiblePerson03_Company = { 
        if (GlobalStatus(Proj:RespDsgnrCompany03) > 0) 
        then if (Proj:RespDsgnrCompany03 != " - specify - " .AND. Proj:RespDsgnrCompany03 != "- specify -") then Proj:RespDsgnrCompany03 else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcResponsiblePersonMechanicalDesigner:comp_responsiblePerson04_Address" nrcccomp_ResponsiblePersonMechanicalDesigner:comp_responsiblePerson04_Address = { 
        if (GlobalStatus(Proj:RespDsgnrAddress03) > 0) 
        then if (Proj:RespDsgnrAddress03 != " - specify - " .AND. Proj:RespDsgnrAddress03 != "- specify -") then Proj:RespDsgnrAddress03 else UNDEFINED endif 
        else UNDEFINED endif }

   "Set nrcResponsiblePersonMechanicalDesigner:comp_responsiblePerson06_City" nrcccomp_ResponsiblePersonMechanicalDesigner:comp_responsiblePerson06_City = { 
        if (GlobalStatus(Proj:RespDsgnrCity03) > 0) 
        then if (Proj:RespDsgnrCity03 != " - specify - " .AND. Proj:RespDsgnrCity03 != "- specify -") then Proj:RespDsgnrCity03 else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcResponsiblePersonMechanicalDesigner:comp_responsiblePerson07_State" nrcccomp_ResponsiblePersonMechanicalDesigner:comp_responsiblePerson07_State = { 
        if (GlobalStatus(Proj:RespDsgnrState03) > 0) 
        then if (Proj:RespDsgnrState03 != " - specify - " .AND. Proj:RespDsgnrState03 != "- specify -") then Proj:RespDsgnrState03 else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcResponsiblePersonMechanicalDesigner:comp_responsiblePerson08_Zipcode" nrcccomp_ResponsiblePersonMechanicalDesigner:comp_responsiblePerson08_Zipcode = { 
        if (GlobalStatus(Proj:RespDsgnrZipCode03) > 0) 
        then if (Proj:RespDsgnrZipCode03 != " - specify - " .AND. Proj:RespDsgnrZipCode03 != "- specify -") then Proj:RespDsgnrZipCode03 else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcResponsiblePersonMechanicalDesigner:comp_responsiblePerson09_Phone" nrcccomp_ResponsiblePersonMechanicalDesigner:comp_responsiblePerson09_Phone = { 
        if (GlobalStatus(Proj:RespDsgnrPhone03) > 0) 
        then if (Proj:RespDsgnrPhone03 != " - specify - " .AND. Proj:RespDsgnrPhone03 != "- specify -") then Proj:RespDsgnrPhone03 else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcResponsiblePersonMechanicalDesigner:comp_responsiblePerson10_JobTitle" nrcccomp_ResponsiblePersonMechanicalDesigner:comp_responsiblePerson10_JobTitle = { 
        if (GlobalStatus(Proj:RespDsgnrType03) > 0) 
        then if (Proj:RespDsgnrType03 != " - specify - " .AND. Proj:RespDsgnrType03 != "- specify -") then Proj:RespDsgnrType03 else UNDEFINED endif 
        else UNDEFINED endif }
   "Set nrcResponsiblePersonMechanicalDesigner:comp_responsiblePerson11_License" nrcccomp_ResponsiblePersonMechanicalDesigner:comp_responsiblePerson11_License = { 
        if (GlobalStatus(Proj:RespDsgnrLicense03) > 0) 
        then if (Proj:RespDsgnrLicense03 != " - specify - " .AND. Proj:RespDsgnrLicense03 != "- specify -") then Proj:RespDsgnrLicense03 else UNDEFINED endif 
        else UNDEFINED endif }
END
;*************************************************************************

;*************************************************************************
RULELIST "NRCCPRF_Init_nrccFooter"  1 0 0 1
;   "Set nrccFooter:comp_complianceDocumentStandardsTitle"  nrccFooter:comp_complianceDocumentStandardsTitle = {  ??  }
END
;*************************************************************************


;*************************************************************************
RULELIST "NRCCPRF_RowLtgControls_row1"  1 0 0 1
   "Set nrcctblRowLtgControls:LtgControls03_SpaceDescription"                                nrcctblRowLtgControls:LtgControls03_SpaceDescription                             =
      {  Proj:MandatoryLtgCtrlDescRpt[1]             }
   "Set nrcctblRowLtgControls:LtgControls04_SpaceFunction"                                   nrcctblRowLtgControls:LtgControls04_SpaceFunction                                =
      { if (enumvalue(Proj:MandatoryLtgCtrlSpcFunctRpt[1]) < 1)
        then UNDEFINED
        else SpaceFunctionData:NRCCPRFSpaceFunction("FuncType", Proj:MandatoryLtgCtrlSpcFunctRpt[1]) 
        endif }
   "Set nrcctblRowLtgControls:LtgControls05_MandatoryAreaControlsRequired"                   nrcctblRowLtgControls:LtgControls05_MandatoryAreaControlsRequired                =
      {  Proj:MandatoryLtgCtrlIsAreaCtrlRpt[1]       }
   "Set nrcctblRowLtgControls:LtgControls06_MandatoryMultiLevelControlRequired"              nrcctblRowLtgControls:LtgControls06_MandatoryMultiLevelControlRequired           =
      {  Proj:MandatoryLtgCtrlIsMultiLvlCtrlRpt[1]   }
   "Set nrcctblRowLtgControls:LtgControls07_MandatoryShutOffControlRequired"                 nrcctblRowLtgControls:LtgControls07_MandatoryShutOffControlRequired              =
      {  Proj:MandatoryLtgCtrlIsShutOffCtrlRpt[1]    }
   "Set nrcctblRowLtgControls:LtgControls08_MandatoryPrimaryDaylightingControlRequired"      nrcctblRowLtgControls:LtgControls08_MandatoryPrimaryDaylightingControlRequired   =
      {  Proj:MandatoryLtgCtrlIsPriDayltgCtrlRpt[1]  }
   "Set nrcctblRowLtgControls:LtgControls09_MandatorySecondaryDaylightingControlRequired"    nrcctblRowLtgControls:LtgControls09_MandatorySecondaryDaylightingControlRequired =
      {  Proj:MandatoryLtgCtrlIsSecDayltgCtrlRpt[1]  }
END
;*************************************************************************
RULELIST "NRCCPRF_RowLtgControls_row2"  1 0 0 1
   "Set nrcctblRowLtgControls:LtgControls03_SpaceDescription"                                nrcctblRowLtgControls:LtgControls03_SpaceDescription                             =
      {  Proj:MandatoryLtgCtrlDescRpt[2]             }
   "Set nrcctblRowLtgControls:LtgControls04_SpaceFunction"                                   nrcctblRowLtgControls:LtgControls04_SpaceFunction                                =
      { if (enumvalue(Proj:MandatoryLtgCtrlSpcFunctRpt[2]) < 1)
        then UNDEFINED
        else SpaceFunctionData:NRCCPRFSpaceFunction("FuncType", Proj:MandatoryLtgCtrlSpcFunctRpt[2]) 
        endif }
   "Set nrcctblRowLtgControls:LtgControls05_MandatoryAreaControlsRequired"                   nrcctblRowLtgControls:LtgControls05_MandatoryAreaControlsRequired                =
      {  Proj:MandatoryLtgCtrlIsAreaCtrlRpt[2]       }
   "Set nrcctblRowLtgControls:LtgControls06_MandatoryMultiLevelControlRequired"              nrcctblRowLtgControls:LtgControls06_MandatoryMultiLevelControlRequired           =
      {  Proj:MandatoryLtgCtrlIsMultiLvlCtrlRpt[2]   }
   "Set nrcctblRowLtgControls:LtgControls07_MandatoryShutOffControlRequired"                 nrcctblRowLtgControls:LtgControls07_MandatoryShutOffControlRequired              =
      {  Proj:MandatoryLtgCtrlIsShutOffCtrlRpt[2]    }
   "Set nrcctblRowLtgControls:LtgControls08_MandatoryPrimaryDaylightingControlRequired"      nrcctblRowLtgControls:LtgControls08_MandatoryPrimaryDaylightingControlRequired   =
      {  Proj:MandatoryLtgCtrlIsPriDayltgCtrlRpt[2]  }
   "Set nrcctblRowLtgControls:LtgControls09_MandatorySecondaryDaylightingControlRequired"    nrcctblRowLtgControls:LtgControls09_MandatorySecondaryDaylightingControlRequired =
      {  Proj:MandatoryLtgCtrlIsSecDayltgCtrlRpt[2]  }
END
;*************************************************************************
RULELIST "NRCCPRF_RowLtgControls_row3"  1 0 0 1
   "Set nrcctblRowLtgControls:LtgControls03_SpaceDescription"                                nrcctblRowLtgControls:LtgControls03_SpaceDescription                             =
      {  Proj:MandatoryLtgCtrlDescRpt[3]             }
   "Set nrcctblRowLtgControls:LtgControls04_SpaceFunction"                                   nrcctblRowLtgControls:LtgControls04_SpaceFunction                                =
      { if (enumvalue(Proj:MandatoryLtgCtrlSpcFunctRpt[3]) < 1)
        then UNDEFINED
        else SpaceFunctionData:NRCCPRFSpaceFunction("FuncType", Proj:MandatoryLtgCtrlSpcFunctRpt[3]) 
        endif }
   "Set nrcctblRowLtgControls:LtgControls05_MandatoryAreaControlsRequired"                   nrcctblRowLtgControls:LtgControls05_MandatoryAreaControlsRequired                =
      {  Proj:MandatoryLtgCtrlIsAreaCtrlRpt[3]       }
   "Set nrcctblRowLtgControls:LtgControls06_MandatoryMultiLevelControlRequired"              nrcctblRowLtgControls:LtgControls06_MandatoryMultiLevelControlRequired           =
      {  Proj:MandatoryLtgCtrlIsMultiLvlCtrlRpt[3]   }
   "Set nrcctblRowLtgControls:LtgControls07_MandatoryShutOffControlRequired"                 nrcctblRowLtgControls:LtgControls07_MandatoryShutOffControlRequired              =
      {  Proj:MandatoryLtgCtrlIsShutOffCtrlRpt[3]    }
   "Set nrcctblRowLtgControls:LtgControls08_MandatoryPrimaryDaylightingControlRequired"      nrcctblRowLtgControls:LtgControls08_MandatoryPrimaryDaylightingControlRequired   =
      {  Proj:MandatoryLtgCtrlIsPriDayltgCtrlRpt[3]  }
   "Set nrcctblRowLtgControls:LtgControls09_MandatorySecondaryDaylightingControlRequired"    nrcctblRowLtgControls:LtgControls09_MandatorySecondaryDaylightingControlRequired =
      {  Proj:MandatoryLtgCtrlIsSecDayltgCtrlRpt[3]  }
END
;*************************************************************************
RULELIST "NRCCPRF_RowLtgControls_row4"  1 0 0 1
   "Set nrcctblRowLtgControls:LtgControls03_SpaceDescription"                                nrcctblRowLtgControls:LtgControls03_SpaceDescription                             =
      {  Proj:MandatoryLtgCtrlDescRpt[4]             }
   "Set nrcctblRowLtgControls:LtgControls04_SpaceFunction"                                   nrcctblRowLtgControls:LtgControls04_SpaceFunction                                =
      { if (enumvalue(Proj:MandatoryLtgCtrlSpcFunctRpt[4]) < 1)
        then UNDEFINED
        else SpaceFunctionData:NRCCPRFSpaceFunction("FuncType", Proj:MandatoryLtgCtrlSpcFunctRpt[4]) 
        endif }
   "Set nrcctblRowLtgControls:LtgControls05_MandatoryAreaControlsRequired"                   nrcctblRowLtgControls:LtgControls05_MandatoryAreaControlsRequired                =
      {  Proj:MandatoryLtgCtrlIsAreaCtrlRpt[4]       }
   "Set nrcctblRowLtgControls:LtgControls06_MandatoryMultiLevelControlRequired"              nrcctblRowLtgControls:LtgControls06_MandatoryMultiLevelControlRequired           =
      {  Proj:MandatoryLtgCtrlIsMultiLvlCtrlRpt[4]   }
   "Set nrcctblRowLtgControls:LtgControls07_MandatoryShutOffControlRequired"                 nrcctblRowLtgControls:LtgControls07_MandatoryShutOffControlRequired              =
      {  Proj:MandatoryLtgCtrlIsShutOffCtrlRpt[4]    }
   "Set nrcctblRowLtgControls:LtgControls08_MandatoryPrimaryDaylightingControlRequired"      nrcctblRowLtgControls:LtgControls08_MandatoryPrimaryDaylightingControlRequired   =
      {  Proj:MandatoryLtgCtrlIsPriDayltgCtrlRpt[4]  }
   "Set nrcctblRowLtgControls:LtgControls09_MandatorySecondaryDaylightingControlRequired"    nrcctblRowLtgControls:LtgControls09_MandatorySecondaryDaylightingControlRequired =
      {  Proj:MandatoryLtgCtrlIsSecDayltgCtrlRpt[4]  }
END
;*************************************************************************
RULELIST "NRCCPRF_RowLtgControls_row5"  1 0 0 1
   "Set nrcctblRowLtgControls:LtgControls03_SpaceDescription"                                nrcctblRowLtgControls:LtgControls03_SpaceDescription                             =
      {  Proj:MandatoryLtgCtrlDescRpt[5]             }
   "Set nrcctblRowLtgControls:LtgControls04_SpaceFunction"                                   nrcctblRowLtgControls:LtgControls04_SpaceFunction                                =
      { if (enumvalue(Proj:MandatoryLtgCtrlSpcFunctRpt[5]) < 1)
        then UNDEFINED
        else SpaceFunctionData:NRCCPRFSpaceFunction("FuncType", Proj:MandatoryLtgCtrlSpcFunctRpt[5]) 
        endif }
   "Set nrcctblRowLtgControls:LtgControls05_MandatoryAreaControlsRequired"                   nrcctblRowLtgControls:LtgControls05_MandatoryAreaControlsRequired                =
      {  Proj:MandatoryLtgCtrlIsAreaCtrlRpt[5]       }
   "Set nrcctblRowLtgControls:LtgControls06_MandatoryMultiLevelControlRequired"              nrcctblRowLtgControls:LtgControls06_MandatoryMultiLevelControlRequired           =
      {  Proj:MandatoryLtgCtrlIsMultiLvlCtrlRpt[5]   }
   "Set nrcctblRowLtgControls:LtgControls07_MandatoryShutOffControlRequired"                 nrcctblRowLtgControls:LtgControls07_MandatoryShutOffControlRequired              =
      {  Proj:MandatoryLtgCtrlIsShutOffCtrlRpt[5]    }
   "Set nrcctblRowLtgControls:LtgControls08_MandatoryPrimaryDaylightingControlRequired"      nrcctblRowLtgControls:LtgControls08_MandatoryPrimaryDaylightingControlRequired   =
      {  Proj:MandatoryLtgCtrlIsPriDayltgCtrlRpt[5]  }
   "Set nrcctblRowLtgControls:LtgControls09_MandatorySecondaryDaylightingControlRequired"    nrcctblRowLtgControls:LtgControls09_MandatorySecondaryDaylightingControlRequired =
      {  Proj:MandatoryLtgCtrlIsSecDayltgCtrlRpt[5]  }
END
;*************************************************************************
RULELIST "NRCCPRF_RowLtgControls_row6"  1 0 0 1
   "Set nrcctblRowLtgControls:LtgControls03_SpaceDescription"                                nrcctblRowLtgControls:LtgControls03_SpaceDescription                             =
      {  Proj:MandatoryLtgCtrlDescRpt[6]             }
   "Set nrcctblRowLtgControls:LtgControls04_SpaceFunction"                                   nrcctblRowLtgControls:LtgControls04_SpaceFunction                                =
      { if (enumvalue(Proj:MandatoryLtgCtrlSpcFunctRpt[6]) < 1)
        then UNDEFINED
        else SpaceFunctionData:NRCCPRFSpaceFunction("FuncType", Proj:MandatoryLtgCtrlSpcFunctRpt[6]) 
        endif }
   "Set nrcctblRowLtgControls:LtgControls05_MandatoryAreaControlsRequired"                   nrcctblRowLtgControls:LtgControls05_MandatoryAreaControlsRequired                =
      {  Proj:MandatoryLtgCtrlIsAreaCtrlRpt[6]       }
   "Set nrcctblRowLtgControls:LtgControls06_MandatoryMultiLevelControlRequired"              nrcctblRowLtgControls:LtgControls06_MandatoryMultiLevelControlRequired           =
      {  Proj:MandatoryLtgCtrlIsMultiLvlCtrlRpt[6]   }
   "Set nrcctblRowLtgControls:LtgControls07_MandatoryShutOffControlRequired"                 nrcctblRowLtgControls:LtgControls07_MandatoryShutOffControlRequired              =
      {  Proj:MandatoryLtgCtrlIsShutOffCtrlRpt[6]    }
   "Set nrcctblRowLtgControls:LtgControls08_MandatoryPrimaryDaylightingControlRequired"      nrcctblRowLtgControls:LtgControls08_MandatoryPrimaryDaylightingControlRequired   =
      {  Proj:MandatoryLtgCtrlIsPriDayltgCtrlRpt[6]  }
   "Set nrcctblRowLtgControls:LtgControls09_MandatorySecondaryDaylightingControlRequired"    nrcctblRowLtgControls:LtgControls09_MandatorySecondaryDaylightingControlRequired =
      {  Proj:MandatoryLtgCtrlIsSecDayltgCtrlRpt[6]  }
END
;*************************************************************************
RULELIST "NRCCPRF_RowLtgControls_row7"  1 0 0 1
   "Set nrcctblRowLtgControls:LtgControls03_SpaceDescription"                                nrcctblRowLtgControls:LtgControls03_SpaceDescription                             =
      {  Proj:MandatoryLtgCtrlDescRpt[7]             }
   "Set nrcctblRowLtgControls:LtgControls04_SpaceFunction"                                   nrcctblRowLtgControls:LtgControls04_SpaceFunction                                =
      { if (enumvalue(Proj:MandatoryLtgCtrlSpcFunctRpt[7]) < 1)
        then UNDEFINED
        else SpaceFunctionData:NRCCPRFSpaceFunction("FuncType", Proj:MandatoryLtgCtrlSpcFunctRpt[7]) 
        endif }
   "Set nrcctblRowLtgControls:LtgControls05_MandatoryAreaControlsRequired"                   nrcctblRowLtgControls:LtgControls05_MandatoryAreaControlsRequired                =
      {  Proj:MandatoryLtgCtrlIsAreaCtrlRpt[7]       }
   "Set nrcctblRowLtgControls:LtgControls06_MandatoryMultiLevelControlRequired"              nrcctblRowLtgControls:LtgControls06_MandatoryMultiLevelControlRequired           =
      {  Proj:MandatoryLtgCtrlIsMultiLvlCtrlRpt[7]   }
   "Set nrcctblRowLtgControls:LtgControls07_MandatoryShutOffControlRequired"                 nrcctblRowLtgControls:LtgControls07_MandatoryShutOffControlRequired              =
      {  Proj:MandatoryLtgCtrlIsShutOffCtrlRpt[7]    }
   "Set nrcctblRowLtgControls:LtgControls08_MandatoryPrimaryDaylightingControlRequired"      nrcctblRowLtgControls:LtgControls08_MandatoryPrimaryDaylightingControlRequired   =
      {  Proj:MandatoryLtgCtrlIsPriDayltgCtrlRpt[7]  }
   "Set nrcctblRowLtgControls:LtgControls09_MandatorySecondaryDaylightingControlRequired"    nrcctblRowLtgControls:LtgControls09_MandatorySecondaryDaylightingControlRequired =
      {  Proj:MandatoryLtgCtrlIsSecDayltgCtrlRpt[7]  }
END
;*************************************************************************
RULELIST "NRCCPRF_RowLtgControls_row8"  1 0 0 1
   "Set nrcctblRowLtgControls:LtgControls03_SpaceDescription"                                nrcctblRowLtgControls:LtgControls03_SpaceDescription                             =
      {  Proj:MandatoryLtgCtrlDescRpt[8]             }
   "Set nrcctblRowLtgControls:LtgControls04_SpaceFunction"                                   nrcctblRowLtgControls:LtgControls04_SpaceFunction                                =
      { if (enumvalue(Proj:MandatoryLtgCtrlSpcFunctRpt[8]) < 1)
        then UNDEFINED
        else SpaceFunctionData:NRCCPRFSpaceFunction("FuncType", Proj:MandatoryLtgCtrlSpcFunctRpt[8]) 
        endif }
   "Set nrcctblRowLtgControls:LtgControls05_MandatoryAreaControlsRequired"                   nrcctblRowLtgControls:LtgControls05_MandatoryAreaControlsRequired                =
      {  Proj:MandatoryLtgCtrlIsAreaCtrlRpt[8]       }
   "Set nrcctblRowLtgControls:LtgControls06_MandatoryMultiLevelControlRequired"              nrcctblRowLtgControls:LtgControls06_MandatoryMultiLevelControlRequired           =
      {  Proj:MandatoryLtgCtrlIsMultiLvlCtrlRpt[8]   }
   "Set nrcctblRowLtgControls:LtgControls07_MandatoryShutOffControlRequired"                 nrcctblRowLtgControls:LtgControls07_MandatoryShutOffControlRequired              =
      {  Proj:MandatoryLtgCtrlIsShutOffCtrlRpt[8]    }
   "Set nrcctblRowLtgControls:LtgControls08_MandatoryPrimaryDaylightingControlRequired"      nrcctblRowLtgControls:LtgControls08_MandatoryPrimaryDaylightingControlRequired   =
      {  Proj:MandatoryLtgCtrlIsPriDayltgCtrlRpt[8]  }
   "Set nrcctblRowLtgControls:LtgControls09_MandatorySecondaryDaylightingControlRequired"    nrcctblRowLtgControls:LtgControls09_MandatorySecondaryDaylightingControlRequired =
      {  Proj:MandatoryLtgCtrlIsSecDayltgCtrlRpt[8]  }
END
;*************************************************************************
RULELIST "NRCCPRF_RowLtgControls_row9"  1 0 0 1
   "Set nrcctblRowLtgControls:LtgControls03_SpaceDescription"                                nrcctblRowLtgControls:LtgControls03_SpaceDescription                             =
      {  Proj:MandatoryLtgCtrlDescRpt[9]             }
   "Set nrcctblRowLtgControls:LtgControls04_SpaceFunction"                                   nrcctblRowLtgControls:LtgControls04_SpaceFunction                                =
      { if (enumvalue(Proj:MandatoryLtgCtrlSpcFunctRpt[9]) < 1)
        then UNDEFINED
        else SpaceFunctionData:NRCCPRFSpaceFunction("FuncType", Proj:MandatoryLtgCtrlSpcFunctRpt[9]) 
        endif }
   "Set nrcctblRowLtgControls:LtgControls05_MandatoryAreaControlsRequired"                   nrcctblRowLtgControls:LtgControls05_MandatoryAreaControlsRequired                =
      {  Proj:MandatoryLtgCtrlIsAreaCtrlRpt[9]       }
   "Set nrcctblRowLtgControls:LtgControls06_MandatoryMultiLevelControlRequired"              nrcctblRowLtgControls:LtgControls06_MandatoryMultiLevelControlRequired           =
      {  Proj:MandatoryLtgCtrlIsMultiLvlCtrlRpt[9]   }
   "Set nrcctblRowLtgControls:LtgControls07_MandatoryShutOffControlRequired"                 nrcctblRowLtgControls:LtgControls07_MandatoryShutOffControlRequired              =
      {  Proj:MandatoryLtgCtrlIsShutOffCtrlRpt[9]    }
   "Set nrcctblRowLtgControls:LtgControls08_MandatoryPrimaryDaylightingControlRequired"      nrcctblRowLtgControls:LtgControls08_MandatoryPrimaryDaylightingControlRequired   =
      {  Proj:MandatoryLtgCtrlIsPriDayltgCtrlRpt[9]  }
   "Set nrcctblRowLtgControls:LtgControls09_MandatorySecondaryDaylightingControlRequired"    nrcctblRowLtgControls:LtgControls09_MandatorySecondaryDaylightingControlRequired =
      {  Proj:MandatoryLtgCtrlIsSecDayltgCtrlRpt[9]  }
END
;*************************************************************************
RULELIST "NRCCPRF_RowLtgControls_row10"  1 0 0 1
   "Set nrcctblRowLtgControls:LtgControls03_SpaceDescription"                                nrcctblRowLtgControls:LtgControls03_SpaceDescription                             =
      {  Proj:MandatoryLtgCtrlDescRpt[10]             }
   "Set nrcctblRowLtgControls:LtgControls04_SpaceFunction"                                   nrcctblRowLtgControls:LtgControls04_SpaceFunction                                =
      { if (enumvalue(Proj:MandatoryLtgCtrlSpcFunctRpt[10]) < 1)
        then UNDEFINED
        else SpaceFunctionData:NRCCPRFSpaceFunction("FuncType", Proj:MandatoryLtgCtrlSpcFunctRpt[10]) 
        endif }
   "Set nrcctblRowLtgControls:LtgControls05_MandatoryAreaControlsRequired"                   nrcctblRowLtgControls:LtgControls05_MandatoryAreaControlsRequired                =
      {  Proj:MandatoryLtgCtrlIsAreaCtrlRpt[10]       }
   "Set nrcctblRowLtgControls:LtgControls06_MandatoryMultiLevelControlRequired"              nrcctblRowLtgControls:LtgControls06_MandatoryMultiLevelControlRequired           =
      {  Proj:MandatoryLtgCtrlIsMultiLvlCtrlRpt[10]   }
   "Set nrcctblRowLtgControls:LtgControls07_MandatoryShutOffControlRequired"                 nrcctblRowLtgControls:LtgControls07_MandatoryShutOffControlRequired              =
      {  Proj:MandatoryLtgCtrlIsShutOffCtrlRpt[10]    }
   "Set nrcctblRowLtgControls:LtgControls08_MandatoryPrimaryDaylightingControlRequired"      nrcctblRowLtgControls:LtgControls08_MandatoryPrimaryDaylightingControlRequired   =
      {  Proj:MandatoryLtgCtrlIsPriDayltgCtrlRpt[10]  }
   "Set nrcctblRowLtgControls:LtgControls09_MandatorySecondaryDaylightingControlRequired"    nrcctblRowLtgControls:LtgControls09_MandatorySecondaryDaylightingControlRequired =
      {  Proj:MandatoryLtgCtrlIsSecDayltgCtrlRpt[10]  }
END
;*************************************************************************

;************************************************************************* ; RJH 11/17/2021 - moved rules into this rulelist to support one row per ResDWHRSysRef
RULELIST "NRCCPRF_Section_WaterDWHR"  1 0 0 1
   "Create nrcctblRowDWHR for all ResSpcDHWFeatures:ResDWHRSysRef[1] instances"
      ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[1]   = {   if (LocalCompAssigned( ResDWHRSysRef[1] ) > 0 .AND. IfValidAnd( ResDWHRSysShowers[1] > 0 ))
                                       then  CreateComp( nrcctblRowDWHR, Name + "TableDWHRRow-1" )
                                       else  UNDEFINED  endif  }
   "Populate nrcctblRowDWHR DWHR-1 table row"   ResSpcDHWFeatures:Action  = {
         if (LocalCompAssigned( NRCCPRF_tblRowDWHR[1] ) < 1) then  UNCHANGED
         else  EvalRulelist( "NRCCPRF_tblRowDWHR_1", 1 )  endif  }

   "Create nrcctblRowDWHR for all ResSpcDHWFeatures:ResDWHRSysRef[2] instances"
      ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[2]   = {   if (LocalCompAssigned( ResDWHRSysRef[2] ) > 0 .AND. IfValidAnd( ResDWHRSysShowers[2] > 0 ))
                                       then  CreateComp( nrcctblRowDWHR, Name + "TableDWHRRow-2" )
                                       else  UNDEFINED  endif  }
   "Populate nrcctblRowDWHR DWHR-2 table row"   ResSpcDHWFeatures:Action  = {
         if (LocalCompAssigned( NRCCPRF_tblRowDWHR[2] ) < 1) then  UNCHANGED
         else  EvalRulelist( "NRCCPRF_tblRowDWHR_2", 1 )  endif  }

   "Create nrcctblRowDWHR for all ResSpcDHWFeatures:ResDWHRSysRef[3] instances"
      ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[3]   = {   if (LocalCompAssigned( ResDWHRSysRef[3] ) > 0 .AND. IfValidAnd( ResDWHRSysShowers[3] > 0 ))
                                       then  CreateComp( nrcctblRowDWHR, Name + "TableDWHRRow-3" )
                                       else  UNDEFINED  endif  }
   "Populate nrcctblRowDWHR DWHR-3 table row"   ResSpcDHWFeatures:Action  = {
         if (LocalCompAssigned( NRCCPRF_tblRowDWHR[3] ) < 1) then  UNCHANGED
         else  EvalRulelist( "NRCCPRF_tblRowDWHR_3", 1 )  endif  }

   "Create nrcctblRowDWHR for all ResSpcDHWFeatures:ResDWHRSysRef[4] instances"
      ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[4]   = {   if (LocalCompAssigned( ResDWHRSysRef[4] ) > 0 .AND. IfValidAnd( ResDWHRSysShowers[4] > 0 ))
                                       then  CreateComp( nrcctblRowDWHR, Name + "TableDWHRRow-4" )
                                       else  UNDEFINED  endif  }
   "Populate nrcctblRowDWHR DWHR-4 table row"   ResSpcDHWFeatures:Action  = {
         if (LocalCompAssigned( NRCCPRF_tblRowDWHR[4] ) < 1) then  UNCHANGED
         else  EvalRulelist( "NRCCPRF_tblRowDWHR_4", 1 )  endif  }

   "Create nrcctblRowDWHR for all ResSpcDHWFeatures:ResDWHRSysRef[5] instances"
      ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[5]   = {   if (LocalCompAssigned( ResDWHRSysRef[5] ) > 0 .AND. IfValidAnd( ResDWHRSysShowers[5] > 0 ))
                                       then  CreateComp( nrcctblRowDWHR, Name + "TableDWHRRow-5" )
                                       else  UNDEFINED  endif  }
   "Populate nrcctblRowDWHR DWHR-5 table row"   ResSpcDHWFeatures:Action  = {
         if (LocalCompAssigned( NRCCPRF_tblRowDWHR[5] ) < 1) then  UNCHANGED
         else  EvalRulelist( "NRCCPRF_tblRowDWHR_5", 1 )  endif  }

   "Create nrcctblRowDWHR for all ResSpcDHWFeatures:ResDWHRSysRef[6] instances"
      ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[6]   = {   if (LocalCompAssigned( ResDWHRSysRef[6] ) > 0 .AND. IfValidAnd( ResDWHRSysShowers[6] > 0 ))
                                       then  CreateComp( nrcctblRowDWHR, Name + "TableDWHRRow-6" )
                                       else  UNDEFINED  endif  }
   "Populate nrcctblRowDWHR DWHR-6 table row"   ResSpcDHWFeatures:Action  = {
         if (LocalCompAssigned( NRCCPRF_tblRowDWHR[6] ) < 1) then  UNCHANGED
         else  EvalRulelist( "NRCCPRF_tblRowDWHR_6", 1 )  endif  }

END
;*************************************************************************  RJH 11/17/2021
RULELIST "NRCCPRF_tblRowDWHR_1"  1 0 0 1
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[1]:WaterDWHR01_SpaceName"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[1]:WaterDWHR01_SpaceName  = {  ParentSpcNameRpt  }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[1]:WaterDWHR01a_DwellingUnitType"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[1]:WaterDWHR01a_DwellingUnitType  = { 
        switch (DwellingUnitBedroomCnt)
            case 0 : "StudioUnit"
            case 1 : "OneBedroom"
            case 2 : "TwoBedroom"
            case 3 : "ThreeBedroom"
            case 4 : "FourBedroom"
            case 5 : "FivePlusBedroom"
            default :  UNDEFINED
        endswitch }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[1]:WaterDWHR02_WaterHeatingSystemName"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[1]:WaterDWHR02_WaterHeatingSystemName  = {  ParentResDHWSysRefRpt  }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[1]:WaterDWHR02a_DWHR_Name"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[1]:WaterDWHR02a_DWHR_Name  = {  ResDWHRSysRef[1]  }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[1]:WaterDWHR03_DWHR_Configuration"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[1]:WaterDWHR03_DWHR_Configuration  = {  
        if ( IfValidAnd( ResDWHRSysTakeCold[1] > 0 )==0 .AND.
             IfValidAnd( ResDWHRSysFeedHeater[1] > 0 )   )
        then  "UnequalFlowWaterHeater"
        else if (IfValidAnd( ResDWHRSysTakeCold[1] > 0 )    .AND.
                IfValidAnd( ResDWHRSysFeedHeater[1] > 0 )==0)
        then  "UnequalFlowShower"
        else if (IfValidAnd( ResDWHRSysTakeCold[1] > 0 )    .AND.
                IfValidAnd( ResDWHRSysFeedHeater[1] > 0 )   )
        then  "EqualFlow"
        else  UNDEFINED  endif endif endif }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[1]:WaterDWHR04_DWHR_DrainCount"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[1]:WaterDWHR04_DWHR_DrainCount  = { if (IfValidAnd( ResDWHRSysShowers[1] > 0)) then ResDWHRSysShowers[1] else UNDEFINED endif }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[1]:WaterDWHR05_DWHR_HERS_VerificationRequired"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[1]:WaterDWHR05_DWHR_HERS_VerificationRequired  = {  
        if (IfValidAnd(NumResDWHRSysDevs == 1)) then "true" else "false" endif  }
END
;*************************************************************************
;*************************************************************************  RJH 11/17/2021
RULELIST "NRCCPRF_tblRowDWHR_2"  1 0 0 1
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[2]:WaterDWHR01_SpaceName"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[2]:WaterDWHR01_SpaceName  = {  ParentSpcNameRpt  }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[2]:WaterDWHR01a_DwellingUnitType"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[2]:WaterDWHR01a_DwellingUnitType  = { 
        switch (DwellingUnitBedroomCnt)
            case 0 : "StudioUnit"
            case 1 : "OneBedroom"
            case 2 : "TwoBedroom"
            case 3 : "ThreeBedroom"
            case 4 : "FourBedroom"
            case 5 : "FivePlusBedroom"
            default :  UNDEFINED
        endswitch }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[2]:WaterDWHR02_WaterHeatingSystemName"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[2]:WaterDWHR02_WaterHeatingSystemName  = {  ParentResDHWSysRefRpt  }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[2]:WaterDWHR02a_DWHR_Name"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[2]:WaterDWHR02a_DWHR_Name  = {  ResDWHRSysRef[2]  }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[2]:WaterDWHR03_DWHR_Configuration"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[2]:WaterDWHR03_DWHR_Configuration  = {  
        if ( IfValidAnd( ResDWHRSysTakeCold[2] > 0 )==0 .AND.
             IfValidAnd( ResDWHRSysFeedHeater[2] > 0 )   )
        then  "UnequalFlowWaterHeater"
        else if (IfValidAnd( ResDWHRSysTakeCold[2] > 0 )    .AND.
                IfValidAnd( ResDWHRSysFeedHeater[2] > 0 )==0)
        then  "UnequalFlowShower"
        else if (IfValidAnd( ResDWHRSysTakeCold[2] > 0 )    .AND.
                IfValidAnd( ResDWHRSysFeedHeater[2] > 0 )   )
        then  "EqualFlow"
        else  UNDEFINED  endif endif endif }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[2]:WaterDWHR04_DWHR_DrainCount"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[2]:WaterDWHR04_DWHR_DrainCount  = { if (IfValidAnd( ResDWHRSysShowers[2] > 0)) then ResDWHRSysShowers[2] else UNDEFINED endif }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[2]:WaterDWHR05_DWHR_HERS_VerificationRequired"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[2]:WaterDWHR05_DWHR_HERS_VerificationRequired  = {  
        if (IfValidAnd(NumResDWHRSysDevs == 1)) then "true" else "false" endif  }
END
;*************************************************************************
;*************************************************************************  RJH 11/17/2021
RULELIST "NRCCPRF_tblRowDWHR_3"  1 0 0 1
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[3]:WaterDWHR01_SpaceName"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[3]:WaterDWHR01_SpaceName  = {  ParentSpcNameRpt  }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[3]:WaterDWHR01a_DwellingUnitType"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[3]:WaterDWHR01a_DwellingUnitType  = { 
        switch (DwellingUnitBedroomCnt)
            case 0 : "StudioUnit"
            case 1 : "OneBedroom"
            case 2 : "TwoBedroom"
            case 3 : "ThreeBedroom"
            case 4 : "FourBedroom"
            case 5 : "FivePlusBedroom"
            default :  UNDEFINED
        endswitch }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[3]:WaterDWHR02_WaterHeatingSystemName"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[3]:WaterDWHR02_WaterHeatingSystemName  = {  ParentResDHWSysRefRpt  }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[3]:WaterDWHR02a_DWHR_Name"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[3]:WaterDWHR02a_DWHR_Name  = {  ResDWHRSysRef[3]  }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[3]:WaterDWHR03_DWHR_Configuration"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[3]:WaterDWHR03_DWHR_Configuration  = {  
        if ( IfValidAnd( ResDWHRSysTakeCold[3] > 0 )==0 .AND.
             IfValidAnd( ResDWHRSysFeedHeater[3] > 0 )   )
        then  "UnequalFlowWaterHeater"
        else if (IfValidAnd( ResDWHRSysTakeCold[3] > 0 )    .AND.
                IfValidAnd( ResDWHRSysFeedHeater[3] > 0 )==0)
        then  "UnequalFlowShower"
        else if (IfValidAnd( ResDWHRSysTakeCold[3] > 0 )    .AND.
                IfValidAnd( ResDWHRSysFeedHeater[3] > 0 )   )
        then  "EqualFlow"
        else  UNDEFINED  endif endif endif }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[3]:WaterDWHR04_DWHR_DrainCount"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[3]:WaterDWHR04_DWHR_DrainCount  = { if (IfValidAnd( ResDWHRSysShowers[3] > 0)) then ResDWHRSysShowers[3] else UNDEFINED endif }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[3]:WaterDWHR05_DWHR_HERS_VerificationRequired"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[3]:WaterDWHR05_DWHR_HERS_VerificationRequired  = {  
        if (IfValidAnd(NumResDWHRSysDevs == 1)) then "true" else "false" endif  }
END
;*************************************************************************
;*************************************************************************  RJH 11/17/2021
RULELIST "NRCCPRF_tblRowDWHR_4"  1 0 0 1
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[4]:WaterDWHR01_SpaceName"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[4]:WaterDWHR01_SpaceName  = {  ParentSpcNameRpt  }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[4]:WaterDWHR01a_DwellingUnitType"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[4]:WaterDWHR01a_DwellingUnitType  = { 
        switch (DwellingUnitBedroomCnt)
            case 0 : "StudioUnit"
            case 1 : "OneBedroom"
            case 2 : "TwoBedroom"
            case 3 : "ThreeBedroom"
            case 4 : "FourBedroom"
            case 5 : "FivePlusBedroom"
            default :  UNDEFINED
        endswitch }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[4]:WaterDWHR02_WaterHeatingSystemName"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[4]:WaterDWHR02_WaterHeatingSystemName  = {  ParentResDHWSysRefRpt  }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[4]:WaterDWHR02a_DWHR_Name"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[4]:WaterDWHR02a_DWHR_Name  = {  ResDWHRSysRef[4]  }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[4]:WaterDWHR03_DWHR_Configuration"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[4]:WaterDWHR03_DWHR_Configuration  = {  
        if ( IfValidAnd( ResDWHRSysTakeCold[4] > 0 )==0 .AND.
             IfValidAnd( ResDWHRSysFeedHeater[4] > 0 )   )
        then  "UnequalFlowWaterHeater"
        else if (IfValidAnd( ResDWHRSysTakeCold[4] > 0 )    .AND.
                IfValidAnd( ResDWHRSysFeedHeater[4] > 0 )==0)
        then  "UnequalFlowShower"
        else if (IfValidAnd( ResDWHRSysTakeCold[4] > 0 )    .AND.
                IfValidAnd( ResDWHRSysFeedHeater[4] > 0 )   )
        then  "EqualFlow"
        else  UNDEFINED  endif endif endif }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[4]:WaterDWHR04_DWHR_DrainCount"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[4]:WaterDWHR04_DWHR_DrainCount  = { if (IfValidAnd( ResDWHRSysShowers[4] > 0)) then ResDWHRSysShowers[4] else UNDEFINED endif }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[4]:WaterDWHR05_DWHR_HERS_VerificationRequired"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[4]:WaterDWHR05_DWHR_HERS_VerificationRequired  = {  
        if (IfValidAnd(NumResDWHRSysDevs == 1)) then "true" else "false" endif  }
END
;*************************************************************************
;*************************************************************************  RJH 11/17/2021
RULELIST "NRCCPRF_tblRowDWHR_5"  1 0 0 1
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[5]:WaterDWHR01_SpaceName"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[5]:WaterDWHR01_SpaceName  = {  ParentSpcNameRpt  }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[5]:WaterDWHR01a_DwellingUnitType"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[5]:WaterDWHR01a_DwellingUnitType  = { 
        switch (DwellingUnitBedroomCnt)
            case 0 : "StudioUnit"
            case 1 : "OneBedroom"
            case 2 : "TwoBedroom"
            case 3 : "ThreeBedroom"
            case 4 : "FourBedroom"
            case 5 : "FivePlusBedroom"
            default :  UNDEFINED
        endswitch }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[5]:WaterDWHR02_WaterHeatingSystemName"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[5]:WaterDWHR02_WaterHeatingSystemName  = {  ParentResDHWSysRefRpt  }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[5]:WaterDWHR02a_DWHR_Name"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[5]:WaterDWHR02a_DWHR_Name  = {  ResDWHRSysRef[5]  }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[5]:WaterDWHR03_DWHR_Configuration"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[5]:WaterDWHR03_DWHR_Configuration  = {  
        if ( IfValidAnd( ResDWHRSysTakeCold[5] > 0 )==0 .AND.
             IfValidAnd( ResDWHRSysFeedHeater[5] > 0 )   )
        then  "UnequalFlowWaterHeater"
        else if (IfValidAnd( ResDWHRSysTakeCold[5] > 0 )    .AND.
                IfValidAnd( ResDWHRSysFeedHeater[5] > 0 )==0)
        then  "UnequalFlowShower"
        else if (IfValidAnd( ResDWHRSysTakeCold[5] > 0 )    .AND.
                IfValidAnd( ResDWHRSysFeedHeater[5] > 0 )   )
        then  "EqualFlow"
        else  UNDEFINED  endif endif endif }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[5]:WaterDWHR04_DWHR_DrainCount"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[5]:WaterDWHR04_DWHR_DrainCount  = { if (IfValidAnd( ResDWHRSysShowers[5] > 0)) then ResDWHRSysShowers[5] else UNDEFINED endif }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[5]:WaterDWHR05_DWHR_HERS_VerificationRequired"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[5]:WaterDWHR05_DWHR_HERS_VerificationRequired  = {  
        if (IfValidAnd(NumResDWHRSysDevs == 1)) then "true" else "false" endif  }
END
;*************************************************************************
;*************************************************************************  RJH 11/17/2021
RULELIST "NRCCPRF_tblRowDWHR_6"  1 0 0 1
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[6]:WaterDWHR01_SpaceName"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[6]:WaterDWHR01_SpaceName  = {  ParentSpcNameRpt  }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[6]:WaterDWHR01a_DwellingUnitType"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[6]:WaterDWHR01a_DwellingUnitType  = { 
        switch (DwellingUnitBedroomCnt)
            case 0 : "StudioUnit"
            case 1 : "OneBedroom"
            case 2 : "TwoBedroom"
            case 3 : "ThreeBedroom"
            case 4 : "FourBedroom"
            case 5 : "FivePlusBedroom"
            default :  UNDEFINED
        endswitch }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[6]:WaterDWHR02_WaterHeatingSystemName"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[6]:WaterDWHR02_WaterHeatingSystemName  = {  ParentResDHWSysRefRpt  }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[6]:WaterDWHR02a_DWHR_Name"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[6]:WaterDWHR02a_DWHR_Name  = {  ResDWHRSysRef[6]  }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[6]:WaterDWHR03_DWHR_Configuration"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[6]:WaterDWHR03_DWHR_Configuration  = {  
        if ( IfValidAnd( ResDWHRSysTakeCold[6] > 0 )==0 .AND.
             IfValidAnd( ResDWHRSysFeedHeater[6] > 0 )   )
        then  "UnequalFlowWaterHeater"
        else if (IfValidAnd( ResDWHRSysTakeCold[6] > 0 )    .AND.
                IfValidAnd( ResDWHRSysFeedHeater[6] > 0 )==0)
        then  "UnequalFlowShower"
        else if (IfValidAnd( ResDWHRSysTakeCold[6] > 0 )    .AND.
                IfValidAnd( ResDWHRSysFeedHeater[6] > 0 )   )
        then  "EqualFlow"
        else  UNDEFINED  endif endif endif }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[6]:WaterDWHR04_DWHR_DrainCount"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[6]:WaterDWHR04_DWHR_DrainCount  = { if (IfValidAnd( ResDWHRSysShowers[6] > 0)) then ResDWHRSysShowers[6] else UNDEFINED endif }
   "Set ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[6]:WaterDWHR05_DWHR_HERS_VerificationRequired"   ResSpcDHWFeatures:NRCCPRF_tblRowDWHR[6]:WaterDWHR05_DWHR_HERS_VerificationRequired  = {  
        if (IfValidAnd(NumResDWHRSysDevs == 1)) then "true" else "false" endif  }
END
;*************************************************************************


;*************************************************************************
;*************************************************************************

ENDFILE
