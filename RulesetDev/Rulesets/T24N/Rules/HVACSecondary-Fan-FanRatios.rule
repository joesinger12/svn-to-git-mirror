// HVAC Secondary Systems - Fans - Fan Ratios
//
// -------------------------------------------------------------------------
//  Copyright (c) 2013-2017, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------


//  This rule file addresses the following building descriptors:



// =========================== Thermal Zones ==================================
// --------------------------- Flow Ratios ------------------------------------
// Transfer supply flow from system to zone for both Pri & VentSys
RULE NEW ThrmlZn:PriAirCondgSysDsgnFlow
  DATATYPE
    Float
  LONGFORM
    PrimaryAirConditioningSystemDesignFlow
  INPUTCLASS
    NotInput
  UNITS
    cfm
  SIZING_PROPOSED
    if( IsCond = 1 .AND. HasUnknownHVAC = 0 )
    then
      if( LocalCompAssigned( PriAirCondgSysRef[1] ) = ComponentType( "AirSys" ) .AND.
           LocalCompAssigned( TrmlUnitRef ) )
      then ; Referenced System is an AirSys
        PriAirCondgSysRef[1]:SupFanCap * 
        ( TrmlUnitRef:PriAirFlowMaxSim / PriAirCondgSysRef[1]:TotTrmlPriAirFlowMaxSim )
      else
      if( LocalCompAssigned( PriAirCondgSysRef[1] ) = ComponentType( "ZnSys" ) )
      then ; Referenced System is a ZnSys
        PriAirCondgSysRef[1]:SupFanCap
      else 0
      endif endif
    else 0
    endif
  ANNUAL
    if( IsCond = 1 )
    then
      if( LocalCompAssigned( PriAirCondgSysRef[1] ) = ComponentType( "AirSys" ) .AND.
           LocalCompAssigned( TrmlUnitRef ) )
      then ; Referenced System is an AirSys
        PriAirCondgSysRef[1]:SupFanCap * 
        ( ValidOr( TrmlUnitRef:PriAirFlowMaxSim, 1 ) / max( ValidOr( PriAirCondgSysRef[1]:TotTrmlPriAirFlowMaxSim, 1 ), 1 ) )
      else
      if( LocalCompAssigned( PriAirCondgSysRef[1] ) = ComponentType( "ZnSys" ) )
      then ; Referenced System is a ZnSys
        PriAirCondgSysRef[1]:SupFanCap
      else 0
      endif endif
    else 0
    endif
ENDRULE
RULE NEW ThrmlZn:VentSysDsgnFlow
  DATATYPE
    Float
  LONGFORM
    VentilationSystemDesignAirFlow
  INPUTCLASS
    NotInput
  UNITS
    cfm
  DEFAULT
    if( IsCond = 1 .AND. HasUnknownHVAC = 0 )
    then
      if( LocalCompAssigned( VentSysRef ) = ComponentType( "AirSys" ) .AND.
          LocalCompAssigned( TrmlUnitRef ) .AND.
          IfValidAnd( VentSysRef:Type != "Exhaust" ) )
      then ; Referenced System is an AirSys
        ValidOr( VentSysRef:SupFanCap, 0 ) * 
        ( ValidOr( TrmlUnitRef:PriAirFlowMaxSim, 0 ) / max( ValidOr( VentSysRef:TotTrmlPriAirFlowMaxSim, 1 ), 1 ) )
      else
      if( LocalCompAssigned( VentSysRef ) = ComponentType( "ZnSys" ) .AND.
          IfValidAnd( VentSysRef:Type != "Exhaust" ) )
      then ; Referenced System is a ZnSys
        VentSysRef:SupFanCap
      else 0
      endif endif
    else 0
    endif
  SIZING_PROPOSED
    if( IsCond = 1 .AND. HasUnknownHVAC = 0 )
    then
      if( LocalCompAssigned( VentSysRef ) = ComponentType( "AirSys" ) .AND.
          LocalCompAssigned( TrmlUnitRef ) .AND.
          IfValidAnd( VentSysRef:Type != "Exhaust" ) )
      then ; Referenced System is an AirSys
        ValidOr( VentSysRef:SupFanCap, 0 ) * 
        ( ValidOr( TrmlUnitRef:PriAirFlowMaxSim, 0 ) / max( ValidOr( VentSysRef:TotTrmlPriAirFlowMaxSim, 1 ), 1 ) )
      else
      if( LocalCompAssigned( VentSysRef ) = ComponentType( "ZnSys" ) .AND.
          IfValidAnd( VentSysRef:Type != "Exhaust" ) )
      then ; Referenced System is a ZnSys
        VentSysRef:SupFanCap
      else 0
      endif endif
    else 0
    endif
  ANNUAL
    if( IsCond = 1 )
    then
      if( LocalCompAssigned( VentSysRef ) = ComponentType( "AirSys" ) .AND.
          LocalCompAssigned( TrmlUnitRef ) .AND.
          IfValidAnd( VentSysRef:Type != "Exhaust" ) )
      then ; Referenced System is an AirSys
        ValidOr( VentSysRef:SupFanCap, 0 ) * 
        ( ValidOr( TrmlUnitRef:PriAirFlowMaxSim, 0 ) / max( ValidOr( VentSysRef:TotTrmlPriAirFlowMaxSim, 1 ), 1 ) )        
      else
      if( LocalCompAssigned( VentSysRef ) = ComponentType( "ZnSys" ) .AND.
          IfValidAnd( VentSysRef:Type != "Exhaust" ) )
      then ; Referenced System is a ZnSys
        VentSysRef:SupFanCap
      else 0
      endif endif
    else 0
    endif
ENDRULE
// Determine max of Pri/Vent flow to zone
RULE NEW ThrmlZn:MaxDsgnFlow
  DATATYPE
    Float
  LONGFORM
    MaximumDesignAirFlow
  INPUTCLASS
    NotInput
  UNITS
    cfm
  ANNUAL
    Max( ValidOr( PriAirCondgSysDsgnFlow, 0 ), 
         ValidOr( VentSysDsgnFlow, 0 ) )
ENDRULE
// Calculate ratio of air flow baseline:proposed 
RULE NEW ThrmlZn:BaseToPropDsgnSupFlowRat
  DATATYPE
    Float
  LONGFORM
    BaselineToProposedDesignFlowRatio
  INPUTCLASS
    NotInput
  UNITS
    cfm
  ANNUAL
    if( IfValidAnd( ap:MaxDsgnFlow > 0 ) )
    then PriAirCondgSysDsgnFlow / ap:MaxDsgnFlow
    else 0 
    endif
ENDRULE

// Calculate ratio zone:sys flow for each zone, for Pri/Vent/Exh
RULE NEW ThrmlZn:PriZnToSysFlowRat
  DATATYPE
    Float
  LONGFORM
    PrimaryZoneToSystemFlowRatio
  INPUTCLASS
    NotInput
  SIZING_PROPOSED
    if( IsCond = 1 .AND. HasUnknownHVAC = 0 .AND.
        LocalCompAssigned( PriAirCondgSysRef[1] ) )
    then 
      if( IfValidAnd( PriAirCondgSysRef[1]:SupFanCap > 0 ) )
      then PriAirCondgSysDsgnFlow / PriAirCondgSysRef[1]:SupFanCap
      else 0
      endif
    else 0
    endif
  ANNUAL
    if( IsCond = 1 .AND. HasUnknownHVAC > 0 .AND.
        LocalCompAssigned( PriAirCondgSysRef[1] ) )
    then 
      if( IfValidAnd( PriAirCondgSysRef[1]:SupFanCap > 0 ) )
      then PriAirCondgSysDsgnFlow / PriAirCondgSysRef[1]:SupFanCap
      else 0
      endif
    else z:PriZnToSysFlowRat
    endif    
ENDRULE
RULE NEW ThrmlZn:VentZnToSysFlowRat
  DATATYPE
    Float
  LONGFORM
    VentilationZoneToSystemFlowRatio
  INPUTCLASS
    NotInput
  SIZING_PROPOSED
    if( IsCond = 1 .AND. HasUnknownHVAC = 0 .AND.
        UniqueVentSysAssigned > 0 )
    then
      if( IfValidAnd( VentSysRef:SupFanCap > 0 ) .AND.
          IfValidAnd( VentSysRef:IsExhSys = 0 ) )
      then VentSysDsgnFlow / VentSysRef:SupFanCap
      else 0
      endif
    else 0
    endif
  ANNUAL
    if( IsCond = 1 .AND.
        HasUnknownHVAC > 0 )
    then 0 // VentSys is always same as PriAirCondgSys
    else z:VentZnToSysFlowRat
    endif
ENDRULE
RULE NEW ThrmlZn:ExhZnToSysFlowRat
  DATATYPE
    Float
  LONGFORM
    ExhaustZoneToSystemFlowRatio
  INPUTCLASS
    NotInput
  SIZING_PROPOSED
    if( IsCond = 1 .AND. HasUnknownHVAC = 0 .AND.
        LocalCompAssigned( ExhSysRef ) )
    then
      if( IfValidAnd( ExhSysRef:ExhFanCap > 0 ) )
      then ExhFlow / ExhSysRef:ExhFanCap
      else 0
      endif
    else 0
    endif
  ANNUAL
    if( IsCond = 1 .AND.
        HasUnknownHVAC > 0 )
    then 1 // ExhSys defined on a zone-by-zone basis
    else z:ExhZnToSysFlowRat
    endif   
ENDRULE


// --------------------------- Fan Powers -------------------------------------
// Allocate the prop fan power (in kW) to the ThrmlZn by multiplying the system 
// fan power by the ZnToSysFlowratio, for Pri/Vent/Total, 
// and by fan type (supply, return, and relief)
// These steps are not applicable to zones that HasUnknownHVAC

// Supply
RULE NEW ThrmlZn:PriSysPropSupFanPwr
  DATATYPE
    Float
  LONGFORM
    PrimarySystemProposedSupplyFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING_PROPOSED
    if( IsCond = 1 .AND. HasUnknownHVAC = 0 .AND.
        LocalCompAssigned( PriAirCondgSysRef[1] ) )
    then ValidOr( PriAirCondgSysRef[1]:SupFanPwr, 0 ) * PriZnToSysFlowRat
    else 0 
    endif    
  SIZING_BASELINE
    zp:PriSysPropSupFanPwr
ENDRULE
RULE NEW ThrmlZn:VentSysPropSupFanPwr
  DATATYPE
    Float
  LONGFORM
    VentilationSystemProposedSupplyFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING_PROPOSED
    if( IsCond = 1 .AND. HasUnknownHVAC = 0 .AND.
        LocalCompAssigned( VentSysRef ) )
    then ValidOr( VentSysRef:SupFanPwr, 0 ) * VentZnToSysFlowRat
    else 0 
    endif    
  SIZING_BASELINE
    zp:VentSysPropSupFanPwr
ENDRULE
RULE NEW ThrmlZn:TotPropSupFanPwr
  DATATYPE
    Float
  LONGFORM
    TotalProposedSupplyFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  ANNUAL_PROPOSED
    PriSysPropSupFanPwr +
    VentSysPropSupFanPwr
  ANNUAL_BASELINE  
    ap:TotPropSupFanPwr
ENDRULE

// Return
RULE NEW ThrmlZn:PriSysPropRetFanPwr
  DATATYPE
    Float
  LONGFORM
    PrimarySystemProposedReturnFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING_PROPOSED
    if( IsCond = 1 .AND. HasUnknownHVAC = 0 .AND.
        LocalCompAssigned( PriAirCondgSysRef[1] ) = ComponentType( "AirSys" ) )
    then ValidOr( PriAirCondgSysRef[1]:RetFanPwr, 0 ) * PriZnToSysFlowRat
    else 0 
    endif 
  SIZING_BASELINE  
    zp:PriSysPropRetFanPwr   
ENDRULE
RULE NEW ThrmlZn:VentSysPropRetFanPwr
  DATATYPE
    Float
  LONGFORM
    VentilationSystemProposedReturnFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING_PROPOSED
    if( IsCond = 1 .AND. HasUnknownHVAC = 0 .AND.
        LocalCompAssigned( VentSysRef ) = ComponentType( "AirSys" ) )
    then ValidOr( VentSysRef:RetFanPwr, 0 ) * VentZnToSysFlowRat
    else 0 
    endif    
  SIZING_BASELINE  
    zp:VentSysPropRetFanPwr
ENDRULE
RULE NEW ThrmlZn:TotPropRetFanPwr
  DATATYPE
    Float
  LONGFORM
    TotalProposedReturnFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING_PROPOSED
    PriSysPropRetFanPwr +
    VentSysPropRetFanPwr
  SIZING_BASELINE  
    zp:TotPropRetFanPwr  
ENDRULE

// Relief
RULE NEW ThrmlZn:PriSysPropReliefFanPwr
  DATATYPE
    Float
  LONGFORM
    PrimarySystemProposedReliefFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING_PROPOSED
    if( IsCond = 1 .AND. HasUnknownHVAC = 0 .AND.
        LocalCompAssigned( VentSysRef ) = ComponentType( "AirSys" ) )
    then ValidOr( PriAirCondgSysRef[1]:ReliefFanPwr, 0 ) * PriZnToSysFlowRat
    else 0 
    endif    
  SIZING_BASELINE  
    zp:PriSysPropReliefFanPwr 
ENDRULE
RULE NEW ThrmlZn:VentSysPropReliefFanPwr
  DATATYPE
    Float
  LONGFORM
    VentilationSystemProposedReliefFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING_PROPOSED
    if( IsCond = 1 .AND. HasUnknownHVAC = 0 .AND.
        LocalCompAssigned( VentSysRef ) = ComponentType( "AirSys" ) )
    then ValidOr( VentSysRef:ReliefFanPwr, 0 ) * VentZnToSysFlowRat
    else 0 
    endif    
  SIZING_BASELINE  
    zp:VentSysPropReliefFanPwr  
ENDRULE
RULE NEW ThrmlZn:TotPropReliefFanPwr
  DATATYPE
    Float
  LONGFORM
    TotalProposedReliefFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING_PROPOSED
    PriSysPropReliefFanPwr +
    VentSysPropReliefFanPwr
  SIZING_BASELINE  
    zp:TotPropReliefFanPwr 
ENDRULE

// Sum up supply + return + relief fan power for Pri/Vent
RULE NEW ThrmlZn:TotPriSysPropFanPwr
  DATATYPE
    Float
  LONGFORM
    TotalPrimarySystemProposedFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING_PROPOSED
    PriSysPropSupFanPwr +
    PriSysPropRetFanPwr +
    PriSysPropReliefFanPwr
  SIZING_BASELINE  
    zp:TotPriSysPropFanPwr
ENDRULE
RULE NEW ThrmlZn:TotVentSysPropFanPwr
  DATATYPE
    Float
  LONGFORM
    TotalVentilationSystemProposedFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING_PROPOSED
    VentSysPropSupFanPwr +
    VentSysPropRetFanPwr +
    VentSysPropReliefFanPwr 
  SIZING_BASELINE  
    zp:TotVentSysPropFanPwr
ENDRULE

// Only one reference that an ExhSys can be set to
RULE NEW ThrmlZn:PropExhFanPwr
  DATATYPE
    Float
  LONGFORM
    ProposedExhaustFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING_PROPOSED
    if( IsCond = 1 .AND. HasUnknownHVAC = 0 .AND.
        IfValidAnd( PropVentSysIsExh = 0 ) .AND.
        LocalCompAssigned( ExhSysRef ) )
    then ValidOr( ExhSysRef:ExhFanPwr, 0 ) * ExhZnToSysFlowRat
    else 0 
    endif   
  SIZING_BASELINE  
    zp:PropExhFanPwr 
ENDRULE

// Sum up total fan power for ThrmlZn (pri + vent + exh)
RULE NEW ThrmlZn:TotPropFanPwr
  DATATYPE
    Float
  LONGFORM
    TotalProposedFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING_PROPOSED
    TotPriSysPropFanPwr + 
    TotVentSysPropFanPwr +
    PropExhFanPwr
  SIZING_BASELINE  
    zp:TotPropFanPwr
ENDRULE

// =========================== AirSystem ======================================
// Sum zone fan power to system
RULE NEW AirSys:TotPropSysFanPwr
  DATATYPE
    Float
  LONGFORM
    TotalSystemFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  ANNUAL_PROPOSED
    SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:TotPriSysPropFanPwr ) + 
    SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:TotVentSysPropFanPwr ) +
    SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:PropExhFanPwr )     
  ANNUAL_BASELINE
    SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:TotPriSysPropFanPwr ) + 
    SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:TotVentSysPropFanPwr ) +
    SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:PropExhFanPwr )    
ENDRULE
RULE NEW AirSys:PropExhFanPwr
  DATATYPE
    Float
  LONGFORM
    ProposedExhaustFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  ANNUAL_PROPOSED
    SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:PropExhFanPwr ) 
  ANNUAL_BASELINE
    SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:PropExhFanPwr ) 
ENDRULE
// Calculate ratio of supply fan power to total system power
RULE NEW AirSys:SupFanPwrRat
  DATATYPE
    Float
  LONGFORM
    SupplyFanPowerRatio
  INPUTCLASS
    NotInput
  ANNUAL_PROPOSED
    if( TotPropSysFanPwr > 0 ) 
    then
      ( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:PriSysPropSupFanPwr ) + 
        SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:VentSysPropSupFanPwr ) ) /
      TotPropSysFanPwr
    else 0
    endif
  ANNUAL_BASELINE
    if( TotPropSysFanPwr > 0 ) 
    then
      ( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:PriSysPropSupFanPwr ) + 
        SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:VentSysPropSupFanPwr ) ) /
      TotPropSysFanPwr
    else 0
    endif
ENDRULE
// Calculate ratio of return fan power to total system power
RULE NEW AirSys:RetFanPwrRat
  DATATYPE
    Float
  LONGFORM
    ReturnFanPowerRatio
  INPUTCLASS
    NotInput
  ANNUAL_PROPOSED
    if( TotPropSysFanPwr > 0 ) 
    then
      ( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:PriSysPropRetFanPwr ) + 
        SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:VentSysPropRetFanPwr ) ) /
      TotPropSysFanPwr
    else 0
    endif
  ANNUAL_BASELINE
    if( TotPropSysFanPwr > 0 ) 
    then
      ( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:PriSysPropRetFanPwr ) + 
        SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:VentSysPropRetFanPwr ) ) /
      TotPropSysFanPwr
    else 0
    endif
ENDRULE
// Calculate ratio of relief fan power to total system power
RULE NEW AirSys:ReliefFanPwrRat
  DATATYPE
    Float
  LONGFORM
    ReliefFanPowerRatio
  INPUTCLASS
    NotInput
  ANNUAL_PROPOSED
    if( TotPropSysFanPwr > 0 ) 
    then
      ( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:PriSysPropReliefFanPwr ) + 
        SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:VentSysPropReliefFanPwr ) ) /
      TotPropSysFanPwr
    else 0
    endif
  ANNUAL_BASELINE
    if( TotPropSysFanPwr > 0 ) 
    then
      ( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:PriSysPropReliefFanPwr ) + 
        SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:VentSysPropReliefFanPwr ) ) /
      TotPropSysFanPwr
    else 0
    endif
ENDRULE
// Calculate ratio of exhuast fan power to total system power
RULE NEW AirSys:ExhFanPwrRat
  DATATYPE
    Float
  LONGFORM
    ExhaustFanPowerRatio
  INPUTCLASS
    NotInput
  ANNUAL_PROPOSED
    if( TotPropSysFanPwr > 0 ) 
    then
      SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:PropExhFanPwr ) /
      TotPropSysFanPwr
    else 0
    endif
  ANNUAL_BASELINE
    if( TotPropSysFanPwr > 0 ) 
    then
      SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:PropExhFanPwr ) /
      TotPropSysFanPwr
    else 0
    endif
ENDRULE
// QC Check
RULE NEW AirSys:TotFanPwrRat
  DATATYPE
    Float
  LONGFORM
    TotalFanPowerRatio
  INPUTCLASS
    NotInput
  ANNUAL_PROPOSED
    SupFanPwrRat + 
    RetFanPwrRat +
    ReliefFanPwrRat +
    ExhFanPwrRat
  ANNUAL_BASELINE
    SupFanPwrRat + 
    RetFanPwrRat +
    ReliefFanPwrRat +
    ExhFanPwrRat
ENDRULE


// =========================== ZoneSystem =====================================
// Sum zone fan power to System
RULE NEW ZnSys:TotPropSysFanPwr
  DATATYPE
    Float
  LONGFORM
    TotalSystemFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  ANNUAL_PROPOSED
    SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:TotPriSysPropFanPwr ) + 
    SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:TotVentSysPropFanPwr ) +
    SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:PropExhFanPwr )     
  ANNUAL_BASELINE
    SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:TotPriSysPropFanPwr ) + 
    SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:TotVentSysPropFanPwr ) +
    SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:PropExhFanPwr )   
ENDRULE
RULE NEW ZnSys:PropExhFanPwr
  DATATYPE
    Float
  LONGFORM
    ProposedExhaustFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  ANNUAL_PROPOSED
    SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:PropExhFanPwr ) 
  ANNUAL_BASELINE
    SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:PropExhFanPwr ) 
ENDRULE

RULE NEW ZnSys:SupFanPwrRat
  DATATYPE
    Float
  LONGFORM
    SupplyFanPowerRatio
  INPUTCLASS
    NotInput
  ANNUAL_PROPOSED
    if( TotPropSysFanPwr > 0 ) 
    then
      ( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:PriSysPropSupFanPwr ) + 
        SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:VentSysPropSupFanPwr ) ) /
      TotPropSysFanPwr
    else 0
    endif
  ANNUAL_BASELINE
    if( TotPropSysFanPwr > 0 ) 
    then
      ( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:PriSysPropSupFanPwr ) + 
        SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:VentSysPropSupFanPwr ) ) /
      TotPropSysFanPwr
    else 0
    endif
ENDRULE
// Return/Releif ratios included for consistency with AirSys rules, but ZnSys
// currently can't have return/relief fans.
RULE NEW ZnSys:RetFanPwrRat
  DATATYPE
    Float
  LONGFORM
    ReturnFanPowerRatio
  INPUTCLASS
    NotInput
  ANNUAL_PROPOSED
    if( TotPropSysFanPwr > 0 ) 
    then
      ( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:PriSysPropRetFanPwr ) + 
        SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:VentSysPropRetFanPwr ) ) /
      TotPropSysFanPwr
    else 0
    endif
  ANNUAL_BASELINE
    if( TotPropSysFanPwr > 0 ) 
    then
      ( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:PriSysPropRetFanPwr ) + 
        SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:VentSysPropRetFanPwr ) ) /
      TotPropSysFanPwr
    else 0
    endif
ENDRULE
RULE NEW ZnSys:ReliefFanPwrRat
  DATATYPE
    Float
  LONGFORM
    ReliefFanPowerRatio
  INPUTCLASS
    NotInput
  ANNUAL_PROPOSED
    if( TotPropSysFanPwr > 0 ) 
    then
      ( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:PriSysPropReliefFanPwr ) + 
        SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:VentSysPropReliefFanPwr ) ) /
      TotPropSysFanPwr
    else 0
    endif
  ANNUAL_BASELINE
    if( TotPropSysFanPwr > 0 ) 
    then
      ( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:PriSysPropReliefFanPwr ) + 
        SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:VentSysPropReliefFanPwr ) ) /
      TotPropSysFanPwr
    else 0
    endif
ENDRULE
RULE NEW ZnSys:ExhFanPwrRat
  DATATYPE
    Float
  LONGFORM
    ExhaustFanPowerRatio
  INPUTCLASS
    NotInput
  ANNUAL_PROPOSED
    if( TotPropSysFanPwr > 0 ) 
    then
      SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:PropExhFanPwr ) /
      TotPropSysFanPwr
    else 0
    endif
  ANNUAL_BASELINE
    if( TotPropSysFanPwr > 0 ) 
    then
      SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:PropExhFanPwr ) /
      TotPropSysFanPwr
    else 0
    endif
ENDRULE
// QC Check
RULE NEW ZnSys:TotFanPwrRat
  DATATYPE
    Float
  LONGFORM
    TotalFanPowerRatio
  INPUTCLASS
    NotInput
  ANNUAL_PROPOSED
    SupFanPwrRat + 
    RetFanPwrRat +
    ReliefFanPwrRat +
    ExhFanPwrRat
  ANNUAL_BASELINE
    SupFanPwrRat + 
    RetFanPwrRat +
    ReliefFanPwrRat +
    ExhFanPwrRat
ENDRULE


// =============== ZoneToSystemProposedExhaustFanPowerRatio =====================
RULE NEW ThrmlZn:ZnToSysPropExhFanPwrRat
  DATATYPE
    Float
  LONGFORM
    ZoneToSystemProposedExhaustFanPowerRatio
  INPUTCLASS
    NotInput
  ANNUAL_PROPOSED
    UNDEFINED
  ANNUAL_BASELINE  
    if( HasUnknownHVAC = 0 .AND. 
        LocalCompAssigned( PriAirCondgSysRef[1]) .AND.
        IfValidAnd( PriAirCondgSysRef[1]:PropExhFanPwr > 0 ) )
    then PropExhFanPwr / PriAirCondgSysRef[1]:PropExhFanPwr
    else 0
    endif
ENDRULE

// =============== Set PropResVentSysPwrIdx ===================================
RULE NEW ThrmlZn:PropResVentSysPwrIdx
  DATATYPE
    Float
  LONGFORM
    ProposedResidentialVentilationSystemPowerIndex
  DESCRIPTION
    "The system fan power per unit of flow for the proposed
     ventilation system that serves a high-rise residential zone."  
  INPUTCLASS
    NotInput
  UNITS
    W/cfm
  SIZING : T24N_2016
    0 // Not used
  DEFAULT
// Set ExhSysPwrIdx for proposed design
    if( IsCond > 0 .AND. 
        IsHighRiseRes > 0 .AND. 
        HasUnknownHVAC = 0 .AND.
        LocalCompAssigned( VentSysRef ) )
    then 
      if( PropVentSysIsExh > 0 )
      then ValidOr( ExhSysPwrIdx, 0 )
      else 
      if( IfValidAnd( VentSysRef:Type = "VentilationOnly" ) )
      then ValidOr( VentSysRef:ExhSysFanPwrIdx, 0 )
      else
      if( IfValidAnd( VentSysRef:SupFanCap > 0 ) )
      then ( ValidOr( VentSysRef:SupFanPwr, 0 ) +
             Max( ValidOr( VentSysRef:RetFanPwr, 0 ), 
                  ValidOr( VentSysRef:ExhFanPwr, 0 ) ) +
             ValidOr( VentSysRef:ReliefFanPwr, 0 )
           ) * 1000 / VentSysRef:SupFanCap
      else 0
      endif endif endif
    else 0
    endif
ENDRULE





