// HVAC Secondary Systems - Fans - Supply
//
// -------------------------------------------------------------------------
//  Copyright (c) 2013-2017, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------


// ********** System Fan Power Allowance ***************************************
// =========================== AirSystem =======================================
// Set baseline fan power modeling method
RULE NEW AirSys:BaseFanModelingMthd
  DATATYPE
    Enumeration
  LONGFORM
    BaselineFanModelingMethod
  OPTION
    StaticPressure
    BrakeHorsePower
    PowerPerUnitFlow
    NA
  INPUTCLASS
    NotInput
  ANNUAL
    if( BaseSysNum > 0 )
    then "PowerPerUnitFlow"
    else "NA"
    endif
ENDRULE
// Set baseline fan power index (W/cfm) for systems that use PowerPerUnitFlow method
RULE NEW AirSys:BaseFanPwrIdx
  DATATYPE
    Float
  LONGFORM
    BaselineFanPowerIndex
  INPUTCLASS
    NotInput
  UNITS
    W/cfm
  ANNUAL
    if( BaseSysNum > 0 .AND. 
        BaseFanModelingMthd = "PowerPerUnitFlow" .AND.
        IfValidAnd( SupFanCap > 0 ) )
    then
      switch( BaseSysNum )
        // Fan power allowances for System 3 are the same as 7
        case   5 : T24N_2022BaseFanPwrIdx:Sys5( "FlowCap", SupFanCap ) // PVAV
        case   6 : T24N_2022BaseFanPwrIdx:Sys6( "FlowCap", SupFanCap ) // VAV
        case   7 : if( BaseSysNumOpt = "a" ) // NRes SZVAV
                   then // System 7a
                     T24N_2022BaseFanPwrIdx:Sys7a( "FlowCap", SupFanCap )
                   else if( BaseSysNumOpt = "b" )
                   then // System 7b
                     T24N_2022BaseFanPwrIdx:Sys7b( "FlowCap", SupFanCap )
                   else // System 7c
                     T24N_2022BaseFanPwrIdx:Sys7c( "FlowCap", SupFanCap )
                   endif endif
        case   9 : T24N_2022BaseFanPwrIdx:Sys9( "FlowCap", SupFanCap )
        case  10 : 0.58 // CRAC
        case  11 : 0.58 // CRAH
        case 101 : if( IfValidAnd( IsBalancedVentSys > 0 ) ) // HRR Vent, no longer used
                   then 0.70 // For balanced
                   else 0.35 // For unbalanced (supply or exhaust)
                   endif
        case 201 : if( BaseSysNumOpt = "a" ) // ResBaseAirSys
                   then // System 7a = 3a
                     T24N_2022BaseFanPwrIdx:Sys7a( "FlowCap", SupFanCap )
                   else if( BaseSysNumOpt = "b" )
                   then // System 7b = 3b
                     T24N_2022BaseFanPwrIdx:Sys7b( "FlowCap", SupFanCap )
                   else // System 7c = 3c
                     T24N_2022BaseFanPwrIdx:Sys7c( "FlowCap", SupFanCap )
                   endif endif
        default : if( Type = "PVAV" )
                  then
                    T24N_2022BaseFanPwrIdx:Sys5( "FlowCap", SupFanCap )
                  else
                  if( Type = "VAV" )
                  then
                    T24N_2022BaseFanPwrIdx:Sys6( "FlowCap", SupFanCap )
                  else
                  if( Type = "SZVAVAC" )
                  then // System 7a 
                    T24N_2022BaseFanPwrIdx:Sys7a( "FlowCap", SupFanCap )
                  else
                  if( Type = "SZVAVHP" )
                  then // System 7b
                    T24N_2022BaseFanPwrIdx:Sys7b( "FlowCap", SupFanCap )
                  else
                  if( Type = "SZVAVDFHP" )
                  then // System 7c
                    T24N_2022BaseFanPwrIdx:Sys7c( "FlowCap", SupFanCap )
                  else
                  if( Type = "SZAC" )
                  then // System 3a or 3c SZDFHP, they are the same
                    T24N_2022BaseFanPwrIdx:Sys3a( "FlowCap", SupFanCap )
                  else
                  if( Type = "SZHP" )
                  then // System 3b
                    T24N_2022BaseFanPwrIdx:Sys3b( "FlowCap", SupFanCap )
                  else
                  if( Type = "SZHDFP" )
                  then // System 3c
                    T24N_2022BaseFanPwrIdx:Sys3c( "FlowCap", SupFanCap )
                  else 0 // All others use BHP method
                  endif endif endif endif endif
                  endif endif endif
      endswitch
    else // Rules for HRR ventilation
    if( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:BaseSysNum ) > 0 .AND.
        SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:ResVentEquipChkReq ) > 0 .AND. 
        SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:ResVentEquipIsAccessible ) = 0 )
    then // ResVentEquipChkReq applies, but is not checked, Std = Prop up to limit
         // Set limit here
      if( IfValidAnd( IsBalancedVentSys > 0 ) )
      then 0.70 / 2 // For balanced, per fan
      else 0.35 // For supply only
      endif
    else 0
    endif endif
ENDRULE
// Calculate baseline fan power allowance in kW
RULE NEW AirSys:BaseFanPwrAllowance
  DATATYPE
    Float
  LONGFORM
    BaselineFanPowerAllowance
  INPUTCLASS
    NotInput
  UNITS
    kW  
  ANNUAL
// For 2022, the *FanPwrAdj values have the units of kW
    if( BaseSysNum > 0 )
    then BaseFanPwrIdx * SupFanCap / 1000
    else 0
    endif
ENDRULE
// Add proposed fan power adjustments (a.k.a. PD credits), and in the case the standard has ERV,
// add ERV fan power allowance
RULE NEW AirSys:BaseFanPwrWithAdj
  DATATYPE
    Float
  LONGFORM
    BaselineFanPowerAllowance
  INPUTCLASS
    NotInput
  UNITS
    kW 
  ANNUAL
// For 2022, the *FanPwrAdj values have the units of kW
    if( BaseSysNum > 0 )
    then
      if( ( LabArea > 0 .AND.  Bldg:LabExhFlow > 10000 ) .OR. CommKitArea > 0 )
      then // Lab buildings w/ >10000 cfm exh and CommKit systems have separate exh fan power allowance
           // for exhaust,so only add TotNonExhSysFanPwrAdj. See ThrmlZn:ExhSysPwrIdx rule
        BaseFanPwrAllowance + TotNonExhSysFanPwrAdj
      else // All other cases, add TotSysFanPwrAdj + ERV adjustment, if applicable
        BaseFanPwrAllowance + TotSysFanPwrAdj + BaseERVPwrAdj 
      endif
    else 0
    endif
ENDRULE

// Adjust supply/return fan power ratios if standard has ERV but proposed does not have
// RetFanPwrRat > 0
RULE NEW AirSys:SupFanPwrRat
  ANNUAL
    if( BaseSysNum > 0 .AND. RetFanPwrRat = 0 .AND. PrescriptiveHtRcvryReq > 0 ) 
    then // Subtract BaseERVRetPwrAdj portion of fan power from supply fan
      Max( SupFanPwrRat - ( BaseERVRetPwrAdj / BaseFanPwrWithAdj ), 0 )
    else UNCHANGED
    endif
ENDRULE

RULE NEW AirSys:RetFanPwrRat
  ANNUAL
    if( BaseSysNum > 0 .AND. RetFanPwrRat = 0 .AND. PrescriptiveHtRcvryReq > 0 ) 
    then // Allocate balance of fan power ratio to return fan 
      Max( 1 - SupFanPwrRat - ReliefFanPwrRat - ExhFanPwrRat, 0 )
    else UNCHANGED
    endif
ENDRULE

// =========================== ZoneSystem ======================================
// Set baseline fan power modeling method
RULE NEW ZnSys:BaseFanModelingMthd
  DATATYPE
    Enumeration
  LONGFORM
    BaselineFanModelingMethod
  OPTION
    StaticPressure
    BrakeHorsePower
    PowerPerUnitFlow
  INPUTCLASS
    NotInput
  ANNUAL : T24N_2016
    UNDEFINED    
  ANNUAL
    if( BaseSysNum > 0 )
    then
      switch( BaseSysNum )
        case 1  : "PowerPerUnitFlow" // Res SZAC
        case 2  : "PowerPerUnitFlow" // Res FPFC
        case 3  : "PowerPerUnitFlow" // SZAC
        case 4  : "PowerPerUnitFlow" // SZHP
        case 9  : "PowerPerUnitFlow" // HV
        case 10 : "PowerPerUnitFlow" // CRAC
        case 11 : "PowerPerUnitFlow" // CRAH
        default : "BrakeHorsePower"  // All others
      endswitch 
    else UNDEFINED
    endif
ENDRULE
// Set baseline fan power index (W/cfm) for systems that use PowerPerUnitFlow method
RULE NEW ZnSys:BaseFanPwrIdx
  DATATYPE
    Float
  LONGFORM
    BaselineFanPowerIndex
  INPUTCLASS
    NotInput
  UNITS
    W/cfm
  ANNUAL : T24N_2016
    UNDEFINED    
  ANNUAL : T24N_2019
    if( BaseSysNum > 0 .AND. BaseFanModelingMthd = "PowerPerUnitFlow" )
    then
      switch( BaseSysNum )
        case  1 : if( Proj:ResBaseSysChange > 0 ) then 0.45 else 0.35 endif// Res SZAC
        case  2 : 0.35 // Res FPFC
        case  9 : 0.59 // HV
        case 10 : 0.81 // CRAC
        case 11 : 0.81 // CRAH
        default : 0    // All others use BHP method
      endswitch
    else
    if( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:BaseSysNum ) > 0 .AND.
        SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:ResVentEquipChkReq ) > 0 .AND. 
        SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:ResVentEquipIsAccessible ) = 0 )
    then // ResVentEquipChkReq applies, but is not checked, Std = Prop up to limit
         // Set limit here
      if( IfValidAnd( IsBalancedVentSys > 0 ) )
      then 0.70 // For balanced
      else 0.35 // For unbalanced (supply or exhaust)
      endif
    else UNDEFINED
    endif endif
  ANNUAL : T24N
    if( BaseSysNum > 0 .AND. BaseFanModelingMthd = "PowerPerUnitFlow" )
    then
      switch( BaseSysNum )
        case   1 : 0.45                                  // SZAC for Htl/Mtl
        case   2 : 0.35                                  // Res FPFC (no longer used)
        case   3 : if( AddClgToPropSys > 0 )            
                   then 0                                // PropNoClg SZAC system added
                   else T24N_2022BaseFanPwrIdx:Sys3a( "FlowCap", SupFanCap ) 
                   endif
        default  : 0    // All others use BHP method
      endswitch
    else
    if( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:BaseSysNum ) > 0 .AND.
        SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:ResVentEquipChkReq ) > 0 .AND. 
        SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:ResVentEquipIsAccessible ) = 0 )
    then // ResVentEquipChkReq applies, but is not checked, Std = Prop up to limit
         // Set limit here
      if( IfValidAnd( IsBalancedVentSys > 0 ) )
      then 0.70 // For balanced
      else 0.35 // For unbalanced (supply or exhaust)
      endif
    else UNDEFINED
    endif endif
ENDRULE
// Calculate baseline fan power allowance in kW
RULE NEW ZnSys:BaseFanPwrAllowance
  DATATYPE
    Float
  LONGFORM
    BaselineFanPowerAllowance
  INPUTCLASS
    NotInput
  UNITS
    kW
  ANNUAL : T24N_2016 T24N_2019
    UNDEFINED    
  ANNUAL : T24N
// For 2022, the *FanPwrAdj values have the units of kW
    if( BaseSysNum > 0 )
    then BaseFanPwrIdx * SupFanCap / 1000
    else 0
    endif
ENDRULE
// Add proposed fan power adjustments (a.k.a. PD credits), and in the case the standard has ERV,
// add ERV fan power allowance
RULE NEW ZnSys:BaseFanPwrWithAdj
  DATATYPE
    Float
  LONGFORM
    BaselineFanPowerAllowance
  INPUTCLASS
    NotInput
  UNITS
    kW
  ANNUAL : T24N_2016 T24N_2019
    UNDEFINED    
  ANNUAL : T24N
// For 2022, the *FanPwrAdj values have the units of kW
    if( BaseSysNum > 0 )
    then
      if( ( LabArea > 0 .AND. Bldg:LabExhFlow > 10000 ) .OR. CommKitArea > 0 )
      then // Lab buildings w/ >10000 cfm exh and CommKit systems have separate exh fan power allowance
           // for exhaust,so only add TotNonExhSysFanPwrAdj. See ThrmlZn:ExhSysPwrIdx rule
        BaseFanPwrAllowance + TotNonExhSysFanPwrAdj
      else
;      if( BaseSysNum = 1 )
;      then // ResZnSystem
;          //TotNonSysFanPwrAdj only includes credit for MERVGTE16PDAdj. 
;          // FullyDuctedExhPDAdj added to ExhFanBHP. See Ticket 2542
;          BaseFanPwrAllowance + TotNonExhSysFanPwrAdj
;      else // All other cases, add TotSysFanPwrAdj + ERV adjustment, if applicable
        BaseFanPwrAllowance + TotSysFanPwrAdj + BaseERVPwrAdj 
      endif
    else 0
    endif
ENDRULE

// ********** HRR Fan Power Adjustment ***************************************
// T24N_2019-2-0 RC rule for adjusting HRR zonal ventilation power
RULE NEW AirSys:HRRFanPwrAdj
  DATATYPE
    Float
  LONGFORM
    HighRiseResidentialFanPowerAdjustment
  HELP
    "The fan power adjustment for HERS fan power verification."
  DEFAULT
    1.0
;    if( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:ResVentEquipChkReq ) > 0 .AND.
;        Proj:HRRVentSysChange > 0 )
;    then 
;      if( HERSFanPwrTested = 0 .AND. ResVentEquipHasFID = 0 )
;      then 1.0 + Proj:HERSFanPwrTestAdj + Proj:HERSFIDAdj // = 1.15
;      else // the following two options aren't currently used
;      if( HERSFanPwrTested = 0 .AND. ResVentEquipHasFID > 0 )
;      then 1.0 + Proj:HERSFanPwrTestAdj // = 1.05
;      else  
;      if( HERSFanPwrTested > 0 .AND. ResVentEquipHasFID = 0 )
;      then 1.0 + Proj:HERSFIDAdj // = 1.10
;      else 1.0 // No adjustment
;      endif endif endif
;   else
;   if( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:HRRVentSysRulesApply ) > 0 )
;   then // HRR exhaust systems
;     1.0 + Proj:HERSFanPwrTestAdj // = 1.05
;   else 1.0
;   endif endif
ENDRULE
RULE NEW ZnSys:HRRFanPwrAdj
  DATATYPE
    Float
  LONGFORM
    HighRiseResidentialFanPowerAdjustment
  HELP
    "The fan power adjustment for HERS fan power verification."
  DEFAULT
    1.0
;    if( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:ResVentEquipChkReq ) > 0 .AND.
;        Proj:HRRVentSysChange > 0 )
;    then 
;      if( HERSFanPwrTested = 0 .AND. ResVentEquipHasFID = 0 )
;      then 1.0 + Proj:HERSFanPwrTestAdj + Proj:HERSFIDAdj // = 1.15
;      else // the following two options aren't currently used
;      if( HERSFanPwrTested = 0 .AND. ResVentEquipHasFID > 0 )
;      then 1.0 + Proj:HERSFanPwrTestAdj // = 1.05
;      else  
;      if( HERSFanPwrTested > 0 .AND. ResVentEquipHasFID = 0 )
;      then 1.0 + Proj:HERSFIDAdj // = 1.10
;      else 1.0 // No adjustment
;      endif endif endif
;   else
;   if( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:HRRVentSysRulesApply ) > 0 )
;   then // HRR exhaust systems
;     1.0 + Proj:HERSFanPwrTestAdj // = 1.05
;   else 1.0
;   endif endif
ENDRULE

// ********** Fan System Modeling Method ***************************************
RULE Fan:ModelingMthd
  DESCRIPTION
    "The method used to describe the design power consumption of the fan."  
  HELP
    "Software commonly models fans in three ways. The simple method is for the 
     user to enter the electric power per unit of flow (W/cfm). This method is 
     commonly used for unitary equipment and other small fan systems. A more 
     detailed method is to model the fan as a system whereby the static pressure, 
     fan efficiency, part-load curve, and motor efficiency are specified at 
     design conditions. A third method is to specify brake horsepower at design 
     conditions instead of fan efficiency and static pressure. This is a variation 
     of the second method whereby brake horsepower is specified in lieu of static 
     pressure and fan efficiency. The latter two methods are commonly used for 
     VAV and other larger fan systems." 
  REFERENCE 
    NACM Section 5.7.3.2    
  INPUTCLASS
    Default
//OPTION - Defined in BEMEnums, shown here for reference
//  StaticPressure
//  BrakeHorsePower
//  PowerPerUnitFlow
//DEFAULT : T24N_2019
//  "BrakeHorsePower"
//DEFAULT : T24N
//  "PowerPerUnitFlow"
  ANNUAL
    if( BaseSysNum > 0 )
    then "PowerPerUnitFlow"
    else z:ModelingMthd  
    endif
ENDRULE

// ********** Fan Power Index *******************************************
RULE Fan:PwrIdx
  DESCRIPTION
    "The fan power (Watts) per unit of flow (cfm)."
  HELP
    "This is a required input if ModelingMethod = 'PowerPerUnitFlow'. However, 
     this modeling method is not currently supported for compliance analysis.
     This value is calculated from other inputs and shown for reference only." 
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    Default
  MINIMUM
    0
  COMMONMINIMUM
    0.1
  COMMONMAXIMUM
    1.1
  UNITS 
    W/cfm 
  REPORTPRECISION
    3
  RESETS
    ResetThisWhenTheFollowingIsModified
      Fan:ModelingMthd
  DEFAULT
    if( Proj:AutoEffInput = 1 .AND. ModelingMthd = "PowerPerUnitFlow" ) 
    then // For PROPOSED AutoEfficiency input only
      if( ParentComp = "AirSys" )
      then
        if( AirSys:IsExhSys > 0 )
        then UNCHANGED // See rule below
        else 
        if( IfValidAnd( AirSys:SubType = "CRAC" ) .OR.
            IfValidAnd( AirSys:SubType = "CRAH" ) )
        then 0.58
        else
        if( IfValidAnd( AirSys:SupFanCap > 0 ) )
        then
          switch( AirSys:Type )
            case  "SZAC"        : T24N_2022BaseFanPwrIdx:Sys3a( "FlowCap", AirSys:SupFanCap )
            case  "SZHP"        : T24N_2022BaseFanPwrIdx:Sys3b( "FlowCap", AirSys:SupFanCap )
            case  "SZDFHP"      : T24N_2022BaseFanPwrIdx:Sys3c( "FlowCap", AirSys:SupFanCap )
            case  "PVAV"        : if( AirSeg:Type = "Supply" )
                                  then 
                                    if( IfValidAnd( AirSys:RetFanCap > 0 ) )
                                    then T24N_2022BaseFanPwrIdx:Sys5( "FlowCap", AirSys:SupFanCap ) * 0.5
                                    else T24N_2022BaseFanPwrIdx:Sys5( "FlowCap", AirSys:SupFanCap )
                                    endif
                                  else 
                                  if( AirSeg:Type = "Return" ) 
                                  then T24N_2022BaseFanPwrIdx:Sys5( "FlowCap", AirSys:SupFanCap ) * 0.5
                                  else
                                  if( AirSeg:Type = "Relief" ) 
                                  then T24N_2022BaseFanPwrIdx:Sys5( "FlowCap", AirSys:SupFanCap ) * 0.25
                                  else 0.3
                                  endif endif endif
            case  "VAV"         : if( AirSeg:Type = "Supply" )
                                  then 
                                    if( IfValidAnd( AirSys:RetFanCap > 0 ) )
                                    then T24N_2022BaseFanPwrIdx:Sys6( "FlowCap", AirSys:SupFanCap ) * 0.5
                                    else T24N_2022BaseFanPwrIdx:Sys6( "FlowCap", AirSys:SupFanCap )
                                    endif
                                  else 
                                  if( AirSeg:Type = "Return" ) 
                                  then T24N_2022BaseFanPwrIdx:Sys6( "FlowCap", AirSys:SupFanCap ) * 0.5
                                  else
                                  if( AirSeg:Type = "Relief" ) 
                                  then T24N_2022BaseFanPwrIdx:Sys6( "FlowCap", AirSys:SupFanCap ) * 0.25
                                  else 0.3
                                  endif endif endif
            case  "SZVAVAC"     : if( AirSeg:Type = "Supply" )
                                  then 
                                    if( IfValidAnd( AirSys:RetFanCap > 0 ) )
                                    then T24N_2022BaseFanPwrIdx:Sys7a( "FlowCap", AirSys:SupFanCap ) * 0.5
                                    else T24N_2022BaseFanPwrIdx:Sys7a( "FlowCap", AirSys:SupFanCap )
                                    endif
                                  else 
                                  if( AirSeg:Type = "Return" ) 
                                  then T24N_2022BaseFanPwrIdx:Sys7a( "FlowCap", AirSys:SupFanCap ) * 0.5
                                  else 0.3
                                  endif endif
            case  "SZVAVHP"     : if( AirSeg:Type = "Supply" )
                                  then 
                                    if( IfValidAnd( AirSys:RetFanCap > 0 ) )
                                    then T24N_2022BaseFanPwrIdx:Sys7b( "FlowCap", AirSys:SupFanCap ) * 0.5
                                    else T24N_2022BaseFanPwrIdx:Sys7b( "FlowCap", AirSys:SupFanCap )
                                    endif
                                  else 
                                  if( AirSeg:Type = "Return" ) 
                                  then T24N_2022BaseFanPwrIdx:Sys7b( "FlowCap", AirSys:SupFanCap ) * 0.5
                                  else 0.3
                                  endif endif
            case  "SZVAVDFHP"   : if( AirSeg:Type = "Supply" )
                                  then 
                                    if( IfValidAnd( AirSys:RetFanCap > 0 ) )
                                    then T24N_2022BaseFanPwrIdx:Sys7c( "FlowCap", AirSys:SupFanCap ) * 0.5
                                    else T24N_2022BaseFanPwrIdx:Sys7c( "FlowCap", AirSys:SupFanCap )
                                    endif
                                  else 
                                  if( AirSeg:Type = "Return" ) 
                                  then T24N_2022BaseFanPwrIdx:Sys7c( "FlowCap", AirSys:SupFanCap ) * 0.5
                                  else 0.3
                                  endif endif
            case  "HV"          : if( AirSeg:Type = "Supply" )
                                  then 
                                    if( IfValidAnd( AirSys:RetFanCap > 0 ) )
                                    then T24N_2022BaseFanPwrIdx:Sys9( "FlowCap", AirSys:SupFanCap ) * 0.5
                                    else T24N_2022BaseFanPwrIdx:Sys9( "FlowCap", AirSys:SupFanCap )
                                    endif
                                  else 
                                  if( AirSeg:Type = "Return" ) 
                                  then T24N_2022BaseFanPwrIdx:Sys9( "FlowCap", AirSys:SupFanCap ) * 0.5
                                  else 0.3
                                  endif endif
            default             : 0.8 // All other default
          endswitch
        else 0.8 // All other AirSys
        endif endif endif
      else
      if( ParentComp = "ZnSys" )
      then
        if( ZnSys:IsExhSys > 0 )
        then UNCHANGED // See rule below
        else
        if( IfValidAnd( ZnSys:SupFanCap > 0 ) )
        then 
         switch( ZnSys:Type )
            case  "SZAC"        : if( ZnSys:IsResSys > 0 )
                                  then 0.45
                                  else T24N_2022BaseFanPwrIdx:Sys3a( "FlowCap", ZnSys:SupFanCap )
                                  endif
            case  "SZHP"        : T24N_2022BaseFanPwrIdx:Sys3b( "FlowCap", ZnSys:SupFanCap )
            case  "SZDFHP"      : T24N_2022BaseFanPwrIdx:Sys3c( "FlowCap", ZnSys:SupFanCap )
            default : 0.45
          endswitch
        else 0.35 // All other ZnSys
        endif endif
      else  UNCHANGED
      endif endif
    else
    if( ModelingMthd = "BrakeHorsePower" .AND.
        IfValidAnd( MtrBHP >= 0 ) .AND.
        IfValidAnd( FlowEff >= 0 ) .AND.
        IfValidAnd( FlowCap > 0 ) )
    then MtrBHP * FlowEff / FlowCap / ( 0.1175 / 745.6 )
    else
    if( ModelingMthd = "StaticPressure" .AND.
        IfValidAnd( FlowCap > 0 ) .AND. 
        IfValidAnd( TotStaticPress > 0 ) .AND. 
        IfValidAnd( FlowEff > 0 ) )
    then FlowCap * TotStaticPress * ( 0.1175 /  745.6 ) / FlowEff
    else UNCHANGED
    endif endif endif 
  SIZING
    if( BaseSysNum > 0 )
    then UNDEFINED // See ANNUAL rule
    else
    if( ParentComp = "AirSys" )
    then
      if( IfValidAnd( AirSys:IsPropVentOnlySys > 0 ) )
      then // Is PropVentOnlyAirSys created by rules
        if( IfValidAnd( AirSys:PropVentOnlyZnSysType = "Balanced" ) .OR.
            IfValidAnd( AirSys:PropVentOnlyZnSysType = "HeatRecovery" ) )
        then // IsBalanced, split fan power between suppy/return
          PropVentOnlyZnSysRef:RtdPwrIdx * ValidOr( AirSys:HRRFanPwrAdj, 1 ) / 2
        else 
        if( IfValidAnd( AirSys:PropVentOnlyZnSysType = "SupplyOnly" ) .AND.
            AirSeg:Type = "Supply" )
        then // Is SupplyOnly, do not split fan power
          PropVentOnlyZnSysRef:RtdPwrIdx * ValidOr( AirSys:HRRFanPwrAdj, 1 )
        else 0 // Is return fan for SupplyOnly, set power to 0
        endif endif
      else
      if( IfValidAnd( PwrIdx > 0 ) )
      then // Apply HRR adjustment if applicable
        PwrIdx * ValidOr( AirSys:HRRFanPwrAdj, 1 )
      else UNCHANGED
      endif endif
    else
    if( ParentComp = "ZnSys" .AND. 
        IfValidAnd( PwrIdx > 0 ) )
    then // Apply HRR adjustment if applicable
      PwrIdx * ValidOr( ZnSys:HRRFanPwrAdj, 1 )
    else // TrmlUnit and other fans
      PwrIdx
    endif endif endif
  ANNUAL
    if( BaseSysNum > 0 .AND. ParentComp = "AirSys" )
    then
      if( AirSeg:Type = "Supply" .AND. IfValidAnd( AirSys:SupFanCap > 0 ) )
      then // Is a supply fan
        if( BaseSysNum > 100 .AND. BaseSysNum < 200 )
        then
          if( AirSys:IsBalancedVentSys > 0 )
          then // Is balanced, split power evenly between supply/exhaust fans
            AirSys:BaseFanPwrWithAdj * 1000 / 2 / AirSys:SupFanCap
          else // Is supply only, assign power to supply fan
            AirSys:BaseFanPwrWithAdj * 1000 / AirSys:SupFanCap
          endif
        else
        if( AirSys:LabArea > 0 )
        then // Labs
          if( Bldg:LabExhFlow > 10000 )
          then // Trigger lab exhaust fan power limit per 140.9(c)3, supply gets total allowance
            AirSys:BaseFanPwrWithAdj * 1000 * ( 1 - AirSys:RetFanPwrRat - AirSys:ReliefFanPwrRat ) / AirSys:SupFanCap
          else // Use 140.4(c) BHP allowance rules
            AirSys:BaseFanPwrWithAdj * 1000 * ( 1 - AirSys:RetFanPwrRat - AirSys:ReliefFanPwrRat - AirSys:ExhFanPwrRat  ) / AirSys:SupFanCap
          endif
        else
        if( AirSys:CommKitArea > 0 )
        then // CommKit exhaust has its own allowances, exhaust ratio not included
            AirSys:BaseFanPwrWithAdj * 1000 * ( 1 - AirSys:RetFanPwrRat - AirSys:ReliefFanPwrRat ) / AirSys:SupFanCap
        else // Allowance + adjustment x (1 - Ret + Relief + Exh proposed fan power ratios) 
            AirSys:BaseFanPwrWithAdj * 1000 * ( 1 - AirSys:RetFanPwrRat - AirSys:ReliefFanPwrRat - AirSys:ExhFanPwrRat  ) / AirSys:SupFanCap
        endif endif endif
      else UNCHANGED // AirSeg:Type = Return, Relief, and Exhaust handled by separate rules
      endif 
    else
    if( BaseSysNum > 0 .AND. ParentComp = "ZnSys" )
    then
      if( BaseSysNum = 3 .AND. ZnSys:AddClgToPropSys > 0 )
      then // NonRes PropNoClg system, no fan power
        UNCHANGED
      else
      if( ZnSys:LabArea > 0 )
      then // Labs
        if( Bldg:LabExhFlow > 10000 )
        then // Trigger lab exhaust fan power limit per 140.9(c)3
          ZnSys:BaseFanPwrWithAdj * 1000 * ( 1 - ZnSys:RetFanPwrRat - ZnSys:ReliefFanPwrRat ) / ZnSys:SupFanCap
        else // Use 140.4(c) BHP allowance rules
            ZnSys:BaseFanPwrWithAdj * 1000 * ( 1 - ZnSys:RetFanPwrRat - ZnSys:ReliefFanPwrRat - ZnSys:ExhFanPwrRat  ) / ZnSys:SupFanCap
        endif
      else
      if( ZnSys:CommKitArea > 0 )
      then // CommKit exhaust has its own allowances, exhaust ratio not included
        ZnSys:BaseFanPwrWithAdj * 1000 * ( 1 - ZnSys:RetFanPwrRat - ZnSys:ReliefFanPwrRat ) / ZnSys:SupFanCap
      else
      if( BaseSysNum = 1 .OR. BaseSysNum = 2 )
      then // Res exhaust has its own allowances, supply gets total allowance
        ZnSys:BaseFanPwrWithAdj * 1000 / ZnSys:SupFanCap
      else // Allowance + adjustment x (1 - Ret - Relief + Exh proposed fan power ratios) 
        ZnSys:BaseFanPwrWithAdj * 1000 * ( 1 - ZnSys:RetFanPwrRat - ZnSys:ReliefFanPwrRat - ZnSys:ExhFanPwrRat  ) / ZnSys:SupFanCap
      endif endif endif endif
    else UNCHANGED 
    endif endif
ENDRULE

// Default PwrIdx for exhaust fans for AutoEffInput rules
RULE Fan:PwrIdx 
  DEFAULT
    if( Proj:AutoEffInput = 1 )
    then // For PROPOSED AutoEfficiency input only
      if( ParentComp = "ZnSys" )
      then
        if( ZnSys:IsHRRVentSys > 0 )
        then 0.3 // Exhaust ventilation system or 1/2 of balanced
        else
        if( ZnSys:IsExhSys > 0 .AND. ZnSys:IsVentOnlySys > 0 )
        then 0.58 // For Hotel/Motel
        else
        if( ZnSys:IsExhSys > 0 )
        then 
          if( ZnSys:LabArea > 0 )
          then // Is lab exhaust system
            if( IfValidAnd( ZnSys:ExhFiltersPwrAdj > 0 ) )
            then // Proposed exhaust system has ExhFilters, default to 0.85 per 140.9(c)3B
              0.85
            else // Proposed has no PD credits
              0.65
            endif
          else 0.2 // General default, ~ 1" static
          endif 
        else UNCHANGED
        endif endif endif
      else
      if( ParentComp = "AirSys" ) 
      then 
        if( AirSys:IsHRRVentSys > 0 )
        then 0.3 // Exhaust ventilation system or 1/2 of balanced
        else
        if( AirSys:IsExhSys > 0 .AND. AirSys:IsVentOnlySys > 0 )
        then 0.58 // For Hotel/Motel
        else
        if( AirSys:IsExhSys > 0  )
        then
          if( AirSys:LabArea > 0 )
          then // Is lab exhaust system
            if( IfValidAnd( AirSys:ExhFiltersPwrAdj > 0 ) )
            then // Proposed exhaust system has ExhFilters, default to 0.85 per 140.9(c)3B
              0.85
            else // Proposed has no PD credits
              0.65
            endif
          else 0.2 // General default, ~ 1" static
          endif
        else UNCHANGED
        endif endif endif
      else UNCHANGED
      endif endif
    else UNCHANGED
    endif
ENDRULE


// ********** Fan Efficiency ********************************************
// =========================== AirSystem =======================================
RULE AirSys:AirSeg:Fan:FlowEff
  DESCRIPTION
    "The efficiency of the fan at design conditions."  
  HELP
    "This efficiency term includes belt/drive losses, but does not include 
     motor losses. This is a required input if ModelingMethod = 'StaticPressure'." 
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    Default
  COMMONMINIMUM
    0.4
  COMMONMAXIMUM
    0.7
  MAXIMUM
    1.0
  REPORTPRECISION
    3  
  DEFAULT
    if( AirSeg:Type = "Supply" .OR. AirSeg:Type = "Return" )
    then 0.65
    else
    if( AirSeg:Type = "Relief" )
    then 
      if( IfValidAnd( FlowCap < 10000 ) )
      then 0.4
      else 0.5
      endif 
    else if( AirSys:IsExhSys > 0 )
    then
      if( AirSys:LabArea > 0 )
      then 0.62
      else if( AirSys:CommKitArea > 0 )
      then 0.5
      else 0.65
      endif endif
    else 0.65
    endif endif endif
  CHECKSIM
    if( BypassCheckSim > 0 )
    then UNCHANGED
    else
    if( ModelingMthd = "StaticPressure" .AND. LocalStatus( FlowEff ) = 0 )
    then 
      PostError("FlowEfficiency must be defined for fan '%s' if the StaticPressure 
                 fan power method is used", Name)
    else UNCHANGED
    endif endif  
  SIZING
    if( BaseSysNum > 0 )
    then 1.0 // Fan efficiency set to 1.0 for sizing
    else ValidOr( FlowEff, 0.65 )
    endif
  ANNUAL
    if( BaseSysNum > 0 )
    then
      if( AirSeg:Type = "Supply" )
      then 0.65
      else UNCHANGED
      endif
    else z:FlowEff 
    endif    
ENDRULE
// =========================== ZoneSystem ======================================
RULE ZnSys:Fan:FlowEff
  DEFAULT
    if( ZnSys:IsExhSys > 0 )
    then
      if( ZnSys:LabArea > 0 )
      then 0.62
      else if( ZnSys:CommKitArea > 0 )
      then 0.5
      else 0.65
      endif endif
    else 0.5
    endif
  CHECKSIM
    if( BypassCheckSim > 0 )
    then UNCHANGED
    else
    if( LocalStatus( FlowEff ) = 0 )
    then 
      PostError("FlowEff for fan '%s' must be defined for simulation", Name)
    else UNCHANGED
    endif endif
  SIZING
    if( BaseSysNum > 0 )
    then 1.0 // Fan efficiency set to 1.0 for sizing
    else FlowEff
    endif
  ANNUAL
    if( BaseSysNum > 0 )
    then 0.5 // Default assumption for baseline ZnSys fans  
    else z:FlowEff 
    endif
ENDRULE


// ********** Baseline Fan Mtr Size ********************************************
// For standard design using PwrIdx to describe fan power, which includes influence of MtrEff,
// determining the motor size and corresponding efficinecy is an iterative process. The
// rule steps below establish this iteration.
RULE NEW Fan:MtrBHPStart
  DATATYPE
    Float
  LONGFORM
    MotorBHPStart
  INPUTCLASS
    NotInput
  DEFAULT
    if( ModelingMthd = "PowerPerUnitFlow" .AND.
        IfValidAnd( PwrIdx > 0 ) .AND. 
        IfValidAnd( FlowCap > 0 ) )
    then FlowCap * PwrIdx / 745.6  
    else UNDEFINED
    endif
  ANNUAL
    if( BaseSysNum > 0 .AND. 
        ModelingMthd = "PowerPerUnitFlow" .AND.
        IfValidAnd( PwrIdx > 0 ) .AND. 
        IfValidAnd( FlowCap > 0 ) )
    then FlowCap * PwrIdx / 745.6  
    else UNCHANGED
    endif
ENDRULE
RULE NEW Fan:MtrHPIdxStart
  DATATYPE
    Integer
  LONGFORM
    MotorHPIndexStart
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrBHPStart > 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", MtrBHPStart)  
    else UNDEFINED
    endif
  ANNUAL
    if( IfValidAnd( MtrBHPStart > 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", MtrBHPStart)  
    else UNCHANGED
    endif
ENDRULE
RULE NEW Fan:MtrEffStart
  DATATYPE
    Float
  LONGFORM
    MotorEfficiencyStart
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrHPIdxStart > 0 ) )
    then StdElecMtrPerf:MotorEfficiency("MotorHPIndex", MtrHPIdxStart)  
    else UNDEFINED
    endif
  ANNUAL
    if( IfValidAnd( MtrHPIdxStart > 0 ) )
    then StdElecMtrPerf:MotorEfficiency("MotorHPIndex", MtrHPIdxStart)  
    else UNCHANGED
    endif
ENDRULE
RULE NEW Fan:MtrBHPGuess1
  DATATYPE
    Float
  LONGFORM
    MotorBHPGuess1
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrBHPStart > 0 ) .AND.
        IfValidAnd( MtrEffStart > 0 ) )
    then MtrBHPStart * MtrEffStart 
    else UNDEFINED
    endif
  ANNUAL
    if( IfValidAnd( MtrBHPStart > 0 ) .AND.
        IfValidAnd( MtrEffStart > 0 ) )
    then MtrBHPStart * MtrEffStart
    else UNCHANGED
    endif
ENDRULE
RULE NEW Fan:MtrHPIdxGuess1
  DATATYPE
    Integer
  LONGFORM
    MotorHPIndexGuess1
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrBHPGuess1 > 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", MtrBHPGuess1)  
    else UNDEFINED
    endif
  ANNUAL
    if( IfValidAnd( MtrBHPGuess1 > 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", MtrBHPGuess1)  
    else UNCHANGED
    endif
ENDRULE
RULE NEW Fan:MtrEffGuess1
  DATATYPE
    Float
  LONGFORM
    MotorEfficiencyGuess1
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrHPIdxGuess1 > 0 ) )
    then StdElecMtrPerf:MotorEfficiency("MotorHPIndex", MtrHPIdxGuess1)  
    else UNDEFINED
    endif
  ANNUAL
    if( IfValidAnd( MtrHPIdxGuess1 > 0 ) )
    then StdElecMtrPerf:MotorEfficiency("MotorHPIndex", MtrHPIdxGuess1)  
    else UNCHANGED
    endif
ENDRULE
RULE NEW Fan:MtrHPIdxFinal
  DATATYPE
    Integer
  LONGFORM
    MotorHPIndexFinal
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrHPIdxGuess1 > 0 ) )
    then MtrHPIdxGuess1 
    else UNDEFINED
    endif
  ANNUAL
    if( IfValidAnd( MtrHPIdxGuess1 > 0 ) )
    then MtrHPIdxGuess1
    else UNCHANGED
    endif
ENDRULE
RULE NEW Fan:MtrEffFinal
  DATATYPE
    Float
  LONGFORM
    MotorEfficiencyFinal
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrEffGuess1 > 0 ) )
    then MtrEffGuess1
    else UNDEFINED
    endif
  ANNUAL
    if( IfValidAnd( MtrEffGuess1 > 0 ) )
    then MtrEffGuess1
    else UNCHANGED
    endif
ENDRULE


// ********** Fan Motor Horsepower *************************************
RULE Fan:MtrHP
  DESCRIPTION
    "The motor nameplate horsepower of the fan."  
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    CondRequired
  UNITS 
    hp
  MINIMUM
    0
  COMMONMINIMUM
    0.06
  COMMONMAXIMUM
    200 
  REPORTPRECISION
    3
  DEFAULT
    if( Proj:AutoEffInput = 1 )
    then // For PROPOSED AutoEfficiency input only
      // Find next largest motor size in Std motor table based on
      // user-input, auto-calculated MtrBHP, or PwrIdx
      if( ModelingMthd = "PowerPerUnitFlow" .AND.
          IfValidAnd( MtrHPIdxFinal > 0 ) )
      then StdElecMtrPerf:MotorHPValue("MotorHPIndex", MtrHPIdxFinal)  
      else
      if( ModelingMthd = "StaticPressure" .AND.
          IfValidAnd( FlowCap > 0 ) .AND. 
          IfValidAnd( TotStaticPress > 0 ) .AND. 
          IfValidAnd( FlowEff > 0 ) )
      then
        StdElecMtrSize:MotorHPValue("InputMotorHP", FlowCap * TotStaticPress * ( 0.1175 /  745.6 ) / FlowEff )
      else 
      if( IfValidAnd( MtrBHP > 0 ) )
      then StdElecMtrSize:MotorHPValue("InputMotorHP", MtrBHP)
      else UNCHANGED
      endif endif endif
    else UNCHANGED
    endif  
  CHECKSIM
    if( IfValidAnd( ParentComp = "AirSys" ) .OR. 
        IfValidAnd( ParentComp = "TrmlUnit" ) )
    then
      if( IfValidAnd( MtrHP > 0 ) = 0 .AND.
          IfValidAnd( AirSys:BypassCheckSim = 0 ) )
      then // User is required to enter gross capacity
        PostError("Fan '%s' does not have Motor HP defined.", Name )
      else UNCHANGED
      endif
    else 
    if( IfValidAnd( MtrHP > 0 ) = 0 .AND.
        IfValidAnd( ZnSys:BypassCheckSim = 0 ) )
    then // User is required to enter gross capacity
      PostError("Fan '%s' does not have Motor HP defined.", Name )
    else UNCHANGED
    endif endif
  ANNUAL
    if( BaseSysNum > 0 .AND.
        IfValidAnd( MtrHPIdxFinal > 0 ) )
    then StdElecMtrPerf:MotorHPValue("MotorHPIndex", MtrHPIdxFinal)  
    else UNCHANGED
    endif
ENDRULE

// ********** Fan Motor Efficiency *****************************************************
RULE NEW Fan:MtrPerfIdx
  DATATYPE
    Integer
  LONGFORM
    MotorPerformanceIndex
  DESCRIPTION
    "The index of motor size according to a list of standard sizes."
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrHP > 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", MtrHP)
    else UNDEFINED
    endif
  ANNUAL
    if( BaseSysNum > 0 .AND. IfValidAnd( MtrHP > 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", MtrHP)
    else UNCHANGED
    endif
ENDRULE
RULE Fan:MtrEff
  DESCRIPTION
    "Indicates how well the motor converts electrical power into mechanical power
     and is defined as output power divided by input power expressed as a ratio."
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    CondRequired
  MINIMUM
    0.4
  COMMONMINIMUM
    0.6
  COMMONMAXIMUM
    0.98
  REPORTPRECISION
    3  
  DEFAULT 
    if( Proj:AutoEffInput = 1 .AND. IfValidAnd( MtrPerfIdx > 0 ) )
    then // For PROPOSED AutoEfficiency input only
      StdElecMtrPerf:MotorEfficiency("MotorHPIndex", MtrPerfIdx)   
    else UNDEFINED
    endif 
  CHECKSIM
    if( IfValidAnd( ParentComp = "AirSys" ) .OR. 
        IfValidAnd( ParentComp = "TrmlUnit" ) )
    then
      if( IfValidAnd( MtrEff > 0 ) = 0 .AND.
          IfValidAnd( AirSys:BypassCheckSim = 0 ) )
      then // User is required to enter gross capacity
        PostError("Fan '%s' does not have Motor Efficiency defined.", Name )
      else UNCHANGED
      endif
    else 
    if( IfValidAnd( MtrEff > 0 ) = 0 .AND.
        IfValidAnd( ZnSys:BypassCheckSim = 0 ) )
    then // User is required to enter gross capacity
      PostError("Fan '%s' does not have Motor Efficiency defined.", Name )
    else UNCHANGED
    endif endif
  SIZING
    if( BaseSysNum > 0 )
    then 1.0 // Fan power for sizing is set to 0
    else ValidOr( MtrEff, 0.855 )
    endif
  ANNUAL
    if( BaseSysNum > 0 .AND. IfValidAnd( MtrPerfIdx > 0 ) )
    then StdElecMtrPerf:MotorEfficiency("MotorHPIndex", MtrPerfIdx)   
    else UNCHANGED
    endif
ENDRULE


// ********** Proposed Minimum Fan Brake Horspower ***************************
// Calculate the minimum allowed MtrBHP per NACM rules
// Motor indices, based on the list of standard motor sizes
RULE NEW Fan:MtrHPIdx_i
  DATATYPE
    Integer
  LONGFORM
    MotorHPIndex_i
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrHP > 0 ) )
    then // Look up index of MtrHP in standard motor size table. If input is 
         // not equal to Std motor size, the table look-up will return index 
         // of next largest Std size
      StdElecMtrSize:MotorHPIndex("InputMotorHP", MtrHP)
    else UNDEFINED
    endif
ENDRULE
// Determine index of next motor size below 
RULE NEW Fan:MtrHPIdx_iminus1
  DATATYPE
    Integer
  LONGFORM
    MotorHPIndex_iminus1
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrHPIdx_i > 1 ) )
    then MtrHPIdx_i - 1
    else 1
    endif
ENDRULE
RULE NEW Fan:MinMtrBHP
  DATATYPE
    Float
  LONGFORM
    MinimumMotorBHP
  DESCRIPTION
    "The minimum allowed MtrBHP used in the Proposed model simulation based on
     user specified MtrHP."
  HELP
    "The minimum Proposed model MtrBHP is Max(User MtrBHP, 95% x MHPi-1)"
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrHP >= 0.083 ) .AND. // Only applicable to motors >= 1/12 hp
        IfValidAnd( MtrBHP > 0 ) .AND. 
        LocalStatus( MtrHPIdx_iminus1 ) > 0 )
    then StdElecMtrPerf:MotorHPValue("MotorHPIndex", MtrHPIdx_iminus1) * 0.95
    else UNDEFINED
    endif
ENDRULE


// ********** Fan Brake Horspower ***************************************
RULE Fan:MtrBHP
  DESCRIPTION
    "The design motor shaft brake horsepower of the fan."  
  HELP
    "The motor brake horse power is the power at the motor shaft, including fan
     and drive efficiencies.
     This is a required input if ModelingMethod = 'BrakeHorsePower'." 
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    CondRequired
  UNITS 
    hp
  MINIMUM
    0
  COMMONMINIMUM
    0.01
  COMMONMAXIMUM
    200
  REPORTPRECISION
    3
  RESETS
    ResetThisWhenTheFollowingIsModified
      Fan:ModelingMthd
  DEFAULT
    if( Proj:AutoEffInput = 1 .AND. IfValidAnd( ModelingMthd = "BrakeHorsePower" ) )
    then 
      if( ParentComp = "AirSys" .AND.
          IfValidAnd( FlowCap > 0 ) )
      then // Default based on typical baseline BHP allowance
        if( SysType = "PVAV" .OR. SysType = "VAV" )
        then 0.0013 * FlowCap
        else 0.00094 * FlowCap
        endif
      else
      if( ParentComp = "ZnSys" .AND.
          IfValidAnd( FlowCap > 0 ) )
      then // Default based on typical baseline ZnSys PwrIdx
        if( IfValidAnd( ZnSys:IsResSys > 0 ) .AND. 
            Proj:ResBaseSysChange > 0 ) 
        then 0.45 * FlowCap * 0.855 / 745.6 // Res SZAC
        else 0.35 * FlowCap * 0.855 / 745.6
        endif
      else UNCHANGED
      endif endif
    else
    // Calculated from TotStaticPress
    if( ModelingMthd = "StaticPressure" .AND.
        IfValidAnd( FlowCap > 0 ) .AND. 
        IfValidAnd( TotStaticPress > 0 ) .AND. 
        IfValidAnd( FlowEff > 0 ) )
    then FlowCap * TotStaticPress * ( 0.1175 /  745.6 ) / FlowEff
    else
    // Calculated from PwrIdx
    if( ModelingMthd = "PowerPerUnitFlow" .AND.
        IfValidAnd( PwrIdx > 0 ) .AND. 
        IfValidAnd( FlowCap > 0 ) .AND.
        IfValidAnd( MtrEff > 0 ) ) 
    then PwrIdx * FlowCap * MtrEff / 745.6
    else UNCHANGED
    endif endif endif
  CHECKCODE
    if( BypassCheckCode > 0 )
    then UNCHANGED
    else
    if( IfValidAnd( MtrBHP > 0 ) = 0 .AND. ModelingMthd = "BrakeHorsePower" )
    then // MtrBHP is UNDEFINED or is 0
      PostError("MotorBHP is a required input for fan '%s' if ModelingMethod = 
                 'BrakeHorsePower'.", Name)   
    else
    if( IfValidAnd( MtrBHP < MinMtrBHP ) .AND.
        IfValidAnd( MtrHP > 0.75 ) .AND.
        IsNew > 0 .AND.
        IsHlthCare = 0 )
    then // User specified MtrBHP is less than ACM required BHP based on user
         // specified MtrHP (applies only to non-fractional hp motors)
      PostWarning("MotorBHP for fan '%s' is less than the ACM required value
                   for the user-specified MotorHP. The proposed MotorBHP will
                   be set to %.3f hp for compliance analysis.", Name, MinMtrBHP)
    else UNCHANGED
    endif endif endif
  SIZING
    if( BaseSysNum > 0 )
    then // Fan power for sizing is set to 0
      0
    else
    if( IfValidAnd( MtrBHP < MinMtrBHP ) .AND. 
        IfValidAnd( MtrHP > 0.75 ) .AND.
        IsNew > 0 .AND.
        IsHlthCare = 0 )
    then // Use NACM calculated MinMtrBHP
         // MinMtrBHP = 95% x MtrHPi-1, only applies to non-fractional HP motors
      MinMtrBHP 
    else UNCHANGED 
    endif endif
  ANNUAL
    if( BaseSysNum > 0 .AND. 
        LocalStatus( PwrIdx ) > 0 .AND. 
        LocalStatus( FlowCap ) > 0 .AND.
        LocalStatus( MtrEff ) > 0 ) 
    then PwrIdx * FlowCap * MtrEff / 745.6
    else UNCHANGED
    endif
ENDRULE
// Calculate normalized BHP for reference
RULE NEW Fan:MtrBHPIdx
  DATATYPE
    Float
  LONGFORM
    MotorBrakeHorsepowerIndex
  DESCRIPTION
    "Similar to the Fan:PowerIndex (Watt/cfm), the Fan:MotorBHPIndex is the MtrBHP
     divided by the fan flow (hp/1000cfm)."
  INPUTCLASS
    NotInput
  UNITS
    hp/1000cfm
  DEFAULT
    if( IfValidAnd( MtrBHP > 0 ) .AND. IfValidAnd( FlowCap > 0 ) ) 
    then MtrBHP / FlowCap * 1000
    else 0
    endif
  ANNUAL
    if( IfValidAnd( MtrBHP > 0 ) .AND. IfValidAnd( FlowCap > 0 ) ) 
    then MtrBHP / FlowCap * 1000
    else 0
    endif
ENDRULE

// ********** Motor Position *****************************************************
RULE Fan:MtrPos
  DESCRIPTION
    "The position of the supply fan motor relative to the cooling air stream."  
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    Default
  OPTION
    InAirStream
    NotInAirStream   
  DEFAULT
    "InAirStream"
  SIZING
    if( BaseSysNum > 0 )
    then "InAirStream"
    else MtrPos
    endif
  ANNUAL
    z:MtrPos
ENDRULE

// Calculated total fan efficiency
RULE Fan:TotEff
  DESCRIPTION
    "The total efficiency of the fan object, which is the product of the flow (fan) and 
     motor efficiency."
  INPUTCLASS
    NotInput
  REPORTPRECISION
    3  
  DEFAULT
    if( IfValidAnd( FlowEff >= 0 ) .AND. IfValidAnd( MtrEff > 0 ) )
    then FlowEff * MtrEff
    else UNDEFINED 
    endif 
  SIZING
    if( IfValidAnd( FlowEff >= 0 ) .AND. IfValidAnd( MtrEff > 0 ) )
    then FlowEff * MtrEff
    else UNDEFINED
    endif
  ANNUAL
    if( IfValidAnd( FlowEff >= 0 ) .AND. IfValidAnd( MtrEff > 0 ) )
    then FlowEff * MtrEff
    else UNDEFINED
    endif
ENDRULE


// -----------------------------------------------------------------------------
// TotStaticPress is needed for simulation, so it is calculated for other methods
// For reference:
// ---- MtrBHP ----
// Pfan_mtr (W) = 0.1175 * Qfan(CFM) * dP(inH2O) / ( Eff_fan * Eff_drive * Eff_motor )
// Pfan_mtr (W) = 0.1175 * FlowCap * TotStatPress / ( FlowEff * MtrEff )
// Pfan_shaft (W) = 0.1175 * FlowCap * TotStatPress / FlowEff
// Pfan_shaft (bhp) = MtrBHP = ( 0.1175 / 745.6 ) * FlowCap * TotStatPress / FlowEff
// TotStatPress = MtrBHP * FlowEff / FlowCap / ( 0.1175 / 745.6 ) 
// ---- PwrIdx ----
// PwrIdx = (Pfan_mtr / FlowCap ) = 0.1175 * TotStatPress / ( FlowEff * MtrEff )
// TotStatPress = PwrIdx * ( FlowEff * MtrEff ) / 0.1175
RULE Fan:TotStaticPress
  DESCRIPTION
    "The total static pressure drop across the fan at design conditions."  
  HELP
    "The total static pressure (TSP) drop includes the pressure drop across 
     components both internal and external to an air handler. 
     This is a required input if ModelingMethod = 'StaticPressure'." 
  REFERENCE 
    NACM Section 5.7.3.2
    NACM Section 5.7.3.3
  INPUTCLASS
    CondRequired
  MINIMUM
    0.00001
  COMMONMINIMUM
    0.1
  COMMONMAXIMUM
    6.0  
  UNITS 
    inH2O 
  REPORTPRECISION
    3
  RESETS
    ResetThisWhenTheFollowingIsModified
      Fan:ModelingMthd
  DEFAULT
    if( ModelingMthd = "StaticPressure" .AND. Proj:AutoEffInput = 1 ) 
    then // For PROPOSED AutoEfficiency input only
      if( AirSys:IsExhSys > 0 .AND. AirSys:IsHRRVentSys = 0 )
      then 0.5 // See HVACSecondary-Fan-Exhaust.rule
      else
      if(ParentComp = "AirSys")
      then 
        if( AirSeg:Type = "Supply" )
        then
          if( AirSys:IsMultiZnSys = 0 )
            then // Is single-zone system
            if( IfValidAnd( FlowCap < 2000 ) )
            then 2.5
            else if( IfValidAnd( FlowCap < 10000 ) ) 
            then 3.0
            else 3.5
            endif endif
          // Is a multi-zone system
          else if( Parent3(TotStoryCnt) <= 6 )   
          then
            if( IfValidAnd( FlowCap < 2000 ) )
            then 3.0
            else if( IfValidAnd( FlowCap < 10000 ) ) 
            then 3.5
            else 4.0
            endif endif
          else if( IfValidAnd( FlowCap < 2000 ) )
          then 3.5
          else if( IfValidAnd( FlowCap < 10000 ) ) 
          then 4.0
          else 4.5
          endif endif endif endif
        else
        if( AirSeg:Type = "Return" )
        then
          if( IfValidAnd( FlowCap < 10000 ) )
          then 0.75
          else 1.0
          endif
        else
        if( AirSeg:Type = "Relief" )
        then
          if( IfValidAnd( FlowCap < 10000 ) )
          then 0.75
          else 1.0
          endif
        else UNCHANGED
        endif endif endif
      else
      if(ParentComp = "ZnSys")
      then 0.5
      else UNCHANGED
      endif endif endif
    else
    if( ModelingMthd = "BrakeHorsePower" .AND.
        IfValidAnd( MtrBHP >= 0 ) .AND.
        IfValidAnd( FlowEff >= 0 ) .AND.
        IfValidAnd( FlowCap > 0 ) )
    then // BrakehorsePower method
      MtrBHP * FlowEff / FlowCap / ( 0.1175 / 745.6 )
    else // PowerPerUnitFlow method
    if( ModelingMthd = "PowerPerUnitFlow" .AND.
        IfValidAnd( PwrIdx > 0 ) .AND. 
        IfValidAnd( TotEff >= 0 ) )
    then PwrIdx * TotEff / 0.1175 
    else UNCHANGED 
    endif endif endif
  SIZING
    if( BaseSysNum > 0 ) 
    then // Fan power is set to near 0 for sizing.
      0 // Was 0.00001 since previously using 0 could cause E+ sim failures. See GC 618 for background
    else    
    if( ModelingMthd = "BrakeHorsePower" .AND.
        IfValidAnd( MtrBHP >= 0 ) .AND.
        IfValidAnd( FlowEff >= 0 ) .AND.
        IfValidAnd( FlowCap > 0 ) )
    then // BrakehorsePower method
      MtrBHP * FlowEff / FlowCap / ( 0.1175 / 745.6 )
    else
    if( ModelingMthd = "StaticPressure" .AND.
        IfValidAnd( MtrBHP = MinMtrBHP ) .AND.
        IfValidAnd( FlowEff >= 0 ) .AND.
        IfValidAnd( FlowCap > 0 ) )
    then // NACM rule for 95% n-1 motor size not met when using StaticPressure method,
         // recalculate TotStaticPress based on revise MtrBHP
      MtrBHP * FlowEff / FlowCap / ( 0.1175 / 745.6 )
    else  
    if( IfValidAnd( PwrIdx > 0 ) .AND. 
        IfValidAnd( TotEff >= 0 ) )
    then // PowerPerUnitFlow method
      PwrIdx * TotEff / 0.1175 
    else UNCHANGED 
    endif endif endif endif
  ANNUAL
    if( BaseSysNum > 0 .AND.  
        IfValidAnd( PwrIdx > 0 ) .AND. 
        IfValidAnd( TotEff >= 0 ) )
    then // Is baseline calculate from PwrIdx
      PwrIdx * TotEff / 0.1175
    else
    if( ParentComp = "AirSys" )
    then
      if( IfValidAnd( AirSys:BaseFanPwrIdx > 0 ) )
      then // Std = Prop for HRR ventilation, set cap on fan power
        Min( PwrIdx, AirSys:BaseFanPwrIdx ) * TotEff / 0.1175
      else
        ValidOr( z:TotStaticPress, 0 )
      endif
    else
    if( ParentComp = "ZnSys" )
    then
      if( IfValidAnd( ZnSys:BaseFanPwrIdx > 0 ) )
      then // Std = Prop for HRR ventilation, set cap on fan power
        Min( PwrIdx, ZnSys:BaseFanPwrIdx ) * TotEff / 0.1175 
      else UNCHANGED
      endif
    else ValidOr( z:TotStaticPress, 0 )
    endif endif endif
ENDRULE

// ********** Supply Fan Part-Flow Power Curve *********************************
// =========================== AirSystem ======================================
RULE AirSys:AirSeg:Fan:Pwr_fPLRCrvRef
  DESCRIPTION
    "A part-load power curve which represents the percentage full-load power 
     draw of the supply fan as a function of the percentage full-load air flow."
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    Prescribed
  SIZING
    if( CtrlMthd = "ConstantVolume" )    
    then UNDEFINED
    else if( BaseSysNum > 0 )
    then // For Baseline systems
      if( CtrlMthd = "VariableSpeedDrive" ) 
      then
        if( SysType = "SZVAVAC" .OR. SysType = "SZVAVHP" .OR. SysType = "SZVAVDFHP" )
        then Rulelibrary(CrvCubic, "FanVSDPerfSpResetPwrRatio_fCFMRatio")
        else Rulelibrary(CrvCubic, "FanVSDGoodSpResetPwrRatio_fCFMRatio")
        endif
      else UNDEFINED
      endif
    // For Proposed systems
    else if( CtrlMthd = "VariableSpeedDrive" )
    then
      if( Parent ( Type ) = "Relief" )
      then Rulelibrary(CrvCubic, "FanVSDPwrRatio_fCFMRatio")
      else if( SysType = "SZVAVAC" .OR. SysType = "SZVAVHP" .OR. SysType = "SZVAVDFHP" )
      then Rulelibrary(CrvCubic, "FanVSDPerfSpResetPwrRatio_fCFMRatio")
      else if( AirSys:IsMultiZnSys = 1 )
        then 
        if( AirSys:CtrlSysType = "DDCToZone" )
        then Rulelibrary(CrvCubic, "FanVSDGoodSpResetPwrRatio_fCFMRatio")
        else Rulelibrary(CrvCubic, "FanVSDPwrRatio_fCFMRatio")
        endif
      else Rulelibrary(CrvCubic, "FanVSDPwrRatio_fCFMRatio")
      endif endif endif
    else if( Class = "Centrifugal" )
    then 
      if( CentType = "ForwardCurved" )
      then
        if( CtrlMthd = "InletVanes" .OR. CtrlMthd = "Dampers" )
        then Rulelibrary(CrvCubic, "FanFCVanesPwrRatio_fCFMRatio")
        else Rulelibrary(CrvCubic, "FanFCPwrRatio_fCFMRatio")
        endif
      else // Fan is AF or BI
        if( CtrlMthd = "InletVanes" .OR. CtrlMthd = "Dampers" )
        then Rulelibrary(CrvCubic, "FanAForBIVanesPwrRatio_fCFMRatio")
        else Rulelibrary(CrvCubic, "FanAForBIPwrRatio_fCFMRatio")
        endif
      endif
    else if( Class = "Axial" )
      then 
        if( CtrlMthd = "VariablePitchBlades" )
        then Rulelibrary(CrvCubic, "FanVaneAxVpPwrRatio_fCFMRatio")
        else Rulelibrary(CrvCubic, "FanLinearPwrRatio_fCFMRatio")
        endif
    else Rulelibrary(CrvCubic, "FanLinearPwrRatio_fCFMRatio") // Default 
    endif endif endif endif endif
  ANNUAL
    z:Pwr_fPLRCrvRef
ENDRULE

// =========================== ZoneSystem ======================================
RULE ZnSys:Fan:Pwr_fPLRCrvRef
  SIZING
    if( CtrlMthd = "ConstantVolume" .OR. HasSysFlowProp > 0 )    
    then UNDEFINED // Ticket 3166: Allow VSD to be modeled as TwoSpeed 
    else if( CtrlMthd = "VariableSpeedDrive" .OR. CtrlMthd = "TwoSpeed" )
    then Rulelibrary(CrvCubic, "FanVSDPwrRatio_fCFMRatio")  
    else UNDEFINED
    endif endif
  ANNUAL
    z:Pwr_fPLRCrvRef
ENDRULE


// Fan heat at design conditions
RULE NEW Fan:FanHtDsgn
  DATATYPE
   Float
  LONGFORM
    FanHeatDsgn
  DESCRIPTION
    "The amount of heat generated by the supply fan at design conditions."
  HELP
    "Used for reporting or to adjust baseline system coil capacities."
  INPUTCLASS
    NotInput
  UNITS
    Btu/hr
  ANNUAL
    if( IfValidAnd( MtrBHP > 0 ) .AND.
        IfValidAnd( MtrEff > 0 ) )
    then 
      if( MtrPos = "InAirStream" )
      then MtrBHP * 745.6 * 3.412 / MtrEff
      else MtrBHP * 745.6 * 3.412
      endif
    else 0
    endif
ENDRULE


// Set flag to indicate DuctLeakageAdjustment is required
// Does not apply to baseline
RULE NEW Fan:DuctLeakAdjReq
  DATATYPE
    Integer
  LONGFORM
    DuctLeakageAdjustmentRequired
  DESCRIPTION
    "A flag to indicate that the fan motor efficiency needs to be adjusted
     due to system duct leakage.  0 for no adjustment, 1 for penalty, 2 for
     credit."
  INPUTCLASS
    NotInput
  SIZING
    if( BaseSysNum > 0 )
    then 0
    else
      if( ParentComp = "AirSys" )
      then
        if( IfValidAnd( Parent2Valid( DuctLeakage ) > 0 ) )
        then 1
        else
        if( IfValidAnd( Parent2Valid( DuctLeakCredit ) > 0 ) )
        then 2
        else 0
        endif endif
      else if( ParentComp = "ZnSys" )
      then
        if( IfValidAnd( ParentValid( DuctLeakage ) > 0 ) )
        then 1       
        else
        if( IfValidAnd( ParentValid( DuctLeakCredit ) > 0 ) )
        then 2
        else 0
        endif endif
      else 0
      endif endif
    endif
  ANNUAL
    z:DuctLeakAdjReq
ENDRULE

// -----------------------------------------------------------------------------
// Use unmodified MtrEff for calculating all other parameters, then change the 
// annual value to penalize for duct leakage.
// Does not apply to baseline
RULE Fan:MtrEff
  ANNUAL
    if( DuctLeakAdjReq = 1 )
    then                // Increase fan power by 30% if DuctLeakage = 1 - divide efficiency by 1.3
      MtrEff / 1.3
    else
    if( DuctLeakAdjReq = 2 )
    then                // Decrease fan power by 14% of the difference from 100% if DuctLeakage = 2 
      1 - ( 1 - MtrEff ) * ( 1 - 0.14 )        
    else
      UNCHANGED
    endif endif
ENDRULE

// MotorEff, for reporting
RULE Fan:MtrEffRpt
  DESCRIPTION
    "The motor efficiency value to be used for reporting."
  INPUTCLASS
    NotInput
  REPORTPRECISION
    3  
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 )
    then
      if( IfValidAnd( MtrPerfIdx > 0 ) )
      then // Look-up MtrEff
        StdElecMtrPerf:MotorEfficiency("MotorHPIndex", MtrPerfIdx)   
      else 0
      endif
    else MtrEff
    endif
ENDRULE

// -----------------------------------------------------------------------------
// Use unmodified TotEff for calculating all other parameters, then change the 
// annual value to penalize for duct leakage.
// Does not apply to baseline
RULE Fan:TotEff
  DESCRIPTION
    "The total efficiency of the fan. It is the product of the flow (fan) and 
     motor efficiency, for simulation."
  ANNUAL
    if( IfValidAnd( FlowEff >= 0 ) .AND. IfValidAnd( MtrEff > 0 ) )
    then FlowEff * MtrEff
    else UNDEFINED
    endif
ENDRULE

