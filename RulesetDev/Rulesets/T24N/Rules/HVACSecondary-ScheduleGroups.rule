// HVAC Secondary Systems - Schedule Groups
//
// -------------------------------------------------------------------------
//  Copyright (c) 2012-2017, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------
//  

//  This rule file addresses the following building descriptors:

// Process areas served by system
// Computer room
RULE NEW AirSys:CompRmArea
  DATATYPE
    Float
  LONGFORM
    ComputerRoomArea
  INPUTCLASS 
    NotInput
  DEFAULT
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:CompRmAreaWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:CompRmAreaWithMult ) )
  SIZING
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:CompRmAreaWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:CompRmAreaWithMult ) )
ENDRULE
RULE NEW ZnSys:CompRmArea
  DATATYPE
    Float
  LONGFORM
    ComputerRoomArea
  INPUTCLASS 
    NotInput
  DEFAULT
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:CompRmAreaWithMult ),
              SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:CompRmAreaWithMult ) ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:CompRmAreaWithMult ) )
  SIZING
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:CompRmAreaWithMult ),
              SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:CompRmAreaWithMult ) ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:CompRmAreaWithMult ) )
ENDRULE
// Lab
RULE NEW AirSys:LabArea
  DATATYPE
    Float
  LONGFORM
    LaboratoryArea
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:LabAreaWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:LabAreaWithMult ),
          SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:LabAreaWithMult ) )
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:LabAreaWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:LabAreaWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:LabAreaWithMult ) )
    endif
ENDRULE
RULE NEW ZnSys:LabArea
  DATATYPE
    Float
  LONGFORM
    LaboratoryArea
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:LabAreaWithMult )
    else
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:LabAreaWithMult ),
              SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:LabAreaWithMult ) ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:LabAreaWithMult ) )
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:LabAreaWithMult )
    else
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:LabAreaWithMult ),
              SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:LabAreaWithMult ) ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:LabAreaWithMult ) )
    endif
ENDRULE
// Commerical kitchen
RULE NEW AirSys:CommKitArea
  DATATYPE
    Float
  LONGFORM
    CommercialKitchenArea
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:CommKitAreaWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:CommKitAreaWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:CommKitAreaWithMult ) )
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:CommKitAreaWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:CommKitAreaWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:CommKitAreaWithMult ) )
    endif
ENDRULE
RULE NEW ZnSys:CommKitArea
  DATATYPE
    Float
  LONGFORM
    CommercialKitchenArea
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:CommKitAreaWithMult )
    else
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:CommKitAreaWithMult ),
              SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:CommKitAreaWithMult ) ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:CommKitAreaWithMult ) )
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:CommKitAreaWithMult )
    else
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:CommKitAreaWithMult ),
              SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:CommKitAreaWithMult ) ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:CommKitAreaWithMult ) )
    endif
ENDRULE
// Parking Garage
RULE NEW AirSys:PrkgGarArea
  DATATYPE
    Float
  LONGFORM
    ParkingGarageArea
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:PrkgGarAreaWithMult )
    else 0
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:PrkgGarAreaWithMult )
    else 0
    endif
ENDRULE
RULE NEW ZnSys:PrkgGarArea
  DATATYPE
    Float
  LONGFORM
    ParkingGarageArea
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:PrkgGarAreaWithMult )
    else 0
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:PrkgGarAreaWithMult )
    else 0
    endif
ENDRULE
// Factory Area
RULE NEW AirSys:FactoryArea
  DATATYPE
    Float
  LONGFORM
    FactoryArea
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FactoryAreaWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FactoryAreaWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FactoryAreaWithMult ) )
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FactoryAreaWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FactoryAreaWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FactoryAreaWithMult ) )
    endif
ENDRULE
RULE NEW ZnSys:FactoryArea
  DATATYPE
    Float
  LONGFORM
    FactoryArea
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FactoryAreaWithMult )
    else
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FactoryAreaWithMult ),
              SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:FactoryAreaWithMult ) ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FactoryAreaWithMult ) )
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FactoryAreaWithMult )
    else
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FactoryAreaWithMult ),
              SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:FactoryAreaWithMult ) ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FactoryAreaWithMult ) )
    endif
ENDRULE
// 24 hour operations area
RULE NEW AirSys:Is24HrSys
  DATATYPE
    Float
  LONGFORM
    Is24HourSystem
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpArea24HrWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpArea24HrWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpArea24HrWithMult ) )
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpArea24HrWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpArea24HrWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpArea24HrWithMult ) )
    endif
ENDRULE
RULE NEW ZnSys:Is24HrSys
  DATATYPE
    Float
  LONGFORM
    Is24HourSystem
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpArea24HrWithMult )
    else
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpArea24HrWithMult ),
              SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:FuncGrpArea24HrWithMult ) ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpArea24HrWithMult ) )
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpArea24HrWithMult )
    else
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpArea24HrWithMult ),
              SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:FuncGrpArea24HrWithMult ) ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpArea24HrWithMult ) )
    endif
ENDRULE
RULE NEW AirSys:ProcArea
  DATATYPE
    Float
  LONGFORM
    ProcessArea
  INPUTCLASS 
    NotInput
  DEFAULT
    CompRmArea + LabArea + CommKitArea
  CHECKCODE
    if( ( CompRmArea > 0  .AND. ProcArea != CompRmArea ) .OR.
        ( LabArea > 0     .AND. ProcArea != LabArea  ) .OR.
        ( CommKitArea > 0 .AND. ProcArea != CommKitArea  ) )
    then
      PostError("AirSystem '%s' is serving different types of process spaces. This is not allowed.", Name)
    else 
      UNCHANGED
    endif
ENDRULE

// -----------  Function Groups Served by HVAC System --------------------------
// =========================== AirSystem =======================================
// Proposed AirSys can be defined to PriAirCondgSysRef[1] or VentSysRef, 
// so FuncGrpArea in SIZING_PROPOSED transform is determined using the Max of the two 
// possibilities.
// Baseline PriAirCondgSysRef[1] and VentSysRef are the same, so FuncGrpArea in
// BASELINESZING/BASELINED transform is determined using only the PriAirCondgSysRef[1].
RULE NEW AirSys:FuncGrpAreaAssembly
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaAssembly
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaAssemblyWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaAssemblyWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaAssemblyWithMult ) )
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaAssemblyWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaAssemblyWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaAssemblyWithMult ) )
    endif
ENDRULE 
RULE NEW AirSys:FuncGrpAreaData
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaData
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaDataWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaDataWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaDataWithMult ) )
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaDataWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaDataWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaDataWithMult ) )
    endif
ENDRULE 
RULE NEW AirSys:FuncGrpAreaHealth
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaHealth
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaHealthWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaHealthWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaHealthWithMult ) )
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaHealthWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaHealthWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaHealthWithMult ) )
    endif
ENDRULE 
RULE NEW AirSys:FuncGrpAreaLab
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaLab
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaLabWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaLabWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaLabWithMult ) )
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaLabWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaLabWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaLabWithMult ) )
    endif
ENDRULE 
RULE NEW AirSys:FuncGrpAreaManufacturing
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaManufacturing
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaManufacturingWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaManufacturingWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaManufacturingWithMult ) )
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaManufacturingWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaManufacturingWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaManufacturingWithMult ) )
    endif
ENDRULE 
RULE NEW AirSys:FuncGrpAreaOffice
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaOffice
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaOfficeWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaOfficeWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaOfficeWithMult ) )
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaOfficeWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaOfficeWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaOfficeWithMult ) )
    endif
ENDRULE  
RULE NEW AirSys:FuncGrpAreaParking
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaParking
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaParkingWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaParkingWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaParkingWithMult ) )
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaParkingWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaParkingWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaParkingWithMult ) )
    endif
ENDRULE  
RULE NEW AirSys:FuncGrpAreaResidentialCommon
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaResidentialCommon
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaResidentialCommonWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaResidentialCommonWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaResidentialCommonWithMult ) )
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaResidentialCommonWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaResidentialCommonWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaResidentialCommonWithMult ) )
    endif
ENDRULE  
RULE NEW AirSys:FuncGrpAreaResidentialLiving
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaResidentialLiving
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaResidentialLivingWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaResidentialLivingWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaResidentialLivingWithMult ) )
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaResidentialLivingWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaResidentialLivingWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaResidentialLivingWithMult ) )
    endif
ENDRULE 
RULE NEW AirSys:FuncGrpAreaRestaurant
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaRestaurant
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaRestaurantWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaRestaurantWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaRestaurantWithMult ) )
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaRestaurantWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaRestaurantWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaRestaurantWithMult ) )
    endif
ENDRULE 
RULE NEW AirSys:FuncGrpAreaRetail
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaRetail
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaRetailWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaRetailWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaRetailWithMult ) )
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaRetailWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaRetailWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaRetailWithMult ) )
    endif
ENDRULE 
RULE NEW AirSys:FuncGrpAreaSchool
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaSchool
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaSchoolWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaSchoolWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaSchoolWithMult ) )
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaSchoolWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaSchoolWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaSchoolWithMult ) )
    endif
ENDRULE
RULE NEW AirSys:FuncGrpAreaWarehouse
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaWarehouse
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaWarehouseWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaWarehouseWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaWarehouseWithMult ) )
    endif
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaWarehouseWithMult )
    else
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaWarehouseWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaWarehouseWithMult ) )
    endif
ENDRULE 

// =========================== ZoneSystem ======================================
// Proposed ZnSys can be defined to PriAirCondgSysRef[1], PriAirCondgSysRef[2], or 
// VentSysRef, so FuncGrpArea in SIZING_PROPOSED transform is determined using the Max 
// of all three possibilities.
// Baseline PriAirCondgSysRef[1] and VentSysRef are the same, so FuncGrpArea in
// BASELINESZING/BASELINED transform is determined using only the PriAirCondgSysRef[1].
RULE NEW ZnSys:FuncGrpAreaAssembly
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaAssembly
  INPUTCLASS 
    NotInput
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaAssemblyWithMult )
    else
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaAssemblyWithMult ),
             SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:FuncGrpAreaAssemblyWithMult ) ),
        Max( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaAssemblyWithMult ),
             SumRevRef( ThrmlZn:SimSysRef[1], ThrmlZn:FuncGrpAreaAssemblyWithMult ) ) )
    endif
ENDRULE 
RULE NEW ZnSys:FuncGrpAreaData
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaData
  INPUTCLASS 
    NotInput
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaDataWithMult )
    else
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaDataWithMult ),
             SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:FuncGrpAreaDataWithMult ) ),
        Max( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaDataWithMult ),
             SumRevRef( ThrmlZn:SimSysRef[1], ThrmlZn:FuncGrpAreaDataWithMult ) ) )
    endif
ENDRULE 
RULE NEW ZnSys:FuncGrpAreaHealth
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaHealth
  INPUTCLASS 
    NotInput
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaHealthWithMult )
    else
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaHealthWithMult ),
             SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:FuncGrpAreaHealthWithMult ) ),
        Max( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaHealthWithMult ),
             SumRevRef( ThrmlZn:SimSysRef[1], ThrmlZn:FuncGrpAreaHealthWithMult ) ) )
    endif
ENDRULE 
RULE NEW ZnSys:FuncGrpAreaLab
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaLab
  INPUTCLASS 
    NotInput
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaLabWithMult )
    else
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaLabWithMult ),
             SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:FuncGrpAreaLabWithMult ) ),
        Max( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaLabWithMult ),
             SumRevRef( ThrmlZn:SimSysRef[1], ThrmlZn:FuncGrpAreaLabWithMult ) ) )
    endif
ENDRULE 
RULE NEW ZnSys:FuncGrpAreaManufacturing
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaManufacturing
  INPUTCLASS 
    NotInput
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaManufacturingWithMult )
    else
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaManufacturingWithMult ),
             SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:FuncGrpAreaManufacturingWithMult ) ),
        Max( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaManufacturingWithMult ),
             SumRevRef( ThrmlZn:SimSysRef[1], ThrmlZn:FuncGrpAreaManufacturingWithMult ) ) )
    endif
ENDRULE 
RULE NEW ZnSys:FuncGrpAreaOffice
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaOffice
  INPUTCLASS 
    NotInput
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaOfficeWithMult )
    else
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaOfficeWithMult ),
             SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:FuncGrpAreaOfficeWithMult ) ),
        Max( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaOfficeWithMult ),
             SumRevRef( ThrmlZn:SimSysRef[1], ThrmlZn:FuncGrpAreaOfficeWithMult ) ) )
    endif
ENDRULE  
RULE NEW ZnSys:FuncGrpAreaParking
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaParking
  INPUTCLASS 
    NotInput
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaParkingWithMult )
    else
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaParkingWithMult ),
             SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:FuncGrpAreaParkingWithMult ) ),
        Max( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaParkingWithMult ),
             SumRevRef( ThrmlZn:SimSysRef[1], ThrmlZn:FuncGrpAreaParkingWithMult ) ) )
    endif
ENDRULE  
RULE NEW ZnSys:FuncGrpAreaResidentialCommon
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaResidentialCommon
  INPUTCLASS 
    NotInput
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaResidentialCommonWithMult )
    else
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaResidentialCommonWithMult ),
             SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:FuncGrpAreaResidentialCommonWithMult ) ),
        Max( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaResidentialCommonWithMult ),
             SumRevRef( ThrmlZn:SimSysRef[1], ThrmlZn:FuncGrpAreaResidentialCommonWithMult ) ) )
    endif
ENDRULE  
RULE NEW ZnSys:FuncGrpAreaResidentialLiving
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaResidentialLiving
  INPUTCLASS 
    NotInput
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaResidentialLivingWithMult )
    else
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaResidentialLivingWithMult ),
             SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:FuncGrpAreaResidentialLivingWithMult ) ),
        Max( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaResidentialLivingWithMult ),
             SumRevRef( ThrmlZn:SimSysRef[1], ThrmlZn:FuncGrpAreaResidentialLivingWithMult ) ) )
    endif
ENDRULE 
RULE NEW ZnSys:FuncGrpAreaRestaurant
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaRestaurant
  INPUTCLASS 
    NotInput
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaRestaurantWithMult )
    else
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaRestaurantWithMult ),
             SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:FuncGrpAreaRestaurantWithMult ) ),
        Max( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaRestaurantWithMult ),
             SumRevRef( ThrmlZn:SimSysRef[1], ThrmlZn:FuncGrpAreaRestaurantWithMult ) ) )
    endif
ENDRULE 
RULE NEW ZnSys:FuncGrpAreaRetail
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaRetail
  INPUTCLASS 
    NotInput
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaRetailWithMult )
    else
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaRetailWithMult ),
             SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:FuncGrpAreaRetailWithMult ) ),
        Max( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaRetailWithMult ),
             SumRevRef( ThrmlZn:SimSysRef[1], ThrmlZn:FuncGrpAreaRetailWithMult ) ) )
    endif
ENDRULE 
RULE NEW ZnSys:FuncGrpAreaSchool
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaSchool
  INPUTCLASS 
    NotInput
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaSchoolWithMult )
    else
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaSchoolWithMult ),
             SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:FuncGrpAreaSchoolWithMult ) ),
        Max( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaSchoolWithMult ),
             SumRevRef( ThrmlZn:SimSysRef[1], ThrmlZn:FuncGrpAreaSchoolWithMult ) ) )
    endif
ENDRULE
RULE NEW ZnSys:FuncGrpAreaWarehouse
  DATATYPE
    Float
  LONGFORM
    FunctionGroupAreaWarehouse
  INPUTCLASS 
    NotInput
  SIZING
    if( IsExhSys > 0 )
    then SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:FuncGrpAreaWarehouseWithMult )
    else
    Max( Max( SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FuncGrpAreaWarehouseWithMult ),
             SumRevRef( ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:FuncGrpAreaWarehouseWithMult ) ),
        Max( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FuncGrpAreaWarehouseWithMult ),
             SumRevRef( ThrmlZn:SimSysRef[1], ThrmlZn:FuncGrpAreaWarehouseWithMult ) ) )
    endif
ENDRULE 



// ********** Predominant Function Group for System ****************************
// =========================== AirSystem ======================================
RULE NEW AirSys:MaxFuncGrpArea
  DATATYPE
    Float
  LONGFORM
    MaxFunctionGroupArea
  INPUTCLASS 
    NotInput
  DEFAULT
    if( FuncGrpAreaResidentialLiving > 0 )
    then FuncGrpAreaResidentialLiving
    else
    Max( Max(Max( Max(FuncGrpAreaAssembly,
                    FuncGrpAreaData),
                Max(FuncGrpAreaHealth,
                    FuncGrpAreaLab) ),
            Max( Max(FuncGrpAreaManufacturing,
                    FuncGrpAreaOffice),
                Max(FuncGrpAreaParking,
                    FuncGrpAreaResidentialCommon) ) ),
            Max( Max(FuncGrpAreaRestaurant,
                    FuncGrpAreaRetail),            
                Max(FuncGrpAreaSchool,
                    FuncGrpAreaWarehouse) ) )
    endif
  SIZING
    if( FuncGrpAreaResidentialLiving > 0 )
    then FuncGrpAreaResidentialLiving
    else
    Max( Max(Max( Max(FuncGrpAreaAssembly,
                    FuncGrpAreaData),
                Max(FuncGrpAreaHealth,
                    FuncGrpAreaLab) ),
            Max( Max(FuncGrpAreaManufacturing,
                    FuncGrpAreaOffice),
                Max(FuncGrpAreaParking,
                    FuncGrpAreaResidentialCommon) ) ),
            Max( Max(FuncGrpAreaRestaurant,
                    FuncGrpAreaRetail),            
                Max(FuncGrpAreaSchool,
                    FuncGrpAreaWarehouse) ) )
    endif
  ANNUAL
    z:MaxFuncGrpArea
ENDRULE 

// -----------------------------------------------------------------------------
RULE NEW AirSys:PredominantFuncGrp
  DATATYPE
    String
  LONGFORM
    PredominantFunctionGroup
  INPUTCLASS 
    NotInput
  DEFAULT
    if( ServesResZn > 0 )
    then "ResidentialCommon"
    else if( FuncGrpAreaResidentialLiving > 0 )
    then "ResidentialLiving"
    else if( MaxFuncGrpArea = FuncGrpAreaAssembly )
    then "Assembly"
    else if( MaxFuncGrpArea = FuncGrpAreaData )
    then "Data"
    else if( MaxFuncGrpArea = FuncGrpAreaHealth )
    then "Health"
    else if( MaxFuncGrpArea = FuncGrpAreaLab )
    then "Laboratory"
    else if( MaxFuncGrpArea = FuncGrpAreaManufacturing )
    then "Manufacturing"
    else if( MaxFuncGrpArea = FuncGrpAreaOffice )
    then "Office"
    else if( MaxFuncGrpArea = FuncGrpAreaParking )
    then "Parking"
    else if( MaxFuncGrpArea = FuncGrpAreaResidentialCommon )
    then "ResidentialCommon"
    else if( MaxFuncGrpArea = FuncGrpAreaRestaurant )
    then "Restaurant"
    else if( MaxFuncGrpArea = FuncGrpAreaRetail )
    then "Retail"
    else if( MaxFuncGrpArea = FuncGrpAreaSchool )
    then "School"
    else if( MaxFuncGrpArea = FuncGrpAreaWarehouse )
    then "Warehouse"
    else UNDEFINED
    endif endif endif endif endif
    endif endif endif endif endif
    endif endif endif endif
  SIZING
    if( ServesResZn > 0 )
    then "ResidentialCommon"
    else if( FuncGrpAreaResidentialLiving > 0 )
    then "ResidentialLiving"
    else if( MaxFuncGrpArea = FuncGrpAreaAssembly )
    then "Assembly"
    else if( MaxFuncGrpArea = FuncGrpAreaData )
    then "Data"
    else if( MaxFuncGrpArea = FuncGrpAreaHealth )
    then "Health"
    else if( MaxFuncGrpArea = FuncGrpAreaLab )
    then "Laboratory"
    else if( MaxFuncGrpArea = FuncGrpAreaManufacturing )
    then "Manufacturing"
    else if( MaxFuncGrpArea = FuncGrpAreaOffice )
    then "Office"
    else if( MaxFuncGrpArea = FuncGrpAreaParking )
    then "Parking"
    else if( MaxFuncGrpArea = FuncGrpAreaResidentialCommon )
    then "ResidentialCommon"
    else if( MaxFuncGrpArea = FuncGrpAreaRestaurant )
    then "Restaurant"
    else if( MaxFuncGrpArea = FuncGrpAreaRetail )
    then "Retail"
    else if( MaxFuncGrpArea = FuncGrpAreaSchool )
    then "School"
    else if( MaxFuncGrpArea = FuncGrpAreaWarehouse )
    then "Warehouse"
    else UNDEFINED
    endif endif endif endif endif
    endif endif endif endif endif
    endif endif endif endif
  ANNUAL  
    z:PredominantFuncGrp
ENDRULE 

// =========================== ZoneSystem ======================================
RULE NEW ZnSys:MaxFuncGrpArea
  DATATYPE
    Float
  LONGFORM
    MaxFunctionGroupArea
  INPUTCLASS 
    NotInput
  SIZING
    if( FuncGrpAreaResidentialLiving > 0 )
    then FuncGrpAreaResidentialLiving
    else
    Max( Max(Max( Max(FuncGrpAreaAssembly,
                    FuncGrpAreaData),
                Max(FuncGrpAreaHealth,
                    FuncGrpAreaLab) ),
            Max( Max(FuncGrpAreaManufacturing,
                    FuncGrpAreaOffice),
                Max(FuncGrpAreaParking,
                    FuncGrpAreaResidentialCommon) ) ),
            Max( Max(FuncGrpAreaRestaurant,
                    FuncGrpAreaRetail),            
                Max(FuncGrpAreaSchool,
                    FuncGrpAreaWarehouse) ) )
    endif
  ANNUAL
    z:MaxFuncGrpArea
ENDRULE 

// -----------------------------------------------------------------------------
RULE NEW ZnSys:PredominantFuncGrp
  DATATYPE
    String
  LONGFORM
    PredominantFunctionGroup
  INPUTCLASS 
    NotInput
  SIZING
    if( FuncGrpAreaResidentialLiving > 0 )
    then "ResidentialLiving"
    else if( MaxFuncGrpArea = FuncGrpAreaAssembly )
    then "Assembly"
    else if( MaxFuncGrpArea = FuncGrpAreaData )
    then "Data"
    else if( MaxFuncGrpArea = FuncGrpAreaHealth )
    then "Health"
    else if( MaxFuncGrpArea = FuncGrpAreaLab )
    then "Laboratory"
    else if( MaxFuncGrpArea = FuncGrpAreaManufacturing )
    then "Manufacturing"
    else if( MaxFuncGrpArea = FuncGrpAreaOffice )
    then "Office"
    else if( MaxFuncGrpArea = FuncGrpAreaParking )
    then "Parking"
    else if( MaxFuncGrpArea = FuncGrpAreaResidentialCommon )
    then "ResidentialCommon"
    else if( MaxFuncGrpArea = FuncGrpAreaRestaurant )
    then "Restaurant"
    else if( MaxFuncGrpArea = FuncGrpAreaRetail )
    then "Retail"
    else if( MaxFuncGrpArea = FuncGrpAreaSchool )
    then "School"
    else if( MaxFuncGrpArea = FuncGrpAreaWarehouse )
    then "Warehouse"
    else UNDEFINED
    endif endif endif endif endif
    endif endif endif endif endif
    endif endif endif
  ANNUAL 
    z:PredominantFuncGrp
ENDRULE 


// Determine the name of the largest thermal zone that references the current system
RULE NEW AirSys:MaxAreaThrmlZnRef
  DATATYPE
    ThrmlZn
  LONGFORM
    MaximumAreaThermalZoneRef
  INPUTCLASS
    NotInput
  SIZING
    MaxRevRefComp( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FlrAreaWithMult )
ENDRULE
RULE NEW ZnSys:MaxAreaThrmlZnRef
  DATATYPE
    ThrmlZn
  LONGFORM
    MaximumAreaThermalZoneRef
  INPUTCLASS
    NotInput
  SIZING
    MaxRevRefComp( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:FlrAreaWithMult )
ENDRULE
 
// ---------- Section 5.7.2.2 - Schedules --------------------------------------
// ********** Air Handler Schedule *********************************************
// =========================== AirSystem ======================================
RULE AirSys:AvailSchRef
  DESCRIPTION
    "A schedule that indicates what hours the system is scheduled to operate."
  HELP : T24N
    "The schedules specified in Appendix 5.4A and detailed in Appendix 5.4B shall 
     be used as a default."
  HELP : S901G ECBC
    "A default schedule based on the the predominant FunctionScheduleGroup (by
     floor area) of the zones served by the system."
  REFERENCE 
    NACM Section 5.7.2.2
  INPUTCLASS : T24N
    Prescribed
  INPUTCLASS : S901G ECBC
    Default
  SIZING : T24N
    if( LocalStatus( PredominantFuncGrp ) = 0 ) 
    then
      PostError("A predominant function schedule group for system '%s' could not
                 be determined. Confirm SpaceFunction assignments for all spaces
                 and if problem persists, contact support.", Name)   
    else
    if( Is24HrSys > 0 .OR. MaxFuncGrpArea != TotCondFlrArea )
    then // Use AllOn schedule 
      RuleLibrary(Schedule, "AllOnHVACAvail")
    else
      RuleLibrary(Schedule, 
        (SpaceFunctionGroups:AvailSchRef("FuncGroup", PredominantFuncGrp) ) )
    endif endif
  SIZING_PROPOSED : S901G ECBC
    if( LocalCompAssigned( u:AvailSchRef ) )
    then u:AvailSchRef
    else if( LocalStatus( PredominantFuncGrp ) = 0 ) 
    then
      PostError("A predominant function schedule group for system '%s' could not
                 be determined. Confirm SpaceFunction assignments for all spaces
                 and if problem persists, contact support.", Name)   
    else
      RuleLibrary(Schedule, 
        (SpaceFunctionGroups:AvailSchRef("FuncGroup", PredominantFuncGrp) ) )
    endif endif
  SIZING_BASELINE : S901G ECBC
    if( LocalCompAssigned( MaxAreaThrmlZnRef ) )
    then MaxAreaThrmlZnRef:PropPriAvailSchRef
    else if( LocalStatus( PredominantFuncGrp ) = 0 ) 
    then
      PostError("A predominant function schedule group for system '%s' could not
                 be determined. Confirm SpaceFunction assignments for all spaces
                 and if problem persists, contact support.", Name)   
    else
      RuleLibrary(Schedule, 
        (SpaceFunctionGroups:AvailSchRef("FuncGroup", PredominantFuncGrp) ) )
    endif endif
  ANNUAL 
    z:AvailSchRef
ENDRULE
RULE NEW AirSys:ServeMultSetptZn
  DESCRIPTION
    "flag indicating whether the AirSys serves zones with more than one set of setpoint schedule."
  DATATYPE
    Integer
  INPUTCLASS
    NotInput
  DEFAULT
    if( MaxFuncGrpArea > 0 .AND. TotCondFlrArea > 0 .AND. MaxFuncGrpArea != TotCondFlrArea )
    then 1
    else 0
    endif
  CHECKSIM
    if( ServeMultSetptZn > 0 )
    then PostWarning("AirSystem '%s' serves zones with more than one set of setpoint
                schedule. To ensure the system can meet the load, the system is set to 
                be always available. Therefore the system fan is always be on.", Name)   
    else UNCHANGED
    endif
ENDRULE

// =========================== ZoneSystem ======================================
RULE ZnSys:AvailSchRef
  DESCRIPTION
    "A schedule that indicates what hours the system is scheduled to operate."
  HELP : T24N
    "The schedules specified in Appendix 5.4A and detailed in Appendix 5.4B shall 
     be used as a default."
  HELP : S901G ECBC
    "A default schedule based on the the predominant FunctionScheduleGroup (by
     floor area) of the zones served by the system."
  INPUTCLASS : T24N
    Prescribed
  INPUTCLASS : S901G ECBC
    Default
  SIZING : T24N
    if( LocalStatus( PredominantFuncGrp ) = 0 ) 
    then
      PostError("A predominant function schedule group for system '%s' could not
                 be determined. Confirm SpaceFunction assignments for all spaces
                 and if problem persists, contact support.", Name)   
    else
    if( Is24HrSys > 0 )
    then // Use AllOn schedule 
      RuleLibrary(Schedule, "AllOnHVACAvail")
    else
      RuleLibrary(Schedule, 
        (SpaceFunctionGroups:AvailSchRef("FuncGroup", PredominantFuncGrp) ) )
    endif endif
  SIZING_PROPOSED : S901G ECBC
    if( LocalCompAssigned( u:AvailSchRef ) )
    then u:AvailSchRef
    else if( LocalStatus( PredominantFuncGrp ) = 0 ) 
    then
      PostError("A predominant function schedule group for system '%s' could not
                 be determined. Confirm SpaceFunction assignments for all spaces
                 and if problem persists, contact support.", Name)   
    else
      RuleLibrary(Schedule, 
        (SpaceFunctionGroups:AvailSchRef("FuncGroup", PredominantFuncGrp) ) )
    endif endif
  SIZING_BASELINE : S901G ECBC
    if( LocalCompAssigned( MaxAreaThrmlZnRef ) )
    then MaxAreaThrmlZnRef:PropPriAvailSchRef
    else if( LocalStatus( PredominantFuncGrp ) = 0 ) 
    then
      PostError("A predominant function schedule group for system '%s' could not
                 be determined. Confirm SpaceFunction assignments for all spaces
                 and if problem persists, contact support.", Name)   
    else
      RuleLibrary(Schedule, 
        (SpaceFunctionGroups:AvailSchRef("FuncGroup", PredominantFuncGrp) ) )
    endif endif
  ANNUAL 
    z:AvailSchRef
ENDRULE

// =========================== TerminalUnit ====================================
RULE TrmlUnit:AvailSchRef
  DESCRIPTION
    "A schedule that indicates what hours the system is scheduled to operate."
  HELP : T24N
    "This schedule overrides E+ AvailabilityManager:NightCycle control.
     Therefore, it is not used for compliance analysis."
  HELP : S901G ECBC
    "This schedule overrides E+ AvailabilityManager:NightCycle control.
     Therefore, it should not be used unless this is the desired behavior."
  INPUTCLASS : T24N
    NotInput
  INPUTCLASS : S901G
    Prescribed
// *** See HELP above!*** AM:NightCycle will not override this schedule, so UMLHs will likely occur 
// if set to anything other than All On. Translator default is to set to 'Always On Discrete'
;  SIZING : T24N
;    if( IfValidAnd( LocalCompAssigned( ZnServedRef ) == ComponentType( "ThrmlZn" ) ) )
;    then if( ZnServedRef:PredominantFuncGrp = "AllOn" )
;         then RuleLibrary(Schedule, "AllOnHVACAvail")
;         else RuleLibrary(Schedule, 
;        (SpaceFunctionGroups:AvailSchRef("FuncGroup", ZnServedRef:PredominantFuncGrp) ) )
;         endif
;    else UNDEFINED
;    endif
ENDRULE

// =========================== Fan ====================================
RULE Fan:AvailSchRef
  DESCRIPTION
    "A schedule that indicates what the fan is enabled to operate."
  HELP
    "This schedule is overridden by E+ AvailabilityManager:NightCycle control.
     This property is translated by OS reverse translator. However, OS
     also has the rules listed below built-in. It is provided in the SDD only to
     provide control over this E+ fan object schedules, if needed."
  INPUTCLASS
    NotInput
// This property is translated by OS reverse translator. However, the OS
// also has this following behavior built-in:
;   if( ParentComp = "AirSys" )
;   then // AirSystem
;     AirSys:AvailSchRef
;   else if( ParentComp = "ZnSys" )
;   then // ZoneSystem
;     ZnSys:AvailSchRef
;   else if( ParentComp = "TrmlUnit" )
;   then // TerminalUnit, fan powered box
;     AirSys:AvailSchRef
;   else UNDEFINED
;   endif endif endif
ENDRULE

// =========================== Exhaust Systems ============================
RULE ThrmlZn:ExhAvailSchRef
  DESCRIPTION
    "Echo of the availability schedule defined at exhaust system referenced by the
     ThermalZone"
  INPUTCLASS 
    NotInput
  SIZING_PROPOSED
    if( IfValidAnd( ExhFlowSim > 0 ) )
    then
      if( PropVentSysIsExh > 0 .AND. LocalCompAssigned( PriAirCondgSysRef[1] ) )
      then PriAirCondgSysRef[1]:AvailSchRef
      else
      if( LocalCompAssigned( ExhAvailSchRef ) = 0 )
      then
        if( LocalCompAssigned( PriAirCondgSysRef[1] ) )
        then PriAirCondgSysRef[1]:AvailSchRef
        else
        if( FuncGrpArea24Hr > 0 )
        then // Use AllOn schedule 
          RuleLibrary(Schedule, "AllOnHVACAvail")
        else
          RuleLibrary( Schedule, SpaceFunctionGroups:AvailSchRef("FuncGroup", PredominantFuncGrp) )
        endif endif
      else UNDEFINED
      endif endif
    else UNDEFINED
    endif
  SIZING_BASELINE
    if( IfValidAnd( ExhFlowSim > 0 ) )
    then
      if( BaseVentSysIsExh > 0 .AND. LocalCompAssigned( PriAirCondgSysRef[1] ) )
      then PriAirCondgSysRef[1]:AvailSchRef
      else
      if( LocalCompAssigned( ExhAvailSchRef ) = 0 )
      then
        if( LocalCompAssigned( PriAirCondgSysRef[1] ) )
        then PriAirCondgSysRef[1]:AvailSchRef
        else
        if( FuncGrpArea24Hr > 0 )
        then // Use AllOn schedule 
          RuleLibrary(Schedule, "AllOnHVACAvail")
        else
          RuleLibrary( Schedule, SpaceFunctionGroups:AvailSchRef("FuncGroup", PredominantFuncGrp) )
        endif endif
      else zp:ExhAvailSchRef
      endif endif
    else UNDEFINED
    endif  
  ANNUAL
    z:ExhAvailSchRef
ENDRULE

// Transfer proposed availability schedule to zone
RULE NEW ThrmlZn:PropPriAvailSchRef
  DATATYPE
    Schedule
  LONGFORM
    ProposedPrimaryAvailabilityScheduleRef
  DESCRIPTION
    "The availability of the proposed (primary) HVAC system that serves the 
     ThermalZone."
  INPUTCLASS
    NotInput
  SIZING_PROPOSED
    if( LocalCompAssigned ( PriAirCondgSysRef[1] ) )
    then PriAirCondgSysRef[1]:AvailSchRef
    else UNDEFINED
    endif
ENDRULE