; -------------------------------------------------------------------------
; Rules pertaining to:   Conversion of Proposed DHW Systems & Heaters into Budget/Standard Design - ported to Com ruleset SAC 8/9/18
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2015, California Energy Commission
; Copyright (c) 2012-2015, Wrightsoft Corporation
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
; STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------

; -------------------------------------------------------------------------
; Global conversions for Res to Com ruleset -
;     object type DHWSys      -> ResDHWSys
;     object type DHWHeater   -> ResWtrHtr
;     Proj:SimulateStdDHW     -> Proj:SimulateResStdDHW
;     Proj:EnergyCodeYearNum  -> Proj:EngyCodeYearNum
;     Proj:DRtgRefRunID       -> removed/commented out related logic
;     Proj:ClimateZone        -> Proj:CliZnNum
;     Proj:NatGasAvailable    -> Proj:NatGasAvail
;     Proj:StdDesignBase      -> Proj:StdsVersionYr
;     Proj:HaveShwrDrnHtRecov -> ResDHWSys:HaveShowerDrainHtRcvry
;     DHWSys:SystemType       -> ResDHWSys:Type
;     DHWSys:IsExisting       -> ResDHWSys:Status = "Existing"
;     DHWSys:CentralDHW       -> ResDHWSys:CentralSys
;     DHWSys:MFamDistType = 0 -> ResDHWSys:DistType = "No loops or central system pump"
;     DHWSys:NRecircLoops     -> ResDHWSys:LpCnt
;     DHWSys:LoopPipeInsulThk -> ResDHWSys:LpPipeInsThkns
;     DHWSys:RecircPipeLoc    -> ResDHWSys:PipeLctn
;     DHWSys:SolFracAnn       -> ResDHWSys:AnnualSolFrac
;     DHWSys:FloorAreaServed  -> ResDHWSys:SysFlrArea
;     DHWHeater:HeaterType       -> ResWtrHtr:HtrTypeNum
;     DHWHeater:TankVolume       -> ResWtrHtr:TankVol
;     DHWHeater:HeaterElementType (0-Elec,1-Gas,3/5-HP) -> ResWtrHtr:ElementType (0-Elec,1-Gas,2-HP)
;     DHWHeater:InputRatingSim   -> ResWtrHtr:InpRating / InpRatingElec
;     DHWHeater:IntInsulRVal     -> ResWtrHtr:TankIntInsR
;     DHWHeater:ExtInsulRVal     -> ResWtrHtr:TankExtInsR
;     DHWHeater:StandbyLossFrac  -> ResWtrHtr:StdbyLossFrac
;     DHWHeater:EnergyFactor 	   -> ResWtrHtr:EF
;  ; needed for new 'Consumer Instantaneous (UEF)' type
;     DHWHeater:RatedFlow 	      -> ResWtrHtr:RtdFlow
;     DHWHeater:AnnFuelUse 	   -> ResWtrHtr:AnnualFuelUse
;     DHWHeater:AnnElecUse 	   -> ResWtrHtr:AnnualElecUse
;     DHWHeater:StandbyElec 	   -> ResWtrHtr:StdbyElec
;     DHWHeater:RecovEff 	      -> ResWtrHtr:RcvryEff
;  ; (end of) needed for new 'Consumer Instantaneous (UEF)' type
;     DHWHeater:HasElecMiniTank  -> ResWtrHtr:ElecMiniTank
; -------------------------------------------------------------------------

;*************************************************************************
;*************************************************************************
RULELIST  "BudgetConversion_ResDHW" 1 0 1 0
;
;   Rules that govern the conversion of DHW Systems and heaters of the
;   proposed building design to the budget building design.
;
;*************************************************************************
;*************************************************************************
;"log status"   Proj:Action = {  if (DevMode==0 .OR. LocalStatus(RunAbbrev) < 1 .OR. StdsVersionYr < 2019) then  UNCHANGED  else
;   PostMessageToLog( "      evaluating 'BudgetConversion_DHW' rules on '%s' model...", RunAbbrev )  endif  }

   ;--------------------------------------------------------------------
   ; BudgetConversion: DHW System(s)
   ;--------------------------------------------------------------------

   ; SAC 12/23/14 - moved up from below in order to reference in following rules
   ; SAC 3/19/14 - modified to cause 2016, multi-family w/ non-central DHW to simulate standard design
   ; SAC 9/10/15 - added condition to ensure systems/heaters converted to valid std design when DHWCalcMethod anything other than "T24"
   ; SAC 7/29/18 - removed all logic - always set to 1 with removal of DHWCalcMethod from all rule logic
   "Set flag to treat Std Design as Prop Design in DHWDLL for E+A+A -OR- for 2016 multi-family models w/ exclusively non-central DHW systems"
      Proj:SimulateResStdDHW = {  1  }

   "Rules to remove DWHRSys object references for MFam std design system"      ; SAC 1/29/19 - equivalent of below from Res
      Spc:Action  = {
         if (Proj:SimulateResStdDHW < 0.5 .OR. IfValidAnd( ResDHWSysRef:Status = "Existing" ) .OR.
             SpcFunc != "High-Rise Residential Living Spaces") then  UNCHANGED
         else  EvalRulelist( "Blast_Spc_DWHRSysRefs", 1 )
         endif  }
;   "Rules to remove DWHRSys object references for MFam std design system #1"      ; SAC 1/8/19
;      DwellUnitType:Action  = {
;         if (Proj:SimulateStdDHW < 0.5 .OR. Proj:IsMultiFamily  < 0.5 .OR.
;             IfValidAnd( AssignedDUFlrArea < 0.1 )) then  UNCHANGED
;         else if (IfValidAnd( HaveDHWSysRef[1] > 0 ) .AND. IfValidAnd( DHWSysRef[1]:IsExisting < 0.5 ))
;         then  EvalRulelist( "Blast_DwellUnitType_DWHRSysRefs_1", 1 )
;         else  UNCHANGED  endif endif  }

;"dbg" ResDHWSys:Action = { PostMessageToLog( "ResDHWSys:Status '%s' / CentralSys %g / DistType '%s'", Status, CentralSys, DistType ) }
   "Setup Central Recirc Boiler when appropriate"     ResDHWSys:Action  =        ; SAC 1/12/20 (Com tic #3156)
      {  if (Proj:SimulateResStdDHW < 0.5 .OR. IfValidAnd( Status = "Existing" ) .OR.
             IfValidAnd( CentralSys > 0 )==0 .OR. IfValidAnd( SysFlrArea > 1 )==0 .OR.
             IfValidAnd( DistType = "No loops or central system pump" )) then  UNCHANGED
         else  EvalRulelist( "BudgetConversion_DHWSys_CentralRecircGasBoiler", 1 )  endif  }

;   "Redefault this DHWSys"    DHWSys:Action = {  EvalRulelist( "ProposedInput_DHWEquipment", 1 )  }   - not needed until/unless setting up new autosized CHPWH...?

; SAC 2/2/20 - port over DHWSolarSys standard design rules from Res (Com tic #3157)
   ; BLAST current DHWSolarSysRef
   "Set ResDHWSys:DHWSolarSysRef"    ResDHWSys:DHWSolarSysRef  = {  UNDEFINED  }       ; SAC 1/15/20 (tic #1013)
   "Set ResDHWSys:StdDsgnSolarSysReqd flag"     ResDHWSys:StdDsgnSolarSysReqd  =       ; SAC 1/27/20 (StdSolarSys)
      {  if (Proj:SimulateResStdDHW < 0.5 .OR. IfValidAnd( Status = "Existing" ) .OR.
             IfValidAnd( CentralSys > 0 )==0 .OR. IfValidAnd( SysFlrArea > 1 )==0) then  UNDEFINED
         else  1  endif  }
   ; must we delete other DHWSolarSys objects before retrieving the Std design one?  (due to max DHWSolarSys occurs of 1)
   "Create Proj:StdDHWSolarSysRef if necessary"    Proj:StdDHWSolarSysRef  =
      {  if (SumAll( ResDHWSys:StdDsgnSolarSysReqd ) < 1) then  UNDEFINED
         else  RuleLibrary( DHWSolarSys, "t24-Std SolarSys" )  endif  }
   "Set Std SolarSys flag"    Proj:StdDHWSolarSysRef:IsStdSys  = {  1  }         ; SAC 1/27/20 (StdSolarSys)

   ;"Default Proj:StdDHWSolarSysRef"    DHWSolarSys:Action  =
   ;   {  if (IfValidAnd( IsStdSys > 0 )==0) then  UNCHANGED
   ;      else  EvalRulelist( "Default_DHWSolarSys", 1 )  endif  }
   ; implement individual rules as opposed to duplicating defaulting rules (which are in data model format in Com) - SAC 2/2/20 (Com tic #3157)
   "Set Std SolarSys CertID"           Proj:StdDHWSolarSysRef:CertID  = {  
         SolarThermalCollectors:SRCC_IAPMOnumber( "Manufacturer", StdDHWSolarSysRef:Manufacturer, "BrandName", StdDHWSolarSysRef:Brand, "ModelNumber", StdDHWSolarSysRef:Model )  }
   "Set Std SolarSys Area"             Proj:StdDHWSolarSysRef:Area  = {  
         SolarThermalCollectors:Area(             "Manufacturer", StdDHWSolarSysRef:Manufacturer, "BrandName", StdDHWSolarSysRef:Brand, "ModelNumber", StdDHWSolarSysRef:Model ) * 10.7639  }
   "Set Std SolarSys EffCurveYInt"     Proj:StdDHWSolarSysRef:EffCurveYInt  = {  
         SolarThermalCollectors:YIntercept(       "Manufacturer", StdDHWSolarSysRef:Manufacturer, "BrandName", StdDHWSolarSysRef:Brand, "ModelNumber", StdDHWSolarSysRef:Model )  }
   "Set Std SolarSys EffCurveSlope"    Proj:StdDHWSolarSysRef:EffCurveSlope  = {  
         SolarThermalCollectors:Slope(            "Manufacturer", StdDHWSolarSysRef:Manufacturer, "BrandName", StdDHWSolarSysRef:Brand, "ModelNumber", StdDHWSolarSysRef:Model )  }

   "Assign Std SolarSys ResDHWSys:DHWSolarSysRef"  ResDHWSys:DHWSolarSysRef  =
      {  if (IfValidAnd( StdDsgnSolarSysReqd > 0 )) then  Proj:StdDHWSolarSysRef
         else  UNCHANGED  endif  }
   "Refresh DHWSolarSys FloorArea/DUs/BRs served properties"      DHWSolarSys:Action  =      ; SAC 1/27/20 (StdSolarSys)
      {  EvalRulelist( "Refresh_DHWSolarSys_ServedAreaDUsBRs", 1 )  }

      ;"store BEMProc details"		Proj:Action = {  StoreBEMProc( Format( "StdSolarSys-%s", RunAbbrev ), 0 )  }
      ;"dbg" Proj:Action = {  PostMessageToLog( "   eval rulelist 'BudgetConversion' for run %s", RunAbbrev )  }
   ; SAC 2/26/20 - incorported multiplier of 0.69 into std design sizing formulas to account for recent changes in solar simulation (resulting in more efficient results)     ; remove 0.69 factors due to CSE revisions - SAC 7/15/20
   ; added separate handling for hotel/motel guest rooms - SAC 05/04/21
   "Set DHWSolarSys:StdDsgnCntFloat[1]-Low"     DHWSolarSys:StdDsgnCntFloat[1]  =      ; SAC 1/28/20 (StdSolarSys)
      {  if (IfValidAnd( IsStdSys > 0 ))
         then  0.8 * (  SolarCollectorCountEst:Const(   "CZ", Proj:CliZnNum ) +
                       (SolarCollectorCountEst:Dwell(   "CZ", Proj:CliZnNum ) * DwellUnitsServed) +
                       (SolarCollectorCountEst:Bedrm(   "CZ", Proj:CliZnNum ) * BedroomsServed  ) +
                       (SolarCollectorCountEst:GuestRm( "CZ", Proj:CliZnNum ) * GuestRoomsServed))
         else  UNDEFINED  endif  }     ; can be made to depend on DHWSolarSys:DwellUnitsServed, BedroomsServed and/or FloorAreaServed
   "Set DHWSolarSys:StdDsgnCntFloat[2]-High"    DHWSolarSys:StdDsgnCntFloat[2]  = 
      {  if (IfValidAnd( IsStdSys > 0 ))
         then  1.2 * (  SolarCollectorCountEst:Const(   "CZ", Proj:CliZnNum ) +
                       (SolarCollectorCountEst:Dwell(   "CZ", Proj:CliZnNum ) * DwellUnitsServed) +
                       (SolarCollectorCountEst:Bedrm(   "CZ", Proj:CliZnNum ) * BedroomsServed  ) +
                       (SolarCollectorCountEst:GuestRm( "CZ", Proj:CliZnNum ) * GuestRoomsServed))
         else  UNDEFINED  endif  }

   ; SAC 3/8/18 - revised logic to set flag for all-elec central systems w/ no recirc (tic #983)
   "Set ResDHWSys:IsStdDesignElec - whether this system is setup as an electric standard design"  ; SAC 2/16/18 - tic #983
      ResDHWSys:IsStdDesignElec = {
         if (Proj:SimulateResStdDHW < 0.5 .OR. IfValidAnd( Status = "Existing" ) .OR. IfValidAnd( SysFlrArea < 0.1 )) then UNDEFINED
         else if (IfValidAnd( CentralSys > 0 ) .AND. Proj:EngyCodeYearNum >= 2019)
         then  if (DistType = "No loops or central system pump" .AND.
                   IfValidAnd( WtrHtrCnt > NumGasHtrs ) .AND. IfValidAnd( NumDUsServed <= 8 )) then  1
               else  UNDEFINED
               endif
         else if ((IfValidAnd( CentralSys = 0 )==0 .AND. DistType != "No loops or central system pump") .OR.
                  IfValidAnd( HeatersAllElec > 0 )==0) then  UNDEFINED
         else  1  endif endif endif  }

   ; SAC 9/25/15 - rule to override user-specified ResDHWSys:Type in case where we are simulating the std design DHW
   ; SAC 8/21/16 - removed condition where CentralSys being set was preventing Type from getting set to "Standard" (tic #735)
   ; SAC 2/16/18 - revised logic to enable different standard design Type for non-central, all-electric DHW systems (tic #983)  - extended to include all elec central w/ no recirc - SAC 3/8/18
	"Reset ResDHWSys:Type"		ResDHWSys:Type		= {
         if (Proj:SimulateResStdDHW < 0.5 .OR. IfValidAnd( Status = "Existing" )) then  UNCHANGED
         else  "Standard"
         endif  }
      ;   then  CAClimateZoneCodeBase:ElecDHWDwellUnitDist( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdsVersionYr, "BldgType", "MultiFam" )
      ;   else  CAClimateZoneCodeBase:DHWDwellUnitDist(     "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdsVersionYr, "BldgType", "MultiFam" )
      ;   endif endif  }
;"debugging"  ResDHWSys:Action  = {  MessageBox( "Reset ResDHWSys:Type to '%s' for ResDHWSys '%s' where HeatersAllElec = %g, CentralSys = %g, DistType = '%s'", Type, Name, HeatersAllElec, CentralSys, DistType )  }

; SAC 10/22/15 - rule to override user-specified ResDHWSys:DistType
; SAC 11/10/15 - added logic to cause standard design for proposed DistType of 'No loops or central system pump' to remain unchanged
; SAC 1/12/20 - revised std design MFamDistType to be "Multi-family: Recirculating with no control (continuous pumping)" (5056) (Com tic #3156)
; no need since only one recirc type starting 2019.2.0 - SAC 03/25/21
;	"Reset ResDHWSys:DistType"		ResDHWSys:DistType   		= {	if (Proj:SimulateResStdDHW < 0.5 .OR. IfValidAnd( Status = "Existing" ) .OR. IfValidAnd( CentralSys < 0.5 ) .OR. DistType == "No loops or central system pump") then  UNCHANGED
;																						else	"No Control (continuous pumping)"  ; 5056		; "Multi-family: Recirculation demand control"
;																						endif  }

; SAC 8/28/16 - revised logic to always default to single recirc loop (from 2 for > 8 DUs served) (tic #670)
	"Reset ResDHWSys:LpCnt"		   ResDHWSys:LpCnt		      = {	if (Proj:SimulateResStdDHW < 0.5 .OR. IfValidAnd( Status = "Existing" ) .OR. IfValidAnd( CentralSys < 0.5 ) .OR. DistType == "No loops or central system pump") then  UNCHANGED
																						else	1  endif  }
																				;;		else if (IfValidAnd( Proj:NumDwellingUnits > 8 ))   - SAC 11/10/15 - revised to be triggered on # DUs drawing from this system
																				;		else if (IfValidAnd( NumDUsServed > 8 ))
																				;		then	2
																				;		else	1  endif endif  }
	; SAC 11/11/15 - based on stds, table 120.3-A, which for all pipe diameters >= 1 in. and in the temperature range 105-140 is simply 1.5 in.
	"Reset ResDHWSys:LpPipeInsThkns"	ResDHWSys:LpPipeInsThkns	= {	1.5  }
	"Reset ResDHWSys:PipeLctn"	ResDHWSys:PipeLctn	= {	"Conditioned"  }  ; 0  }		; => Conditioned
	;"Reset ResDHWSys:RecircPipeLoc[2]"	ResDHWSys:RecircPipeLoc[2]	= {	0  }
	;"Reset ResDHWSys:RecircPipeLoc[3]"	ResDHWSys:RecircPipeLoc[3]	= {	0  }
	;"Reset ResDHWSys:RecircPipeLoc[4]"	ResDHWSys:RecircPipeLoc[4]	= {	0  }
	;"Reset ResDHWSys:RecircPipeLoc[5]"	ResDHWSys:RecircPipeLoc[5]	= {	0  }
	;"Reset ResDHWSys:RecircPipeLoc[6]"	ResDHWSys:RecircPipeLoc[6]	= {	0  }

; SAC 9/30/15 - rules to reset ResDHWSys:SolFracType for new and altered systems
	"Reset ResDHWSys:SolFracType"		ResDHWSys:SolFracType	= {	if (Proj:SimulateResStdDHW < 0.5 .OR. IfValidAnd( Status = "Existing" )) then  UNCHANGED
																				else	0  endif  }

   "Recalc ResDHWSys:NewOrAltServedArea"  ResDHWSys:NewOrAltServedArea  =     ; SAC 2/20/20 - revised logic to use ALL assigned area (which may be Existing) when ResDHWSys is New or Altered
      {  if (IfValidAnd( Status = "New" ) .OR. IfValidAnd( Status = "Altered" ))
         then  SumRevRef(Spc:ResDHWSysRef, Spc:DwellingUnitSpcTotAreaWithMult)  
         else  SumRevRef(Spc:ResDHWSysRef, Spc:NewOrAltDwellingUnitSpcTotAreaWithMult)  endif  }   ; to ensure valid prior to next rule eval

;"store BEMProc details"		Proj:Action = {  StoreBEMProc( "b4 set ForceStdDesign", 0 )  }

; mjb 12/17/13 - need some rules for E+A+A
; SAC 12/23/14 - added more rules immediately below to handle fuel switching - also to cover situations where standard design is simulated directly from database (due to one or more Existing units)
	"Set ResWtrHtr:ForceStdDesign (for New/Altered equipment when simulating std design)"		; whether or not (1/0) budget conversion needs to force this heater to reflect standard design type & performance
			ResWtrHtr:ForceStdDesign	= {	if (Proj:SimulateResStdDHW < 0.5 .OR. ResDHWSys:NewOrAltServedArea < 1) then	0
			                                 else if ((IfValidAnd( ResDHWSys:IsBaseSys > 0 ) .OR. IfValidAnd( ResDHWSys:CentralSys > 0 )) .AND.
			                                          IfValidAnd( ElementType = "Heat Pump" ) .AND. IfValidAnd( HPWHBrand = "(generic)" )) then  0   ; prevent ForceStdDesign for baseline HPWH from library - SAC 8/20/18 / SAC 1/29/19 - revised for CentralSys
			                                 else  1  endif endif  }

;"store BEMProc details"		Proj:Action = {  StoreBEMProc( "aft set ForceStdDesign", 0 )  }
;"debugging"		Proj:Action		= {	MessageBox( "BudgetConversion following ForceStdDesign rule" )  }

; removed all DwellUnitType:* rules

; removed all Zone:DHWSys2 rules

; removed all DwellUnitType:* rules

; SAC 8/15/18 - method of importing and referencing later a single Std design HPWH not valid for Com rules due to parent/child relationship of ResDHWSys and ResWtrHtr
;   ; SAC 2/16/18 - (tic #983)
;   "Import HPWH from library if use is possible"      Proj:StdElecDHWHeater = {
;         if (IfValidAnd( EngyCodeYearNum >= 2019 ) .AND. SimulateResStdDHW > 0.5 .AND. SumAll( ResDHWSys:HeatersAllElec ) > 0)
;         then  RuleLibrary( DHWHeater, "Std UEF2 NEEA HPWH" )
;         else  UNDEFINED  endif  }
;   "Set Proj:StdElecDHWHeater:ForceStdDesign"   Proj:StdElecDHWHeater:ForceStdDesign = {  0  }

; SAC 8/15/18 - not needed for Com rules since all res water heaters are objects of type ResWtrHtr
;; added defaulting rules from other Res rulelists
;	"Set Proj:MaxNewNCntrlDHWSys"		Proj:MaxNewNCntrlDHWSys	= {
;		if (Proj:RunAbbrev == "s" .OR. Proj:RunAbbrev == "S" .OR. Proj:RunAbbrev == "smf" .OR. Proj:RunAbbrev == "dr" .OR. RunScope != 1) then  UNCHANGED
;		else	MaxAllComp( ResDHWSys:AreaServedDetails[1] )  endif  }		; SAC 2/25/16 - previously summed ResDHWSys:NewNCntrlAreaServed[1]
;
;  ; SAC 1/11/16 - REPLACE first heater in MaxNewNCntrlDHWSys if it is NOT a DHWHeater object (could be an air-to-water heat pump) (tic 560)
;  ; SAC 6/27/18 - fix problem where return value from EvalRulelist() incompatible w/ original rule property (Proj:MaxNewNCntrlDHWSys:DHWHeater[1])
;	"Replace Proj:MaxNewNCntrlDHWSys:DHWHeater[1] (if necessary)"	
;				Proj:MaxNewNCntrlDHWSys:Action      	= {	if (SimulateResStdDHW < 0.5 .OR. IfValidAnd( MaxNewNCntrlDHWSys:Status = "Existing" ) .OR.
;																				 (IsMultiFamily > 0.5 .AND. IfValidAnd( MaxNewNCntrlDHWSys:CentralSys > 0.5 )) .OR.
;																				 (IfValidAnd( MaxNewNCntrlDHWSys:IsAltered > 0.5 ) .AND. IfValidAnd( MaxNewNCntrlDHWSys:IsVerified > 0.5 ))) then  UNCHANGED
;																			else if (LocalCompAssigned( MaxNewNCntrlDHWSys:DHWHeater[1] ) == ComponentType( "DHWHeater" )) then  UNCHANGED
;																			else	EvalRulelist( "BudgetConversion_DHWHeater_ImportFromLibrary" )
;																			endif endif  }

; SAC 10/5/15 - Added eval of rulelist to prevent multiple heaters in a system and multipliers > 1 for any standard design system
; SAC 10/27/15 - prevent removing DHWHeater assignments from CENTRAL systems
; SAC 8/20/18 - prevent ResDHWSys adjustments to unreferenced systems
	"Trim DHWHeater assignments/counts to DHWSys objects to 1 per"		ResDHWSys:Action		= {
         if (Proj:SimulateResStdDHW < 0.5 .OR. IfValidAnd( Status = "Existing" ) .OR.
             IfValidAnd( CentralSys > 0.5 ) .OR. IfValidAnd( IsBaseSys > 1 ) .OR.
             SumRevRef( Spc:ResDHWSysRef, Spc:DwellingUnitSpcTotAreaWithMult ) < 1) then  UNCHANGED
         else	EvalRulelist( "BudgetConversion_DHWSys_SingleHeater", 1 )  endif  }

   ; SAC 1/29/19 - rule specific to Com to delete all Elec htrs that are children of small, central, no-recirc, elec ResDHWSys objects 
   "Delete Elec ResWtrHtr children of small, central, no-recirc, elec ResDHWSys objects"
      ResWtrHtr:Action  = {
         if (IfValidAnd( ResDHWSys:IsStdDesignElec > 0 )==0 .OR. IfValidAnd( ResDHWSys:CentralSys > 0.5 )==0 .OR.
             IfValidAnd( Proj:EngyCodeYearNum >= 2019 )==0) then  UNCHANGED
         else if (ElementType = "Heat Pump" .OR. ElementType = "Electric Resistance") then  DeleteComp()
         else  UNCHANGED
         endif endif  }

   ; SAC 3/8/18 - similar rule as above only this time to assign StdElecDHWHeater to each heater assignment of all-elec std design systems (tic #983)
   "Assign StdElecDHWHeater for central, no recirc, heater systems having electric heaters"		ResDHWSys:Action		= {
         if (Proj:EngyCodeYearNum < 2019 .OR. Proj:SimulateResStdDHW < 0.5 .OR. IfValidAnd( Status = "Existing" ) .OR.
             IfValidAnd( CentralSys > 0.5 )==0 .OR. DistType != "No loops or central system pump" .OR.
             IfValidAnd( IsStdDesignElec > 0 )==0 .OR. IfValidAnd( IsBaseSys > 1 )) then  UNCHANGED
         else	EvalRulelist( "BudgetConversion_DHWSys_CentralElecHeaters", 1 )  endif  }

   ; SAC 8/27/18 - new rules to restore user-specified TankZn selections to newly created/modified ResWtrHtrs
   "Set/reset ResDHWSys:MaxUserElecHtrTankZn"   ResDHWSys:MaxUserElecHtrTankZn = {
         if (Proj:SimulateResStdDHW < 0.5 .OR. IfValidAnd( Status = "Existing" ) .OR.
             SumRevRef( Spc:ResDHWSysRef, Spc:DwellingUnitSpcTotAreaWithMult ) < 1) then  0
         else  MaxRevRef( Spc:ResDHWSysRef, Spc:MaxUserElecHtrTankZn )  endif  }
   "Set baseline model ResWtrHtr:TankZn"     ResWtrHtr:TankZn  = {
         if (ResDHWSys:MaxUserElecHtrTankZn < 1) then  UNCHANGED
         else  switch (ResDHWSys:MaxUserElecHtrTankZn)
                  case  1 :  "Unconditioned"                
                  case  2 :  "Conditioned"                  
                  case  3 :  "Outside or in Exterior Closet"
                  default :  UNCHANGED
         endswitch  endif  }

  ; SAC 10/6/15 - moved rules setting DHWHeater floor area served & hydronic heating-related properties to subordinate rulelist, to facilitate their evaluation during BudgetConversion
	"Set DHWHeater floor area served properties"		Proj:Action		= {	EvalRulelist( "Default_DHWHeater_AreaServedAndHydronic" )  }
   ;      EvalRulelist( "rl_DEFAULT" )  }  ; SAC 8/15/18 - eval entire default rulelist to ensure all area served and other properties of newly created/re-assigned objects in place (?) - WON'T work due to invalid references back to User model

   ; SAC 1/12/19 - create DWHRSys for elec DHW std design if might be needed   - SAC 1/29/19 - adapted for Com (from Res)
   "Create Proj:StdElecDWHRSysRef[1] (individual HPs) if use possible"    Proj:StdElecDWHRSysRef[1]  = {
         if (SumAcrossIf( ResDHWSys:IsStdDesignElec, ResDHWSys:CentralSys = 0 ) > 0 .AND.
             T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovEff( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdsVersionYr, "BldgType", "MultiFam" ) > 0.01)
         then  CreateComp( ResDWHRSys, "Std Design Indiv ResDWHRSys" )
         else  UNCHANGED  endif  }
   "Set Proj:StdElecDWHRSysRef[1]:CSARtdEff"     Proj:StdElecDWHRSysRef[1]:CSARtdEff  = {
         T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovEff( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdsVersionYr, "BldgType", "MultiFam" )  }
   "Create Proj:StdElecDWHRSysRef[2] (sm central HPs) if use possible"    Proj:StdElecDWHRSysRef[2]  = {
         if (SumAcrossIf( ResDHWSys:IsStdDesignElec, ResDHWSys:CentralSys > 0 ) > 0)
         then  CreateComp( ResDWHRSys, "Std Design Cntrl ResDWHRSys" )
         else  UNCHANGED  endif  }
   "Set Proj:StdElecDWHRSysRef[2]:CSARtdEff"     Proj:StdElecDWHRSysRef[2]:CSARtdEff  = {  60  }

   "Refresh ResDHWSys:WtrHtrCnt"    ResDHWSys:WtrHtrCnt  = {  SumChildren(ResWtrHtr:Cnt)  }

; SAC 1/29/19 - ported small central HPWH sizing rules from Res
   ; SAC 12/11/18 - set flag to trigger HPWH sizing prior to final simulation (by DHWSys) - HPWHSIZE
   ; SAC 12/16/18 - added logic ensuring StdElecDHWHeater:HeaterElementType = 5 (not the case in StdMixedFuel runs) - HPWHSIZE
   ; SAC 12/19/18 - added logic to PREVENT HPWH sizing for any non-central system - HPWHSIZE
   "Set ResDHWSys:HPWHSizingReqd flag"    ResDHWSys:HPWHSizingReqd  = {
         if (IfValidAnd( IsStdDesignElec > 0 )==0 .OR. IfValidAnd( CentralSys > 0 )==0) then  UNDEFINED
         else if (DistType = "No loops or central system pump" .AND. IfValidAnd( NumDUsServed <= 8 ) .AND.
                  SumChildrenIf( ResWtrHtr:Cnt, ResWtrHtr:ElementType = "Heat Pump" ) > 0) then  1
         else  UNDEFINED  endif endif  }
   "Set Proj:CSE_HPWHSizingReqd"       Proj:CSE_HPWHSizingReqd  = {  SumAll( ResDHWSys:HPWHSizingReqd )  }

   "Set DHWSolarSys:NumHPWHNeedingSizing - # DHWSystems served that require CSE HPWH sizing performed"   DHWSolarSys:NumHPWHNeedingSizing  =    ; SAC 2/11/20 (Res tic #862)
      {  if (IfValidAnd( FloorAreaServed > 0 )==0) then  UNDEFINED
         else  SumRevRef( ResDHWSys:DHWSolarSysRef, ResDHWSys:HPWHSizingReqd )  endif  }
   "Set Proj:CSE_HPWHSizUseSSF - whether HPWH sizing runs need to use annual/constant SSFs (rather than DHWSolarSys) during sizing process"     ; SAC 2/11/20 (Res tic #862)
      Proj:CSE_HPWHSizUseSSF   = {  if (MaxAll( DHWSolarSys:NumHPWHNeedingSizing ) > 1) then  1  else  UNDEFINED  endif  }

   "Set ResDHWSys:HPWHSizeMultGuess (based on # dwelling units served and how many heaters in system)"    ResDHWSys:HPWHSizeMultGuess  = {
         if (IfValidAnd( HPWHSizingReqd > 0 ))
         then  if (IfValidAnd( NumDUsServed > 0 ) .AND. IfValidAnd( WtrHtrCnt > 0 ))
               then  max( 2, ValidOr( Proj:CSE_HPWHSzGuessMlt, 1/3 ) * NumDUsServed / WtrHtrCnt )
               else if (IfValidAnd( NumDUsServed > 0 ))
               then  max( 2, ValidOr( Proj:CSE_HPWHSzGuessMlt, 1/3 ) * NumDUsServed )
               else  3  endif endif
         else  UNDEFINED  endif  }
      ;ResDHWSys:HPWHSizeMult,   NotInput,   BEMP_Flt,  1,  0,  0,  "HPWH size multiplier (resulting from sizing runs triggered by HPWHSizingReqd)" 

   ; SAC 1/1/19 - revised HPWHSIZE properties to drive new 3-run curve fit sizing mechanism
   "Set Proj:StdHPWHSzNumRuns"      Proj:StdHPWHSzNumRuns  = {
         ; if (IfValidAnd( BypassRuleLimits > 0 ) .AND. LocalStatus( StdHPWHSzNumRuns ) > 5) then  UNCHANGED  else
         if (CSE_HPWHSizingReqd < 0.5) then  UNDEFINED
         else  3  endif  }
   ; SAC 1/2/19 - HPWHSIZE
   "Set Proj:StdHPWHSzTDVTbl"       Proj:StdHPWHSzTDVTbl  = {
         ; if (IfValidAnd( BypassRuleLimits > 0 ) .AND. LocalStatus( StdHPWHSzTDVTbl ) > 5) then  UNCHANGED  else
         if (CSE_HPWHSizingReqd < 0.5) then  UNDEFINED
         else  Proj:TDVMultTableName[1]  endif  }     ; SAC 1/12/20 - 2022
      ;   else  "TDVbyCZandFuel"  endif  }
   "Set Proj:StdHPWHSzTDVCol"       Proj:StdHPWHSzTDVCol  = {
         ; if (IfValidAnd( BypassRuleLimits > 0 ) .AND. LocalStatus( StdHPWHSzTDVCol ) > 5) then  UNCHANGED  else
         if (CSE_HPWHSizingReqd < 0.5) then  UNDEFINED
         else  ((CliZnNum-1) * 3) + 2  endif  }
   ; SAC 1/3/19 - revisions to multiplier guess formulas // SAC 1/4/19 - readjust mins: none for StdHPWHSzRunMlts[2] and 0.2 for [1]
   "Set ResDHWSys:StdHPWHSizingRunMults[2] (best guess)"      ResDHWSys:StdHPWHSizingRunMults[2]  = {
         ; if (IfValidAnd( Proj:BypassRuleLimits > 0 ) .AND. LocalStatus( StdHPWHSizingRunMults[2] ) > 5) then  UNCHANGED  else
         if (IfValidAnd( HPWHSizingReqd > 0 )==0) then  UNDEFINED
         else  if (IfValidAnd( NumDUsServed >= 2 ) .AND. IfValidAnd( NumBedroomsServed >= 0 ) .AND. IfValidAnd( WtrHtrCnt > 0 ))
               then  (1 + ((NumDUsServed - 2) * 0.33) + (NumBedroomsServed * 0.0125)) / WtrHtrCnt
               else if (IfValidAnd( NumDUsServed >= 2 ) .AND. IfValidAnd( NumBedroomsServed >= 0 ))
               then  (1 + ((NumDUsServed - 2) * 0.33) + (NumBedroomsServed * 0.0125))
               else  2  endif endif
         endif  }
   "Set ResDHWSys:StdHPWHSizingRunMults[1] (low end)"         ResDHWSys:StdHPWHSizingRunMults[1]  = {
         ; if (IfValidAnd( Proj:BypassRuleLimits > 0 ) .AND. LocalStatus( StdHPWHSizingRunMults[1] ) > 5) then  UNCHANGED  else
         if (IfValidAnd( HPWHSizingReqd > 0 )==0) then  UNDEFINED
         else  max( 0.2, (ValidOr( StdHPWHSizingRunMults[2], 1 ) * 0.3) )
         endif  }
   ;      else  max( 0.2, (ValidOr( StdHPWHSizingRunMults[2], 2 ) - 1.5) )
   "Set ResDHWSys:StdHPWHSizingRunMults[3] (high end)"        ResDHWSys:StdHPWHSizingRunMults[3]  = {
         ; if (IfValidAnd( Proj:BypassRuleLimits > 0 ) .AND. LocalStatus( StdHPWHSizingRunMults[3] ) > 5) then  UNCHANGED  else
         if (IfValidAnd( HPWHSizingReqd > 0 )==0) then  UNDEFINED
         else  ValidOr( StdHPWHSizingRunMults[2], 1 ) * 1.4
         endif  }
   "Set Proj:CSE_HPWHSzGuessMlt"       Proj:CSE_HPWHSzGuessMlt   = {
         ; if (IfValidAnd( BypassRuleLimits > 0 ) .AND. LocalStatus( CSE_HPWHSzGuessMlt ) > 5) then  UNCHANGED  else
         if (CSE_HPWHSizingReqd < 0.5) then  UNDEFINED
         else  1/3
         endif  }  ; SAC 12/25/18 - added to enable manipulation of HPWH sizing guess
   "Set Proj:StdHPWHSizingForm"        Proj:StdHPWHSizingForm  = {
         ; if (IfValidAnd( BypassRuleLimits > 0 ) .AND. LocalStatus( StdHPWHSizingForm ) > 5) then  UNCHANGED  else
         if (CSE_HPWHSizingReqd < 0.5) then  UNDEFINED
         else  0     ; XBU/Total
         endif  }    ; Formula used to calculate HPWH size fraction used in iterative sizing calc - SAC 12/26/18 (HPWHSIZE)
   ; SAC 1/29/19 - end of small central HPWH sizing port from Res

   ; LDH 170722 calculate or lookup intermediate variables used to determine minimum efficiency for UEF rated DHW equip
  "Set Tank Volume Category Index for Consumer UEF rated storage water heaters"  ResWtrHtr:UEFMinTankVolCatIdx ={
    if( ( IfValidAnd( HtrTypeNum = 12 ) .AND.
          LocalStatus( TankVol ) > 0 ) .OR.
        ( ElementType = "Heat Pump" .AND.
          IsUEF ) )
    then if( IfValidAnd( TankVol <= 55 ) )
      then 1   ;   <=55 gal
      else 2   ;   >50 gal
      endif
    else 0     ;   na
    endif }

   "Ensure valid/current ResWtrHtr:HeaterElementTypeIdx"    ResWtrHtr:HeaterElementTypeIdx  = {
    switch (ElementType)
      case "Electric Resistance" : 0
      case "Gas"                 : 1
      case "Heat Pump"           : 5
      default : -1
    endswitch  }

  "Setup initial two ResWtrHtr UEF properties UEF data"   ResWtrHtr:Action = {
      if (IfValidAnd( IsUEF > 0 )==0) then  UNCHANGED
      else  EvalRulelist( "ResWtrHtr_UEF_Init", 1 )  endif  }

  "Lookup up Volume Coef for UEFMin Equation"  ResWtrHtr:UEFMinCoef1 = {
    if (IfValidAnd( IsUEF > 0 )==0) then  0
      else  CAUEFMinCoef:Coef1_Vol( "HeaterElementTypeIdx",HeaterElementTypeIdx,
                            "TankTypeIdx",HtrTypeNum,
                            "TankVolCatIdx",UEFMinTankVolCatIdx,
                            "DrawPattern", UEFModelDrawPattern )  endif }

  "Lookup up Constant Coef for UEFMin Equation"  ResWtrHtr:UEFMinCoef2 = {
    if (IfValidAnd( IsUEF > 0 )==0) then  0
      else  CAUEFMinCoef:Coef2_Const( "HeaterElementTypeIdx",HeaterElementTypeIdx,
                              "TankTypeIdx",HtrTypeNum,
                              "TankVolCatIdx",UEFMinTankVolCatIdx,
                              "DrawPattern", UEFModelDrawPattern )  endif }


; SAC 8/15/18 - no AltDHWSys* in Com ... (?)
;   ; LDH 170722 moved rule above rulelist calls which switch heater element type and tank type
;   ; SAC 8/22/16 - updated old 0.60 EnergyFactor w/ 0.82 (tic #740)
;// TO DO - This can all be collapsed into one equation if the tables referenced above are expanded to handle non-UEF types , no time to test prior to current release.
;	"Assign Code-level EnergyFactor for Altered DHWHeater" ResWtrHtr:AltEnergyFactor = {	   
;    if (Proj:DRtgRefRunID == 2014)			; "RESNET2014"
;    then	switch ( ElementType )
;      case "Electric Resistance" :	0.9172   ; "electric"                                      
;      case "Gas"       :	0.60	   ; "gas"                                       
;      case "Heat Pump" :	0.9172   ; "heat pump"                                     
;      default :	0.60
;      endswitch
;    else	switch (ElementType)
;      case "Electric Resistance" :	
;        switch (HtrTypeNum)			; "Electric Resistance" 
;        case  5 : int( 1000 * ( 0.93 - (0.00132 * ValidOr( TankVol, 0 )) ) + 0.5 ) / 1000  ; "Small Tankless"
;        case  6 :	if (IfValidAnd( TankVol > 55 ))           ; "Small Storage"  		; SAC 1/4/16 - .97 -> .945 (tic 547)
;          then int( 1000 * ( 2.057 - (0.00113 * TankVol               ) ) + 0.5 ) / 1000
;			  	else int( 1000 * ( 0.960 - (0.0003  * ValidOr( TankVol, 50 )) ) + 0.5 ) / 1000  
;          endif
;        case 10 : int( 1000 * ( UEFMinCoef2 + (UEFMinCoef1  * ValidOr( TankVol, 0  )) ) + 0.5 ) / 1000 
;        case 12 : int( 1000 * ( UEFMinCoef2 + (UEFMinCoef1  * ValidOr( TankVol, 50 )) ) + 0.5 ) / 1000   
;        case 15 : int( 1000 * ( UEFMinCoef2 + (UEFMinCoef1  * ValidOr( TankVol, 50 )) ) + 0.5 ) / 1000   
;        default : 0.93
;        endswitch
;      case "Gas" : 
;        switch (HtrTypeNum)       ; "Natural Gas"   
;        case  5 :   int( 1000 * ( 0.82 - (0.0019 * ValidOr( TankVol, 0 )) ) + 0.5 ) / 1000   ; "Small Tankless"
;        case  6 :	if (IfValidAnd( TankVol > 55 ))           ; "Small Storage"
;          then int( 1000 * ( 0.8012 - (0.00078 * TankVol               ) ) + 0.5 ) / 1000
;          else int( 1000 * ( 0.675  - (0.0015  * ValidOr( TankVol, 50 )) ) + 0.5 ) / 1000  
;          endif
;        case 10 : int( 1000 * ( UEFMinCoef2 + (UEFMinCoef1  * ValidOr( TankVol, 0  )) ) + 0.5 ) / 1000 
;        case 12 : int( 1000 * ( UEFMinCoef2 + (UEFMinCoef1  * ValidOr( TankVol, 50 )) ) + 0.5 ) / 1000   
;        case 15 : int( 1000 * ( UEFMinCoef2 + (UEFMinCoef1  * ValidOr( TankVol, 50 )) ) + 0.5 ) / 1000  
;        default :   0.80							; SAC 11/10/15 - updated from 0.575
;        endswitch
;      case "Heat Pump" :   
;        switch( IsUEF ) 
;        case 1 : int( 1000 * ( UEFMinCoef2 + (UEFMinCoef1  * ValidOr( TankVol, 50 )) ) + 0.5 ) / 1000
;        default: if( IfValidAnd( HPWH_NEEARated  = 1 ) )
;                 then 0.59
;                 else int( 1000 * ( 0.97 - (0.00132 * ValidOr( TankVol, 50 )) ) + 0.5 ) / 1000
;                 endif
;        endswitch
;      default :	0.59
;      endswitch   
;    endif }


	; SAC 10/27/15 - moved rule setting ResWtrHtr:HeaterElementType to subordinate rulelist to prevent Resets of other properties we want to retain
	"Eval rulelist to reset ResWtrHtr:ElementType when needed"	Proj:Action	= {	EvalRulelist( "BudgetConversion_DHWHeater_ElementType" )  }

;"store BEMProc details"		Proj:Action = {  StoreBEMProc( "b4 ResDHWBudgConv-TankType", 0 )  }
;"debugging"		Proj:Action		= {	MessageBox( "BudgetConversion prior to ResDHWBudgConv-TankType rules" )  }

	; SAC 10/27/15 - moved rule setting ResWtrHtr:TankType to subordinate rulelist to prevent Resets of other properties we want to retain
	; SAC 1/12/20 - added logic to prevent reset of TankType for new central, recirc, gas boilers (Com tic #3156)
	"Eval rulelist to reset ResWtrHtr:TankType when needed"	ResWtrHtr:Action	=
      {  if (TankCat == "Commercial Packaged Boiler" .AND. LocalStatus( TankCat ) == 3) then  UNCHANGED
         else  EvalRulelist( "BudgetConversion_DHWHeater_TankType", 1 )  endif  }

   ; SAC 4/20/15 - added logic for Propane (needed for 2016 standard design)
   ; SAC 8/28/17 - apply new StdInpRtgConv (fuel unit conversion factor) should InputRating be retained in translation from prop to std model (tic #893)
   ; SAC 6/13/18 - updated InputRating property name to InputRatingSim to accommodate InputRating being ignored for most heater types (tic #940)
; SAC 8/15/18 - split into separate InpRating / InpRatingElec rules based on heater fuel
	"Reset ResWtrHtr:InpRating (when simulating std design)"
      ResWtrHtr:InpRating			= {
         if (IfValidAnd( ForceStdDesign > 0.5 )==0) then  UNCHANGED
         else	switch (ElementType)
         			case "Electric Resistance" :   			; (watts)  "Electric Resistance"
         			         	UNDEFINED 
         			case "Gas" :   			; (Btu/hr)  "Natural Gas"   
         							if (HtrTypeNum == 5) then  		200000			; Small Instantaneous
         							else if (HtrTypeNum == 9) then  UNDEFINED		; Consumer Instantaneous (UEF)-New
         							else if (HtrTypeNum == 0 || 							; "Boiler"     ; SAC 8/28/17 - retain user's InputRating for central boilers & indirect heaters (tic #892)
         							         HtrTypeNum == 16 || 							; "Commercial Packaged Boiler"   ; SAC 1/11/20 (Com tic #3156)
         							         HtrTypeNum == 1 || 							; "Indirect"
         							         HtrTypeNum == 3 || 							; "Large Storage"
         										HtrTypeNum == 2)                      ; "Large Instantaneous"
         							then	if (LocalStatus(InpRating) < 1) then  UNCHANGED
         	;		                  else  InpRating * ValidOr( StdInpRtgConv, 1 )  endif
         			                  else  InpRating  endif
         							else 				40000  endif endif endif	   ; "Small Storage"
         			default :	UNDEFINED
         		endswitch  endif  }
	"Reset ResWtrHtr:InpRatingElec (when simulating std design)"
      ResWtrHtr:InpRatingElec			= {
         if (IfValidAnd( ForceStdDesign > 0.5 )==0) then  UNCHANGED
         else	switch (ElementType)
         			case "Electric Resistance" :   			; (watts)  "Electric Resistance"
         			         	if (ResDHWSys:NewCntrlAreaServed >= 1)
         			            then  if (LocalStatus(InpRatingElec) < 1) then  UNCHANGED
         	;		                  else  InpRatingElec * ValidOr( StdInpRtgConv, 1 )  endif
         			                  else  InpRatingElec  endif
         							else  8000  endif										; (watts)   "Electric Resistance" 
         			case "Gas" :   			; (Btu/hr)  "Natural Gas"   
         							UNDEFINED
         			default :	UNDEFINED
         		endswitch  endif  }


	"Reset ResWtrHtr:TankVol (when simulating std design)"	
			ResWtrHtr:TankVol				= {	if (IfValidAnd( ForceStdDesign > 0.5 )==0) then  UNCHANGED
													;		else if (Proj:DRtgRefRunID == 2014 .AND. (ElementType = "Electric Resistance" .OR. ElementType = "Gas") .AND.		; SAC 4/15/16 - use 40gal for Gas RESNET as well
													;						(HtrTypeNum == 5 || HtrTypeNum == 6)) then  40		; SAC 4/7/16 - tic #631
															else if (ResDHWSys:NewCntrlAreaServed >= 1 .and. (HtrTypeNum == 5 || HtrTypeNum == 6)) then  UNCHANGED
															else if (HtrTypeNum == 5) then   0			; Small Instantaneous
															else if (HtrTypeNum == 9) then   0			; Consumer Instantaneous (UEF)-New
															else if (HtrTypeNum == 6) then  50			; "Small Storage" 
															else  UNCHANGED
															endif endif endif endif endif  }

	"Reset ResWtrHtr:TankIntInsR (when simulating std design)"		ResWtrHtr:TankIntInsR		= {	if (IfValidAnd( ForceStdDesign > 0.5 )==0 .OR. ResDHWSys:NewCntrlAreaServed >= 1) then  UNCHANGED  else  0  endif  }
	"Reset ResWtrHtr:TankExtInsR (when simulating std design)"		ResWtrHtr:TankExtInsR		= {	if (IfValidAnd( ForceStdDesign > 0.5 )==0 .OR. ResDHWSys:NewCntrlAreaServed >= 1) then  UNCHANGED  else  0  endif  }
	"Reset ResWtrHtr:StdbyLossFrac (when simulating std design)"	ResWtrHtr:StdbyLossFrac	   = {	if (IfValidAnd( ForceStdDesign > 0.5 )==0 .OR. ResDHWSys:NewCntrlAreaServed >= 1) then  UNCHANGED  else  0  endif  }
; SAC 8/6/18 - holding off on port of DHW heater standby loss multiplier (and corresponding cseDHWHEATER:whUAMult - for simulating insulation blanket on HPWHs)
;	"Reset ResWtrHtr:StandbyLossMult (when simulating std design)"	ResWtrHtr:StandbyLossMult	= {	if (IfValidAnd( ForceStdDesign > 0.5 )==0 .OR. ResDHWSys:NewCntrlAreaServed >= 1) then  UNCHANGED  else  1  endif  }    ; SAC 10/18/17

	; SAC 11/10/15 - add standby loss defaulting for large heaters based on fed appliance stds   - SAC 11/11/15 - added in elec storage losses + indirect fuel   - SAC 11/19/15 - added logic to set SBL to 0 for non-elec tanks < 10gal
   ; SAC 8/28/17 - revised logic to leave user input (pilot energy) unchanged when TankVol >0 & <10 gals (tic #895)
   ; SAC 11/13/17 - revised result via new round() function to ensure consistency w/ input project precision (tic #892)
	"Set standard design ResWtrHtr:StdbyLossFrac for heaters"
				ResWtrHtr:StdbyLossFrac	   = {	if (IfValidAnd( ForceStdDesign > 0.5 )==0) then  UNCHANGED
															else if (ElementType = "Gas" .AND. HtrTypeNum == 9) then  UNDEFINED      ; Consumer Instantaneous (UEF)-New
															else if (IfValidAnd( TankVol > 0 )==0) then  UNCHANGED
															else if (ElementType = "Electric Resistance")  ; .OR. HeaterElementType = 3 .OR. HeaterElementType = 6)		; Electric
															then	if (HtrTypeNum == 2 .OR. HtrTypeNum == 0 .OR. HtrTypeNum == 1)
																	then	round( ((0.3 + (27 / TankVol )) / 100) * (8.25 * TankVol * 70), 5 )		; Btuh
																	else if (HtrTypeNum == 3)
																	then	round(  (0.3 + (27 / TankVol )) / 100, 5 )											; frac
																	else	UNCHANGED  endif endif
															else if (ElementType != "Electric Resistance")  ; .AND. HeaterElementType != 3 .AND. HeaterElementType != 6)	; NOT elec
															then	if (HtrTypeNum == 2 .OR. HtrTypeNum == 0 .OR. HtrTypeNum == 1)
																	then	if (TankVol < 10) then  UNCHANGED
																			else	round(  (ValidOr( InpRating, 0 ) / 800) + (110 * sqrt( TankVol )), 5 )										; Btuh	
																			endif
																	else if (HtrTypeNum == 3)
																	then	if (TankVol < 10) then  UNCHANGED
																			else	round( ((ValidOr( InpRating, 0 ) / 800) + (110 * sqrt( TankVol ))) / (8.25 * TankVol * 70), 5 )	; frac
																			endif
																	else	UNCHANGED  endif endif
															else	UNCHANGED  endif endif endif endif endif  }

; SAC 8/15/18 - not currently used/referenced
;   ; SAC 8/22/16 - fix for below rule to store away AltDHWSys1:DHWHeater[1]:EnergyFactor PRIOR to being reset so that multiple comparisons (due to mult zone assignments) set consistently (tic #740)
;   "Store ResWtrHtr:EnergyFactor away for later comparison (into :PropEnergyFactor)"
;         ResWtrHtr:PropEnergyFactor  = {  EnergyFactor
;      ;   ResWtrHtr:PropEnergyFactor  = {  if (Proj:DRtgRefRunID > 0) then  UNCHANGED
;      ;                                    else  EnergyFactor  endif  }

	; SAC 9/1/15 - added logic to ensure EnergyFactor defaulted when ForceStdDesign true and TankType == Small Storage (or anything other than Small Instantaneous)
;  mjb 02/25/16   RESNET
   ; SAC 8/29/16 - updated 2016 T-24 efficiencies for small storage & instantaneous heaters to properly reflect tank size adjustments present in federal standards (table F-3) (tic #725)
   ; SAC 8/31/16 - added logic to round efficiencies to nearest 1/1000 (tic #725)
	"Assign Code-level EnergyFactor for DHWHeater"		; SAC 3/19/15 - added for 2016, multi-family, non-central DHW -> instantaneous
			ResWtrHtr:EF 	= {	if (IfValidAnd( ForceStdDesign > 0.5 )==0) then  UNCHANGED
												;	else if (HtrTypeNum == 5) then  0.82		; Small Instantaneous
										;			else if (Proj:DRtgRefRunID == 2014)			; "RESNET2014"
										;			then	switch (ElementType)
										;						case "Electric Resistance" :	switch (HtrTypeNum)			; "Electric Resistance" 
										;											case  6 :	0.9172				; "Small Storage" 
										;											case  5 :   0.9172				; "Small Tankless"
										;											default :   0.9172
										;										endswitch
										;						case "Gas" :   switch (HtrTypeNum)       ; "Natural Gas"   
										;											case  6 :	0.594					; "Small Storage" 
										;											case  5 :   0.594					; "Small Tankless"
										;											default :   0.594
										;										endswitch
										;						case "Heat Pump" :   switch (HtrTypeNum)       ; "Heat Pump"           
										;											case  6 :	0.9172				; "Small Storage" 
										;											case  5 :   0.9172				; "Small Tankless"
										;											default :   0.9172
										;										endswitch
										;						default :	0.59
										;					endswitch
										;			else if (Proj:DRtgRefRunID == 2006)		; SAC 3/15/16 - same as CARes2013-14 for IECC2006 (tic #625)
										;			then	switch (ElementType)
										;						case "Electric Resistance" :	switch (HtrTypeNum)			; "Electric Resistance" 
										;											case  6 :	0.945					; "Small Storage" 		; SAC 1/4/16 - .97 -> .945 (tic 547)
										;											case  5 :   0.93					; "Small Tankless"
										;											default :   0.93
										;										endswitch
										;						case "Gas" :   switch (HtrTypeNum)       ; "Natural Gas"   
										;											case  6 :	0.575					; "Small Storage" 
										;											case  5 :   0.82					; "Small Tankless"
										;											default :   0.575
										;										endswitch
										;						case "Heat Pump" :   switch (HtrTypeNum)       ; "Heat Pump"           
										;											case  6 :	0.97					; "Small Storage" 
										;											case  5 :   0.97					; "Small Tankless"
										;											default :   0.97
										;										endswitch
										;						default :	0.59
										;					endswitch
													else	switch (ElementType)
																case "Electric Resistance" :	switch (HtrTypeNum)			; "Electric Resistance" 
																					case  6 :	if (IfValidAnd( TankVol > 55 ))           ; "Small Storage"  		; SAC 1/4/16 - .97 -> .945 (tic 547)
																					            then  int( 1000 * ( 2.057 - (0.00113 * TankVol               ) ) + 0.5 ) / 1000
																					            else  int( 1000 * ( 0.960 - (0.0003  * ValidOr( TankVol, 50 )) ) + 0.5 ) / 1000  endif
																					case  5 :   int( 1000 * ( 0.93 - (0.00132 * ValidOr( TankVol, 0 )) ) + 0.5 ) / 1000  ; "Small Tankless"
																					default :   0.93
																				endswitch
																case "Gas" :   switch (HtrTypeNum)       ; "Natural Gas"   
																					case  6 :	if (IfValidAnd( TankVol > 55 ))           ; "Small Storage"
																					            then  int( 1000 * ( 0.8012 - (0.00078 * TankVol               ) ) + 0.5 ) / 1000
																					            else  int( 1000 * ( 0.675  - (0.0015  * ValidOr( TankVol, 50 )) ) + 0.5 ) / 1000  endif
																					case  5 :   int( 1000 * ( 0.82 - (0.0019 * ValidOr( TankVol, 0 )) ) + 0.5 ) / 1000   ; "Small Tankless"
																					case  9 :   0.81					; Consumer Instantaneous (UEF)-New
																					default :   0.80							; SAC 11/10/15 - updated from 0.575
																				endswitch
																case "Heat Pump" :   switch (HtrTypeNum)       ; "Heat Pump"    val = 3??         
																					case  6 :	int( 1000 * ( 0.97 - (0.00132 * ValidOr( TankVol, 50 )) ) + 0.5 ) / 1000   ; "Small Storage" 
																					case  5 :   int( 1000 * ( 0.97 - (0.00132 * ValidOr( TankVol,  0 )) ) + 0.5 ) / 1000   ; "Small Tankless"
																					default :   0.97
																				endswitch
													;			case  4 :   switch (HtrTypeNum)       ; "Oil"   
													;								case  6 :	0.60					; "Small Storage" 
													;								case  5 :   0.82					; "Small Tankless"
													;								default :   0.575
													;							endswitch
																default :	0.59
															endswitch
													endif  }
   ; SAC 1/11/20 - added logic to handle "Commercial Packaged Boiler" (Com tic #3156)
	"Assign Code-level ThrmlEff for DHWHeater"		; SAC 3/19/15 - added for 2016, multi-family, non-central DHW -> instantaneous  - SAC 8/19/18 - ported from ResWaterHeater and updated from above
	   ResWtrHtr:ThrmlEff 	= {
	      if (IfValidAnd( ForceStdDesign > 0.5 )==0) then  UNCHANGED
         else if( Proj:ResDHWUserAndBaseline .OR. Proj:ResDHWBothBaseline )
         then 
           if( IfValidAnd( TankType = "Large Storage" ) .OR. IfValidAnd( TankType = "Large Instantaneous" ) .OR.
               IfValidAnd( TankType = "Boiler" ) .OR. IfValidAnd( TankType = "Indirect" ) .OR. 
               IfValidAnd( TankType = "Commercial Packaged Boiler" ) .OR.
               IfValidAnd( TankType = "Consumer Instantaneous (UEF)" ) .OR. IfValidAnd( TankType = "Commercial Instantaneous (TE)" ) .OR.
               IfValidAnd( TankType = "Commercial Storage (TE & SBL)" ) .OR. 
               IfValidAnd( TankType = "Residential-Duty Commercial Storage (UEF)" ) .OR. IfValidAnd( TankType = "Residential-Duty Commercial Instantaneous (UEF)" ) ) 
           then 0.80
           else UNDEFINED
           endif
         else if( Proj:ResDHWPropOnly )
         then 
           if (IfValidAnd( IsBaseSys > 0 ))
           then 
           if( IfValidAnd( TankType = "Large Storage" ) .OR. IfValidAnd( TankType = "Large Instantaneous" ) .OR.
               IfValidAnd( TankType = "Boiler" ) .OR. IfValidAnd( TankType = "Indirect" ) .OR. 
               IfValidAnd( TankType = "Commercial Packaged Boiler" ) .OR.
               IfValidAnd( TankType = "Consumer Instantaneous (UEF)" ) .OR. IfValidAnd( TankType = "Commercial Instantaneous (TE)" ) .OR.
               IfValidAnd( TankType = "Commercial Storage (TE & SBL)" ) .OR. 
               IfValidAnd( TankType = "Residential-Duty Commercial Storage (UEF)" ) .OR. IfValidAnd( TankType = "Residential-Duty Commercial Instantaneous (UEF)" ) )            
             then 0.80
             else UNDEFINED
             endif
           else UNCHANGED
           endif
         else if( Proj:ResDHWNone )
         then 
           UNDEFINED     ; no DHW modeled
         else 
           UNDEFINED
         endif endif endif endif  }
	"Set code baseline ResWtrHtr:RcvryEff"  ; SAC 8/19/18 - ported from Res ruleset - Rules_Default_DHW.rule
	   ResWtrHtr:RcvryEff	= {
	      if (IfValidAnd( ForceStdDesign > 0.5 )==0) then  UNCHANGED
       ;  else if ( CanBeCHWHeater .AND. HeaterType < 9 )	then  70
         else
   	   	switch (ElementType)
               case  "Electric Resistance" :  ; 0 :            ; "Electric Resistance" 
                  switch (HtrTypeNum) ; HeaterType)
                     case 10 :   99		; "Consumer Instantaneous (UEF)"             
                     case 12 :   99		; "Consumer Storage (UEF)"                   
                     default :   UNDEFINED
                  endswitch
               case  "Gas"                 :  ; 1 :          ; "Natural Gas"   
                  switch (HtrTypeNum) ; HeaterType)
        ;             case  9 :   82		; "Consumer Instantaneous (UEF)-New" 
                     case  9 : min( 99, ((1.0702 * ValidOr( UEF, 0.81 ) - 0.0332) * 100) )		; "Consumer Instantaneous (UEF)-New"  - installed new default formula (Res tic #1054) - SAC 1/29/19 // set max of 99 - SAC 1/31/19
                     case 10 :   83		; "Consumer Instantaneous (UEF)"             
                     case 12 :   78		; "Consumer Storage (UEF)"                   
                     case 14 :   80		; "Residential-Duty Commercial Storage (UEF)"
                     default :   UNDEFINED
                  endswitch
               default :  UNDEFINED
            endswitch
         endif  }

   ; SAC 8/15/17 - added properties specific to 'Consumer Instantaneous (UEF)-New' type
	"Set ResWtrHtr:RtdFlow"		ResWtrHtr:RtdFlow 		= {  
	      if (IfValidAnd( ForceStdDesign > 0.5 )==0 .OR. HtrTypeNum != 9) then  UNCHANGED  else  4.7  endif  }
	"Set ResWtrHtr:AnnualFuelUse"		ResWtrHtr:AnnualFuelUse 	= {  
	      if (IfValidAnd( ForceStdDesign > 0.5 )==0 .OR. HtrTypeNum != 9) then  UNCHANGED  else  205  endif  }
	"Set ResWtrHtr:AnnualElecUse"		ResWtrHtr:AnnualElecUse 	= {  
	      if (IfValidAnd( ForceStdDesign > 0.5 )==0 .OR. HtrTypeNum != 9) then  UNCHANGED  else  52   endif  }
	"Set ResWtrHtr:StdbyElec"	ResWtrHtr:StdbyElec 	= {  
	      if (IfValidAnd( ForceStdDesign > 0.5 )==0 .OR. HtrTypeNum != 9) then  UNCHANGED  else  4   endif  }
	;"Set ResWtrHtr:RcvryEff"		ResWtrHtr:RcvryEff 		= {  
	;      if (IfValidAnd( ForceStdDesign > 0.5 )==0 .OR. HtrTypeNum != 9) then  UNCHANGED  else  82  endif  }  - allow to default via formula (Res tic #1054) - SAC 1/18/19

; SAC 9/19/16 - prevent proposed ElecMiniTank from transferring into baseline model
	"Disable ResWtrHtr:ElecMiniTank (if applicable)"
      ResWtrHtr:ElecMiniTank   = {  if (IfValidAnd( ForceStdDesign > 0.5 )==0) then  UNCHANGED
                                       else  0  endif  }

; SAC 8/22/16 - altered existing-verified EnergyFactor comparisons to compare vs. PropEnergyFactor to ensure consistent result (tic #740)
; LDH 170531 - modified rules to assign all properties of exiting, verified DHW Heaters (rather than only EF)

; SAC 8/15/18 - no AltDHWSys* in Com ... (?)
;; AltDHWSys1 Properties
;; AltDHWSys1 - DHWHeater[1] Properties
;	"Change to Exist DHWSys1 DHWHeater[1] ElementType if better than Code"	
;   Zone:AltDHWSys1:DHWHeater[1]:ElementType = {	
;    if ( Proj:IsMultiFamily < 0.5 .AND. Proj:RunScope == 2 .AND. 
;         DHWSys1Status == 2 .AND. LocalCompAssigned( AltDHWSys1:DHWHeater[1] ) ) 
;    then
;      if ( DHWSys1Verified .AND. 
;           AltDHWSys1:DHWHeater[1]:PropEnergyFactor >= AltDHWSys1:DHWHeater[1]:AltEnergyFactor .AND.
;           LocalCompAssigned( exDHWSys1:DHWHeater[1] ) ) 
;      then exDHWSys1:DHWHeater[1]:ElementType 
;      else UNCHANGED
;      endif											   
;    else UNCHANGED 
;    endif }
;
;	"Change to Exist DHWSys1 DHWHeater[1] TankType if better than Code"	
;   Zone:AltDHWSys1:DHWHeater[1]:TankType = {	
;    if ( Proj:IsMultiFamily < 0.5 .AND. Proj:RunScope == 2 .AND. 
;         DHWSys1Status == 2 .AND. LocalCompAssigned( AltDHWSys1:DHWHeater[1] ) ) 
;    then
;      if ( DHWSys1Verified .AND. 
;           AltDHWSys1:DHWHeater[1]:PropEnergyFactor >= AltDHWSys1:DHWHeater[1]:AltEnergyFactor .AND.
;           LocalCompAssigned( exDHWSys1:DHWHeater[1] ) ) 
;      then exDHWSys1:DHWHeater[1]:TankType 
;      else UNCHANGED
;      endif											   
;    else UNCHANGED 
;    endif }
;
;	"Change to Exist DHWSys1 DHWHeater[1] EnergyFactor if better than Code"	
;   Zone:AltDHWSys1:DHWHeater[1]:EnergyFactor = {	
;    if ( Proj:IsMultiFamily < 0.5 .AND. Proj:RunScope == 2 .AND. 
;         DHWSys1Status == 2 .AND. LocalCompAssigned( AltDHWSys1:DHWHeater[1] ) ) 
;    then
;      if ( DHWSys1Verified .AND. 
;           AltDHWSys1:DHWHeater[1]:PropEnergyFactor >= AltDHWSys1:DHWHeater[1]:AltEnergyFactor .AND.
;           LocalCompAssigned( exDHWSys1:DHWHeater[1] ) ) 
;      then exDHWSys1:DHWHeater[1]:EnergyFactor 
;      else AltDHWSys1:DHWHeater[1]:EnergyFactor 
;      endif											   
;    else UNCHANGED 
;    endif }

; rules removed setting Zone:AltDHWSys1:DHWHeater[2-6]:* -and- Zone:AltDHWSys2:DHWHeater[1-6]:*

   "Set ResWtrHtr:HtrTypeNum to handle lots of defaulting and UI - needed to differentiate original Elec/Gas ConsInst from new CSE model"  ; SAC 3/1/18 (tic #993)
      ResWtrHtr:HtrTypeNum  = {
    if (ElementType = "Gas" .AND.
        TankType == "Consumer Instantaneous (UEF)" .AND.
        IfValidAnd( Proj:EngyCodeYearNum >= 2019 ))
    then  9
    else  switch (TankType)
            case "Boiler"                                          :  0
            case "Commercial Packaged Boiler"                      : 16       ; SAC 1/11/20 (Com tic #3156)
            case "Indirect"                                        :  1
            case "Large Instantaneous"                             :  2
            case "Large Storage"                                   :  3
            case "Small Instantaneous"                             :  5
            case "Small Storage"                                   :  6
            case "Consumer Instantaneous (UEF)"                    : 10
            case "Commercial Instantaneous (TE)"                   : 11
            case "Consumer Storage (UEF)"                          : 12
            case "Commercial Storage (TE & SBL)"                   : 13
            case "Residential-Duty Commercial Storage (UEF)"       : 14
            case "Residential-Duty Commercial Instantaneous (UEF)" : 15
            default : -1
          endswitch endif  }
; SAC 8/15/18 - replaced Res logic (below) w/ Com (above)
;         if (HeaterElementType == 1 .AND. TankType == 10 .AND.
;             IfValidAnd( Proj:EngyCodeYearNum >= 2019 ))
;         then  9
;         else  TankType
;         endif  }


; AltDHWSys1 SystemType
; TO DO - uncertain if window U-factor adjustments needed in CBECC-Com - (Res tic #983) - SAC 8/14/18
;   ; SAC 3/8/18 - revised logic to set flag for all-elec central systems w/ no recirc (tic #983)
;   "Set Zone:AltDHWSys1:IsStdDesignElec - whether this system is setup as an electric standard design"  ; SAC 2/16/18 - tic #983
;      Zone:AltDHWSys1:IsStdDesignElec = {
;         if (Proj:IsMultiFamily < 0.5 .AND. Proj:RunScope == 2 .AND. DHWSys1Status == 2 .AND.
;             DHWSys1Verified .AND. LocalCompAssigned( exDHWSys1 )) then  UNCHANGED
;         else if (Proj:SimulateResStdDHW > 0.5)
;         then  if (AltDHWSys1:FloorAreaServed[1] > 0.1 .AND. (AltDHWSys1:CentralSys == 0 .OR. AltDHWSys1:DistType == "No loops or central system pump") .AND. AltDHWSys1:HeatersAllElec == 1)
;               then  1  else  UNCHANGED  endif
;         else  UNCHANGED  endif endif  }
; SAC 8/15/18 - no AltDHWSys* in Com ... (?)
;	; SAC 4/30/15 - added logic to ensure modeling std design as 'Standard' when simulating std design and system is non-central) (issue 530)
;	"Change to Exist DHWSys1 Type if better than Code"	
;      Zone:AltDHWSys1:Type = {
;         if ( Proj:IsMultiFamily < 0.5 .AND. Proj:RunScope == 2 .AND. DHWSys1Status == 2 .AND. DHWSys1Verified .AND. LocalCompAssigned( exDHWSys1 ) )
;         then  exDHWSys1:Type
;         else if ( Proj:SimulateResStdDHW > 0.5 .AND. (Proj:IsMultiFamily < 0.5 .OR. IfValidAnd( AltDHWSys2:CentralSys > 0.5 )) )
;         then  if (DHWSys1:CentralSys == 0 .AND. DHWSys1:HeatersAllElec == 1)
;               then  CAClimateZoneCodeBase:ElecDHWDwellUnitDist( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdsVersionYr, "BldgType", "MultiFam" )
;               else  CAClimateZoneCodeBase:DHWDwellUnitDist(     "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdsVersionYr, "BldgType", "MultiFam" )
;               endif
;         else UNCHANGED endif endif }
;
;; AltDHWSys1 SolFracType
;	; SAC 4/22/15 - eliminate solar fraction data for altered, unverified DHW systems to prevent them from effecting std design results (GC 507)
;	"Change to Exist DHWSys1 SolFracType if better than Code"	
;			Zone:AltDHWSys1:SolFracType = {	if ( Proj:IsMultiFamily < 0.5 .AND. Proj:RunScope == 2 .AND. DHWSys1Status == 2 )
;														then	if ( DHWSys1Verified .AND. LocalCompAssigned( exDHWSys1 ) )
;																then	exDHWSys1:SolFracType
;																else	1  endif
;														else UNCHANGED endif }
;; AltDHWSys1 SolFracAnn
;	"Change to Exist DHWSys1 AnnualSolFrac if better than Code"	
;			Zone:AltDHWSys1:AnnualSolFrac = {	if ( Proj:IsMultiFamily < 0.5 .AND. Proj:RunScope == 2 .AND. DHWSys1Status == 2 )
;														then	if ( DHWSys1Verified .AND. LocalCompAssigned( exDHWSys1 ) )
;																then	exDHWSys1:AnnualSolFrac
;																else	0  endif
;														else UNCHANGED endif }
;; AltDHWSys1 SolFracMon
;	"Change to Exist DHWSys1 SolFracMon if better than Code"	
;			Zone:AltDHWSys1:SolFracMon = {	if ( Proj:IsMultiFamily < 0.5 .AND. Proj:RunScope == 2 .AND. DHWSys1Status == 2 .AND. DHWSys1Verified .AND. LocalCompAssigned( exDHWSys1 ) ) then
;															exDHWSys1:SolFracMon
;														else UNCHANGED endif }

; removed all Zone:AltDHWSys2 rules

; New DHWSys1 budget conversion	
; TO DO - uncertain if window U-factor adjustments needed in CBECC-Com - (Res tic #983) - SAC 8/14/18
;   ; SAC 3/8/18 - revised logic to set flag for all-elec central systems w/ no recirc (tic #983)
;   "Set Zone:DHWSys1:IsStdDesignElec - whether this system is setup as an electric standard design"  ; SAC 2/16/18 - tic #983
;      Zone:DHWSys1:IsStdDesignElec = {
;         if ((Proj:IsMultiFamily < 0.5 .AND. Proj:RunScope == 2 .AND. DHWSys1Status == 3) .OR. Proj:SimulateResStdDHW > 0.5)
;         then  if (DHWSys1:FloorAreaServed[1] > 0.1 .AND. (DHWSys1:CentralSys == 0 .OR. DHWSys1:DistType == "No loops or central system pump") .AND. DHWSys1:HeatersAllElec == 1)
;               then  1
;               else  UNCHANGED  endif
;         else  UNCHANGED  endif  }
; SAC 8/15/18 - only triggered for Proj:IsMultiFamily < 0.5 - never the case in Com
;	; SAC 4/28/15 - added logic to switch non-central, 2016 standard design to 'Standard'
;   ; SAC 2/16/18 - revised logic to enable different standard design Type for non-central, all-electric DHW systems (tic #983)
;	"Assign Standard Type to New DHWSys1"	
;      Zone:DHWSys1:Type = {
;         if ( (Proj:IsMultiFamily < 0.5 .AND. Proj:RunScope == 2 .AND. DHWSys1Status == 3) .OR. Proj:SimulateResStdDHW > 0.5 )
;         then	if (DHWSys1:CentralSys == 0 .AND. DHWSys1:HeatersAllElec == 1)
;               then  CAClimateZoneCodeBase:ElecDHWDwellUnitDist( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdsVersionYr, "BldgType", "MultiFam" )
;               else  CAClimateZoneCodeBase:DHWDwellUnitDist(     "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdsVersionYr, "BldgType", "MultiFam" )
;               endif
;         else	UNCHANGED  endif	}
;
;	"Assign EnergyFactor requirements to New DHWSys1 DHWHeater[1]"	
;			Zone:DHWSys1:DHWHeater[1]:EF = {	if (Proj:IsMultiFamily > 0.5) then  UNCHANGED
;																		else	if ( Proj:RunScope == 2 .AND. DHWSys1Status == 3 )
;																				then
;														;						then	if (Proj:DRtgRefRunID == 2014)			; "RESNET2014"
;														;								then	switch ( DHWSys1:DHWHeater[1]:ElementType )
;														;											case "Electric Resistance" :	0.9172   ; "electric"                                      
;														;											case "Gas"       :	0.60	   ; "gas"                                       
;														;											case "Heat Pump" :	0.9172   ; "heat pump"                                     
;														;											default :	0.60
;														;										endswitch
;                                          ;         ; SAC 8/22/16 - updated old 0.60 EnergyFactor w/ 0.82 (tic #740)
;														;								else	switch ( DHWSys1:DHWHeater[1]:ElementType )
;																						   	switch ( DHWSys1:DHWHeater[1]:ElementType )
;																									case "Electric Resistance" :	0.945    ; "electric"                                      
;																									case "Gas"       :	0.82	   ; "gas"                                       
;																									case "Heat Pump" :	0.945	   ; "heat pump"                                     
;																									default :	0.82
;																								endswitch
;														;								endif
;																				else UNCHANGED endif
;																		endif }


; removed all Zone:DHWSys2 rules


;	; SAC 9/2/15 - Added Proj:SimulateResStdDHW > 0.5 condition in following rules
;	"Assign Standard SolFracType to New DHWSys1"	
;			Zone:DHWSys1:SolFracType = {	if ( (Proj:IsMultiFamily < 0.5 .AND. Proj:RunScope == 2 .AND. DHWSys1Status == 3) .OR. Proj:SimulateResStdDHW > 0.5 )
;													then	if (Proj:IsMultiFamily < 0.5 .OR. DHWSys1:CentralSys < 0.5 .OR. IfValidAnd( Proj:CliZnNum > 0 )==0)
;															then  0  else  1  endif
;													else UNCHANGED endif	}
;	; SAC 9/2/15 - Added default central solar fractions
;	"Assign Standard AnnualSolFrac to New DHWSys1"	
;			Zone:DHWSys1:AnnualSolFrac = {	if ( (Proj:IsMultiFamily < 0.5 .AND. Proj:RunScope == 2 .AND. DHWSys1Status == 3) .OR. Proj:SimulateResStdDHW > 0.5 )
;													then	if (Proj:IsMultiFamily < 0.5 .OR. DHWSys1:CentralSys < 0.5 .OR. IfValidAnd( Proj:CliZnNum > 0 )==0) then  0
;															else if (Proj:CliZnNum < 10) then  0.2  else  0.35  endif endif
;													else UNCHANGED endif	}
; SAC 11/10/15 - moved rules down here for Zone:DHWSys1 & Zone:DHWSys2 solar fraction setup and revised to operate directly on ALL NEW DHWSys objects, since Zone assignment not valid for MFam models
	; SAC 9/2/15 - Added Proj:SimulateResStdDHW > 0.5 condition in following rules
	"Assign Standard SolFracType to New DHWSys"	 ResDHWSys:SolFracType = {	
    if( ;( Proj:RunScope == 2 .AND. Status == "New" ) .OR.    - logic unnecessary since SimulateResStdDHW always > 0.5 (if we get here)
          Proj:SimulateResStdDHW > 0.5 )
    then 1
         ;if( Proj:IsMultiFamily < 0.5 .OR. CentralSys < 0.5 .OR.    - all MultiFam in Com
         ;    IfValidAnd( Proj:CliZnNum > 0 )==0 .OR. Status == 2 )
		   ;then  0  
         ;else  1  
         ;endif
    else UNCHANGED endif	}

	; SAC 9/2/15 - Added default central solar fractions
	"Assign Standard AnnualSolFrac to New DHWSys"	 ResDHWSys:AnnualSolFrac = {	
    if ( ; (Proj:IsMultiFamily < 0.5 .AND. Proj:RunScope == 2 .AND. Status == "New") .OR.     - all MultiFam in Com
          Proj:SimulateResStdDHW > 0.5 )
		then	if ( CentralSys < 0.5 .OR.
                 IfValidAnd( Proj:CliZnNum > 0 ) == 0 .OR. Status == "Altered" )  
            then  0
		      else if (Proj:CliZnNum < 10) 
		      then  0.2  
            else  0.35  endif endif
		else UNCHANGED endif	}

   "Toggle off HaveShwrDrnHtRecov for Std & DRtg ref runs"     ; SAC 2/19/18 (tic #978)
      ResDHWSys:HaveShowerDrainHtRcvry  = {  if (Proj:SimulateResStdDHW < 0.5) then  UNCHANGED
                                    else  0  endif  }

   ; SAC 10/18/17 - force default of Proj:ShwrDRAINHREFF if SimulateResStdDHW
   ; SAC 2/16/18 - moved down below all Elec std design DHW rules (tic #978)
   "Force default of Proj:ShwrDRAINHREFF if SimulateResStdDHW"    ResDHWSys:Action  =     ; SAC 1/29/19 - updated from Res rules
      {  if (Proj:SimulateResStdDHW < 0.5) then  UNCHANGED
         else  EvalRulelist( "ForceDefault_ShowerDrainHeatRecov_MFam" )
         endif  }

   "Setup std design Compact Distribution inputs for MFam models"    Proj:Action  =       ; SAC 1/29/19 - updated from Res rules
      {  if (SimulateResStdDHW < 0.5 .OR. IfValidAnd( EngyCodeYearNum >= 2019 )==0) then  UNCHANGED
         else  EvalRulelist( "ForceDefault_CompactDistribution_MFam" )
         endif  }
   "Default CompactDist ResSpcDHWFeatures properties"       Proj:Action  =
      {  EvalRulelist( "ProposedInput_MFam_CompactDistribution" )  }
END
;*************************************************************************

; SAC 10/5/15 - rulelist to prevent multiple heaters in a system and multipliers > 1 for any standard design system
;*************************************************************************
RULELIST  "BudgetConversion_DHWSys_SingleHeater" 1 0 1 0
;   ; SAC 2/16/18 - revised to switch assignment to Proj:StdElecDHWHeater for applicable systems (tic #983)
;	"Reset ResDHWSys:DHWHeater[1] if not first assigned heater"		ResDHWSys:DHWHeater[1]	= {
;         if (FirstDHWHtrIndex != 1) then  UNDEFINED
;         else if (HeatersAllElec > 0 .AND. IfValidAnd( Proj:StdElecDHWHeater:HeaterElementType > 0 ))
;         then  Proj:StdElecDHWHeater
;         else  UNCHANGED  endif endif  }
; replaced Res logic above w/ Com (parent/child) below
;"debugging"		ResDHWSys:Action		= {	MessageBox( "evaluating BudgetConversion_DHWSys_SingleHeater on ResDHWSys '%s' where HeatersAllElec = %g", Name, HeatersAllElec )  }
   "Delete all child ResWtrHtrs"    ResDHWSys:Action  = {  DeleteChildren( ResWtrHtr )  }
   "Create a single baseline ResWtrHtr (of the appropriate type)"    ResDHWSys:Action  = {
         if (HeatersAllElec > 0)
         then  CreateChildren( ResWtrHtr, 1, Name + " BaseElecResWtrHtr", "Setup_BaseResWtrHtr_Elec" )
         else  CreateChildren( ResWtrHtr, 1, Name + " BaseGasResWtrHtr",  "Setup_BaseResWtrHtr_Gas"  )
         endif  }

;	"Reset ResDHWSys:HeaterMult[1] if not first assigned heater"	ResDHWSys:HeaterMult[1]	= {	if (FirstDHWHtrIndex == 1) then  1  else  UNDEFINED  endif  }
END
;************************************************************************* - SAC 8/15/18
RULELIST  "Setup_BaseResWtrHtr_Elec" 1 0 1 0
   "Set ResWtrHtr:Status"                 ResWtrHtr:Status              = {  "New"              }
   "Set ResWtrHtr:ElementType"            ResWtrHtr:ElementType         = {  "Heat Pump"        }
   "Set ResWtrHtr:HtPumpWtrHtrNEEARtd"    ResWtrHtr:HtPumpWtrHtrNEEARtd = {  1                  }
   "Set ResWtrHtr:HPWHBrand"              ResWtrHtr:HPWHBrand           = {  "(generic)"        }
   "Set ResWtrHtr:HPWHModel"              ResWtrHtr:HPWHModel           = {  "UEF 2  (50 gal)"  }
   "Set ResWtrHtr:AirSrcHtPumpType"       ResWtrHtr:AirSrcHtPumpType    = {  HPWHData_NEEA:ASHPType( "Brand", HPWHBrand, "Model", HPWHModel ) }
   "Set ResWtrHtr:Cnt"                    ResWtrHtr:Cnt                 = {  1  }
   "Set ResWtrHtr:TankZnDisp"             ResWtrHtr:TankZnDisp          = {  1  }
   "Set ResWtrHtr:TankZn"                 ResWtrHtr:TankZn              = {  "Unconditioned"  }
END
;************************************************************************* - SAC 8/15/18
RULELIST  "Setup_BaseResWtrHtr_Gas" 1 0 1 0
   "Set ResWtrHtr:Status"           ResWtrHtr:Status  = {  "New"            }
   "Set ResWtrHtr:AmbCond"          ResWtrHtr:AmbCond = {  "Unconditioned"  }
END
;*************************************************************************

;*************************************************************************
RULELIST  "BudgetConversion_DHWSys_CentralElecHeaters" 1 0 1 0
;   ; SAC 3/8/18 - similar rule as above only this time to assign StdElecDHWHeater to each heater assignment of central, no recirc, all-elec std design systems (tic #983)
;	"Update ResDHWSys:DHWHeater[1] assignment if present"		ResDHWSys:DHWHeater[1]	= {
;         if (LocalCompAssigned( DHWHeater[1] )) then  Proj:StdElecDHWHeater
;         else  UNCHANGED  endif  }
; replaced Res logic above w/ Com (parent/child) below
;"debugging"		Proj:Action		= {	MessageBox( "evaluating BudgetConversion_DHWSys_CentralElecHeaters on ResDHWSys '%s'", Name )  }

; SAC 1/29/19 - removed rule deleting ALL children, as any Non-Elec heaters should be retained
;   "Delete all child ResWtrHtrs"    ResDHWSys:Action  = {  DeleteChildren( ResWtrHtr )  }
   "Create a singls baseline Elec ResWtrHtr"    ResDHWSys:Action  = {
         CreateChildren( ResWtrHtr, 1, Name + " BaseCntrlElecResWtrHtr", "Setup_BaseCntrlResWtrHtr_Elec" )  }
END
;************************************************************************* - SAC 1/29/19
RULELIST  "Setup_BaseCntrlResWtrHtr_Elec" 1 0 1 0
   "Set ResWtrHtr:Status"                 ResWtrHtr:Status              = {  "New"              }
   "Set ResWtrHtr:ElementType"            ResWtrHtr:ElementType         = {  "Heat Pump"        }
   "Set ResWtrHtr:HtPumpWtrHtrNEEARtd"    ResWtrHtr:HtPumpWtrHtrNEEARtd = {  1                  }
   "Set ResWtrHtr:HPWHBrand"              ResWtrHtr:HPWHBrand           = {  "(generic)"        }
   "Set ResWtrHtr:HPWHModel"              ResWtrHtr:HPWHModel           = {  "UEF 2  (50 gal)"  }
   "Set ResWtrHtr:AirSrcHtPumpType"       ResWtrHtr:AirSrcHtPumpType    = {  HPWHData_NEEA:ASHPType( "Brand", HPWHBrand, "Model", HPWHModel ) }
   "Set ResWtrHtr:Cnt"                    ResWtrHtr:Cnt                 = {  1  }
;   "Set ResWtrHtr:ForceStdDesign"         ResWtrHtr:ForceStdDesign      = {  0  }
   "Set ResWtrHtr:TankZnDisp"             ResWtrHtr:TankZnDisp          = {  1  }
   "Set ResWtrHtr:TankZn"                 ResWtrHtr:TankZn              = {  "Outside or in Exterior Closet"  }
END
;*************************************************************************

;************************************************************************* ; SAC 1/11/20 (Com tic #3156)
RULELIST  "BudgetConversion_DHWSys_CentralRecircGasBoiler" 1 0 0 0

;"dbg" ResDHWSys:Action = { PostMessageToLog( "Setting up Central Recirc Gas Boiler for ResDHWSys '%s'", Name ) }
   "Delete all child ResWtrHtrs"       ResDHWSys:Action  = {  DeleteChildren( ResWtrHtr )  }
   "Delete all child ResLpTankHtr"     ResDHWSys:Action  = {  DeleteChildren( ResLpTankHtr )  }
   "Remove ResDHWSys:ResLpTankHtrRef assignment"   ResDHWSys:ResLpTankHtrRef  = {  UNDEFINED  }

   "Set ResDHWSys:CentralSysType to 'Other'"    ResDHWSys:CentralSysType  = {  "Other"  } 
   "Adjust ResDHWSys:CentralSysTypeVal"         ResDHWSys:CentralSysTypeVal  = {  EnumValue( CentralSysType )  }     ; SAC 7/2/20

   "Assign Std Com Pckgd Boiler as ResDHWSys:BaseResWtrHtrRef"    ResDHWSys:BaseResWtrHtrRef  =
      {  RuleLibrary( ResWtrHtr, "Res Std Cntrl Recirc Boiler", 1 )  }
   "Set Std Com Pckgd Boiler Parent"    ResDHWSys:BaseResWtrHtrRef:Parent  = {  Name  }

   ; rules to setup library ResWtrHtr to ensure proper simulation
   "Set ResDHWSys:BaseResWtrHtrRef:CSE_SimulateTank"  ResDHWSys:BaseResWtrHtrRef:CSE_SimulateTank  = {  1  }
   "Set ResDHWSys:BaseResWtrHtrRef:TankVol"     ResDHWSys:BaseResWtrHtrRef:TankVol  =
      {  (ValidOr( NumBedroomsServedPerHtr, 1 ) * 3) + (ValidOr( NumDUsServedPerHtr, 1 ) * 10)  }     ; SAC 1/9/20 - to facilitate new central gas std design DHW system (Com tic #3156)

   "Set ResDHWSys:BaseResWtrHtrRef:TankExtInsR"    ResDHWSys:BaseResWtrHtrRef:TankExtInsR  = {   0  }
   "Set ResDHWSys:BaseResWtrHtrRef:TankIntInsR"    ResDHWSys:BaseResWtrHtrRef:TankIntInsR  = {  12  }
   "Set ResDHWSys:BaseResWtrHtrRef:AmbCond"        ResDHWSys:BaseResWtrHtrRef:AmbCond      = {  "Unconditioned"  }

   "Set ResDHWSys:NewCentralModel"     ResDHWSys:NewCentralModel  = {  1  }
   "Set ResDHWSys:CentralElecDHW"      ResDHWSys:CentralElecDHW   = {  0  }
END
;*************************************************************************

;*************************************************************************
; SAC 10/27/15 - moved rule setting ResWtrHtr:ElementType to subordinate rulelist to prevent Resets of other properties we want to retain
RULELIST  "BudgetConversion_DHWHeater_ElementType" 1 0 1 1
; SAC 8/15/18 - no need to store PropHtrElemTypeNum as it is only used in converting InpRating(Elec) which is not necessary in Com due to separate properties
;   "Set ResWtrHtr:PropHtrElemTypeNum"     ResWtrHtr:PropHtrElemTypeNum  = {  ;  ElementType  }     ; SAC 8/28/17
;      switch (ElementType)
;         case "Electric Resistance" :  0
;         case "Gas"                 :  1
;         case "Heat Pump"           :  2
;         default  : -1
;      endswitch  }

; SAC 4/20/15 - added logic for 2016 standard design
; SAC 5/1/15 - revised 2016 logic to only select Propane if NatGasAvailable = 0 AND HeaterElementType set to Propane in the proposed model (issue 531)
; SAC 4/7/16 - added logic to set HeaterElementType  for RESNET2014 design rating reference run (tic #631)
; SAC 8/16/17 - added logic to retain HPWH as std design for 2019 models when proposed design is HPWH  - SAC 8/22/17 - rolled back HPWH std design mods of 8/16
	"Reset ResWtrHtr:ElementType (when simulating std design)" ResWtrHtr:ElementType	= {	
    if (IfValidAnd( ForceStdDesign > 0.5 )==0) 
    then  UNCHANGED
  ;  else if (Proj:DRtgRefRunID == 2014)			; "RESNET2014"
  ;  then	
  ;    if (ElementType = "Gas") then  UNCHANGED		; Gas -> Gas
  ;    else	0		; ElecRes, HPWH or HPWHX -> ElecRes
  ;    endif
    else if (Proj:EngyCodeYearNum >= 2016)
    then   ; LDH 170509 - Added logic to select proper Heater Element type for alterations (tic # 820)
      if ( Proj:NatGasAvail < 0.5 .AND.  ; No Natural Gas Available at Site
           Status = "Altered" .AND.                  ;  Altered      - currently not an option in CBECC-Com - SAC 8/16/18
           ElementType != "Gas" )          ; Not Equal to Gas (Propane)
      then "Electric Resistance"  ; 0   ; Electric resistance
      else "Gas"                  ; 1 ; Gas (Natural Gas or Propane, depending on Proj:GasType selection
      endif 
    else if (Proj:NatGasAvail > 0.5 .AND. ElementType != "Gas")		; != NatGas
    then	"Gas"                  ; 1	; Natural Gas
    else if (Proj:NatGasAvail < 0.5 .AND. ElementType != "Electric Resistance")		; != Electric
    then	"Electric Resistance"  ; 0	; Electric
    else	UNCHANGED  
    endif endif endif endif  }

; SAC 8/15/18 - no need to convert InpRating(Elec) in Com due to separate properties
;   "Set ResWtrHtr:StdInpRtgConv (fuel unit conversion should InputRatingSim be retained in std model)"   ; SAC 8/28/17 - (tic #893)
;      ResWtrHtr:StdInpRtgConv  = {
;         if ( (PropHtrElemTypeNum == 0 .OR. PropHtrElemTypeNum == 3 .OR. PropHtrElemTypeNum == 5) .AND.
;              (ElementType = "Gas") )
;         then  3.412       ; elec W -> gas Btuh
;         else if ( (PropHtrElemTypeNum == 1 .OR. PropHtrElemTypeNum == 2 .OR. PropHtrElemTypeNum == 4) .AND.
;                   (ElementType = "Electric Resistance" .OR. ElementType = "Heat Pump") )
;         then  1/3.412     ; gas Btuh -> elec W
;         else  1.0  endif endif  }
END
;*************************************************************************
; SAC 10/27/15 - moved rule setting ResWtrHtr:TankType to subordinate rulelist to prevent Resets of other properties we want to retain
RULELIST  "BudgetConversion_DHWHeater_TankType" 1 0 1 1
; SAC 3/19/14 - modified to cause 2016, multi-family w/ non-central DHW to simulate standard design
; SAC 9/23/15 - added 'ForceStdDesign < 0.5' to if statement to ensure TankType NOT switched for Existing heaters
; SAC 10/27/15 - added logic to prevent changing TankType, InputRating or TankVol for heaters of central systems (unless required)
; LDH 170504 - updated StdDesign TankType to equal PropDesign for altered heaters (tic #820)
; SAC 8/15/17 - added logic to setup 2019 std design water heater as 'Consumer Instantaneous (UEF)-New'
; SAC 2/23/18 - minor updates in logic to ensure new (2019 UEF-related) TankTypes are preserved in Gas and Propane heaters 
; SAC 6/20/18 - revised to map new Res-Duty Commercial types to valid compatible types
; revised logic to cause Small Inst, Consumer Inst and -default- heaters that are Altered to switch to Cons Inst UEF-New (rather than Small Inst) - SAC 08/11/20 (tic #1187) 
;"dbg" ResWtrHtr:Action = { PostMessageToLog( ":  ForceStdDesign %g  /  ",
;            ValidOr( ForceStdDesign, -999 ), ValidOr( xxx, -999 ), ValidOr( xxx, -999 ), ValidOr( xxx, -999 ), ValidOr( xxx, -999 ), ValidOr( xxx, -999 ), ValidOr( xxx, -999 ) )  }
	"Reset ResWtrHtr:TankType (when simulating std design)"	ResWtrHtr:TankType = {	
    if ( IfValidAnd( ForceStdDesign > 0.5 ) .AND. Proj:EngyCodeYearNum >= 2016 .AND.
		;	 ( Proj:IsMultiFamily < 0.5 .OR. 
      ; ( Proj:IsMultiFamily > 0.5 .AND. SumAll( DwellUnitType:NumDUsCntrlDHW ) < 0.5 .AND. 
      ;   SumAll( DwellUnitType:NumDUsNonCntrlDHW ) > 0.5 ) ) )
       ( ResDHWSys:NewCntrlAreaServed < 0.5 .AND. 
         ResDHWSys:NewOrAltServedArea > 0.5 ) )
    then ; StdDesign TankType = PropDesign for 'Altered' DHW heaters
      if( Status = "Altered" )  ; Altered
      then switch( HtrTypeNum )
           case  2:  "Large Instantaneous"           ; Large Instantaneous  ->   Large Instantaneous
           case  3:  "Large Storage"                 ; Large Storage        ->   Large Storage
           case  5:  "Consumer Instantaneous (UEF)"  ; Small Instantaneous  ->   Consumer Instantaneous (UEF) - SAC 08/11/20
           case  6:  "Small Storage"                 ; Small Storage        ->   Small Storage
           case 10:  "Consumer Instantaneous (UEF)"  ; Consumer Instantaneous (UEF)   ->   Consumer Instantaneous (UEF) - SAC 08/11/20
           case 11:  "Large Instantaneous"           ; Commercial Instantaneous (TE)  ->   Large Instantaneous
           case 12:  "Small Storage"                 ; Consumer Storage (UEF)         ->   Small Storage
           case 13:  "Large Storage"                 ; Commercial Storage (TE & SBL)  ->   Large Storage
           case 14:  "Large Storage"                 ; Residential-Duty Commercial Storage (UEF)  ->   Large Storage
           case 15:  "Large Instantaneous"           ; Residential-Duty Commercial Instantaneous (UEF)  ->   Large Instantaneous
           case 16:  "Commercial Packaged Boiler"    ; Commercial Packaged Boiler -> Commercial Packaged Boiler    ; SAC 1/11/20 (Com tic #3156)
           default:  "Consumer Instantaneous (UEF)"  ; Consumer Instantaneous (UEF) - SAC 08/11/20
           endswitch
      else if (Proj:EngyCodeYearNum >= 2019)
      then  "Consumer Instantaneous (UEF)"   ; 9        ; "Consumer Instantaneous (UEF)-New"   ; SAC 8/2/17
      else  "Small Instantaneous"     ; 5        ; New -> Small Instantaneous
      endif endif
    else if (IfValidAnd( ForceStdDesign > 0.5 )==0) then  UNCHANGED   ; Existing
    else if (ResDHWSys:NewCntrlAreaServed >= 1)
    then  ; only reset if ElementType is incompatible w/ current TankType
      switch (ElementType)
      case "Electric Resistance" :	; Elec Resistance
        if (HtrTypeNum < 2 .OR. HtrTypeNum = 4 .OR. HtrTypeNum = 7) then  "Large Storage"   ; 3  ; Large Storage
        else if (HtrTypeNum = 14) then  "Large Storage"   ; 3  ; Residential-Duty Commercial Storage (UEF) -> Large Storage - SAC 6/20/18
        else	UNCHANGED  endif endif
      case "Gas" :	; Nat Gas
        if (HtrTypeNum = 4 .OR. HtrTypeNum = 7) then  "Large Storage"   ; 3  ; Large Storage
        else if (HtrTypeNum = 15) then  "Large Storage"   ; 3  ; Residential-Duty Commercial Instantaneous (UEF) -> Large Storage - SAC 6/20/18
        else	UNCHANGED  endif endif
      default :	UNCHANGED
      endswitch
    else  "Small Storage"   ; 6	; Small Storage
    endif endif endif  }

	"Reset ResWtrHtr:TankCat (when simulating std design)"	ResWtrHtr:TankCat = {	
    if (ForceStdDesign < 0.5) then  UNCHANGED   ; Existing
    else  switch (TankType)
            case "Boiler"                                          : "Boiler"                         ;  0
            case "Commercial Packaged Boiler"                      : "Commercial Packaged Boiler"     ; 16  SAC 1/11/20 (Com tic #3156)
            case "Indirect"                                        : "Indirect"                       ;  1
            case "Large Instantaneous"                             : "Instantaneous"                  ;  2
            case "Large Storage"                                   : "Storage"                        ;  3
            case "Small Instantaneous"                             : "Instantaneous"                  ;  5
            case "Small Storage"                                   : "Storage"                        ;  6
            case "Consumer Instantaneous (UEF)"                    : "Instantaneous"                  ; 10
            case "Commercial Instantaneous (TE)"                   : "Commercial Instantaneous (TE)"  ; 11
            case "Consumer Storage (UEF)"                          : "Storage"                        ; 12
            case "Commercial Storage (TE & SBL)"                   : "Commercial Storage (TE & SBL)"  ; 13
            case "Residential-Duty Commercial Storage (UEF)"       : "Commercial Storage (TE & SBL)"  ; 14
            case "Residential-Duty Commercial Instantaneous (UEF)" : "Commercial Instantaneous (TE)"  ; 15
            default : "Instantaneous"         ; "Consumer Instantaneous (UEF)-New" (9) ?
         endswitch  endif  }
   "Set ResWtrHtr:HtrTypeNum to handle lots of defaulting and UI - needed to differentiate original Elec/Gas ConsInst from new CSE model"  ; SAC 3/1/18 (tic #993)
      ResWtrHtr:HtrTypeNum  = {
    if (ElementType = "Gas" .AND.
        TankType == "Consumer Instantaneous (UEF)" .AND.
        IfValidAnd( Proj:EngyCodeYearNum >= 2019 ))
    then  9
    else  switch (TankType)
            case "Boiler"                                          :  0
            case "Commercial Packaged Boiler"                      : 16       ; SAC 1/11/20 (Com tic #3156)
            case "Indirect"                                        :  1
            case "Large Instantaneous"                             :  2
            case "Large Storage"                                   :  3
            case "Small Instantaneous"                             :  5
            case "Small Storage"                                   :  6
            case "Consumer Instantaneous (UEF)"                    : 10
            case "Commercial Instantaneous (TE)"                   : 11
            case "Consumer Storage (UEF)"                          : 12
            case "Commercial Storage (TE & SBL)"                   : 13
            case "Residential-Duty Commercial Storage (UEF)"       : 14
            case "Residential-Duty Commercial Instantaneous (UEF)" : 15
            default : -1
          endswitch endif  }
; SAC 8/15/18 - replaced Res logic (below) w/ Com (above)
;         if (HeaterElementType == 1 .AND. TankType == 10 .AND.
;             IfValidAnd( Proj:EngyCodeYearNum >= 2019 ))
;         then  9
;         else  TankType
;         endif  }
END
;*************************************************************************


; SAC 8/19/18 - ported over from Res rules - Rules_Default_Shell.rule
; SAC 10/6/15 - extracted rules from ProposedInput related to setting ResWtrHtr floor area served & hydronic heating properties to facilitate their evaluation during BudgetConversion
;*************************************************************************
RULELIST "Default_DHWHeater_AreaServedAndHydronic"  0 0 0 0

; SAC 8/19/18 - refresh certain RULE NEW properties added to support Res BudgetConversion_DHW
   "Default ResDHWSys:NewOrAltServedArea"    ResDHWSys:NewOrAltServedArea  =     ; SAC 2/20/20 - revised logic to use ALL assigned area (which may be Existing) when ResDHWSys is New or Altered
      {  if (IfValidAnd( Status = "New" ) .OR. IfValidAnd( Status = "Altered" ))
         then  SumRevRef(Spc:ResDHWSysRef, Spc:DwellingUnitSpcTotAreaWithMult)  
         else  SumRevRef(Spc:ResDHWSysRef, Spc:NewOrAltDwellingUnitSpcTotAreaWithMult)  endif  }   ; to ensure valid prior to next rule eval

   "Default ResDHWSys:NewCntrlAreaServed"    ResDHWSys:NewCntrlAreaServed  =     ; SAC 2/20/20 - revised logic to use ALL assigned area (which may be Existing) when ResDHWSys is New or Altered
      {  if (IfValidAnd( CentralSys > 0 ))
         then  if (IfValidAnd( Status = "New" ) .OR. IfValidAnd( Status = "Altered" ))
               then  SumRevRef(Spc:ResDHWSysRef, Spc:DwellingUnitSpcTotAreaWithMult)  
               else  SumRevRef(Spc:ResDHWSysRef, Spc:NewDwellingUnitSpcTotAreaWithMult)
               endif
         else  0
         endif  }

	"Refresh ResWtrHtr:ForceStdDesign (for New/Altered equipment when simulating std design)"		; whether or not (1/0) budget conversion needs to force this heater to reflect standard design type & performance
			ResWtrHtr:ForceStdDesign	= {	if (Proj:SimulateResStdDHW < 0.5 .OR. ResDHWSys:NewOrAltServedArea < 1) then	0
			                                 else if ((IfValidAnd( ResDHWSys:IsBaseSys > 0 ) .OR. IfValidAnd( ResDHWSys:CentralSys > 0 )) .AND.
			                                          IfValidAnd( ElementType = "Heat Pump" ) .AND. IfValidAnd( HPWHBrand = "(generic)" )) then  0   ; prevent ForceStdDesign for baseline HPWH from library - SAC 8/20/18 / SAC 1/29/19 - revised for CentralSys
			                                 else  1  endif endif  }

;   ResWtrHtr:HtrTypeNum
;         if (ElementType == "Gas" .AND.
;             TankType == "Consumer Instantaneous (UEF)" .AND.
;             IfValidAnd( Proj:EngyCodeYearNum >= 2019 ))
;         then  9
;         else  switch (TankType)
;                 case "Boiler"                                          :  0
;                 case "Indirect"                                        :  1
;                 case "Large Instantaneous"                             :  2
;                 case "Large Storage"                                   :  3
;                 case "Small Instantaneous"                             :  5
;                 case "Small Storage"                                   :  6
;                 case "Consumer Instantaneous (UEF)"                    : 10
;                 case "Commercial Instantaneous (TE)"                   : 11
;                 case "Consumer Storage (UEF)"                          : 12
;                 case "Commercial Storage (TE & SBL)"                   : 13
;                 case "Residential-Duty Commercial Storage (UEF)"       : 14
;                 case "Residential-Duty Commercial Instantaneous (UEF)" : 15
;                 default : -1
;               endswitch endif

;   ResWtrHtr:HeaterElementTypeIdx
;         switch (ElementType)
;           case "Electric Resistance" : 0
;           case "Gas"                 : 1
;           case "Heat Pump"           : 5
;           default : -1
;         endswitch

;   ResWtrHtr:IsUEF
;         if (ElementType = "Heat Pump" .AND.
;             IfValidAnd( IsUEFRtd > 0 ))
;         then  1
;         else switch (TankType)
;                case "Consumer Instantaneous (UEF)"                    :   1    ; 10 
;                case "Consumer Storage (UEF)"                          :   1    ; 12 
;                case "Residential-Duty Commercial Storage (UEF)"       :   1    ; 14 
;                case "Residential-Duty Commercial Instantaneous (UEF)" :   1    ; 15 
;                default :   0	
;              endswitch  endif


;	; SAC 7/7/15
;	"Set ResDHWSys:DailyHWConsumption - Init"		ResDHWSys:DailyHWConsumption	= {	0  }
;	"Set ResDHWSys:DailyHWConsumption - MFam-1"	DwellUnit:DwellUnitTypeRef:ResDHWSysRef[1]:DailyHWConsumption	= {	if (DwellUnitTypeRef:NumDHWSysTypes > 0) then  (DwellUnitTypeRef:DHWDailyConsPerSys * Count) + DwellUnitTypeRef:ResDHWSysRef[1]:DailyHWConsumption  else  UNCHANGED  endif  }
;	"Set ResDHWSys:DailyHWConsumption - SFam"		ResDHWSys:DailyHWConsumption	= {	if (Proj:IsMultiFamily > 0.5)	then  UNCHANGED
;																										else	SumRevRef( Zone:DHWSys1,	Zone:DHWDailyConsPerSys ) + SumRevRef( Zone:AltDHWSys1, Zone:DHWDailyConsPerSys ) +
;																												SumRevRef( Zone:ExDHWSys1,	Zone:DHWDailyConsPerSys ) +
;																												SumRevRef( Zone:DHWSys2,	Zone:DHWDailyConsPerSys ) + SumRevRef( Zone:AltDHWSys2, Zone:DHWDailyConsPerSys ) +
;																												SumRevRef( Zone:ExDHWSys2,	Zone:DHWDailyConsPerSys )   endif  }
;	"Set Proj:DailyHWConsumption"			Proj:DailyHWConsumption		= {	SumAll( ResDHWSys:DailyHWConsumption )  }

;	; SAC 10/21/15
;	"Set ResDHWSys:NumDUsServed - Init"		ResDHWSys:NumDUsServed	= {	0  }
;	"Set ResDHWSys:NumDUsServed - MFam-1"	DwellUnit:DwellUnitTypeRef:ResDHWSysRef[1]:NumDUsServed	= {	if (DwellUnitTypeRef:NumDHWSysTypes > 0) then  Count + DwellUnitTypeRef:ResDHWSysRef[1]:NumDUsServed  else  UNCHANGED  endif  }
;	"Set ResDHWSys:NumDUsServed - SFam"		ResDHWSys:NumDUsServed	= {	if (Proj:IsMultiFamily > 0.5 .OR. IfValidAnd( DailyHWConsumption > 0 )==0)	then  UNCHANGED
;																						else  1  endif  }

	; SAC 10/22/15 - based on stds, table 120.3-A, which for all pipe diameters >= 1 in. and in the temperature range 105-140 is simply 1.5 in.
	"Default ResDHWSys:LpPipeInsThkns"	ResDHWSys:LpPipeInsThkns		= {	1.5  }

;	; SAC 10/27/15 - identify area this heater serves which is by new/altered AND central DHW systems
;	"Set ResWtrHtr:NewCntrlAreaServed"		ResWtrHtr:NewCntrlAreaServed		= {	SumRevRef( ResDHWSys:ResWtrHtr, ResDHWSys:NewCntrlAreaServed )  }

;; mjb 3/24/14 - set new property used to identify sum of all DHW equip units across all new, altered or existing/verified systems (used for generating DHWSysRpt records)
;	"Set ResDHWSys:TotNumDHWHeaters - 1"	ResDHWSys:TotNumDHWHeaters	= {	if (NumDHWHeaters > 0 .AND. LocalCompAssigned( ResWtrHtr[1]  )) then                     HeaterMult[1]   else      0      endif  }
;	"Set Proj:NumDHWEquipUnits"		Proj:NumDHWEquipUnits	= {	SumAll( ResDHWSys:TotNumDHWHeaters )  }

;;	mjb	3/24/14 - set ResDHWSys:IsHydronic for DHWSysRpt object
;	"Set ResWtrHtr:IsHydronic"		ResWtrHtr:IsHydronic  =	{	if ( SumRevRef( HVACHeat:CHWHeater, HVACHeat:CHFloorAreaServed ) > 0.5 ) then 1 else 0 endif	}
;;	"Set ResDHWSys:IsHydronic"			ResDHWSys:IsHydronic     =	{	if ( SumAll( ResWtrHtr:IsHydronic ) > 0.5 ) then 1 else 0 endif	}
;; SAC 4/30/15 - fix bug in above rule where ResDHWSys:IsHydronic set to TRUE for ALL ResDHWSys objects if ANY ResWtrHtr:IsHydronic flag in the model is set (issue 533)
;	"Set ResDHWSys:IsHydronic - 1"	ResDHWSys:IsHydronic     =	{	if ( NumDHWHeaters >= 1 .AND. IfValidAnd( HeaterMult[1] > 0 ) .AND. LocalCompAssigned( ResWtrHtr[1] ) == ComponentType( "ResWtrHtr" ))
;																				then   if (IfValidAnd( ResWtrHtr[1]:IsHydronic > 0.5 )) then 1 else 0 endif   else 0 endif  }

;	"Set ResWtrHtr:RecovEffActive"	ResWtrHtr:RecovEffActive	= {	if ( IsHydronic .AND. CanBeCHWHeater .AND. IfValidAnd( TankType != 8 ) )	then  1  else  0  endif  }		; SAC 2/17/15

;  ; SAC 10/28/15 - enable access for ANY valid MFamDistType  - THEN restored original rule that requires a HERS verified option to access num loops option --- SAC 11/10/15 - restored for all selection > 0
;  ; "Set ResDHWSys:DisplayNumLoops"		ResDHWSys:DisplayNumLoops	= {	if (Proj:IsMultiFamily > 0.5 .AND. MFamDistType > 8388608 .AND. (UseDefaultLoops = 0 .OR. Proj:DHWCalcMethod > 0)) then  1  else  0  endif  }
;   ; SAC 7/29/18 - removed all logic pertaining to DHWCalcMethod (related to transition from T24DHW DLLs to CSE)
;   "Set ResDHWSys:DisplayNumLoops"		ResDHWSys:DisplayNumLoops	= {	if (Proj:IsMultiFamily > 0.5 .AND. MFamDistType > 0) then  1  else  0  endif  }

END
;*************************************************************************


;*************************************************************************  SAC 1/27/20 (StdSolarSys)  - SAC 2/2/20 - ported to Com (Com tic #3157)
RULELIST  "Refresh_DHWSolarSys_ServedAreaDUsBRs" 1 0 0 0
   "Set DHWSolarSys:FloorAreaServed"   DHWSolarSys:FloorAreaServed  =      ; SAC 1/7/20 - DHWSolarSys (tic #1013)
      {  SumRevRef( ResDHWSys:DHWSolarSysRef, ResDHWSys:SysFlrArea )  }
   "Set DHWSolarSys:DwellUnitsServed"  DHWSolarSys:DwellUnitsServed  =     ; SAC 1/27/20 (StdSolarSys)
      {  SumRevRef( ResDHWSys:DHWSolarSysRef, ResDHWSys:NumHRRDUsServed )  }        ; SAC 05/04/21
   "Set DHWSolarSys:BedroomsServed"    DHWSolarSys:BedroomsServed  =  
      {  SumRevRef( ResDHWSys:DHWSolarSysRef, ResDHWSys:NumHRRBedroomsServed )  }   ; SAC 05/04/21
   "Set DHWSolarSys:GuestRoomsServed"  DHWSolarSys:GuestRoomsServed  =     ; SAC 05/04/21
      {  SumRevRef( ResDHWSys:DHWSolarSysRef, ResDHWSys:NumHtlMtlUnitsServed )  }     
END
;*************************************************************************


; SAC 1/29/19 - removed old (project-wide) DWHR std design stuff
;;*************************************************************************   - SAC 10/18/17
;RULELIST  "ForceDefault_Proj_ShwrDRAINHREFF" 1 0 0 1
;;	"Default Proj:ShwrDRAINHREFF"			Proj:ShwrDRAINHREFF			= {	0    }
;   ; SAC 2/16/18 - added logic to implement std design ShwrDRAINHREFF when one or more std design HPWN DHW systems installed (tic #978)
;   "Default ResDHWSys:HaveShowerDrainHtRcvry"      ResDHWSys:HaveShowerDrainHtRcvry  = {
;         if (SumAll( ResDHWSys:IsStdDesignElec ) > 0)
;         then  ; if (CAClimateZoneCodeBase:ElecDHWDrnWtrHtRecovEff( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdsVersionYr, "BldgType", "MultiFam" ) > 0)
;               if (Proj:EngyCodeYearNum >= 2019)
;               then  1  else  0  endif
;         else if (LocalStatus( HaveShowerDrainHtRcvry ) > 6) then  UNCHANGED
;         else  0  endif endif  }
;   "Default ResDHWSys:ShowerDrainHtRcvryEff"    ResDHWSys:ShowerDrainHtRcvryEff  = {
;         if (HaveShowerDrainHtRcvry > 0)
;         then  ; max( 0.42, CAClimateZoneCodeBase:ElecDHWDrnWtrHt( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdsVersionYr, "BldgType", "MultiFam" ) )
;               switch (CliZnNum)
;                  case  1 :  0.7 
;                  case  2 :  0.65
;                  case  3 :  0.5 
;                  case  4 :  0.5 
;                  case  5 :  0.5 
;                  case  6 :  0.42
;                  case  7 :  0.42
;                  case  8 :  0.5 
;                  case  9 :  0.65
;                  case 10 :  0.65
;                  case 11 :  0.65
;                  case 12 :  0.65
;                  case 13 :  0.65
;                  case 14 :  0.65
;                  case 15 :  0.42
;                  case 16 :  0.7 
;                  default :  0.42  ; min
;               endswitch
;         else  0  endif  }
;END
;;*************************************************************************


;*************************************************************************  - SAC 1/29/19 - Com equivalent of Res 'Blast_DwellUnitType_DWHRSysRefs_1' (below)
RULELIST  "Blast_Spc_DWHRSysRefs"  1 0 0 1
   "Blast Spc:ResSpcDHWFeaturesRef[1]:ResDWHRSysRef[1]"     Spc:ResSpcDHWFeaturesRef[1]:ResDWHRSysRef[1]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[1]:ResDWHRSysRef[2]"     Spc:ResSpcDHWFeaturesRef[1]:ResDWHRSysRef[2]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[1]:ResDWHRSysRef[3]"     Spc:ResSpcDHWFeaturesRef[1]:ResDWHRSysRef[3]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[1]:ResDWHRSysRef[4]"     Spc:ResSpcDHWFeaturesRef[1]:ResDWHRSysRef[4]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[1]:ResDWHRSysRef[5]"     Spc:ResSpcDHWFeaturesRef[1]:ResDWHRSysRef[5]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[1]:ResDWHRSysRef[6]"     Spc:ResSpcDHWFeaturesRef[1]:ResDWHRSysRef[6]  = {  UNDEFINED  }

   "Blast Spc:ResSpcDHWFeaturesRef[2]:ResDWHRSysRef[1]"     Spc:ResSpcDHWFeaturesRef[2]:ResDWHRSysRef[1]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[2]:ResDWHRSysRef[2]"     Spc:ResSpcDHWFeaturesRef[2]:ResDWHRSysRef[2]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[2]:ResDWHRSysRef[3]"     Spc:ResSpcDHWFeaturesRef[2]:ResDWHRSysRef[3]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[2]:ResDWHRSysRef[4]"     Spc:ResSpcDHWFeaturesRef[2]:ResDWHRSysRef[4]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[2]:ResDWHRSysRef[5]"     Spc:ResSpcDHWFeaturesRef[2]:ResDWHRSysRef[5]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[2]:ResDWHRSysRef[6]"     Spc:ResSpcDHWFeaturesRef[2]:ResDWHRSysRef[6]  = {  UNDEFINED  }

   "Blast Spc:ResSpcDHWFeaturesRef[3]:ResDWHRSysRef[1]"     Spc:ResSpcDHWFeaturesRef[3]:ResDWHRSysRef[1]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[3]:ResDWHRSysRef[2]"     Spc:ResSpcDHWFeaturesRef[3]:ResDWHRSysRef[2]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[3]:ResDWHRSysRef[3]"     Spc:ResSpcDHWFeaturesRef[3]:ResDWHRSysRef[3]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[3]:ResDWHRSysRef[4]"     Spc:ResSpcDHWFeaturesRef[3]:ResDWHRSysRef[4]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[3]:ResDWHRSysRef[5]"     Spc:ResSpcDHWFeaturesRef[3]:ResDWHRSysRef[5]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[3]:ResDWHRSysRef[6]"     Spc:ResSpcDHWFeaturesRef[3]:ResDWHRSysRef[6]  = {  UNDEFINED  }

   "Blast Spc:ResSpcDHWFeaturesRef[4]:ResDWHRSysRef[1]"     Spc:ResSpcDHWFeaturesRef[4]:ResDWHRSysRef[1]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[4]:ResDWHRSysRef[2]"     Spc:ResSpcDHWFeaturesRef[4]:ResDWHRSysRef[2]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[4]:ResDWHRSysRef[3]"     Spc:ResSpcDHWFeaturesRef[4]:ResDWHRSysRef[3]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[4]:ResDWHRSysRef[4]"     Spc:ResSpcDHWFeaturesRef[4]:ResDWHRSysRef[4]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[4]:ResDWHRSysRef[5]"     Spc:ResSpcDHWFeaturesRef[4]:ResDWHRSysRef[5]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[4]:ResDWHRSysRef[6]"     Spc:ResSpcDHWFeaturesRef[4]:ResDWHRSysRef[6]  = {  UNDEFINED  }

   "Blast Spc:ResSpcDHWFeaturesRef[5]:ResDWHRSysRef[1]"     Spc:ResSpcDHWFeaturesRef[5]:ResDWHRSysRef[1]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[5]:ResDWHRSysRef[2]"     Spc:ResSpcDHWFeaturesRef[5]:ResDWHRSysRef[2]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[5]:ResDWHRSysRef[3]"     Spc:ResSpcDHWFeaturesRef[5]:ResDWHRSysRef[3]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[5]:ResDWHRSysRef[4]"     Spc:ResSpcDHWFeaturesRef[5]:ResDWHRSysRef[4]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[5]:ResDWHRSysRef[5]"     Spc:ResSpcDHWFeaturesRef[5]:ResDWHRSysRef[5]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[5]:ResDWHRSysRef[6]"     Spc:ResSpcDHWFeaturesRef[5]:ResDWHRSysRef[6]  = {  UNDEFINED  }

   "Blast Spc:ResSpcDHWFeaturesRef[6]:ResDWHRSysRef[1]"     Spc:ResSpcDHWFeaturesRef[6]:ResDWHRSysRef[1]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[6]:ResDWHRSysRef[2]"     Spc:ResSpcDHWFeaturesRef[6]:ResDWHRSysRef[2]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[6]:ResDWHRSysRef[3]"     Spc:ResSpcDHWFeaturesRef[6]:ResDWHRSysRef[3]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[6]:ResDWHRSysRef[4]"     Spc:ResSpcDHWFeaturesRef[6]:ResDWHRSysRef[4]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[6]:ResDWHRSysRef[5]"     Spc:ResSpcDHWFeaturesRef[6]:ResDWHRSysRef[5]  = {  UNDEFINED  }
   "Blast Spc:ResSpcDHWFeaturesRef[6]:ResDWHRSysRef[6]"     Spc:ResSpcDHWFeaturesRef[6]:ResDWHRSysRef[6]  = {  UNDEFINED  }
END
;;*************************************************************************  - SAC 1/8/19
;RULELIST  "Blast_DwellUnitType_DWHRSysRefs_1"  1 0 0 1
;   "Blast DwellUnitType:DWHRSysRef1[1]"   DwellUnitType:DWHRSysRef1[1]  = {  UNDEFINED  }
;   "Blast DwellUnitType:DWHRSysRef2[1]"   DwellUnitType:DWHRSysRef2[1]  = {  UNDEFINED  }
;   "Blast DwellUnitType:DWHRSysRef3[1]"   DwellUnitType:DWHRSysRef3[1]  = {  UNDEFINED  }
;   "Blast DwellUnitType:DWHRSysRef4[1]"   DwellUnitType:DWHRSysRef4[1]  = {  UNDEFINED  }
;   "Blast DwellUnitType:DWHRSysRef5[1]"   DwellUnitType:DWHRSysRef5[1]  = {  UNDEFINED  }
;   "Blast DwellUnitType:DWHRSysRef6[1]"   DwellUnitType:DWHRSysRef6[1]  = {  UNDEFINED  }
;END
;;*************************************************************************


;*************************************************************************
;*************************************************************************

ENDFILE
