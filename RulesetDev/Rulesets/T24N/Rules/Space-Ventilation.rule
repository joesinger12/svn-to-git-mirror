// Space - Ventilation
//
// -------------------------------------------------------------------------
//  Copyright (c) 2012-2017, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------
//  
//


// ********** Ventilation Source ***********************************************
RULE ThrmlZn:VentSrc
  DESCRIPTION
    "The source of ventilation for an ThermalZone."
  REFERENCE 
    NACM Section 5.6.5.4
  INPUTCLASS 
    Required
// Enums defined in BEMEnums.txt for backward compatibility
; OPTION
;   None
;   Forced
;   Natural*
// * T24N_2016: Natural only allowed for OccClass = 'Residential'
// * T24N_2019: Natural only allowed for Hotel/Motel
  DEFAULT : T24N_2016
    if( LocalCompAssigned( VentSysRef ) )
    then "Forced"
    else if( IfValidAnd( IsCond > 0 ) )
    then
      if( IfValidAnd( IsRes > 0 ) )
      then "Natural" // Per CEC, to make transition from earlier versions
      else "Forced"
      endif
    else "None"
    endif endif
  DEFAULT
    if( LocalCompAssigned( VentSysRef ) .OR. IfValidAnd( IsCond > 0 ) )
    then "Forced"
    else "None"
    endif
  CHECKCODE : T24N_2016
    if( HasUnknownHVAC > 0 )
    then UNCHANGED // No check for partial envelope
    else
    if( IsRes = 0 .AND. IsCond > 0 .AND. VentSrc = "Natural" )
    then 
      PostError("ThermalZone '%s' is a nonresidential zone with ventilation source
                 = 'Natural'. This is not currently allowed.", Name)
    else
    if( VentIsRequired > 0 .AND. VentSrc = "None" )
    then
      PostWarning("Ventilation is required for ThermalZone '%s', but the ventilation
                 source = 'None'. Sufficient additional ventilation air flow
                 must be provided to Spaces on the BuildingStory to meet transfer air
                 requirements.", Name)
    else
    if( PrkgGarArea > 0 .AND. VentSrc = "Forced" .AND.
        ( LocalCompAssigned( VentSysRef ) = 0  
        .OR.
        LocalCompAssigned( ExhSysRef ) = 0 ) )
    then 
      PostError("ThermalZone '%s' is comprised of Parking Garage space, but no
                 ventilation or exhaust system is defined.", Name)
    else UNCHANGED
    endif endif endif endif
  CHECKCODE : T24N
    if( HasUnknownHVAC > 0 )
    then UNCHANGED // No check for partial envelope
    else
    if( IsHotelMotelGuestRm < 1 .AND. IsCond > 0 .AND. VentSrc = "Natural" )
    then 
      PostError("ThermalZone '%s' has ventilation source = 'Natural'. 
                 This method is only allowed for hotel/motel guest rooms.", Name)
    else
    if( VentIsRequired > 0 .AND. CodeVentFlow > 0 .AND. VentSrc = "None" )
    then
      PostWarning("Ventilation is required for ThermalZone '%s', but the ventilation
                 source = 'None'. Sufficient additional ventilation air flow
                 must be provided to Spaces on the BuildingStory to meet transfer air
                 requirements.", Name)
    else
    if( PrkgGarArea > 0 .AND. VentSrc = "Forced" .AND.
        ( LocalCompAssigned( VentSysRef ) = 0  
        .OR.
        LocalCompAssigned( ExhSysRef ) = 0 ) )
    then 
      PostError("ThermalZone '%s' is comprised of Parking Garage space, but no
                 ventilation or exhaust system is defined.", Name)
    else UNCHANGED
    endif endif endif endif
  CHECKCODE : S901G ECBC
    if( IsRes = 0 .AND. IsCond > 0 .AND. VentSrc = "Natural" )
    then 
      PostError("ThermalZone '%s' is a nonresidential zone with ventilation source
                 = 'Natural'. This is not currently supported.", Name)
    else
    if( VentIsRequired > 0 .AND. VentStd != "Other" .AND. VentSrc = "None" ) 
    then
      PostWarning("Ventilation is required for ThermalZone '%s', but VentilationSource
                   is set to 'None'. Sufficient additional ventilation air flow
                   must be provided to Spaces on the BuildingStory to meet transfer air
                   requirements.", Name)
    else
    if( PrkgGarArea > 0 .AND. VentSrc = "Forced" .AND.
        ( LocalCompAssigned( VentSysRef ) = 0  
        .OR.
        LocalCompAssigned( ExhSysRef ) = 0 ) )
    then 
      PostError("ThermalZone '%s' is comprised of Parking Garage space, but no
                 ventilation or exhaust system is defined.", Name)
    else UNCHANGED
    endif endif endif
  CHECKSIM
    if( BaseSysNum = 0 .AND. 
        VentSrc = "Forced" .AND. 
        LocalCompAssigned( VentSysRef ) = 0 )
    then
      PostError("ThermalZone '%s' has 'Forced' ventilation, but no ventilation
                 system is defined.", Name)
    else
    if( VentSrc != "Forced" .AND. 
        LocalCompAssigned( VentSysRef ) )
    then
      PostError("ThermalZone '%s' has a ventilation system defined, but the
                 source = 'None' or 'Natural'. Revise to 'Forced' or remove
                 reference to the ventilation system.", Name)
    else UNCHANGED
    endif endif
  SIZING : T24N
    if( IsCond > 0 .AND. BaseSysNum > 0 )
    then
      if( HasUnknownHVAC > 0 )
      then // Partial envelope
        "Forced"
      else if( VentIsRequired > 0 )
      then // Baseline ventilation source is same as the proposed.
        VentSrc
      else "None"
      endif endif
    else VentSrc
    endif
  SIZING : S901G ECBC
    if( IsCond > 0 .AND. BaseSysNum > 0 )
    then
      if( VentIsRequired > 0 )
      then VentSrc
      else "None"
      endif
    else VentSrc
    endif
  ANNUAL
    VentSrc
ENDRULE
// Echo ThrmlZn value to Space for local ventilation calculations used for compliance
RULE NEW Spc:VentSrc
  DATATYPE
    Enumeration
  LONGFORM
    VentilationSource
  DESCRIPTION
    "The source of ventilation for the Space."
  HELP
    "This property is specified at the ThermalZone; it is shown here only for
     reference. To change the specification method, click on the '...' button to
     navigate to the ThermalZone."
  INPUTCLASS
    NotInput
  OPTION
    None
    Forced
    Natural
  DEFAULT
    if( LocalCompAssigned( ThrmlZnRef ) )
    then ThrmlZnRef:VentSrc
    else "None"
    endif
ENDRULE


// ********** Ventilation System ***********************************************
// Set flag to designate what system types can provide ventilation
RULE NEW AirSys:IsValidVentSys
  DATATYPE
    Integer
  LONGFORM
    IsValidVentilationSystem
  DESCRIPTION
    "An integer flag that indicates the system can be defined to VentSysRef."
  INPUTCLASS 
    NotInput
  DEFAULT
    1 // All AirSys types are eligible
  CHECKCODE
    if( MaxRevRef( ThrmlZn:VentSysRef, ThrmlZn:VentStdIdx ) > 98 .AND.
        MinRevRef( ThrmlZn:VentSysRef, ThrmlZn:VentStdIdx ) < 98 )
    then
      PostError("AirSystem '%s' is the ventilation system for zones that have both
                 VentilationStandard = 'Other' as well as another VentilationStandard.
                 This is not allowed. Revise the model so that all zones served by 
                 are either all 'Other' or all another valid VentilationStandard.",
                 Name)
    else UNCHANGEd
    endif
ENDRULE

RULE NEW ZnSys:IsValidVentSys
  DATATYPE
    Integer
  LONGFORM
    IsValidVentilationSystem
  DESCRIPTION
    "An integer flag that indicates the system can be defined to VentSysRef."
  INPUTCLASS 
    NotInput
  DEFAULT
  if( Type = "Baseboard" .OR. 
      Type = "PassiveBeam" .OR.
      Type = "MiniSplitAC" .OR. 
      Type = "MiniSplitHP" .OR.
      ( Type = "Furnace" .AND. 
        ( Subtype != "Other" .OR. IfValidAnd( FurnaceType = "Gravity" ) ) )
    )
  then 0 // These systems cannot be defined as ventilation systems
  else 1
  endif
ENDRULE

RULE NEW ZnSys:IsValidDOASZnSys
  DATATYPE
    Integer
  LONGFORM
     IsValidDOASZoneSystem
  DESCRIPTION
    "A flag set to indicate if the ZnSys can be connected to a DOAS system."
  INPUTCLASS
    NotInput
  DEFAULT
    if( ( Type = "SZAC" .OR.
          Type = "SZHP" .OR.
          Type = "SZDFHP" .OR. 
          Type = "SPVAC" .OR.
          Type = "SPVHP" .OR.
          Type = "FPFC" .OR.
          Type = "WSHP" .OR.
          Type = "PTAC" .OR.
          Type = "PTHP" .OR.
          Type = "VRF" ) .AND.
        FanCtrl = "Continuous" )
    then 1
    else 0
    endif
ENDRULE

// Default ventilation system reference
RULE ThrmlZn:VentSysRef
  DEFAULT : T24N_2016
    if( VentSrc = "Forced" .AND.
        HasUnknownHVAC = 0 )
    then
      if( IfValidAnd( IsCond > 0 ) .AND. LocalCompAssigned( PriAirCondgSysRef[1] ) )
      then
        if( IfValidAnd( PriAirCondgSysRef[1]:IsValidVentSys > 0 ) )
        then PriAirCondgSysRef[1] // Default to the PriAirCondgSys specified
        else UNDEFINED // PriAirCondgSys is not capable of being VentSys
        endif
      else if( Type = "Unconditioned" .AND. LocalCompAssigned( ExhSysRef ) )
      then ExhSysRef // Default to the exhaust system specified
      else UNDEFINED
      endif endif
    else UNDEFINED
    endif
  DEFAULT
    if( VentSrc = "Forced" .AND.
        HasUnknownHVAC = 0 )
    then
      if( IfValidAnd( VentFlow > 0 ) .AND. LocalCompAssigned( PriAirCondgSysRef[1] ) )
      then
        if( IfValidAnd( PriAirCondgSysRef[1]:IsValidVentSys > 0 ) )
        then PriAirCondgSysRef[1] // Default to the PriAirCondgSys specified
        else UNDEFINED // PriAirCondgSys is not capable of being VentSys 
        endif
// Removed this since Exhaust systems are no longer always considered the ventilation system
;      else
;      if( IfValidAnd( ExhFlow > 0 ) .AND. LocalCompAssigned( ExhSysRef ) )
;      then ExhSysRef
      else UNDEFINED
      endif ;endif
    else UNDEFINED
    endif
ENDRULE

// Set flags to indicate if the space is part of a zone with a Vent or Exhaust system
// and if the ventilation system is an exhaust system
RULE NEW ThrmlZn:HasVentSys
  DATATYPE
    Integer
  LONGFORM
     HasVentilationSystem
  DESCRIPTION
    "A flag set to indicate if the ThrmlZn has a ventilation system."
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( VentSysRef ) .AND. VentSrc = "Forced" )
    then 1
    else 0
    endif
ENDRULE

RULE NEW Spc:HasVentSys
  DATATYPE
    Integer
  LONGFORM
     HasVentilationSystem
  DESCRIPTION
    "A flag set to indicate if the Space has a ventilation system."
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ThrmlZnRef) )
    then ThrmlZnRef:HasVentSys
    else 0
    endif
ENDRULE

RULE NEW ThrmlZn:HasExhSys
  DATATYPE
    Integer
  LONGFORM
     HasExhaustSystem
  DESCRIPTION
    "A flag set to indicate if the Space has an exhaust system."
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ExhSysRef ) )
    then 1
    else 0
    endif
ENDRULE

RULE NEW Spc:HasExhSys
  DATATYPE
    Integer
  LONGFORM
     HasExhaustSystem
  DESCRIPTION
    "A flag set to indicate if the Space has an exhaust system."
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ThrmlZnRef ) )
    then ThrmlZnRef:HasExhSys
    else 0
    endif
ENDRULE

// Set a flag if the ventilation is system is exhaust
RULE NEW ThrmlZn:BaseVentSysIsExh
  DATATYPE
    Integer
  LONGFORM
    BaselineVentilationSystemIsExhaust
  DESCRIPTION
    "See integer flag values for PropVentSysIsExh."
  INPUTCLASS 
    NotInput
  SIZING
    if( BaseSysNum > 0 )
    then 
      if( IsCond > 0 .AND. VentSrc = "Forced" .AND. 
          IsHotelMotelGuestRm > 0 )
      then 3 // Baseline vent system for Htl/Mtl is exhaust
      else
      if( IsCond > 0 .AND. VentSrc = "Forced" .AND. 
          IsHighRiseRes > 0 )
      then
        if( Proj:HRRVentSysChange > 0 .AND. PropVentSysIsExh = 2 )
        then // 2019.2.0 ACM rule. Baseline vent system for HRR w/ exhaust is also exhaust. See ticket 3040 
          2
        else // 2019.1.2/1.3 rule. Baseline is balanced
          0
        endif
      else
// No longer used
;      if( IsCond > 0 .AND. VentSrc = "Forced" .AND. 
;          LabArea = 0 .AND. CommKitArea = 0 .AND.
;          CodeExhFlow > 0 .AND. CodeVentFlow = 0 )
;      then // Is a conditioned space with code exhaust but no vent requirement
;        if( ExhSrc = "DirectOutsideAir" )
;        then 3 // Model vent as infiltration
;        else 1 // Model as general exhaust
;        endif
;      else
      if( Type = "Unconditioned" .AND. CodeExhFlow > 0 )
      then 4 // Unconditioned space
      else 0 // Baseline does not use exhaust for ventilation
      endif endif endif ;endif
    else PropVentSysIsExh // Set equal to proposed if no baseline system applies
    endif
ENDRULE

RULE NEW ThrmlZn:PropVentSysIsExh
  DATATYPE
    Integer
  LONGFORM
    ProposedVentilationSystemIsExhaust
  DESCRIPTION : T24N_2016
    "An integer flag that indicates the ventilation system is an exhaust system.
    
     If flag = 0, the ventilation system is not exhaust, or there is no ventilation 
     air flow specified.

     If flag = 1, then it is a general exhaust system.

     If flag = 2, then it is a residential exhaust system."
  DESCRIPTION
    "An integer flag that indicates the ventilation system is an exhaust system.
    
     If flag = 0, the OA ventilation system is not an exhaust system, or there is no ventilation 
     air flow specified.

     If flag = 1, the OA ventilation system is an exhaust system serving a conditioned 
     nonresidential space, but makeup air is from local zone or adjacent zones. 
     Ventilation is not modeled as infiltration unless the Story:OAExhBalRat is < 1.0 minus tolerance.

     If flag = 2, the OA ventilation system is an exhaust that serves a high-rise residential space.
     Ventilation is modeled as infiltration.
   
     If flag = 3, the OA ventilation system is an exhaust system that serves as a
     conditioned nonresidential space, and is a VentilationOnly system or makeup air is 
     direct from outside. In both cases, ventilation is modeled as infiltration.

     If flag = 4, then it is an exhaust system for unconditioned space outside
     the conditioned envelope, i.e. parking garage. Ventilation is modeled as infiltration."
  INPUTCLASS 
    NotInput
  DEFAULT : T24N_2016
    if( HasVentSys > 0 .AND. IfValidAnd( VentFlow > 0 ) )
    then
      if( IsRes > 0 .AND. IfValidAnd( VentSysRef:IsExhSys = 1 ) )
      then 2
      else if( IfValidAnd( VentSysRef:IsExhSys = 1 ) )
      then 1
      else 0
      endif endif
    else 0
    endif
  DEFAULT
    if( HasVentSys > 0 )
    then // VentSysRef is defined 
      if( Type = "Unconditioned" .AND. 
          CondgStatus = 0 .AND.
          IfValidAnd( VentSysRef:IsExhSys > 0 ) .AND.
          ( IfValidAnd( VentFlow > 0 ) .OR. IfValidAnd( ExhFlow > 0 ) ) )
      then 4 // Unconditioned space , not IndirectlyConditioned ventilation system
      else
      if( IfValidAnd( VentSysRef:IsExhSys > 0 ) .AND. IfValidAnd( VentFlow > 0 ) )
      then
        if( IsHighRiseRes > 0 )
        then 2 // HRR exhaust ventilation
        else
        if( IsHotelMotelGuestRm > 0 )
        then 3 // Hotel/motel exhaust ventilation
        else
        if( IfValidAnd( ExhSrc = "DirectOutsideAir" ) )
        then 3 // This is an exhaust based ventilation system
        else 
        if( IfValidAnd( VentSysRef:Type = "VentilationOnly" ) )
        then 3 // VentilationOnly exhaust system is defined
        else 1 // General exhaust-based ventilation system
        endif endif endif endif
      else 0
      endif endif
    else 0
    endif
  SIZING : T24N_2016
    if( BaseSysNum > 0 )
    then 
      if( IsCond > 0 .AND. VentSrc = "Forced" .AND. IsRes > 0 )
      then 2 // Baseline vent system for Residential is exhaust
      else
      if( Type = "Unconditioned" )
      then PropVentSysIsExh
      else 0
      endif endif
    else PropVentSysIsExh
    endif
  SIZING : T24N
    if( BaseSysNum > 0 )
    then // Set equal to baseline if this is has a baseline system (HasUnknownHVAC)
      BaseVentSysIsExh
    else // Unchanged
      PropVentSysIsExh
    endif
ENDRULE

RULE NEW Spc:PropVentSysIsExh
  DATATYPE
    Integer
  LONGFORM
    ProposedVentilationSystemIsExhaust
  DESCRIPTION
    "An integer flag that indicates the PROPOSED entilation system is an exhaust system."
  INPUTCLASS
    NotInput
  DEFAULT
    if( HasVentSys > 0 )
    then ThrmlZnRef:PropVentSysIsExh
    else 0
    endif 
  SIZING
    ThrmlZnRef:PropVentSysIsExh 
ENDRULE

RULE NEW Spc:BaseVentSysIsExh
  DATATYPE
    Integer
  LONGFORM
    BaselineVentilationSystemIsExhaust
  DESCRIPTION
    "An integer flag that indicates the BASELINE ventilation system is an exhaust system."
  INPUTCLASS
    NotInput
  SIZING
    if( LocalCompAssigned( ThrmlZnRef ) )
    then ThrmlZnRef:BaseVentSysIsExh 
    else 0
    endif
ENDRULE

RULE NEW ThrmlZn:PropVentSysIsSup
  DATATYPE
    Integer
  LONGFORM
    ProposedVentilationSystemIsSupply
  DESCRIPTION
    "An integer flag that indicates the PROPOSED ventilation system is a supply-only system."
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( VentSysRef ) )
    then 
      if( IfValidAnd( VentSysRef:IsBalancedVentSys > 0 ) )
      then 0 // Is a balanced vent system
      else
      if( PropVentSysIsExh > 0 )
      then 0 // Is an exhaust vent system
      else 1 // Classify as supply system if not balanced or exhaust
      endif endif
    else 0
    endif
ENDRULE

RULE NEW ThrmlZn:PropVentSysIsBalanced
  DATATYPE
    Integer
  LONGFORM
    ProposedVentilationSystemIsBalanced
  DESCRIPTION
    "An integer flag that indicates the ventilation system is a balanced system."
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( VentSysRef ) )
    then
      if( PropVentSysIsExh > 0 .OR.
          PropVentSysIsSup > 0 )
      then 0 // Is a supply or exhaust system
      else 1
      endif
    else 0
    endif
ENDRULE

RULE NEW ThrmlZn:PropExhSysIsBalanced
  DATATYPE
    Integer
  LONGFORM
    ProposedExhaustSystemIsBalanced
  DESCRIPTION
    "An integer flag that indicates the ventilation system is a balanced system."
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ExhSysRef ) )
    then
      if( IfValidAnd( VentSysRef:IsBalancedVentSys > 0 ) )
      then 1 // Is a supply or exhaust system
      else 0
      endif
    else 0
    endif
ENDRULE

RULE NEW Spc:PropExhSysIsBalanced
  DATATYPE
    Integer
  LONGFORM
    ProposedExhaustSystemIsBalanced
  DESCRIPTION
    "An integer flag that indicates the BASELINE ventilation system is an exhaust system."
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ThrmlZnRef ) )
    then ThrmlZnRef:PropExhSysIsBalanced
    else 0
    endif
ENDRULE

RULE NEW ThrmlZn:HighRiseResVentIsExh
  DATATYPE
    Integer
  LONGFORM
    HighRiseResidentialVentilationIsExhaust
  DESCRIPTION
    "An integer flag that indicates the ventilation system for 
     a high-rise residential zone is an exhaust-only system."
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( IsHighRiseRes > 0 ) .AND. 
        IfValidAnd( HasVentSys > 0 ) .AND.
        IfValidAnd( IsNewVent > 0 ) .AND.
        IfValidAnd( PropVentSysIsExh > 0 ) )
    then 1
    else 0
    endif
ENDRULE

RULE NEW ThrmlZn:HighRiseResVentIsSup
  DATATYPE
    Integer
  LONGFORM
    HighRiseResidentialVentilationIsSupply
  DESCRIPTION
    "An integer flag that indicates the ventilation system for 
     a high-rise residential zone is an supply-only system."
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( IsHighRiseRes > 0 ) .AND. 
        IfValidAnd( HasVentSys > 0 ) .AND.
        IfValidAnd( IsNewVent > 0 ) .AND.
        IfValidAnd( PropVentSysIsSup > 0 ) )
    then 1
    else 0
    endif
ENDRULE

RULE NEW ThrmlZn:HighRiseResVentIsBalanced
  DATATYPE
    Integer
  LONGFORM
    HighRiseResidentialVentilationIsBalanced
  DESCRIPTION
    "An integer flag that indicates the ventilation system for 
     a high-rise residential zone is an supply-only system."
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( IsHighRiseRes > 0 ) .AND. 
        IfValidAnd( HasVentSys > 0 ) .AND.
        IfValidAnd( IsNewVent > 0 ) .AND.
        IfValidAnd( PropVentSysIsBalanced > 0 ) )
    then 1
    else 0
    endif
ENDRULE

RULE ThrmlZn:HighRiseResVentType
  DESCRIPTION
    "For high-rise residential zones, a description of the ventilation"
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( HighRiseResVentIsExh > 0 ) )
    then "ExhaustOnly"
    else 
    if( IfValidAnd( HighRiseResVentIsSup > 0 ) )
    then "SupplyOnly"
    else
    if( IfValidAnd( HighRiseResVentIsBalanced > 0 ) )
    then "Balanced"
    else UNDEFINED
    endif endif endif
ENDRULE


// ********** Ventilation by DOAS ******************************************
RULE ThrmlZn:VentByPriAirCondgSys[1]
  DESCRIPTION
    "A flag that indicates if the #1 heating/cooling ZoneSystem is
     connected to a dedicated ventilation system (DOAS) AirSystem."
  HELP
    "A ZoneSystem that serves as a primary air conditioning can be connected
     to the zone ventilation system (i.e. DOAS) if it meets the following criteria:
     1) It is Type 'SZAC', 'SZHP', 'SPVAC', 'SPVHP', 'FPFC, 'WSHP', 'PTAC'
     'PTHP', or 'VRF', and
     2) The ZoneSystem fan control is 'Continuous'.
     3) The ventilation system is a different system and is not connected
     to any other ZoneSystems serving the zone."
  INPUTCLASS 
    Optional
  DEFAULT
    0
  CHECKSIM
    if( LocalCompAssigned( PriAirCondgSysRef[1] ) = ComponentType( "ZnSys" ) .AND.
        IfValidAnd( UniqueVentSysAssigned > 0 ) .AND.
        IfValidAnd( VentByPriAirCondgSys[1] > 0 ) )
    then // Pri[1] sys is different than vent system, and vent system
         // is specified to be connected to Pri[1]
      if( IfValidAnd( PriAirCondgSysRef[1]:IsValidDOASZnSys = 0 ) )
      then // The combination of systems/controls is not valid for connecting vent to Pri[1] sys
        PostError("ZoneSystem '%s' serving thermal zone '%s' is specified as
                   'Connected to DOAS'. However, the ZoneSystem Type 
                   or fan control is not valid. Revise inputs for consistency; 
                   see HELP for valid configuration details.", 
                  PriAirCondgSysRef[1]:Name, Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif
  CHECKCODE
    if( LocalCompAssigned( PriAirCondgSysRef[1] ) = ComponentType( "ZnSys" ) .AND.
        IfValidAnd( UniqueVentSysAssigned > 0 ) .AND.
        IfValidAnd( VentByPriAirCondgSys[1] > 0 ) .AND.
        IfValidAnd( PriAirCondgSysRef[1]:IsValidDOASZnSys > 0 ) )
    then
      if( IsHighRiseRes > 0 .AND.
          IsNewHVAC > 0 )
      then 
        PostError("ZoneSystem '%s' serving thermal zone '%s' is specified as
                   'Connected to DOAS'. This is not allowed for high-rise residential
                   systems.", 
                  PriAirCondgSysRef[1]:Name, Name) 
      else UNCHANGED
      endif
    else UNCHANGED
    endif
  SIZING
    if( LocalCompAssigned( PriAirCondgSysRef[1] ) = ComponentType( "ZnSys" ) .AND.
        IfValidAnd( UniqueVentSysAssigned > 0 ) .AND.
        IfValidAnd( VentByPriAirCondgSys[1] > 0 ) )
    then 
      if( IfValidAnd( PriAirCondgSysRef[1]:IsValidDOASZnSys > 0 ) )
      then VentByPriAirCondgSys[1]
      else 0
      endif
    else UNDEFINED
    endif
ENDRULE

RULE ThrmlZn:VentByPriAirCondgSys[2]
  DESCRIPTION
    "A flag that indicates if the #2 heating/cooling ZoneSystem is
     connected to a dedicated ventilation system (DOAS) AirSystem."
  HELP
    "A ZoneSystem that serves as a primary air conditioning can be connected
     to the zone ventilation system (i.e. DOAS) if it meets the following criteria:
     1) It is Type 'SZAC', 'SZHP', 'SPVAC', 'SPVHP', 'FPFC, 'WSHP', 'PTAC'
     'PTHP', or 'VRF', and
     2) The ZoneSystem fan control is 'Continuous'.
     3) The ventilation system is a different system and is not connected
     to any other ZoneSystems serving the zone."
  INPUTCLASS 
    Optional
  DEFAULT
    0
  CHECKSIM
    if( LocalCompAssigned( PriAirCondgSysRef[2] ) = ComponentType( "ZnSys" ) .AND.
        IfValidAnd( UniqueVentSysAssigned > 0 ) .AND.
        IfValidAnd( VentByPriAirCondgSys[2] > 0 ) )
    then // Pri[2] sys is different than vent system, and vent system
         // is specified to be connected to Pri[2]
      if( LocalCompAssigned( PriAirCondgSysRef[1] ) = ComponentType( "ZnSys" ) .AND.
          IfValidAnd( VentByPriAirCondgSys[1] > 0 ) )
      then
        PostError("Thermal zone '%s' is served by two ZoneSystem with both
                   systems set to be connected to a DOAS. This is currently
                   not supported; see HELP for valid configuration details.", 
                  Name)
      else
      if( IfValidAnd( PriAirCondgSysRef[2]:IsValidDOASZnSys = 0 ) )
      then // The combination of systems/controls is not valid for connecting vent to Pri[2] sys
        PostError("ZoneSystem '%s' serving thermal zone '%s' is specified as
                   'Connected to DOAS'. However, the ZoneSystem Type 
                   or fan control is not valid. Revise inputs for consistency; 
                   see HELP for valid configuration details.", 
                  PriAirCondgSysRef[2]:Name, Name)
      else UNCHANGED
      endif endif
    else UNCHANGED
    endif
  CHECKCODE
    if( LocalCompAssigned( PriAirCondgSysRef[2] ) = ComponentType( "ZnSys" ) .AND.
        IfValidAnd( UniqueVentSysAssigned > 0 ) .AND.
        IfValidAnd( VentByPriAirCondgSys[2] > 0 ) .AND.
        IfValidAnd( PriAirCondgSysRef[2]:IsValidDOASZnSys > 0 ) )
    then
      if( IsHighRiseRes > 0 .AND.
          IsNewHVAC > 0 )
      then 
        PostError("ZoneSystem '%s' serving thermal zone '%s' is specified as
                   'Connected to DOAS'. This is not allowed for high-rise residential
                   systems.", 
                  PriAirCondgSysRef[2]:Name, Name) 
      else UNCHANGED
      endif
    else UNCHANGED
    endif
  SIZING
    if( LocalCompAssigned( PriAirCondgSysRef[2] ) .AND.
        IfValidAnd( UniqueVentSysAssigned > 0 ) .AND.
        IfValidAnd( VentByPriAirCondgSys[2] > 0 ) )
    then 
      if( IfValidAnd( PriAirCondgSysRef[2]:IsValidDOASZnSys > 0 ) )
      then VentByPriAirCondgSys[2]
      else 0
      endif
    else UNDEFINED
    endif
ENDRULE

RULE ThrmlZn:ZnSysVentConnectionType
  DESCRIPTION
    "If the Primary heating/cooling system is a ZoneSystem and connected to a DOAS,
     this indicates whether the connection is to the inlet or supply of the system."
  HELP
    "Only 'Inlet' side connection is supported at this time."
  INPUTCLASS 
    Optional
  OPTION
    Inlet
  DEFAULT
    if( IfValidAnd( VentByPriAirCondgSys[1] > 0 ) .OR.
        IfValidAnd( VentByPriAirCondgSys[2] > 0 ) )
    then "Inlet"
    else UNDEFINED
    endif
  SIZING
    if( ( IfValidAnd( VentByPriAirCondgSys[1] > 0 ) .AND.
          IfValidAnd( PriAirCondgSysRef[1]:IsValidDOASZnSys > 0 ) ) .OR.
        ( IfValidAnd( VentByPriAirCondgSys[2] > 0 ) .AND.
          IfValidAnd( PriAirCondgSysRef[2]:IsValidDOASZnSys > 0 ) ) )
    then ZnSysVentConnectionType
    else UNDEFINED
    endif
ENDRULE
 

// A flag set to indicate if ventilation (supply OA, exhaust, or both) is required for the space
RULE NEW Spc:VentIsRequired
  DATATYPE
    Integer
  LONGFORM
    VentilationIsRequired
  DESCRIPTION
    "A flag set to indicate if the nonresidential Space is required to have ventilation.
     Residential spaces are handled separately."
  INPUTCLASS
    NotInput
  DEFAULT : T24N_2016
    if( ( IsCond > 0 .OR. PrkgGarArea > 0 ) .AND. 
        HasNoInternalLds = 0 )
    then 1
    else 0
    endif
  DEFAULT
    if( HasNoInternalLds > 0 .OR.
        LocalStatus( VentSpcFunc ) = 0 )
    then 0
    else
    if( IfValidAnd( VentSpcFunc = "NA" ) .AND. 
        HighRiseResCondFlrArea = 0 ) 
    then 0
    else 1
    endif endif
ENDRULE


// Set flag to indicate if ventilation flows are included in BuildingStory
// air balance calculations
RULE NEW Spc:IncludeInBal
  DATATYPE
    Integer
  LONGFORM 
    IncludeInBalance
  INPUTCLASS 
    NotInput
  DEFAULT : T24N_2016
    if( VentIsRequired = 0 .OR.
        IsRes > 0 .OR. // Residential spaces excluded from balance 
        IfValidAnd( IsResCommon > 0 ) .OR. // Residential common spaces excluded from balance 
        LabArea > 0 .OR. // Lab spaces excluded from balance
        PrkgGarArea > 0 .OR. // Parking garage spaces excluded from balance
        IfValidAnd( IsNewVent = 0 ) .OR. // Ventilation system is existing
        IfValidAnd( OverallStatus = "Existing" ) .OR. // Existing overall status excluded from balance
        IfValidAnd( HasUnknownHVAC = 1 ) ) // Unknown HVAC system
    then 0 
    else 1
    endif
  DEFAULT
    if( VentIsRequired = 0 .OR.
        IsCond = 0 .OR. // Is not directly or indirectly conditioned
        IsRes > 0 .OR. // Residential spaces excluded from balance 
;        IfValidAnd( IsResCommon > 0 ) .OR. // Residential common spaces excluded from balance 
        LabArea > 0 .OR. // Lab spaces excluded from balance
        PrkgGarArea > 0 .OR. // Parking garage spaces excluded from balance
        HlthCareArea > 0 .OR. // Healthcare areas are excluded from balance
        IfValidAnd( IsNewVent = 0 ) .OR. // Ventilation system is existing
        IfValidAnd( OverallStatus = "Existing" ) .OR. // Existing overall status excluded from balance
        IfValidAnd( HasUnknownHVAC = 1 ) ) // Unknown HVAC system
    then 0 
    else 1
    endif
ENDRULE


// ********** Ventilation Space Function *********************************************
RULE Spc:VentSpcFunc
  DESCRIPTION
    "The ventilation occupancy category for the Space."
  HELP
    "The list of available ventialtion categories available is depends on the 
     SpaceFunction (SpcFunc) selected. If you do not see the category that is applicable,
     try selecting another related SpcFunc."
  RESETS
    ResetThisWhenTheFollowingIsModified
      SpcFunc
  INPUTCLASS
    Default
//OPTION
// Defined in BEMEnums.txt
  DEFAULT : T24N_2016
    UNDEFINED  
  DEFAULT : T24N
    if( SpcFunc = "_Invalid from 2016 - Corridors, Restrooms, Stairs, and Support Areas" .OR.
        SpcFunc = "_Invalid from 2016 - Police Station and Fire Station" .OR. 
        SpcFunc = "_Invalid from 2016 - Housing, Public and Common Areas: Multi-family, Dormitory" .OR.
        SpcFunc = "_Invalid from 2016 - Housing, Public and Common Areas: Senior Housing" .OR.
        SpcFunc = "- specify -" ) 
    then "NA"
    else if( LocalCompAssigned( SpcFuncDefaultsRef ) .AND. LocalStatus( SpcFunc ) < 5 ) 
    then // SpcFuncDef is assigned, use the SpcFunc defined for that.
      SpcFuncDefaultsRef:VentSpcFunc
    else SpaceFunctionData:VentSpcFuncDef("FuncType", SpcFunc)
    endif endif
ENDRULE


// ********** Ventilation Space Function Occupancy Density ****************************
RULE NEW Spc:VentOccDensSim
  DATATYPE
    Float
  LONGFORM
    VentilationOccupancyDensitySimulated
  DESCRIPTION
    "The occupancy density assumed in the calculation of the CodeMinVentPerArea for each
     VentSpcFunc."
  INPUTCLASS
    NotInput
  DEFAULT : T24N_2016
    UNDEFINED
  DEFAULT : T24N_2019
    if( VentIsRequired = 0 )
    then 0
    else VentilationSpaceFunctionData:VentOccDensSim("VentFuncType", VentSpcFunc)
    endif
ENDRULE

// Set project level specification for OccDens for DCV
RULE NEW Proj:OccDensForReqDCV
  DATATYPE
    Float
  LONGFORM
     OccupancyDensityForRequiredDCV
  DESCRIPTION
    "The occupant density threshold for requiring DCV."
  INPUTCLASS
    NotInput
  DEFAULT : T24N
    25
  DEFAULT : S901G ECBC
    40
ENDRULE

RULE NEW Spc:DCVExceptionArea
  DATATYPE
    Float
  LONGFORM
    DemandControlledVentilationExceptionArea
  DESCRIPTION : T24N
    "Space area that MAY qualify for EXCEPTION 1 to Section 120.1(c)3."
  INPUTCLASS
    NotInput
  DEFAULT : T24N_2016
    if( SpcFunc = "Classrooms, Lecture, Training, Vocational Areas" )
;        SpcFunc = "Medical and Clinical Care" .OR.   
;        SpcFunc = "Office (Greater than 250 square feet in floor area)" ) 
    then FlrArea
    else 0
    endif
  DEFAULT : T24N
    0 // This exception has been removed in 2019 Std
  DEFAULT : S901G ECBC
    0 // Not used
ENDRULE

RULE NEW ThrmlZn:DCVExceptionArea
  DATATYPE
    Float
  LONGFORM
    DemandControlledVentilationExceptionArea
  DESCRIPTION : T24N
    "ThermalZone area that qualifies for EXCEPTION 1 to Section 120.1(c)3."
  INPUTCLASS
    NotInput
  DEFAULT : T24N
    SumRevRef( Spc:ThrmlZnRef, Spc:DCVExceptionArea )
  DEFAULT : S901G ECBC
    0 // Not used
  CHECKCODE : T24N
    if( VentIsRequired .AND. DCVExceptionArea > 0 .AND.
        IfValidAnd( DCVIsRequired > 0 ) .AND.
        IfValidAnd( HasDCV = 0 ) .AND.
        IfValidAnd( DCVExceptionArea != FlrArea ) )
    then
      PostError("ThermalZone '%s' does not have 'CO2Sensor' control of ventilation,
                 but is comprised of spaces that both do and do not qualify for
                 DCV exceptions.", Name)
    else UNCHANGED
    endif                                   
ENDRULE


// ********** Ventilation Standard *********************************************
RULE ThrmlZn:VentStd
  DESCRIPTION
    "The VentilationStandard used for all of the Spaces in the the ThermalZone."
  HELP
    "By default, the VentilationStandard is defaulted to the one specified at the Project level. 
     If the zone has been designed to some other standard, select 'Other'. If 'Other', the
     ventilation rate for the zone is the same for both the proposed and baseline."
  INPUTCLASS
    Default
  OPTION : T24N_2013
    T24-2013
// Option 'T24-2013' is reset to 'T24-2016' in Rules_LoadModelAdjustments.rule
  OPTION : T24N_2016
    T24-2013
    T24-2016
    Other
  OPTION : T24N_2019
    T24-2019
    Other
  OPTION : T24N_2022
    T24-2022
    Other
  OPTION : T24N_2025
    T24-2022
    Other
  OPTION : S901G ECBC
    T24-2013
    62.1-2010
    IMC-2012
    Other
  DEFAULT  : T24N_2016
    "T24-2016"
  DEFAULT  : T24N
    if( IfValidAnd( HlthCareArea > 0 ) )
    then "Other"
    else Proj:VentStd
    endif
  CHECKCODE : T24N_2016
    if( VentStd = "T24-2013" )
    then
      PostError("The Ventilation Standard for ThermalZone '%s' is specified as '%s', which
                 is not supported for the current ruleset. It will be reset to 'T24-2016'
                 when the file is reloaded.", Name, VentStd)
    else UNCHANGED
    endif
  CHECKCODE : T24N
    if( HlthCareArea > 0 .AND. VentStd != "Other" )
    then 
      PostError("The ThermalZone '%s' is a 'Healthcare' zone, which requires specifying
                 the Ventilation Standard to 'Other' and entering a Ventilation
                 Standard Description for compliance analysis to proceed.", Name)
    else
    if( ( IsHighRiseRes > 0 .OR. IsHotelMotelGuestRoom > 0 ) .AND. 
        VentStd = "Other" )
    then 
      PostError("The ThermalZone '%s' is a high-rise residential or hotel/motel
                 guestroom zone. Ventilation Standard 'Other' is not
                 allowed.", Name)
    else UNCHANGED
    endif endif
  CHECKCODE
    if( VentStd != Proj:VentStd .AND. VentStd != "Other" )
    then 
      PostError("The Ventilation Standard for ThermalZone '%s' does not match the
                 Standard specified at the Project level. Re-default this property
                 or change to 'Other' if the ventilation Standard does not apply
                 to the current zone.", Name)
    else UNCHANGED
    endif    
ENDRULE

RULE ThrmlZn:VentStdDesc
  DESCRIPTION
    "A short description of the 'Other' ventilation standard used for the zone."
  HELP
    "This description is defaulted to the Project level description if 'Other'
     is selected'."
  INPUTCLASS : T24N_2016
    NotInput
  INPUTCLASS
    CondRequired
  DEFAULT : T24N_2016
    UNDEFINED
  DEFAULT
    if( VentStd = "Other" )
    then Proj:VentStdDesc
    else UNDEFINED
    endif
  CHECKCODE : T24N_2016
    UNCHANGED
  CHECKCODE
    if( VentStd = "Other" .AND. LocalStatus( VentStdDesc ) = 0 )
    then
      PostError("The VentilationStandard for ThermalZone '%s' is specified as 'Other', but
                 no description of the Standard used is provided. Input a descrption at the
                 Project level if applicable for all spaces, or at individual zones if different
                 Standards are used.", Name)
    else UNCHANGED
    endif
  SIZING : T24N_2016
    UNDEFINED
  SIZING
    if( VentStd = "Other" )
    then VentStdDesc
    else UNDEFINED
    endif
ENDRULE

RULE NEW ThrmlZn:VentStdIdx
  DATATYPE
    Integer
  LONGFORM
    VentilationStandardIndex
  DESCRIPTION
    "The index of the VentStd option. For Project CHECKCODE rule."
  DEFAULT
    switch( VentStd )
      case "T24-2013"  : 1
      case "T24-2016"  : 2
      case "T24-2019"  : 3
      case "T24-2022"  : 4
      case "62.1-2010" : 11
      case "IMC-2012"  : 21
      case "Other"     : 99
      default          : 0
   endswitch
ENDRULE

// Echo ThrmlZn value to Space for local ventilation calculations used for compliance
RULE NEW Spc:VentStd
  DATATYPE
    Enumeration
  LONGFORM
    VentilationStandard
  DESCRIPTION
    "Type ventilation standard for the space's ThermalZone."
  HELP
    "This property is specified at the ThermalZone; it is shown here only for
     reference. To change the specification method, click on the '...' button to
     navigate to the ThermalZone."
  INPUTCLASS
    NotInput
  OPTION
    T24-2013
    T24-2016
    T24-2019
    T24-2022
    62.1-2010
    IMC-2012
    Other
  DEFAULT
    if( LocalCompAssigned( ThrmlZnRef ) )
    then ThrmlZnRef:VentStd
    else Proj:VentStd
    endif
ENDRULE


// ********** Ventilation Multiplier *******************************************
RULE Spc:VentMult
  DESCRIPTION
    "A multiplier applied to ventilation inputs to increase the ventilation
     rate."
  INPUTCLASS : T24N
    NotInput
  INPUTCLASS : S901G ECBC
    Default
  COMMONMINIMUM
    1.0
  COMMONMAXIMUM
    1.5
  DEFAULT : T24N
    Proj:VentMult
  DEFAULT : S901G ECBC
    Proj:VentMult
ENDRULE


// ********** Ventilation Air Distribution Effectiveness ***********************
RULE AirSys:VentAirDistEff
  DESCRIPTION
    "The ventilation air distribution effectiveness (Ez) for the AirSystem."
  HELP
    "Used only to default the value for ThermalZones ventilated by the current
     AirSystem."
  INPUTCLASS : T24N
    NotInput
  INPUTCLASS : S901G ECBC
    Default
  COMMONMINIMUM
    0.8
  COMMONMAXIMUM
    1.0
  DEFAULT : T24N
    1.0
  DEFAULT : S901G ECBC
    1.0
ENDRULE

RULE ZnSys:VentAirDistEff
  DESCRIPTION
    "The ventilation air distribution effectiveness (Ez) for the ZoneSystem."
  HELP
    "Used only to default the value for the ThermalZone ventilated by the current
     ZoneSystem."
  INPUTCLASS : T24N
    NotInput
  INPUTCLASS : S901G ECBC
    Default
  COMMONMINIMUM
    0.8
  COMMONMAXIMUM
    1.0
  DEFAULT : T24N
    1.0
  DEFAULT : S901G ECBC
    1.0
ENDRULE

RULE ThrmlZn:VentAirDistEff
  DESCRIPTION
    "The ventilation air distribution effectiveness (Ez) for the ThermalZone."
  HELP
// TO DO: Add list from ASHRAE 62.1
    ""
  INPUTCLASS : T24N
    NotInput
  INPUTCLASS : S901G ECBC
    Default
  COMMONMINIMUM
    0.8
  COMMONMAXIMUM
    1.0
  DEFAULT : T24N
    1.0
  DEFAULT : S901G ECBC
    if(LocalCompAssigned( VentSysRef ) )
    then VentSysRef:VentAirDistEff
    else 1.0
    endif
  SIZING : T24N
    1.0
  SIZING_PROPOSED : S901G ECBC
    VentAirDistEff
  SIZING_BASELINE : S901G ECBC
    Min( zp:VentAirDistEff, 1.0 )
  ANNUAL
    VentAirDistEff
ENDRULE

RULE NEW Spc:VentAirDistEff
  DATATYPE
    Float
  DESCRIPTION
    "The ventilation air distribution effectiveness (Ez) for the Space's
     ThermalZone."
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ThrmlZnRef ) )
    then ThrmlZnRef:VentAirDistEff
    else 1.0
    endif
ENDRULE


// ********** System Ventilation Efficiency ************************************
RULE AirSys:VentSysEff
  DESCRIPTION
    "The ventilation efficiency of the system (Ev)."
  HELP
    ""
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IfValidAnd( SysVentFlowUncorrected >= 0 ) .AND.
        IfValidAnd( SysVentFlow > 0 ) )
    then SysVentFlowUncorrected / SysVentFlow
    else 1.0
    endif
ENDRULE

RULE ZnSys:VentSysEff
  DESCRIPTION
    "The ventilation efficiency of the system (Ev)."
  HELP
    ""
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IfValidAnd( SysVentFlowUncorrected >= 0 ) .AND.
        IfValidAnd( SysVentFlow > 0 ) )
    then SysVentFlowUncorrected / SysVentFlow
    else 1.0
    endif
ENDRULE

RULE NEW ThrmlZn:VentSysEff
  DATATYPE
    Float
  DESCRIPTION
    "The ventilation efficiency of the system (Ev) that serves the ThermalZone."
  HELP
    "This input is defined at the system."
  INPUTCLASS
    NotInput
  DEFAULT : T24N
    1.0
  DEFAULT : S901G ECBC
    if( LocalCompAssigned( VentSysRef ) )
    then ValidOr( VentSysRef:VentSysEff, 1.0 )
    else 1.0
    endif
  SIZING : T24N
    1.0
  SIZING_PROPOSED : S901G ECBC
    if( LocalCompAssigned( VentSysRef ) )
    then VentSysRef:VentSysEff
    else 1.0
    endif
  SIZING_BASELINE : S901G ECBC
    zp:VentSysEff
  ANNUAL
    VentSysEff
ENDRULE

RULE NEW Spc:VentSysEff
  DATATYPE
    Float
  DESCRIPTION
    "The ventilation efficiency of the system (Ev) that serves the Space's
     ThermalZone."
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ThrmlZnRef ) )
    then ThrmlZnRef:VentSysEff
    else 1.0
    endif
ENDRULE


// ********** Ventilation Specification Method *********************************
RULE ThrmlZn:VentSpecMthd
  DESCRIPTION
    "The method used to calculate the design ventilation flow for the ThermalZone.
     Rates are specified at the Space, and a weighted average is calculated for the
     ThermalZone, based on the selected specification method."
  HELP : T24N_2016
    "For each of the methods, the design ventilation air flow is calculated as follows:


     Maximum = The maximum of all the various input values.


     Sum = The sum of all the various input values.
  

     FlowPerPerson = Only using the Space:VentPerPerson (cfm/person) input value;
     other inputs are ignored. NOTE: A value non-zero FlowPerPerson must be
     defined if 'CO2Sensor' control is used; i.e. DCV control of ventilation
     air flow is intended.


     FlowPerArea = Only using the Space:VentPerArea (cfm/ft2) input value.
     Other inputs are ignored.


     AirChangesPerHour = Only using the Space:VentACH (ACH) input value.
     Other inputs are ignored.


     FlowPerZone = Only using the FlowPerSpace (cfm) input value.
     Other inputs are ignored."
  HELP
    "For each of the methods, the design ventilation air flow is calculated as follows:


     Maximum = The maximum of all the various input values.


     Sum = The sum of all the various input values."
  INPUTCLASS
    Default
  OPTION : T24N_2016
    NoVentilation
    Maximum
    Sum
    FlowPerPerson
    FlowPerArea
    AirChangesPerHour
    FlowPerZone
  OPTION
    NoVentilation
    Maximum
    Sum
  DEFAULT : T24N
    if( VentSrc != "None" )
    then
      if( IfValidAnd( IsHighRiseRes > 0 ) )
      then "Sum"
      else "Maximum"
      endif
    else "NoVentilation"
    endif
  DEFAULT : S901G ECBC
    if( VentSrc != "None" )
    then
      switch( VentStd )
        case "T24N-2013" : "Maximum"
        case "62.1-2010" : "Sum"
        case "IMC-2012"  : "Sum"
        case "Other"     : "Sum"
        default          : "Maximum"
      endswitch
    else "NoVentilation"
    endif
  CHECKCODE : S901G ECBC
    if( VentIsRequired .AND. VentSrc != "None" .AND. VentStd != "Other" )
    then
      if( VentStd = "T24-2013" .AND. VentSpecMthd != "Maximum" )
      then
        PostWarning("The Ventilation Specification Method for ThermalZone '%s' 
                     and its Spaces) will be reset to 'Maximum' to follow the
                     Ventilation Standard, 'T24-2013', specified for the zone.",
                     Name)
      else if( VentSpecMthd != "Sum" )
      then
        PostWarning("The Ventilation Specification Method for ThermalZone '%s' 
                     and its Spaces) will be reset to 'Sum' to follow the
                     Ventilation Standard, '%s', specified for the zone.",
                     Name, VentStd)
      else UNCHANGED
      endif endif
    else UNCHANGED
    endif
  SIZING : T24N
    if( BaseSysNum > 0 )
    then // Follow baseline rules
      if( VentIsRequired > 0 )
      then 
        if( IfValidAnd( IsHighRiseRes > 0 ) )
        then "Sum"
        else "Maximum"
        endif
      else if( VentStd = "Other")
      then VentSpecMthd
      else "NoVentilation"
      endif endif
;   else if( IsRes > 0 )
;   then "NoVentilation" // Always set to "NoVentilation" for res spaces.
    else VentSpecMthd // User input
    endif ; endif
  SIZING : S901G ECBC
    if( BaseSysNum > 0 )
    then // Follow baseline rules
      if( VentIsRequired > 0 )
      then "Sum"
      else if( VentStd = "Other")
      then VentSpecMthd
      else "NoVentilation"
      endif endif
    else if( VentStd = "Other" .OR. VentIsRequired = 0 )
    then VentSpecMthd // User input
    else if( VentStd = "T24-2013" )
    then "Maximum"
    else "Sum"
    endif endif endif
  ANNUAL
    VentSpecMthd
ENDRULE

RULE ThrmlZn:VentSpecMthdSim
  DESCRIPTION
    "The method used to specify the design ventilation flow for the ThermalZone, 
     for simulation."  
  INPUTCLASS
    NotInput
  OPTION
    NoVentilation
    Maximum
    Sum
  DEFAULT : T24N
    if( VentSrc != "Forced" .OR. ( VentSrc = "Forced" .AND. PropVentSysIsExh > 0 ) )
    then "NoVentilation" // NoVentilation or vent is modeled as infiltration
    else
    if( VentStd = "Other" )
    then VentSpecMthd // Set equal to user input
    else "Maximum"
    endif endif
  DEFAULT : S901G ECBC
    if( VentSrc != "Forced" .OR. ( VentSrc = "Forced" .AND. PropVentSysIsExh > 0 ) )
    then "NoVentilation" 
    else
    if( VentStd = "Other" )
    then VentSpecMthd // Set equal to user input
    else
    if( VentStd = "T24-2013" .OR. 
        VentStd = "T24-2016" .OR. 
        VentStd = "T24-2019" .OR.
        VentStd = "T24-2022" )
    then "Maximum"
    else "Sum"
    endif endif endif
  SIZING : T24N
    if( ( ValidOr( VentPerAreaFlowSim, 0 ) + ValidOr( VentPerPersonFlowSim, 0 ) ) = 0 ) 
    then "NoVentilation"
    else
    if( BaseSysNum > 0 )
    then
      if( VentSrc != "Forced" .OR. 
          ( VentSrc = "Forced" .AND. BaseVentSysIsExh > 0 ) )
      then "NoVentilation" // NoVentilation or vent is modeled as infiltration
      else
      if( VentStd = "Other" )
      then VentSpecMthd // Set equal to user input
      else "Maximum"
      endif endif
    else
    if( VentSrc != "Forced" .OR. ( VentSrc = "Forced" .AND. PropVentSysIsExh > 0 ) )
    then "NoVentilation" // NoVentilation or vent is modeled as infiltration
    else
    if( VentStd = "Other" )
    then VentSpecMthd // Set equal to user input
    else "Maximum"
    endif endif endif endif
  DEFAULT : S901G ECBC
    if( VentSrc != "Forced" .OR. ( VentSrc = "Forced" .AND. PropVentSysIsExh > 0 ) )
    then "NoVentilation" 
    else
    if( VentStd = "Other" )
    then VentSpecMthd // Set equal to user input
    else
    if( VentStd = "T24-2013" .OR. 
        VentStd = "T24-2016" .OR. 
        VentStd = "T24-2019" .OR.
        VentStd = "T24-2022" )
    then "Maximum"
    else "Sum"
    endif endif endif
  ANNUAL
    VentSpecMthdSim
ENDRULE

RULE NEW Spc:VentSpecMthd
  DATATYPE
    Enumeration
  LONGFORM
    VentilationSpecificationMethod
  DESCRIPTION
    "The method used to calculate the design ventilation flow the space."
  HELP : T24N_2016
    "This property is specified at the ThermalZone; it is shown here only for
     reference. To change the specification method, click on the '...' button to
     navigate to the ThermalZone.


     For each of the methods, the design ventilation air flow is calculated as follows:


     Maximum = The maximum of all the various input values.


     Sum = The sum of all the various input values.
  

     FlowPerPerson = Only using the Space:VentPerPerson (cfm/person) input value;
     other inputs are ignored. NOTE: A value non-zero FlowPerPerson must be
     defined if 'CO2Sensor' control is used; i.e. DCV control of ventilation
     air flow is intended.


     FlowPerArea = Only using the Space:VentPerArea (cfm/ft2) input value.
     Other inputs are ignored.


     AirChangesPerHour = Only using the Space:VentACH (ACH) input value.
     Other inputs are ignored.


     FlowPerZone = Only using the FlowPerSpace (cfm) input value.
     Other inputs are ignored."
  HELP
    "This property is specified at the ThermalZone; it is shown here only for
     reference. To change the specification method, click on the '...' button to
     navigate to the ThermalZone.


     For each of the methods, the design ventilation air flow is calculated as follows:


     Maximum = The maximum of all the various input values.


     Sum = The sum of all the various input values."
  INPUTCLASS
    NotInput
  OPTION
    NoVentilation
    Maximum
    Sum
    FlowPerPerson
    FlowPerArea
    AirChangesPerHour
    FlowPerZone 
  DEFAULT : T24N
    if( LocalCompAssigned( ThrmlZnRef ) )
    then ThrmlZnRef:VentSpecMthd
    else "NoVentilation"
    endif
  DEFAULT : S901G ECBC
    if( LocalCompAssigned( ThrmlZnRef ) )
    then ThrmlZnRef:VentSpecMthdSim
    else "NoVentilation"
    endif
  SIZING : T24N
    ThrmlZnRef:VentSpecMthd
  SIZING : S901G ECBC
    ThrmlZnRef:VentSpecMthdSim
  ANNUAL
    VentSpecMthd
ENDRULE


// ********** Ventilation Control Method ***************************************
RULE ThrmlZn:VentCtrlMthd
  DESCRIPTION
    "The method used to control ventilation air flow." 
  HELP
    "Ventilation air flow is typically 'Fixed' at the design rate.  For
     intermittent or high-occupancy spaces, 'CO2Sensor' (i.e DCV) control can
     be used to reduce ventilation based on the actual occupancy. CO2Sensor control
     can only be used for AirSystems that have an economizer, and for multizone
     systems, 'DDCToZone' controls."
  REFERENCE 
    NACM Section 5.6.5.4
  INPUTCLASS 
    Default
  OPTION
    Fixed
    CO2Sensors
;    OccupantSensors
  DEFAULT
    if( VentSrc = "Forced" )
    then
      if( Proj:AutoEffInput = 1 .AND. IfValidAnd( DCVIsRequired > 0 ) )
      then "CO2Sensors"
      else "Fixed"
      endif
    else UNDEFINED
    endif
  CHECKCODE : T24N
    if( HasUnknownHVAC > 0 )
    then UNCHANGED // No check for partial envelope
    else
    if( HasDCV > 0 .AND. DCVIsNotAllowed = 1 )
    then 
      PostError("ThermalZone '%s' is ventilated by a ZoneSystem. 'CO2Sensor'
                 ventilation control (DCV) is not allowed for this 
                 configuration.", Name)
    else
    if( HasDCV > 0 .AND. DCVIsNotAllowed = 2 )
    then 
      PostError("ThermalZone '%s' is a Laboratory, ParkingGarage, or CommercialKithen
                 process space. 'CO2Sensor' ventilation control (DCV) is not supported
                 for these applications.", Name)
    else 
    if( LocalCompAssigned( VentSysRef ) = ComponentType( "AirSys" ) )
    then // VentSys is AirSys
      if( HasDCV > 0 .AND.
          VentSysRef:IsMultiZnSys = 0 .AND. 
          VentSysRef:HasAirEcono = 0 )
      then 
        PostWarning("ThermalZone '%s' is ventilated by a single-zone AirSystem
                   with no economizer to modulate OA flow. 'CO2Sensor' 
                   ventilation control (DCV) may not be appropriate. Check
                   inputs for consistency with the actual design.", Name)
      else
      if( HasDCV > 0 .AND.
          VentSysRef:IsMultiZnSys = 1 .AND. 
          ( VentSysRef:Type != "DOASCV" .OR. VentSysRef:Type != "DOASVAV" ) .AND.
          ( VentSysRef:HasAirEcono = 0 .OR. HasDDCCtrl = 0 ) )
      then 
        PostWarning("ThermalZone '%s' is ventilated by a multizone AirSystem
                   with no economizer or no 'DDCToZone' controls. 'CO2Sensor' 
                   ventilation control (DCV) may not be appropriate. Check
                   inputs for consistency with the actual design.", Name)
      else
      if( HasDCV > 0 .AND. 
          VentSysRef:IsMultiZnSys = 1 .AND. 
          VentSysRef:Type = "DOASVAV" .AND. 
          HasDDCCtrl = 0 )
      then 
        PostWarning("ThermalZone '%s' is ventilated by a DOASVAV AirSystem
                   with no 'DDCToZone' controls. 'CO2Sensor' 
                   ventilation control (DCV) may not be appropriate. Check
                   inputs for consistency with the actual design.", Name)
// The following check is covered by ThrmlZn:DCVIsRequired
;     else
;     if( VentIsRequired .AND. VentSrc = "Forced" .AND. 
;         IfValidAnd ( MinOccDens > Proj:OccDensForReqDCV ) .AND.
;         IfValidAnd ( VentCtrlMthd = "Fixed" ) .AND.
;         ( ( VentSysRef:IsMultiZnSys = 0 .AND. VentSysRef:HasAirEcono = 1 )
;           .OR.
;         ( ( VentSysRef:IsMultiZnSys = 1 .AND. VentSysRef:HasAirEcono = 1 
;           .AND. VentSysRef:CtrlSysType = "DDCToZone" ) ) ) )
;     then
;       PostError("The minimum design occupancy of ThermalZone '%s' is greater than %g
;                  people/1000ft2, the ventilation system '%s' has an economizer,
;                  and if is a multizone system, 'DDCToZone' control. Therefore,
;                  'CO2Sensor' ventilation control (DCV) is likely mandatory
;                  for this zone.", Name, Proj:OccDensForReqDCV, VentSysRef:Name )
      else UNCHANGED
      endif endif endif;endif
    else UNCHANGED
    endif endif endif endif
  SIZING
    if( VentSrc != "Forced" ) 
    then UNDEFINED
    else if( BaseSysNum > 0 .AND. VentIsRequired .AND. VentSrc = "Forced" )
    then "Fixed"
// The following conditions would override the user specification based on other model attributes
// They are not currently implemented.
;   else if( LocalCompAssigned( VentSysRef ) = ComponentType( "AirSys" ) )
;   then
;     if( VentSysRef:IsMultiZnSys = 0 .AND. VentSysRef:HasAirEcono = 0 )
;     then // AirSystem is single-zone and has no economizer
;       "Fixed"
;     else if( VentSysRef:IsMultiZnSys = 1 .AND.
;              ( VentSysRef:CtrlSysType != "DDCToZone" .OR. VentSysRef:HasAirEcono = 0 ) )
;     then // AirSystem is multi-zone and has no economizer or no DDC to zone
;       "Fixed"
;     else VentCtrlMthd
;     endif endif
    else VentCtrlMthd
    endif endif
// See ThermalZone-Ventilation.rule for ANNUAL rules
ENDRULE

RULE NEW Spc:VentCtrlMthd
  DATATYPE
    Enumeration
  LONGFORM
    VentilationControlMethod
  DESCRIPTION
    "The method used to control ventilation air flow."
  HELP
    "This property is specified at the ThermalZone; it is shown here only for
     reference. To change the specification method, click on the '...' button to
     navigate to the ThermalZone.


     Ventilation air flow is typically 'Fixed' at the design rate. For
     intermittent or high-occupancy spaces, 'CO2Sensor' (i.e DCV) control can
     be used to reduce ventilation based on the actual occupancy. CO2Sensor control
     can only be used for AirSystems that have an economizer, and for multizone
     systems, 'DDCToZone' controls."
  INPUTCLASS
    NotInput
  OPTION
    Fixed
    CO2Sensors
;    OccupantSensors   
  DEFAULT
    if( LocalCompAssigned( ThrmlZnRef ) )
    then ThrmlZnRef:VentCtrlMthd
    else UNDEFINED
    endif
  SIZING
    ThrmlZnRef:VentCtrlMthd
ENDRULE

RULE ThrmlZn:HasDCV
  INPUTCLASS
    NotInput
  DEFAULT
    if( VentSrc = "Forced" .AND. IfValidAnd( VentCtrlMthd = "CO2Sensors" ) )
    then 1
    else 0
    endif
ENDRULE

RULE ThrmlZn:HasOccSensorCtrl
  INPUTCLASS
    NotInput
  DEFAULT
    if ( SumRevRef( Spc:ThrmlZnRef, Spc:OccSensorCtrlCnt ) > 0 )
    then 1
    else 0
    endif
ENDRULE

RULE NEW Spc:HasDCV
  DATATYPE
    Integer
  LONGFORM
    HasDemandControlVentilation
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ThrmlZnRef ) )
    then ValidOr( ThrmlZnRef:HasDCV, 0 )
    else 0
    endif 
ENDRULE


// ********** Code Minimum Ventilation Components ******************************
// ------------------- Per Area basis ------------------------------------------
// Minimum per area flow based on new 2019 T24 rules
RULE NEW Spc:CodeVentPerAreaForDCV
  DATATYPE
    Float
  LONGFORM
    CodeVentilationPerAreaFlowForDemandControlledVentilation
  DESCRIPTION
     "The code required minimum outside air flow rate, in cfm/ft2, when DCV is used."  
  INPUTCLASS
    NotInput
  UNITS
    cfm
  DEFAULT : T24N_2016
    UNDEFINED  
  DEFAULT : T24N
    if( VentIsRequired = 0 .OR. IsCond = 0 )
    then 0
    else
    if( LabArea > 0 )
    then // For labs, standard = proposed with min set by code table
      Max( ValidOr( VentPerArea, 0 ), 0 )
    else
      VentilationSpaceFunctionData:CodeVentPerAreaForDCV("VentFuncType", VentSpcFunc) 
    endif endif
ENDRULE
RULE NEW Spc:CodeVentPerArea
  DATATYPE
    Float
  LONGFORM
    CodeVentilationPerArea
  DESCRIPTION
     "The code mininum amount of ventilation (outside air) per floor area."
  HELP
     "This is one component of the code minimum ventilation air calculation. 
      Component rates are used, along with the VentilationSpecificationMethod, 
      to determine the total code minimum ventilation air flow." 
  REFERENCE
    NACM Section 5.6.5.4
; RESETS 
;   ResetThisWhenTheFollowingIsModified
;     Spc:VentPerArea
  INPUTCLASS
    NotInput
  UNITS
    cfm/ft2
  DEFAULT : T24N_2016
    if( VentIsRequired = 0 )
    then 0
    else
    if( LabArea > 0 )
    then // For labs, standard = proposed with min set by code table
      Max( ValidOr( VentPerArea, 0 ), SpaceFunctionData:CodeVentPerArea("FuncType", SpcFunc) ) 
    else
    if( IsHotelMotelGuestRm > 0 .AND. HotelMotelGuestRmAveArea >= 500 )
    then // Avg room size is >= 500 SF, use floor area
      0.15 
    else
    if( IsHotelMotelGuestRm > 0 .AND. HotelMotelGuestRmAveArea < 500 )
    then // Avg room size is < 500 SF, use 30cfm per room (see below)
      0
    else // Look up minimum cfm/ft2
      SpaceFunctionData:CodeVentPerArea("FuncType", SpcFunc)
    endif endif endif endif
  DEFAULT : T24N_2019
    if( VentIsRequired = 0 .OR. IsCond = 0 )
    then 0
    else
    if( LabArea > 0 )
    then // For labs, standard = proposed with min set by code table
      Max( ValidOr( VentPerArea, 0 ), VentilationSpaceFunctionData:CodeVentPerArea("VentFuncType", VentSpcFunc) ) 
    else
    if( IsHotelMotelGuestRm > 0 )
    then 0.15 
    else
    if( HighRiseResCondFlrArea > 0 )
    then 0.03
    else
    if( HasDCV > 0 )
    then // Use DCV minimum cfm/ft2
      CodeVentPerAreaForDCV
    else // Look-up CodeVentPerArea
      VentilationSpaceFunctionData:CodeVentPerArea("VentFuncType", VentSpcFunc)
    endif endif endif endif endif
  DEFAULT : T24N
    if( VentIsRequired = 0 .OR. IsCond = 0 )
    then 0
    else
    if( LabArea > 0 )
    then // For labs, standard = proposed with min set by code table
      Max( ValidOr( VentPerArea, 0 ), VentilationSpaceFunctionData:CodeVentPerArea("VentFuncType", VentSpcFunc) ) 
    else
    if( IsHotelMotelGuestRm > 0 )
    then 0.15 
    else
    if( HighRiseResCondFlrArea > 0 )
    then 0.03
    else
    if( IfValidAnd( DsgnOcc > 0 ) )
    then // Use DCV minimum cfm/ft2 per Exception 1 to Std Section 120.1(c)3
      CodeVentPerAreaForDCV
    else // Look-up CodeVentPerArea
      VentilationSpaceFunctionData:CodeVentPerArea("VentFuncType", VentSpcFunc)
    endif endif endif endif endif
  DEFAULT : S901G ECBC
    if( VentIsRequired = 0 )
    then 0
    else 
    switch( VentStd )
      case "T24N-2013" : SpaceFunctionData:T24N2013_CodeVentPerArea("FuncType", SpcFunc)
      case "T24N-2016" : SpaceFunctionData:T24N2013_CodeVentPerArea("FuncType", SpcFunc)
      case "IMC-2012"  : SpaceFunctionData:IMC2012_CodeVentPerArea("FuncType", SpcFunc)
      default: SpaceFunctionData:S6212010_CodeVentPerArea("FuncType", SpcFunc)
    endswitch      
    endif
ENDRULE

RULE NEW Spc:CodeOtherVentPerAreaForDCV
  DATATYPE
    Float
  LONGFORM
    CodeOtherVentilationPerAreaFlowForDemandControlledVentilation
  DESCRIPTION
     "The code required minimum outside air flow rate, in cfm/ft2, when DCV is used
      for 'Other' ventilation standard."
  INPUTCLASS
    NotInput
  UNITS
    cfm
  DEFAULT : T24N_2016
    UNDEFINED
  DEFAULT : T24N
    CodeVentPerAreaForDCV
ENDRULE
RULE Spc:CodeOtherVentPerArea
  DESCRIPTION
     "The code mininum amount of ventilation (outside air) per floor area for 'Other'
      ventilation standard." 
  HELP
     "This is one component of the code minimum ventilation air calculation. 
      Component rates are used, along with the VentilationSpecificationMethod, 
      to determine the total code minimum ventilation air flow."
  INPUTCLASS : T24N
    NotInput  IgnoreUserInput  "Spc:CodeOtherVentPerArea removed prior to release of 2016.3.0"
  INPUTCLASS : S901G
    Default
; RESETS 
;   ResetThisWhenTheFollowingIsModified
;     Spc:VentPerArea    
  UNITS
    cfm/ft2
  DEFAULT : T24N
    // CodeOther = proposed
    ValidOr( VentPerArea, 0 )
  DEFAULT : S901G ECBC
    if( VentIsRequired = 0 )
    then 0
    else 
    switch( Proj:VentStd )
      case "T24N-2013" : SpaceFunctionData:T24N2013_CodeVentPerArea("FuncType", SpcFunc)
      case "T24N-2016" : SpaceFunctionData:T24N2013_CodeVentPerArea("FuncType", SpcFunc)
      case "IMC-2012"  : SpaceFunctionData:IMC2012_CodeVentPerArea("FuncType", SpcFunc)
      default: SpaceFunctionData:S6212010_CodeVentPerArea("FuncType", SpcFunc)
    endswitch      
    endif
ENDRULE

RULE NEW Spc:CodeVentPerAreaForDCVFlow
  DATATYPE
    Float
  LONGFORM
    CodeMinimumVentilationPerAreaForDemandControlledVentilationFlow
  DESCRIPTION
     "The code required outside air flow rate, in cfm, associated with the VentPerArea input
      when DCV is used."  
  INPUTCLASS
    NotInput
  UNITS
    cfm
  DEFAULT : T24N_2016
    UNDEFINED
  DEFAULT : T24N
   if( VentStd = "Other" )
   then CodeOtherVentPerAreaForDCV * FlrArea
   else CodeVentPerAreaForDCV * FlrArea
   endif
  SIZING : T24N_2016
    UNDEFINED
  SIZING : T24N
   if( VentStd = "Other" )
   then CodeOtherVentPerAreaForDCV * FlrArea
   else CodeVentPerAreaForDCV * FlrArea
   endif
  ANNUAL
    CodeVentPerAreaForDCVFlow
ENDRULE
RULE NEW Spc:CodeVentPerAreaFlow
  DATATYPE
    Float
  LONGFORM
    CodeVentilationPerAreaFlow
  DESCRIPTION
     "The code required outside air flow rate, in cfm, associated with the VentPerArea input."  
  INPUTCLASS
    NotInput
  UNITS
    cfm  
  DEFAULT : T24N_2016
   if( VentStd = "Other" )
   then CodeOtherVentPerArea * FlrArea
   else CodeVentPerArea * FlrArea
   endif
  DEFAULT : T24N
  if( VentStd = "Other" )
   then 
     if( IfValidAnd( DwellingUnitSpcTotArea > 0 ) )
     then CodeOtherVentPerArea * DwellingUnitSpcTotArea
     else CodeOtherVentPerArea * FlrArea
     endif
   else
   if( IfValidAnd( DwellingUnitSpcTotArea > 0 ) )
   then CodeVentPerArea * DwellingUnitSpcTotArea
   else CodeVentPerArea * FlrArea
   endif  endif
  SIZING : T24N_2016
   if( VentStd = "Other" )
   then CodeOtherVentPerArea * FlrArea
   else CodeVentPerArea * FlrArea
   endif
  SIZING : T24N
   if( VentStd = "Other" )
   then 
     if( IfValidAnd( DwellingUnitSpcTotArea > 0 ) )
     then CodeOtherVentPerArea * DwellingUnitSpcTotArea
     else CodeOtherVentPerArea * FlrArea
     endif
   else
   if( IfValidAnd( DwellingUnitSpcTotArea > 0 ) )
   then CodeVentPerArea * DwellingUnitSpcTotArea
   else CodeVentPerArea * FlrArea
   endif endif 
  ANNUAL
    CodeVentPerAreaFlow
ENDRULE

// ------------------- Per Person basis ----------------------------------------
RULE NEW Spc:CodeVentPerPerson
  DATATYPE
    Float
  LONGFORM
    CodeVentilationPerPerson
  DESCRIPTION
     "The code mininum amount of ventilation (outside air) per person."
  HELP
     "This is one component of the code minimum ventilation air calculation. 
      Component rates are used, along with the VentilationSpecificationMethod, 
      to determine the total code minimum ventilation air flow."
  REFERENCE
    NACM Section 5.6.5.4
  INPUTCLASS
    NotInput
; RESETS 
;   ResetThisWhenTheFollowingIsModified
;     Spc:VentPerPerson 
  UNITS
    cfm/person
  DEFAULT : T24N_2016
    if( VentIsRequired = 0 )
    then 0
    else
    if( LabArea > 0 )
    then
      if( LocalCompAssigned( SpcFuncDefaultsRef ) .AND. 
          LocalStatus( SpcFunc ) < 5 .AND.
          LocalStatus( VentPerPerson ) < 5 )
      then SpcFuncDefaultsRef:VentPerPerson
      else ValidOr( VentPerPerson, 0 )
      endif
    else
    if( HotelMotelGuestRmCondFlrArea > 0 .OR. 
        PrkgGarArea > 0 )
    then 0
    else
    if( HighRiseResCondFlrArea > 0 )
    then 5
    else 15 // Default is 15 cfm/person
    endif endif endif endif
  DEFAULT : T24N_2019
    if( VentIsRequired = 0 .OR. IsCond = 0 )
    then 0
    else
    if( LabArea > 0 )
    then ValidOr( VentPerPerson, 0 ) // Lab is always baseline = proposed
    else
    if( HotelMotelGuestRmCondFlrArea > 0 .OR. 
        PrkgGarArea > 0 )
    then 0
    else
    if( HighRiseResCondFlrArea > 0 )
    then 7.5 // 7.5cfm x MinOccNum, where MinOccNum = 1 + Nbr for each DwellingUnitType
    else
// Ticket 3061: Fix issue with vent not increasing if no DCV and occupancy is higher than default assumption
    if( HasDCV > 0 .OR. 
        IfValidAnd( DsgnOcc > 0 ) ) // 
    then // Populate CodeVentPerPerson if has DCV or user increases space occupancy.
      if( VentOccDensSim > 0 )
      then // Calculate ratio of VentOccDensSim for the selected VentSpcFunc to the
           // OccDensSim for the SpcFunc. This is the per person value that would be used for DCV,
           // of if using fixed seating or user enters a OccNumSim greater than minimum.
        ( VentOccDensSim / MinOccDensSim ) * 15
      else
        VentilationSpaceFunctionData:CodeVentPerPerson("VentFuncType", VentSpcFunc)
      endif
    else VentilationSpaceFunctionData:CodeVentPerPerson("VentFuncType", VentSpcFunc)
    endif endif endif endif endif
  DEFAULT : T24N
    if( VentIsRequired = 0 .OR. IsCond = 0 )
    then 0
    else
    if( LabArea > 0 )
    then ValidOr( VentPerPerson, 0 ) // Lab is always baseline = proposed
    else
    if( HotelMotelGuestRmCondFlrArea > 0 .OR. 
        PrkgGarArea > 0 )
    then 0
    else
    if( HighRiseResCondFlrArea > 0 )
    then 7.5 // 7.5cfm x MinOccNum, where MinOccNum = 1 + Nbr for each DwellingUnitType
    else
    if( IfValidAnd( DsgnOcc > 0 ) )
    then 15
    else
    if( HasDCV > 0 .AND. IfValidAnd( OccNumSim > 0 ) )
    then CodeVentPerAreaFlow / OccNumSim
    else 0
    endif endif endif endif endif endif
  DEFAULT : S901G ECBC
    if( VentIsRequired = 0 )
    then 0
    else 
    switch( VentStd )
      case "T24N-2013" : 
        if( HighRiseResCondFlrArea > 0 )
        then 5
        else
        if( HotelMotelGuestRmCondFlrArea > 0 .OR. 
            LabArea > 0 .OR. 
            PrkgGarArea > 0 )
        then 0
        else 15
        endif endif
      case "IMC-2012":   SpaceFunctionData:IMC2012_CodeVentPerPerson("FuncType", SpcFunc)
      default: SpaceFunctionData:S6212010_CodeVentPerPerson("FuncType", SpcFunc)
    endswitch      
    endif
  SIZING : T24N_2016
    UNCHANGED
  SIZING : T24N_2019
    // Update value if DCV is added to model during sizing
    if( HasDCV > 0 )
    then 
      if( VentOccDensSim > 0 )
      then // Calculate ratio of VentOccDensSim for the selected VentSpcFunc to the
           // OccDensSim for the SpcFunc. This is the per person value that would be used for DCV.
           // Cap value at 15 cfm/person.
        Min( ( VentOccDensSim / OccDensSim ) * 15 , 15 )
      else
        VentilationSpaceFunctionData:CodeVentPerPerson("VentFuncType", VentSpcFunc)
      endif
    else CodeVentPerPerson
    endif
  SIZING : T24N
    CodeVentPerPerson
ENDRULE

RULE Spc:CodeOtherVentPerPerson
  DESCRIPTION
     "The code mininum amount of ventilation (outside air) per person for 'Other'
      ventilation standard."
  HELP
     "This is one component of the code minimum ventilation air calculation. 
      Component rates are used, along with the VentilationSpecificationMethod, 
      to determine the total code minimum ventilation air flow."
  INPUTCLASS : T24N
    NotInput  IgnoreUserInput  "Spc:CodeOtherVentPerPerson removed prior to release of 2016.3.0"
  INPUTCLASS : S901G
    Default
; RESETS 
;   ResetThisWhenTheFollowingIsModified
;     Spc:VentPerPerson     
  UNITS
    cfm/person
  DEFAULT : T24N
    // CodeOther = proposed
    ValidOr( VentPerPerson, 0 )
  DEFAULT : S901G ECBC
    if( VentIsRequired = 0 .OR. VentSpecMthd = "NoVentilation" .OR. IsCond = 0 )
    then 0
    else 
    switch( Proj:VentStd )
      case "T24N-2013" :
        if( HighRiseResCondFlrArea > 0 )
        then 5
        else
        if( HotelMotelGuestRmCondFlrArea > 0 .OR. 
            LabArea > 0 .OR. 
            PrkgGarArea > 0 )
        then 0
        else 15
        endif endif
      case "IMC-2012":   SpaceFunctionData:IMC2012_CodeVentPerPerson("FuncType", SpcFunc)
      default: SpaceFunctionData:S6212010_CodeVentPerPerson("FuncType", SpcFunc)
    endswitch      
    endif
ENDRULE

RULE NEW Spc:CodeVentPerPersonFlow
  DATATYPE
    Float
  LONGFORM
    CodeVentilationPerPersonFlow
  DESCRIPTION
     "The code required outside air flow rate, in cfm, associated with the VentPerPerson input."  
  INPUTCLASS
    NotInput
  UNITS
    cfm
  DEFAULT : S901G ECBC T24N_2016 T24N_2019
   if( VentStd = "Other" )
   then CodeOtherVentPerPerson * Max( OccNumSim, MinOccNumSim )
   else CodeVentPerPerson * Max( OccNumSim, MinOccNumSim )
   endif
  DEFAULT
   if( VentStd = "Other" )
   then CodeOtherVentPerPerson * OccNumSim
   else CodeVentPerPerson * OccNumSim
   endif
  SIZING : S901G ECBC T24N_2016 T24N_2019
   if( VentStd = "Other" )
   then CodeOtherVentPerPerson * Max( OccNumSim, MinOccNumSim )
   else CodeVentPerPerson * Max( OccNumSim, MinOccNumSim )
   endif
  SIZING
   if( VentStd = "Other" )
   then CodeOtherVentPerPerson * OccNumSim
   else CodeVentPerPerson * OccNumSim
   endif
  ANNUAL
    CodeVentPerPersonFlow
ENDRULE

// ------------------- ACH basis ----------------------------------------
RULE NEW Spc:CodeVentACH
  DATATYPE
    Float
  LONGFORM
    CodeVentilationAirChangesPerHour
  DESCRIPTION
     "The code mininum amount of ventilation (outside air), in air changes/hour."
  HELP
     "This is one component of the code minimum ventilation air calculation. 
      Component rates are used, along with the VentilationSpecificationMethod, 
      to determine the total code minimum ventilation air flow.

      For T24 analysis, there is no code-minimum outdoor air ACH. The inputs of
      HoodDominated and LoadDominated are for defaulting purposes only."
  REFERENCE
    NACM Section 5.6.5.4
  INPUTCLASS
    NotInput
; RESETS 
;   ResetThisWhenTheFollowingIsModified
;     Spc:VentACH 
  UNITS
    ACH
  DEFAULT : T24N_2016
  // For labs, baseline = proposed. See issue 2139.
   if( LabArea > 0 )
   then
     if( LocalCompAssigned( SpcFuncDefaultsRef ) .AND. 
         LocalStatus( SpcFunc ) < 5 .AND.
         LocalStatus( VentACH ) < 5 )
     then SpcFuncDefaultsRef:VentACH 
     else if( IfValidAnd( LabExhRtType = "HoodDominated" ) )
     then ValidOr( VentACH, 10) // HoodDominated
     else ValidOr( VentACH, 6 ) // LoadDominated
     endif endif
   else 0
   endif
  DEFAULT : T24N
  // For labs, baseline = proposed. See issue 2139.
   if( LabArea > 0 )
   then
     if( LocalCompAssigned( SpcFuncDefaultsRef ) .AND. 
         LocalStatus( SpcFunc ) < 5 .AND.
         LocalStatus( VentACH ) < 5 )
     then SpcFuncDefaultsRef:VentACH 
     else ValidOr( ExhACH, 0 )
     endif
   else 0
   endif
  DEFAULT : S901G ECBC
    0
ENDRULE

RULE Spc:CodeOtherVentACH
  DESCRIPTION
     "The code mininum amount of ventilation (outside air), in air changes/hour
      for 'Other' ventilation standard."
  HELP
     "This is one component of the code minimum ventilation air calculation. 
      Component rates are used, along with the VentilationSpecificationMethod, 
      to determine the total code minimum ventilation air flow."
  INPUTCLASS : T24N
    NotInput  IgnoreUserInput  "Spc:CodeOtherVentACH removed prior to release of 2016.3.0"
  INPUTCLASS : S901G
    Default
; RESETS 
;   ResetThisWhenTheFollowingIsModified
;     Spc:VentACH     
  UNITS
    ACH
  DEFAULT : T24N
    // CodeOther = proposed
    ValidOr( VentACH, 0 )
  DEFAULT : S901G ECBC
    0
ENDRULE

RULE NEW Spc:CodeVentACHFlow
  DATATYPE
    Float
  LONGFORM
    CodeVentilationAirChangesPerHourFlow
  DESCRIPTION
     "The code required outside air flow rate, in cfm, associated with the CodeVentACH input."  
  INPUTCLASS
    NotInput
  UNITS
    cfm
  DEFAULT
   if( VentStd = "Other" )
   then CodeOtherVentACH * ValidOr( Vol, 0 ) / 60
   else CodeVentACH * ValidOr( Vol, 0 ) / 60
   endif
  SIZING
   if( VentStd = "Other" )
   then CodeOtherVentACH * Vol / 60
   else CodeVentACH * Vol / 60
   endif
  ANNUAL
    CodeVentACHFlow
ENDRULE

// Flow basis, used for setting the baseline ventilation rate to equal the proposed
// for commercial kitchen spaces
RULE NEW Spc:CodeVentPerSpc
  DATATYPE
    Float
  LONGFORM
    CodeVentilationPerSpace
  INPUTCLASS
    NotInput
; RESETS 
;   ResetThisWhenTheFollowingIsModified
;     Spc:VentPerSpc
  UNITS
    cfm
  DEFAULT : T24N_2016
    if( IfValidAnd( HotelMotelGuestRmCnt > 0 ) .AND.
        IfValidAnd( HotelMotelGuestRmAveArea < 500 ) )
    then // Avg room size is < 500 SF, use 30cfm per room (see below)
      30 * HotelMotelGuestRmCnt 
    else   
    if( LabArea > 0 )
    then
      if( LocalCompAssigned( SpcFuncDefaultsRef ) .AND. 
          LocalStatus( SpcFunc ) < 5 .AND.
          LocalStatus( VentPerSpc) < 5 )
      then SpcFuncDefaultsRef:VentPerSpc
      else ValidOr( VentPerSpc, 0 )
      endif
    else 0
    endif endif
  DEFAULT : T24N
    if( LabArea > 0 )
    then
      if( LocalCompAssigned( SpcFuncDefaultsRef ) .AND. 
          LocalStatus( SpcFunc ) < 5 .AND.
          LocalStatus( VentPerSpc) < 5 )
      then SpcFuncDefaultsRef:VentPerSpc
      else ValidOr( VentPerSpc, 0 )
      endif
    else 0
    endif
  DEFAULT : S901G ECBC
    0
ENDRULE

RULE Spc:CodeOtherVentPerSpc
  INPUTCLASS : T24N
    NotInput
  INPUTCLASS : S901G
    Default
  UNITS
    cfm
  DEFAULT : T24N
    // CodeOther = proposed
    ValidOr( VentPerSpc, 0 )
  DEFAULT : S901G ECBC
    0
ENDRULE

RULE NEW Spc:CodeVentPerSpcFlow
  DATATYPE
    Float
  LONGFORM
    CodeVentilationPerSpaceFlow
  DESCRIPTION
     "The code required outside air flow rate, in cfm, associated with the CodeVentPerSpc input."  
  INPUTCLASS
    NotInput
; RESETS 
;   ResetThisWhenTheFollowingIsModified
;     Spc:VentPerSpc    
  UNITS
    cfm
  DEFAULT
   if( VentStd = "Other" )
   then CodeOtherVentPerSpc
   else CodeVentPerSpc
   endif
  SIZING
   if( VentStd = "Other" )
   then CodeOtherVentPerSpc
   else CodeVentPerSpc
   endif
  ANNUAL
    CodeVentPerSpc
ENDRULE


// ********** Proposed Ventilation Components **********************************
// Per Area basis
RULE Spc:VentPerArea
  DESCRIPTION
     "The proposed (user-defined) amount of outside air per floor area." 
  HELP
     "This is one component of the proposed design ventilation air calculation. 
      Component rates are used, along with the VentilationSpecificationMethod, 
      to determine the total proposed ventilation air flow."
  REFERENCE
    NACM Section 5.6.5.4
  INPUTCLASS
    Default
  MINIMUM
    0
  COMMONMAXIMUM
    1.5
  UNITS
    cfm/ft2
  DEFAULT : T24N_2016
    if( VentSrc = "None" )
    then 0
    else
    if( LocalCompAssigned( SpcFuncDefaultsRef ) .AND. LocalStatus( SpcFunc ) < 5 )
    then
      if( IsHotelMotelGuestRm > 0 .AND.
          IfValidAnd( HotelMotelGuestRmAveArea < 500 ) )
      then 0 // Use VentPerSpc criteria
      else SpcFuncDefaultsRef:VentPerArea
      endif
    else
    if( IsHotelMotelGuestRm > 0 .AND.
        IfValidAnd( HotelMotelGuestRmAveArea < 500 ) )
    then 0 // Use VentPerSpc criteria
    else CodeVentPerArea
    endif endif endif
  DEFAULT : T24N
    if( VentSrc = "None" )
    then 0
    else
    if( LocalCompAssigned( SpcFuncDefaultsRef ) .AND. 
        LocalStatus( SpcFunc ) < 5 .AND.
        HasDCV = 0 )
    then SpcFuncDefaultsRef:VentPerArea
    else
    if( LabArea > 0 )
    then ValidOr( ExhPerArea, 0 )
    else
    if( HasDCV > 0 .AND. VentSpecMthd = "Sum" )
    then CodeVentPerAreaForDCV
    else CodeVentPerArea
    endif endif endif endif
  SIZING_PROPOSED
    if( HasUnknownHVAC > 0 )
    then // PartialEnvelope or EnvelopeOnly, use NACM ventilation rates
      CodeVentPerArea
    else if( VentSrc = "None" )
    then 0
    else VentPerArea
    endif endif
  SIZING_BASELINE : T24N
    if( VentSrc = "None" )
    then 0
    else 
    if( BaseSysNum = 0 .OR. IsNewVent = 0 .OR. CommKitArea > 0 .OR. LabArea > 0 )
    then // Baseling system will not be assigend, ventilation system is existing, or is CommKit/Lab, 
         // Baseline = proposed
      zp:VentPerArea
    else CodeVentPerArea
    endif endif
  SIZING_BASELINE : S901G ECBC
    if( VentSrc = "None" )
    then 0
    else if( zp:HasUnknownHVAC > 0 .OR. IsNewVent = 0 .OR. IncludeInBal = 0 )
    then // Baseline = proposed
      zp:VentPerArea
    else CodeVentPerArea
    endif endif
  ANNUAL
    VentPerArea
ENDRULE
// Convert component to flow
RULE NEW Spc:VentPerAreaFlow
  DATATYPE
    Float
  LONGFORM
    VentilationPerAreaFlow
  DESCRIPTION
     "The outside air flow rate, in cfm, associated with the VentPerArea input."  
  INPUTCLASS
    NotInput
  UNITS
    cfm
  DEFAULT
    if( IfValidAnd( VentPerArea > 0 ) )
    then
      if( IsHighRiseRes > 0 .AND. IfValidAnd( DwellingUnitSpcTotArea > 0 ) )
      then VentPerArea * DwellingUnitSpcTotArea
      else VentPerArea * FlrArea
      endif
    else 0
    endif
  SIZING
    if( IfValidAnd( VentPerArea > 0 ) )
    then
      if( IsHighRiseRes > 0 .AND. IfValidAnd( DwellingUnitSpcTotArea > 0 ) )
      then VentPerArea * DwellingUnitSpcTotArea
      else VentPerArea * FlrArea
      endif
    else 0
    endif
  ANNUAL
    VentPerAreaFlow
ENDRULE

// Per Person basis
RULE Spc:VentPerPerson
  DESCRIPTION
     "The user input outside air flow rate divided by the design or hourly 
      occupancy of the space."  
  REFERENCE
    NACM Section 5.6.5.4
  INPUTCLASS
    Default
  MINIMUM
    0
  COMMONMAXIMUM
    30
  UNITS
    cfm/person  
  DEFAULT : T24N_2016
    if( VentSrc = "None" )
    then 0
    else if( LocalCompAssigned( SpcFuncDefaultsRef ) .AND. LocalStatus( SpcFunc ) < 5 )
    then SpcFuncDefaultsRef:VentPerPerson
    else CodeVentPerPerson
    endif endif
  DEFAULT : T24N_2019
    if( VentSrc = "None" )
    then 0
    else
    if( LocalCompAssigned( SpcFuncDefaultsRef ) .AND. 
        LocalStatus( SpcFunc ) < 5 .AND.
        HasDCV = 0 )
    then SpcFuncDefaultsRef:VentPerPerson
    else CodeVentPerPerson
    endif endif
  DEFAULT : T24N
    if( VentSrc = "None" )
    then 0
    else if( LocalCompAssigned( SpcFuncDefaultsRef ) .AND. 
             LocalStatus( SpcFunc ) < 5 .AND.
             HasDCV = 0 )
    then SpcFuncDefaultsRef:VentPerPerson
    else if( IfValidAnd( DsgnOcc > 0 ) )
    then CodeVentPerPerson // 15 cfm/occ
    else if( HasDCV > 0 .AND. IfValidAnd( OccNumSim > 0 ) )
    then if( VentSpecMthd = "Maximum" )
         then CodeVentPerAreaFlow / OccNumSim // Maximum
         else ( CodeVentPerAreaFlow - CodeVentPerAreaForDCVFlow ) / OccNumSim // Sum
         endif
    else CodeVentPerPerson // 0 cfm/occ
    endif endif endif endif
  SIZING_PROPOSED
    if( HasUnknownHVAC > 0 )
    then // PartialEnvelope or EnvelopeOnly, use NACM ventilation rates
      CodeVentPerPerson
    else if( VentSrc = "None" )
    then 0
    else VentPerPerson
    endif endif
  SIZING_BASELINE : T24N
    if( VentSrc = "None" )
    then 0
    else 
    if( BaseSysNum = 0 .OR. IsNewVent = 0 .OR. CommKitArea > 0 .OR. LabArea > 0 )
    then // Baseling system will not be assigend, ventilation system is existing, or is CommKit/Lab, 
         // Baseline = proposed
      zp:VentPerPerson
    else CodeVentPerPerson
    endif endif
  SIZING_BASELINE : S901G ECBC
    if( VentSrc = "None" )
    then 0
    else if( IsNewVent = 0 .OR. IncludeInBal = 0 )
    then // Baseline = proposed
      zp:VentPerPerson
    else CodeVentPerPerson
    endif endif
  ANNUAL
    VentPerPerson
ENDRULE
// Convert component to flow
RULE NEW Spc:VentPerPersonFlow
  DATATYPE
    Float
  LONGFORM
    VentilationPerPersonFlow
  DESCRIPTION
     "The outside air flow rate, in cfm, associated with the VentPerPerson input."  
  INPUTCLASS
    NotInput
  UNITS
    cfm
  DEFAULT
    if( IfValidAnd( VentPerPerson > 0 ) )
    then VentPerPerson * OccNumSim
    else 0
    endif
  SIZING
    if( IfValidAnd( VentPerPerson > 0 ) )
    then VentPerPerson * OccNumSim
    else 0
    endif
  ANNUAL
    VentPerPersonFlow
ENDRULE

// ACH
RULE Spc:VentACH
  DESCRIPTION
    "The user input outside air flow rate in cubic feet per hour divided by the
     volume of the space."  
  INPUTCLASS
    Optional
  UNITS
    ACH
  MINIMUM
    0
  DEFAULT : T24N_2016
    if( VentSrc = "None" )
    then 0
    else if( LocalCompAssigned( SpcFuncDefaultsRef ) .AND. LocalStatus( SpcFunc ) < 5 ) 
    then SpcFuncDefaultsRef:VentACH
    else if( LabArea > 0 )
    then // Default ACH for labs, see issue 2139
      if( IfValidAnd( LabExhRtType = "HoodDominated" ) )
      then 10 // HoodDominated
      else 6 // LoadDominated
      endif
    else CodeVentACH
    endif endif endif
  DEFAULT : T24N
    if( VentSrc = "None" )
    then 0
    else
    if( LocalCompAssigned( SpcFuncDefaultsRef ) .AND. 
        LocalStatus( SpcFunc ) < 5 )
    then SpcFuncDefaultsRef:VentACH
    else
    if( LabArea > 0 )
    then ValidOr( ExhACH, 0 )
    else CodeVentACH
    endif endif endif
  SIZING_PROPOSED
    if( HasUnknownHVAC > 0 )
    then // PartialEnvelope or EnvelopeOnly, use NACM ventilation rates
      CodeVentACH
    else if( VentSrc = "None" )
    then 0
    else VentACH
    endif endif
  SIZING_BASELINE : T24N
    if( VentSrc = "None" )
    then 0
    else
    if( BaseSysNum = 0 .OR. IsNewVent = 0 .OR. CommKitArea > 0 .OR. LabArea > 0 )
    then // Baseling system will not be assigend, ventilation system is existing, or is CommKit/Lab, 
         // Baseline = proposed
      zp:VentACH
    else CodeVentACH 
    endif endif
  SIZING_BASELINE : S901G ECBC
    if( VentSrc = "None" )
    then 0
    else if( IsNewVent = 0 .OR. IncludeInBal = 0 .OR. VentStd = "Other" )
    then // Baseline = proposed
      zp:VentACH
    else CodeVentACH 
    endif endif
  ANNUAL
    VentACH
ENDRULE
// Convert component to flow
RULE NEW Spc:VentACHFlow
  DATATYPE
    Float
  LONGFORM
    VentilationAirChangesPerHourFlow
  DESCRIPTION
     "The outside air flow rate, in cfm, associated with the VentACH input."  
  INPUTCLASS
    NotInput
  UNITS
    cfm
  DEFAULT
    if( IfValidAnd( VentACH > 0 ) )
    then VentACH * Vol / 60
    else 0
    endif
  SIZING
    if( IfValidAnd( VentACH > 0 ) )
    then VentACH * Vol / 60
    else 0
    endif
  ANNUAL
    VentACHFlow
ENDRULE

// Per Spc
RULE Spc:VentPerSpc
  DESCRIPTION
    "The user input outside air flow rate in cubic feet per minute for the space."  
  INPUTCLASS
    Optional
  UNITS
    cfm
  MINIMUM
    0
  DEFAULT : T24N_2016
    if( LocalCompAssigned( SpcFuncDefaultsRef ) .AND. LocalStatus( SpcFunc ) < 5 )
    then
      if( IfValidAnd( HotelMotelGuestRmCnt > 0 ) .AND.
          IfValidAnd( HotelMotelGuestRmAveArea < 500 ) )
      then SpcFuncDefaultsRef:VentPerSpc * HotelMotelGuestRmCnt // 30cfm per unit
      else if( IfValidAnd( HotelMotelGuestRmAveArea >= 500 ) )
      then 0
      else SpcFuncDefaultsRef:VentPerSpc
      endif endif
    else
    if( IfValidAnd( HotelMotelGuestRmCnt > 0 ) .AND.
        IfValidAnd( HotelMotelGuestRmAveArea < 500 ) )
    then 30 * HotelMotelGuestRmCnt // 30cfm per unit 
    else 0
    endif endif
  DEFAULT : T24N
    if( VentSrc = "None" )
    then 0
    else
    if( LocalCompAssigned( SpcFuncDefaultsRef ) .AND. LocalStatus( SpcFunc ) < 5 )
    then SpcFuncDefaultsRef:VentPerSpc
    else 
    if( LabArea > 0 )
    then ValidOr( ExhPerSpc, 0 )
    else CodeVentPerSpc
    endif endif endif
  DEFAULT : S901G ECBC
    0
  SIZING_PROPOSED : T24N
    if( HasUnknownHVAC > 0 )
    then // PartialEnvelope or EnvelopeOnly, use NACM ventilation rates
      CodeVentPerSpc
    else if( VentSrc = "None" )
    then 0
    else VentPerSpc   
    endif endif
  SIZING_BASELINE : T24N
    if( VentSrc = "None" )
    then 0
    else
    if( BaseSysNum = 0 .OR. IsNewVent = 0 .OR. CommKitArea > 0 .OR. LabArea > 0 )
    then // Baseling system will not be assigend, ventilation system is existing, or is CommKit/Lab, 
         // Baseline = proposed
      zp:VentPerSpc 
    else 0
    endif endif
  SIZING : S901G ECBC
    0
  ANNUAL
    VentPerSpc
ENDRULE
// Convert component to flow
RULE NEW Spc:VentPerSpcFlow
  DATATYPE
    Float
  LONGFORM
    VentilationPerSpcFlow
  DESCRIPTION
     "The outside air flow rate, in cfm, associated with the VentPerSpc input."  
  INPUTCLASS
    NotInput
  UNITS
    cfm
  DEFAULT
    if( IfValidAnd( VentPerSpc > 0 ) )
    then VentPerSpc
    else 0
    endif
  SIZING
    if( IfValidAnd( VentPerSpc > 0 ) )
    then VentPerSpc
    else 0
    endif
  ANNUAL
    VentPerSpcFlow
ENDRULE


// ********** Design Ventilation Flow Rates ************************************
// User-input
RULE Spc:VentFlow
  DESCRIPTION
    "The quantity of design ventilation air provided to the Space, in cfm,
     based on user inputs (for reference only)."
  HELP
    "The design air flow rate is determined from the specification method
     (Maximum, Sum, etc) defined at the ThermalZone, and the user-defined 
     Space ventilation components (cfm/person, cfm/ft2, etc). 


     Ventilation component rates are defaulted to the code minimum. However, the
     design ventilation air flow can be changed by modifying the individual
     component values and/or occupancy density.


     For compliance analysis, inidvidual Space ventilation air flows may vary above
     or below code minimums provided the sufficient total ventilation air is
     delivered to the combination of children Spaces of each BuildingStory."
  REFERENCE 
    NACM Section 5.6.5.4
  INPUTCLASS : T24N_2016
    NotInput
  INPUTCLASS
    Default 
  UNITS 
    cfm 
  DEFAULT
    if( VentSrc = "None" )
    then 0
    else
      switch( VentSpecMthd )
        case "NoVentilation"     : 0
        case "Maximum"           : 
          Max( Max( VentPerPersonFlow, VentPerAreaFlow ), Max( VentACHFlow, VentPerSpcFlow ) )
          / VentAirDistEff * VentMult
        case "Sum"               :
          ( VentPerPersonFlow + VentPerAreaFlow + VentACHFlow + VentPerSpcFlow ) 
          / VentAirDistEff * VentMult
        case "FlowPerPerson"     : VentPerPersonFlow / VentAirDistEff * VentMult
        case "FlowPerArea"       : VentPerAreaFlow / VentAirDistEff * VentMult
        case "AirChangesPerHour" : VentACHFlow / VentAirDistEff * VentMult
        case "FlowPerZone"       : VentPerSpcFlow / VentAirDistEff * VentMult
        default : 0
      endswitch
    endif
; DEFAULT : S901G ECBC
;   if( VentSpecMthd != "NoVentilation" )
;   then
;     if( VentSpecMthd = "Maximum" )
;     then
;       if( VentStd = "Other" )
;       then 
;         Max( Max( VentPerPersonFlow, VentPerAreaFlow ), VentACHFlow )
;         / VentAirDistEff * VentMult
;       else 
;         Max( VentPerPersonFlow, VentPerAreaFlow )
;         / VentAirDistEff * VentMult
;       endif
;     else if( VentSpecMthd = "Sum" )
;     then
;       if( VentStd = "Other" )
;       then 
;         ( VentPerPersonFlow + VentPerAreaFlow + VentACHFlow )
;         / VentAirDistEff * VentMult
;       else 
;         ( VentPerPersonFlow + VentPerAreaFlow )
;         / VentAirDistEff * VentMult
;       endif
;     else 0
;     endif endif
;   else 0
;   endif
  CHECKCODE : T24N
    if( IfValidAnd( IsNewVent = 0 ) )
    then UNCHANGED
    else
    if( CondgType = "Unconditioned" .AND. HasVentSys > 0 .AND. VentFlow > 0 )
    then 
      PostWarning("Space '%s' is 'Unconditioned', but has ventilation flow
                   defined. The ventilation system serving the space's zone
                   will be simulated the same in the proposed and standard
                   design.", Name) 
    else
    if( IsHighRiseRes > 0 .AND. IsCond > 0 .AND. HasVentSys > 0 .AND. VentStd != "Other" )
    then // High-rise res space
      if( VentFlow < CodeVentFlow * ( 1 - VentTolMinLimRes ) )
      then // Ventilation is less than code minimum
        PostError("The design ventilation air flow for high-rise residential space '%s' is %.0f cfm. 
                   This is less than the code minimum, %.0f cfm.
                   Increase design ventilation inputs so the total ventilation air delivered
                   to the space matches the code required flow.",
                   Name, VentFlow, CodeVentFlow )
      else
      if( VentFlow > CodeVentFlow * ( 1 + VentTolMaxLimRes ) )
      then // Ventilation is greater than code minimum
        PostWarning("The design ventilation air flow for high-rise residential space '%s' is %.0f cfm.
                     This this is greater than the code minimum, %.0f cfm. The standard design
                     ventilation will be limited to %.0f percent of the code minimum.", 
                     Name, VentFlow, CodeVentFlow,
                     ( 1 + VentTolMaxLimRes ) * 100 )
      else UNCHANGED
      endif endif
    else
    if( IsHotelMotelGuestRm > 0 .AND. IsCond > 0 .AND. HasVentSys > 0 .AND. VentStd != "Other" )
    then // Hotel/motel guestroom space
      if( VentFlow < CodeVentFlow * ( 1 - VentTolMinLimNonRes ) )
      then // Ventilation is less than code minimum
        PostError("The design ventilation air flow for hotel/motel guestroom space '%s' is %.0f cfm. 
                   This is less than the code minimum, %.0f cfm.
                   Increase design ventilation inputs so the total ventilation air delivered
                   to the space matches the code required flow.",
                   Name, VentFlow, CodeVentFlow )
      else // Ventilation is greater than code minimum
      if( VentFlow > CodeVentFlow * ( 1 + VentTolMaxLimNonRes ) )
      then // Ventilation is greater than code minimum
        PostWarning("The design ventilation air flow for hotel/motel guestroom space '%s' is %.0f cfm.
                     This this is greater than the code minimum, %.0f cfm. The standard design
                     ventilation will be limited to %.0f percent of the code minimum.", 
                     Name, VentFlow, CodeVentFlow,
                     ( 1 + VentTolMaxLimNonRes ) * 100 )
      else UNCHANGED
      endif endif
    else
    if( LabArea > 0 .AND. IsCond > 0 .AND. VentStd != "Other" .AND.
        VentFlow < CodeVentFlow * ( 1 - VentTolMinLimNonRes ) )
    then 
      PostWarning("Space '%s' is Laboratory, but the user-specified ventilation flow rate
                   is less than the required 0.15 cfm/ft2.", Name)
    else // Non-res spaces, including hotel/motel guestrooms
    if( IsCond > 0 .AND. HasVentSys > 0 .AND. VentStd != "Other" .AND.
        VentFlow < CodeVentFlow * ( 1 - VentTolMinLimNonRes ) )
    then // Ventilation is less than code minimum
      PostWarning("Nonresidential space '%s' has a design ventilation flow rate that is less than the 
                   code minimum. Sufficient additional ventilation air
                   must be provided to other nonresidential spaces on the BuildingStory
                   to meet transfer air requirements.", Name)
    else // Non-res spaces, including hotel/motel guestrooms
    if( VentFlow > CodeVentFlow * ( 1 + Proj:VentTolMaxLimNonRes ) .AND. 
        ( ValidOr( CodeVentMult, 1 ) * ValidOr( ExhVentMult, 1 ) < 0 ) .AND.
        VentStd != "Other" )
    then // Ventilation is greater than code minimum
      PostWarning("Nonresidential Space '%s' ventilation flow rate, %.0f cfm, is greater than the required
                   code minimum, %.0f cfm.", Name, VentFlow, CodeVentFlow * ( 1 + Proj:VentTolMaxLimNonRes ) )
    else UNCHANGED
    endif endif endif endif endif
    endif endif
  CHECKCODE : S901G ECBC
    if( CondgType = "Unconditioned" .AND. 
        HasVentSys > 0 .AND. 
        VentFlow > 0 .AND. 
        PrkgGarArea = 0 )   
    then 
      PostWarning("Space '%s' is 'Unconditioned', but has ventilation flow
                   defined. The ventilation system serving the space's zone
                   will be simulated the same in the proposed proposed and standard
                   design.", Name) 
    else
    if( HasDCV > 0 .AND. LocalStatus( VentFlow ) > 4 )
    then // Check for consistency in component inputs if using DCV and VentFlow is user-defined
      if( ( VentSpecMthd = "Maximum" .AND.  
            ( Max( Max( VentPerAreaFlow, VentACHFlow ), VentPerPersonFlow ) / VentAirDistEff * VentMult
              * ( 1 - Proj:VentTolMinLimNonRes ) ) > VentFlow // Less than calc - tolerance
            .OR.
            ( Max( Max( VentPerAreaFlow, VentACHFlow ), VentPerPersonFlow ) / VentAirDistEff * VentMult
              * ( 1 + Proj:VentTolMaxLimNonRes ) ) < VentFlow // Greater than calc + tolerance
           )
          .OR. // Check for Sum method
          ( ( VentPerAreaFlow + VentACHFlow + VentPerPersonFlow ) / VentAirDistEff * VentMult
            * ( 1 - Proj:VentTolMinLimNonRes ) > VentFlow // Less than calc - tolerance
            .OR.
            ( ( VentPerAreaFlow + VentACHFlow + VentPerPersonFlow) / VentAirDistEff * VentMult
            * ( 1 + Proj:VentTolMaxLimNonRes ) < VentFlow ) // Greater than calc + tolerance
          )
        )
      then
        PostError("Space '%s' has 'CO2Sensor' control, but the Design
                   component ventilation inputs (Ra, Rp and/or ACH) are 
                   not consistent with the user-specified Design Ventilation Total
                   flow rate (in cfm). Update the Design component values and/or the
                   Ventilation Total flow value so there is consistency 
                   between the components and the input cfm for the given 
                   specification method.", Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif endif
  SIZING_PROPOSED : T24N_2016
    if( VentSrc = "None" )
    then 0
    else
      switch( VentSpecMthd )
        case "NoVentilation"     : 0
        case "Maximum"           : 
          Max( Max( VentPerPersonFlow, VentPerAreaFlow ), Max( VentACHFlow, VentPerSpcFlow ) )
          / VentAirDistEff * VentMult
        case "Sum"               :
          ( VentPerPersonFlow + VentPerAreaFlow + VentACHFlow + VentPerSpcFlow )
          / VentAirDistEff * VentMult
        case "FlowPerPerson"     : VentPerPersonFlow / VentAirDistEff * VentMult
        case "FlowPerArea"       : VentPerAreaFlow / VentAirDistEff * VentMult
        case "AirChangesPerHour" : VentACHFlow / VentAirDistEff * VentMult
        case "FlowPerZone"       : VentPerSpcFlow / VentAirDistEff * VentMult
        default : 0
      endswitch
    endif
  SIZING_PROPOSED
    if( VentIsRequired > 0 .AND. HasUnknownHVAC > 0 )
    then // Is Partial compliance w/ no mechanical (complete or addition), model code-minimum
      CodeVentFlow // Ignore user inputs
    else
    if( VentSrc = "None" )
    then 0
    else VentFlow
    endif endif
//SIZING_BASELINE
// Moved to rule below for ordering purposes
ENDRULE

// Code minimum
RULE Spc:CodeVentFlow
  DESCRIPTION
    "The code minimum design ventilation air flow rate for the Space."
  HELP : T24N
    "The default value shall be the larger of 15 cfm times the design occupancy
     from Appendix 5.4A or the conditioned floor area times the applicable 
     ventilation rate from Appendix 5.4A or Table 120.1-A of the Standards."  
  INPUTCLASS
    NotInput
  UNITS 
    cfm
  DEFAULT : T24N_2016 T24N_2019
    if( VentIsRequired )
    then
      if( LabArea > 0 )
      then // Lab min is 0.15 cfm/ft2. See Issue 2139
        Max( CodeVentPerAreaFlow, VentFlow ) 
        / VentAirDistEff
      else
      if( CommKitArea > 0 )
      then // CommKit rate is max of NACM rate or proposed flow
        Max( Max( CodeVentPerPersonFlow, CodeVentPerAreaFlow ), VentFlow )
        / VentAirDistEff
      else
      if( PrkgGarArea > 0 )
      then // PrkgGar min based on cfm/ft2
        CodeVentPerAreaFlow
      else
      if( IsHighRiseRes )
      then // Is a High-rise residential Spc, use Sum
        ( CodeVentPerPersonFlow + CodeVentPerAreaFlow )
      else
      if( IsHotelMotelGuestRm )
      then // Is a hotel guest room
        Max( CodeVentPerAreaFlow, CodeVentPerSpcFlow )
      else // All other spaces is Max of PerArea/PerPerson
        Max( CodeVentPerPersonFlow, CodeVentPerAreaFlow )
      endif endif endif endif endif
    else 0
    endif
  DEFAULT : T24N
    if( VentIsRequired )
    then
      if( LabArea > 0 )
      then // Lab min is 0.15 cfm/ft2. See Issue 2139
        Max( CodeVentPerAreaFlow, VentFlow ) 
        / VentAirDistEff
      else
      if( CommKitArea > 0 )
      then // CommKit rate is max of NACM rate or proposed flow
        Max( Max( CodeVentPerPersonFlow, CodeVentPerAreaFlow ), VentFlow )
        / VentAirDistEff
      else
      if( PrkgGarArea > 0 )
      then // PrkgGar min based on cfm/ft2
        CodeVentPerAreaFlow
      else
      if( IsHighRiseRes )
      then // Is a High-rise residential Spc, use Sum
        ( CodeVentPerPersonFlow + CodeVentPerAreaFlow )
      else
      if( IsHotelMotelGuestRm )
      then // Is a hotel guest room
        Max( CodeVentPerAreaFlow, CodeVentPerSpcFlow )
      else
      if( IfValidAnd( DsgnOcc > 0 ) )
      then // Exception 1 to Section 120.1(c)3
        Max( CodeVentPerPersonFlow, CodeVentPerAreaFlow )
      else // All other spaces is Max of PerArea/PerPerson
        CodeVentPerAreaFlow
      endif endif endif endif endif endif
    else 0
    endif
  DEFAULT : S901G ECBC
    if( VentIsRequired )
    then
      if( VentStd = "T24-2013" )
      then
        if( LabArea > 0 )
        then // Lab min based on ACH
          Max( CodeVentPerAreaFlow, VentFlow ) 
        else if( CommKitArea > 0 )
        then // CommKit rate is max of NACM rate or proposed flow
          Max( Max( CodeVentPerPersonFlow, CodeVentPerAreaFlow ), VentFlow )
        else if( PrkgGarArea > 0 )
        then // PrkgGar min based on cfm/ft2
          CodeVentPerAreaFlow
        else if( IsHighRiseRes)
        then // Is a High-rise residential Spc, use Sum
          ( CodeVentPerPersonFlow + CodeVentPerAreaFlow )
        else if( IsHotelMotelGuestRm )
        then // Is a hotel guest room
          CodeVentPerSpcFlow
        else // All other spaces is Max of PerArea/PerPerson
          Max( CodeVentPerPersonFlow, CodeVentPerAreaFlow )
        endif endif endif endif endif
      else if( VentStd = "62.1-2010" .OR. VentStd = "IMC-2012" )
      then // Sum of Ra and Rp rates
        ( CodeVentPerPersonFlow + CodeVentPerAreaFlow )
      else 0
      endif endif
    else 0
    endif
ENDRULE

// 'Other' code minimum
RULE Spc:CodeOtherVentFlow
  DESCRIPTION
    "The 'Other' code minimum design ventilation air flow rate for the Space." 
  INPUTCLASS : T24N
    NotInput  IgnoreUserInput  "Spc:CodeOtherVentFlow removed prior to release of 2016.3.0"
  INPUTCLASS : S901G ECBC
    Default
  UNITS 
    cfm
  DEFAULT : T24N
    if( VentSrc = "None" .OR. VentStd != "Other" )
    then 0
    else
      switch( VentSpecMthd )
        case "NoVentilation"     : 0
        case "Maximum"           : 
          Max( Max( CodeVentPerPersonFlow, CodeVentPerAreaFlow ), 
               Max( CodeVentACHFlow, CodeVentPerSpcFlow ) )
          / VentAirDistEff * VentMult
        case "Sum"               :
          ( CodeVentPerPersonFlow + CodeVentPerAreaFlow + 
            CodeVentACHFlow + CodeVentPerSpcFlow )
          / VentAirDistEff * VentMult
        case "FlowPerPerson"     : CodeVentPerPersonFlow / VentAirDistEff * VentMult
        case "FlowPerArea"       : CodeVentPerAreaFlow / VentAirDistEff * VentMult
        case "AirChangesPerHour" : CodeVentACHFlow / VentAirDistEff * VentMult
        case "FlowPerZone"       : CodeVentPerSpcFlow / VentAirDistEff * VentMult
        default : 0
      endswitch
    endif 
  DEFAULT : S901G ECBC
// Rule is difference from CodeVentFlow since it includes CodeOtherVentACH
    if( VentIsRequired .AND. VentStd = "Other" )
      then
      if( VentSpecMthd = "Maximum" )
      then // 'Maximum' method
        Max( Max( CodeVentPerPersonFlow, CodeVentPerAreaFlow ),
             CodeVentACHFlow )
        / VentAirDistEff
      else  // 'Sum' method
        ( CodeVentPerPersonFlow + CodeVentPerAreaFlow + CodeVentACHFlow )
        / VentAirDistEff
      endif
    else 0
    endif
  CHECKCODE : S901G ECBC
    if( HasDCV > 0 .AND. LocalStatus( CodeOtherVentFlow ) > 4 )
    then // Check for consistency in component inputs if using DCV and CodeOtherVentFlow is user-defined
      if( ( VentSpecMthd = "Maximum" .AND.  
            ( Max( Max( VentPerAreaFlow, VentACHFlow ), VentPerPersonFlow ) / VentAirDistEff
              * ( 1 - Proj:VentTolMinLimNonRes ) ) > CodeOtherVentFlow // Less than calc - tolerance
            .OR.
            ( Max( Max( VentPerAreaFlow, VentACHFlow ), VentPerPersonFlow ) / VentAirDistEff
              * ( 1 + Proj:VentTolMaxLimNonRes ) ) < CodeOtherVentFlow // Greater than calc + tolerance
           )
          .OR. // Check for Sum method
          ( ( VentPerAreaFlow + VentACHFlow + VentPerPersonFlow ) / VentAirDistEff
            * ( 1 - Proj:VentTolMinLimNonRes ) > CodeOtherVentFlow // Less than calc - tolerance
            .OR.
            ( ( VentPerAreaFlow + VentACHFlow + VentPerPersonFlow) / VentAirDistEff
            * ( 1 - Proj:VentTolMinLimNonRes ) < CodeOtherVentFlow ) // Greater than calc + tolerance
          )
        )
      then
        PostError("Space '%s' has 'CO2Sensor' control, but the Code Min.
                   component ventilation inputs (Ra, Rp and/or ACH) are 
                   not consistent with the user-specified Code Min. Ventilation Total
                   flow rate (in cfm). Update the Code Min. component values and/or the
                   Ventilation Total flow value so there is consistency 
                   between the components and the input cfm for the given 
                   specification method.", Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE


// ********** Minimum Ventilation Flow Rates ***********************************
// Minimum flow rate for the zone if using DCV
// User-input
RULE Spc:MinVentFlow
  DESCRIPTION
    "The minimum ventilation air flow rate for the Space."
  HELP
    "If CO2Sensors are used, this represents the minimum ventilation flow rate
     when the space is unoccupied, or for labs, the minimum design ventilation rate.
     Otherwise, this is equal to the design ventilation flow rate."
  INPUTCLASS : T24N
    NotInput
  INPUTCLASS
    Default
  UNITS 
    cfm
  DEFAULT : T24N_2016
    if( VentSrc = "None" )
    then 0
    else
    if( HasDCV > 0 )
    then // Does not include VentPerPersonFlow
      switch( VentSpecMthd )
        case "Maximum"           : 
              Max(Max(VentPerAreaFlow, VentACHFlow), VentPerSpcFlow)
        case "Sum"               : 
              (VentPerAreaFlow + VentACHFlow + VentPerSpcFlow)
        case "FlowPerPerson"     : 0 // Minimum not known since occ could be 0
        case "FlowPerArea"       :
              VentPerAreaFlow
        case "AirChangesPerHour" :
              VentACHFlow
        case "FlowPerZone" :
              VentPerSpcFlow
        default : 0
      endswitch
    else VentFlow
    endif endif
  DEFAULT : T24N
    if( VentSrc = "None" )
    then 0
    else
    if( HasDCV > 0 )
    then CodeVentPerAreaForDCVFlow
    else VentFlow
    endif endif
  DEFAULT : S901G ECBC
    if( VentSrc = "None" )
    then 0
    else
    if( HasDCV > 0 )
    then
      if( VentSpecMthd = "Maximum" )
      then // 'Maximum' method
        Max( VentPerAreaFlow, VentACHFlow )
        / VentAirDistEff * VentMult
      else  // 'Sum' method
        ( VentPerAreaFlow + VentACHFlow )
        / VentAirDistEff * VentMult
      endif
    else VentFlow
    endif endif
  CHECKCODE  : S901G ECBC
    if( HasDCV > 0 .AND. LocalStatus( MinVentFlow ) > 4 )
    then // Check for consistency in component inputs if using DCV and VentFlow is user-defined
      if( ( VentSpecMthd = "Maximum" .AND.  
            ( Max( VentPerAreaFlow, VentACHFlow ) / VentAirDistEff * VentMult
              * ( 1 - Proj:VentTolMinLimNonRes ) ) > MinVentFlow // Less than calc - tolerance
            .OR.
            ( Max( VentPerAreaFlow, VentACHFlow ) / VentAirDistEff * VentMult
              * ( 1 + Proj:VentTolMaxLimNonRes ) ) < MinVentFlow // Greater than calc + tolerance
           )
          .OR. // Check for Sum method
          ( ( VentPerAreaFlow + VentACHFlow ) / VentAirDistEff * VentMult
            * ( 1 - Proj:VentTolMinLimNonRes ) > MinVentFlow // Less than calc - tolerance
            .OR.
            ( ( VentPerAreaFlow + VentACHFlow ) / VentAirDistEff * VentMult
            * ( 1 - Proj:VentTolMaxLimNonRes ) < MinVentFlow ) // Greater than calc + tolerance
          )
        )
      then
        PostError("Space '%s' has 'CO2Sensor' control, but the Design
                   component ventilation inputs (Ra and/or ACH) are 
                   not consistent with the user-specified Design Ventilation Min.
                   flow rate (in cfm). Update the Design component values and/or the
                   Ventilation Min. flow value so there is consistency 
                   between the components and the input cfm for the given 
                   specification method.", Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif
  ANNUAL : T24N_2016
    if( VentSrc = "None" )
    then 0
    else 
    if( HasDCV > 0 )
    then // Does not include VentPerPersonFlow
      switch( VentSpecMthd )
        case "Maximum"           : 
              Max(Max(VentPerAreaFlow, VentACHFlow), VentPerSpcFlow)
        case "Sum"               : 
              (VentPerAreaFlow + VentACHFlow + VentPerSpcFlow)
        case "FlowPerPerson"     : 0 // Minimum not known since occ could be 0
        case "FlowPerArea"       :
              VentPerAreaFlow
        case "AirChangesPerHour" :
              VentACHFlow
        case "FlowPerZone" :
              VentPerSpcFlow
        default : 0
      endswitch
    else VentFlow
    endif endif
  ANNUAL
    if( VentSrc = "None" )
    then 0
    else
    if( HasDCV > 0 )
    then // Design has DCV.  Ignore user MinVentFlow, use minimum calculated by rules
      CodeVentPerAreaForDCVFlow
    else // No DCV, use design vent flow
      VentFlow
    endif endif
ENDRULE

RULE Spc:PropMinVentACH
  DESCRIPTION
    "The proposed minimum ventilation air flow rate, in ACH, for the Space
     during unoccupied hours."  
  HELP
    "Currently only applicable to VAV laboratory systems."
  INPUTCLASS : T24N_2016
    NotInput
  INPUTCLASS
    Default
  UNITS
    ACH
  DEFAULT : T24N_2016
    UNDEFINED
  DEFAULT
    if( LabArea > 0 )
    then 4
    else UNDEFINED
    endif
ENDRULE

RULE Spc:PropMinVentFlow
  DESCRIPTION
    "The proposed minimum ventilation air flow rate, in CFM, for the Space
     during unoccupied hours."
  HELP
    "Currently only applicable to VAV laboratory systems."
  INPUTCLASS : T24N_2016
    NotInput 
  INPUTCLASS
    Default
  UNITS
    cfm
  DEFAULT : T24N_2016
    UNDEFINED
  DEFAULT
    if( LabArea > 0 )
    then Min( ValidOr( PropMinVentACH, 0 ) * ValidOr( Vol, 0 ) / 60, VentFlow )
    else UNDEFINED
    endif
ENDRULE

// Code minimum
RULE Spc:CodeMinVentFlow
  DESCRIPTION
    "The code minimum ventilation air flow rate for the Space."
  HELP
    "If CO2Sensors are used, this represents the minimum ventilation flow rate
     when the space is unoccupied. Otherwise, the minimum is equal to the design
     ventilation flow rate."
  INPUTCLASS
    NotInput
  UNITS 
    cfm
  DEFAULT : T24N_2016
// Is the CodeVentFlow unless CO2Sensor controls are required or provided,
// in which case, is the CodeVentPerAreaFlow.
    if( IfValidAnd( DCVIsRequired > 0 ) .OR. IfValidAnd( HasDCV > 0 ) )
    then // Zone requires CO2Sensor control, or DCV is provided and it is
         // allowed; use CodeVentPerArea rate
      CodeVentPerAreaFlow  / VentAirDistEff
    else // Use CodeVentFlow
      CodeVentFlow
    endif
  DEFAULT
// Is the CodeVentFlow unless CO2Sensor controls are required or provided,
// in which case, is the CodeVentPerAreaFlow.
    if( IfValidAnd( DCVIsRequired > 0 ) .OR. HasDCV > 0 )
    then // Zone requires CO2Sensor control, or DCV is provided and it is
         // allowed; use CodeVentPerArea rate
      CodeVentPerAreaForDCVFlow / VentAirDistEff
    else // Use CodeVentFlow
      CodeVentPerAreaFlow / VentAirDistEff
    endif  
ENDRULE

// 'Other' code minimum
RULE Spc:CodeOtherMinVentFlow
  DESCRIPTION
    "The 'Other' code minimum ventilation air flow rate for the Space."
  HELP
    "If CO2Sensors are used, this represents the minimum ventilation flow rate
     when the space is unoccupied. Otherwise, the minimum is equal to the design
     ventilation flow rate."
  INPUTCLASS : T24N_2016
    NotInput
  INPUTCLASS
    Default
  UNITS 
    cfm
  DEFAULT : T24N_2016
  // Is the CodeOtherVentFlow unless CO2Sensor controls are required or provided,
  // in which case, is the balance of flow after subtracting PerPerson component
    if( VentSrc = "None" .AND. VentStd != "Other" )
    then 0
    else
     if( HasDCV > 0 )
    then // Zone requires CO2Sensor control, or DCV is provided
      switch( VentSpecMthd )
        case "Maximum"           : 
              Max(Max(CodeVentPerAreaFlow, CodeVentACHFlow), CodeVentPerSpcFlow)
        case "Sum"               : 
              (CodeVentPerAreaFlow + CodeVentACHFlow + CodeVentPerSpcFlow)
        case "FlowPerPerson"     : 
              CodeVentPerPersonFlow
        case "FlowPerArea"       :
              CodeVentPerAreaFlow
        case "AirChangesPerHour" :
              CodeVentACHFlow
        case "FlowPerZone" :
              CodeVentPerSpcFlow
        default : 0
      endswitch
    else VentFlow
    endif endif
  DEFAULT : T24N
    if( VentSrc = "None" )
    then 0
    else
    if( HasDCV )
    then CodeVentPerAreaForDCVFlow
    else VentFlow
    endif endif
  DEFAULT : S901G ECBC
// Is the CodeOtherVentFlow unless CO2Sensor controls are required or provided,
// in which case, is the balance of flow after subtracting PerPerson component
    if( IfValidAnd( DCVIsRequired > 0 ) .OR. IfValidAnd( HasDCV > 0 ) )
    then // Zone requires CO2Sensor control, or DCV is provided
      if( VentSpecMthd = "Maximum" )
      then // 'Maximum' method
        Max( CodeVentPerAreaFlow, CodeVentACHFlow )
        / VentAirDistEff
      else  // 'Sum' method
        ( CodeVentPerAreaFlow + CodeVentACHFlow )
        / VentAirDistEff
      endif
    else CodeOtherVentFlow
    endif
  CHECKCODE : S901G ECBC
    if( HasDCV > 0 .AND. LocalStatus( CodeOtherMinVentFlow ) > 4 )
    then // Check for consistency in component inputs if using DCV and VentFlow is user-defined
      if( ( VentSpecMthd = "Maximum" .AND.  
            ( Max( CodeVentPerAreaFlow, CodeVentACHFlow ) / VentAirDistEff
              * ( 1 - Proj:VentTolMinLimNonRes ) ) > CodeOtherMinVentFlow // Less than calc - tolerance
            .OR.
            ( Max( CodeVentPerAreaFlow, CodeVentACHFlow ) / VentAirDistEff
              * ( 1 + Proj:VentTolMaxLimNonRes ) ) < CodeOtherMinVentFlow // Greater than calc + tolerance
           )
          .OR. // Check for Sum method
          ( ( CodeVentPerAreaFlow + CodeVentACHFlow ) / VentAirDistEff
            * ( 1 - Proj:VentTolMinLimNonRes ) > CodeOtherMinVentFlow // Less than calc - tolerance
            .OR.
            ( ( CodeVentPerAreaFlow + CodeVentACHFlow ) / VentAirDistEff
            * ( 1 - Proj:VentTolMinLimNonRes ) < CodeOtherMinVentFlow ) // Greater than calc + tolerance
          )
        )
      then
        PostError("Space '%s' has 'CO2Sensor' control, but the Code
                   component ventilation inputs (Ra and/or ACH) are 
                   not consistent with the user-specified Code Ventilation Min.
                   flow rate (in cfm). Update the Code component values and/or the
                   Ventilation Min. flow value so there is consistency 
                   between the components and the input cfm for the given 
                   specification method.", Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif   
  ANNUAL : T24N_2016
    if( VentSrc = "None" .OR. VentStd != "Other" )
    then 0
    else
    if( HasDCV > 0 )
    then // Does not include VentPerPersonFlow
      switch( VentSpecMthd )
        case "Maximum"           : 
              Max(Max(VentPerAreaFlow, VentACHFlow), VentPerSpcFlow)
        case "Sum"               : 
              (VentPerAreaFlow + VentACHFlow + VentPerSpcFlow)
        case "FlowPerPerson"     : 
              VentPerPersonFlow
        case "FlowPerArea"       :
              VentPerAreaFlow
        case "AirChangesPerHour" :
              VentACHFlow
        case "FlowPerZone" :
              VentPerSpcFlow
        default : 0
      endswitch
    else VentFlow
    endif endif
  ANNUAL
    if( VentSrc = "None" )
    then 0
    else
    if( HasDCV )
    then CodeVentPerAreaForDCVFlow
    else VentFlow
    endif endif 
ENDRULE

// ----------------------------------------------------------------------------
// Properties for Story ventilation air balance calculations
RULE NEW Spc:VentFlowForBal
  DATATYPE
    Float
  LONGFORM 
    VentilationFlowForBalance
  INPUTCLASS 
    NotInput
  UNITS
    cfm
  DEFAULT
    if( VentStd != "Other" )  
    then
      if( HasUnknownHVAC > 0 )
      then VentFlow * IncludeInBal
      else VentFlow * IncludeInBal * HasVentSys
      endif
    else 0
    endif
  ANNUAL
    if( VentStd != "Other" )
    then VentFlow * IncludeInBal * HasVentSys
    else 0
    endif
ENDRULE

RULE NEW Spc:OtherVentFlowForBal
  DATATYPE
    Float
  LONGFORM 
    OtherVentilationFlowForBalance
  INPUTCLASS 
    NotInput
  UNITS
    cfm
  DEFAULT
    if( VentStd = "Other" )  
    then
      if( HasUnknownHVAC > 0 )
      then VentFlow * IncludeInBal
      else VentFlow * IncludeInBal * HasVentSys
      endif
    else 0
    endif
  ANNUAL
    if( VentStd = "Other" )
    then VentFlow * IncludeInBal * HasVentSys
    else 0
    endif
ENDRULE

RULE NEW Spc:CodeVentFlowForBal
  DATATYPE
    Float
  LONGFORM 
    CodeVentilationFlowForBalance
  DESCRIPTION
    "The minimum design ventilation flow used for determining the BuildingStory
     air flow balance."
  INPUTCLASS 
    NotInput
  UNITS
    cfm
  DEFAULT
    if( VentStd != "Other" )
    then CodeVentFlow * IncludeInBal
    else 0
    endif
  ANNUAL
    if( VentStd != "Other" )
    then CodeVentFlow * IncludeInBal
    else 0
    endif
ENDRULE

RULE NEW Spc:CodeOtherVentFlowForBal
  DATATYPE
    Float
  LONGFORM 
    CodeOtherVentilationFlowForBalance
  DESCRIPTION
    "The minimum design ventilation flow used for determining the BuildingStory
     air flow balance."
  INPUTCLASS 
    NotInput
  UNITS
    cfm
  DEFAULT
    if( VentStd = "Other" )
    then CodeOtherVentFlow * IncludeInBal
    else 0
    endif
  ANNUAL
    if( VentStd = "Other" )
    then CodeOtherVentFlow * IncludeInBal
    else 0
    endif
ENDRULE

RULE NEW Spc:CodeVentFlowRat
  DATATYPE
    Float
  LONGFORM 
    CodeVentilationFlowRatio
  DESCRIPTION
    "The ratio of the proposed ventilation air flow rate to the code ventilation
     air flow rate, for the Space."
  INPUTCLASS 
    NotInput
  UNITS
    cfm
  DEFAULT
    if( IfValidAnd( CodeVentFlow > 0 ) .AND.
        IfValidAnd( VentFlow >= 0 ) )
    then VentFlow / CodeVentFlow
    else 1.0
    endif
  ANNUAL
    if( IfValidAnd( CodeVentFlow > 0 ) .AND.
        IfValidAnd( VentFlow >= 0 ) )
    then VentFlow / CodeVentFlow
    else 1.0
    endif
ENDRULE


// ----------------------------------------------------------------------------
// Ventilation/exhaust multipliers
RULE NEW Spc:CodeVentMult
  DATATYPE
    Float
  LONGFORM
    CodeVentilationMultiplier
  DESCRIPTION
    "A multiplier to adjust the proposed ventilation air flow rate for the Space
     to the code allowed air flow rate."
  HELP
    "For nonresidential spaces, this is calculated at the BuildingStory level.
     For residential spaces, this is calculated on a space-by-space basis." 
  INPUTCLASS
    NotInput
  DEFAULT : T24N
    if( IncludeInBal > 0 .AND. CommKitArea = 0 )
    then
      if( VentStd = "Other" )
      then Story:CodeOtherVentMult
      else Story:CodeVentMult
      endif
    else
    if( IsHighRiseRes > 0 .AND. CodeVentFlowRat > ( 1.0 + Proj:VentTolMaxLimRes ) )
    then CodeVentFlow * ( 1.0 + Proj:VentTolMaxLimRes ) / VentFlow
    else 
    if( IsHotelMotelGuestRm > 0 .AND. CodeVentFlowRat > ( 1.0 + Proj:VentTolMaxLimNonRes ) )
    then CodeVentFlow * ( 1.0 + Proj:VentTolMaxLimNonRes ) / VentFlow
    else 1.0
    endif endif endif
  DEFAULT : S901G
    if( IncludeInBal > 0 )
    then
      if( VentStd = "Other" )
      then Story:CodeOtherVentMult
      else Story:CodeVentMult
      endif
    else 1.0
    endif
  SIZING : T24N
    if( IncludeInBal > 0 .AND. CommKitArea = 0 )
    then
      if( VentStd = "Other" )
      then Story:CodeOtherVentMult
      else Story:CodeVentMult
      endif
    else
    if( IsHighRiseRes > 0 .AND. CodeVentFlowRat > ( 1.0 + Proj:VentTolMaxLimRes ) )
    then CodeVentFlow * ( 1.0 + Proj:VentTolMaxLimRes ) / VentFlow
    else 
    if( IsHotelMotelGuestRm > 0 .AND. CodeVentFlowRat > ( 1.0 + Proj:VentTolMaxLimNonRes ) )
    then CodeVentFlow * ( 1.0 + Proj:VentTolMaxLimNonRes ) / VentFlow
    else 1.0
    endif endif endif
  SIZING : S901G ECBC
    if( IsNewVent > 0 .AND. IncludeInBal )
    then
      if( VentStd = "Other" )
      then Story:CodeOtherVentMult
      else Story:CodeVentMult
      endif
    else 1.0
    endif
  ANNUAL
    CodeVentMult
ENDRULE

RULE NEW Spc:ExhVentMult
  DATATYPE
    Float
  LONGFORM
    ExhaustVentilationMultiplier
  DESCRIPTION
    "Echo of the ventilation multiplier calculated at the BuildingStory level." 
  INPUTCLASS
    NotInput
  DEFAULT
    if( IncludeInBal > 0 )
    then
      if( VentStd = "Other" )
      then Story:OtherExhVentMult
      else Story:ExhVentMult
      endif
    else 1.0
    endif
  SIZING : T24N
    if( IncludeInBal > 0 .AND. CommKitArea = 0 )
    then // CommKitArea is also not modified
      if( VentStd = "Other" )
      then Story:OtherExhVentMult
      else Story:ExhVentMult
      endif
    else 1.0
    endif  
  SIZING : S901G ECBC
    if( IsNewVent > 0 .AND. IncludeInBal )
    then
      if( VentStd = "Other" )
      then Story:OtherExhVentMult
      else Story:ExhVentMult
      endif
    else 1.0
    endif
  ANNUAL
    ExhVentMult
ENDRULE

// This is the target DESIGN ventilation air flow for the space in the baseline design
RULE NEW Spc:CodeVentFlowTarget
  DATATYPE
    Float
  LONGFORM
    CodeVentilationFlowTarget
  DESCRIPTION
    "The ventilation air flow rate for the Space after adjusting the proposed
     rate to match the baseline allowance."
  INPUTCLASS
    NotInput
  UNITS 
    cfm
  DEFAULT
    VentFlow * ValidOr( CodeVentMult, 1 ) * ValidOr( ExhVentMult, 1 )
  SIZING
    CodeVentFlowTarget
ENDRULE

RULE Spc:VentFlow
  SIZING_BASELINE : T24N
    if( VentSrc = "None" )
    then 0
;   else Max( MinVentFlow, VentPerPersonFlowSim )
    else CodeVentFlowTarget
    endif
ENDRULE

// ----------------------------------------------------------------------------
// For Reporting
// Calculate ventilation flows in other units for reference
// Proposed design
RULE NEW Spc:DsgnVentPerArea
  DATATYPE
    Float
  LONGFORM
    DesignVentilationPerArea
  DESCRIPTION
    "The quantity of design ventilation air provided to the Space, in cfm/ft2,
     based on user inputs (for reference only)."
  INPUTCLASS
    NotInput
  UNITS 
    cfm/ft2
  DEFAULT
    if( IfValidAnd( FlrArea > 0 ) )
    then VentFlow / FlrArea
    else 0
    endif
ENDRULE

RULE NEW Spc:DsgnVentPerPerson
  DATATYPE
    Float
  LONGFORM
    DesignVentilationPerPerson
  DESCRIPTION
    "The quantity of design ventilation air provided to the Space, in cfm/person,
     based on user inputs (for reference only)."
  INPUTCLASS
    NotInput
  UNITS 
    cfm/person
  DEFAULT
    if( OccNumSim > 0 .AND. IfValidAnd( VentFlow > 0 ) )
    then VentFlow / OccNumSim
    else 0
    endif
ENDRULE

RULE NEW Spc:DsgnVentACH
  DATATYPE
    Float
  LONGFORM
    DesignVentilationAirChangesPerHour
  DESCRIPTION
    "The quantity of design ventilation air provided to the Space, in ACH,
     based on user inputs (for reference only)."
  INPUTCLASS
    NotInput
  UNITS 
    ACH
  DEFAULT
    if( IfValidAnd( Vol > 0 ) )
    then VentFlow * 60 / Vol 
    else 0
    endif   
ENDRULE

// Code baseline
RULE NEW Spc:CodeDsgnVentPerArea
  DATATYPE
    Float
  LONGFORM
    CodeDesignVentilationPerArea
  DESCRIPTION
    "The quantity of code minimum required ventilation air for the Space, 
     in cfm/ft2 (for reference only)."
  INPUTCLASS
    NotInput
  UNITS 
    cfm/ft2
  DEFAULT
    if( IfValidAnd( FlrArea > 0 ) )
    then
      if( VentStd = "Other" )
      then CodeOtherVentFlow / FlrArea
      else CodeVentFlow / FlrArea
      endif
    else 0
    endif
ENDRULE

RULE NEW Spc:CodeDsgnVentPerPerson
  DATATYPE
    Float
  LONGFORM
    CodeDesignVentilationPerPerson
  DESCRIPTION
    "The quantity of code minimum required ventilation air for the Space, 
     in cfm/person (for reference only)."
  INPUTCLASS
    NotInput
  UNITS 
    cfm/person
  DEFAULT
    if( MinOccNumSim > 0 .AND. PrkgGarArea = 0 )
    then
      if( VentStd = "Other" )
      then CodeOtherVentFlow / Max( OccNumSim, MinOccNumSim )
      else CodeVentFlow / Max( OccNumSim, MinOccNumSim )
      endif
    else 0
    endif
ENDRULE

RULE NEW Spc:CodeDsgnVentACH
  DATATYPE
    Float
  LONGFORM
    CodeDesignVentilationAirChangesPerHour
  DESCRIPTION
    "The quantity of code minimum required ventilation air for the Space, 
     in ACH (for reference only)."
  INPUTCLASS
    NotInput
  UNITS 
    cfm
  DEFAULT
    if( IfValidAnd( Vol > 0 ) )
    then
      if( VentStd = "Other" )
      then CodeOtherVentFlow * 60 / Vol 
      else CodeVentFlow * 60 / Vol 
      endif
    else 0
    endif   
ENDRULE

// Occ Sensor control
RULE NEW Spc:OccSensorCtrlDisp
  DESCRIPTION
    "Screens condition to display Occupant Sensor control required checkbox"
  DATATYPE
    Integer
  INPUTCLASS
    NotInput
  DEFAULT
    if ( Proj:IsNewMech = 1 .OR. Proj:IsAddMech = 1 .OR. Proj:IsPartMech = 1 )
    then
      if ( IsHlthCare = 0 )
      then
        if( IfValidAnd ( SpcFunc = "Office Area (<250 square feet)" ) .OR.
            IfValidAnd ( SpcFunc = "Stairwell" ) .OR.
            IfValidAnd ( SpcFunc = "Corridor Area" ) .OR.
            ( IfValidAnd ( SpcFunc = "Classroom, Lecture, Training, Vocational Areas" ) .AND. 
               ( IfValidAnd ( VentSpcFunc = "Education - Lecture/postsecondary classroom" ) .OR.
                 IfValidAnd ( VentSpcFunc = "Education - Lecture hall (fixed seats)" ) .OR.
                 IfValidAnd ( VentSpcFunc = "Education - Music/theater/dance" ) .OR.
                 IfValidAnd ( VentSpcFunc = "Education - Multiuse assembly" ) .AND. IfValidAnd( Area < 1000 ) ) ) .OR.
            ( IfValidAnd ( SpcFunc = "Convention, Conference, Multipurpose and Meeting Area" ) .AND. 
              IfValidAnd ( VentSpcFunc = "Education - Multiuse assembly" ) .AND. IfValidAnd( Area < 1000 ) ) .OR.
            ( IfValidAnd ( SpcFunc = "Convention, Conference, Multipurpose and Meeting Area" ) .AND. 
              IfValidAnd ( VentSpcFunc = "Lodging - Multipurpose assembly" ) .AND. IfValidAnd( Area < 1000 ) ) .OR.          
            ( IfValidAnd ( SpcFunc = "Convention, Conference, Multipurpose and Meeting Area" ) .AND. 
              IfValidAnd ( VentSpcFunc = "General - Conference/meeting" ) ) )
        then 1
        else 0
        endif 
      else 0
      endif
    else if ( Proj:IsAddOrAlt = 1 .AND. OverallStatus = "Altered" )
    then
      if ( IsHlthCare = 0 )
      then
        if( IfValidAnd ( SpcFunc = "Office Area (<250 square feet)" ) .OR.
            IfValidAnd ( SpcFunc = "Stairwell" ) .OR.
            IfValidAnd ( SpcFunc = "Corridor Area" ) .OR.
            ( IfValidAnd ( SpcFunc = "Classroom, Lecture, Training, Vocational Areas" ) .AND. 
              IfValidAnd ( VentSpcFunc = "Education - Lecture/postsecondary classroom" ) ) .OR.
            ( IfValidAnd ( SpcFunc = "Convention, Conference, Multipurpose and Meeting Area" ) .AND. 
              IfValidAnd ( VentSpcFunc = "Education - Multiuse assembly" ) .AND. IfValidAnd( Area < 1000 ) ) .OR.
            ( IfValidAnd ( SpcFunc = "Convention, Conference, Multipurpose and Meeting Area" ) .AND. 
              IfValidAnd ( VentSpcFunc = "Lodging - Multipurpose assembly" ) .AND. IfValidAnd( Area < 1000 ) ) .OR.          
            ( IfValidAnd ( SpcFunc = "Convention, Conference, Multipurpose and Meeting Area" ) .AND. 
              IfValidAnd ( VentSpcFunc = "General - Conference/meeting" ) ) )
        then 2
        else 0
        endif 
      else 0
      endif
    else 0
    endif endif
  ANNUAL
   OccSensorCtrlDisp
ENDRULE

RULE Spc:BypassOccSensorCtrl
  DESCRIPTION
    "BypassOccupancySensorControl"
  HELP
    ""
  INPUTCLASS : T24N_2016
    NotInput
  INPUTCLASS
    CondRequired
  DEFAULT : T24N_2016 S901G
    0
  DEFAULT : T24N
    0
  SIZING_PROPOSED : T24N
    0
  ANNUAL_PROPOSED : T24N
    BypassOccSensorCtrl
ENDRULE

RULE Spc:OccSensorCtrl
  DESCRIPTION
    "Check to confirm that occupancy sensor ventilation devices are installed as per Section 120.1(d)5 for reporting only."
  HELP
    ""
  INPUTCLASS : T24N_2016
    NotInput
  INPUTCLASS
    CondRequired
  DEFAULT : T24N_2016 S901G
    0
  DEFAULT : T24N
    0
  CHECKCODE
    if ( ( IfValidAnd ( OccSensorCtrlDisp = 1 ) .OR. IfValidAnd ( OccSensorCtrlDisp = 2 ) ) .AND. OccSensorCtrl = 0 )
    then
      if ( IfValidAnd( Proj:DisableMandOccSensorCtrl = 1 ) .OR. IfValidAnd(BypassOccSensorCtrl = 1 ) ) 
      then UNCHANGED 
      else
        PostError("Space '%s' requires occupancy sensor ventilation devices as per Section 120.1(d)5.
                   Please confirm that occupancy sensor controls will be installed as per the 
                   requirements listed in Section120.1(d)5", Name)
      endif
    else UNCHANGED
    endif
  SIZING_PROPOSED : T24N
    0
  ANNUAL_PROPOSED : T24N
    OccSensorCtrl
ENDRULE

RULE NEW Spc:OccSensorCtrlCnt
  DESCRIPTION
    ""
  DATATYPE
    Integer
  INPUTCLASS
    NotInput
  DEFAULT : T24N
    if ( ( IfValidAnd ( OccSensorCtrlDisp = 1 ) .OR. IfValidAnd ( OccSensorCtrlDisp = 2 ) ) .AND. 
        IfValidAnd( OccSensorCtrl > 0 ) .AND. 
        IfValidAnd(BypassOccSensorCtrl = 0 ) )
    then 1
    else 0
    endif
  ANNUAL_PROPOSED : T24N
    if ( ( IfValidAnd ( OccSensorCtrlDisp = 1 ) .OR. IfValidAnd ( OccSensorCtrlDisp = 2 ) ) .AND.
        IfValidAnd( OccSensorCtrl > 0 ) .AND. 
        IfValidAnd(BypassOccSensorCtrl = 0 ) )
    then 1
    else 0
    endif
ENDRULE
