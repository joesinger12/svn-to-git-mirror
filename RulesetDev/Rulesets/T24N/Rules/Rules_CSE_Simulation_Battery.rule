; -------------------------------------------------------------------------
; Rules pertaining to:   Prep For Battery object of CSE Energy Simulation
; CEC Title-24 Nonresidential Energy Code  (ported from Res - SAC 7/16/18)
; -------------------------------------------------------------------------
; Copyright (c) 2012-2016, California Energy Commission
; Copyright (c) 2012-2016, Wrightsoft Corporation
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
; STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------


;*************************************************************************
RULELIST "CSE_SimulationPrep_Battery" 1 0 0 1
;   Rules which are executed immediately prior to performing a CSE simulation - covering BATTERY object only
;*************************************************************************

	"Create IMPORTFILE for any/all runs including a BATTERY"    Proj:CSE_ElecUseIMPORTFILE	=     ; added check to ensure E+ sim being performed at all b4 creating E+ results importfile - SAC 11/03/21 (MFam)
	   {  if (IfValidAnd( SimComFlag > 0 )==0) then  UNCHANGED
         else  CreateComp( cseIMPORTFILE, "EplusElecUseImportFile", "CSE_SimulationPrep_Battery_ImportFile" )  endif  }
	"Create GAIN to hold E+ elec use from IMPORTFILE (for BATTERY sim)"     Proj:Action =        ; SAC 11/03/21 (MFam)
	   {  if (IfValidAnd( SimComFlag > 0 )==0) then  UNCHANGED
         else  CreateComp( cseGAIN, "EplusElecUseGain", "CSE_SimulationPrep_Battery_Gain" )  endif  }

	"Create BATTERY (when called for)"  Batt:cseBATTERYRef	= {  CreateComp( cseBATTERY, Name + "-sim" )  }

   ; SAC 12/31/17 - added battery degradation
	"Set cseBATTERY:btMaxCap"		   Batt:cseBATTERYRef:btMaxCap		= {
	      if (IfValidAnd( DegradePct >= 1 ) .AND.
	          IfValidAnd( DegradePct <= 100 ))
	      then  MaxCap * DegradePct / 100
	      else  MaxCap  endif  }

	"Set cseBATTERY:btChgEff"		   Batt:cseBATTERYRef:btChgEff		= {	ChrgEff  }
	"Set cseBATTERY:btDschgEff"	   Batt:cseBATTERYRef:btDschgEff	   = {	DschrgEff  }
	"Set cseBATTERY:btMaxChgPwr"		Batt:cseBATTERYRef:btMaxChgPwr	= {	MaxChrgPwr  }
	"Set cseBATTERY:btMaxDschgPwr"	Batt:cseBATTERYRef:btMaxDschgPwr	= {	MaxDschrgPwr  }

;   "btChgReq",          BEMP_Flt,  1,  0,  1, "kW",               0,  0,                          3208, "The power request to charge (or discharge if negative) the battery"    
   ; SAC 12/17/17 - altered cseBATTERY:btChgReq_x to include TDVSummerPkFirstHr for TOU BatteryControl expression(tic #941)
   ; SAC 12/31/17 - replaced Adv DR Ctrl expression - was: Format( "select( $dsDay>0, 0, @Weather.tdvElecAvg>=8 && @Weather.tdvElec<=0.2*@Weather.tdvElecPk,-@METER[%cMtrElec%c].H.PV / 3412.142,\n\n   @Weather.tdvElecAvg>=8 && @Weather.tdvElec>10 && @Weather.tdvElec>0.2*@Weather.tdvElecPk,-%g, @Weather.tdvElec<@Weather.tdvElecAvg,\n\n   -min(@BATTERY[ 1].loadSeen, 0),Default -@BATTERY[ 1].loadSeen)", 34, 34, Proj:BattMaxDschgPwr )
   ; SAC 8/4/19 - removed Advanced DR (now handled internally by CSE) - was previously:
   ;                     Format( "select( $dsDay>0, 0, @Weather.tdvElecPk>10 && $hour != @weather.tdvElecHrRank[1] && $hour != @weather.tdvElecHrRank[2] && $hour != @weather.tdvElecHrRank[3] ,-@METER[%cMtrElec%c].H.PV / 3412.142,\n\n   @Weather.tdvElecPk>10 && ($hour == @weather.tdvElecHrRank[1] || $hour == @weather.tdvElecHrRank[2]) ,-1000,\n\n   @Weather.tdvElecPk>10 && $hour == @weather.tdvElecHrRank[3] ,-1.305 * %g, Default -@BATTERY[ 1].loadSeen)", 34, 34, CapRat )
	"Set cseBATTERY:btChgReq_x"	   Batt:cseBATTERYRef:btChgReq_x	   = {
      switch (Ctrl)
         case  "Basic" :
                        UNDEFINED
         case  "Time of Use" :
                        if (IfValidAnd( MaxDschrgPwr > 0 )==0 .OR. IfValidAnd( TDVSummerPkFirstHr > 0 )==0) then  UNDEFINED
                        else  Format( "select( $dsDay>0, 0, $month>6 && $month<10 && $hour<%g,-min(@BATTERY[ 1].loadSeen, 0),$month>6 && $month<10 && $hour>(%g-1),-1000, default -@BATTERY[ 1].loadSeen)",
                                       TDVSummerPkFirstHr, TDVSummerPkFirstHr )
                        endif
         case  "Advanced DR Control" :
                        UNDEFINED
         default   :    UNDEFINED
      endswitch  }
; likely not in future (was in res for testing/development)
;         case   99 :  ; "- specify -"
;                        if (GlobalStatus( Proj:BattChgReq_x ) < 1) then  UNDEFINED
;                        else if (strlen(  Proj:BattChgReq_x ) < 1) then  UNDEFINED
;                        else  Proj:BattChgReq_x
;                        endif endif
;         case  100 :  ; "Advanced Control"
;                        Format( "import(BTCtrlData,%cBatteryCharge%c)", 34, 34 )    ; ADVANCED CONTROL BATTERY CONTROL EXPRESSION
   ; SAC 8/4/19 - added btControlAlg_x to enable Advanced DR for new CSE simulation feature
   ; SAC 3/11/20 - added expression for 'Ranked Day DR Control' control option
	"Set cseBATTERY:btControlAlg_x"  Batt:cseBATTERYRef:btControlAlg_x	   = {
      switch (Ctrl)
         case  "Advanced DR Control" :
                        Format( "@Weather.tdvElecPk>%g ? %cTDVPeakSave%c : %cDefault%c", AdvBattTDVPkDayVal, 34, 34, 34, 34 )
         case  "Ranked Day DR Control" :
                        Format( "@Weather.tdvElecPkRank<=%g ? %cTDVPeakSave%c : %cDefault%c", ValidOr( NumRankedDays, 20 ), 34, 34, 34, 34 )
         default   :    UNDEFINED
      endswitch  }

; SAC 8/4/19 - REMOVE output of following property for New CSE battery sim
;	"Set cseBATTERY:btUseUsrChg"	   Batt:cseBATTERYRef:btUseUsrChg	   = {
;      if (LocalStatus( cseBATTERYRef:btChgReq_x ) < 1) then  UNDEFINED
;      else if (strlen( cseBATTERYRef:btChgReq_x ) < 1) then  UNDEFINED
;      else  "Yes"  endif endif  }
   ;   if (strlen( ValidOr( cseBATTERYRef:btChgReq_x, "1" ) ) < 2) then  UNDEFINED

;   "btUseUsrChg_x",     BEMP_Str,  1,  0,  1, "",                 0,  0,                          3208, "If YES/1, then the user specified btChgReq will be used to set the battery’s charge request; if NO/0, the default strategy will be used (expression)"

;   "btInitSOE",         BEMP_Flt,  1,  0,  1, "",                 0,  0,                          3208, "The initial state of energy of the BATTERY system as a fraction of the total capacity"
;   "btInitCycles",      BEMP_Flt,  1,  0,  1, "# cycles",         0,  0,                          3208, "The number of cycles on the battery at the beginning of the run"

   "Set cseBATTERY:btMeter"      Batt:cseBATTERYRef:btMeter = {
         if (GlobalCompAssigned( Proj:CSE_ElecMETER ))
         then  Proj:CSE_ElecMETER  else  UNDEFINED  endif  }

; to do
;; SAC 12/15/16 - create and setup CSE IMPORTFILE object used to support simulation of battery control (if needed)
;   ; SAC 8/4/19 - revised rule to no longer reference btUseUsrChg (which is no longer used)
;   "Create CSE IMPORTFILE object used to support simulation of battery control (if needed)"
;      Proj:BattCtrlImportFile = {
;         if (BatteryControl == 100 .OR. (BatteryControl == 99 .AND. LocalStatus( BattChgReq_x ) > 0))
;         then  CreateComp( cseIMPORTFILE, "BTCtrlData" )
;         else  UNDEFINED  endif  }
;   "Set Proj:BattCtrlImportFile:imFreq"      Proj:BattCtrlImportFile:imFreq     = {  "Hour"  }
;   "Set Proj:BattCtrlImportFile:imFileName"  Proj:BattCtrlImportFile:imFileName = {  "BT_CONTROL.CSV"  }    ; testing only - to be overwritten in source code

END
;*************************************************************************

;*************************************************************************
RULELIST "CSE_SimulationPrep_Battery_ImportFile" 1 0 0 1
   ; "Set cseIMPORTFILE:imFileName"   cseIMPORTFILE:imFileName = {    - CSV filename set in program source code
   "Set cseIMPORTFILE:imTitle"      cseIMPORTFILE:imTitle    = {  "EplusElecUse"  }   ; must be consistent w/ import file title listed in line 3 of file header
   "Set cseIMPORTFILE:imFreq"       cseIMPORTFILE:imFreq     = {  "Hour"  }
   "Set cseIMPORTFILE:imHeader"     cseIMPORTFILE:imHeader   = {  "Yes"  }
END
;*************************************************************************

;*************************************************************************
RULELIST "CSE_SimulationPrep_Battery_Gain" 1 0 0 1
   "Set cseGAIN:gnMeter"      cseGAIN:gnMeter      = {  Proj:CSE_ElecMETER  }
   "Set cseGAIN:gnEndUse"     cseGAIN:gnEndUse     = {  "User1"  }
   "Set cseGAIN:gnPower_x"    cseGAIN:gnPower_x    = {
         Format( "3412.14 * import( %c%s%c, %cEplusTotalKWH%c )", 34, Proj:CSE_ElecUseIMPORTFILE:Name, 34, 34, 34 )   }
         ;      <unit conversion, kWh -> Btu>  *  import(  <IMPORTFILE:imTitle>,  <Column Name from IMPORTFILE>  )
END
;*************************************************************************


;*************************************************************************
;*************************************************************************

ENDFILE
