// HVAC Secondary Systems - Fans - Exhaust
//
// -------------------------------------------------------------------------
//  Copyright (c) 2012-2017, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------


//  This rule file addresses the following building descriptors:

// Rules to determine proposed design exhaust system fan MtrHP
// For systems
// Sum MtrHP to AirSeg
RULE NEW AirSys:AirSeg:FanMtrHP
  DATATYPE
    Float
  LONGFORM
    FanMotorHP
  INPUTCLASS
    NotInput
  UNITS
    hp
  DEFAULT
    if( AirSys:IsExhSys > 0 )
    then SumChildren( Fan:MtrHP ) 
    else 0
    endif
ENDRULE
// Sum MtrHP to AirSys
RULE NEW AirSys:PropExhSysTotFanMtrHP
  DATATYPE
    Float
  LONGFORM
    ProposedExhaustSystemTotalFanMotorHP
  INPUTCLASS
    NotInput
  UNITS
    hp
  DEFAULT
    if( IsExhSys > 0 )
    then MaxChild( AirSeg:FanMtrHP ) 
    else 0
    endif
ENDRULE
// Sum MtrHP to ZnSys
RULE NEW ZnSys:PropExhSysTotFanMtrHP
  DATATYPE
    Float
  LONGFORM
    ProposedExhaustSystemTotalFanMotorHP
  INPUTCLASS
    NotInput
  UNITS
    hp
  DEFAULT
    if( IsExhSys > 0 )
    then SumChildren( Fan:MtrHP ) 
    else 0
    endif
ENDRULE
// Transfer MtrHP to ThrmlZn
RULE NEW ThrmlZn:PropExhSysTotFanMtrHP
  DATATYPE
    Float
  LONGFORM
    ProposedExhaustSystemTotalFanMotorHP
  DESCRIPTION
    "The total motor horsepower of proposed exhaust fan system."
  INPUTCLASS
    NotInput
  UNITS
    hp
  DEFAULT  
    if( ExhFlow > 0 )
    then 
      if( LocalCompAssigned( ExhSysRef ) )   
      then ExhSysRef:PropExhSysTotFanMtrHP
      else 0
      endif
    else UNDEFINED
    endif
  SIZING
    if( ExhFlow > 0 .AND. 
        IfValidAnd( PropExhSysTotFanMtrHP > 0 ) )
    then UNCHANGED
    else UNDEFINED
    endif
  ANNUAL  
    z:PropExhSysTotFanMtrHP
ENDRULE
// Define ExhSys total design flow at ThrmlZn
RULE NEW ThrmlZn:TotSysZnExhFlowSim
  DATATYPE
    Float
  LONGFORM
    TotalSystemZoneExhaustFlowSimulated
  DESCRIPTION
    "The total design exhaust air flow of the zones, for simulation, of the 
     exhaust system that serves the zone."
  INPUTCLASS
    NotInput
  UNITS
    cfm
  DEFAULT
    if( LocalCompAssigned( ExhSysRef ) )
    then // Exhaust fan capacity only
      ValidOr( ExhSysRef:SysExhFlow, 0 ) *
      ValidOr( ExhSysRef:Cnt, 0 )
    else 0
    endif
  SIZING
    if( ExhFlow > 0 .AND. 
        IfValidAnd( TotSysZnExhFlowSim > 0 ) )
    then UNCHANGED
    else UNDEFINED
    endif
  ANNUAL  
    z:TotSysZnExhFlowSim
ENDRULE
// Define ExhSys total code flow at ThrmlZn
RULE NEW ThrmlZn:TotSysZnCodeExhFlowSim
  DATATYPE
    Float
  LONGFORM
    TotalSystemZoneCodeExhaustFlowSimulated
  DESCRIPTION
    "The total code exhaust air flow of the zones, for simulation, of the 
     exhaust system that serves the zone."
  INPUTCLASS
    NotInput
  UNITS
    cfm
  DEFAULT
    if( LocalCompAssigned( ExhSysRef ) )
    then // Exhaust fan capacity only
      ValidOr( ExhSysRef:SysCodeExhFlow, 0 ) *
      ValidOr( ExhSysRef:Cnt, 0 )
    else 0
    endif
  SIZING
    if( ExhFlow > 0 .AND. 
        IfValidAnd( TotSysZnCodeExhFlowSim > 0 ) )
    then UNCHANGED
    else 0
    endif
  ANNUAL  
    z:TotSysZnCodeExhFlowSim
ENDRULE
// Determine whether the zone has an exhaust fan system 
// subject to the 140.4(c) prescriptive requiremt 
RULE NEW ThrmlZn:HasBaseHlthCareExh
  DATATYPE
    Integer
  LONGFORM
    HasBaselineHealthcareExhaust
  DESCRIPTION
    "Whether the zone includes healthcare facility and has an exhaust fan system
     subject to the 140.4(c) prescriptive fan power requiremt."
  INPUTCLASS
      NotInput
  SIZING
    if( RunAbbrev = "zb" .AND. LocalCompAssigned( ExhSysRef ) )
    then ExhSysRef:IsLrgHlthCareFanSys
    else 0
    endif
ENDRULE

// Identify at thermal zone whether the proposed lab system has anemometer or
// contaminant based controls. If so, fan power adjustment will be applied
RULE NEW ThrmlZn:ExhLabCtrlPwrIdxAdj
  DATATYPE
    Float
  LONGFORM
    ExhaustLaboratoryControlPowerIndexAdjustment
  DESCRIPTION
    "The amount of power adjustment for lab exhaust system controls."
  INPUTCLASS
    NotInput
  UNITS
    W/cfm
  DEFAULT
    if( LocalCompAssigned( ExhSysRef ) )
    then // Check for available control adjusments
      if( IfValidAnd( ExhSysRef:LabExhHasAnemometerCtrl > 0 ) )
      then 0.2
      else
      if( IfValidAnd( ExhSysRef:LabExhHasContaminantCtrl > 0 ) )
      then 0.2
      else 0 // No adjustments
      endif endif
    else 0
    endif
  ANNUAL
    if( LocalCompAssigned( ExhSysRef ) )
    then // Check for available control adjusments
      if( IfValidAnd( ExhSysRef:LabExhHasAnemometerCtrl > 0 ) )
      then 0.2
      else
      if( IfValidAnd( ExhSysRef:LabExhHasContaminantCtrl > 0 ) )
      then 0.2
      else 0 // No adjustments
      endif endif
    else 0
    endif
ENDRULE

// Zone exhaust fan flow eff for simulation
RULE NEW ThrmlZn:ExhFanFlowEff
  DATATYPE
    Float
  LONGFORM
    ExhaustFanFlowEfficiency
  DESCRIPTION
    "The fan efficiency of the exhaust fan at design conditions."  
  HELP
    "This efficiency term includes belt/drive losses, but does not include 
     motor losses."
  INPUTCLASS
    NotInput   
  DEFAULT
    if( ExhFlow > 0 )
    then // Use baseline assumptions
      if( IfValidAnd( LabArea > 0 ) )
      then 0.62
      else if( IfValidAnd( CommKitArea > 0 ) )
      then 0.5
      else 0.65 // Standard assumption for other systems
      endif endif
    else UNDEFINED
    endif
  ANNUAL
    if( ExhFlow > 0 )
    then
      if( BaseSysNum > 0 .AND. IsNewExh != 0 )
      then // Use baseline assumptions
        if( IfValidAnd( LabArea > 0 ) )
        then 0.62
        else if( IfValidAnd( CommKitArea > 0 ) )
        then 0.5
        else 0.65 // Standard assumption for other systems
        endif endif
      else // Healthcare facility baseline
      if( HasBaseHlthCareExh > 0 )
      then 0.65
      else ValidOr( ExhFanFlowEff, 0.65 )
      endif endif
    else UNCHANGED
    endif
ENDRULE

// Calculated normalized exhaust fan power for zone (W/cfm)
RULE NEW ThrmlZn:ExhSysPwrIdx
  DATATYPE
    Float
  LONGFORM
    ExhaustSystemPowerIndex
  DESCRIPTION
    "The exhaust system power per unit of flow for the proposed
     exhaust system that serves the zone."  
  INPUTCLASS
    NotInput
  UNITS
    W/cfm
  DEFAULT
    if( PropVentSysIsExh > 0 .AND. LocalCompAssigned( VentSysRef ) )
    then // Ventilation system is exhaust
      ValidOr( VentSysRef:ExhSysFanPwrIdx, 0 ) * ValidOr( VentSysRef:HRRFanPwrAdj, 1 )
    else // Other exhaust systems
    if( LocalCompAssigned( ExhSysRef ) )
    then ValidOr( ExhSysRef:ExhSysFanPwrIdx, 0 )
    else 0
    endif endif
  CHECKCODE
    if( HasUnknownHVAC = 0 .AND. ExhFlow > 0 .AND. LocalCompAssigned( ExhSysRef ) )
    then // Zone exhaust flow is > 0 cfm but there is no exhuast fan power
      if( ( IfValidAnd( ExhSysRef:Type = "DOASCV" ) .OR. IfValidAnd( ExhSysRef:Type = "DOASVAV" ) ) .AND.
          IfValidAnd( ExhSysRef:ExhFanPwr = 0 ) )
      then // Exhuast system is DOAS
        PostError("ThermalZone '%s' has a design exhaust flow > 0 and the exhaust system is a 
                   'DOAS', but the exhaust fan power is 0.", Name, ExhSysRef:Name)
      else
      if( IfValidAnd( ExhSysRef:IsExhSys > 0 ) .AND. IfValidAnd( ExhSysRef:ExhFanPwr = 0 ) )
      then // Exhaust system is 'Exhaust'
        PostError("ThermalZone '%s' has a design exhaust flow > 0, but the exhaust system '%s'
                   fan power is 0.", Name, ExhSysRef:Name)
      else UNCHANGED
      endif endif
    else UNCHANGED
    endif
  ANNUAL
    if( BaseSysNum > 0 .AND. IsNewExh != 0 .AND. ExhFlow > 0 )
    then
      if( CommKitArea > 0 )
      then // Commerical kitchen system has separate exhaust fan power allowance
        0.65
      else 
      if( LabArea > 0 ) 
      then
        if( Bldg:LabExhFlow > 10000 )
        then // Trigger lab exhaust fan power limit per 140.9(c)3
          if( IfValidAnd( ExhFiltersPwrAdj > 0 ) )
          then // Lab system has ExhFilters PD credit
            0.85
          else // Lab system has NO ExhFilters PD credit
            0.65
          endif
        else
        if( HasUnknownHVAC > 0 )
        then // Use 140.4(c) fan power allowance rules, but use ratio of zone flow to total at baseline system
          PriAirCondgSysRef[1]:BaseFanPwrWithAdj * PriAirCondgSysRef[1]:ExhFanPwrRat * 1000 *
          ZnToSysExhFlowRat / ExhFlow
        else // Use 140.4(c) fan power allowance rules
          PriAirCondgSysRef[1]:BaseFanPwrWithAdj * PriAirCondgSysRef[1]:ExhFanPwrRat * 1000 *
          ZnToSysPropExhFanPwrRat / ExhFlow
        endif endif
      else
      if( PrkgGarArea > 0 )
      then // Parking garage system. 
        if( HasUnknownHVAC > 0 )
        then // Set default fan power if HasUnknownHVAC is set
          if( ExhCtrlMthd = "COControl" )
          then 0.35 * 0.125 // Reduction for CO controls
          else 0.35
          endif
        else // Ticket 3061: Baseline parking fan power = proposed, use ExhSysPwrIdx
          ValidOr( ExhSysPwrIdx, 0 )
        endif
;      else
// Ticket 3040/3057: Baseline HRR ventilation to be same as proposed up to 1.20 W/cfm. 
// Rule used for 2019.1.2/1.3 release
;      if( BaseVentSysIsExh = 2 )
;      then // Baseline HRR vent is exhaust
;        if( PropResVentSysPwrIdx > 0 )
;        then // Min of proposed fan power or 1.20 W/cfm
;          Min( PropResVentSysPwrIdx, 1.20 )
;        else // Default assumption for HasUnknownHVAC > 0 or proposed = 0 W/cfm
;          ValidOr( ExhSysPwrIdx, 0.60 ) 
;        endif
      else
      if( BaseVentSysIsExh = 3 )
      then // Hotel/Motel Guestroom
        0.58
      else
      if( LocalCompAssigned( PriAirCondgSysRef[1] ) )
      then// Calculate baseline exahust fan power using 140.4(c) fan power allowance rules
          PriAirCondgSysRef[1]:BaseFanPwrWithAdj * PriAirCondgSysRef[1]:ExhFanPwrRat * 1000 *
          ZnToSysPropExhFanPwrRat / ExhFlow
      else // Same as proposed or 0.2
        Max( ValidOr( ap:ExhSysPwrIdx, 0 ), 0.2 ) 
      endif endif endif endif endif
    else
    if( HasBaseHlthCareExh > 0  )
    then // Healthcare facility baseline
      if( PropVentSysIsExh > 0 .AND. LocalCompAssigned( VentSysRef ) )
      then // Ventilation system is exhaust
        VentSysRef:ExhFanPwrIdxAllow
      else // Other exhaust systems
      if( LocalCompAssigned( ExhSysRef ) )
      then ExhSysRef:ExhFanPwrIdxAllow
      else 0
      endif endif
    else // Based on proposed 
    if( IfValidAnd( ExhSysPwrIdx > 0 ) )
    then // Make adjustments to proposed exhaust fan power based on controls
      if( PrkgGarArea > 0 .AND. ExhCtrlMthd = "COControl" )
      then // Reduction for CO controls
        ExhSysPwrIdx * 0.125 // Reduction for CO controls
      else
      if( LabArea > 0 )
      then // Adjust lab exhaust fan power for applicable controls
        ExhSysPwrIdx - ExhLabCtrlPwrIdxAdj
      else // No adjustment to proposed
        ExhSysPwrIdx
      endif endif
    else 
    if( ExhFlow > 0 )
    then 0.2 // Nominal W/cfm for non-compliance exhaust 
    else 0
    endif endif endif endif
ENDRULE

// ********** Baseline Fan Mtr Size ********************************************
// For standard design using PwrIdx to describe fan power, which includes influence of MtrEff,
// determining the motor size and corresponding efficinecy is an iterative process. The
// rule steps below establish this iteration.
RULE NEW ThrmlZn:ExhFanMtrBHPStart
  DATATYPE
    Float
  LONGFORM
    ExhaustFanMotorBrakeHorsePowerStart
  ANNUAL
    if( ( BaseSysNum > 0 .AND. IsNewExh != 0 .AND. ExhFlow > 0 ) .OR.
        ( HasBaseHlthCareExh > 0 .AND. ExhFlow > 0  ) )
    then ExhFlow * ExhSysPwrIdx / 745.6  
    else UNCHANGED
    endif
ENDRULE
RULE NEW ThrmlZn:ExhFanMtrHPIdxStart
  DATATYPE
    Integer
  LONGFORM
    ExhaustFanMotorMotorHorsePowerIndexStart
  ANNUAL
    if( ( ( BaseSysNum > 0 .AND. IsNewExh != 0 .AND. ExhFlow > 0 ) .OR.
          ( HasBaseHlthCareExh > 0 .AND. ExhFlow > 0  ) ) .AND.
        IfValidAnd( ExhFanMtrBHPStart > 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", ExhFanMtrBHPStart)  
    else UNCHANGED
    endif
ENDRULE
RULE NEW ThrmlZn:ExhFanMtrEffStart
  DATATYPE
    Float
  LONGFORM
    ExhaustFanMotorEfficiencyStart
  ANNUAL
    if( ( ( BaseSysNum > 0 .AND. IsNewExh != 0 .AND. ExhFlow > 0 ) .OR.
          ( HasBaseHlthCareExh > 0 .AND. ExhFlow > 0  ) ) .AND.
        IfValidAnd( ExhFanMtrHPIdxStart > 0 ) )
    then StdElecMtrPerf:MotorEfficiency("MotorHPIndex", ExhFanMtrHPIdxStart)  
    else UNCHANGED
    endif
ENDRULE
RULE NEW ThrmlZn:ExhFanMtrBHPGuess1
  DATATYPE
    Float
  LONGFORM
    ExhaustFanMotorBrakeHorsePowerGuess1
  ANNUAL
    if( ( ( BaseSysNum > 0 .AND. IsNewExh != 0 .AND. ExhFlow > 0 ) .OR.
          ( HasBaseHlthCareExh > 0 .AND. ExhFlow > 0  ) ) .AND.
        IfValidAnd( ExhFanMtrBHPStart > 0 ) .AND.
        IfValidAnd( ExhFanMtrEffStart > 0 ) )
    then ExhFanMtrBHPStart * ExhFanMtrEffStart
    else UNCHANGED
    endif
ENDRULE
RULE NEW ThrmlZn:ExhFanMtrHPIdxGuess1
  DATATYPE
    Integer
  LONGFORM
    ExhaustFanMotorMotorHorsePowerIndexGuess1
  ANNUAL
    if( ( ( BaseSysNum > 0 .AND. IsNewExh != 0 .AND. ExhFlow > 0 ) .OR.
          ( HasBaseHlthCareExh > 0 .AND. ExhFlow > 0 ) ) .AND.
        IfValidAnd( ExhFanMtrBHPGuess1 > 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", ExhFanMtrBHPGuess1)  
    else UNCHANGED
    endif
ENDRULE
RULE NEW ThrmlZn:ExhFanMtrEffGuess1
  DATATYPE
    Float
  LONGFORM
    ExhaustFanMotorEfficiencyGuess1
  ANNUAL
    if( ( ( BaseSysNum > 0 .AND. IsNewExh != 0 .AND. ExhFlow > 0 ) .OR.
          ( HasBaseHlthCareExh > 0 .AND. ExhFlow > 0  ) ) .AND.
        IfValidAnd( ExhFanMtrHPIdxGuess1 > 0 ) )
    then StdElecMtrPerf:MotorEfficiency("MotorHPIndex", ExhFanMtrHPIdxGuess1)  
    else UNCHANGED
    endif
ENDRULE
RULE NEW ThrmlZn:ExhFanMtrHPIdxFinal
  DATATYPE
    Integer
  LONGFORM
    ExhaustFanMotorMotorHorsePowerIndexFinal
  ANNUAL
    if( ( ( BaseSysNum > 0 .AND. IsNewExh != 0 .AND. ExhFlow > 0 ) .OR.
          ( HasBaseHlthCareExh > 0 .AND. ExhFlow > 0  ) ) .AND.
        IfValidAnd( ExhFanMtrHPIdxGuess1 > 0 ) )
    then ExhFanMtrHPIdxGuess1
    else UNCHANGED
    endif
ENDRULE
RULE NEW ThrmlZn:ExhFanMtrEffFinal
  DATATYPE
    Float
  LONGFORM
    ExhaustFanMotorEfficiencyStart
  ANNUAL
    if( ( ( BaseSysNum > 0 .AND. IsNewExh != 0 .AND. ExhFlow > 0 ) .OR.
          ( HasBaseHlthCareExh > 0 .AND. ExhFlow > 0  ) ) .AND.
        IfValidAnd( ExhFanMtrEffGuess1 > 0 ) )
    then ExhFanMtrEffGuess1
    else UNCHANGED
    endif
ENDRULE

RULE NEW ThrmlZn:ExhFanMtrPerfIdx
  DATATYPE
    Integer
  LONGFORM
    ExhaustFanMotorPerformanceIndex
  DESCRIPTION
    "The index of motor size according to a list of standard sizes."
  INPUTCLASS
    NotInput
  DEFAULT
    if( ExhFlow > 0 )
    then
      if( IfValidAnd( PropExhSysTotFanMtrHP > 0 ) ) 
      then // Use proposed motor HP.  This won't work perfectly for AirSys with 2 motors of different MtrHP.
        StdElecMtrSize:MotorHPIndex( "InputMotorHP", PropExhSysTotFanMtrHP )
      else
        StdElecMtrSize:MotorHPIndex( "InputMotorHP", ExhSysPwrIdx * ExhFlow / 745.6 )
      endif
    else UNDEFINED
    endif 
  ANNUAL
    if( ExhFlow > 0 )
    then
      if( ( ( BaseSysNum > 0 .AND. IsNewExh != 0 ) .OR.
            ( HasBaseHlthCareExh > 0 .AND. ExhFlow > 0  ) ) .AND. 
          IfValidAnd( ExhFanMtrHPIdxFinal > 0 ) )
      then ExhFanMtrHPIdxFinal
      else 
      if( IfValidAnd( PropExhSysTotFanMtrHP > 0 ) ) 
      then // Use proposed motor HP.  This won't work perfectly for AirSys with 2 motors of different MtrHP.
        StdElecMtrSize:MotorHPIndex( "InputMotorHP", PropExhSysTotFanMtrHP )
      else
        StdElecMtrSize:MotorHPIndex( "InputMotorHP", ExhSysPwrIdx * ExhFlow / 745.6 )
      endif endif
    else UNCHANGED
    endif     
ENDRULE

RULE NEW ThrmlZn:ExhFanMtrEff
  DATATYPE
    Float
  LONGFORM
    ExhaustFanMotorEfficiency
  DESCRIPTION
    "Indicates how well the motor converts electrical power into mechanical power
     and is defined as output power divided by input power expressed as a ratio."
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( ExhFanMtrPerfIdx > 0 ) )
    then 
      StdElecMtrPerf:MotorEfficiency( "MotorHPIndex", ExhFanMtrPerfIdx ) 
    else UNDEFINED
    endif
  ANNUAL
    if( IfValidAnd( ExhFanMtrPerfIdx > 0 ) )
    then 
      StdElecMtrPerf:MotorEfficiency( "MotorHPIndex", ExhFanMtrPerfIdx ) 
    else UNCHANGED
    endif   
ENDRULE

RULE ThrmlZn:ExhTotEff
  DESCRIPTION
    "The total efficiency of the fan. It is the product of the flow (fan) and 
     motor efficiency, for simulation."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IfValidAnd( ExhFlowSim > 0 ) .AND.
        IfValidAnd( ExhFanFlowEff > 0 ) .AND.
        IfValidAnd( ExhFanMtrEff > 0 ) )
    then ExhFanFlowEff * ExhFanMtrEff
    else UNDEFINED
    endif 
  ANNUAL
    if( IfValidAnd( ExhFlowSim > 0 ) .AND.
        IfValidAnd( ExhFanFlowEff > 0 ) .AND.
        IfValidAnd( ExhFanMtrEff > 0 ) )
    then ExhFanFlowEff * ExhFanMtrEff
    else UNDEFINED
    endif 
ENDRULE

RULE NEW ThrmlZn:ExhFanMtrBHP
  DATATYPE
    Float
  LONGFORM
    ExhaustFanMotorBrakeHorsePower
  DESCRIPTION
    "The design motor shaft brake horsepower of the exhaust fan."  
  HELP
    "The motor brake horse power is the power at the motor shaft, including fan
     and drive efficiencies." 
  INPUTCLASS
    NotInput
  DEFAULT
    if( ExhFlow > 0 .AND.
        IfValidAnd( ExhSysPwrIdx > 0 ) .AND.
        IfValidAnd( ExhFanMtrEff > 0 ) )
    then
      ExhSysPwrIdx * ExhFlow * ExhFanMtrEff / 745.6 
    else 0
    endif
  ANNUAL
    if( ExhFlow > 0 .AND.
        IfValidAnd( ExhSysPwrIdx > 0 ) .AND.
        IfValidAnd( ExhFanMtrEff > 0 ) )
    then
      ExhSysPwrIdx * ExhFlow * ExhFanMtrEff / 745.6 
    else 0
    endif
ENDRULE

RULE ThrmlZn:ExhTotStaticPress
  DESCRIPTION
    "The total static pressure drop across the exhaust fan at design conditions."  
  INPUTCLASS 
    NotInput
  UNITS
    inchesH2O 
  DEFAULT
    if( IfValidAnd( ExhFlowSim > 0 ) .AND.
        IfValidAnd( ExhSysPwrIdx > 0 ) .AND.
        IfValidAnd( ExhTotEff > 0 ) )
    then ExhSysPwrIdx * ExhTotEff / 0.1175 
    else UNDEFINED
    endif
  SIZING
    if( IfValidAnd( ExhFlowSim > 0 ) .AND. BaseSysNum > 0 .AND. IsNewExh != 0 )
    then // Fan power is set to near 0 for sizing.
      0 // Was 0.00001 since previously using 0 could cause E+ sim failures. See GC 618 for background
    else
    if( IfValidAnd( ExhFlow > 0 ) )
    then ExhTotStaticPress
    else UNDEFINED
    endif endif
  ANNUAL
    if( IfValidAnd( ExhFlowSim > 0 ) .AND.
        IfValidAnd( ExhSysPwrIdx > 0 ) .AND.
        IfValidAnd( ExhTotEff > 0 ) )
    then ExhSysPwrIdx * ExhTotEff / 0.1175 
    else UNDEFINED
    endif
ENDRULE

// Summary calculations
// Total zone exhaust fan power
RULE NEW ThrmlZn:ExhPwrSim
  DATATYPE
    Float
  LONGFORM
    ExhaustPowerSimulated
  DESCRIPTION
    "The simulated exhaust fan power."
  UNITS
    kW
  ANNUAL
    if( IfValidAnd( ExhFlowSim > 0 ) .AND. 
        IfValidAnd( ExhTotEff > 0 ) .AND.
        IfValidAnd( ExhTotStaticPress > 0 ) )
    then ExhFlowSim * ExhTotStaticPress * 0.1175 / ExhTotEff / 1000
    else 0
    endif
ENDRULE
// Total zone exhaust fan power per flow
RULE NEW ThrmlZn:ExhPwrIdxSim
  DATATYPE
    Float
  LONGFORM
    ExhaustPowerIndexSimulated
  DESCRIPTION
    "The simulated exhaust fan power per flow."
  UNITS
    W/cfm
  ANNUAL
    if( IfValidAnd( ExhFlowSim > 0 ) )
    then ExhPwrSim * 1000 / ExhFlowSim
    else 0
    endif
ENDRULE

// ---------- Simulation Properties --------------------------------------------
RULE ThrmlZn:ExhFanName
  DESCRIPTION
    "The name of the zone exhaust fan, used for simulation. In E+, the name of
     the Fan:ZoneExhaust component."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IfValidAnd( ExhFlowSim > 0 ) )
    then Format("%s PropExhFan", Name)
    else UNDEFINED
    endif
  SIZING_PROPOSED
    if( IfValidAnd( ExhFlowSim > 0 ) )
    then Format("%s PropExhFan", Name)
    else UNDEFINED
    endif 
  SIZING_BASELINE
    if( IfValidAnd( ExhFlowSim > 0 ) )
    then
      if( BaseSysNum > 0 .AND. ExhFlowSim > 0 )
      then Format("%s BaseExhFan", Name)
      else zp:ExhFanName
      endif  
    else UNDEFINED
    endif
ENDRULE

RULE ThrmlZn:ExhFanEndUseCat 
  DESCRIPTION
    "Defines an EnergyPlus end use subcategory for process motors.  This is 
     currently only associated with exhaust fans serving unconditioned spaces"
  INPUTCLASS 
    NotInput
  OPTION
    General         
    ProcessMotors
  DEFAULT 
    if( IfValidAnd( ExhFlowSim > 0 ) )
    then 
      if( Type = "Unconditioned" )
      then "ProcessMotors"
      else "General"
      endif
    else UNDEFINED
    endif
  SIZING
    if( IfValidAnd( ExhFlowSim > 0 ) )
    then 
      if( Type = "Unconditioned" )
      then "ProcessMotors"
      else "General"
      endif
    else UNDEFINED
    endif
  ANNUAL
    if( IfValidAnd( ExhFlowSim > 0 ) )
    then 
      if( Type = "Unconditioned" )
      then "ProcessMotors"
      else "General"
      endif
    else UNDEFINED
    endif  
ENDRULE


 