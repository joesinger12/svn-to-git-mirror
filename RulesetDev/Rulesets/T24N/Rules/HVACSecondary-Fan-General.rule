// HVAC Secondary Systems - Fans - General
//
// -------------------------------------------------------------------------
//  Copyright (c) 2013-2017, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------


// ParentComponent set to property of local component, for screen rules
RULE Fan:ParentComp
  DESCRIPTION
    "ComponentType of Parent; used for screen edit rules and conditional enums."
  INPUTCLASS 
    NotInput 
; OPTION - Defined in BEMEnums, for reference
;   None
;   AirSys
;   ZnSys
;   TrmlUnit
  DEFAULT
    if( ParentComponentType() = "AirSeg" )
    then "AirSys"
    else ParentComponentType()
    endif
  SIZING
    if( ParentComponentType() = "AirSeg" )
    then "AirSys"
    else ParentComponentType()
    endif
ENDRULE

// Echo system count for reference in UI and capacity/efficiency adjustment rules
RULE Fan:SysCnt
  DESCRIPTION
    "Echo of Air/System:Count, or if the Coil parent is a TerminalUnit, the 
     SystemCount is TerminalUnit:SystemCount * TerminalUnit:Count."
  HELP
    "The number of duplicate systems can only be > 1 when all attributes of 
     the system are the same.  If Count is specified to be > 1, all parameters
     (capacities, power, etc) should be specified for the single piece of equipment.
     The ruleset will apply multipliers for the final simulation."
  INPUTCLASS 
    NotInput 
  REPORTPRECISION
    0
  DEFAULT
    if( ParentComp = "AirSys" )
    then // AirSystem
      AirSys:Cnt
    else if( ParentComp = "ZnSys" )
    then // ZoneSystem
      ZnSys:Cnt
    else if( ParentComp = "TrmlUnit" )
    then // TerminalUnit
      TrmlUnit:SysCnt
    else 0
    endif endif endif
  SIZING
    if( ParentComp = "AirSys" )
    then // AirSystem
      AirSys:Cnt
    else if( ParentComp = "ZnSys" )
    then // ZoneSystem
      ZnSys:Cnt
    else if( ParentComp = "TrmlUnit" )
    then // TerminalUnit
      TrmlUnit:SysCnt
    else 0
    endif endif endif
  ANNUAL
    z:SysCnt
ENDRULE

// -----------------------------------------------------------------------------
// SystemType set to property of local component, for screens, rules etc
RULE NEW Fan:SysType
  DATATYPE
    String
  LONGFORM
    SystemType
  DESCRIPTION
    "Type of Parent; used for system type specific rules and conditional enums."
  INPUTCLASS 
    NotInput 
  DEFAULT
    if( ParentComp = "AirSys" )
    then AirSys:Type
    else if( ParentComp = "ZnSys" )
    then ZnSys:Type
    else if( ParentComp = "TrmlUnit" )
    then TrmlUnit:Type
    else "NA"
    endif endif endif
  SIZING
    if( ParentComp = "AirSys" )
    then AirSys:Type
    else if( ParentComp = "ZnSys" )
    then ZnSys:Type
    else if( ParentComp = "TrmlUnit" )
    then TrmlUnit:Type
    else "NA"
    endif endif endif
ENDRULE

// -----------------------------------------------------------------------------
// Set IsDummy flag for all components
RULE Fan:IsDummy
  INPUTCLASS
    NotInput
  DEFAULT
    0
  SIZING
    if( LocalStatus( IsDummy ) = 0 )
    then 0
    else UNCHANGED
    endif
  ANNUAL
    z:IsDummy
ENDRULE

// -----------------------------------------------------------------------------
// BypassCheck set to property of local component, for screens, rules etc
RULE NEW Fan:BypassCheckCode
  DATATYPE
    Integer
  DESCRIPTION
    "A flag that indicates CHECKCODE rules should be bypassed for the object."
  INPUTCLASS 
    NotInput 
  DEFAULT
    if( ParentComp = "ZnSys" )
    then ZnSys:BypassCheckCode
    else AirSys:BypassCheckCode
    endif
ENDRULE
RULE NEW Fan:BypassCheckSim
  DATATYPE
    Integer
  DESCRIPTION
    "A flag that indicates CHECKSIM rules should be bypassed for the object."
  INPUTCLASS 
    NotInput 
  DEFAULT
    if( ParentComp = "ZnSys" )
    then ZnSys:BypassCheckSim
    else AirSys:BypassCheckSim
    endif
ENDRULE


// ********** Status ***********************************************************
RULE Fan:Status
  DESCRIPTION
    "The status of the system or component, used for additions and alterations."
  INPUTCLASS 
    NotInput
; OPTION
;   * Defined in BEMEnums, shown here for reference. Default is 'New' 
;   New
;   Existing 
  DEFAULT
// Status defined from top-down. If parent system is 'New;, 'Altered', or 
// 'Existing' with hydronic coils served by a new plant, the 
//  the fan is 'New'.
    if( Parent( IsNew ) ) then "New" else "Existing" endif
// SIZING and ANNUAL rules not used; status of any new objects created by rules 
// is defined by BEMEnums default
ENDRULE

RULE NEW Fan:IsNew
  DATATYPE
    Integer
  INPUTCLASS
    NotInput
  DEFAULT
    if( Status = "New" ) then 1 else 0 endif
  SIZING : T24N
    if( Status = "New" ) then 1 else 0 endif
  SIZING : S901G ECBC
    if( Status = "New" .AND. Parent( IsNew ) = 1 ) then 1 else 0 endif
  ANNUAL
    z:IsNew    
ENDRULE

RULE NEW Fan:IsExisting
  DATATYPE
    Integer
  INPUTCLASS
    NotInput
  DEFAULT
    if( IsNew ) then 0 else 1 endif
  SIZING
    if( IsNew ) then 0 else 1 endif
  ANNUAL
    z:IsExisting
ENDRULE


// ********** Classification and Centrifugal Type ******************************
RULE Fan:Class
  DESCRIPTION
    "The classification of the fan design."  
  REFERENCE 
    NACM Section 5.7.3.2    
  INPUTCLASS
    Default
  OPTION
    Centrifugal
    Axial
  DEFAULT
    "Centrifugal"
  SIZING
    if( BaseSysNum > 0 )
    then "Centrifugal"
    else ValidOr( Class, "Centrifugal" )
    endif
  ANNUAL
    z:Class
ENDRULE

RULE Fan:CentType
  DESCRIPTION
    "The type of blade type used in a centrifugal fan."  
  REFERENCE 
    NACM Section 5.7.3.2    
  INPUTCLASS
    Default
  OPTION
    AirFoil
    BackwardInclined
    ForwardCurved
  DEFAULT
    if( Class = "Centrifugal" )
    then "AirFoil"
    else UNDEFINED
    endif
  SIZING
    if( BaseSysNum > 0 )
    then "AirFoil"
    else ValidOr( CentType, "AirFoil" )
    endif
  ANNUAL
    z:CentType
ENDRULE


// ********** Supply Fan Sizing Ratio ******************************************
RULE NEW Fan:SizingRat
  DATATYPE
    Float
  LONGFORM
    SizingRatio
  DESCRIPTION
    "Multiplier used to adjust the fan capacity"
  REFERENCE 
    NACM Section 5.7.5.1
  INPUTCLASS 
    Prescribed        
  COMMONMINIMUM
    1.0
  COMMONMAXIMUM
    1.25
  SIZING 
    1.0
  ANNUAL : T24N
    if( ( BaseSysNum = 1 .OR. 
          BaseSysNum = 3 .OR.
          BaseSysNum = 5 .OR.
          BaseSysNum = 7 .OR. 
          BaseSysNum = 10 .OR. // These were excluded prior to v3.0
          BaseSysNum = 11 .OR. // These were excluded prior to v3.0        
          BaseSysNum = 12 .OR.
          BaseSysNum = 13  ) .AND.
        IfValidAnd( IsDummy = 0 ) )
    then
    // Cooling sizing ratio applied to system fan flow of DX systems to ensure 
    // total system air flow is consistent with oversized cooling capacity   
      Proj:ClgSizingRat
    else 1.0
    endif
  ANNUAL : S901G ECBC
    if( BaseSysNum <= 6 )
    then
    // Cooling sizing ratio applied to system fan flow of DX systems to ensure 
    // total system air flow is consistent with oversized cooling capacity   
      Proj:ClgSizingRat
    else 1.0
    endif
ENDRULE


// ********** Supply Fan Design Air Rated Capacity *****************************
// Intermediate calculation of maximum system air flow capacity
// =========================== AirSystem =======================================
RULE NEW AirSys:TotTrmlPriAirFlowMaxSim
  DATATYPE
    Float
  LONGFORM
    TotalTerminalPrimaryAirFlowMaximumSimulated
  DESCRIPTION
    "The total maximum primary air flow of all terminal units connected to the AirSystem."
  INPUTCLASS 
    NotInput         
  UNITS 
    cfm
  DEFAULT
    SumChildren( TrmlUnit:PriAirFlowMaxSim )
  SIZING
    SumChildren( TrmlUnit:PriAirFlowMaxSim ) 
  ANNUAL
    SumChildren( TrmlUnit:PriAirFlowMaxSim )  
ENDRULE
// Intermediate calculation of minimum system air flow (AirSys only)
RULE NEW AirSys:TotTrmlPriAirFlowMinSim
  DATATYPE
    Float
  LONGFORM
    TotalTerminalPrimaryAirFlowMinimumSimulated
  DESCRIPTION
    "The total minimum primary air flow of all terminal units connected to the AirSystem."
  INPUTCLASS 
    NotInput         
  UNITS 
    cfm
  DEFAULT
    SumChildren( TrmlUnit:PriAirFlowMinSim )    
  SIZING
    SumChildren( TrmlUnit:PriAirFlowMinSim )  
  ANNUAL
    SumChildren( TrmlUnit:PriAirFlowMinSim )  
ENDRULE
// Fan capacities
RULE AirSys:AirSeg:Fan:FlowCap
  DESCRIPTION
    "The maximum air flow rate of an AirSystem fan at design conditions."  
  HELP
    "This building descriptor sets the 100% point for the fan part-load curve.  
     This input should be at least as great as the sum of the design air flow 
     specified for each of the thermal zones that are served by the fan system.
     For multiple deck systems, a separate entry should be made for each deck."
  REFERENCE 
    NACM Section 5.7.3.2    
  INPUTCLASS
    Required
  UNITS 
    cfm
  REPORTPRECISION
    0
  DEFAULT : T24N
    if( AirSys:IsExhSys > 0 )
    then ValidOr( AirSys:SysExhFlow, 0 )
    else
    if( Proj:AutoHardSize = 1 )
    then // For PROPOSED AutoHardSizing only
      if( AirSeg:Type = "Supply" .OR. AirSeg:Type = "DualDuctSplitter" )
      then
        if( Proj:IsStdModel > 0 .AND. Proj:ModelName != "" )
        then UNCHANGED // TableSizing is used, see Project-TableSizing rules
        else
        if( AirSys:Type = "DOASCV" .OR. AirSys:Type = "DOASVAV" )
        then // Take max of total terminal flow or total vent flow
          Max( AirSys:TotTrmlPriAirFlowMaxSim / SysCnt, AirSys:SysVentFlow )
        else
        if( AirSys:IsSglZnSys .AND. 
            CtrlMthd = "ConstantVolume" .AND.
            ValidOr( AirSys:NumTrmlUnitAllTypes, 0 ) / SysCnt = 1 .AND.
            Proj:IsStdModel = 0 )
        then // Is SZ system with only 1 TrmlUnit, use supply Fan:FlowCap
          AirSys:AirFlowPerSqFt * AirSys:TotCondFlrArea
        else // Is multi-zone, take max of total terminal flow or total vent flow
          Max( AirSys:TotTrmlPriAirFlowMaxSim / SysCnt, AirSys:SysVentFlow )
        endif endif endif
      else
      if( AirSeg:Type = "Return" .OR. 
          AirSeg:Type = "Relief" .OR. 
          AirSeg:Type = "Exhaust" )
      then
        if( Proj:IsStdModel > 0 .AND. Proj:ModelName != "" )
        then UNCHANGED // TableSizing is used, see Project-TableSizing rules
        else
        if( AirSys:Type = "DOASCV" .OR. AirSys:Type = "DOASVAV" )
        then // Is DOAS, set balanced
          ValidOr( AirSys:SupFanCap, 0 ) 
        else // Set ret fan cap to be less than supply for pressurization
          Max( ValidOr( AirSys:DsgnReliefFlow, 0 ) - 
              ( AirSys:TotCondFlrArea * 0.05 ), 0 )
        endif endif
      else 0
      endif endif
    else // Standard default rules
    if( AirSeg:Type = "Supply" .AND.
        AirSys:IsSglZnSys .AND.  
        CtrlMthd = "ConstantVolume" .AND.
        ValidOr( AirSys:NumTrmlUnitAllTypes, 0 ) / SysCnt = 1 )
    then // Is SZ system with one terminal unit
      Max( AirSys:TotTrmlPriAirFlowMaxSim / SysCnt, AirSys:SysVentFlow )
    else 0
    endif endif endif
  DEFAULT : S901G ECBC
    if( AirSys:IsExhSys > 0 )
    then ValidOr( AirSys:SysExhFlow, 0 )
    else
    if( Proj:AutoHardSize = 1 )
    then // For PROPOSED AutoHardSizing only
      if( AirSeg:Type = "Supply" .OR. AirSeg:Type = "DualDuctSplitter" )
      then
        if( Proj:IsStdModel > 0 .AND. Proj:ModelName != "" )
        then UNCHANGED // TableSizing is used, see Project-TableSizing rules
        else
        if( AirSys:IsSglZnSys .AND. 
            CtrlMthd = "ConstantVolume" .AND.
            ValidOr( AirSys:NumTrmlUnitAllTypes, 0 ) / SysCnt = 1 )
        then // Is SZ system with only 1 TrmlUnit, use supply Fan:FlowCap
          AirSys:AirFlowPerSqFt * AirSys:TotCondFlrArea
        else 
          Max( AirSys:TotTrmlPriAirFlowMaxSim / SysCnt, AirSys:SysVentFlow )
        endif endif
      else if( AirSeg:Type = "Return" .OR. AirSeg:Type = "Relief" )
      then
        if( Proj:IsStdModel > 0 .AND. Proj:ModelName != "" )
        then UNCHANGED // TableSizing is used, see Project-TableSizing rules
        else ValidOr( AirSys:DsgnRetFlow, 0 )
        endif
      else 0
      endif endif
    else // Standard default rules
    if( AirSeg:Type = "Supply" .AND.
        AirSys:IsSglZnSys .AND.  
        CtrlMthd = "ConstantVolume" .AND.
        ValidOr( AirSys:NumTrmlUnitAllTypes, 0 ) / SysCnt = 1 )
    then // Is SZ system with one terminal unit
      Max( AirSys:TotTrmlPriAirFlowMaxSim / SysCnt, AirSys:SysVentFlow )
    else 0
    endif endif endif
  CHECKSIM
    if( BypassCheckSim > 0)
    then UNCHANGED
    else
    if( AirSys:IsExhSys = 0 .AND.
        AirSeg:Type = "Supply" .AND. 
        LocalStatus( FlowCap ) > 0 .AND.
        IfValidAnd( u:Proj:HVACAutoSizing = 0 ) .AND. 
        SysCnt > 0 )
    then
      if( AirSys:IsSglZnSys .AND. 
          AirSys:TotTrmlPriAirFlowMaxSim / SysCnt * 0.97 > FlowCap ) 
      then // Sum of TerminalUnit:PrimaryAirFlow is GT supply fan flow
        PostWarning("Total maximum primary air flow of terminal units served by
                     AirSystem '%s' is %.0f, which is greater than the supply fan flow
                     capacity, %.0f.", 
                     AirSys:Name, AirSys:TotTrmlPriAirFlowMaxSim / SysCnt, FlowCap ) 
      else
      if( AirSys:IsSglZnSys .AND. 
          AirSys:TotTrmlPriAirFlowMaxSim / SysCnt * 1.03 < FlowCap ) 
      then // Sum of TerminalUnit:PrimaryAirFlow is LT supply fan flow
        PostWarning("Total maximum primary air flow of terminal units served by
                     AirSystem '%s' is %.0f, which is less than the supply fan flow
                     capacity, %.0f.", 
                     AirSys:Name, AirSys:TotTrmlPriAirFlowMaxSim / SysCnt, FlowCap ) 
      else
      if( AirSys:TotTrmlPriAirFlowMaxSim / SysCnt * 1.3 < FlowCap .OR.
          AirSys:TotTrmlPriAirFlowMaxSim / SysCnt * 0.7 > FlowCap ) 
      then // Sum of TerminalUnit:PrimaryAirFlow is LT supply fan flow
        PostWarning("Total maximum primary air flow of AirSystem '%s' terminal
                     units differs by more than 30% from the supply fan capacity.", 
                     AirSys:Name ) 
      else UNCHANGED
      endif endif endif
    else UNCHANGED
    endif endif
  SIZING
    if( BaseSysNum > 0 )
    then 0
    else
    if( IfValidAnd( AirSys:IsPropVentOnlySys > 0 ) )
    then // Set supply/return fan flow cap equal to SysVentFlow
      AirSys:SysVentFlow 
    else FlowCap
    endif endif
  ANNUAL
    if( BaseSysNum > 0 .AND. SysCnt > 0 )
    then
      if( BaseSysNum > 100 )
      then // AirSys (DOAS) VentSys, applies to Fan:FlowCap of supply/return fan
        AirSys:SysVentFlow
      else
      if( AirSys:IsMultiZnSys = 1 )
      then // Use E+ fan sizing
        if( AirSys:SysVentFlow > ValidOr( z:FlowCapSim, 0 ) / SysCnt * ( 1 - Proj:OATolLim ) )
        then // System ventilation flow is >= E+ sized capacity, use max of vent flow or E+ fan size
          Max( AirSys:SysVentFlow, ValidOr( z:FlowCapSim, 0 ) / SysCnt )
        else // Use E+ coincident sized flow capacity and adjust by sizing ratio 
          ValidOr( z:FlowCapSim, 0 ) / SysCnt * SizingRat
        endif
      else // Is single-zone system, sizing ratio applied at TrmlUnit:PriAirFlowMax
        ValidOr( AirSys:TotTrmlPriAirFlowMaxSim, 0 ) / SysCnt
      endif endif
    else z:FlowCap
    endif
ENDRULE
// =========================== ZoneSystem ======================================
RULE ZnSys:Fan:FlowCap
  DEFAULT
    if( ZnSys:IsExhSys > 0 )
    then ValidOr( ZnSys:SysExhFlow, 0 )
    else if( Proj:AutoHardSize = 1 )
    then // For PROPOSED AutoHardSizing only
      if( Proj:IsStdModel > 0 .AND. Proj:ModelName != "" )
      then UNCHANGED // TableSizing is used, see Project-TableSizing rules
      else ZnSys:TotCondFlrArea * ZnSys:AirFlowPerSqFt / SysCnt
      endif
    else 0
    endif endif
  SIZING
    if( BaseSysNum > 0 )
    then UNDEFINED
    else FlowCap
    endif
  ANNUAL
    if( BaseSysNum > 0 .AND. SysCnt > 0 .AND.
        ParentCompAssigned( CtrlZnRef ) )
    then
      if( ZnSys:SysVentFlow > ValidOr( z:FlowCapSim, 0 ) / SysCnt * ( 1 - Proj:OATolLim ) )
      then // System ventilation flow is >= E+ sized capacity, use max of vent flow or E+ fan size
        Max( ZnSys:SysVentFlow, ValidOr( z:FlowCapSim, 0 ) / SysCnt )
      else
      if( ZnSys:CtrlZnRef:HasNoClg > 0 )
      then // Size fan based on heating design flow
        ValidOr( z:ZnSys:CtrlZnRef:HtgDsgnFlowSim, 0 ) / SysCnt
      else // Use E+ sized flow capacity and adjust by fan sizing ratio 
        ValidOr( z:FlowCapSim, 0 ) / SysCnt * SizingRat
      endif endif
    else z:FlowCap  
    endif
ENDRULE


// ********** Fan Control Method *********************************************** 
// =========================== AirSystem =======================================  
RULE AirSys:AirSeg:Fan:CtrlMthd
  DESCRIPTION
    "The method used to control fan flow"  
  REFERENCE 
    NACM Section 5.7.3.2     
  INPUTCLASS
    Required
;  OPTION - Defined in BEMEnums, for reference
;    ConstantVolume
;    VariableSpeedDrive
;    Dampers (Not supported for ZnSys)
;    InletVanes  (Not supported for ZnSys)
;    VariablePitch  (Not supported for ZnSys)
;    TwoSpeed
  DEFAULT
    if( IfValidAnd( AirSys:IsExhSys > 0 ) )
    then
      if( IfValidAnd( AirSys:ExhSysType = "Laboratory" ) .AND.
          IfValidAnd( AirSys:LabArea > 0 ) .AND.
          IfValidAnd( AirSys:ExhCtrlMthd = "VariableFlowVariableSpeedFan" ) )
      then "VariableSpeedDrive"
      else
      if( IfValidAnd( AirSys:ExhSysType = "CommercialKitchen" ) .AND.
          IfValidAnd( AirSys:CommKitArea > 0 ) .AND.
          IfValidAnd( AirSys:ExhCtrlMthd = "VariableFlowVariableSpeedFan" ) )
      then "VariableSpeedDrive"
      else
      if( IfValidAnd( AirSys:ExhSysType = "ParkingGarage" ) .AND.
          IfValidAnd( AirSys:PrkgGarArea > 0 ) .AND.
          IfValidAnd( AirSys:ExhCtrlMthd = "COControl" ) )
      then "VariableSpeedDrive"
      else "ConstantVolume"
      endif endif endif
    else
      switch( AirSys:Type )
        case "PVAV"    : "VariableSpeedDrive"
        case "VAV"     : "VariableSpeedDrive"
        case "SZVAVAC" : "VariableSpeedDrive"
        case "SZVAVHP" : "VariableSpeedDrive"
        default        : "ConstantVolume"
       endswitch
     endif
  CHECKSIM
    if( BypassCheckSim > 0 )
    then UNCHANGED
    else 
    if( CtrlMthd = "TwoSpeed" )
    then
      PostWarning("TwoSpeed control is only supported for ZoneSystem:Type = FPFC.
                   Proposed control method for fan '%s' will be reset to
                   'ConstantVolume'.", Name)
    else
    if( ( AirSys:Type = "SZVAVAC" .OR. AirSys:Type = "SZVAVAC" ) .AND. 
        CtrlMthd != "VariableSpeedDrive" )
    then
      PostError("AirSystem '%s' is Type = '%s', but the ControlMethod for fan
                 '%s' is not 'VariableSpeedDrive'. Revise these inputs for
                 consistency.", 
                 AirSystem:Name, AirSys:Type, Name )
    else
    if( ( AirSys:Type = "SZAC" .OR. AirSys:Type = "SZHP" ) .AND. 
        Parent ( Type ) != "Relief" .AND.
        CtrlMthd != "ConstantVolume" )
    then
      PostError("AirSystem '%s' is Type = '%s', but the ControlMethod for fan
                 '%s' is not 'ConstantVolume'. Revise these inputs for
                 consistency. To model a variable volume single-zone system, use
                 Type = 'SZVAVAC' or 'SZVAVHP'.", 
                 AirSystem:Name, AirSys:Type, Name )
    else
    if( AirSys:IsExhSys > 0 .AND. 
        AirSys:ExhSysType = "ParkingGarage" .AND.
        AirSys:ExhCtrlMthd = "COControl" .AND. 
        CtrlMthd != "VariableSpeedDrive" )
    then
      PostError("AirSystem '%s' is a parking garage ventilation/exhaust system with
                 'COControl', but the ControlMethod for fan '%s' is not
                 'VariableSpeedDrive'. Revise these inputs for consistency.", 
                 AirSystem:Name, Name )
    else
    if( AirSys:IsExhSys = 0 .AND. 
        AirSys:IsVAVSys = 1 .AND. 
        CtrlMthd = "ConstantVolume" )
    then
      PostWarning("AirSystem '%s' is Type = '%s', but the ControlMethod for fan
                  '%s' is 'ConstantVolume'.", 
                  AirSystem:Name, AirSys:Type, Name)
    else
    if( AirSys:IsExhSys > 0 .AND. 
        AirSys:ExhCtrlMthd = "VariableFlowVariableSpeedFan" .AND. 
        CtrlMthd != "VariableSpeedDrive" )
    then
      PostWarning("AirSystem '%s' is Type = 'Exhaust' with ControlMethod =
                  'VariableFlowVariableSpeedFan', but ControlMethod for fan '%s'
                  not 'VariableSpeedDrive'.", 
                  AirSystem:Name, Name)
    else
    if( AirSys:IsVAVSys = 0 .AND. 
        AirSys:IsExhSys = 0 .AND.
        CtrlMthd != "ConstantVolume" .AND. 
        Parent( Type ) = "Supply" )
    then
      PostWarning("AirSystem '%s' is Type = '%s', but the ControlMethod for fan
                  '%s' is not 'ConstantVolume'.", 
                  AirSystem:Name, AirSys:Type, Name)
    else UNCHANGED
    endif endif endif endif endif
    endif endif endif
  SIZING_PROPOSED
    if( BaseSysNum > 0 )
    then UNCHANGED
    else if( CtrlMthd = "TwoSpeed" )
    then "ConstantVolume"
    else CtrlMthd  
    endif endif
; SIZING_BASELINE
// Baseline definitions defined by Library_HVAC.txt file.
  ANNUAL
    z:CtrlMthd 
ENDRULE
// =========================== ZnSystem ========================================
// First, set a flag to indicate NoClg/Htg flow capacities are specified
RULE NEW ZnSys:HasSysFlowProp
  DATATYPE
    Integer
  LONGFORM
    HasSystemFlowProperty
  DESCRIPTION
    "A flag that indicates the ZoneSystem has fan and outdoor air flow rates
     defined at the systemlevel, as well as whether cycling vs continuous control
     is specified using ZnSys:FanOperModeSchRef."
  HELP
    "For simulation purposes.; applicable to the fan powered ZnSys:TypeSim = 
     'FPFC', 'PTAC', 'PTHP', 'WSHP', and 'VRF'."
  INPUTCLASS
    NotInput
  DEFAULT
    if( TypeSim = "PTAC" .OR.
        TypeSim = "PTHP" .OR.
        TypeSim = "FPFC" .OR. 
        TypeSim = "WSHP" .OR.
        TypeSim = "VRF" ) 
    then 1
    else 0
    endif
  SIZING
    if( LocalCompAssigned ( FanRef ) .AND. 
        ( TypeSim = "PTAC" .OR.
          TypeSim = "PTHP" .OR.
          TypeSim = "FPFC" .OR. 
          TypeSim = "WSHP" .OR.
          TypeSim = "VRF" ) )
    then 1
    else 0
    endif
ENDRULE
RULE ZnSys:Fan:CtrlMthd
  DEFAULT
    if( IfValidAnd( ZnSys:IsExhSys > 0 ) )
    then
      if( IfValidAnd( ZnSys:ExhSysType = "Laboratory" ) .AND.
          IfValidAnd( ZnSys:LabArea > 0 ) .AND.
          IfValidAnd( ZnSys:ExhCtrlMthd = "VariableFlowVariableSpeedFan" ) )
      then "VariableSpeedDrive"
      else
      if( IfValidAnd( ZnSys:ExhSysType = "CommercialKitchen" ) .AND.
          IfValidAnd( ZnSys:CommKitArea > 0 ) .AND.
          IfValidAnd( ZnSys:ExhCtrlMthd = "VariableFlowVariableSpeedFan" ) )
      then "VariableSpeedDrive"
      else
      if( IfValidAnd( ZnSys:ExhSysType = "ParkingGarage" ) .AND.
          IfValidAnd( ZnSys:PrkgGarArea > 0 ) .AND.
          IfValidAnd( ZnSys:ExhCtrlMthd = "COControl" ) )
      then "VariableSpeedDrive"
      else "ConstantVolume"
      endif endif endif
    else "ConstantVolume"
    endif
  CHECKSIM
    if( BypassCheckSim > 0 )
    then UNCHANGED
    else
    if( ZnSys:IsExhSys > 0 .AND. ZnSys:ExhSysType = "ParkingGarage" .AND.
        ZnSys:ExhCtrlMthd = "COControl" .AND. CtrlMthd != "VariableSpeedDrive" )
    then
      PostError("ZoneSystem '%s' is a parking garage ventilation/exhaust system with
                 'COControl', but the ControlMethod for its child fan '%s' is not
                 'VariableSpeedDrive'. Revise these inputs for consistency.", 
                  ZnSys:Name, Name )
    else
    if( ZnSys:IsExhSys > 0 )
    then UNCHANGED
    else
    if( ZnSys:HasSysFlowProp = 0 .AND. CtrlMthd != "ConstantVolume" )
    then
      PostWarning("ZoneSystem '%s' is Type = '%s', and its child fan '%s' has control 
                   method '%s', which is not supported. The control method will be
                   reset to 'ConstantVolume'.", 
                   ZnSys:Name, ZnSys:Type, Name, CtrlMthd)  
    else
    if( ZnSys:Type = "FPFC" )
    then // Some special rules for FPFC, VSD and 2spd are allowed in some cases
// Not sure why this check is here, but this allows 2-pipe heating only fan coil 
      if( ZnSys:HasClg = 0 .AND. 
          ( CtrlMthd = "VariableSpeedDrive" .OR. CtrlMthd = "TwoSpeed") )
      then
        PostWarning("ZoneSystem '%s' is Type = 'FPFC', but doesn't have any cooling
                     capacity. 'VariableSpeedDrive' and 'TwoSpeed' fan control
                     are not available for this configuration. The control method
                     will be reset to 'ConstantVolume'.", 
                     ZnSys:Name, Name) 
      else
      if( ZnSys:FanCtrl = "Continuous" .AND. CtrlMthd != "ConstantVolume" )
      then
        PostWarning("ZoneSystem '%s' is Type = 'FPFC', and cannot be operated
                     as 'Continuous' unless the fan control method is 
                     'ConstantVolume'. The control method will be reset to 'ConstantVolume'.", 
                     ZnSys:Name, Name) 
      else UNCHANGED
      endif endif
    else 
    if( ZnSys:HasSysFlowProp > 0 .AND. CtrlMthd = "VariableSpeedDrive" )
    then // For all other ZnSys:Types, VSD is not allowed
      PostWarning("ZoneSystem '%s' is Type = '%s', and its child fan '%s' has control
                   method 'VariableSpeedDrive', which is not currently supported. 
                   The control method will be modeled as 'TwoSpeed'.", 
                   ZnSys:Name, ZnSys:Type, Name) 
    else UNCHANGED
    endif endif endif endif endif
    endif
  SIZING_PROPOSED
    if( BaseSysNum > 0 )
    then UNCHANGED
    else
    if( ZnSys:Type = "FPFC" .AND. ZnSys:HasClg = 0 )
    then "ConstantVolume"
    else
    if( ZnSys:HasSysFlowProp > 0 )
    then CtrlMthd // Ticket 3166: HasSysFlowProps supports all CtrlMthds
    else "ConstantVolume"
    endif endif endif
; SIZING_BASELINE
// Baseline definitions defined by Library_HVAC.txt file and other rules
  ANNUAL
    z:CtrlMthd 
ENDRULE

// ==================== Fan Control Method Report ====================
RULE Fan:CtrlMthdRpt
  RULESETS
    T24N
  INPUTCLASS
    NotInput
  OPTION
    Constant Volume
    Variable Speed Drive
    Dampers
    Inlet Vanes
    Variable Pitch Blades
    Two Speed
  ANNUAL_PROPOSED
    if( CtrlMthd = "ConstantVolume" )
    then "Constant Volume"
    else
    if( CtrlMthd = "VariableSpeedDrive" )
    then "Variable Speed Drive"
    else
    if( CtrlMthd = "Dampers" )
    then "Dampers"
    else
    if( CtrlMthd = "InletVanes" )
    then "Inlet Vanes"
    else
    if( CtrlMthd = "VariablePitchBlades" )
    then "Variable Pitch Blades"
    else
    if( CtrlMthd = "TwoSpeed" )
    then "Two Speed"
    else UNDEFINED
    endif endif endif endif endif endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE


// ********** Fan Flow Minimum *************************************************   
// =========================== AirSystem ========================================
RULE AirSys:AirSeg:Fan:FlowMin
  DESCRIPTION
    "The minimum air flow rate of the fan."  
  HELP
    "Applicable only when Control Method is not 'ConstantVolume'. The minimum fan
     volume is typically the set to be equal to or greater than the design
     ventilation air flow rate."
  REFERENCE 
    NACM Section 5.7.3.2    
  INPUTCLASS
    CondRequired
  UNITS 
    cfm
  MINIMUM
    0
  REPORTPRECISION
    0
  DEFAULT
    if( CtrlMthd = "ConstantVolume" )
    then // FlowMin not used for ConstantVolume fans
      UNDEFINED
    else if( AirSys:IsExhSys > 0 )
    then // 20% min flow for variable flow exhaust systems
      ValidOr( AirSys:SysExhFlow, 0 ) * 0.2
    else 
    if( Proj:AutoHardSize = 1 )
    then // For PROPOSED AutoHardSizing only
      if( AirSeg:Type = "Supply" .OR. AirSeg:Type = "DualDuctSplitter" )
      then // Sum up TrmlUnit min flows
        Min( AirSys:TotTrmlPriAirFlowMinSim / SysCnt, ValidOr( FlowCap, 0 ) )
      else if( AirSeg:Type = "Return" .OR. AirSeg:Type = "Relief" )
      then // No minimum for return/relief fans
        0
      else UNDEFINED
      endif endif
    else 0
    endif endif endif
  CHECKCODE
    if( BypassCheckCode > 0 )
    then UNCHANGED
    else
    if( AirSys:IsExhSys > 0 .AND. 
        AirSys:ExhSysType = "ParkingGarage" .AND.
        AirSys:ExhCtrlMthd = "COControl" )
    then if ( IfValidAnd( Bldg:PrkgGarExhFlowCap >= 10000 ) .AND.
              ValidOr( FlowMin, 0 ) > ( 0.5 * ValidOr( FlowCap, 1 ) ) )
      then PostError("For variable flow Exhaust System '%s', minimum flow must
                      not exceed 50 percent of design flow, 
                      based on the fact that total building parking garage 
                      exhaust fan capacity is greater than or equal to 
                      10,000 cfm.", 
                      AirSys:Name, Name )
      else UNCHANGED
      endif 
    else
    if( (AirSys:Type = "SZVAVAC" .OR. AirSys:Type = "SZVAVHP" ) .AND. 
        AirSeg:Type = "Supply" )
    then
      if( ValidOr( FlowMin, 0 ) < AirSys:SysMinVentFlow * ( 1 - Proj:VentTolMinLimNonRes - 0.005 ) )
      then
        PostError("The min. flow of Fan '%s' is %.0f cfm, which is less
                   than the system minimum ventilation flow of %.0f cfm.", 
                   Name, FlowMin, AirSys:SysMinVentFlow )
      else 
      if( ValidOr( FlowMin, 0 ) < ValidOr( FlowCap, 0 ) * 0.2 * 0.99 )
      then
        PostWarning("The min. flow of Fan '%s' is %.0f cfm, which is
                     less than 20 percent of flow capacity, %.0f cfm.", 
                     Name, FlowMin, FlowCap )
      else UNCHANGED
      endif endif
    else UNCHANGED
    endif endif endif
  CHECKSIM
    if( BypassCheckSim > 0 )
    then UNCHANGED
    else
    if( AirSeg:Type = "Supply" .AND. CtrlMthd != "ConstantVolume" )
    then
      if( LocalStatus( FlowMin ) > 0 .AND. 
          IfValidAnd( ( AirSys:TotTrmlPriAirFlowMinSim / SysCnt * 0.99 ) > FlowMin ) .AND.
          ( AirSys:Type != "SZVAVAC" .AND. AirSys:Type != "SZVAVHP" ) )
      then // Sum of TerminalUnit:PrimaryAirFlow is greater than supply fan flow
        PostWarning("Total min. primary air flow of terminal units served by
                     Fan '%s' is %.0f, which is greater than the fan min. flow, %.0f", 
                     Name, AirSys:TotTrmlPriAirFlowMinSim / SysCnt, FlowMin)
      else
      if( ValidOr( FlowMin, 0 ) > ValidOr( FlowCap, 0 ) * 1.1 ) 
      then // FlowMin is greater than supply fan FlowCap
        PostWarning("Total min. flow of Fan '%s' is greater than the fan min. flow.
                     The min. fan flow will be reset to equal the fan capacity.", 
                     Name)
      else
      if( AirSys:IsVAVSys > 0 .AND. 
          CtrlMthd = "VariableSpeedDrive" .AND.
          IfValidAnd( FlowMin > 0 ) = 0 ) 
      then
        PostError("Fan '%s' is 'VariableSpeed' and the the minimum flow is 0 cfm 
                   or not defined.", Name)
      else UNCHANGED
      endif endif endif
    else UNCHANGED
    endif endif
  SIZING
    if( ( BaseSysNum > 0 ) .OR. CtrlMthd = "ConstantVolume" )
    then UNDEFINED
    else Min( ValidOr( FlowMin, FlowCap ), FlowCap )
    endif
  ANNUAL
    if( BaseSysNum > 0 )
    then
      if( CtrlMthd != "ConstantVolume" .AND. SysCnt > 0 )
      then AirSys:TotTrmlPriAirFlowMinSim / SysCnt
      else UNDEFINED
      endif
    else z:FlowMin
    endif
ENDRULE
// =========================== ZoneSystem ======================================
RULE ZnSys:Fan:FlowMin
  REPORTPRECISION
    0
  DEFAULT
    if( CtrlMthd = "ConstantVolume" )
    then // FlowMin not used for ConstantVolume fans
      UNDEFINED
    else
    if( ZnSys:HasSysFlowProp > 0  )
    then // ZnSys that supports two speed fans
      if( CtrlMthd = "TwoSpeed" )
      then Max( FlowCap * 0.5, ZnSys:SysVentFlow )
      else
      if( CtrlMthd = "VariableSpeedDrive" )
      then Max( FlowCap * 0.3, ZnSys:SysVentFlow )
      else UNDEFINED
      endif endif
    else if( ZnSys:IsExhSys > 0 )
    then // 20% min flow for variable flow exhaust systems
      ValidOr( ZnSys:SysExhFlow, 0 ) * 0.2 
    else UNDEFINED
    endif endif endif
  CHECKCODE
    if( BypassCheckCode > 0 )
    then UNCHANGED
    else
    if( ZnSys:IsExhSys > 0 .AND. 
        ZnSys:ExhSysType = "ParkingGarage" .AND.
        ZnSys:ExhCtrlMthd = "COControl" )
    then if ( IfValidAnd( Bldg:PrkgGarExhFlowCap >= 10000 ) .AND.
              ValidOr( FlowMin, 0 ) > ( 0.5 * ValidOr( FlowCap, 1 ) ) )
      then PostError("For variable flow Exhaust System '%s', minimum flow must
                      not exceed 50 percent of design flow, 
                      based on the fact that total building parking garage 
                      exhaust fan capacity is greater than or equal to 
                      10,000 cfm.", 
                      ZnSys:Name, Name )
      else UNCHANGED
      endif 
    else UNCHANGED
    endif endif
  SIZING
    if( BaseSysNum > 0 )
    then UNDEFINED
    else 
    if( CtrlMthd = "TwoSpeed" .OR.
        CtrlMthd = "VariableSpeedDrive")
    then FlowMin
    else UNDEFINED
    endif endif
  ANNUAL
    if( BaseSysNum > 0 )
    then UNDEFINED
    else z:FlowMin
    endif
ENDRULE

RULE Fan:FlowMinFrac
  DESCRIPTION
    "The fraction calculated by dividing the fan minimum air flow rate by the
     design (maximum) air flow."
  INPUTCLASS 
    NotInput
  ANNUAL 
    if( IfValidAnd( FlowMin > 0 ) .AND.
        IfValidAnd( FlowCap > 0 ) )
    then FlowMin / FlowCap
    else UNDEFINED
    endif
ENDRULE


// ********** Fan Position *****************************************************
// For reference only, fan position is specified at the AirSys or ZnSys object.
RULE Fan:Pos
  DESCRIPTION
    "The position of the supply fan relative to the cooling coil."
  HELP
    "Shown here only for reference; the location of the fan with respect to
     the cooling and/or heating coil is defined at the system level."  
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    NotInput
  OPTION
    DrawThrough
    BlowThrough  
  DEFAULT
    if( ParentComp = "ZnSys" )
    then ZnSys:FanPos
    else if( ParentComp = "AirSys" )
    then AirSys:FanPos
    else if( ParentComp = "TrmlUnit" )
    then "DrawThrough"
    else UNDEFINED
    endif endif endif
  SIZING
    if( ParentComp = "ZnSys" )
    then ZnSys:FanPos
    else if( ParentComp = "AirSys" )
    then AirSys:FanPos
    else if( ParentComp = "TrmlUnit" )
    then "DrawThrough"
    else UNDEFINED
    endif endif endif
  ANNUAL
    z:Pos
ENDRULE


// ********** Motor Type *******************************************************
RULE Fan:MtrType
  DESCRIPTION
    "The type of enclosure used for the fan motor"
  INPUTCLASS
    Default
  OPTION
    Open
    Enclosed
  DEFAULT : T24N
    "Open"
  DEFAULT : S901G ECBC
    "Enclosed"
  SIZING : T24N
    if( BaseSysNum > 0 )
    then "Open"
    else MtrType 
    endif
  SIZING : S901G ECBC
    if( BaseSysNum > 0 )
    then "Enclosed"
    else MtrType
    endif
  ANNUAL
    z:MtrType
ENDRULE


// ********** Motor Poles ******************************************************
RULE Fan:MtrPoleCnt
  DESCRIPTION
    "The number of poles in the fan motor"
  INPUTCLASS
    Default
  REPORTPRECISION
    0
  DEFAULT
    4
  SIZING
    if( BaseSysNum > 0 )
    then 4
    else MtrPoleCnt
    endif
  ANNUAL
    z:MtrPoleCnt
ENDRULE


// ********** Simulated Capacities / Efficiency ********************************
RULE Fan:FlowCapSim
  DESCRIPTION
    "The maximum air flow rate of the fan at design conditions, for simulation."    
  INPUTCLASS
    NotInput
  UNITS 
    cfm
  REPORTPRECISION
    0
  DEFAULT
    if( IfValidAnd( FlowCap >= 0 ) )
    then
      if( ParentComp = "AirSys" ) 
      then 
        if( Parent( Type ) = "Return" .AND. IfValidAnd( AirSys:SupFanCap > 0 ) )
        then
          // The return fan capacity is set to be equal to the supply fan capacity
          // to fix the issue that the supply flow is limited by the return flow
          // The simulated return flow rate will still be equal to the calculated
          // SupFanCap * RetAirFlowRat, where RetAirAirFlowRat is calculated from user
          // return fan flow
          AirSys:SupFanCap * SysCnt 
        else FlowCap * SysCnt
        endif
      else FlowCap * SysCnt
      endif
    else 0
    endif
  SIZING
    // Source for Autosize data:
    // E+ Report: Equipment Summary -> Fans -> Max Air Flow Rate
    // This value reflects multipliers of zone loads, so SDD reported value is 
    // divided by Fan:SysCnt. 
  ANNUAL
    if( IfValidAnd( FlowCap >= 0 ) )
    then
      if( ParentComp = "AirSys" ) 
      then 
        if( Parent( Type ) = "Return" .AND. IfValidAnd( AirSys:SupFanCap > 0 ) )
        then // See above
          AirSys:SupFanCap * SysCnt 
        else FlowCap * SysCnt
        endif
      else FlowCap * SysCnt
      endif
    else 0
    endif
ENDRULE
RULE Fan:FlowMinSim
  DESCRIPTION
    "The minimum air flow rate of the fan, for simulation."     
  INPUTCLASS
    NotInput
  UNITS 
    cfm
  REPORTPRECISION
    0
  DEFAULT
    if( CtrlMthd != "ConstantVolume" .AND. IfValidAnd( FlowMin >= 0 ) )
    then FlowMin * SysCnt
    else 0
    endif  
  ANNUAL
    if( CtrlMthd != "ConstantVolume" .AND. IfValidAnd( FlowMin >= 0 ) )
    then FlowMin * SysCnt
    else UNDEFINED
    endif  
ENDRULE


// =========================== AirSystem =======================================
RULE NEW AirSeg:FanFlowCap
  DATATYPE
    Float
  LONGFORM
    FanFlowCapacity
  INPUTCLASS
    NotInput
  DEFAULT
    SumChildren( Fan:FlowCap )
  SIZING
    SumChildren( Fan:FlowCap )
  ANNUAL
    SumChildren( Fan:FlowCap )
ENDRULE

RULE NEW AirSeg:FanFlowMinCap
  DATATYPE
    Float
  LONGFORM
    FanFlowMinimumCapacity
  INPUTCLASS
    NotInput
  DEFAULT
    SumChildren( Fan:FlowMin )
  SIZING
    SumChildren( Fan:FlowMin )
  ANNUAL
    SumChildren( Fan:FlowMin )
ENDRULE

RULE AirSys:SupFanCap
  DESCRIPTION
    "The total supply fan capacity of the AirSystem"
  INPUTCLASS
    NotInput
  UNITS 
    cfm
  REPORTPRECISION
    0
  DEFAULT
    SumChildrenIf( AirSeg:FanFlowCap, AirSeg:Type = "Supply" )
  SIZING
    SumChildrenIf( AirSeg:FanFlowCap, AirSeg:Type = "Supply" )
  ANNUAL
    SumChildrenIf( AirSeg:FanFlowCap, AirSeg:Type = "Supply" )
ENDRULE

RULE NEW AirSys:RetFanCap
  DATATYPE
    Float
  LONGFORM
    ReturnFanCapacity
  DESCRIPTION
    "The total return fan capacity of the AirSystem"
  INPUTCLASS
    NotInput
  UNITS 
    cfm
  REPORTPRECISION
    0
  DEFAULT
    SumChildrenIf( AirSeg:FanFlowCap, AirSeg:Type = "Return" )
  SIZING
    SumChildrenIf( AirSeg:FanFlowCap, AirSeg:Type = "Return" )
  ANNUAL
    SumChildrenIf( AirSeg:FanFlowCap, AirSeg:Type = "Return" )
  CHECKSIM
    if( LocalCompAssigned( HtRcvryRef ) .AND. 
        SumChildren( HtRcvry:RcvryFromExhSys ) = 0 .AND. 
        ( RetFanCap + ExhFanCap ) = 0 )
    then
      PostError("AirSystem '%s' has no return/exhaust fan. A return/exhaust
                 fan is required for the system with heat recovery.",Name)
    else
    if( Type != "Exhaust" .AND. ( RetFanCap + ExhFanCap ) > SupFanCap )
    then
      PostWarning("AirSystem '%s' has return/exhaust flow greater than supply flow
                   which is not supported by EnergyPlus. The return/exhaust flow
                   will be set equal to the supply flow", Name)
    else UNCHANGED  
    endif endif
ENDRULE

RULE NEW AirSys:ReliefFanCap
  DATATYPE
    Float
  LONGFORM
    ReliefFanCapacity
  DESCRIPTION
    "The total relief fan capacity of the AirSystem"
  INPUTCLASS
    NotInput
  UNITS 
    cfm
  REPORTPRECISION
    0
  DEFAULT
    SumChildrenIf( AirSeg:FanFlowCap, AirSeg:Type = "Relief" )
  SIZING
    SumChildrenIf( AirSeg:FanFlowCap, AirSeg:Type = "Relief" )
  ANNUAL
    SumChildrenIf( AirSeg:FanFlowCap, AirSeg:Type = "Relief" )
ENDRULE

RULE NEW AirSys:SupFanFlowMin
  DATATYPE
    Float
  LONGFORM
    SupplyFanFlowMinimum
  DESCRIPTION
    "The minimum supply fan flow rate the AirSystem."
  INPUTCLASS
    NotInput
  UNITS 
    cfm
  DEFAULT
    SumChildrenIf( AirSeg:FanFlowMinCap, AirSeg:Type = "Supply" )
  SIZING
    SumChildrenIf( AirSeg:FanFlowMinCap, AirSeg:Type = "Supply" )
  ANNUAL
    SumChildrenIf( AirSeg:FanFlowMinCap, AirSeg:Type = "Supply" )
ENDRULE

RULE NEW AirSys:SupFanFlowMinRat
  DATATYPE
    Float
  LONGFORM
    SupplyFanFlowMinimumRatio
  DESCRIPTION
    "The minimum supply fan flow ratio of the AirSystem."
  HELP
     "Primary purpose is to define the VAVNoReheatBox min flow for SZVAV."
  INPUTCLASS
    NotInput
  UNITS 
    cfm
  DEFAULT
    if( IfValidAnd( SupFanCap > 0 ) )
    then Min( SupFanFlowMin / SupFanCap, 1.0 )
    else 0
    endif
  SIZING
    if( IfValidAnd( SupFanCap > 0 ) )
    then Min( SupFanFlowMin / SupFanCap, 1.0 )
    else 0
    endif
  ANNUAL
    if( IfValidAnd( SupFanCap > 0 ) )
    then Min( SupFanFlowMin / SupFanCap, 1.0 )
    else 0
    endif
ENDRULE

RULE NEW AirSeg:IsCVSupFan
  DATATYPE
    Integer
  LONGFORM
    IsConstantVolumeSupplyFan
  DESCRIPTION
    "A flag that indicates if the supply fan of the system 'Constant Volume'"
  INPUTCLASS
    NotInput
  DEFAULT
    if( Type = "Supply" .AND. 
        SumChildrenIf( Fan:FlowCap, Fan:CtrlMthd = "ConstantVolume" ) > 0 )
    then 1
    else 0
    endif
ENDRULE
// =========================== ZoneSystem ======================================
RULE ZnSys:SupFanCap
  DESCRIPTION
    "The total supply fan capacity of the ZoneSystem"
  INPUTCLASS 
    NotInput         
  UNITS 
    cfm
  REPORTPRECISION
    0
  DEFAULT
    if( IsExhSys = 0 )
    then SumChildren( Fan:FlowCap )
    else 0
    endif
  SIZING
    if( IsExhSys = 0 )
    then SumChildren( Fan:FlowCap )
    else 0
    endif
  ANNUAL
    if( IsExhSys = 0 )
    then SumChildren( Fan:FlowCap )
    else 0
    endif
ENDRULE

RULE NEW ZnSys:IsCVSupFan
  DATATYPE
    Integer
  LONGFORM
    IsConstantVolumeSupplyFan
  DESCRIPTION
    "A flag that indicates if the supply fan of the system 'Constant Volume'"
  INPUTCLASS
    NotInput
  DEFAULT
    if( SumChildrenIf( Fan:FlowCap, Fan:CtrlMthd = "ConstantVolume" ) > 0 )
    then 1
    else 0
    endif
ENDRULE

// ---------- ZnSys Fan Flow Capacities --------------------------------------------
// Map to E+ fan powered ZoneHVAC fields
// Calculate values
RULE NEW ZnSys:ClgSupFanCap
  DATATYPE
    Float
  LONGFORM
    CoolingSupplyFanCapacity
  DESCRIPTION
    "The supply fan air flow rate when the ZnSys is in cooling mode."  
  HELP
    "Applicable to fan powered ZnSys:TypeSim = 
     'FPFC', 'PTAC', 'PTHP', 'WSHP', and 'VRF'."
  INPUTCLASS
    NotInput
  UNITS
    cfm
  DEFAULT
    if( HasSysFlowProp > 0 )
    then FanRef:FlowCap
    else UNDEFINED
    endif
  SIZING
    if( HasSysFlowProp > 0 )
    then 
      if( BaseSysNum > 0 .OR. IfValidAnd( u:Proj:HVACAutoSizing > 0 ) )
      then UNDEFINED // Autosize
      else FanRef:FlowCap
      endif
    else UNDEFINED
    endif
  ANNUAL
    if( HasSysFlowProp > 0 .AND. BaseSysNum > 0 )
    then FanRef:FlowCap
    else z:ClgSupFanCap
    endif
ENDRULE

RULE NEW ZnSys:HtgSupFanCap
  DATATYPE
    Float
  LONGFORM
    HeatingSupplyFanCapacity
  DESCRIPTION
    "The supply fan air flow rate when the ZnSys is in heating mode."  
  HELP
    "Applicable to fan powered ZnSys:TypeSim = 
     'FPFC', 'PTAC', 'PTHP', 'WSHP', and 'VRF'."
  INPUTCLASS
    NotInput
  UNITS
    cfm
  DEFAULT
    if( HasSysFlowProp > 0 )
    then FanRef:FlowCap
    else UNDEFINED
    endif
  SIZING
    if( HasSysFlowProp > 0 )
    then 
      if( BaseSysNum > 0 .OR. IfValidAnd( u:Proj:HVACAutoSizing > 0 ) )
      then UNDEFINED // Autosize
      else FanRef:FlowCap
      endif
    else UNDEFINED
    endif
  ANNUAL
    if( HasSysFlowProp > 0 .AND. BaseSysNum > 0 )
    then FanRef:FlowCap
    else z:HtgSupFanCap
    endif
ENDRULE

RULE NEW ZnSys:NoClgSupFanCap
  DATATYPE
    Float
  LONGFORM
    NoCoolingSupplyFanCapacity
  DESCRIPTION
    "The supply fan air flow rate when the ZnSys is in no cooling mode."  
  HELP
    "Applicable to fan powered ZnSys:TypeSim = 'VRF' only."
  INPUTCLASS
    NotInput
  UNITS
    cfm
  DEFAULT
    if( HasSysFlowProp > 0 .AND. Type = "VRF" )
    then 
      if( IfValidAnd( IsCVSupFan = 1 ) )
      then FanRef:FlowCap
      else FanRef:FlowMin
      endif
    else UNDEFINED
    endif
  SIZING
    if( HasSysFlowProp > 0 .AND. TypeSim = "VRF" )
    then 
      if( BaseSysNum > 0 .OR. IfValidAnd( u:Proj:HVACAutoSizing > 0 ) )
      then UNDEFINED // Autosize
      else
      if( IfValidAnd( IsCVSupFan = 1 ) )
      then FanRef:FlowCap
      else FanRef:FlowMin
      endif endif
    else UNDEFINED
    endif
  ANNUAL
    if( HasSysFlowProp > 0 .AND. BaseSysNum > 0 .AND. TypeSim = "VRF" )
    then FanRef:FlowCap
    else z:NoClgSupFanCap
    endif
ENDRULE

RULE NEW ZnSys:NoHtgSupFanCap
  DATATYPE
    Float
  LONGFORM
    NoHeatingSupplyFanCapacity
  DESCRIPTION
    "The supply fan air flow rate when the ZnSys is in no heating mode."  
  HELP
    "Applicable to fan powered ZnSys:TypeSim = 'VRF' only."
  INPUTCLASS
    NotInput
  UNITS
    cfm
  DEFAULT
    if( HasSysFlowProp > 0 .AND. Type = "VRF" )
    then NoClgSupFanCap
    else UNDEFINED
    endif
  SIZING
    if( HasSysFlowProp > 0 .AND. TypeSim = "VRF" )
    then 
      if( BaseSysNum > 0 .OR. IfValidAnd( u:Proj:HVACAutoSizing > 0 ) )
      then UNDEFINED // Autosize
      else NoClgSupFanCap
      endif
    else UNDEFINED
    endif
  ANNUAL
    if( HasSysFlowProp > 0 .AND. BaseSysNum > 0 .AND. TypeSim = "VRF" )
    then FanRef:FlowCap
    else z:NoHtgSupFanCap
    endif
ENDRULE

RULE NEW ZnSys:NoClgHtgSupFanCap
  DATATYPE
    Float
  LONGFORM
    NoCoolingHeatingSupplyFanCapacity
  DESCRIPTION
    "The supply fan air flow rate when the ZnSys is not in heating or 
     cooling mode."  
  HELP
    "Applicable to fan powered ZnSys:TypeSim = 'FPFC', 'PTAC', 
     'PTHP', and 'WSHP' (not applicable to VRF)."
  INPUTCLASS
    NotInput
  UNITS
    cfm
  DEFAULT
    if( HasSysFlowProp > 0 .AND. Type != "VRF" )
    then 
      if( IfValidAnd( IsCVSupFan > 0 ) )
      then FanRef:FlowCap
      else FanRef:FlowMin
      endif
    else UNDEFINED
    endif
  SIZING
    if( HasSysFlowProp > 0 .AND. TypeSim != "VRF" )
    then 
      if( BaseSysNum > 0 .OR. IfValidAnd( u:Proj:HVACAutoSizing > 0 ) )
      then UNDEFINED // Autosize
      else
      if( IfValidAnd( IsCVSupFan > 0 ) )
      then FanRef:FlowCap
      else FanRef:FlowMin
      endif endif
    else UNDEFINED
    endif
  ANNUAL
    if( HasSysFlowProp > 0 .AND. BaseSysNum > 0 .AND. TypeSim != "VRF" )
    then FanRef:FlowCap
    else z:NoClgHtgSupFanCap
    endif
ENDRULE

// Calculate values w/ system multipliers, for simulation
RULE ZnSys:ClgSupFanCapSim
  DESCRIPTION
    "The supply fan air flow rate when the ZnSys is in cooling mode,
     for simulation."  
  INPUTCLASS
    NotInput
  UNITS
    cfm
  SIZING
    if( IfValidAnd( ClgSupFanCap > 0 ) )
    then ClgSupFanCap * Cnt
    else UNDEFINED
    endif
  ANNUAL
    if( IfValidAnd( ClgSupFanCap > 0 ) )
    then ClgSupFanCap * Cnt
    else UNDEFINED
    endif
ENDRULE

RULE ZnSys:HtgSupFanCapSim
  DESCRIPTION
    "The supply fan air flow rate when the ZnSys is in heating mode,
     for simulation."  
  INPUTCLASS
    NotInput
  UNITS
    cfm
  SIZING
    if( IfValidAnd( HtgSupFanCap > 0 ) )
    then HtgSupFanCap * Cnt
    else UNDEFINED
    endif
  ANNUAL
    if( IfValidAnd( HtgSupFanCap > 0 ) )
    then HtgSupFanCap * Cnt
    else UNDEFINED
    endif
ENDRULE

RULE ZnSys:NoClgSupFanCapSim
  DESCRIPTION
    "The supply fan air flow rate when the ZnSys is in no cooling mode,
     for simulation." 
  HELP
    "For TypeSim = 'VRF' only." 
  INPUTCLASS
    NotInput
  UNITS
    cfm
  SIZING
    if( IfValidAnd( NoClgSupFanCap > 0 ) )
    then NoClgSupFanCap * Cnt
    else UNDEFINED
    endif
  ANNUAL
    if( IfValidAnd( NoClgSupFanCap > 0 ) )
    then NoClgSupFanCap * Cnt
    else UNDEFINED
    endif
ENDRULE

RULE ZnSys:NoHtgSupFanCapSim
  DESCRIPTION
    "The supply fan air flow rate when the ZnSys is in no heating mode,
     for simulation." 
  HELP
    "For TypeSim = 'VRF' only." 
  INPUTCLASS
    NotInput
  UNITS
    cfm
  SIZING
    if( IfValidAnd( NoHtgSupFanCap > 0 ) )
    then NoHtgSupFanCap * Cnt
    else UNDEFINED
    endif
  ANNUAL
    if( IfValidAnd( NoHtgSupFanCap > 0 ) )
    then NoHtgSupFanCap * Cnt
    else UNDEFINED
    endif
ENDRULE

RULE ZnSys:NoClgHtgSupFanCapSim
  DESCRIPTION
    "The supply fan air flow rate when the ZnSys is not in heating
     or cooling mode, for simulation."   
  INPUTCLASS
    NotInput
  UNITS
    cfm
  SIZING
    if( IfValidAnd( NoClgHtgSupFanCap > 0 ) )
    then NoClgHtgSupFanCap * Cnt 
    else
    if( IfValidAnd( NoClgSupFanCap > 0 ) )
    then // Is for VRF, set this value for reference
      Max( ValidOr( NoClgSupFanCap , 0 ), 
           ValidOr( NoHtgSupFanCap , 0 ) ) * Cnt
    else UNDEFINED
    endif endif
  ANNUAL
    if( IfValidAnd( NoClgHtgSupFanCap > 0 ) )
    then NoClgHtgSupFanCap * Cnt
    else
    if( IfValidAnd( NoClgSupFanCap > 0 ) )
    then // Is for VRF, set this value for reference
      Max( ValidOr( NoClgSupFanCap , 0 ), 
           ValidOr( NoHtgSupFanCap , 0 ) ) * Cnt
    else UNDEFINED
    endif endif
ENDRULE


// ********** VentilationOnly System ********************************
RULE ZnSys:RtdFlowCap
  DESCRIPTION
    "The rated ventilation flow of the exhaust, supply, or HRV/ERV fan
     system."
  HELP
    "For all cases, the input value should be the flow rate for the rated
     condition. 

     For HVI certified fans, this is the rated flow at the highest static
     pressure condition. 

     For HVI certified HRV/ERV products, input the net airflow @ max rated SRE.

     For balanced systems that utilize two or more fans, input the
     rated flow of the supply fan of the system."
  INPUTCLASS 
    Default        
  UNITS 
    cfm
  REPORTPRECISION
    0
  DEFAULT
    if( Type = "VentilationOnly" )
    then
      if( Type = "ExhaustOnly" )
      then ValidOr( SysExhFlow, 0 ) 
      else Validor( SysVentFlow, 0 )
      endif
    else UNDEFINED
    endif
  CHECKCODE
    if( Type = "VentilationOnly" )
    then
      if( IsHRRVentSys > 0 )
      then // Res flow check
        if( RtdFlowCap < SysVentFlow - Max( ( SysVentFlow * Proj:VentFanTolMinLim ), 10 ) ) 
        then // RtdFlow is < sum of ThrmlZn:VentFlow
          PostError("VentilationOnly system '%s' has a flow capacity of %.0f cfm,
                     which is more than %.0f percent or 10 cfm ( which ever is larger) less
                     than the design ventilation flow of the zone it serves. 
                     Revise inputs for consistency.", 
                     Name, RtdFlowCap, Proj:VentFanTolMinLim * 100 ) 
        else
        if( RtdFlowCap > SysVentFlow + Max( ( SysVentFlow * Proj:VentFanTolMaxLim ), 10 )  ) 
        then // RtdFlow is > sum of ThrmlZn:VentFlow
          PostError("VentilationOnly system '%s' has a flow capacity of %.0f cfm,
                     which is more than %.0f percent or 10 cfm ( which ever is larger) greater
                     than the design ventilation flow of the zone it serves. 
                     Revise inputs for consistency.", 
                     Name, RtdFlowCap, Proj:VentFanTolMaxLim * 100 ) 
        else
        if( RtdFlowCap < SysCodeVentFlow * ( 1 - Proj:VentTolMinLimRes ) )
        then // RtdFlow is < code min vent flow
          PostError("VentilationOnly system '%s' has a flow capacity of %.0f cfm,
                     which is less than the code minimum required ventilation 
                     air flow minus %.0f percent.  Increase the Rated Flow
                     Capacity of the system.", 
                     Name, RtdFlowCap, Proj:VentTolMinLimRes * 100 )
        else UNCHANGED
        endif endif endif
      else // NonRes exh flow check
      if( ExhSysType = "ExhaustOnly" )
      then // Check RtdFlow against ExhFlow
        if( RtdFlowCap < SysExhFlow - Max( ( SysExhFlow * Proj:ExhTolMaxLimNonRes ), 10 ) ) 
        then // RtdFlow is < sum of ThrmlZn:ExhFlow
          PostError("VentilationOnly system '%s' has a flow capacity of %.0f cfm,
                     which is more than %.0f percent or 10 cfm ( which ever is larger) less
                     than the design ventilation flow of the zone it serves. 
                     Revise inputs for consistency.", 
                     Name, RtdFlowCap, Proj:ExhTolMaxLimNonRes * 100 ) 
        else
        if( RtdFlowCap > SysExhFlow + Max( ( SysExhFlow * Proj:ExhTolMaxLimNonRes ), 10 ) ) 
        then // RtdFlow is > sum of ThrmlZn:ExhFlow
          PostError("VentilationOnly system '%s' has a flow capacity of %.0f cfm,
                     which is more than %.0f percent or 10 cfm ( which ever is larger) greater
                     than the design ventilation flow of the zone it serves. 
                     Revise inputs for consistency.", 
                     Name, RtdFlowCap, Proj:ExhTolMaxLimNonRes * 100 ) 
        else UNCHANGED
        endif endif
      else // NonRes vent flow check
      if( RtdFlowCap < SysVentFlow - Max( ( SysVentFlow * Proj:VentTolMinLimNonRes ), 10 ) ) 
      then // RtdFlow is < sum of ThrmlZn:VentFlow
        PostError("VentilationOnly system '%s' has a flow capacity of %.0fcfm,
                   which is more than %.0f percent or 10 cfm ( which ever is larger) less
                   than the design ventilation flow of the zone it serves. 
                   Revise inputs for consistency.", 
                   Name, RtdFlowCap, Proj:VentTolMinLimNonRes * 100 ) 
      else
      if( RtdFlowCap > SysVentFlow + Max( ( SysVentFlow * Proj:VentTolMaxLimNonRes ), 10 ) ) 
      then // RtdFlow is > sum of ThrmlZn:VentFlow
        PostError("VentilationOnly system '%s' has a flow capacity of %.0f cfm,
                   which is more than %.0f percent or 10 cfm ( which ever is larger) greater
                   than the design ventilation flow of the zone it serves. 
                   Revise inputs for consistency.", 
                   Name, RtdFlowCap, Proj:VentTolMaxLimNonRes * 100 ) 
      else
      if( RtdFlowCap < SysCodeVentFlow * ( 1 - Proj:VentTolMinLimNonRes ) )
      then // RtdFlow is < code min vent flow
        PostError("VentilationOnly system '%s' has a flow capacity of %.0f cfm,
                   which is less than the code minimum required ventilation 
                   air flow minus %.0f percent.  Increase the Rated Flow 
                   Capacity of the system.", 
                   Name, RtdFlowCap, Proj:VentTolMinLimNonRes * 100 )
      else UNCHANGED
      endif endif endif endif endif
    else UNCHANGED
    endif
ENDRULE

RULE ZnSys:RtdPwr
  DESCRIPTION
    "The rated input power of the exhaust, supply, or HRV/ERV fan
     system."
  HELP
    "For all cases, the input value should be the fan input power for the rated
     condition. 

     For HVI certified fans, this is the input power for the rated flow 
     at the highest static pressure condition. 

     For HVI certified HRV/ERV products, input the power consumed @ max rated SRE.

     For balanced systems that utilize two or more fans, input the 
     total rated input power all fans in the system."
  INPUTCLASS 
    Default        
  UNITS 
    W
  REPORTPRECISION
    0
  MINIMUM
    0
  COMMONMINIMUM
    30
  DEFAULT
    if( Type = "VentilationOnly" )
    then
      if( IfValidAnd( ExhSysType = "HeatRecovery" ) )
      then // HeatRecovery
        if( Proj:HRRVentSysChange > 0 ) 
        then 0.70 * RtdFlowCap // Default for 2019.2.0 ACM release
        else 0.80 * RtdFlowCap // Default for 2019.1.1/3 release
        endif
      else
      if( IfValidAnd( ExhSysType = "Balanced" ) )
      then // Balanced
        if( Proj:HRRVentSysChange > 0 ) 
        then
          if( Proj:IsStdModel > 0 .AND. 
              IfValidAnd( HRRFanPwrAdj > 0 ) )
          then // Adjust default to compensate for HRRFanPwrAdj in Std models
            0.70 / HRRFanPwrAdj * RtdFlowCap 
          else 0.70 * RtdFlowCap // Default for 2019.2.0 ACM release
          endif
        else 0.70 * RtdFlowCap // Default for 2019.1.1/3 release
        endif
      else // SupplyOnly or ExhaustOnly
      if( Proj:HRRVentSysChange > 0 )
      then
        if( IfValidAnd( IsHRRVentSys > 0 ) )
        then 0.35 * RtdFlowCap // HRR default for 2019.2.0 ACM release
        else 0.58 * RtdFlowCap // Htl/Mtl default for 2019.2.0 ACM release
        endif
      else 0.58 * RtdFlowCap // Default for 2019.1.1/3 release
      endif endif endif
    else UNDEFINED
    endif
  CHECKSIM
    if( Type = "VentilationOnly" .AND.
        IfValidAnd( RtdPwr > 0 ) = 0 )
    then
      PostError("ZoneSystem '%s' is Type = 'VentilationOnly' and
                a RatedPower is 0 or not defined.", Name)
    else UNCHANGED
    endif
ENDRULE

RULE ZnSys:RtdPwrIdx
  DESCRIPTION
    "The rated power per flow for the 'VentilationOnly' system."
  HELP
    "For reporting purposes. This value equals the rated input power divided by the
     rated ventilation flow (supply or exhaust) capacity of the system."
  INPUTCLASS 
    NotInput       
  UNITS 
    W/cfm
  REPORTPRECISION
    3
  DEFAULT
    if( Type = "VentilationOnly" .AND.
        IfValidAnd( RtdFlowCap > 0 ) )
    then ValidOr( RtdPwr, 0 ) / RtdFlowCap
    else UNDEFINED
    endif
  SIZING
    if( Type = "VentilationOnly" .AND.
        IfValidAnd( RtdPwr > 0 ) )
    then ValidOr( RtdPwr, 0 ) / RtdFlowCap
    else UNDEFINED
    endif
ENDRULE


// The following tables are referenced for both fan and pump rules
// Standard (Std) motor size table
TABLE StdElecMtrSize
   InputMotorHP   MotorHPIndex   MotorHPValue   
   <=0.083        1              0.083          
   <=0.125        2              0.125         
   <=0.250        3              0.25          
   <=0.500        4              0.5           
   <=0.75         5              0.75          
   <=1.0          6              1              
   <=1.5          7              1.5           
   <=2.0          8              2              
   <=3.0          9              3              
   <=5.0          10             5               
   <=7.5          11             7.5           
   <=10.0         12             10             
   <=15.0         13             15             
   <=20.0         14             20             
   <=25.0         15             25             
   <=30.0         16             30             
   <=40.0         17             40             
   <=50.0         18             50             
   <=60.0         19             60             
   <=75.0         20             75             
   <=100.0        21             100           
   <=125.0        22             125           
   <=150.0        23             150           
   <=200.0        24             200            
   >=200.0        25             200           
ENDTABLE 

// Standard (Std) motor size efficiency table
TABLE StdElecMtrPerf
   MotorHPIndex   MotorHPString    MotorEfficiency   MotorHPValue     
   1              "1/12"           0.855             0.083            
   2              "1/8"            0.855             0.125            
   3              "1/4"            0.855             0.25             
   4              "1/2"            0.855             0.5              
   5              "3/4"            0.855             0.75             
   6              "1.0"            0.855             1                
   7              "1.5"            0.865             1.5              
   8              "2"              0.865             2                
   9              "3"              0.895             3                
   10             "5"              0.895             5                
   11             "7.5"            0.917             7.5              
   12             "10"             0.917             10               
   13             "15"             0.924             15               
   14             "20"             0.930             20               
   15             "25"             0.936             25               
   16             "30"             0.936             30               
   17             "40"             0.941             40               
   18             "50"             0.945             50               
   19             "60"             0.950             60               
   20             "75"             0.954             75               
   21             "100"            0.954             100              
   22             "125"            0.954             125              
   23             "150"            0.958             150              
   24             "200"            0.962             200              
   25             "200+"           0.962             200   
ENDTABLE  





