// Proposed HVAC Set-up
//
// -------------------------------------------------------------------------
//  Copyright (c) 2017, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------
//  



// ********** AddClgToProp Rules ***********************************************
// -----------------------------------------------------------------------------
// Create cooling system for conditioned zones that have no cooling (HasClg = 0) and
// do not qualify for the HtgOnly baseline system exception
RULE NEW ThrmlZn:AddClgToProp
  DATATYPE
    Integer
  LONGFORM
    AddCoolingToProposed
  DESCRIPTION
    "A flag that indicates a baseline zonal cooling system will be added to the zone."
  HELP
    "For compliance analysis, a cooling-only system will be added to the proposed
     model if the Primary HVAC system does not have mechanical cooling,
     and the zone does not qualify for a HeatingOnly baseline system."
  INPUTCLASS
    NotInput
  DEFAULT
    if( Proj:IsNoMech > 0 .OR. Proj:IsNoAddMech > 0 .OR. 
        IfValidAnd( HasUnknownHVAC > 0 ) .OR. IfValidAnd( IsExistingHVAC > 0 ) )
    then 0
    else 
    if( IsCond > 0 .AND. ( ( HasClg = 0 .AND. HasNoClg = 0 ) .OR. IfValidAnd( AddClgSys > 0 ) ) )
    then
      if( IsRes > 0 )
      then
        if( Bldg:BaseResSysNum = 2 )
        then 3 // FPFC Res baseline
        else 2 // SZAC Res baseline
        endif
      else 1
      endif
    else 0
    endif endif
  SIZING_PROPOSED
    if( Proj:IsNoMech > 0 .OR. Proj:IsNoAddMech > 0 .OR. 
        HasUnknownHVAC > 0 .OR. IsExistingHVAC > 0 )
    then 0
    else 
    if( IsCond > 0 .AND. HtgOnlySysArea = 0 .AND. 
        ( ( HasClg = 0 .AND. HasNoClg = 0 ) .OR. IfValidAnd( AddClgSys > 0 ) ) )
    then
      if( IsRes > 0 )
      then
        if( Bldg:BaseResSysNum = 2 )
        then 3 // FPFC ResZnSys baseline
        else 2 // SZAC ResZnZys baseline
        endif
      else 1 // NonResZnSys
      endif
    else 0
    endif endif
  SIZING_BASELINE
    0
ENDRULE
// Add single-zone cooling system to proposed when applicable
RULE ThrmlZn:SimSysRef[1] 
  DESCRIPTION
    "The name of the ZoneSystem that serves the ThermalZone for compliance
     or simulation work-around purposes only."
  SIZING_PROPOSED
    if( AddClgToProp > 0 )
    then
      switch( AddClgToProp )
        case 1 : RuleLibrary( ZnSys, "PropNoClg-NonResZnSys", 1 ) // NonRes
        case 2 : RuleLibrary( ZnSys, "PropNoClg-ResZnSys1", 1 ) // SZAC Res
        case 3 : RuleLibrary( ZnSys, "PropNoClg-ResZnSys2", 1 ) // FPFC Res
        default : UNCHANGED
      endswitch
    else UNCHANGED
    endif
  SIZING_BASELINE
    UNDEFINED   
ENDRULE
// Set priority
RULE ThrmlZn:SimSysPriority[1] 
  DESCRIPTION
    "The priority of the ZoneSystem that serves the ThermalZone for compliance
     or simulation work-around purposes only."
  SIZING_PROPOSED
    if( LocalCompAssigned( SimSysRef[1] ) = 0 )
    then UNDEFINED
    else
      Max( Max( ValidOr( PriAirCondgSysPriority[1], 0 ), ValidOr( PriAirCondgSysPriority[2], 0 ) ),
                ValidOr( VentSysPriority, 0 ) ) + 1
    endif
  SIZING_BASELINE
    UNDEFINED   
ENDRULE
// Set flag at System if it is a PropNoClg system added by rules
RULE NEW ZnSys:AddClgToPropSys
  DATATYPE
    Integer
  LONGFORM
    AddCoolingToProposedSystem
  DESCRIPTION
    "A flag to indicate the ZnSys has been added to the proposed for 
     compliance purposes only."
  DEFAULT
    0
  SIZING_PROPOSED
    if( SumRevRef( ThrmlZn:SimSysRef[1], ThrmlZn:AddClgToProp ) > 0 )
    then 1
    else 0
    endif
  SIZING_BASELINE
    ValidOr( AddClgToPropSys, 0 ) 
ENDRULE

// Create plant for PropNoClg-ResZnSys2 if one does not already exist
// Condenser water plant
RULE NEW Proj:BaseCWFluidSysRef
  SIZING
    if( IfValidAnd( MaxChild( ThrmlZn:AddClgToProp ) > 2 ) .AND. 
        LocalCompAssigned( BaseCWFluidSysRef ) = 0 )
    then // Create chilled water system
      RuleLibrary( FluidSystem, "BaseCWSystem" ) 
    else UNCHANGED
    endif
 ENDRULE
RULE HtRej:FluidSegOutRef
  SIZING
    if( FluidSys:IsBaseSys > 0 .AND.
        LocalCompAssigned( FluidSegOutRef ) = 0 )
    then 
      if( Name = Parent( HtRejRef ) )
      then RuleLibrary( FluidSeg, "BaseCWPriSupSeg", 0, "BaseCWSystem" )
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE
RULE HtRej:FluidSegInRef
  SIZING
    if( FluidSys:IsBaseSys > 0 .AND.
        LocalCompAssigned( FluidSegInRef ) = 0 )
    then 
      if( Name = Parent( HtRejRef ) )
      then RuleLibrary( FluidSeg, "BaseCWPriRetSeg", 0, "BaseCWSystem" )
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE
// Chiller plant
RULE NEW Proj:BaseChWFluidSysRef
  SIZING
    if( IfValidAnd( MaxChild( ThrmlZn:AddClgToProp ) > 2 ) .AND.
        LocalCompAssigned( BaseChWFluidSysRef ) = 0 .AND.
        LocalCompAssigned( BaseCWFluidSysRef ) > 0 )
    then RuleLibrary( FluidSystem, "BaseChWSystem" ) 
    else UNCHANGED
    endif
 ENDRULE
// Connect baseline chiller to baseline ChW plant FluidSegs and bring in pump
RULE Chlr:EvapFluidSegOutRef
  SIZING
    if( FluidSys:IsBaseSys > 0 .AND.
        LocalCompAssigned( EvapFluidSegOutRef ) = 0 )
    then 
      if( Name = Parent( ChlrRef ) )
      then RuleLibrary( FluidSeg, "BaseChWPriSupSeg", 0, "BaseChWSystem" )
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE
RULE Chlr:EvapFluidSegInRef
  SIZING
    if( FluidSys:IsBaseSys > 0 .AND.
        LocalCompAssigned( EvapFluidSegInRef ) = 0 )
    then 
      if( Name = Parent( ChlrRef ) )
      then RuleLibrary( FluidSeg, "BaseChWPriRetSeg", 0, "BaseChWSystem" )
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE
RULE Chlr:CndsrFluidSegOutRef
  SIZING
    if( FluidSys:IsBaseSys > 0 .AND.
        LocalCompAssigned( CndsrFluidSegOutRef ) = 0 )
    then 
      if( Name = Parent( ChlrRef ) )
      then RuleLibrary( FluidSeg, "BaseCWPriRetSeg", 0, "BaseCWSystem" )
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE
RULE Chlr:CndsrFluidSegInRef
  SIZING
    if( FluidSys:IsBaseSys > 0 .AND.
        LocalCompAssigned( CndsrFluidSegInRef ) = 0 )
    then 
      if( Name = Parent( ChlrRef ) )
      then RuleLibrary( FluidSeg, "BaseCWPriSupSeg", 0, "BaseCWSystem" )
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE
// Assign Assign baseline ChW system FluidSegs to PropNoClg-ResZnSys2 CoilClg objects
RULE ZnSys:CoilClg:FluidSegInRef
  SIZING
    if( ZnSys:BaseSysNum > 0 .AND. 
        LocalCompAssigned( FluidSegInRef ) = 0 .AND.
        Type = "ChilledWater" )
    then "BaseChWPriSupSeg"
    else UNCHANGED
    endif
ENDRULE
RULE ZnSys:CoilClg:FluidSegOutRef
  SIZING
    if( ZnSys:BaseSysNum > 0 .AND.
        LocalCompAssigned( FluidSegOutRef ) = 0 .AND.
        Type = "ChilledWater" )
    then "BaseChWPriRetSeg"
    else UNCHANGED
    endif
ENDRULE


// ********** Change TrmlUnit for SZVAV & DOAS *********************************
// -----------------------------------------------------------------------------
// For single-zone, variable-volume systems, including proposed DOASVAV, revise 
// the TrmlUnit:Type from Type = 'Uncontrolled' to Type = 'VAVNoReheatBox'
// This is the current workaround for simulating VAV in E+
RULE AirSys:TrmlUnit:Type
  SIZING
    if( ( AirSys:Type = "SZVAVAC" .OR. AirSys:Type = "SZVAVHP" .OR. AirSys:Type = "SZVAVDFHP" .OR.
          AirSys:Type = "DOASVAV" )
        .AND. Type = "Uncontrolled" )
    then "VAVNoReheatBox"
    else UNCHANGED
    endif
ENDRULE

// ********** Active/Passive Beams *********************************************
// -----------------------------------------------------------------------------
// Rules to set-up ActiveBeam systems prior to evaluation of other rules, 
// such as CoilCooling-Capacity.
RULE NEW TrmlUnit:IsActiveBeam
  DATATYPE
    Integer
  DESCRIPTION
    "A flag that indicates whether the ZoneSystem represents an 'ActiveBeam' system."
  HELP
    "'ActiveBeam' is a TerminalUnit:Type that is used to describe an active chilled beam,
     an active heating panel, or a combination of the two. During evaluation of rules, 
     a correpsonding ZoneSystem:Type = 'FPFC' is added to the user model to represent
     the heating/cooling performance of the beam in the proposed simulation.
     
     The FPFC system is used to model an active beam to facilitate modeling of a VAV DOAS. See
     the the following references for further background:
     https://unmethours.com/question/13250/modeling-vav-active-chilled-beams-in-energyplus-or-openstudio/
     http://www.taylor-engineering.com/Websites/taylorengineering/articles/ASHRAE_Journal_-_VAVR_vs_ACB+DOAS.pdf"
  INPUTCLASS
    NotInput
  DEFAULT
    if( Type = "ActiveBeam" )
    then 1
    else 0
    endif
  SIZING
    if( Type = "ActiveBeam" )
    then 1
    else 0
    endif    
ENDRULE

// Set reverse references to facilitate setting up FPFC ZnSys and its properties
RULE TrmlUnit:ActiveBeamSysRef
  DESCRIPTION
    "A reference to a a ZoneSystem that is used to simulate an active chilled beam for
     zone as a FPFC ZnSys."
  INPUTCLASS 
    NotInput
; CHECKSIM
;   if( IsActiveBeam .AND. LocalCompAssigned( CoilHtgRef ) )
;   then
;     PostError("An ActiveBeam with a heating coil is not currently supported.")
;   else UNCHANGED
;   endif      
  SIZING_PROPOSED
    if( IfValidAnd( IsActiveBeam > 0 ) ) ; .AND. LocalCompAssigned( CoilHtgRef ) = 0 )
    then RuleLibrary( ZnSys, "ActiveBeam", 1 )
    else UNDEFINED
    endif
ENDRULE

RULE NEW ZnSys:ActiveBeamTrmlUnitRef
  DATATYPE
    TrmlUnit
  LONGFORM
    ActiveBeamTerminalUnitReference
  DESCRIPTION
    "A reference to the TerminalUnit that defines the proposed ActiveBeam."
  SIZING_PROPOSED
    if( IfValidAnd( IsActiveBeam > 0 ) )
    then MaxRevRefComp( TrmlUnit:ActiveBeamSysRef, TrmlUnit:FlrAreaServed )
    else UNDEFINED
    endif
ENDRULE

RULE ZnSys:IsActiveBeam
  DESCRIPTION
    "A flag that indicates whether the ZnSys represents an 'ActiveBeam'."
  DEFAULT
    0
//SIZING_PROPOSED
//Specified in library object
ENDRULE

// Set ZnSys:Name to a string that corresponds to the TrmlUnit defined in user's model.
RULE ZnSys:Name
  SIZING_PROPOSED
    if( IfValidAnd( IsActiveBeam > 0 ) )
    then Format( "%s ZnSys", ActiveBeamTrmlUnitRef:Name )
    else UNCHANGED
    endif
ENDRULE
// Set ZnSys;Cnt
RULE ZnSys:Cnt
  SIZING_PROPOSED
    if( IfValidAnd( IsActiveBeam > 0 ) )
    then ActiveBeamTrmlUnitRef:SysCnt
    else UNCHANGED
    endif
ENDRULE
// Revise parent of ActiveBeam coil objects to new ZnSys
RULE TrmlUnit:CoilClg:Parent
  SIZING_PROPOSED
    if( IfValidAnd( IsActiveBeam > 0 ) )
    then ActiveBeamSysRef
    else UNCHANGED
    endif
ENDRULE
// Set parent of TrmlUnit
RULE TrmlUnit:CoilHtg:Parent
  SIZING_PROPOSED
    if( IfValidAnd( IsActiveBeam > 0 ) )
    then ActiveBeamSysRef
    else UNCHANGED
    endif
ENDRULE
// Revise ActiveBeam terminal for simulation
RULE TrmlUnit:TypeSim
  SIZING_PROPOSED
    if( IfValidAnd( IsActiveBeam > 0 ) )
    then "VAVNoReheatBox"
    else UNCHANGED
    endif
ENDRULE
// Set BaseSysNum for ActiveBeam
RULE ZnSys:BaseSysNum
  SIZING_PROPOSED
    if( IfValidAnd( IsActiveBeam > 0 ) )
    then 0
    else UNCHANGED
    endif
ENDRULE
// Set PriAirCondgSysRef for ActiveBeam zones
RULE ThrmlZn:PriAirCondgSysRef[1]
  CHECKSIM
    if( IsCond > 0 .AND. 
        LocalCompAssigned( PriAirCondgSysRef[1] ) .AND. 
        LocalCompAssigned( VentSysRef ) .AND.
        LocalCompAssigned( TrmlUnitRef ) )
    then 
      if( IfValidAnd( TrmlUnitRef:IsActiveBeam > 0 ) .AND. 
          PriAirCondgSysRef[1] != VentSysRef )
      then
        PostError("ThermalZone '%s' is served by an 'ActiveBeam' terminal, 
                   however, the VentilationSystem and PrimaryAirConditioningSystem[1]
                   are not the same system.", Name)
      else
      if( IfValidAnd( TrmlUnitRef:IsActiveBeam > 0 ) .AND. 
          VentSysRef[1]:Type != "DOASCV" .AND.
          VentSysRef[1]:Type != "DOASVAV" )
      then
        PostError("ThermalZone '%s' is served by an 'ActiveBeam' terminal, 
                   however, the VentilationSystem is not a 'DOAS' system.", Name) 
      else UNCHANGED
      endif endif
    else UNCHANGED
    endif
  SIZING_PROPOSED
    if( IsCond > 0 .AND. LocalCompAssigned( TrmlUnitRef ) )
    then
      if( IfValidAnd( TrmlUnitRef:IsActiveBeam > 0 ) )
      then TrmlUnitRef:ActiveBeamSysRef
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE

// -----------------------------------------------------------------------------
// Recalculate ZnSys:*Cnt values for objects added to model
RULE NEW ZnSys:CoilHtgCnt
  SIZING_PROPOSED
    ChildCount( CoilHtg )
ENDRULE

RULE NEW ZnSys:CoilClgCnt
  SIZING_PROPOSED
    ChildCount( CoilClg )
ENDRULE

RULE NEW ZnSys:FanCnt
  SIZING_PROPOSED
    ChildCount( Fan )
ENDRULE

// -----------------------------------------------------------------------------
// Create dummy heating coil and fan object for ZnSys:Type = PassiveBeam
// See ticket 1951
RULE ZnSys:CoilHtgRef 
  SIZING_PROPOSED
    if( Type = "PassiveBeam" .AND. CoilHtgCnt < 1 )
    then RuleLibrary( CoilHtg, "PassiveBeam Dummy CoilHtg", 1, Name )
    else UNCHANGED
    endif
ENDRULE

RULE ZnSys:FanRef 
  SIZING_PROPOSED
    if( Type = "PassiveBeam" .AND. FanCnt < 1 )
    then RuleLibrary( Fan, "PassiveBeam Dummy Fan", 1, Name )
    else UNCHANGED
    endif
ENDRULE

// -----------------------------------------------------------------------------
// Create dummy cooling coil or fan for ZnSys:Type = Furnace and 'FPFC' if there
// is FPFC has no cooling coil. See tickets 2173 and 2705.  These two cases are modeled
// as TypeSim = 'PTAC'
RULE ZnSys:CoilClgRef 
  SIZING_PROPOSED
    if( ( Type = "Furnace" .OR. Type = "FPFC" ) .AND. 
        HasClg = 0 )
    then // Add dummy DX coil for simulation
      RuleLibrary( CoilClg, "Dummy DX CoilClg", 1, Name )
    else UNCHANGED
    endif
ENDRULE

RULE ZnSys:FanRef
  SIZING_PROPOSED
    if( Type = "Furnace" .AND. FanCnt < 1 .AND. IfValidAnd( FurnaceType = "Gravity" ) )
    then // Add dummy fan for simulation
      RuleLibrary( Fan, "Furnace Dummy Fan", 1, Name )
    else UNCHANGED
    endif
ENDRULE

// -----------------------------------------------------------------------------
// Rules for calculating dummy fan flow cap for gravity furnace
RULE ZnSys:Fan:FlowCap
  SIZING_PROPOSED
    if( ZnSys:Type = "Furnace" .AND. IfValidAnd( ZnSys:FurnaceType = "Gravity" ) .AND. 
        IfValidAnd( ZnSys:HtgCap > 0 ) )
    then ZnSys:HtgCap / 1.09 / ( ValidOr( ZnSys:HtgDsgnSupAirTemp, 125 ) - 75 )
    else UNCHANGED
    endif
ENDRULE
//  Set FanCtrl for Gravity Furnace
RULE ZnSys:FanCtrl
  SIZING_PROPOSED
    if( Type = "Furnace" .AND. IfValidAnd( FurnaceType = "Gravity" ) )
    then "Cycling"
    else UNCHANGED
    endif
ENDRULE


// ********** ZnSys:Type='VentilationOnly' to AirSys Rules *********************
// -----------------------------------------------------------------------------
// Create new 'PropVentOnlySys' AirSys for ZnSys:Type = 'VentilationOnly' systems
RULE NEW ThrmlZn:PropVentOnlyAirSysRef
  DATATYPE
    AirSys
  LONGFORM
    ProposedVentilationOnlyAirSystemReference
  DESCRIPTION
    "The name of the AirSys that is created to represent proposed 
     ZnSys:Type = 'VentilationOnly' systems with ExhSysType = 'SupplyOnly',
    'Balanced', and 'HeatRecovery'."
  SIZING_PROPOSED
    if( LocalCompAssigned( VentSysRef ) = ComponentType( "ZnSys" ) )
    then 
      if( BaseSysNum = 0 .AND.
          IfValidAnd( VentSysRef:Type = "VentilationOnly" ) .AND.
          ( IfValidAnd( VentSysRef:ExhSysType = "SupplyOnly" ) .OR.
            IfValidAnd( VentSysRef:ExhSysType = "Balanced" ) .OR.
            IfValidAnd( VentSysRef:ExhSysType = "HeatRecovery" ) ) ) 
      then RuleLibrary( AirSys, "PropVentOnlyAirSys", 1 )
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE
// Create reference at new AirSys to the ThrmlZn it will serve
RULE NEW AirSys:PropVentOnlyThrmlZnRef
  DATATYPE
    ThrmlZn
  LONGFORM
    ProposedVentilationOnlyThermalZoneReference
  DESCRIPTION
    "The name of the thermal zone with ZnSys:Type = 'VentilationOnly' that
     the local AirSys mirrors. Used to transfer data from ThrmlZn to AirSys."
  SIZING_PROPOSED
    MaxRevRefComp( ThrmlZn:PropVentOnlyAirSysRef, ThrmlZn:FlrArea )
ENDRULE
// Create reference at new AirSys to the ZnSys it was created for 
RULE NEW AirSys:PropVentOnlyZnSysRef
  DATATYPE
    ZnSys
  LONGFORM
    ProposedVentilationOnlyZoneSystemReference
  DESCRIPTION
    "The name of the ZnSys:Type = 'VentilationOnly' that
     the local AirSys mirrors. Used to transfer data from ZnSys to AirSys."
  SIZING_PROPOSED
    if( LocalCompAssigned( PropVentOnlyThrmlZnRef ) > 0 )
    then PropVentOnlyThrmlZnRef:VentSysRef:Name
    else UNDEFINED
    endif
ENDRULE
// Assign new PropVentOnlySys as VentSysRef @ ThrmlZn
RULE ThrmlZn:VentSysRef 
  SIZING
    if( LocalCompAssigned( PropVentOnlyAirSysRef ) > 0 )
    then PropVentOnlyAirSysRef:Name
    else UNCHANGED
    endif
ENDRULE
// Set reference to VentSysRef at Space again since proposed/baseline VentSysRefs
// may have been updated for balanced ventilation. 
RULE Spc:VentSysRef
  DESCRIPTION
    "The ThermalZone ventilation system, defined at Spc for data access purposes."
  INPUTCLASS 
    NotInput
  SIZING
    if( LocalCompAssigned( ThrmlZnRef ) )
    then
      if( LocalCompAssigned( ThrmlZnRef:VentSysRef ) )
      then ThrmlZnRef:VentSysRef
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE
// Set flag to indicate the AirSys was created as a PropVentOnlySys
RULE NEW AirSys:IsPropVentOnlySys
  DATATYPE
    Integer
  LONGFORM
    IsProposedVentilationOnlySystem
  DESCRIPTION
    "A flag that indicates the local AirSys mirrors a proposed
     ZnSys:Type = 'VentilationOnly'."
  SIZING_PROPOSED
    if( LocalCompAssigned( PropVentOnlyZnSysRef ) > 0 )
    then 1
    else 0
    endif
ENDRULE
// Set PropVentOnlyZnSysType to determine other parameters of new AirSys
RULE NEW AirSys:PropVentOnlyZnSysType
  DATATYPE
    String
  LONGFORM
    ProposedVentilationOnlyZoneSystemType
  DESCRIPTION
    "The type of the ZnSys:Type = 'VentilationOnly' that
     the local AirSys mirrors."
  SIZING_PROPOSED
    if( IfValidAnd( IsPropVentOnlySys > 0 ) )
    then ValidOr( PropVentOnlyZnSysRef:ExhSysType, "NA" )
    else UNDEFINED
    endif
ENDRULE
// Create heat recovery object if needed
RULE OACtrl:HtRcvryRef
  SIZING_PROPOSED
    if( IfValidAnd( AirSys:IsPropVentOnlySys > 0 ) )
    then
      if( IfValidAnd( AirSys:PropVentOnlyZnSysType = "HeatRecovery" ) )
      then RuleLibrary( HtRcvry, "PropVentOnlyAirSys HtRcvry", 1, AirSys:Name )
      else UNDEFINED
      endif
    else UNCHANGED
    endif
ENDRULE
// Create return fan object if needed
RULE AirSys:AirSeg:FanRef
  SIZING_PROPOSED
    if( IfValidAnd( AirSys:IsPropVentOnlySys > 0 ) .AND.
        Type = "Return" )
    then
      if( IfValidAnd( AirSys:PropVentOnlyZnSysType = "Balanced" ) .OR.
          IfValidAnd( AirSys:PropVentOnlyZnSysType = "HeatRecovery" ) )
      then RuleLibrary( Fan, "PropVentOnlyAirSys RetFan", 1, AirSeg:Name  )
      else UNDEFINED
      endif
    else UNCHANGED
    endif
ENDRULE
// Create and assign TrmlUnit
RULE ThrmlZn:TrmlUnitRef
  SIZING_PROPOSED
    if( LocalCompAssigned( PropVentOnlyAirSysRef ) > 0 )
    then RuleLibrary( TrmlUnit, "PropVentOnlyAirSys TrmlUnit", 1, PropVentOnlyAirSysRef )
    else UNCHANGED
    endif
ENDRULE

RULE TrmlUnit:ZnServedRef
  SIZING
    if( IfValidAnd( AirSys:IsPropVentOnlySys > 0 ) )
    then MaxRevRefComp( ThrmlZn:TrmlUnitRef, ThrmlZn:FlrArea )
    else UNCHANGED
    endif
ENDRULE
// Set Cnt for new AirSystem
RULE AirSys:Cnt
  SIZING_PROPOSED
    if( IfValidAnd( IsPropVentOnlySys > 0 ) )
    then PropVentOnlyZnSysRef:Cnt
    else UNCHANGED
    endif
ENDRULE
;RULE TrmlUnit:Cnt
;  SIZING
;    if( IfValidAnd( AirSys:IsPropVentOnlySys > 0 ) )
;    then 1
;    else UNCHANGED
;    endif
;ENDRULE
// Set Status for new AirSystem
RULE AirSys:Status
  SIZING_PROPOSED
    if( IfValidAnd( IsPropVentOnlySys > 0 ) )
    then PropVentOnlyZnSysRef:Status
    else UNCHANGED
    endif
ENDRULE
// Transfer HRR unitary ventilation status
RULE NEW AirSys:IsBalancedVentSys
  SIZING_PROPOSED
    if( IfValidAnd( AirSys:IsPropVentOnlySys > 0 ) )
    then PropVentOnlyZnSysRef:IsBalancedVentSys
    else UNCHANGED
    endif
ENDRULE
// Transfer HRR unitary ventilation status
RULE NEW AirSys:IsUnitaryHRRVentSys
  SIZING_PROPOSED
    if( IfValidAnd( AirSys:IsPropVentOnlySys > 0 ) )
    then PropVentOnlyZnSysRef:IsUnitaryHRRVentSys
    else UNCHANGED
    endif
ENDRULE
// Transfer HRR fan power adjustment
RULE NEW AirSys:HRRFanPwrAdj
  SIZING_PROPOSED
    if( IfValidAnd( AirSys:IsPropVentOnlySys > 0 ) )
    then PropVentOnlyZnSysRef:HRRFanPwrAdj
    else UNCHANGED
    endif
ENDRULE
// Set PropVentOnlyZnSysRef @ HtRcvry for transferring data from ZnSys to HtRcvry
RULE NEW HtRcvry:PropVentOnlyZnSysRef
  DATATYPE
    ZnSys
  LONGFORM
    ProposedVentilationOnlyZoneSystemReference
  DESCRIPTION
    "The name of the ZnSys:Type = 'VentilationOnly' that
     the local AirSys mirrors. Used to transfer data from ZnSys to HtRcvry."
  SIZING
    if( IfValidAnd( AirSys:IsPropVentOnlySys > 0 ) )
    then AirSys:PropVentOnlyZnSysRef
    else UNCHANGED
    endif
ENDRULE

RULE NEW AirSys:AirSeg:Fan:PropVentOnlyZnSysRef
  DATATYPE
    ZnSys
  LONGFORM
    ProposedVentilationOnlyZoneSystemReference
  DESCRIPTION
    "The name of the ZnSys:Type = 'VentilationOnly' that
     the local AirSys mirrors. Used to transfer data from ZnSys to Fan."
  SIZING
    if( IfValidAnd( AirSys:IsPropVentOnlySys > 0 ) )
    then AirSys:PropVentOnlyZnSysRef
    else UNCHANGED
    endif
ENDRULE


;RULE AirSys:SysVentFlow
;  SIZING_PROPOSED
;    if( LocalCompAssigned( PropVentOnlyZnSysRef ) > 0 )
;    then PropVentOnlyZnSysRef:SysVentFlow
;    else UNCHANGED
;    endif
;ENDRULE



// -----------------------------------------------------------------------------
// Create dummy cooling coil ZnSys:Type = FPFC if none exists and the user's model
// has a chilled water plant. See ticket 2705
// THIS IS NOT USED, since the final approach is to switch the TypeSim from 'FPFC' to 'PTAC'
// These rules left for reference.
;RULE ZnSys:CoilClgRef 
;  CHECKSIM
;    if( ( Type = "FPFC" .OR. Type = "PassiveBeam" ) .AND.
;        SumChildrenIf( CoilClg:CapTotGrossRtd, CoilClg:Type = "ChilledWater" ) = 0 .AND.
;        MaxAll( FluidSeg:FluidSegInForDummyCoilClg ) > 0 .AND.
;        MaxAll( FluidSeg:FluidSegOutForDummyCoilClg ) > 0 )
;    then
;      PostWarning("ZoneSystem '%s' is Type = '%s' but lacks a cooling coil of 
;                   Type = 'ChilledWater', or has 0 Btu/h cooling capacity. A 'Dummy' coil
;                   will be added for simulation purposes.", Name, Type)
;    else UNCHANGED
;    endif
;  SIZING_PROPOSED
;    if( ( Type = "FPFC" .OR. Type = "PassiveBeam" ) .AND. 
;        CoilClgCnt < 1 .AND. 
;        MaxAll( FluidSeg:FluidSegInForDummyCoilClg ) > 0 .AND.
;        MaxAll( FluidSeg:FluidSegOutForDummyCoilClg ) > 0 )
;    then // Create coil only if there are FluidSegs that it can be connected to
;      RuleLibrary( CoilClg, "Dummy ChW CoilClg", 1, Name )
;    else UNCHANGED
;    endif
;ENDRULE
;
;RULE ZnSys:CoilClg:FluidSegInRef
;  SIZING_PROPOSED
;    if( ( ZnSys:Type = "FPFC" .OR. ZnSys:Type = "PassiveBeam" ) .AND. 
;        Type = "ChilledWater" .AND. IfValidAnd( IsDummy > 0 ) .AND. 
;        IfValidAnd( MaxAll( FluidSeg:FluidSegInForDummyCoilClg ) > 0 ) )
;    then MaxAllComp( FluidSeg:FluidSegInForDummyCoilClg ) 
;    else UNCHANGED
;    endif
;ENDRULE
;
;RULE ZnSys:CoilClg:FluidSegOutRef
;  SIZING_PROPOSED
;    if( ( ZnSys:Type = "FPFC" .OR. ZnSys:Type = "PassiveBeam" ) .AND. 
;        Type = "ChilledWater" .AND. IfValidAnd( IsDummy > 0 ) .AND. 
;        IfValidAnd( MaxAll( FluidSeg:FluidSegOutForDummyCoilClg ) > 0 ) )
;    then MaxAllComp( FluidSeg:FluidSegOutForDummyCoilClg ) 
;    else UNCHANGED
;    endif
;ENDRULE


// -----------------------------------------------------------------------------
// Set system priority numbers for ThrmlZn served by ActiveBeams and other systems
// added to the model
RULE ThrmlZn:PriAirCondgSysPriority[1]
// Remove priority checks; priority set by rules
; CHECKSIM
;   if( IsCond > 0 .AND. LocalCompAssigned( TrmlUnitRef ) )
;   then
;     if( TrmlUnitRef:IsActiveBeam = 1 .AND. PriAirCondgSysPriority[1] != 1 )
;     then
;       PostError("ThermalZone '%s' is served by an 'ActiveBeam' terminal, 
;                  however, its system is not defined to be the first 
;                  priority.", Name) 
;     else UNCHANGED
;     endif
;   else
;   if( IsCond > 0 .AND. LocalCompAssigned( PriAirCondgSysRef[1] ) )
;   then
;     if( PriAirCondgSysRef[1]:Type = "PassiveBeam" .AND. PriAirCondgSysPriority[1] != 1 )
;     then
;       PostError("ThermalZone '%s' is served by a 'PassiveBeam' system, 
;                  however, that system is not defined to be the first 
;                  priority.", Name) 
;     else UNCHANGED
;     endif
;   else
;   if( IsCond > 0 .AND. LocalCompAssigned( PriAirCondgSysRef[2] ) )
;   then
;     if( PriAirCondgSysRef[2]:Type = "PassiveBeam" .AND. PriAirCondgSysPriority[2] != 1 )
;     then
;       PostError("ThermalZone '%s' is served by a 'PassiveBeam' system, 
;                  however, that system is not defined to be the first 
;                  priority.", Name) 
;     else UNCHANGED
;     endif  
;   else UNCHANGED
;   endif endif endif
  SIZING_PROPOSED
// Set ActiveBeam and PassiveBeam ZnSys to priority 2, after VentSysRef (DOAS)
// If DOAS is not priority #1, then UMLHs result
    if( IsCond > 0 .AND. LocalCompAssigned( PriAirCondgSysRef[1] ) )
    then
      if( IfValidAnd( PriAirCondgSysRef[1]:IsActiveBeam > 0 ) )
      then 2
      else
      if( IfValidAnd( PriAirCondgSysRef[1]:Type = "PassiveBeam" ) )
      then 2
      else UNCHANGED
      endif endif  
    else
    if( IsCond > 0 .AND. LocalCompAssigned( PriAirCondgSysRef[2] ) )
    then // Second system is set
      if( IfValidAnd( PriAirCondgSysRef[2]:Type = "PassiveBeam" ) )
      then Max( ValidOr( PriAirCondgSysPriority[2], 2) , 2 )
      else UNCHANGED
      endif           
    else UNCHANGED
    endif endif  
ENDRULE

RULE ThrmlZn:PriAirCondgSysPriority[2]
  SIZING_PROPOSED
    if( IsCond > 0 .AND. LocalCompAssigned( PriAirCondgSysRef[2] ) )
    then 
      if( LocalCompAssigned( PriAirCondgSysRef[1] ) )
      then
        if( IfValidAnd( PriAirCondgSysRef[1]:IsActiveBeam > 0 ) )
        then 3 // Set to 3 so ActiveBeam ZnSys can be 2
        else UNCHANGED
        endif
      else
      if( IfValidAnd( PriAirCondgSysRef[2]:Type = "PassiveBeam" ) )
      then 2 // Set to 2 so VentSysRef be 1
      else UNCHANGED
      endif endif
    else UNCHANGED
    endif
ENDRULE

RULE ThrmlZn:VentSysPriority
  SIZING_PROPOSED
    if( IsCond > 0 .AND. 
        LocalCompAssigned( PriAirCondgSysRef[1] ) .AND.
        LocalCompAssigned( VentSysRef ) )
    then
      if( IfValidAnd( PriAirCondgSysRef[1]:IsActiveBeam > 0 ) .OR.
          IfValidAnd( PriAirCondgSysRef[1]:Type = "PassiveBeam" ) )
      then 1 // Set VentSysRef to 1 for zonal beam systems
      else UNCHANGED
      endif
    else UNCHANGED
    endif    
ENDRULE


// ********** Add Dummy coil for ZnSys with CoilHtg:Type = "HeatPump***********
// ----------------------------------------------------------------------------
// Add supplemental heating coil for HPs that prior to 2019-2-0 Final release 
// was being added by OS translator.
RULE ZnSys:CoilHtg:HtPumpSuppCoilHtgRef
  SIZING_PROPOSED
    if( ParentComp = "ZnSys" .AND. Type = "HeatPump" )
    then
      if( LocalCompAssigned( HtPumpSuppCoilHtgRef ) .OR.
          IfValidAnd( ZnSys:BaseSysNum > 0 ) )
      then UNCHANGED
      else 
        RuleLibrary( CoilHtg, "HPSupp-Dummy CoilHtg", 1, ZnSys:Name)
      endif
    else UNCHANGED
    endif
ENDRULE

// -----------------------------------------------------------------------------
// Establish baseline system number at object
RULE NEW ThrmlZn:BaseSysNum
  SIZING_PROPOSED : T24N_2016
    if( LocalCompAssigned( PriAirCondgSysRef[1] ) )
    then PriAirCondgSysRef[1]:BaseSysNum
    else
    if( PrkgGarArea > 0 .AND. HasUnknownHVAC > 0 )
    then 999 // Only create -ab parking garage exhaust if is Core&Shell
    else 0
    endif endif
  SIZING_BASELINE : T24N_2016
    if( LocalCompAssigned( PriAirCondgSysRef[1] ) )
    then PriAirCondgSysRef[1]:BaseSysNum
    else
    if( PrkgGarArea > 0 .AND. HasUnknownHVAC > 0 )
    then 999 // Only create -ab parking garage exhaust if is Core&Shell
    else 0
    endif endif
  SIZING_PROPOSED
    if( LocalCompAssigned( PriAirCondgSysRef[1] ) )
    then PriAirCondgSysRef[1]:BaseSysNum
    else
    if( CodeExhFlow > 0 .AND. HasUnknownHVAC > 0 )
    then 999 // Only create -ap exhaust system if is Core&Shell
    else 0
    endif endif
  SIZING_BASELINE
    if( LocalCompAssigned( PriAirCondgSysRef[1] ) )
    then PriAirCondgSysRef[1]:BaseSysNum
    else
    if( CodeExhFlow > 0 .AND. IsNewExh != 0 )
    then
      if( PrkgGarArea > 0 )
      then zp:BaseSysNum // Baseline = proposed for parking garage
      else 999
      endif
    else 0
    endif endif
ENDRULE

RULE NEW Spc:BaseSysNum
  SIZING
    if( LocalCompAssigned( ThrmlZnRef ) )
    then ThrmlZnRef:BaseSysNum
    else 0
    endif
ENDRULE

RULE NEW TrmlUnit:BaseSysNum
  DATATYPE
    Integer
  LONGFORM
    BaselineSystemNumber
  SIZING
    AirSys:BaseSysNum
ENDRULE

RULE NEW OACtrl:BaseSysNum
  DATATYPE
    Integer
  LONGFORM
    BaselineSystemNumber
  SIZING
    AirSys:BaseSysNum
ENDRULE

RULE NEW Fan:BaseSysNum
  DATATYPE
    Integer
  LONGFORM
    BaselineSystemNumber
  SIZING
    if( ParentComponentType() = "ZnSys" )
    then ZnSys:BaseSysNum
    else AirSys:BaseSysNum
    endif
ENDRULE

RULE NEW CoilClg:BaseSysNum
  DATATYPE
    Integer
  LONGFORM
    BaselineSystemNumber
  SIZING
    if( ParentComponentType() = "ZnSys" )
    then ZnSys:BaseSysNum
    else AirSys:BaseSysNum
    endif
ENDRULE

RULE NEW CoilHtg:BaseSysNum
  DATATYPE
    Integer
  LONGFORM
    BaselineSystemNumber
  SIZING
    if( ParentComponentType() = "ZnSys" )
    then ZnSys:BaseSysNum
    else ValidOr( AirSys:BaseSysNum, 0 )
    endif
ENDRULE

// Set flag to indicate if the system is a proposed system
RULE NEW AirSys:IsPropSys
  DATATYPE
    Integer
  LONGFORM
    IsProposedSystem
  DEFAULT
    1
  SIZING
    if( IfValidAnd( ServesResZn > 0 ) .AND. 
        IfValidAnd( IsPropSys > 0 ) .AND. 
        IfValidAnd( ResHVACAutoSizing > 0 ) )
    then 1 // Is AirSys that ServesResZn that is autosized (BaseSysNum is set to faciltiate autosizing)
    else
    if( IfValidAnd( BaseSysNum > 0 ) = 0 )
    then 1
    else 0
    endif endif
  ANNUAL
    if( IfValidAnd( ServesResZn > 0 ) .AND. 
        IfValidAnd( IsPropSys > 0 ) .AND. 
        IfValidAnd( ResHVACAutoSizing > 0 ) )
    then 1 // Is AirSys that ServesResZn that is autosized (BaseSysNum is set to faciltiate autosizing)
    else
    if( IfValidAnd( BaseSysNum > 0 ) = 0 )
    then 1
    else 0
    endif endif
ENDRULE

RULE NEW ZnSys:IsPropSys
  DATATYPE
    Integer
  LONGFORM
    IsProposedSystem
  DEFAULT
    1
  SIZING
    if( IfValidAnd( BaseSysNum > 0 ) = 0 )
    then 1
    else 0
    endif
  ANNUAL
    if( IfValidAnd( BaseSysNum > 0 ) = 0 )
    then 1
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
// Set project level paramters for reporting
RULE Proj:PropHasNoClgZns
  DESCRIPTION
    "The number of zones in the proposed model that do not have cooling,
     but a cooling system has been added for compliance purposes."
  INPUTCLASS 
    NotInput  
  SIZING_PROPOSED
    SumAll( ThrmlZn:AddClgToProp )
  SIZING_BASELINE
    0
ENDRULE

RULE Proj:AddClgSysZns
  DESCRIPTION
    "The number of zones in the proposed model that the user has indicated
     to add a cooling system (ThrmlZn:AddClgSys = 1)."
  INPUTCLASS 
    NotInput  
  SIZING_PROPOSED
    SumAll( ThrmlZn:AddClgSys )
  SIZING_BASELINE
    0
ENDRULE

RULE Proj:PropHasUnknownHVACZns
  DESCRIPTION
    "The number of zones in the proposed model that have UnknownHVAC."
  INPUTCLASS 
    NotInput  
  DEFAULT
    SumAll( ThrmlZn:HasUnknownHVAC )
ENDRULE

// Set values to revise baseline cooling 
RULE NEW AirSys:BaseHasNoClgZns
  DATATYPE
    Integer
  LONGFORM
    BaselineHasNoCoolingZones
  DESCRIPTION
    "The number of zones served by the baseline AirSys that have HasNoClg selected."
  SIZING
    if( BaseSysNum > 0 )
    then 
      SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:HasNoClg )
    else 0
    endif
ENDRULE
// Set values to revise baseline cooling 
RULE NEW ZnSys:BaseHasNoClgZns
  DATATYPE
    Integer
  LONGFORM
    BaselineHasNoCoolingZones
  SIZING
    if( BaseSysNum > 0 )
    then 
      SumRevRef( ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:HasNoClg )
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
// Whether system is referenced by ResOtherZn(s) vs. ThrmlZn(s)
RULE NEW AirSys:ServesThrmlZn
  SIZING
    if( SumRevRef(ThrmlZn:PriAirCondgSysRef[1], ThrmlZn:Area) > 1 .OR.
        SumRevRef(ThrmlZn:PriAirCondgSysRef[2], ThrmlZn:Area) > 1 .OR.
        SumRevRef(ThrmlZn:VentSysRef, ThrmlZn:Area) > 1 .OR.
        SumRevRef(ThrmlZn:ExhSysRef, ThrmlZn:Area) > 1 .OR.
        SumRevRef(ThrmlZn:SimSysRef[1], ThrmlZn:Area) > 1 .OR. 
        SumRevRef(ThrmlZn:SimSysRef[2], ThrmlZn:Area) > 1 )
    then 1
    else 0
    endif
ENDRULE 
RULE AirSys:ServesResZn
  SIZING
    if( SumRevRef(ResOtherZn:ActiveHVACSystem, ResOtherZn:Area) > 1 )
    then 1
    else 0
    endif
ENDRULE 


// ----------------------------------------------------------------
// Define TypeSim for SDD -> OS translation/simulation for reference in rules
// This is evaulated again in AnalysisControl.rule for final sim
RULE AirSys:TypeSim
  DESCRIPTION
    "The simulates system type for SDD -> OS reverse translator."
  HELP
    "The 'Type' is an important description that is relevant to rules,
     reporting, and how it is represented in the simulation. To separate
     the reporting/rules from the simulatiuon, TypeSim is used to 
     describe how it shall be represented in the simulation. For AirSystems,
     translation is always described as AirLoopHVAC, however, TypeSim 
     may trigger special translation rules."   
  DEFAULT
    switch( Type ) 
      case "SPVAC"           : "SZAC"   
      case "SPVHP"           : "SZHP"
      case "DOASCV"          : "SZAC"
      case "DOASVAV"         : "SZVAVAC" 
      case "SZDFHP"          : "SZHP"
      case "SZVAVDFHP"       : "SZVAVHP"
      default                : Type
    endswitch         
  SIZING
    switch( Type ) 
      case "SPVAC"           : "SZAC"   
      case "SPVHP"           : "SZHP"
      case "DOASCV"          : "SZAC"
      case "DOASVAV"         : "SZVAVAC" 
      case "SZDFHP"          : "SZHP"
      case "SZVAVDFHP"       : "SZVAVHP"
      default                : Type
    endswitch                
  ANNUAL                     
    switch( Type )           
      case "SPVAC"           : "SZAC"   
      case "SPVHP"           : "SZHP"
      case "DOASCV"          : "SZAC"
      case "DOASVAV"         : "SZVAVAC" 
      case "SZDFHP"          : "SZHP"
      case "SZVAVDFHP"       : "SZVAVHP"
      default                : Type
    endswitch
ENDRULE

RULE ZnSys:TypeSim
  DESCRIPTION
    "The simulates system type for SDD -> OS reverse translator."
  HELP
    "The 'Type' is an important description that is relevant to rules,
     reporting, and how it is represented in the simulation.  To separate
     the reporting/rules from the simulatiuon, TypeSim is used to 
     describe how it shall be represented in the simulation.  For example,
     a 'SZAC' and 'SPVAC' system are both represented in E+ as
     ZoneHVAC:PackagedTerminalAirConditioner, i.e. TypeSim = 'PTAC'."
  DEFAULT
    switch( Type )
      case "SZAC"            : "PTAC"
      case "SZHP"            : "PTHP"
      case "SZDFHP"          : "PTHP" 
      case "SPVAC"           : "PTAC"   
      case "SPVHP"           : "PTHP"
      case "MiniSplitAC"     : "PTAC"
      case "MiniSplitHP"     : "PTHP"
      case "Radiant"         : "Radiant"
      case "PassiveBeam"     : "FPFC"
      case "Furnace"         : "PTAC"
      case "FPFC"            : if( IfValidAnd( CoilClgRef:IsDummy > 0 ) )
                               then "PTAC" // Switch to PTAC for simulation
                               else Type
                               endif
      case "VentilationOnly" : "Exhaust"
      default                : Type
    endswitch
  SIZING
    switch( Type )
      case "SZAC"            : "PTAC"
      case "SZHP"            : "PTHP" 
      case "SZDFHP"          : "PTHP"   
      case "SPVAC"           : "PTAC"   
      case "SPVHP"           : "PTHP"
      case "MiniSplitAC"     : "PTAC"
      case "MiniSplitHP"     : "PTHP"
      case "Radiant"         : "Radiant"
      case "PassiveBeam"     : "FPFC"
      case "Furnace"         : "PTAC"
      case "FPFC"            : if( IfValidAnd( CoilClgRef:IsDummy > 0 ) )
                               then "PTAC" // Switch to PTAC for simulation
                               else Type
                               endif
      case "VentilationOnly" : "Exhaust"
      default                : Type
    endswitch
  ANNUAL
    switch( Type )
      case "SZAC"            : "PTAC"
      case "SZHP"            : "PTHP"
      case "SZDFHP"          : "PTHP"    
      case "SPVAC"           : "PTAC"   
      case "SPVHP"           : "PTHP"
      case "MiniSplitAC"     : "PTAC"
      case "MiniSplitHP"     : "PTHP"
      case "Radiant"         : "Radiant"
      case "PassiveBeam"     : "FPFC"
      case "Furnace"         : "PTAC"
      case "FPFC"            : if( IfValidAnd( CoilClgRef:IsDummy > 0 ) )
                               then "PTAC" // Switch to PTAC for simulation
                               else Type
                               endif
      case "VentilationOnly" : "Exhaust"
      default                : Type
    endswitch
ENDRULE


// -----------------------------------------------------------------------------
RULE AirSys:ExcludeFromRpt
  DESCRIPTION
    "A flag that indicates whether the system (and it's child components) 
     should be excluded from the compliance report."
  HELP
    "Generally, only systems that are created by the ruleset to represent
     certain proposed systems (i.e. active chilled beams) or for modeling cooling
     for heating-only systems are excluded from reporting.  Additionally, 
     baseline systems created for the proposed model, are also excluded."
  SIZING_PROPOSED
    if( BaseSysNum > 0 .AND. IsPropSys = 0 )
    then 1 // Exclude baseline system created for proposed model
    else
    if( IfValidAnd( IsPropVentOnlySys > 0 ) )
    then 1 // Exclude PropVentOnlySys AirSys created to represent 'VentilationOnly' systems
    else 0
    endif endif
ENDRULE

RULE ZnSys:ExcludeFromRpt
  DESCRIPTION
    "A flag that indicates whether the system (and it's child components) 
     should be excluded from the compliance report."
  HELP
    "Generally, only systems that are created by the ruleset to represent
     certain proposed systems (i.e. active chilled beams) or for modeling cooling
     for heating-only systems are excluded from reporting.  Additionally, 
     baseline systems created for the proposed model, are also excluded."
  SIZING_PROPOSED
    if( BaseSysNum > 0 )
    then 1 // Exclude baseline system created for proposed model
    else 
    if( IfValidAnd( IsActiveBeam > 0 ) )
    then 1 // Exclude FPFC ZnSys created to represent 'ActiveBeam' systems
    else 0
    endif endif
ENDRULE

RULE FluidSys:ExcludeFromRpt
  DESCRIPTION
    "A flag that indicates whether the system (and it's child components) 
     should be excluded from the compliance report."
  SIZING_PROPOSED
    if( IsBaseSys > 0 )
    then 1
    else 0
    endif
ENDRULE

// Initial rule dev to try and set Priorities. This is a complex, needs a lot more work/testing
// if it will be used

;RULE ThrmlZn:PriAirCondgSysPriorityClg[1]
;  SIZING_PROPOSED
;    if( LocalCompAssigned( PriAirCondgSysRef[1] ) )
;    then
;      if( PriAirCondgSysRef[1]:HasClg > 0 )
;      then PriAirCondgSysPriority[1]
;      else 999
;      endif
;    else UNDEFINED
;    endif
;ENDRULE
;RULE ThrmlZn:PriAirCondgSysPriorityClg[2]
;  SIZING_PROPOSED
;    if( LocalCompAssigned( PriAirCondgSysRef[2] ) )
;    then
;      if( IfValidAnd( PriAirCondgSysRef[2]:ClgCap > 1 ) )
;      then PriAirCondgSysPriority[2]
;      else 999
;      endif
;    else UNDEFINED
;    endif
;ENDRULE
;RULE ThrmlZn:VentSysPriorityClg
;  SIZING_PROPOSED
;    if( LocalCompAssigned( VentSysRef ) )
;    then
;      if( IfValidAnd( VentSysRef:ClgCap > 1 ) )
;      then VentSysPriority
;      else 999
;      endif
;    else UNDEFINED
;    endif
;ENDRULE
;// Set PriorityClg 
;RULE ThrmlZn:PriAirCondgSysPriorityClg[1]
;  SIZING_PROPOSED
;    if( IfValidAnd( PriAirCondgSysPriorityClg[1] < 999 ) )
;    then
;      if( PriAirCondgSysPriorityClg[1] <=
;          Min( ValidOr( PriAirCondgSysPriorityClg[2], 0 ), ValidOr( VentSysPriorityClg, 0 ) ) )
;      then // Pri[1] <= all others
;        1
;      else
;      if( PriAirCondgSysPriorityClg[1] < ValidOr( PriAirCondgSysPriorityClg[2], 0 ) .AND.
;          PriAirCondgSysPriorityClg[1] > ValidOr( VentSysPriorityClg, 0 ) )
;      then // Pri[1] < Pri[2], but Pri[1] > Vent
;        ( ValidOr( VentSysPriorityClg, 0 ) / ValidOr( VentSysPriorityClg, 1 ) ) + 1
;      else // Pri[1] > Pri[2], so make it last
;        ( ValidOr( VentSysPriorityClg, 0 ) / ValidOr( VentSysPriorityClg, 1 ) ) + 
;        ( ValidOr( PriAirCondgSysPriorityClg[2], 0 ) / ValidOr( PriAirCondgSysPriorityClg[2], 1 ) ) + 1
;      endif endif 
;    else UNDEFINED
;    endif
;ENDRULE
;RULE ThrmlZn:PriAirCondgSysPriorityClg[2]
;  SIZING_PROPOSED
;    if( IfValidAnd( PriAirCondgSysPriorityClg[2] < 999 ) )
;    then
;      if( PriAirCondgSysPriorityClg[2] <=
;          Min( ValidOr( PriAirCondgSysPriorityClg[1], 0 ), ValidOr( VentSysPriorityClg, 0 ) ) )
;      then // Pri[2] <= all others
;        1
;      else
;      if( PriAirCondgSysPriorityClg[2] < ValidOr( PriAirCondgSysPriorityClg[1], 0 ) .AND.
;          PriAirCondgSysPriorityClg[2] > ValidOr( VentSysPriorityClg, 0 ) )
;      then // Pri[2] < Pri[1], but Pri[2] > Vent
;        ( ValidOr( VentSysPriorityClg, 0 ) / ValidOr( VentSysPriorityClg, 1 ) ) + 1
;      else // Pri[2] > Pri[1], so make it last
;        ( ValidOr( VentSysPriorityClg, 0 ) / ValidOr( VentSysPriorityClg, 1 ) ) + 
;        ( ValidOr( PriAirCondgSysPriorityClg[1], 0 ) / ValidOr( PriAirCondgSysPriorityClg[1], 1 ) ) + 1
;      endif endif 
;    else UNDEFINED
;    endif
;ENDRULE
;RULE ThrmlZn:VentSysPriorityClg
;  SIZING_PROPOSED
;    if( IfValidAnd( VentSysPriorityClg < 999 ) )
;    then
;      if( VentSysPriorityClg <=
;          Min( ValidOr( PriAirCondgSysPriorityClg[1], 0 ), ValidOr( PriAirCondgSysPriorityClg[1], 0 ) ) )
;      then // Vent <= all others
;        1
;      else
;      if( VentSysPriorityClg < ValidOr( PriAirCondgSysPriorityClg[1], 0 ) .AND.
;          VentSysPriorityClg > ValidOr( PriAirCondgSysPriorityClg[2], 0 ) )
;      then // Vent < Pri[1], but Vent > Pri[2]
;        ( ValidOr( PriAirCondgSysPriorityClg[2], 0 ) / ValidOr( PriAirCondgSysPriorityClg[2], 1 ) ) + 1
;      else // Vent > Pri[1], so make it last
;        ( ValidOr( PriAirCondgSysPriorityClg[1], 0 ) / ValidOr( PriAirCondgSysPriorityClg[1], 1 ) ) + 
;        ( ValidOr( PriAirCondgSysPriorityClg[2], 0 ) / ValidOr( PriAirCondgSysPriorityClg[2], 1 ) ) + 1
;      endif endif 
;    else UNDEFINED
;    endif
;ENDRULE
;// Set Priority to UNDEFINED
;RULE ThrmlZn:PriAirCondgSysPriority[1]
;  SIZING_PROPOSED
;    if( IfValidAnd( PriAirCondgSysPriorityClg[1] > 0 ) )
;    then UNDEFINED
;    else UNCHANGED
;    endif
;ENDRULE
;RULE ThrmlZn:PriAirCondgSysPriority[2]
;  SIZING_PROPOSED
;    if( IfValidAnd( PriAirCondgSysPriorityClg[2] > 0 ) )
;    then UNDEFINED
;    else UNCHANGED
;    endif
;ENDRULE
;RULE ThrmlZn:VentSysPriority
;  SIZING_PROPOSED
;    if( IfValidAnd( VentSysPriorityClg > 0 ) .OR.
;        UniqueVentSysAssigned = 0 )
;    then UNDEFINED
;    else UNCHANGED
;    endif
;ENDRULE
;RULE ThrmlZn:SimSysPriorityClg[1] 
;  SIZING_PROPOSED
;    if( LocalCompAssigned( SimSysRef[1] ) = 0 )
;    then UNDEFINED
;    else
;      Max( Max( ValidOr( PriAirCondgSysPriorityClg[1], 0 ), ValidOr( PriAirCondgSysPriorityClg[2], 0 ) ),
;                ValidOr( VentSysPriorityClg, 0 ) ) + 1
;    endif
;  SIZING_BASELINE
;    UNDEFINED   
;ENDRULE
;RULE ThrmlZn:SimSysPriority[1] 
;  SIZING_PROPOSED
;    if( IfValidAnd( SimSysPriorityClg[1] > 0 ) )
;    then UNDEFINED
;    else UNCHANGED
;    endif
;  SIZING_BASELINE
;    UNDEFINED   
;ENDRULE
