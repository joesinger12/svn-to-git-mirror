// Rules to be processed prior to each transform simulation
//
// -------------------------------------------------------------------------
//  Copyright (c) 2012-2021, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------
//


; rulelists that will be evaluated (if defined) during analysis, immediately prior to each simulation (and also prior to ActOnSimInput AnalysisActions) - SAC 04/23/21


;;*************************************************************************
RULELIST "zp_EnergyPlus_PreSim" 1 0 0 0

   "Evaluate rules to add Daylight Saving Time to EPlus IDFs"  Proj:Action =
      {  if ( Proj:DisableDayltSavTimeSim = 0 )
         then EvalRulelist( "EPlus_PreSim_DayltSavTime" ) 
         else UNCHANGED
         endif }

END

;;*************************************************************************
RULELIST "zb_EnergyPlus_PreSim" 1 0 0 0

   "Evaluate rules to add Daylight Saving Time to EPlus IDFs"  Proj:Action =
      {  if ( Proj:DisableDayltSavTimeSim = 0 )
         then EvalRulelist( "EPlus_PreSim_DayltSavTime" ) 
         else UNCHANGED
         endif }

END

;*************************************************************************
RULELIST "ap_EnergyPlus_PreSim" 1 0 0 0

   ; added logic to each rule preventing ap IDF mods when user specifies an alternative Proposed IDF - SAC 12/03/23
   "Evaluate rules to add Daylight Saving Time to EPlus IDFs"  Proj:Action =
      {  if ( DisableDayltSavTimeSim = 0 .AND. IfValidAnd( UseExcptDsgnModel > 0 )==0)
         then EvalRulelist( "EPlus_PreSim_DayltSavTime" ) 
         else UNCHANGED
         endif }
         
   "Evaluate rules to add EMS for SuppHtg LockoutCtrl"  Proj:Action =
      {  if (IfValidAnd( UseExcptDsgnModel > 0 )) then  UNCHANGED
         else  EvalRulelist( "EPlus_PreSim_SuppHtgLockoutCtrl" )  endif  }
         
   "Evaluate rules to add EMS for HtRcvry RetAirReset TempCtrl"  Proj:Action =
      {  if (IfValidAnd( UseExcptDsgnModel > 0 )) then  UNCHANGED
         else  EvalRulelist( "EPlus_PreSim_HtRcvryRetAirResetTempCtrl" )  endif  }

   "Evaluate rules to add output vars to EPlus IDFs"  Proj:Action =
      {  if (IfValidAnd( UseExcptDsgnModel > 0 )) then  UNCHANGED
         else  EvalRulelist( "EPlus_PreSim_OutputVars" )  endif  }
      
   "Evaluate rules to add custom meters to EPlus IDFs"  Meter:Action =
      {  if (IfValidAnd( UseExcptDsgnModel > 0 )) then  UNCHANGED
         else  EvalRulelist( "EPlus_PreSim_Meters", 1 )  endif  }
//      if( Meter = 1 )
//         then EvalRulelist( "EPlus_PreSim_Meters", 1 )  
//         else UNCHANGED
//         endif }
END

;*************************************************************************
RULELIST "ab_EnergyPlus_PreSim" 1 0 0 0

   "Evaluate rules to add Daylight Saving Time to EPlus IDFs"  Proj:Action =
      {  if ( Proj:DisableDayltSavTimeSim = 0 )
         then EvalRulelist( "EPlus_PreSim_DayltSavTime" ) 
         else UNCHANGED
         endif }
         
   "Evaluate rules to add EMS for SuppHtg LockoutCtrl"  Proj:Action =
      {  EvalRulelist( "EPlus_PreSim_SuppHtgLockoutCtrl" ) }
         
   "Evaluate rules to add EMS for HtRcvry RetAirReset TempCtrl"  Proj:Action =
      {  EvalRulelist( "EPlus_PreSim_HtRcvryRetAirResetTempCtrl" ) }

   "Evaluate rules to add output vars to EPlus IDFs"  Proj:Action =
      {  EvalRulelist( "EPlus_PreSim_OutputVars" )  }

   "Evaluate rules to add custom meters to EPlus IDFs"  Meter:Action =
      {  EvalRulelist( "EPlus_PreSim_Meters", 1 ) }
//      if( Meter = 1 )
//         then EvalRulelist( "EPlus_PreSim_Meters", 1 )  
//         else UNCHANGED
//         endif }
      
END

;*************************************************************************
; add RunPeriodControl:DaylightSavingsTime to EPlus IDFs
;*************************************************************************

RULELIST "EPlus_PreSim_DayltSavTime" 1 0 0 0
  "Add RunPeriodControl to EPlus IDFs"  Proj:Action =
      {  WriteToSimInput( Format( "RunPeriodControl:DaylightSavingTime, %s, %s%c \n\n\n", Proj:DayltSavTimeStartDate, Proj:DayltSavTimeEndDate, 59 ) )  }
END

;*************************************************************************
; add EnergyManagementSystem for supplimental heat lock-out control to EPlus IDFs
;*************************************************************************
RULELIST "EPlus_PreSim_SuppHtgLockoutCtrl" 1 0 0 0
  "Add EnergyManagementSystem:Sensor for outdoor air drybulb temperature" Proj:Action = {
      if( SumChildren( CoilHtg:SuppHtgCap ) > 0 )
      then WriteToSimInput( Format( "EnergyManagementSystem:Sensor, \n\n" ) +
                            Format( "  OutdoorDBTemp,\t!- Name \n\n" ) +
                            Format( "  Environment,\t!-  Index Key Name \n\n" ) +
                            Format( "  Site Outdoor Air Drybulb Temperature%c\t!- Output:Variable Name \n\n\n", 59 ) )
      else UNCHANGED endif }
      
// replace space and special character which is not supported in EMS
  "Set CoilHtg:EPlusEMSName" CoilHtg:EPlusEMSName = { if( IfValidAnd( AvailCtrlByEMS > 0 ) .AND. IfValidAnd( SuppHtgCap > 0 ) ) then Name else UNCHANGED endif }
  "Set CoilHtg:EPlusEMSName" CoilHtg:EPlusEMSName = { if( LocalStatus( EPlusEMSName ) > 0 ) then ReplaceInString( " ", "_" ) else UNCHANGED endif }
  "Set CoilHtg:EPlusEMSName" CoilHtg:EPlusEMSName = { if( LocalStatus( EPlusEMSName ) > 0 ) then ReplaceInString( "-", "_" ) else UNCHANGED endif }
  "Set CoilHtg:EPlusEMSName" CoilHtg:EPlusEMSName = { if( LocalStatus( EPlusEMSName ) > 0 ) then ReplaceInString( "/", "_" ) else UNCHANGED endif }
                     
  "Add EnergyManagementSystem:Actuator Supplimental CoilHtg AvailSch" CoilHtg:Action = {
      if( LocalCompAssigned( HtPumpSuppCoilHtgRef ) .AND. IfValidAnd( HtPumpSuppTemp > 0 ) .AND. IfValidAnd( ServesResZn > 0 ) = 0 )
      then WriteToSimInput( Format( "EnergyManagementSystem:Actuator, \n\n" ) +
                            Format( "  %s_Avail,\t!- Name \n\n", HtPumpSuppCoilHtgRef:EPlusEMSName ) +
                            Format( "  %s AvailSch,\t!- Actuated Component Unique Name \n\n", HtPumpSuppCoilHtgRef:Name ) +
                            Format( "  Schedule:Constant,\t!- Actuated Component Type \n\n" ) +
                            Format( "  Schedule Value%c\t!- Actuated Component Control Type \n\n\n", 59 ) )
      else UNCHANGED endif }

  "Add EnergyManagementSystem:Program to control Supplimental CoilHtg AvailSch" CoilHtg:Action = {
      if( LocalCompAssigned( HtPumpSuppCoilHtgRef ) .AND. IfValidAnd( HtPumpSuppTemp > 0 ) .AND. IfValidAnd( ServesResZn > 0 ) = 0 )
      then WriteToSimInput( Format( "EnergyManagementSystem:Program, \n\n" ) +
                            Format( "  %s_Avail_Setter,\t!- Name \n\n", HtPumpSuppCoilHtgRef:EPlusEMSName ) +
                            Format( "  SET LockoutSetPt = ( %0.3f - 32 ) * 5 / 9,\t!- Convert lock-out temp from F to C \n\n", HtPumpSuppTemp ) +
                            Format( "  IF OutdoorDBTemp >= LockoutSetPt, \n\n" ) +
                            Format( "  SET %s_Avail = 0, \n\n", HtPumpSuppCoilHtgRef:EPlusEMSName ) + 
                            Format( "  ELSE, \n\n" ) +
                            Format( "  SET %s_Avail = 1, \n\n", HtPumpSuppCoilHtgRef:EPlusEMSName ) + 
                            Format( "  ENDIF%c \n\n\n", 59 ) )
      else UNCHANGED endif }
      
  "Add EnergyManagementSystem:ProgramCallingManager to control Supplimental CoilHtg AvailSch" CoilHtg:Action = {
      if( LocalCompAssigned( HtPumpSuppCoilHtgRef ) .AND. IfValidAnd( HtPumpSuppTemp > 0 ) .AND. IfValidAnd( ServesResZn > 0 ) = 0 )
      then WriteToSimInput( Format( "EnergyManagementSystem:ProgramCallingManager, \n\n" ) +
                            Format( "  %s_Avail_Setter_Mgr,\t!- Name \n\n", HtPumpSuppCoilHtgRef:EPlusEMSName ) +
                            Format( "  BeginTimestepBeforePredictor,\t!- EnergyPlus Model Calling Point \n\n" ) +
                            Format( "  %s_Avail_Setter%c\t!- Program Name 1 \n\n\n", HtPumpSuppCoilHtgRef:EPlusEMSName, 59 ) )
      else UNCHANGED endif }   
END

;*************************************************************************
; add EnergyManagementSystem for HtRcvry ReturnAirReset TempCtrl to EPlus IDFs
;*************************************************************************
RULELIST "EPlus_PreSim_HtRcvryRetAirResetTempCtrl" 1 0 0 0
  "Set HtRcvry:EPlusEMSName" HtRcvry:EPlusEMSName = { if( IfValidAnd( TempCtrlByEMS > 0 ) ) then Name else UNCHANGED endif }
  "Set HtRcvry:EPlusEMSName" HtRcvry:EPlusEMSName = { if( LocalStatus( EPlusEMSName ) > 0 ) then ReplaceInString( " ", "_" ) else UNCHANGED endif }
  "Set HtRcvry:EPlusEMSName" HtRcvry:EPlusEMSName = { if( LocalStatus( EPlusEMSName ) > 0 ) then ReplaceInString( "-", "_" ) else UNCHANGED endif }

  "Set AirSys:EPlusEMSName" AirSys:EPlusEMSName = { if( IfValidAnd( HtRcvryRef:TempCtrlByEMS > 0 ) ) then Name else UNCHANGED endif }
  "Set AirSys:EPlusEMSName" AirSys:EPlusEMSName = { if( LocalStatus( EPlusEMSName ) > 0 ) then ReplaceInString( " ", "_" ) else UNCHANGED endif }
  "Set AirSys:EPlusEMSName" AirSys:EPlusEMSName = { if( LocalStatus( EPlusEMSName ) > 0 ) then ReplaceInString( "-", "_" ) else UNCHANGED endif }

  "Add EnergyManagementSystem:Sensor to AirSys return node" HtRcvry:Action = {
      if( IfValidAnd( TempCtrl = "ReturnAirReset" ) .AND. IfValidAnd( ServesResZn > 0 ) = 0 )
      then WriteToSimInput( Format( "EnergyManagementSystem:Sensor, \n\n" ) +
                            Format( "  %s_Return_Air_Temp,\t!- Name \n\n", Parent( EPlusEMSName ) ) +
                            Format( "  %s Supply Side (Return Air) Inlet Node,\t!-  Index Key Name \n\n", Parent( Name ) ) +
                            Format( "  System Node Temperature%c\t!- Output:Variable Name \n\n\n", 59 ) )
      else UNCHANGED endif }
      
  "Add EnergyManagementSystem:Actuator to HtRcvry outlet node" HtRcvry:Action = {
      if( IfValidAnd( TempCtrl = "ReturnAirReset" ) .AND. IfValidAnd( ServesResZn > 0 ) = 0 )
      then WriteToSimInput( Format( "EnergyManagementSystem:Actuator, \n\n" ) +
                            Format( "  %s_Setpoint,\t!- Name \n\n", EPlusEMSName ) +
                            Format( "  %s Setpoint,\t!- Actuated Component Unique Name \n\n", Name ) +
                            Format( "  Schedule:Year,\t!- Actuated Component Type \n\n" ) +
                            Format( "  Schedule Value%c\t!- Actuated Component Control Type \n\n\n", 59 ) )
      else UNCHANGED endif }
    
  "Add EnergyManagementSystem:Program to HtRcvry outlet node" HtRcvry:Action = {
      if( IfValidAnd( TempCtrl = "ReturnAirReset" ) .AND. IfValidAnd( TempSetptRstRetLowSim != TempSetptRstRetHiSim ) .AND. IfValidAnd( ServesResZn > 0 ) = 0 )
      then WriteToSimInput( Format( "EnergyManagementSystem:Program, \n\n" ) +
                            Format( "  %s_Setpoint_Setter,\t!- Name \n\n", EPlusEMSName ) +
                            Format( "  IF %s_Return_Air_Temp > %0.3f, \n\n", Parent( EPlusEMSName ), TempSetptRstRetLowSim ) +
                            Format( "  SET %s_Setpoint = %0.3f, \n\n", EPlusEMSName, TempSetptRstSupLowSim ) + 
                            Format( "  ELSEIF %s_Return_Air_Temp < %0.3f, \n\n", Parent( EPlusEMSName ), TempSetptRstRetHiSim ) +
                            Format( "  SET %s_Setpoint = %0.3f, \n\n", EPlusEMSName, TempSetptRstSupHiSim ) + 
                            Format( "  ELSE, \n\n" ) + 
                            Format( "  SET %s_Setpoint = %0.3f - ( %s_Return_Air_Temp - %0.3f ) * %0.3f, \n\n",
                                    EPlusEMSName, TempSetptRstSupHiSim, Parent( EPlusEMSName ), TempSetptRstRetHiSim, -(TempSetptRstSupLowSim-TempSetptRstSupHiSim)/(TempSetptRstRetLowSim-TempSetptRstRetHiSim) ) +
                            Format( "  ENDIF%c \n\n\n", 59 ) )
      else ; Neutral-offset Return air temperature control; TempSetptRstRetLowSim = TempSetptRstRetHiSim = TempNeutral
      if( IfValidAnd( TempCtrl = "ReturnAirReset" ) .AND. IfValidAnd( ServesResZn > 0 ) = 0 )
      then WriteToSimInput( Format( "EnergyManagementSystem:Program, \n\n" ) +
                            Format( "  %s_Setpoint_Setter,\t!- Name \n\n", EPlusEMSName ) +
                            Format( "  IF %s_Return_Air_Temp > %0.3f, \n\n", Parent( EPlusEMSName ), TempSetptRstRetLowSim ) +
                            Format( "  SET %s_Setpoint = %0.3f, \n\n", EPlusEMSName, TempSetptRstSupLowSim ) + 
                            Format( "  ELSEIF %s_Return_Air_Temp < %0.3f, \n\n", Parent( EPlusEMSName ), TempSetptRstRetHiSim ) +
                            Format( "  SET %s_Setpoint = %0.3f, \n\n", EPlusEMSName, TempSetptRstSupHiSim ) + 
                            Format( "  ELSE, \n\n" ) + 
                            Format( "  SET %s_Setpoint = %0.3f, \n\n",
                                    EPlusEMSName, (TempSetptRstSupLowSim+TempSetptRstSupHiSim)/2 ) +
                            Format( "  ENDIF%c \n\n\n", 59 ) )
      else UNCHANGED endif endif }      
      
  "Add EnergyManagementSystem:ProgramCallingManager to HtRcvry outlet node" HtRcvry:Action = {
      if( IfValidAnd( TempCtrl = "ReturnAirReset" ) .AND. IfValidAnd( ServesResZn > 0 ) = 0 )
      then WriteToSimInput( Format( "EnergyManagementSystem:ProgramCallingManager, \n\n" ) +
                            Format( "  %s_Setpoint_Setter_Mgr,\t!- Name \n\n", EPlusEMSName ) +
                            Format( "  BeginTimestepBeforePredictor,\t!- EnergyPlus Model Calling Point \n\n" ) +
                            Format( "  %s_Setpoint_Setter%c\t!- Program Name 1 \n\n\n", EPlusEMSName, 59 ) )
      else UNCHANGED endif }   
END

;*************************************************************************
; add output vars to EPlus IDFs
;*************************************************************************
RULELIST "EPlus_PreSim_OutputVars" 1 0 0 0
  "Add output vars for Thermal Zone" 
    Proj:Action = {
      if ( u:SimVarsThrmlZn > 0 )
      then EvalRulelist( "EPlus_PreSim_SimVarsThrmlZn" ) 
      else UNCHANGED
      endif  }

  "Add output vars for ZoneSYstem Components" 
    Proj:Action = {
      if ( u:SimVarsHVACZn > 0 )
      then EvalRulelist( "EPlus_PreSim_SimVarsHVACZn" ) 
      else UNCHANGED
      endif  }
      
  "Add output vars for ZoneSystem Temperature/Flow" 
    Proj:Action = {
      if ( u:SimVarsHVACZnTempFlow > 0 )
      then EvalRulelist( "EPlus_PreSim_SimVarsHVACZnTempFlow" ) 
      else UNCHANGED
      endif  }
END


RULELIST "EPlus_PreSim_SimVarsThrmlZn" 1 0 0 0
;Exhaust Nodes
  "Add Propexhfan Inlet Node System Node Temperature output var to EPlus IDFs"   ThrmlZn:Action = 
      {  WriteToSimInput( Format( "Output:Variable, %s Propexhfan Inlet Node, System Node Temperature, %s%c \n\n\n", ThrmlZn:Name, Proj:SimVarsInterval, 59 ) )  }
  "Add Propexhfan Inlet Node System Node Standard Density Volume Flow Rate output var to EPlus IDFs"   ThrmlZn:Action = 
      {  WriteToSimInput( Format( "Output:Variable, %s Propexhfan Inlet Node, System Node Standard Density Volume Flow Rate, %s%c \n\n\n", ThrmlZn:Name, Proj:SimVarsInterval, 59 ) )  }
  "Add BaseExhfan Inlet Node System Node Temperature output var to EPlus IDFs"   ThrmlZn:Action = 
      {  WriteToSimInput( Format( "Output:Variable, %s BaseExhfan Inlet Node, System Node Temperature, %s%c \n\n\n", ThrmlZn:Name, Proj:SimVarsInterval, 59 ) )  }
  "Add BaseExhfan Inlet Node System Node Standard Density Volume Flow Rate output var to EPlus IDFs"   ThrmlZn:Action = 
      {  WriteToSimInput( Format( "Output:Variable, %s BaseExhfan Inlet Node, System Node Standard Density Volume Flow Rate, %s%c \n\n\n", ThrmlZn:Name, Proj:SimVarsInterval, 59 ) )  }
;Return Nodes
  "Add Inlet Node System Node Temperature output var to EPlus IDFs"   ZnSys:Action = 
      {  WriteToSimInput( Format( "Output:Variable, %s Inlet Node, System Node Temperature, %s%c \n\n\n", ZnSys:Name, Proj:SimVarsInterval, 59 ) )  }
  "Add Inlet Node System Node Standard Density Volume Flow Rate output var to EPlus IDFs"   ZnSys:Action = 
      {  WriteToSimInput( Format( "Output:Variable, %s Inlet Node, System Node Standard Density Volume Flow Rate, %s%c \n\n\n", ZnSys:Name, Proj:SimVarsInterval, 59 ) )  }
  "Add Return Air Node System Node Temperature output var to EPlus IDFs"   ThrmlZn:Action = 
      {  WriteToSimInput( Format( "Output:Variable, %s Return Air Node, System Node Temperature, %s%c \n\n\n", ThrmlZn:Name, Proj:SimVarsInterval, 59 ) )  }
  "Add Return Air Node System Node Standard Density Volume Flow Rate output var to EPlus IDFs"   ThrmlZn:Action = 
      {  WriteToSimInput( Format( "Output:Variable, %s Return Air Node, System Node Standard Density Volume Flow Rate, %s%c \n\n\n", ThrmlZn:Name, Proj:SimVarsInterval, 59 ) )  }
;Inlet Nodes      
  "Add Outlet Node System Node Temperature output var to EPlus IDFs"   ZnSys:Action = 
      {  WriteToSimInput( Format( "Output:Variable, %s Outlet Node, System Node Temperature, %s%c \n\n\n", ZnSys:Name, Proj:SimVarsInterval, 59 ) )  }
  "Add Outlet Node System Node Standard Density Volume Flow Rate output var to EPlus IDFs"   ZnSys:Action = 
      {  WriteToSimInput( Format( "Output:Variable, %s Outlet Node, System Node Standard Density Volume Flow Rate, %s%c \n\n\n", ZnSys:Name, Proj:SimVarsInterval, 59 ) )  }     
  "Add Trml Outlet Node System Node Temperature output var to EPlus IDFs"   TrmlUnit:Action = 
      {  WriteToSimInput( Format( "Output:Variable, %s Outlet Node, System Node Temperature, %s%c \n\n\n", TrmlUnit:Name, Proj:SimVarsInterval, 59 ) )  }
  "Add Trml Outlet Node System Node Standard Density Volume Flow Rate output var to EPlus IDFs"   TrmlUnit:Action = 
      {  WriteToSimInput( Format( "Output:Variable, %s Outlet Node, System Node Standard Density Volume Flow Rate, %s%c \n\n\n", TrmlUnit:Name, Proj:SimVarsInterval, 59 ) )  } 
;Thermal Zone
  "Add Zone Air Temperature output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone Air Temperature, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone Mechanical Ventilation Standard Density Volume Flow Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone Mechanical Ventilation Standard Density Volume Flow Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone Infiltration Standard Density Volume Flow Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone Infiltration Standard Density Volume Flow Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
END


RULELIST "EPlus_PreSim_SimVarsHVACZn" 1 0 0 0
;Fan   
  "Add hourly Fan Electricity Rate output var to EPlus IDFs"  Proj:Action =
      {  WriteToSimInput( Format( "Output:Variable, *, Fan Electricity Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
;Air Terminal      
  "Add Zone Air Terminal VAV Damper Position output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone Air Terminal VAV Damper Position, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone Air Terminal Outdoor Air Volume Flow Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone Air Terminal Outdoor Air Volume Flow Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
;WSHP
  "Add Zone Water to Air Heat Pump Total Heating Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone Water to Air Heat Pump Total Heating Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone Water to Air Heat Pump Total Cooling Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone Water to Air Heat Pump Total Cooling Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone Water to Air Heat Pump Sensible Cooling Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone Water to Air Heat Pump Sensible Cooling Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone Water to Air Heat Pump Electricity Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone Water to Air Heat Pump Electricity Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone Water to Air Heat Pump Compressor Part Load Ratio output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone Water to Air Heat Pump Compressor Part Load Ratio, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
;PTHP
  "Add Zone Packaged Terminal Heat Pump Total Heating Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone Packaged Terminal Heat Pump Total Heating Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone Packaged Terminal Heat Pump Total Cooling Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone Packaged Terminal Heat Pump Total Cooling Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
;PTAC
  "Add Zone Packaged Terminal Air Conditioner Total Heating Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone Packaged Terminal Air Conditioner Total Heating Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone Packaged Terminal Air Conditioner Total Cooling Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone Packaged Terminal Air Conditioner Total Cooling Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
;Baseboard      
  "Add Baseboard Electricity Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Baseboard Electricity Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Baseboard Total Heating Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Baseboard Total Heating Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
;VRF      
  "Add Zone VRF Air Terminal Cooling Electricity Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone VRF Air Terminal Cooling Electricity Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone VRF Air Terminal Total Cooling Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone VRF Air Terminal Total Cooling Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone VRF Air Terminal Sensible Cooling Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone VRF Air Terminal Sensible Cooling Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone VRF Air Terminal Latent Cooling Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone VRF Air Terminal Latent Cooling Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone VRF Air Terminal Heating Electricity Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone VRF Air Terminal Heating Electricity Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone VRF Air Terminal Total Heating Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone VRF Air Terminal Total Heating Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone VRF Air Terminal Sensible Heating Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone VRF Air Terminal Sensible Heating Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone VRF Air Terminal Latent Heating Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone VRF Air Terminal Latent Heating Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone VRF Air Terminal Fan Availability Status output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone VRF Air Terminal Fan Availability Status, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
;Radiant
  "Add Zone Radiant HVAC Heating Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone Radiant HVAC Heating Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone Radiant HVAC Cooling Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone Radiant HVAC Cooling Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone Radiant HVAC Mass Flow Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone Radiant HVAC Mass Flow Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone Radiant HVAC Inlet Temperature output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone Radiant HVAC Inlet Temperature, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone Radiant HVAC Outlet Temperature output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone Radiant HVAC Outlet Temperature, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
  "Add Zone Radiant HVAC Electricity Rate output var to EPlus IDFs"  Proj:Action = 
      {  WriteToSimInput( Format( "Output:Variable, *, Zone Radiant HVAC Electricity Rate, %s%c \n\n\n", Proj:SimVarsInterval, 59 ) )  }
END


RULELIST "EPlus_PreSim_SimVarsHVACZnTempFlow" 1 0 0 0
  "Add Mixed Air Node System Node Temperature output var to EPlus IDFs"   ZnSys:Action = 
      {  if ( ZnSys:type = "VRF" )
         then WriteToSimInput( Format( "Output:Variable, %s Mixer Outlet Node, System Node Temperature, %s%c \n\n\n", ZnSys:Name, Proj:SimVarsInterval, 59 ) )
         else WriteToSimInput( Format( "Output:Variable, %s Mixed Air Node, System Node Temperature, %s%c \n\n\n", ZnSys:Name, Proj:SimVarsInterval, 59 ) )
         endif  }
  "Add Mixed Air Node System Node Standard Density Volume Flow Rate output var to EPlus IDFs"   ZnSys:Action = 
      {  if ( ZnSys:type = "VRF" )
         then WriteToSimInput( Format( "Output:Variable, %s Mixer Outlet Node, System Node Standard Density Volume Flow Rate, %s%c \n\n\n", ZnSys:Name, Proj:SimVarsInterval, 59 ) )
         else WriteToSimInput( Format( "Output:Variable, %s Mixed Air Node, System Node Standard Density Volume Flow Rate, %s%c \n\n\n", ZnSys:Name, Proj:SimVarsInterval, 59 ) )
         endif  }
  "Add Relief Air Node System Node Temperature output var to EPlus IDFs"   ZnSys:Action = 
      {  if ( ZnSys:type = "VRF" )
         then WriteToSimInput( Format( "Output:Variable, %s Relief Node Name, System Node Temperature, %s%c \n\n\n", ZnSys:Name, Proj:SimVarsInterval, 59 ) )
         else WriteToSimInput( Format( "Output:Variable, %s Relief Air Node, System Node Temperature, %s%c \n\n\n", ZnSys:Name, Proj:SimVarsInterval, 59 ) )
         endif  }
  "Add Relief Air Node System Node Standard Density Volume Flow Rate output var to EPlus IDFs"   ZnSys:Action = 
      {  if ( ZnSys:type = "VRF" )
         then WriteToSimInput( Format( "Output:Variable, %s Relief Node Name, System Node Standard Density Volume Flow Rate, %s%c \n\n\n", ZnSys:Name, Proj:SimVarsInterval, 59 ) )
         else WriteToSimInput( Format( "Output:Variable, %s Relief Air Node, System Node Standard Density Volume Flow Rate, %s%c \n\n\n", ZnSys:Name, Proj:SimVarsInterval, 59 ) )
         endif  }
  "Add OA Node System Node Temperature output var to EPlus IDFs"   ZnSys:Action = 
      {  if ( ZnSys:type = "VRF" )
         then WriteToSimInput( Format( "Output:Variable, %s Outdoor Air Node, System Node Temperature, %s%c \n\n\n", ZnSys:Name, Proj:SimVarsInterval, 59 ) )
         else WriteToSimInput( Format( "Output:Variable, %s OA Node, System Node Temperature, %s%c \n\n\n", ZnSys:Name, Proj:SimVarsInterval, 59 ) )
         endif  }
  "Add OA Node System Node Standard Density Volume Flow Rate output var to EPlus IDFs"   ZnSys:Action = 
      {  if ( ZnSys:type = "VRF" )
         then WriteToSimInput( Format( "Output:Variable, %s Outdoor Air Node, System Node Standard Density Volume Flow Rate, %s%c \n\n\n", ZnSys:Name, Proj:SimVarsInterval, 59 ) )
         else WriteToSimInput( Format( "Output:Variable, %s OA Node, System Node Standard Density Volume Flow Rate, %s%c \n\n\n", ZnSys:Name, Proj:SimVarsInterval, 59 ) )
         endif  }
END
;*************************************************************************

;*************************************************************************
; Set Meter Type
;*************************************************************************
RULELIST "SetAsElecMeter" 1 0 0 0
  "Set as Electric Meter" Meter:Type = { "Electricity" }
END

RULELIST "SetAsGasMeter" 1 0 0 0
  "Set as Electric Meter" Meter:Type = { "NaturalGas" }
END

;*************************************************************************
; add Custom Meters to EPlus IDFs
;*************************************************************************
RULELIST "EPlus_PreSim_Meters" 1 0 0 0
;----------CustomMeter:Lighting
  "Write header for custom meter : lighting" Meter:Action = 
    { if( HasCompLtg > 0 ) then WriteToSimInput( Format( "Meter:Custom, %s:Lighting, Electricity,\n\n", Name ) ) else UNCHANGED endif }
  "Write space regulated lights" Meter:Action =
    { if( HasCompLtgReg > 0 ) then WriteToSimInput( ListRevRefIf( Spc:ElecMeterRef, Spc:CompLPDRegSim > 0 , "  %s\n", "  %s\n", "  %s\n", Spc:MeterElec_LtgReg ) ) else UNCHANGED endif }
  "Write space non-regulated lights" Meter:Action =
    { if( HasCompLtgNonReg > 0 ) then WriteToSimInput( ListRevRefIf( Spc:ElecMeterRef, Spc:CompLPDNonRegSim > 0, "  %s\n", "  %s\n", "  %s\n", Spc:MeterElec_LtgNonReg ) ) else UNCHANGED endif }
  "End meter : lighting" Meter:Action = 
    { if( HasCompLtg > 0 ) then WriteToSimInput( Format( "  %c \n\n", 59 ) ) else UNCHANGED endif}
    
  "Write output to database" Meter:Action = 
    { if( HasCompLtg > 0 ) then WriteToSimInput( Format( "Output:Meter, %s:Lighting, Hourly%c\n\n\n", Name, 59 ) ) else UNCHANGED endif }
    
  ;----------CustomMeter:IndrFans
  "Write header for custom meter : IndrFans" Meter:Action = 
    { if( HasFan > 0 ) then WriteToSimInput( Format( "Meter:Custom, %s:IndrFans, Electricity,\n\n", Name ) ) else UNCHANGED endif }
  "Write fan" Meter:Action =
    { if( HasSysFan > 0 ) then  WriteToSimInput( ListRevRefIf( Fan:ElecMeterRef, Fan:IsSysFan > 0, "  %s\n", "  %s\n", "  %s\n", Fan:MeterElec_Fan ) ) else UNCHANGED endif }
  "Write fan" Meter:Action =
    { if( HasGenExhFan > 0 ) then  WriteToSimInput( ListRevRefIf( ThrmlZn:ElecMeterRef, ThrmlZn:HasGenExhFan > 0, "  %s\n", "  %s\n", "  %s\n", ThrmlZn:MeterElec_Fan ) ) else UNCHANGED endif }
  "End meter : IndrFans" Meter:Action = 
    { if( HasFan > 0 ) then WriteToSimInput( Format( "  %c \n\n", 59 ) ) else UNCHANGED endif }    
    
  "Write output to database" Meter:Action = 
    { if( HasFan > 0 ) then WriteToSimInput( Format( "Output:Meter, %s:IndrFans, Hourly%c\n\n\n", Name, 59 ) ) else UNCHANGED endif }
    
  ;----------CustomMeter:SpcHeat
  "Write header for custom meter : SpcHeat" Meter:Action = 
    { if( HasHtgElec > 0 ) then WriteToSimInput( Format( "Meter:Custom, %s:SpcHeat, Electricity,\n\n", Name ) ) else UNCHANGED endif }
  "Write heating coil" Meter:Action =
    { if( HasCoilHtgElec > 0 ) then  WriteToSimInput( ListRevRefIf( CoilHtg:ElecMeterRef, CoilHtg:IsElecHtg > 0, "  %s\n", "  %s\n", "  %s\n", CoilHtg:MeterElec_Htg ) ) else UNCHANGED endif }
  "Write VRF System" Meter:Action =
    { if( HasHtgVRF > 0 ) then  WriteToSimInput( ListRevRefIf( VRFSys:ElecMeterRef, VRFSys:HtgCapNetRtd > 0, "  %s\n", "  %s\n", "  %s\n", VRFSys:MeterElec_Htg ) ) else UNCHANGED endif }
  "Write boiler" Meter:Action =
    { if( HasBlr > 0 ) then  WriteToSimInput( ListRevRefIf( Blr:ElecMeterRef, Blr:CapRtdSim > 0, "  %s\n", "  %s\n", "  %s\n", Blr:MeterElec_Htg ) ) else UNCHANGED endif }
  "End meter : SpcHeat" Meter:Action = 
    { if( HasHtgElec > 0 ) then WriteToSimInput( Format( "  %c \n\n", 59 ) ) else UNCHANGED endif }    
  
  "Write output to database" Meter:Action = 
    { if( HasHtgElec > 0 ) then WriteToSimInput( Format( "Output:Meter, %s:SpcHeat, Hourly%c\n\n\n", Name, 59 ) ) else UNCHANGED endif }
  
  "Write header for custom meter : SpcHeat" Meter:Action = 
    { if( HasHtgGas > 0 ) then WriteToSimInput( Format( "Meter:Custom, %s:SpcHeat, NaturalGas,\n\n", Name ) ) else UNCHANGED endif }
  "Write heating coil" Meter:Action =
    { if( HasCoilHtgGas > 0 ) then  WriteToSimInput( ListRevRefIf( CoilHtg:GasMeterRef, CoilHtg:IsGasHtg > 0, "  %s\n", "  %s\n", "  %s\n", CoilHtg:MeterGas_Htg ) ) else UNCHANGED endif }
  "Write Boiler" Meter:Action =
    { if( HasBlrGas > 0 ) then  WriteToSimInput( ListRevRefIf( Blr:GasMeterRef, Blr:IsGasBlr > 0, "  %s\n", "  %s\n", "  %s\n", Blr:MeterGas_Htg ) ) else UNCHANGED endif }
  "End meter : SpcHeat" Meter:Action = 
    { if( HasHtgGas > 0 ) then WriteToSimInput( Format( "  %c \n\n", 59 ) ) else UNCHANGED endif }    
    
  "Write output to database" Meter:Action = 
    { if( HasHtgGas > 0 ) then WriteToSimInput( Format( "Output:Meter, %s:SpcHeat, Hourly%c\n\n\n", Name, 59 ) ) else UNCHANGED endif }
    
  ;----------CustomMeter:SpcCool
  "Write header for custom meter : SpcCool" Meter:Action = 
    { if( HasClgElec > 0 ) then WriteToSimInput( Format( "Meter:Custom, %s:SpcCool, Electricity,\n\n", Name ) ) else UNCHANGED endif }
  "Write cooling coil" Meter:Action =
    { if( HasCoilClgElec > 0 ) then  WriteToSimInput( ListRevRefIf( CoilClg:ElecMeterRef, CoilClg:IsElecClg > 0, "  %s\n", "  %s\n", "  %s\n", CoilClg:MeterElec_Clg ) ) else UNCHANGED endif }
  "Write evaporative cooler" Meter:Action =
    { if( HasEvapClr > 0 ) then  WriteToSimInput( ListRevRefIf( EvapClr:ElecMeterRef, EvapClr:Eff > 0, "  %s\n", "  %s\n", "  %s\n", EvapClr:MeterElec_Clg ) ) else UNCHANGED endif }
  "Write VRF System" Meter:Action =
    { if( HasClgVRF > 0 ) then  WriteToSimInput( ListRevRefIf( VRFSys:ElecMeterRef, VRFSys:ClgCapNetRtd > 0, "  %s\n", "  %s\n", "  %s\n", VRFSys:MeterElec_Clg ) ) else UNCHANGED endif }
  "Write chiller" Meter:Action =
    { if( HasChlr > 0 ) then  WriteToSimInput( ListRevRefIf( Chlr:ElecMeterRef, Chlr:CapRtdSim > 0, "  %s\n", "  %s\n", "  %s\n", Chlr:MeterElec_Clg ) ) else UNCHANGED endif }
  "End meter : SpcCool" Meter:Action = 
    { if( HasClgElec > 0 ) then WriteToSimInput( Format( "  %c \n\n", 59 ) ) else UNCHANGED endif }    
  
  "Write output to database" Meter:Action = 
    { if( HasClgElec > 0 ) then WriteToSimInput( Format( "Output:Meter, %s:SpcCool, Hourly%c\n\n\n", Name, 59 ) ) else UNCHANGED endif }
  
  ;----------CustomMeter:HeatRej
  "Write header for custom meter : HeatRej" Meter:Action = 
    { if( HasHtRej > 0 ) then WriteToSimInput( Format( "Meter:Custom, %s:HeatRej, Electricity,\n\n", Name ) ) else UNCHANGED endif }
  "Write Cooling tower" Meter:Action =
    { if( HasHtRej > 0 ) then  WriteToSimInput( ListRevRefIf( HtRej:ElecMeterRef, HtRej:CapRtdSim > 0, "  %s\n", "  %s\n", "  %s\n", HtRej:MeterElec_Clg ) ) else UNCHANGED endif }
  "End meter : HeatRej" Meter:Action = 
    { if( HasHtRej > 0 ) then WriteToSimInput( Format( "  %c \n\n", 59 ) ) else UNCHANGED endif }      
    
  "Write output to database" Meter:Action = 
    { if( HasHtRej > 0 ) then WriteToSimInput( Format( "Output:Meter, %s:HeatRej, Hourly%c\n\n\n", Name, 59 ) ) else UNCHANGED endif }
    
  ;----------CustomMeter:DomHW    
  "Write header for custom meter : electric water heating" Meter:Action = 
    { if( HasWtrHtrElec > 0 ) then WriteToSimInput( Format( "Meter:Custom, %s:DomHW, Electricity,\n\n", Name ) ) else UNCHANGED endif }
  "Write boiler" Meter:Action =
    { if( HasWtrHtrElec > 0 ) then  WriteToSimInput( ListRevRefIf( WtrHtr:ElecMeterRef, WtrHtr:IsElecWtrHtr > 0, "  %s\n", "  %s\n", "  %s\n", WtrHtr:MeterElec_Htg ) ) else UNCHANGED endif }
  "End meter : electric water heating" Meter:Action = 
    { if( HasWtrHtrElec > 0 ) then WriteToSimInput( Format( "  %c \n\n", 59 ) ) else UNCHANGED endif }     
    
  "Write output to database" Meter:Action = 
    { if( HasWtrHtrElec > 0 ) then WriteToSimInput( Format( "Output:Meter, %s:DomHW, Hourly%c\n\n\n", Name, 59 ) ) else UNCHANGED endif }
  
  "Write header for custom meter : gas water heating" Meter:Action = 
    { if( HasWtrHtrGas > 0 ) then WriteToSimInput( Format( "Meter:Custom, %s:DomHW, NaturalGas,\n\n", Name ) ) else UNCHANGED endif }
  "Write water heater" Meter:Action =
    { if( HasWtrHtrGas > 0 ) then  WriteToSimInput( ListRevRefIf( WtrHtr:GasMeterRef, WtrHtr:IsGasWtrHtr > 0, "  %s\n", "  %s\n", "  %s\n", WtrHtr:MeterGas_Htg ) ) else UNCHANGED endif }
  "End meter : gas water heating" Meter:Action = 
    { if( HasWtrHtrGas > 0 ) then WriteToSimInput( Format( "  %c \n\n", 59 ) ) else UNCHANGED endif }      
    
  "Write output to database" Meter:Action = 
    { if( HasWtrHtrGas > 0 ) then WriteToSimInput( Format( "Output:Meter, %s:DomHW, Hourly%c\n\n\n", Name, 59 ) ) else UNCHANGED endif }
    
  ;----------CustomMeter:PumpMisc
  "Write header for custom meter : PumpMisc" Meter:Action = 
    { if( HasPump > 0 .OR. HasHtRcvry > 0 ) then WriteToSimInput( Format( "Meter:Custom, %s:PumpMisc, Electricity,\n\n", Name ) ) else UNCHANGED endif }
  "Write pump" Meter:Action =
    { if( HasUserPump > 0 ) then  WriteToSimInput( ListRevRefIf( Pump:ElecMeterRef, Pump:FlowCapSim > 0, "  %s\n", "  %s\n", "  %s\n", Pump:MeterElec_Pump ) ) else UNCHANGED endif }
  "Write pump" Meter:Action =
    { if( HasOSPump > 0 ) then  WriteToSimInput( ListRevRefIf( FluidSys:ElecMeterRef, FluidSys:HasOSPump > 0, "  %s\n", "  %s\n", "  %s\n", FluidSys:MeterElec_Pump ) ) else UNCHANGED endif }
  "Write HtRcvry System" Meter:Action =
    { if( HasHtRcvry > 0 ) then  WriteToSimInput( ListRevRefIf( HtRcvry:ElecMeterRef, HtRcvry:SupFlowRtdSim > 0, "  %s\n", "  %s\n", "  %s\n", HtRcvry:MeterElec_HtRcvry ) ) else UNCHANGED endif }
  "End meter : PumpMisc" Meter:Action = 
    { if( HasPump > 0 .OR. HasHtRcvry > 0 ) then WriteToSimInput( Format( "  %c \n\n", 59 ) ) else UNCHANGED endif }    
    
  "Write output to database" Meter:Action = 
    { if( HasPump > 0 .OR. HasHtRcvry > 0 ) then WriteToSimInput( Format( "Output:Meter, %s:PumpMisc, Hourly%c\n\n\n", Name, 59 ) ) else UNCHANGED endif }

;----------CustomMeter:Process (non-compliance load)
  "Write header for custom meter : Recept" Meter:Action = 
    { if( HasRecpt > 0 ) then WriteToSimInput( Format( "Meter:Custom, %s:Recept, Electricity,\n\n", Name ) ) else UNCHANGED endif }
  "Write space receptacal" Meter:Action =
    { if( HasRecpt > 0 ) then WriteToSimInput( ListRevRefIf( Spc:ElecMeterRef, Spc:RecptPwrDens > 0, "  %s\n", "  %s\n", "  %s\n", Spc:MeterElec_Recpt ) ) else UNCHANGED endif }
  "End meter : process" Meter:Action = 
    { if( HasRecpt > 0 .OR. HasOtherLtg > 0 ) then WriteToSimInput( Format( "  %c \n\n", 59 ) ) else UNCHANGED endif }
    
  "Write output to database" Meter:Action = 
    { if( HasRecpt > 0 ) then WriteToSimInput( Format( "Output:Meter, %s:Recept, Hourly%c\n\n\n", Name, 59 ) ) else UNCHANGED endif }


  "Write header for custom meter : equipment" Meter:Action = 
    { if( HasIntEqpElec > 0 ) then WriteToSimInput( Format( "Meter:Custom, %s:Process, Electricity,\n\n", Name ) ) else UNCHANGED endif }
  "Write space electric process" Meter:Action =
    { if( HasProcElec > 0 ) then WriteToSimInput( ListRevRefIf( Spc:ElecMeterRef, Spc:ProcElecPwrDens > 0, "  %s\n", "  %s\n", "  %s\n", Spc:MeterElec_ProcElec ) ) else UNCHANGED endif }
  "Write space refrigeration" Meter:Action =
    { if( HasRfrgElec > 0 ) then WriteToSimInput( ListRevRefIf( Spc:ElecMeterRef, Spc:CommRfrgEPD > 0, "  %s\n", "  %s\n", "  %s\n", Spc:MeterElec_RfrgElec ) ) else UNCHANGED endif }
  "Write space elevator" Meter:Action =
    { if( HasElev > 0 ) then WriteToSimInput( ListRevRefIf( Spc:ElecMeterRef, Spc:ElevCnt > 0, "  %s\n", "  %s\n", "  %s\n", Spc:MeterElec_ElevElec ) ) else UNCHANGED endif }
  "Write space escalator" Meter:Action =
    { if( HasEscal > 0 ) then WriteToSimInput( ListRevRefIf( Spc:ElecMeterRef, Spc:EscalCnt > 0, "  %s\n", "  %s\n", "  %s\n", Spc:MeterElec_EscalElec ) ) else UNCHANGED endif }
  "End meter : process" Meter:Action = 
    { if( HasIntEqpElec > 0 .OR. HasOtherLtg > 0 ) then WriteToSimInput( Format( "  %c \n\n", 59 ) ) else UNCHANGED endif }
    
  "Write output to database" Meter:Action = 
    { if( HasIntEqpElec > 0 ) then WriteToSimInput( Format( "Output:Meter, %s:Process, Hourly%c\n\n\n", Name, 59 ) ) else UNCHANGED endif }
    
    
  "Write header for custom meter : OthrLtg" Meter:Action = 
    { if( HasOtherLtg > 0 ) then WriteToSimInput( Format( "Meter:Custom, %s:OthrLtg, Electricity,\n\n", Name ) ) else UNCHANGED endif }    
  "Write space regulated lights" Meter:Action =
    { if( HasOtherLtgReg > 0 ) then WriteToSimInput( ListRevRefIf( Spc:ElecMeterRef, Spc:OtherLPDRegSim > 0 , "  %s\n", "  %s\n", "  %s\n", Spc:MeterElec_LtgReg ) ) else UNCHANGED endif }
  "Write space non-regulated lights" Meter:Action =
    { if( HasOtherLtgNonReg > 0 ) then WriteToSimInput( ListRevRefIf( Spc:ElecMeterRef, Spc:OtherLPDNonRegSim > 0, "  %s\n", "  %s\n", "  %s\n", Spc:MeterElec_LtgNonReg ) ) else UNCHANGED endif }
  "End meter : OthrLtg" Meter:Action = 
    { if( HasOtherLtg > 0 ) then WriteToSimInput( Format( "  %c \n\n", 59 ) ) else UNCHANGED endif }

  "Write output to database" Meter:Action = 
    { if( HasOtherLtg > 0 ) then WriteToSimInput( Format( "Output:Meter, %s:OthrLtg, Hourly%c\n\n\n", Name, 59 ) ) else UNCHANGED endif }
    
    
  "Write header for custom meter : ProcMtrs" Meter:Action = 
    { if( HasProcMtr > 0 ) then WriteToSimInput( Format( "Meter:Custom, %s:ProcMtrs, Electricity,\n\n", Name ) ) else UNCHANGED endif }
  "Write fan" Meter:Action =
    { if( HasProcMtr > 0 ) then  WriteToSimInput( ListRevRefIf( ThrmlZn:ElecMeterRef, ThrmlZn:HasProcMtr > 0, "  %s\n", "  %s\n", "  %s\n", ThrmlZn:MeterElec_Fan ) ) else UNCHANGED endif }    
  "End meter : ProcMtrs" Meter:Action = 
    { if( HasProcMtr > 0 ) then WriteToSimInput( Format( "  %c \n\n", 59 ) ) else UNCHANGED endif }
    
  "Write output to database" Meter:Action = 
    { if( HasProcMtr > 0 ) then WriteToSimInput( Format( "Output:Meter, %s:ProcMtrs, Hourly%c\n\n\n", Name, 59 ) ) else UNCHANGED endif }
    
    
  "Write header for custom meter : Recept" Meter:Action = 
    { if( HasEqpGas > 0 ) then WriteToSimInput( Format( "Meter:Custom, %s:Recept, NaturalGas,\n\n", Name ) ) else UNCHANGED endif }
  "Write space gas equipment" Meter:Action =
    { if( HasEqpGas > 0 ) then  WriteToSimInput( ListRevRefIf( Spc:GasMeterRef, Spc:GasEqpPwrDens > 0, "  %s\n", "  %s\n", "  %s\n", Spc:MeterGas_EqpGas ) ) else UNCHANGED endif }
  "End meter : Recept" Meter:Action = 
    { if( HasEqpGas > 0 ) then WriteToSimInput( Format( "  %c \n\n", 59 ) ) else UNCHANGED endif }  
    
  "Write output to database" Meter:Action = 
    { if( HasEqpGas > 0 ) then WriteToSimInput( Format( "Output:Meter, %s:Recept, Hourly%c\n\n\n", Name, 59 ) ) else UNCHANGED endif }

  "Write header for custom meter : process" Meter:Action = 
    { if( HasProcGas > 0 ) then WriteToSimInput( Format( "Meter:Custom, %s:Process, NaturalGas,\n\n", Name ) ) else UNCHANGED endif }
  "Write space gas process" Meter:Action =
    { if( HasProcGas > 0 ) then WriteToSimInput( ListRevRefIf( Spc:GasMeterRef, Spc:ProcGasPwrDens > 0, "  %s\n", "  %s\n", "  %s\n", Spc:MeterGas_ProcGas ) ) else UNCHANGED endif }
  "End meter : process" Meter:Action = 
    { if( HasProcGas > 0 ) then WriteToSimInput( Format( "  %c \n\n", 59 ) ) else UNCHANGED endif }  
    
  "Write output to database" Meter:Action = 
    { if( HasProcGas > 0 ) then WriteToSimInput( Format( "Output:Meter, %s:Process, Hourly%c\n\n\n", Name, 59 ) ) else UNCHANGED endif }
END


;*************************************************************************

ENDFILE

