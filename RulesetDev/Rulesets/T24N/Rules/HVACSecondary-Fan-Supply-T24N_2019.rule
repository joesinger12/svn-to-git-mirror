// HVAC Secondary Systems - Fans - Supply
//
// -------------------------------------------------------------------------
//  Copyright (c) 2013-2017, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------


// ********** System Fan Power Allowance ***************************************
// =========================== AirSystem =======================================
// Set baseline fan power modeling method
RULE NEW AirSys:BaseFanModelingMthd
  DATATYPE
    Enumeration
  LONGFORM
    BaselineFanModelingMethod
  OPTION
    StaticPressure
    BrakeHorsePower
    PowerPerUnitFlow
  INPUTCLASS
    NotInput
  ANNUAL : T24N_2016
    UNDEFINED    
  ANNUAL : T24N_2019
    if( BaseSysNum > 0 )
    then
      switch( BaseSysNum )
        case  1  : "PowerPerUnitFlow" // Res SZAC
        case  2  : "PowerPerUnitFlow" // Res FPFC
        case  9  : "PowerPerUnitFlow" // HV
        case  10 : "PowerPerUnitFlow" // CRAC
        case  11 : "PowerPerUnitFlow" // CRAH
        case 101 : "PowerPerUnitFlow" // BaseVentOnlyAirSys for HRR, per fan
        default : "BrakeHorsePower" // All others
      endswitch 
    else UNDEFINED
    endif
ENDRULE
// Set baseline fan power index (W/cfm) for systems that use PowerPerUnitFlow method
RULE NEW AirSys:BaseFanPwrIdx
  DATATYPE
    Float
  LONGFORM
    BaselineFanPowerIndex
  INPUTCLASS
    NotInput
  UNITS
    W/cfm
  ANNUAL : T24N_2016
    UNDEFINED    
  ANNUAL : T24N_2019
    if( BaseSysNum > 0 .AND. BaseFanModelingMthd = "PowerPerUnitFlow" )
    then
      switch( BaseSysNum )
        case   1 : if( Proj:ResBaseSysChange > 0 ) then 0.45 else 0.35 endif // Res SZAC
        case   2 : 0.35 // Res FPFC
        case   9 : 0.53 // HV
        case  10 : 0.81 // CRAC
        case  11 : 0.81 // CRAH
        case 101 : if( Proj:HRRVentSysChange > 0 .AND. 
                       SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:HRRVentSysRulesApply ) > 0 ) 
                   then // 2019.2.0 ACM rule
                     if( IfValidAnd( IsBalancedVentSys > 0 ) )
                     then 0.70 // For balanced
                     else 0.35 // For unbalanced (supply or exhaust)
                     endif
                   else // 2019.1.2/1.3 rule
                   if( MaxRevRef( ThrmlZn:VentSysRef, ThrmlZn:PropResVentSysPwrIdx ) > 0 )
                   then // Min of proposed fan power or 1.20 W/cfm
                     Min( MaxRevRef( ThrmlZn:VentSysRef, ThrmlZn:PropResVentSysPwrIdx ), 1.20 )
                   else // Default assumption for HasUnknownHVAC > 0 or proposed = W/cfm
                     0.6
                   endif endif
        default : 0 // All others use BHP method
      endswitch
    else // Rules for HRR ventilation
    if( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:BaseSysNum ) > 0 .AND.
        SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:ResVentEquipChkReq ) > 0 .AND. 
        SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:ResVentEquipIsAccessible ) = 0 )
    then // ResVentEquipChkReq applies, but is not checked, Std = Prop up to limit
         // Set limit here
      if( IfValidAnd( IsBalancedVentSys > 0 ) )
      then 0.70 / 2 // For balanced, per fan
      else 0.35 // For supply only
      endif
    else UNDEFINED
    endif endif
ENDRULE
// Estimate MtrEff for systems that use PwrIdx
RULE NEW AirSys:BaseFanMtrPerfIdx
  DATATYPE
    Float
  LONGFORM
    BaselineFanMotorPerformanceIndex
  INPUTCLASS
    NotInput
  ANNUAL : T24N_2016
    UNDEFINED  
  ANNUAL
    if( BaseSysNum > 0 .AND.
        IfValidAnd( BaseFanPwrIdx > 0 ) .AND.
        IfValidAnd( SupFanCap >= 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", BaseFanPwrIdx * SupFanCap / 745.6)
    else UNDEFINEd
    endif
ENDRULE
// Look up MtrEff based on index in table of Std motor sizes
RULE NEW AirSys:BaseFanMtrEff
  DATATYPE
    Float
  LONGFORM
    BaselineFanMotorEfficiency
  INPUTCLASS
    NotInput
  ANNUAL : T24N_2016
    UNDEFINED
  ANNUAL
    if( BaseSysNum > 0 .AND. 
        IfValidAnd( BaseFanPwrIdx > 0 ) .AND.
        IfValidAnd( BaseFanMtrPerfIdx > 0 ) )
    then // Look-up MtrEff
      StdElecMtrPerf:MotorEfficiency("MotorHPIndex", BaseFanMtrPerfIdx)   
    else UNDEFINED
    endif
ENDRULE
// Supply fan base allowance, not including credits
RULE NEW AirSys:BaseFanBHPAllowance
  DATATYPE
    Float
  LONGFORM
    BaselineFanBrakeHorsepowerAllowance
  DESCRIPTION
    "The baseline fan power allowance, including supply, return/relief,
     and exhaust fans, but not including proposed additional fan pressure
     drop credits."
  INPUTCLASS
    NotInput
  UNITS
    hp
  ANNUAL : T24N_2016
    UNDEFINED
  ANNUAL : T24N_2019
    if( BaseSysNum > 0 )
    then
      if( BaseFanModelingMthd = "BrakeHorsePower" .AND.
          IfValidAnd( SupFanCap > 0 ) )
      then 
        if( Type = "PVAV" .OR. Type = "VAV" )
        then 0.0013 * SupFanCap
        else 0.00094 * SupFanCap
        endif
      else
      if( BaseFanModelingMthd = "PowerPerUnitFlow" .AND.
          IfValidAnd( BaseFanPwrIdx > 0 ) .AND.
          IfValidAnd( SupFanCap > 0 ) .AND.
          IfValidAnd( BaseFanMtrEff > 0 ) )
      then
        if( BaseSysNum > 100 )
        then // AirSys (DOAS) VentSys, use SysVentFlow for fan capacity
          BaseFanPwrIdx * SysVentFlow * BaseFanMtrEff / 745.6
        else // All other systems
          BaseFanPwrIdx * SupFanCap * BaseFanMtrEff / 745.6 
        endif
      else 0 
      endif endif
    else 0
    endif
ENDRULE
// Calculate relief fan adjustment. 
RULE NEW AirSys:BaseReliefFanBHPAllowance
  DATATYPE
    Float
  LONGFORM
    BaselineReliefFanBrakeHorsepowerAllowance
  DESCRIPTION
    "The baseline relief fan power allowance."
  INPUTCLASS
    NotInput
  UNITS
    hp
  ANNUAL : T24N_2016
    UNDEFINED
  ANNUAL : T24N
    0 // Baseline has no relief fans for 2019 and beyond
// Old 2019 rule
;   if( BaseSysNum > 0 .AND. 
;       IfValidAnd( SysVentFlow > 0 ) .AND.
;       IfValidAnd( ReliefFanCap > 0 ) )
;   then // Calculation based on 0.5" at min flow
;     if( ReliefFanCap < 10000)
;     then // 40% fan eff
;       SysVentFlow * 0.5 * ( 0.1175 / 745.6 ) / 0.4
;     else // 50% fan eff
;       SysVentFlow * 0.5 * ( 0.1175 / 745.6 ) / 0.4
;     endif
;   else 0
;   endif
  ANNUAL
    0
ENDRULE
// Calculate return fan adjustment. 
RULE NEW AirSys:BaseReliefFanBHPAllowance
  DATATYPE
    Float
  LONGFORM
    BaselineReturnFanBrakeHorsepowerAllowance
  DESCRIPTION
    "The baseline return fan power allowance."
  INPUTCLASS
    NotInput
  UNITS
    hp
  ANNUAL : T24N_2016
    UNDEFINED
  ANNUAL : T24N
    0 // Baseline has no return fans for 2019 and beyond
ENDRULE
// Include PD credits and any other adjustments
RULE NEW AirSys:BaseFanBHPWithAdj
  DATATYPE
    Float
  LONGFORM
    BaselineFanBrakeHorsepowerWithAdjustments
  DESCRIPTION
    "The baseline total fan power allowance plus proposed additional pressure drop 
     credits and other adjustments."
  INPUTCLASS
    NotInput
  UNITS
    hp
  ANNUAL : T24N_2016
    UNDEFINED
  ANNUAL : T24N_2019
// For 2019, the *FanPwrAdj values have the units of bhp
    if( BaseSysNum > 0 )
    then
      if( BaseSysNum > 100 )
      then // AirSys (DOAS) VentSys, no FanFwrAdj
        BaseFanBHPAllowance
      else
      if( ( LabArea > 0 .AND. Bldg:LabExhFlow > 10000 ) .OR. CommKitArea > 0 )
      then // Lab buildings w/ >10000 cfm exh and CommKit systems have separate exh fan power allowance
           // for exhaust, so only add TotNonExhSysFanPwrAdj. 
        BaseFanBHPAllowance + TotNonExhSysFanPwrAdj
      else // All other cases, add adjust
        BaseFanBHPAllowance + TotSysFanPwrAdj
      endif endif
    else 0
    endif
ENDRULE

// =========================== ZoneSystem ======================================
// Set baseline fan power modeling method
RULE NEW ZnSys:BaseFanModelingMthd
  DATATYPE
    Enumeration
  LONGFORM
    BaselineFanModelingMethod
  OPTION
    StaticPressure
    BrakeHorsePower
    PowerPerUnitFlow
  INPUTCLASS
    NotInput
  ANNUAL : T24N_2016
    UNDEFINED    
  ANNUAL
    if( BaseSysNum > 0 )
    then
      switch( BaseSysNum )
        case 1  : "PowerPerUnitFlow" // Res SZAC
        case 2  : "PowerPerUnitFlow" // Res FPFC
        case 9  : "PowerPerUnitFlow" // HV
        case 10 : "PowerPerUnitFlow" // CRAC
        case 11 : "PowerPerUnitFlow" // CRAH
        default : "BrakeHorsePower"  // All others
      endswitch 
    else UNDEFINED
    endif
ENDRULE
// Set baseline fan power index (W/cfm) for systems that use PowerPerUnitFlow method
RULE NEW ZnSys:BaseFanPwrIdx
  DATATYPE
    Float
  LONGFORM
    BaselineFanPowerIndex
  INPUTCLASS
    NotInput
  UNITS
    W/cfm
  ANNUAL : T24N_2016
    UNDEFINED    
  ANNUAL : T24N_2019
    if( BaseSysNum > 0 .AND. BaseFanModelingMthd = "PowerPerUnitFlow" )
    then
      switch( BaseSysNum )
        case  1 : if( Proj:ResBaseSysChange > 0 ) then 0.45 else 0.35 endif// Res SZAC
        case  2 : 0.35 // Res FPFC
        case  9 : 0.59 // HV
        case 10 : 0.81 // CRAC
        case 11 : 0.81 // CRAH
        default : 0    // All others use BHP method
      endswitch
    else
    if( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:BaseSysNum ) > 0 .AND.
        SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:ResVentEquipChkReq ) > 0 .AND. 
        SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:ResVentEquipIsAccessible ) = 0 )
    then // ResVentEquipChkReq applies, but is not checked, Std = Prop up to limit
         // Set limit here
      if( IfValidAnd( IsBalancedVentSys > 0 ) )
      then 0.70 // For balanced
      else 0.35 // For unbalanced (supply or exhaust)
      endif
    else UNDEFINED
    endif endif
ENDRULE
// Estimate MtrEff for systems that use PwrIdx
RULE NEW ZnSys:BaseFanMtrPerfIdx
  DATATYPE
    Float
  LONGFORM
    BaselineFanMotorPerformanceIndex
  INPUTCLASS
    NotInput
  ANNUAL : T24N_2016
    UNDEFINED  
  ANNUAL
    if( BaseSysNum > 0 .AND.
        IfValidAnd( BaseFanPwrIdx > 0 ) .AND.
        IfValidAnd( SupFanCap >= 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", BaseFanPwrIdx  * SupFanCap / 745.6)
    else UNDEFINEd
    endif
ENDRULE
// Look up MtrEff based on index in table of Std motor sizes
RULE NEW ZnSys:BaseFanMtrEff
  DATATYPE
    Float
  LONGFORM
    BaselineFanMotorEfficiency
  INPUTCLASS
    NotInput
  ANNUAL : T24N_2016
    UNDEFINED
  ANNUAL
    if( BaseSysNum > 0 .AND. 
        IfValidAnd( BaseFanPwrIdx > 0 ) .AND.
        IfValidAnd( BaseFanMtrPerfIdx > 0 ) )
    then // Look-up MtrEff
      StdElecMtrPerf:MotorEfficiency("MotorHPIndex", BaseFanMtrPerfIdx)   
    else 0.855 // Default MtrEff for PropNoClg systems
    endif
ENDRULE
// Supply fan base allowance, not including credits
RULE NEW ZnSys:BaseFanBHPAllowance
  DATATYPE
    Float
  LONGFORM
    BaselineFanBrakeHorsepowerAllowance
  DESCRIPTION
    "The baseline fan power allowance, including supply, return/relief,
     and exhaust fans, but not including proposed additional fan pressure
     drop credits."
  INPUTCLASS
    NotInput
  UNITS
    hp
  ANNUAL : T24N_2016
    UNDEFINED
  ANNUAL : T24N_2019
    if( BaseSysNum > 0 )
    then
      if( BaseFanModelingMthd = "BrakeHorsePower" .AND.
          IfValidAnd( SupFanCap > 0 ) )
      then 0.00094 * SupFanCap
      else
      if( BaseFanModelingMthd = "PowerPerUnitFlow" .AND.
          IfValidAnd( BaseFanPwrIdx > 0 ) .AND.
          IfValidAnd( SupFanCap > 0 ) .AND.
          IfValidAnd( BaseFanMtrEff > 0 ) )
      then 
        BaseFanPwrIdx * SupFanCap * BaseFanMtrEff / 745.6 
      else 0 
      endif endif
    else 0
    endif
ENDRULE
// Include PD credits and any other adjustments
RULE NEW ZnSys:BaseFanBHPWithAdj
  DATATYPE
    Float
  LONGFORM
    BaselineFanBrakeHorsepowerWithAdjustments
  DESCRIPTION
    "The baseline total fan power allowance plus proposed additional pressure drop 
     credits and other adjustments."
  INPUTCLASS
    NotInput
  UNITS
    hp
  ANNUAL : T24N_2016
    UNDEFINED
  ANNUAL : T24N_2019
// For 2019, the *FanPwrAdj values have the units of bhp
    if( BaseSysNum > 0 )
    then
      if( ( LabArea > 0 .AND. Bldg:LabExhFlow > 10000 ) .OR. CommKitArea > 0 )
      then // Lab buildings w/ >10000 cfm exh and CommKit systems have separate exh fan power allowance
           // for exhaust, so only add TotNonExhSysFanPwrAdj. 
        BaseFanBHPAllowance + TotNonExhSysFanPwrAdj
      else
      if( BaseSysNum = 1 .OR. BaseSysNum = 2 )
      then 
        // For baseline Res systems
        if( IfValidAnd( AddClgToPropSys > 0 ) )
        then // Is PropNoClg sys for Res, do not add PwrAdj
          BaseFanBHPAllowance
        else
          //TotNonSysFanPwrAdj only includes credit for MERVGTE16PDAdj. 
          // FullyDuctedExhPDAdj added to ExhFanBHP. See Ticket 2542
          BaseFanBHPAllowance + TotNonExhSysFanPwrAdj
        endif
      else // All other cases
        BaseFanBHPAllowance + TotSysFanPwrAdj
      endif endif
    else 0
    endif
ENDRULE

// ********** HRR Fan Power Adjustment ***************************************
// T24N_2019-2-0 RC rule for adjusting HRR zonal ventilation power
RULE NEW AirSys:HRRFanPwrAdj
  DATATYPE
    Float
  LONGFORM
    HighRiseResidentialFanPowerAdjustment
  HELP
    "The fan power adjustment for HERS fan power verification."
  DEFAULT
    if( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:ResVentEquipChkReq ) > 0 .AND.
        Proj:HRRVentSysChange > 0 )
    then 
      if( HERSFanPwrTested = 0 .AND. ResVentEquipHasFID = 0 )
      then 1.0 + Proj:HERSFanPwrTestAdj + Proj:HERSFIDAdj // = 1.15
      else // the following two options aren't currently used
      if( HERSFanPwrTested = 0 .AND. ResVentEquipHasFID > 0 )
      then 1.0 + Proj:HERSFanPwrTestAdj // = 1.05
      else  
      if( HERSFanPwrTested > 0 .AND. ResVentEquipHasFID = 0 )
      then 1.0 + Proj:HERSFIDAdj // = 1.10
      else 1.0 // No adjustment
      endif endif endif
   else
   if( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:HRRVentSysRulesApply ) > 0 )
   then // HRR exhaust systems
     1.0 + Proj:HERSFanPwrTestAdj // = 1.05
   else 1.0
   endif endif
ENDRULE

RULE NEW ZnSys:HRRFanPwrAdj
  DATATYPE
    Float
  LONGFORM
    HighRiseResidentialFanPowerAdjustment
  HELP
    "The fan power adjustment for HERS fan power verification."
  DEFAULT
    if( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:ResVentEquipChkReq ) > 0 .AND.
        Proj:HRRVentSysChange > 0 )
    then 
      if( HERSFanPwrTested = 0 .AND. ResVentEquipHasFID = 0 )
      then 1.0 + Proj:HERSFanPwrTestAdj + Proj:HERSFIDAdj // = 1.15
      else // the following two options aren't currently used
      if( HERSFanPwrTested = 0 .AND. ResVentEquipHasFID > 0 )
      then 1.0 + Proj:HERSFanPwrTestAdj // = 1.05
      else  
      if( HERSFanPwrTested > 0 .AND. ResVentEquipHasFID = 0 )
      then 1.0 + Proj:HERSFIDAdj // = 1.10
      else 1.0 // No adjustment
      endif endif endif
   else
   if( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:HRRVentSysRulesApply ) > 0 )
   then // HRR exhaust systems
     1.0 + Proj:HERSFanPwrTestAdj // = 1.05
   else 1.0
   endif endif
ENDRULE


// ********** Fan System Modeling Method ***************************************
RULE Fan:ModelingMthd
  DESCRIPTION
    "The method used to describe the design power consumption of the fan."  
  HELP
    "Software commonly models fans in three ways. The simple method is for the 
     user to enter the electric power per unit of flow (W/cfm). This method is 
     commonly used for unitary equipment and other small fan systems. A more 
     detailed method is to model the fan as a system whereby the static pressure, 
     fan efficiency, part-load curve, and motor efficiency are specified at 
     design conditions. A third method is to specify brake horsepower at design 
     conditions instead of fan efficiency and static pressure. This is a variation 
     of the second method whereby brake horsepower is specified in lieu of static 
     pressure and fan efficiency. The latter two methods are commonly used for 
     VAV and other larger fan systems." 
  REFERENCE 
    NACM Section 5.7.3.2    
  INPUTCLASS
    Default
//OPTION - Defined in BEMEnums, shown here for reference
//  StaticPressure
//  BrakeHorsePower
//  PowerPerUnitFlow
//DEFAULT : T24N_2019
//  "BrakeHorsePower"
//DEFAULT : T24N
//  "PowerPerUnitFlow"
; CHECKCODE 
// CHECK no longer used, PowerPerUnitFlow is now supported
;    if( Proj:AnalysisType != "Research" .AND. ModelingMthd = "PowerPerUnitFlow" )
;    then 
;      PostError("ModelingMethod for fan '%s' is 'PowerPerUnitFlow', which is 
;                 is not allowed for compliance analysis.  Revise to 'Detailed'
;                 and provide the necessary inputs'", Name)
;    else UNCHANGED
;    endif
  SIZING
    if( BaseSysNum > 0 )
    then "StaticPressure"
    else ModelingMthd  
    endif
  ANNUAL : T24N_2016
    if( BaseSysNum > 0 )
    then
      if( ParentComp = "ZnSys" )
      then "PowerPerUnitFlow"
      else if( ParentComp = "AirSys" )
      then 
        if( AirSys:SubType = "CRAC" .OR. AirSys:SubType = "CRAH" )
        then "PowerPerUnitFlow"
        else "StaticPressure"
        endif
      else "StaticPressure"
      endif endif
    else z:ModelingMthd  
    endif
  ANNUAL : T24N
    if( BaseSysNum > 0 )
    then "BrakeHorsePower"
    else z:ModelingMthd  
    endif
ENDRULE


// ********** Supply Fan Power Index *******************************************
RULE Fan:PwrIdx
  DESCRIPTION
    "The supply fan power, in Watts, per unit of flow, in cfm"
  HELP
    "This is a required input if ModelingMethod = 'PowerPerUnitFlow'. However, 
     this modeling method is not currently supported for compliance analysis.
     This value is calculated from other inputs and shown for reference only." 
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    Default
  MINIMUM
    0
  COMMONMINIMUM
    0.1
  COMMONMAXIMUM
    1.1
  UNITS 
    W/cfm 
  REPORTPRECISION
    3
// Old DEFAULT rule for v3.0 SP2 and prior
;DEFAULT : T24N_2016
;  if( Proj:AutoEffInput = 1 )
;  then // For PROPOSED AutoEfficiency input only
;    if( ParentComp = "ZnSys" ) 
;    then 
;      if( IfValidAnd( ParentValid( Type ) = "Baseboard" ) )
;      then UNDEFINED
;      else if( ZnSys:IsResExhSys )
;      then UNCHANGED // See HVACSecondary-Fan-Exhaust.rule
;      else 0.35 // Baseline system 1 or 2
;      endif endif
;    else
;    if( IfValidAnd( Parent2Valid( SubType ) = "CRAC" ) .OR.
;        IfValidAnd( Parent2Valid( SubType ) = "CRAH" ) )
;    then 
;      if( IfValidAnd( Parent2Valid( ClgCap ) > 54000 ) )
;      then 0.49
;      else 0.39
;      endif
;    else UNDEFINED
;    endif endif
;  else UNDEFINED
;  endif
  DEFAULT : T24N_2016
    if( Proj:AutoEffInput = 1 .AND. ModelingMthd = "PowerPerUnitFlow" )
    then // For PROPOSED AutoEfficiency input only
      if( ParentComp = "ZnSys" )
      then
        if( SysType = "SZAC" .OR. SysType = "FPFC" )
        then 0.35
        else
        if( SysType = "Baseboard" )
        then UNDEFINED
        else
        if( ZnSys:IsResExhSys )
        then 0.58
        else 0.35 // All other ZnSys
        endif endif endif
      else 
      if( ParentComp = "AirSys" )
      then
        if( IfValidAnd( AirSys:SubType = "CRAC" ) .OR.
            IfValidAnd( AirSys:SubType = "CRAH" ) )
        then 
          if( IfValidAnd( AirSys:ClgCap > 54000 ) )
          then 0.49
          else 0.39
          endif
        else 0.9 // All other AirSys
        endif
      else UNDEFINED
      endif endif
    else UNDEFINED
    endif
  DEFAULT : T24N_2019
    if( Proj:AutoEffInput = 1 .AND. ModelingMthd = "PowerPerUnitFlow" )
    then // For PROPOSED AutoEfficiency input only
      if( ParentComp = "ZnSys" )
      then
        if( ZnSys:IsExhSys > 0 )
        then UNCHANGED // See rule below
        else 
        if( SysType = "SZAC" )
        then
          if( Proj:ResBaseSysChange > 0 )
          then 0.45
          else 0.35
          endif // Res SZAC
        else
        if( SysType = "FPFC" )
        then 0.35 // Res FPFC
        else
        if( SysType = "HV" )
        then 0.53 // HV systems; not yet supported for ZnSys
        else
        if( SysType = "Baseboard" )
        then UNDEFINED
        else 0.35 // All other ZnSys
        endif endif endif endif endif
      else 
      if( ParentComp = "AirSys" )
      then
        if( AirSys:IsExhSys > 0 )
        then UNCHANGED // See rule below
        else 
        if( IfValidAnd( AirSys:SubType = "CRAC" ) .OR.
            IfValidAnd( AirSys:SubType = "CRAH" ) )
        then 0.81
        else if( Type = "HV" )
        then 0.53 // HV systems
        else 0.8 // All other AirSys
        endif endif endif
      else UNDEFINED
      endif endif
    else UNDEFINED
    endif
  SIZING
    if( BaseSysNum > 0 )
    then UNDEFINED
    else
    if( ParentComp = "AirSys" )
    then
      if( IfValidAnd( AirSys:IsPropVentOnlySys > 0 ) )
      then // Is PropVentOnlyAirSys created by rules
        if( IfValidAnd( AirSys:PropVentOnlyZnSysType = "Balanced" ) .OR.
            IfValidAnd( AirSys:PropVentOnlyZnSysType = "HeatRecovery" ) )
        then // IsBalanced, split fan power between suppy/return
          PropVentOnlyZnSysRef:RtdPwrIdx * ValidOr( AirSys:HRRFanPwrAdj, 1 ) / 2
        else 
        if( IfValidAnd( AirSys:PropVentOnlyZnSysType = "SupplyOnly" ) .AND.
            AirSeg:Type = "Supply" )
        then // Is SupplyOnly, do not split fan power
          PropVentOnlyZnSysRef:RtdPwrIdx * ValidOr( AirSys:HRRFanPwrAdj, 1 )
        else 0 // Is return fan for SupplyOnly, set power to 0
        endif endif
      else
      if( IfValidAnd( PwrIdx > 0 ) )
      then // Apply HRR adjustment if applicable
        PwrIdx * ValidOr( AirSys:HRRFanPwrAdj, 1 )
      else UNCHANGED
      endif endif
    else
    if( ParentComp = "ZnSys" .AND. 
        IfValidAnd( PwrIdx > 0 ) )
    then // Apply HRR adjustment if applicable
      PwrIdx * ValidOr( ZnSys:HRRFanPwrAdj, 1 )
    else // TrmlUnit and other fans
      PwrIdx
    endif endif endif
  ANNUAL : T24N_2016
    if( BaseSysNum > 0 .AND. ModelingMthd = "PowerPerUnitFlow" )
    then
      if( ParentComp = "ZnSys" ) 
      then 
        if( ZnSys:Type = "FPFC" .OR. ZnSys:Type = "PTAC" )
        then 0.35
        else UNDEFINED
        endif
      else if( ParentComp = "AirSys" )
      then 
        if( AirSys:SubType = "CRAC" .OR.  AirSys:SubType = "CRAH" )
        then 0.39 // Adjustment for economizer is performed in OutsideAirControl.rule
        else UNDEFINED
        endif
      else UNDEFINED
      endif endif
    else z:PwrIdx
    endif
  ANNUAL
// See Zn/AirSys:BaseFanPwrIdx for ab model
    if( BaseSysNum > 0 )
    then UNDEFINED
    else z:PwrIdx
    endif
ENDRULE
// Default PwrIdx for exhaust fans for AutoEffInput rules
RULE Fan:PwrIdx 
  DEFAULT : T24N_2016
    UNCHANGED
  DEFAULT
    if( Proj:AutoEffInput = 1 )
    then // For PROPOSED AutoEfficiency input only
      if( ParentComp = "ZnSys" )
      then
        if( ZnSys:IsHRRVentSys > 0 )
        then 0.3 // Exhaust ventilation system or 1/2 of balanced
        else
        if( ZnSys:IsExhSys > 0 .AND. ZnSys:IsVentOnlySys > 0 )
        then 0.58 // For Hotel/Motel
        else
        if( ZnSys:IsExhSys > 0 )
        then 
          if( ZnSys:LabArea > 0 )
          then // Is lab exhaust system
            if( IfValidAnd( ZnSys:ExhFiltersPwrAdj > 0 ) )
            then // Proposed exhaust system has ExhFilters, default to 0.85 per 140.9(c)3B
              0.85
            else // Proposed has no PD credits
              0.65
            endif
          else 0.2 // General default, ~ 1" static
          endif 
        else UNCHANGED
        endif endif endif
      else
      if( ParentComp = "AirSys" ) 
      then 
        if( AirSys:IsHRRVentSys > 0 )
        then 0.3 // Exhaust ventilation system or 1/2 of balanced
        else
        if( AirSys:IsExhSys > 0 .AND. AirSys:IsVentOnlySys > 0 )
        then 0.58 // For Hotel/Motel
        else
        if( AirSys:IsExhSys > 0  )
        then
          if( AirSys:LabArea > 0 )
          then // Is lab exhaust system
            if( IfValidAnd( AirSys:ExhFiltersPwrAdj > 0 ) )
            then // Proposed exhaust system has ExhFilters, default to 0.85 per 140.9(c)3B
              0.85
            else // Proposed has no PD credits
              0.65
            endif
          else 0.2 // General default, ~ 1" static
          endif
        else UNCHANGED
        endif endif endif
      else UNCHANGED
      endif endif
    else UNCHANGED
    endif
ENDRULE

// ********** Supply Fan Efficiency ********************************************
// =========================== AirSystem =======================================
RULE AirSys:AirSeg:Fan:FlowEff
  DESCRIPTION
    "The efficiency of the fan at design conditions."  
  HELP
    "This efficiency term includes belt/drive losses, but does not include 
     motor losses. This is a required input if ModelingMethod = 'StaticPressure'." 
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    Default
  MINIMUM
    0.35
  COMMONMINIMUM
    0.4
  COMMONMAXIMUM
    0.7
  MAXIMUM
    1.0
  REPORTPRECISION
    3  
  DEFAULT : T24N_2016
    if( AirSeg:Type = "Supply" )
    then
      if( IfValidAnd( FlowCap < 2000 ) )
      then 0.5
      else if( IfValidAnd( FlowCap < 10000 ) )
      then 0.6
      else 0.62
      endif endif
    else if( AirSeg:Type = "Relief" )
    then 
      if( IfValidAnd( FlowCap < 10000 ) )
       then 0.4
      else 0.5
      endif 
    else 0.6
    endif endif
  DEFAULT : T24N
    if( AirSeg:Type = "Supply" )
    then 0.65
    else if( AirSeg:Type = "Relief" )
    then 
      if( IfValidAnd( FlowCap < 10000 ) )
      then 0.4
      else 0.5
      endif 
    else if( AirSys:IsExhSys > 0 )
    then
      if( AirSys:LabArea > 0 )
      then 0.62
      else if( AirSys:CommKitArea > 0 )
      then 0.5
      else 0.65
      endif endif
    else 0.65
    endif endif endif
  CHECKSIM
    if( BypassCheckSim > 0 )
    then UNCHANGED
    else
    if( ModelingMthd = "StaticPressure" .AND. LocalStatus( FlowEff ) = 0 )
    then 
      PostError("FlowEfficiency must be defined for fan '%s' if the StaticPressure 
                 fan power method is used", Name)
    else UNCHANGED
    endif endif  
  SIZING : T24N_2016
    if( BaseSysNum > 0 )
    then 1.0 // Fan efficiency set to 1.0 for sizing
    else if( ModelingMthd = "StaticPressure" )
    then FlowEff 
    else if( AirSeg:Type = "Supply" )
// Value needed for simulation, so use baseline rules to set set value for 
// BrakeHorsePower and PowerPerUnitFlow methods
    then
      if( FlowCap < 2000 )
       then 0.5
      else if( FlowCap < 10000 )
       then 0.6
      else 0.62
      endif endif
    else if( AirSeg:Type = "Relief" )
    then 
      if( FlowCap < 10000 )
       then 0.4
      else 0.5
      endif 
    else 0.6 // Default assumption for all other fans
    endif endif endif endif
  SIZING
    if( BaseSysNum > 0 )
    then 1.0 // Fan efficiency set to 1.0 for sizing
    else ValidOr( FlowEff, 0.65 )
    endif
  ANNUAL : T24N_2016
    if( BaseSysNum > 0 )
    then
      if( AirSeg:Type = "Supply" )
      then
        if( IfValidAnd( FlowCap < 2000 ) )
         then 0.5
        else if( IfValidAnd( FlowCap < 10000 ) )
         then 0.6
        else 0.62
        endif endif
      else 
      if( AirSeg:Type = "Relief" .OR. 
          AirSeg:Type = "Return" )
      then // Is Return/Relief fan
        if( IfValidAnd( FlowCap < 10000 ) )
         then 0.4
        else 0.5
        endif 
      else UNDEFINED
      endif endif   
    else z:FlowEff 
    endif
  ANNUAL
    if( BaseSysNum > 0 )
    then
      if( AirSeg:Type = "Supply" .OR.
          AirSeg:Type = "Return" )
      then 0.65
      else
      if( AirSeg:Type = "Relief" )
      then // Is Return/Relief fan
        if( IfValidAnd( FlowCap < 10000 ) )
        then 0.4
        else 0.5
        endif 
      else UNDEFINED
      endif endif
    else z:FlowEff 
    endif    
ENDRULE
// =========================== ZoneSystem ======================================
RULE ZnSys:Fan:FlowEff
  DEFAULT : T24N_2016
    0.5
  DEFAULT
    if( ZnSys:IsExhSys > 0 )
    then
      if( ZnSys:LabArea > 0 )
      then 0.62
      else if( ZnSys:CommKitArea > 0 )
      then 0.5
      else 0.65
      endif endif
    else 0.5
    endif
  CHECKSIM
    if( BypassCheckSim > 0 )
    then UNCHANGED
    else
    if( LocalStatus( FlowEff ) = 0 )
    then 
      PostError("FlowEff for fan '%s' must be defined for simulation", Name)
    else UNCHANGED
    endif endif
  SIZING
    if( BaseSysNum > 0 )
    then 1.0 // Fan efficiency set to 1.0 for sizing
    else FlowEff
    endif
  ANNUAL
    if( BaseSysNum > 0 )
    then 0.5 // Default assumption for baseline ZnSys fans  
    else z:FlowEff 
    endif
ENDRULE


// ********** Supply Fan Static Pressure **************************************
// =========================== AirSystem =======================================
RULE AirSys:AirSeg:Fan:TotStaticPress
  DESCRIPTION
    "The total static pressure drop across the fan at design conditions."  
  HELP
    "The total static pressure (TSP) drop includes the pressure drop across 
     components both internal and external to an air handler. 
     This is a required input if ModelingMethod = 'StaticPressure'." 
  REFERENCE 
    NACM Section 5.7.3.2
    NACM Section 5.7.3.3
  INPUTCLASS
    CondRequired
  MINIMUM
    0.00001
  COMMONMINIMUM
    0.1
  COMMONMAXIMUM
    6.0  
  UNITS 
    inH2O 
  REPORTPRECISION
    3  
  DEFAULT
    if( ModelingMthd = "BrakeHorsePower" .OR. 
        ModelingMthd = "PowerPerUnitFlow" .OR.
        LocalStatus( PwrIdx ) > 0 )
    then // TotStaticPress calculated using other rules below
      UNDEFINED
    else if( AirSys:IsExhSys > 0 .AND. AirSys:IsHRRVentSys = 0 )
    then 0.5 // See HVACSecondary-Fan-Exhaust.rule
    else if( Proj:AutoEffInput = 1 ) 
    then // For PROPOSED AutoEfficiency input only
      if( AirSeg:Type = "Supply" )
      then
        if( AirSys:IsMultiZnSys = 0 )
          then // Is single-zone system
          if( IfValidAnd( FlowCap < 2000 ) )
          then 2.5
          else if( IfValidAnd( FlowCap < 10000 ) ) 
          then 3.0
          else 3.5
          endif endif
        // Is a multi-zone system
        else if( Parent3(TotStoryCnt) <= 6 )   
        then
          if( IfValidAnd( FlowCap < 2000 ) )
          then 3.0
          else if( IfValidAnd( FlowCap < 10000 ) ) 
          then 3.5
          else 4.0
          endif endif
        else if( IfValidAnd( FlowCap < 2000 ) )
        then 3.5
        else if( IfValidAnd( FlowCap < 10000 ) ) 
        then 4.0
        else 4.5
        endif endif endif endif
      else if( AirSeg:Type = "Relief" )
      then
        if( IfValidAnd( FlowCap < 10000 ) )
        then 0.75
        else 1.0
        endif
      else UNDEFINED
      endif endif
    else UNDEFINED
    endif endif endif
// Old DEFAULT rule for 2019 v0.2. For 0.3 and later, revised to BHP method
; DEFAULT
;   if( ModelingMthd = "BrakeHorsePower" .OR. 
;       ModelingMthd = "PowerPerUnitFlow" .OR.
;       LocalStatus( PwrIdx ) > 0 )
;   then UNDEFINED
;   else if( AirSys:IsExhSys > 0 .AND. AirSys:IsResExhSys = 0 )
;   then 0.75 // See HVACSecondary-Fan-Exhaust.rule
;   else if( Proj:AutoEffInput = 1 ) 
;   then // For PROPOSED AutoEfficiency input only
;     if( AirSeg:Type = "Supply" )
;     then 
;       if( AirSys:IsMultiZnSys = 0 )
;       then // Is single-zone system
;         3.387
;       else // Is a multi-zone system
;         4.544
;       endif
;     else if( AirSeg:Type = "Relief" )
;     then
;       if( IfValidAnd( FlowCap < 10000 ) )
;       then 0.75
;       else 1.0
;       endif
;     else UNDEFINED
;     endif endif
;   else UNDEFINED
;   endif endif endif
  CHECKSIM
    if( BypassCheckSim > 0 )
    then UNCHANGED
    else  
    if( ModelingMthd = "StaticPressure" .AND. LocalStatus( TotStaticPress ) = 0 )
    then 
      PostError("TotalStaticPressure must be defined for fan '%s' if the StaticPressure 
                 fan power method is used", Name)
    else UNCHANGED
    endif endif
  SIZING
    if( BaseSysNum > 0 )
    then // Fan power is set to near 0 for sizing.
      0 // Was 0.00001 since previously using 0 could cause E+ sim failures. See GC 618 for background
    else
    if( ModelingMthd = "StaticPressure" )
    then TotStaticPress 
    else UNDEFINED 
    endif endif
  ANNUAL : T24N_2016
// See rule below to calculate TotStatPress for simulation of other ModelingMthds
    if( BaseSysNum > 0 .AND. ModelingMthd = "StaticPressure" )
    then
      if( AirSeg:Type = "Supply" )
      then
        if( AirSys:IsMultiZnSys = 0 )
        then // Baseline design is single-zone system
          if( IfValidAnd( FlowCap < 2000 ) )
          then 2.5
          else if( IfValidAnd( FlowCap < 10000 ) ) 
          then 3.0
          else 3.5
          endif endif
        // Baseline design is multi-zone system
        else if( Parent3(TotStoryCnt) <= 6 )  
        then
          if( IfValidAnd( FlowCap < 2000 ) )
          then 3.0
          else if( IfValidAnd( FlowCap < 10000 ) ) 
          then 3.5
          else 4.0
          endif endif
        else if( IfValidAnd( FlowCap < 2000 ) )
        then 3.5
        else if( IfValidAnd( FlowCap < 10000 ) ) 
        then 4.0
        else 4.5
        endif endif endif endif
      else if( AirSeg:Type = "Relief" )
      then // 
        if( IfValidAnd( FlowCap < 10000 ) )
        then 0.75
        else 1.0
        endif
      else UNDEFINED
      endif endif
    else z:TotStaticPress
    endif
// Old ANNUAL rule for 2019 v0.2. For 0.3 and later, revised to BHP method
; ANNUAL
;// See rule below to calculate TotStatPress for simulation of other ModelingMthds
;   if( BaseSysNum > 0 )
;   then
;     if( AirSeg:Type = "Supply" )
;     then
;       if( AirSys:IsMultiZnSys = 0 )
;       then // Baseline design is single-zone system
;         3.387
;       // Baseline design is multi-zone system
;       else
;         4.544
;       endif
;     else if( AirSeg:Type = "Relief" )
;     then // 
;       if( IfValidAnd( FlowCap < 10000 ) )
;       then 0.75
;       else 1.0
;       endif
;     else UNDEFINED
;     endif endif
;   else z:TotStaticPress
;   endif
ENDRULE

// =========================== ZoneSystem ======================================
RULE ZnSys:Fan:TotStaticPress
  DEFAULT : T24N_2016
    if( ModelingMthd = "BrakeHorsePower" .OR. 
        ModelingMthd = "PowerPerUnitFlow" .OR.
        LocalStatus( PwrIdx ) > 0 )
    then UNDEFINED
    else if( ZnSys:IsResExhSys = 0 )
    then 0.5 
    else UNCHANGED // See HVACSecondary-Fan-Exhaust.rule
    endif endif
// TotStaticPress for other ZnSys fans calculated by separate rule below
ENDRULE


// ********** Supply Fan Motor Horsepower *************************************
// For AutoEffInput rules
RULE NEW Fan:AutoEffInputMtrBHP
  DATATYPE
    Float
  LONGFORM
    AutomaticEfficiencyInputMotorBHP
  DESCRIPTION
    "Intermediate value used if AutoEffInput = 1"
  UNITS 
    hp
  INPUTCLASS 
    NotInput     
  DEFAULT : T24N_2016
    // For PROPOSED AutoEfficiency input only
    // Calculate a BHP from TotStatPress and other inputs
    if( ( LocalStatus( MtrBHP ) < 5 .OR. ModelingMthd = "StaticPressure" ) .AND.
        // only set if user had not defined MtrBHP or this is StaticPressure method
        IfValidAnd( FlowCap > 0 ) .AND. 
        IfValidAnd( TotStaticPress > 0 ) .AND. 
        IfValidAnd( FlowEff > 0 ) )
    then FlowCap * TotStaticPress * ( 0.1175 /  745.6 ) / FlowEff
    else UNDEFINED
    endif  
  DEFAULT
    // For PROPOSED AutoEfficiency input only
    // Option #1) Calculate from TotStaticPress
    if( ModelingMthd = "StaticPressure" .AND.
        IfValidAnd( FlowCap > 0 ) .AND. 
        IfValidAnd( TotStaticPress > 0 ) .AND. 
        IfValidAnd( FlowEff > 0 ) )
    then FlowCap * TotStaticPress * ( 0.1175 /  745.6 ) / FlowEff
    else // Option #2) Calculated from PwrIdx
    if( ModelingMthd = "PowerPerUnitFlow" .AND.
        IfValidAnd( PwrIdx > 0 ) .AND. 
        IfValidAnd( FlowCap > 0 ) .AND.
        IfValidAnd( MtrEff > 0 ) ) 
    then PwrIdx * FlowCap * MtrEff / 745.6
    else // Option #3) Calculated using BHP allowance for 2019
    if( ParentComp = "AirSys" .AND.
        IfValidAnd( FlowCap > 0 ) )
    then // Default based on typical baseline BHP allowance
      if( SysType = "PVAV" .OR. SysType = "VAV" )
      then 0.0013 * FlowCap
      else 0.00094 * FlowCap
      endif
    else
    if( ParentComp = "ZnSys" .AND.
        IfValidAnd( FlowCap > 0 ) )
    then // Default based on typical baseline ZnSys PwrIdx
      if( IfValidAnd( ZnSys:IsResSys > 0 ) .AND. 
          Proj:ResBaseSysChange > 0 ) 
      then 0.45 * FlowCap * 0.855 / 745.6 // Res SZAC
      else 0.35 * FlowCap * 0.855 / 745.6
      endif
    else UNDEFINED
    endif endif endif endif
ENDRULE

RULE Fan:MtrHP
  DESCRIPTION
    "The motor nameplate horsepower of the fan."  
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    CondRequired
  UNITS 
    hp
  MINIMUM
    0
  COMMONMINIMUM
    0.06
  COMMONMAXIMUM
    200 
  REPORTPRECISION
    3
  DEFAULT : T24N_2022 T24N_2025
    if( Proj:AutoEffInput = 1 )
    then // For PROPOSED AutoEfficiency input only
      // Find next largest motor size in Std motor table based on
      // user-input,auto-calculated MtrBHP, or PwrIdx
      if( IfValidAnd( PwrIdx > 0 ) .AND. 
          IfValidAnd( FlowCap > 0 ) )
      then StdElecMtrSize:MotorHPValue("InputMotorHP", PwrIdx * FlowCap / 745.6)
      else
      if( LocalStatus( MtrBHP ) > 0 )
      then StdElecMtrSize:MotorHPValue("InputMotorHP", MtrBHP)
      else if( LocalStatus( AutoEffInputMtrBHP ) > 0 )
      then StdElecMtrSize:MotorHPValue("InputMotorHP", AutoEffInputMtrBHP)
      else UNDEFINED
      endif endif endif
    else UNDEFINED
    endif  
  DEFAULT : T24N
    if( Proj:AutoEffInput = 1 )
    then // For PROPOSED AutoEfficiency input only
      // Find next largest motor size in Std motor table based on
      // user-input,auto-calculated MtrBHP, or PwrIdx
      if( LocalStatus( MtrBHP ) > 0 )
      then StdElecMtrSize:MotorHPValue("InputMotorHP", MtrBHP)
      else if( LocalStatus( AutoEffInputMtrBHP ) > 0 )
      then StdElecMtrSize:MotorHPValue("InputMotorHP", AutoEffInputMtrBHP)
      else 
      if( IfValidAnd( PwrIdx > 0 ) .AND. 
          IfValidAnd( FlowCap > 0 ) )
      then StdElecMtrSize:MotorHPValue("InputMotorHP", PwrIdx * FlowCap / 745.6)
      else UNDEFINED
      endif endif endif
    else UNDEFINED
    endif  
  CHECKSIM
    if( IfValidAnd( ParentComp = "AirSys" ) .OR. 
        IfValidAnd( ParentComp = "TrmlUnit" ) )
    then
      if( IfValidAnd( MtrHP > 0 ) = 0 .AND.
          IfValidAnd( AirSys:BypassCheckSim = 0 ) )
      then // User is required to enter gross capacity
        PostError("Fan '%s' does not have Motor HP defined.", Name )
      else UNCHANGED
      endif
    else 
    if( IfValidAnd( MtrHP > 0 ) = 0 .AND.
        IfValidAnd( ZnSys:BypassCheckSim = 0 ) )
    then // User is required to enter gross capacity
      PostError("Fan '%s' does not have Motor HP defined.", Name )
    else UNCHANGED
    endif endif
  SIZING
    if( BaseSysNum > 0 )
    then UNDEFINED
    else MtrHP
    endif
  ANNUAL : T24N_2016
    if( BaseSysNum > 0 )
    then 
      if( IfValidAnd( PwrIdx > 0 ) .AND. 
          IfValidAnd( FlowCap > 0 ) )
      then // For fans specified by PowerPerUnitFlow method, otherwise, see rule below
        StdElecMtrSize:MotorHPValue("InputMotorHP", PwrIdx * FlowCap / 745.6)
      else UNDEFINED
      endif
    else z:MtrHP
    endif
ENDRULE

// Proposed motor indices, based on the list of standard motor sizes
RULE NEW Fan:MtrHPIdx_i
  DATATYPE
    Integer
  LONGFORM
    MotorHPIndex_i
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrHP > 0 ) )
    then // Look up index of MtrHP in standard motor size table. If input is 
         // not equal to Std motor size, the table look-up will return index 
         // of next largest Std size
      StdElecMtrSize:MotorHPIndex("InputMotorHP", MtrHP)
    else UNDEFINED
    endif
  SIZING
    if( BaseSysNum > 0 )
    then UNDEFINED
    else MtrHPIdx_i
    endif
ENDRULE

// Determine index of next motor size below 
RULE NEW Fan:MtrHPIdx_iminus1
  DATATYPE
    Integer
  LONGFORM
    MotorHPIndex_iminus1
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrHPIdx_i > 1 ) )
    then MtrHPIdx_i - 1
    else 1
    endif
  SIZING
    if( BaseSysNum > 0 )
    then UNDEFINED
    else MtrHPIdx_iminus1
    endif
ENDRULE

// Calculate the minimum allowed MtrBHP per NACM rules
RULE NEW Fan:MinMtrBHP
  DATATYPE
    Float
  LONGFORM
    MinimumMotorBHP
  DESCRIPTION
    "The minimum allowed MtrBHP used in the Proposed model simulation based on
     user specified MtrHP."
  HELP
    "The minimum Proposed model MtrBHP is Max(User MtrBHP, 95% x MHPi-1)"
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrHP >= 0.083 ) .AND. // Only applicable to motors >= 1/12 hp
        IfValidAnd( MtrBHP > 0 ) .AND. 
        LocalStatus( MtrHPIdx_iminus1 ) > 0 )
    then StdElecMtrPerf:MotorHPValue("MotorHPIndex", MtrHPIdx_iminus1) * 0.95
    else UNDEFINED
    endif
  SIZING
    if( BaseSysNum > 0 )
    then UNDEFINED
    else MinMtrBHP
    endif
  ANNUAL
    z:MinMtrBHP
ENDRULE

// T24N_2019-0-2 Release rule. For 0.3 and later, revised to BHP method 
;RULE NEW Fan:FanPwrAdj
;  DATATYPE
;    Float
;  LONGFORM
;    FanPowerAdjustment
;  HELP
;    "The fan power adjustment for filtration and special processes, defined at the system level,
;     transfered to the fan."
;  UNITS
;    inH2O
;  ANNUAL : T24N_2016
;    0 // Not used for 2016
;  ANNUAL
;    if( BaseSysNum > 0 ) 
;    then // Is baseline
;      if( ParentComp = "AirSys" )
;      then AirSys:TotSysFanPwrAdj * 0.65 / FlowCap / ( 0.1175 / 745.6 )
;      else // Is ZnSys
;      if( ParentComp = "ZnSys" )
;      then ZnSys:TotSysFanPwrAdj * 0.65 / FlowCap / ( 0.1175 / 745.6 )  
;      else 0
;      endif endif
;    else 0
;    endif
;ENDRULE




// ********** Supply Fan Brake Horspower ***************************************
RULE Fan:MtrBHP
  DESCRIPTION
    "The design motor shaft brake horsepower of the fan."  
  HELP
    "The motor brake horse power is the power at the motor shaft, including fan
     and drive efficiencies.
     This is a required input if ModelingMethod = 'BrakeHorsePower'." 
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    CondRequired
  UNITS 
    hp
  MINIMUM
    0
  COMMONMINIMUM
    0.01
  COMMONMAXIMUM
    200
  REPORTPRECISION
    3  
  DEFAULT
    if( Proj:AutoEffInput = 1 .OR. IfValidAnd( ModelingMthd = "StaticPressure" ) )
    then // For PROPOSED AutoEfficiency input only
         // Determine MtrBHP based on user-input or auto-calculated MtrBHP 
;      if( Proj:IsStdModel > 0 .AND. Proj:ModelName != "" )
;      then UNCHANGED // TableSizing is used, see Project-TableSizing rules
;      else
      if( LocalStatus( AutoEffInputMtrBHP ) > 0 )
      then AutoEffInputMtrBHP
      else // 
      if( IfValidAnd( FlowCap > 0 ) .AND. 
          IfValidAnd( TotStaticPress > 0 ) .AND. 
          IfValidAnd( FlowEff > 0 ) )
      then FlowCap * TotStaticPress * ( 0.1175 / 745.6 ) / FlowEff    
      else UNDEFINED
      endif endif; endif
    else UNDEFINED
    endif  
  CHECKCODE
    if( BypassCheckCode > 0 )
    then UNCHANGED
    else
    if( IfValidAnd( MtrBHP > 0 ) = 0 .AND. ModelingMthd = "BrakeHorsePower" )
    then // MtrBHP is UNDEFINED or is 0
      PostError("MotorBHP is a required input for fan '%s' if ModelingMethod = 
                 'BrakeHorsePower'.", Name)   
    else
    if( IfValidAnd( MtrBHP < MinMtrBHP ) .AND.
        IfValidAnd( MtrHP > 0.75 ) .AND.
        IsNew > 0 .AND.
        IsHlthCare = 0 )
    then // User specified MtrBHP is less than ACM required BHP based on user
         // specified MtrHP (applies only to non-fractional hp motors)
      PostWarning("MotorBHP for fan '%s' is less than the ACM required value
                   for the user-specified MotorHP. The proposed MotorBHP will
                   be set to %.3f hp for compliance analysis.", Name, MinMtrBHP)
    else UNCHANGED
    endif endif endif
  SIZING
    if( BaseSysNum > 0 )
    then // Fan power for sizing is set to 0
      0
    else
    if( IfValidAnd( MtrBHP < MinMtrBHP ) .AND. 
        IfValidAnd( MtrHP > 0.75 ) .AND.
        IsNew > 0 .AND.
        IsHlthCare = 0 )
    then // Use NACM calculated MinMtrBHP
         // MinMtrBHP = 95% x MtrHPi-1, only applies to non-fractional HP motors
      MinMtrBHP 
    else
    if( IfValidAnd( MtrBHP > 0 ) )
    then // MtrBHP if used
      if( ParentComp = "AirSys" )
      then // Apply HRR adjustment if applicable
        MtrBHP * ValidOr( AirSys:HRRFanPwrAdj, 1 )
      else
      if( ParentComp = "ZnSys" )
      then // Apply HRR adjustment if applicable
        MtrBHP * ValidOr( ZnSys:HRRFanPwrAdj, 1 )
      else // TrmlUnit and other fans
        MtrBHP
      endif endif
    else UNCHANGED 
    endif endif endif
  ANNUAL : T24N_2016
    if( BaseSysNum > 0 )
    then // Calculate baseline MtrBHP for reporting of 'StaticPressure' method
         // See rule below for 'PowerPerUnitFlow' method
      if( IfValidAnd( FlowCap > 0 ) .AND. 
          IfValidAnd( TotStaticPress > 0 ) .AND. 
          IfValidAnd( FlowEff > 0 ) )
      then FlowCap * TotStaticPress * ( 0.1175 / 745.6 ) / FlowEff  
      else UNDEFINED
      endif
    else z:MtrBHP
    endif
ENDRULE
// 2019 and beyond ANNUAL rules
// AirSys
RULE AirSys:AirSeg:Fan:MtrBHP
  ANNUAL : T24N_2016
    UNCHANGED
  ANNUAL
    if( BaseSysNum > 0 )
    then
      if( AirSeg:Type = "Supply" )
      then
        if( BaseSysNum > 100 )
        then
          if( AirSys:IsBalancedVentSys > 0 )
          then // Is balanced, split power evenly between supply/exhaust fans
            AirSys:BaseFanBHPWithAdj / 2
          else // Is supply only, assign power to supply fan
            AirSys:BaseFanBHPWithAdj
          endif
        else
        if( AirSys:LabArea > 0 )
        then // Labs
          if( Bldg:LabExhFlow > 10000 )
          then // Trigger lab exhaust fan power limit per 140.9(c)3, supply gets total allowance
            AirSys:BaseFanBHPWithAdj
          else // Use 140.4(c) BHP allowance rules
            AirSys:BaseFanBHPWithAdj * ( 1 - AirSys:ExhFanPwrRat )
          endif
        else
        if( AirSys:CommKitArea > 0 )
        then // CommKit exhaust has its own allowances, supply gets total allowance
          AirSys:BaseFanBHPWithAdj
        else // BHP allowance + adjustment x (1 - ExhRat) since there are no
             // return or relief fans in T24N_2019 baseline
          AirSys:BaseFanBHPWithAdj * ( 1 - AirSys:ExhFanPwrRat )
        endif endif endif
      else
      if( AirSeg:Type = "Return" .AND. BaseSysNum > 100 )
      then
        if( AirSys:IsBalancedVentSys > 0 )
        then // Is balanced, split power evenly between supply/exhaust fans
          AirSys:BaseFanBHPWithAdj / 2
        else 0 // Is supply only, no return fan power 
        endif
      else UNCHANGED
      endif endif 
    else UNCHANGED
    endif
ENDRULE
// ZnSys
RULE ZnSys:Fan:MtrBHP
  ANNUAL : T24N_2016
    UNCHANGED
  ANNUAL
    if( BaseSysNum > 0 )
    then
      if(  BaseSysNum = 3 .AND. ZnSys:AddClgToPropSys > 0 )
      then // NonRes PropNoClg system, no fan power
        UNCHANGED
      else
      if( ZnSys:LabArea > 0 )
      then // Labs
        if( Bldg:LabExhFlow > 10000 )
        then // Trigger lab exhaust fan power limit per 140.9(c)3
          ZnSys:BaseFanBHPWithAdj
        else // Use 140.4(c) BHP allowance rules
          ZnSys:BaseFanBHPWithAdj * ( 1 - AirSys:ExhFanPwrRat )
        endif
      else
      if( ZnSys:CommKitArea > 0 )
      then // CommKit exhaust has its own allowances, supply gets total allowance
        ZnSys:BaseFanBHPWithAdj
      else
      if( BaseSysNum = 1 .OR. BaseSysNum = 2 )
      then// Res exhaust has its own allowances, supply gets total allowance
        ZnSys:BaseFanBHPWithAdj 
      else // BHP allowance + adjustment x (1 - ExhRat) since there are no
           // return or relief fans in T24N_2019 baseline
        ZnSys:BaseFanBHPWithAdj * ( 1 - ZnSys:ExhFanPwrRat )
      endif endif endif endif
    else UNCHANGED 
    endif
ENDRULE
// Calculate normalized BHP for reference
RULE NEW Fan:MtrBHPIdx
  DATATYPE
    Float
  LONGFORM
    MotorBrakeHorsepowerIndex
  DESCRIPTION
    "Similar to the Fan:PowerIndex (Watt/cfm), the Fan:MotorBHPIndex is the MtrBHP
     divided by the fan flow (hp/1000cfm)."
  INPUTCLASS
    NotInput
  UNITS
    hp/1000cfm
  DEFAULT
    if( IfValidAnd( MtrBHP > 0 ) .AND. IfValidAnd( FlowCap > 0 ) ) 
    then MtrBHP / FlowCap * 1000
    else 0
    endif
ENDRULE


// ********** Motor Efficiency *************************************************
// Determine baseline MtrHP and MtrEff for baseline systems
RULE Fan:MtrHP
  ANNUAL : T24N_2016
    if( BaseSysNum > 0 .AND. 
        IfValidAnd( MtrBHP > 0 ) .AND.
        LocalStatus( PwrIdx ) = 0 )
    then StdElecMtrSize:MotorHPValue("InputMotorHP", MtrBHP)
    else UNCHANGED
    endif
  ANNUAL
    if( BaseSysNum > 0 .AND. 
        IfValidAnd( MtrBHP > 0 ) )
    then StdElecMtrSize:MotorHPValue("InputMotorHP", MtrBHP)
    else UNCHANGED
    endif
ENDRULE

// Determine index in table of Std motor sizes based on MtrHP
RULE NEW Fan:MtrPerfIdx
  DATATYPE
    Integer
  LONGFORM
    MotorPerformanceIndex
  DESCRIPTION
    "The index of motor size according to a list of standard sizes."
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    NotInput
  DEFAULT : T24N_2022 T24N_2025
// Reorder defaulting to better match 2022 use of PwrIdx
    if( IfValidAnd( PwrIdx > 0 ) .AND.
        IfValidAnd( FlowCap >= 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", PwrIdx * FlowCap / 745.6)
    else
    if( IfValidAnd( MtrHP > 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", MtrHP)
    else UNDEFINED
    endif endif
  DEFAULT
    if( IfValidAnd( MtrHP > 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", MtrHP)
    else
    if( IfValidAnd( PwrIdx > 0 ) .AND.
        IfValidAnd( FlowCap >= 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", PwrIdx * FlowCap / 745.6)
    else UNDEFINED
    endif endif
  SIZING
    if( IfValidAnd( MtrHP > 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", MtrHP)
    else UNDEFINED
    endif
  ANNUAL : T24N_2016
    if( IfValidAnd( MtrHP > 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", MtrHP)
    else
    if( IfValidAnd( PwrIdx > 0 ) .AND.
        IfValidAnd( FlowCap >= 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", PwrIdx * FlowCap / 745.6)
    else UNDEFINED
    endif endif
  ANNUAL
    if( IfValidAnd( MtrHP > 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", MtrHP)
    else UNDEFINED
    endif
ENDRULE

// MotorEff, for reporting
RULE Fan:MtrEffRpt
  DESCRIPTION
    "The motor efficiency value to be used for reporting."
  INPUTCLASS
    NotInput
  REPORTPRECISION
    3  
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 )
    then
      if( IfValidAnd( MtrPerfIdx > 0 ) )
      then // Look-up MtrEff
        StdElecMtrPerf:MotorEfficiency("MotorHPIndex", MtrPerfIdx)   
      else 0
      endif
    else MtrEff
    endif
ENDRULE

// Look up MtrEff based on index in table of Std motor sizes
RULE Fan:MtrEff
  DESCRIPTION
    "Indicates how well the motor converts electrical power into mechanical power
     and is defined as output power divided by input power expressed as a ratio."
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    CondRequired
  MINIMUM
    0.4
  COMMONMINIMUM
    0.6
  COMMONMAXIMUM
    0.98
  REPORTPRECISION
    3  
  DEFAULT
    if( Proj:AutoEffInput = 1 .AND. IfValidAnd( MtrPerfIdx > 0 ) )
    then // For PROPOSED AutoEfficiency input only
      StdElecMtrPerf:MotorEfficiency("MotorHPIndex", MtrPerfIdx)   
    else UNDEFINED
    endif 
  CHECKSIM
    if( IfValidAnd( ParentComp = "AirSys" ) .OR. 
        IfValidAnd( ParentComp = "TrmlUnit" ) )
    then
      if( IfValidAnd( MtrEff > 0 ) = 0 .AND.
          IfValidAnd( AirSys:BypassCheckSim = 0 ) )
      then // User is required to enter gross capacity
        PostError("Fan '%s' does not have Motor Efficiency defined.", Name )
      else UNCHANGED
      endif
    else 
    if( IfValidAnd( MtrEff > 0 ) = 0 .AND.
        IfValidAnd( ZnSys:BypassCheckSim = 0 ) )
    then // User is required to enter gross capacity
      PostError("Fan '%s' does not have Motor Efficiency defined.", Name )
    else UNCHANGED
    endif endif
  SIZING
    if( BaseSysNum > 0 )
    then 1.0 // Fan power for sizing is set to 0
    else ValidOr( MtrEff, 0.855 )
    endif
  ANNUAL : T24N_2016
    if( BaseSysNum > 0 )
    then
      if( IfValidAnd( MtrPerfIdx > 0 ) )
      then // Look-up MtrEff
        StdElecMtrPerf:MotorEfficiency("MotorHPIndex", MtrPerfIdx)   
      else 0
      endif
    else
      z:MtrEff
    endif
  ANNUAL
    if( BaseSysNum > 0 .AND. IfValidAnd( MtrPerfIdx > 0 ) )
    then
      StdElecMtrPerf:MotorEfficiency("MotorHPIndex", MtrPerfIdx)   
    else
      z:MtrEff
    endif
ENDRULE

// ********** Motor Position *****************************************************
RULE Fan:MtrPos
  DESCRIPTION
    "The position of the supply fan motor relative to the cooling air stream."  
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    Default
  OPTION
    InAirStream
    NotInAirStream   
  DEFAULT
    "InAirStream"
  SIZING
    if( BaseSysNum > 0 )
    then "InAirStream"
    else MtrPos
    endif
  ANNUAL
    z:MtrPos
ENDRULE

// Calculated total fan efficiency
RULE Fan:TotEff
  DESCRIPTION
    "The total efficiency of the fan object, which is the product of the flow (fan) and 
     motor efficiency."
  INPUTCLASS
    NotInput
  REPORTPRECISION
    3  
  DEFAULT
    if( IfValidAnd( FlowEff >= 0 ) .AND. IfValidAnd( MtrEff > 0 ) )
    then FlowEff * MtrEff
    else UNDEFINED 
    endif 
  SIZING
    if( IfValidAnd( FlowEff >= 0 ) .AND. IfValidAnd( MtrEff > 0 ) )
    then FlowEff * MtrEff
    else UNDEFINED
    endif
  ANNUAL
    if( IfValidAnd( FlowEff >= 0 ) .AND. IfValidAnd( MtrEff > 0 ) )
    then FlowEff * MtrEff
    else UNDEFINED
    endif
ENDRULE

// -----------------------------------------------------------------------------
// Calculate MtrBHP for PowerPerUnitFlow method 
// Pfan_motor (W) = 0.1175 * FlowCap * TotStatPress / ( FlowEff * MtrEff )
RULE Fan:MtrBHP
  REPORTPRECISION
    3
  DEFAULT
    if( LocalStatus( AutoEffInputMtrBHP ) = 0 .AND.
        LocalStatus( PwrIdx ) > 0 .AND. 
        LocalStatus( FlowCap ) > 0 .AND.
        LocalStatus( MtrEff ) > 0 ) 
    then PwrIdx * FlowCap * MtrEff / 745.6
    else UNCHANGED
    endif
  ANNUAL
    if( BaseSysNum > 0 .AND. 
        LocalStatus( PwrIdx ) > 0 .AND. 
        LocalStatus( FlowCap ) > 0 .AND.
        LocalStatus( MtrEff ) > 0 ) 
    then PwrIdx * FlowCap * MtrEff / 745.6
    else UNCHANGED
    endif
ENDRULE

// Fan heat at design conditions
RULE NEW Fan:SupFanHtDsgn
  DATATYPE
   Float
  LONGFORM
    SupplyFanHeatDsgn
  DESCRIPTION
    "The amount of heat generated by the supply fan at design conditions."
  HELP
    "Used for reporting or to adjust baseline system coil capacities."
  INPUTCLASS
    NotInput  
  SIZING
    if( BaseSysNum > 0 )
    then 0
    else 
    if( IfValidAnd( MtrBHP > 0 ) .AND.
        IfValidAnd( MtrEff > 0 ) )
    then 
      if( MtrPos = "InAirStream" )
      then MtrBHP * 2544.4 / MtrEff
      else MtrBHP * 2544.4
      endif
    else 0
    endif endif 
  ANNUAL
    if( BaseSysNum > 0 )
    then
      if( IfValidAnd( MtrBHP > 0 ) .AND.
          IfValidAnd( MtrEff > 0 ) )
      then 
        if( MtrPos = "InAirStream" )
        then MtrBHP * 2544.4 / MtrEff
        else MtrBHP * 2544.4
        endif
      else 0
      endif
    else z:SupFanHtDsgn
    endif
ENDRULE

// -----------------------------------------------------------------------------
// TotStaticPress is needed for simulation, so it is calculated for other methods
// For reference:
// ---- MtrBHP ----
// Pfan_mtr (W) = 0.1175 * Qfan(CFM) * dP(inH2O) / ( Eff_fan * Eff_drive * Eff_motor )
// Pfan_mtr (W) = 0.1175 * FlowCap * TotStatPress / ( FlowEff * MtrEff )
// Pfan_shaft (W) = 0.1175 * FlowCap * TotStatPress / FlowEff
// Pfan_shaft (bhp) = MtrBHP = ( 0.1175 / 745.6 ) * FlowCap * TotStatPress / FlowEff
// TotStatPress = MtrBHP * FlowEff / FlowCap / ( 0.1175 / 745.6 ) 
// ---- PwrIdx ----
// PwrIdx = (Pfan_mtr / FlowCap ) = 0.1175 * TotStatPress / ( FlowEff * MtrEff )
// TotStatPress = PwrIdx * ( FlowEff * MtrEff ) / 0.1175
RULE Fan:TotStaticPress
  DEFAULT 
    if( ModelingMthd = "BrakeHorsePower" .AND.
        IfValidAnd( MtrBHP >= 0 ) .AND.
        IfValidAnd( FlowEff >= 0 ) .AND.
        IfValidAnd( FlowCap > 0 ) )
    then // BrakehorsePower method
      MtrBHP * FlowEff / FlowCap / ( 0.1175 / 745.6 )
    else // PowerPerUnitFlow method
    if( IfValidAnd( PwrIdx > 0 ) .AND. 
        IfValidAnd( TotEff >= 0 ) )
    then PwrIdx * TotEff / 0.1175 
    else UNCHANGED 
    endif endif
  SIZING
    if( BaseSysNum > 0 ) 
    then // Fan power is set to near 0 for sizing.
      0 // Was 0.00001 since previously using 0 could cause E+ sim failures. See GC 618 for background
    else    
    if( ModelingMthd = "BrakeHorsePower" .AND.
        IfValidAnd( MtrBHP >= 0 ) .AND.
        IfValidAnd( FlowEff >= 0 ) .AND.
        IfValidAnd( FlowCap > 0 ) )
    then // BrakehorsePower method
      MtrBHP * FlowEff / FlowCap / ( 0.1175 / 745.6 )
    else
    if( ModelingMthd = "StaticPressure" .AND.
        IfValidAnd( MtrBHP = MinMtrBHP ) .AND.
        IfValidAnd( FlowEff >= 0 ) .AND.
        IfValidAnd( FlowCap > 0 ) )
    then // NACM rule for 95% n-1 motor size not met when using StaticPressure method,
         // recalculate TotStaticPress based on revise MtrBHP
      MtrBHP * FlowEff / FlowCap / ( 0.1175 / 745.6 )
    else  
    if( IfValidAnd( PwrIdx > 0 ) .AND. 
        IfValidAnd( TotEff >= 0 ) )
    then // PowerPerUnitFlow method
      PwrIdx * TotEff / 0.1175 
    else UNCHANGED 
    endif endif endif endif
  ANNUAL : T24N_2016
    if( BaseSysNum > 0 ) 
    then // Calculate from PwrIdx
      if( LocalStatus( PwrIdx ) > 0 .AND. 
          IfValidAnd( TotEff >= 0 ) )
      then PwrIdx * TotEff / 0.1175 
      else UNCHANGED 
      endif 
    else // TotalStaticPressure for proposed calculated in rule above
      z:TotStaticPress
    endif
  ANNUAL : T24N
    if( BaseSysNum > 0 .AND.  
        IfValidAnd( MtrBHP >= 0 ) .AND.
        IfValidAnd( FlowEff >= 0 ) .AND.
        IfValidAnd( FlowCap > 0 ) )
    then // Is baseline calculate from BHP
      MtrBHP * FlowEff / FlowCap / ( 0.1175 / 745.6 )
    else
    if( ParentComp = "AirSys" )
    then
      if( IfValidAnd( AirSys:BaseFanPwrIdx > 0 ) )
      then // Std = Prop for HRR ventilation, set cap on fan power
        Min( PwrIdx, AirSys:BaseFanPwrIdx ) * TotEff / 0.1175
      else
      if( AirSeg:Type = "Relief" )
      then // Fan power is set to near 0 for relief fans
           // See Ticket 2843
        0  // Was 0.00001 since previously using 0 could cause E+ sim failures. See GC 618 for background
      else // TotalStaticPressure for proposed calculated in rule above
        ValidOr( z:TotStaticPress, 0 )
      endif endif
    else
    if( ParentComp = "ZnSys" )
    then
      if( IfValidAnd( ZnSys:BaseFanPwrIdx > 0 ) )
      then // Std = Prop for HRR ventilation, set cap on fan power
        Min( PwrIdx, ZnSys:BaseFanPwrIdx ) * TotEff / 0.1175 
      else UNCHANGED
      endif
    else ValidOr( z:TotStaticPress, 0 )
    endif endif endif
ENDRULE

// ********** Supply Fan Part-Flow Power Curve *********************************
// =========================== AirSystem ======================================
RULE AirSys:AirSeg:Fan:Pwr_fPLRCrvRef
  DESCRIPTION
    "A part-load power curve which represents the percentage full-load power 
     draw of the supply fan as a function of the percentage full-load air flow."
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    Prescribed
  SIZING
    if( CtrlMthd = "ConstantVolume" )    
    then UNDEFINED
    else if( BaseSysNum > 0 )
    then // For Baseline systems
      if( CtrlMthd = "VariableSpeedDrive" ) 
      then
        if( SysType = "SZVAVAC" .OR. SysType = "SZVAVHP" .OR. SysType = "SZVAVDFHP" )
        then Rulelibrary(CrvCubic, "FanVSDPerfSpResetPwrRatio_fCFMRatio")
        else Rulelibrary(CrvCubic, "FanVSDGoodSpResetPwrRatio_fCFMRatio")
        endif
      else UNDEFINED
      endif
    // For Proposed systems
    else if( CtrlMthd = "VariableSpeedDrive" )
    then
      if( Parent ( Type ) = "Relief" )
      then Rulelibrary(CrvCubic, "FanVSDPwrRatio_fCFMRatio")
      else if( SysType = "SZVAVAC" .OR. SysType = "SZVAVHP" .OR. SysType = "SZVAVDFHP" )
      then Rulelibrary(CrvCubic, "FanVSDPerfSpResetPwrRatio_fCFMRatio")
      else if( AirSys:IsMultiZnSys = 1 )
        then 
        if( AirSys:CtrlSysType = "DDCToZone" )
        then Rulelibrary(CrvCubic, "FanVSDGoodSpResetPwrRatio_fCFMRatio")
        else Rulelibrary(CrvCubic, "FanVSDPwrRatio_fCFMRatio")
        endif
      else Rulelibrary(CrvCubic, "FanVSDPwrRatio_fCFMRatio")
      endif endif endif
    else if( Class = "Centrifugal" )
    then 
      if( CentType = "ForwardCurved" )
      then
        if( CtrlMthd = "InletVanes" .OR. CtrlMthd = "Dampers" )
        then Rulelibrary(CrvCubic, "FanFCVanesPwrRatio_fCFMRatio")
        else Rulelibrary(CrvCubic, "FanFCPwrRatio_fCFMRatio")
        endif
      else // Fan is AF or BI
        if( CtrlMthd = "InletVanes" .OR. CtrlMthd = "Dampers" )
        then Rulelibrary(CrvCubic, "FanAForBIVanesPwrRatio_fCFMRatio")
        else Rulelibrary(CrvCubic, "FanAForBIPwrRatio_fCFMRatio")
        endif
      endif
    else if( Class = "Axial" )
      then 
        if( CtrlMthd = "VariablePitchBlades" )
        then Rulelibrary(CrvCubic, "FanVaneAxVpPwrRatio_fCFMRatio")
        else Rulelibrary(CrvCubic, "FanLinearPwrRatio_fCFMRatio")
        endif
    else Rulelibrary(CrvCubic, "FanLinearPwrRatio_fCFMRatio") // Default 
    endif endif endif endif endif
  ANNUAL
    z:Pwr_fPLRCrvRef
ENDRULE


// =========================== ZoneSystem ======================================
RULE ZnSys:Fan:Pwr_fPLRCrvRef
  SIZING
    if( CtrlMthd = "ConstantVolume" .OR. HasSysFlowProp > 0 )    
    then UNDEFINED // Ticket 3166: Allow VSD to be modeled as TwoSpeed 
    else if( CtrlMthd = "VariableSpeedDrive" .OR. CtrlMthd = "TwoSpeed" )
    then Rulelibrary(CrvCubic, "FanVSDPwrRatio_fCFMRatio")  
    else UNDEFINED
    endif endif
  ANNUAL
    z:Pwr_fPLRCrvRef
ENDRULE


// Set flag to indicate DuctLeakageAdjustment is required
// Does not apply to baseline
RULE NEW Fan:DuctLeakAdjReq
  DATATYPE
    Integer
  LONGFORM
    DuctLeakageAdjustmentRequired
  DESCRIPTION
    "A flag to indicate that the fan motor efficiency needs to be adjusted
     due to system duct leakage.  0 for no adjustment, 1 for penalty, 2 for
     credit."
  INPUTCLASS
    NotInput
  SIZING
    if( BaseSysNum > 0 )
    then 0
    else
      if( ParentComp = "AirSys" )
      then
        if( IfValidAnd( Parent2Valid( DuctLeakage ) > 0 ) )
        then 1
        else
        if( IfValidAnd( Parent2Valid( DuctLeakCredit ) > 0 ) )
        then 2
        else 0
        endif endif
      else if( ParentComp = "ZnSys" )
      then
        if( IfValidAnd( ParentValid( DuctLeakage ) > 0 ) )
        then 1       
        else
        if( IfValidAnd( ParentValid( DuctLeakCredit ) > 0 ) )
        then 2
        else 0
        endif endif
      else 0
      endif endif
    endif
  ANNUAL
    z:DuctLeakAdjReq
ENDRULE

// -----------------------------------------------------------------------------
// Use unmodified MtrEff for calculating all other parameters, then change the 
// annual value to penalize for duct leakage.
// Does not apply to baseline
RULE Fan:MtrEff
  ANNUAL
    if( DuctLeakAdjReq = 1 )
    then                // Increase fan power by 30% if DuctLeakage = 1 - divide efficiency by 1.3
      MtrEff / 1.3
    else
    if( DuctLeakAdjReq = 2 )
    then                // Decrease fan power by 14% of the difference from 100% if DuctLeakage = 2 
      1 - ( 1 - MtrEff ) * ( 1 - 0.14 )        
    else
      UNCHANGED
    endif endif
ENDRULE

// -----------------------------------------------------------------------------
// Use unmodified TotEff for calculating all other parameters, then change the 
// annual value to penalize for duct leakage.
// Does not apply to baseline
RULE Fan:TotEff
  DESCRIPTION
    "The total efficiency of the fan. It is the product of the flow (fan) and 
     motor efficiency, for simulation."
  ANNUAL
    if( IfValidAnd( FlowEff >= 0 ) .AND. IfValidAnd( MtrEff > 0 ) )
    then FlowEff * MtrEff
    else UNDEFINED
    endif
ENDRULE

