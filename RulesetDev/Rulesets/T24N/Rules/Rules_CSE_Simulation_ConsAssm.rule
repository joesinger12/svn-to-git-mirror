; -------------------------------------------------------------------------
; Rules pertaining to:   Prep For and Clean-up After each CSE Energy Simulation
; CEC Title-24 Nonresidential Energy Code 
; -------------------------------------------------------------------------
; Copyright (c) 2012-2022, California Energy Commission
; Copyright (c) 2012-2016, Wrightsoft Corporation
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
; STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------


;*************************************************************************
RULELIST "CSE_SimulationPrep_Mat" 1 0 0 1
;   Rules which are executed immediately prior to performing a CSE simulation - covering NON-Composite Mat objects only
;*************************************************************************
;"dbg - store BEMProc details" Proj:Action = {  StoreBEMProc( Format( "Before run %s CSE Mat SimPrep", RunAbbrev ), 0 )  }
;"dbg" Mat:Action = { MessageBox( "got here for Mat '%s'", Name )  }

   "Assign/create cseMATERIAL to simulate this Mat in CSE - 1"    Mat:cseMATERIALRef[1] =
      {  if (IfValidAnd( ResThrmlCndctCT >= 0 ))
         then  AssignOrCreateComp( cseMATERIAL, Format( "%s-mat", Name ),
											"matDens", ResDens, "matSpHt", ResSpecHt, "matCond", ResThrmlCndct, "matCondCT", ResThrmlCndctCT )
         else  AssignOrCreateComp( cseMATERIAL, Format( "%s-mat", Name ),
											"matDens", ResDens, "matSpHt", ResSpecHt, "matCond", ResThrmlCndct )
         endif  }

; simple Mat
;  
;   Mat   User: "Gypsum Board - 1/2 in."  
;      CodeCat = UVal: "Bldg Board and Siding"  (20)
;      CodeItem = UVal: "Gypsum Board - 1/2 in."  (2005)
;      RVal = RVal: 0.45
;      ThrmlCndct = RVal: 0.09167
;      SpecHt = RVal: 0.27
;      Dens = RVal: 40
;      Thkns = RVal: 0.5
;      HeatCap = RVal: 0.45
;      AreaResZnSurf = RVal: 0
;   
;   MATERIAL   "m-Gypsum Board"  
;      matDens = 40                         // Density, lb/ft3
;      matSpHt = 0.27                       // Specific heat of material, Btu/lb-°F
;      matCond = 0.09167                    // Conductivity (always per foot of thickness), Btuh-ft/ft2-°F
;      matCondCT = 0.000122                 // Coefficient for temperature adjustment of matCond in the forward difference surface conduction model, F(-1)


; More complex, Composite mat layer -
;
;   MATERIAL   "m-SoftWood"  
;      matDens = 35                         // Density, lb/ft3
;      matSpHt = 0.39                       // Specific heat of material, Btu/lb-°F
;      matCond = 0.08167                    // Conductivity (always per foot of thickness), Btuh-ft/ft2-°F
;      matCondCT = 0.0012                   // Coefficient for temperature adjustment of matCond in the forward difference surface conduction model, F(-1)


END
;*************************************************************************


;*************************************************************************
RULELIST "CSE_SimulationPrep_Mat_Composite" 1 0 0 1
;   Rules which are executed immediately prior to performing a CSE simulation - covering Composite Mat objects only
;*************************************************************************
;"dbg - store BEMProc details" Proj:Action = {  StoreBEMProc( Format( "Before run %s CSE Mat SimPrep", RunAbbrev ), 0 )  }

;for Composite Mats
;Mat:cseMATERIALRef[1] = "%s-frm"

   "Assign/create cseMATERIAL to simulate this Mat in CSE - 1"    Mat:cseMATERIALRef[1] =
      {  if (IfValidAnd( ResThrmlCndctCT >= 0 ))
         then  AssignOrCreateComp( cseMATERIAL, Format( "%s-frm", Name ),
											"matDens", ResDens, "matSpHt", ResSpecHt, "matCond", ResThrmlCndct, "matCondCT", ResThrmlCndctCT )
         else  AssignOrCreateComp( cseMATERIAL, Format( "%s-frm", Name ),
											"matDens", ResDens, "matSpHt", ResSpecHt, "matCond", ResThrmlCndct )
         endif  }


;Mat:cseMATERIALRef[2] = "%s-cav"

   "Assign/create cseMATERIAL to simulate this Mat in CSE - 2"    Mat:cseMATERIALRef[2] =
      {  AssignOrCreateComp( cseMATERIAL, Format( "%s-cavoth", Name ),
										  "matDens", ResCavDens, 
                                          "matSpHt", ResCavSpecHt, 
                                          "matCond", ResCavThrmlCndct, 
                                          "matCondCT", ResCavOtherThrmlCndctCT )  }

   "Assign/create cseMATERIAL to simulate this Mat in CSE - 3"    Mat:cseMATERIALRef[3] =
      {  AssignOrCreateComp( cseMATERIAL, Format( "%s-cavclg", Name ),
										  "matDens", ResCavDens, 
                                          "matSpHt", ResCavSpecHt, 
                                          "matCond", ResCavThrmlCndct, 
                                          "matCondCT", ResCavCeilingThrmlCndctCT )  }

END

;*************************************************************************
RULELIST "CSE_SimulationPrep_ConsAssm"  1 0 0 1
;*************************************************************************

   "call subordinate ruleset to assign/create cseMATERIAL for those Mat objects needing them"
      Mat:Action = {    if (IfValidAnd( AreaResZnSurf > 0 )==0 .OR.
                            LocalCompAssigned( cseMATERIALRef ) > 0) then  UNCHANGED
                        else if (CodeCat = "Composite")
                        then  EvalRulelist( "CSE_SimulationPrep_Mat_Composite", 1 ) 
                        else  EvalRulelist( "CSE_SimulationPrep_Mat", 1 )  endif endif  }

   "call subordinate ruleset to assign/create Cavity cseCONSTRUCTION and cseLAYER for those ConsAssm objects needing them"
      ConsAssm:Action = {   if (IfValidAnd( AreaResZnSurf > 0 )==0 .OR.
                                LocalCompAssigned( cseCavCONS ) > 0) 
                            then  UNCHANGED
                            else  EvalRulelist( "CSE_SimulationPrep_ConsAssm_Cav", 1 ) 
                            endif  }

   "call subordinate ruleset to assign/create Frame cseCONSTRUCTION and cseLAYER for those ConsAssm objects needing them"
      ConsAssm:Action = {   if (IfValidAnd( AreaResZnSurf > 0 )==0 .OR.
                                LocalCompAssigned( cseFrmCONS ) > 0) 
                            then  UNCHANGED
                            else if (FrmMat == "Wood")
                            then  EvalRulelist( "CSE_SimulationPrep_ConsAssm_Frm", 1 ) 
                            else  UNCHANGED  endif endif  }

END
;*************************************************************************

;*************************************************************************
RULELIST "CSE_SimulationPrep_ConsAssm_Frm"  1 0 0 1
;*************************************************************************

   "Create cseCONSTRUCTION object for this ConsAssm"     ConsAssm:cseFrmCONS =
      {  CreateComp( cseCONSTRUCTION, Format( "fc-%s", Name ) )  }
   "Set ConsAssm:cseFrmCONS:SourceCons"   ConsAssm:cseFrmCONS:SourceCons = {  Name  }

   "Create cseLAYER object #1 for this ConsAssm"  for:#Layer=(1to10)   ConsAssm:cseFrmLAYERs[#Layer] =
      {  if (NumMats >= #Layer .AND. LocalCompAssigned(MatRef[#Layer]) > 0)
         then CreateComp( cseLAYER, Format( "fcl%g-%s", #Layer, Name ) )
         else UNDEFINED
         endif }
   "Set ConsAssm:cseFrmLAYERs[#Layer]:Parent"  for:#Layer=(1to10) ConsAssm:cseFrmLAYERs[#Layer]:Parent = {  cseFrmCONS  }
   "Set ConsAssm:cseFrmLAYERs[#Layer]:SourceCons"  for:#Layer=(1to10) ConsAssm:cseFrmLAYERs[#Layer]:SourceCons = {  Name  }
   "Set ConsAssm:cseFrmLAYERs[#Layer]:lrMat"   for:#Layer=(1to10) ConsAssm:cseFrmLAYERs[#Layer]:lrMat  = {  MatRef[#Layer]:cseMATERIALRef[1]  }

   "Set ConsAssm:cseFrmLAYERs[#Layer]:lrThk"   for:#Layer=(1to10) ConsAssm:cseFrmLAYERs[#Layer]:lrThk  = {  
       if (IfValidAnd(MatRef[#Layer]:ResFrmThkns > 0))
       then MatRef[#Layer]:ResFrmThkns
       else MatRef[#Layer]:Thkns / 12 
       endif }

END
;*************************************************************************

;*************************************************************************
RULELIST "CSE_SimulationPrep_ConsAssm_Cav"  1 0 0 1
;*************************************************************************

   "Create cseCONSTRUCTION object for this ConsAssm"     ConsAssm:cseCavCONS =
      {  CreateComp( cseCONSTRUCTION, Format( "cc-%s", Name ) )  }
   "Set ConsAssm:cseCavCONS:SourceCons"   ConsAssm:cseCavCONS:SourceCons = {  Name  }

   "Create cseLAYER object #1 for this ConsAssm"  for:#Layer=(1to10)   ConsAssm:cseCavLAYERs[#Layer] =
      {  if (NumMats >= #Layer .AND. LocalCompAssigned(MatRef[#Layer]) > 0)
         then CreateComp( cseLAYER, Format( "ccl%g-%s", #Layer, Name ) )
         else UNDEFINED
         endif }
   "Set ConsAssm:cseCavLAYERs[#Layer]:Parent"  for:#Layer=(1to10) ConsAssm:cseCavLAYERs[#Layer]:Parent = {  cseCavCONS  }
   "Set ConsAssm:cseCavLAYERs[#Layer]:SourceCons"  for:#Layer=(1to10) ConsAssm:cseCavLAYERs[#Layer]:SourceCons = {  Name  }
   "Set ConsAssm:cseCavLAYERs[#Layer]:lrMat"   for:#Layer=(1to10) ConsAssm:cseCavLAYERs[#Layer]:lrMat  = {  
       if (LocalCompAssigned( MatRef[#Layer]:cseMATERIALRef[3] ) > 0 .AND. (CompatibleSurfType == "Ceiling" .OR. CompatibleSurfType == "Roof")) ; 7 or 2
       then  MatRef[#Layer]:cseMATERIALRef[3]
       else if (LocalCompAssigned( MatRef[#Layer]:cseMATERIALRef[2] ) > 0)
       then  MatRef[#Layer]:cseMATERIALRef[2]
       else  MatRef[#Layer]:cseMATERIALRef[1]
       endif endif }

   "Set ConsAssm:cseCavLAYERs[#Layer]:lrThk"   for:#Layer=(1to10) ConsAssm:cseCavLAYERs[#Layer]:lrThk  = {  
       if (IfValidAnd(MatRef[#Layer]:ResFrmThkns > 0))
       then MatRef[#Layer]:ResFrmThkns
       else MatRef[#Layer]:Thkns / 12 
       endif }

END
;*************************************************************************


;*************************************************************************
;*************************************************************************

ENDFILE
