// FluidSystem - General
//
// -------------------------------------------------------------------------
//  Copyright (c) 2014-2017, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
//
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------


//  This rule file addresses the following building descriptors:

// ********** System Type ******************************************************
RULE FluidSys:Type
  DESCRIPTION
    "The type of FluidSystem"
  INPUTCLASS
    Compulsory
// Enums defined in BEMEnums.txt since property referenced by Library object
;  OPTION
;    ChilledWater
;    CondenserWater
;    HotWater
;    ServiceHotWater
;    TwoPipeWater   - Not supported yet
// Proposed defined by user input
// Baseline transformation definitions defined by Library_HVAC.txt file.
ENDRULE


// ********** System Count - for Service Hot Water Only **************************
RULE FluidSys:Cnt
  DESCRIPTION
    "The number of identical Fluid Systems."
  DEFAULT
    if( Type = "ServiceHotWater" )
    then 1
    else UNDEFINED
    endif
ENDRULE


// ********** Status *********************************************************** 
RULE FluidSys:Status
  DESCRIPTION
    "The status of the system or component, used for additions and alterations."
  INPUTCLASS
    Required
; OPTION
;   * Defined in BEMEnums, shown here for reference. Default is 'New' 
;   New
;   Existing 
;   Altered
  DEFAULT
// Status defined from top-down
    if( Proj:IsAlt = 1 )
    then "Existing"
    else "New"
    endif
  CHECKCODE
    if( ResFlrAreaServed > 0 )
    then
      if( ResExistingFlrAreaServed > 0 .AND. Status != "Existing" )
      then
        PostError("FluidSystem '%s' whcih serves existing residential system but has a Status of 
                   '%s'. change to 'Existing' for a valid compliance analysis.", Name, Status)
      else
      if( Proj:ResCompOpt != "Addition and/or Alteration" .AND.
          ( Status = "Existing" .OR. Status = "Altered" ) )
      then
        PostWarning("FluidSystem '%s' whcih serves residential spaces has a Status of '%s', 
                     but residential Compliance Type is '%s'. The status of the system will 
                     be changed to 'New' for compliance analysis.", Name, Status, Proj:ResCompOpt)
      else UNCHANGED
      endif endif
    else if( ( Proj:IsNewMech .AND. Status != "New" ) .OR.
             ( Proj:IsAlt = 0 .AND. Status = "Altered" ) )
    then
      PostWarning("FluidSystem '%s' has a Status of '%s', but Compliance Type is '%s'.
                   The status of the system will be changed to 'New' for compliance
                   analysis.", Name, Status, Proj:CompType)
    else UNCHANGED
    endif endif
  SIZING
    if( ResFlrAreaServed > 0 .AND.
        Proj:ResCompOpt != "Addition and/or Alteration" .AND.
        ( Status = "Existing" .OR. Status = "Altered" ) )
    then "New"
    else if( IfValidAnd( IsBaseSys > 0 ) .OR. Proj:IsNewMech )
    then "New"
    else u:Status
    endif endif
  ANNUAL
    z:Status
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW FluidSys:IsExisting
  DATATYPE
    Integer
  INPUTCLASS
    NotInput
  DEFAULT
    if( Status = "Existing" .AND. ( Proj:IsAddOrAlt .OR. Proj:ResCompOpt = "Addition and/or Alteration" ) )
    then 1 else 0 endif
  SIZING
    if( Status = "Existing" .AND. ( Proj:IsAddOrAlt .OR. Proj:ResCompOpt = "Addition and/or Alteration" ) )
    then 1 else 0 endif
  ANNUAL
    z:IsExisting
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW FluidSys:IsAltered
  DATATYPE
    Integer
  INPUTCLASS
    NotInput
  DEFAULT
    if( Status = "Altered" .AND. ( Proj:IsAlt .OR. Proj:ResCompOpt = "Addition and/or Alteration" ) )
    then 1 else 0 endif
  SIZING
    if( Status = "Altered" .AND. ( Proj:IsAlt .OR. Proj:ResCompOpt = "Addition and/or Alteration" ) )
    then 1 else 0 endif
  ANNUAL
    z:IsAltered
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW FluidSys:IsNew
  DATATYPE
    Integer
  INPUTCLASS
    NotInput
  DEFAULT
    if( Status = "New" .OR. Proj:IsNewMech )
    then 1
    else if( ( IsAltered + IsExisting ) = 0 )
    then 1
    else 0
    endif endif
  SIZING
    if( Status = "New" .OR. Proj:IsNewMech )
    then 1
    else if( ( IsAltered + IsExisting ) = 0 )
    then 1
    else 0
    endif endif
  ANNUAL
    z:IsNew
ENDRULE

// ********** System-level HVAC AutoSizing *************************************
// This is currently not supported by Reverse Translator
;RULE FluidSys:HVACAutoSizing
;  DESCRIPTION
;    "Whether or not the fluid system is to be sized by the simulation."
;  INPUTCLASS
;    Optional
;  DEFAULT
;    Proj:HVACAutoSizing
;  SIZING
;    1 // AutoSize baseline systems
;  ANNUAL
;    0
;ENDRULE

// -----------------------------------------------------------------------------
// Place holder rule, floor area served by FluidSys
RULE NEW FluidSys:CondFlrArea
  DATATYPE
    Float
  LONGFORM
    ConditionedFloorArea
  DESCRIPTION
    ""
  INPUTCLASS
    NotInput
  SIZING
    0
  ANNUAL_PROPOSED
    0
  ANNUAL_BASELINE
    z:CondFlrArea
ENDRULE


// ********** FluidSegment Components ******************************************
RULE FluidSeg:Type
  DESCRIPTION
    "The type of fluid segment"
  HELP
    "The type is used to validate the connections between various FluidSys objects."
  INPUTCLASS
    Compulsory
// Enums defined in BEMEnums.txt since property referenced by Library object
;  OPTION
;    PrimarySupply
;    PrimaryReturn
;    SecondarySupply
;    SecondaryReturn
;    MakeupFluid
;    Connector
// Proposed defined by user input
// Baseline transformation definitions defined by Library_HVAC.txt file.
ENDRULE

// ------------ FluidSegment Status --------------------------------------------
RULE NEW FluidSeg:IsNew
  DATATYPE
    Integer
  DESCRIPTION
    "The status of the system or component, used for additions and alterations."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( Parent( IsNew ) > 0 ) then 1 else 0 endif
  SIZING
    if( Parent( IsNew ) > 0 ) then 1 else 0 endif
  ANNUAL
    z:IsNew   
ENDRULE

RULE NEW FluidSeg:IsExisting
  DATATYPE
    Integer
  DESCRIPTION
    "The status of the system or component, used for additions and alterations."
  INPUTCLASS 
    NotInput
  DEFAULT
// Status defined from top-down
    if( IsNew ) then 0 else 1 endif
  SIZING
    if( IsNew ) then 0 else 1 endif
  ANNUAL
    z:IsExisting    
ENDRULE

// ------------ FluidSegment Number of Objects ---------------------------------
RULE NEW FluidSeg:NumNewCoilObj
  DATATYPE
    Integer
  LONGFORM
   NumberNewCoilObjects
  DESCRIPTION
    "The number of New coil components that reference the FluidSegment."
  HELP
    "Used in rule to determine if the Parent FluidSys should be purged according to
     Add/Alt rules."
  INPUTCLASS 
    NotInput
  DEFAULT
    // *FluidSegInRef
    SumRevRef( CoilHtg:FluidSegInRef, CoilHtg:IsNew ) +
    SumRevRef( CoilClg:FluidSegInRef, CoilClg:IsNew ) +
    // *FluidSegOutRef
    SumRevRef( CoilHtg:FluidSegOutRef, CoilHtg:IsNew ) +
    SumRevRef( CoilClg:FluidSegOutRef, CoilClg:IsNew )  
  SIZING
    // *FluidSegInRef
    SumRevRef( CoilHtg:FluidSegInRef, CoilHtg:IsNew ) +
    SumRevRef( CoilClg:FluidSegInRef, CoilClg:IsNew ) +
    // *FluidSegOutRef
    SumRevRef( CoilHtg:FluidSegOutRef, CoilHtg:IsNew ) +
    SumRevRef( CoilClg:FluidSegOutRef, CoilClg:IsNew )  
ENDRULE

RULE NEW FluidSeg:NumExistingCoilObj
  DATATYPE
    Integer
  LONGFORM
   NumberExistingCoilObjects
  DESCRIPTION
    "The number of Existing coil components that reference the FluidSegment."
  HELP
    "Used in rule to determine if the Parent FluidSys should be purged according to
     Add/Alt rules."
  INPUTCLASS 
    NotInput
  DEFAULT
    // *FluidSegInRef
    SumRevRef( CoilHtg:FluidSegInRef, CoilHtg:IsExisting ) +
    SumRevRef( CoilClg:FluidSegInRef, CoilClg:IsExisting ) +
    // *FluidSegOutRef
    SumRevRef( CoilHtg:FluidSegOutRef, CoilHtg:IsExisting ) +
    SumRevRef( CoilClg:FluidSegOutRef, CoilClg:IsExisting )   
  SIZING
    // *FluidSegInRef
    SumRevRef( CoilHtg:FluidSegInRef, CoilHtg:IsExisting ) +
    SumRevRef( CoilClg:FluidSegInRef, CoilClg:IsExisting ) +
    // *FluidSegOutRef
    SumRevRef( CoilHtg:FluidSegOutRef, CoilHtg:IsExisting ) +
    SumRevRef( CoilClg:FluidSegOutRef, CoilClg:IsExisting )       
ENDRULE

RULE NEW FluidSeg:NumNewPriObj
  DATATYPE
    Integer
  LONGFORM
   NumberNewPrimaryObjects
  DESCRIPTION
    "The number of New primary components that reference the FluidSegment."
  HELP
    "Used in rule to determine if the Parent FluidSys should be purged according to
     Add/Alt rules."
  INPUTCLASS 
    NotInput
  DEFAULT
    // *FluidSegInRef
    SumRevRef( Blr:FluidSegInRef, Blr:IsNew ) +
    SumRevRef( Chlr:EvapFluidSegInRef, Chlr:IsNew ) + 
    SumRevRef( Chlr:CndsrFluidSegInRef, Chlr:IsNew ) + 
    SumRevRef( Chlr:GenFluidSegInRef, Chlr:IsNew ) +
    SumRevRef( HtRej:FluidSegInRef, HtRej:IsNew ) +    
    SumRevRef( ThrmlEngyStor:ChrgFluidSegInRef, ThrmlEngyStor:IsNew ) + 
    SumRevRef( ThrmlEngyStor:DischrgFluidSegInRef, ThrmlEngyStor:IsNew ) + 
    SumRevRef( HX:CHWFluidSegInRef, HX:IsNew ) +
    SumRevRef( HX:CWFluidSegInRef, HX:IsNew ) +
    // *FluidSegOutRef
    SumRevRef( Blr:FluidSegOutRef, Blr:IsNew ) +
    SumRevRef( Chlr:EvapFluidSegOutRef, Chlr:IsNew ) + 
    SumRevRef( Chlr:CndsrFluidSegOutRef, Chlr:IsNew ) + 
    SumRevRef( Chlr:GenFluidSegOutRef, Chlr:IsNew ) +
    SumRevRef( HtRej:FluidSegOutRef, HtRej:IsNew) +    
    SumRevRef( ThrmlEngyStor:ChrgFluidSegOutRef, ThrmlEngyStor:IsNew ) + 
    SumRevRef( ThrmlEngyStor:DischrgFluidSegOutRef, ThrmlEngyStor:IsNew ) + 
    SumRevRef( HX:CHWFluidSegOutRef, HX:IsNew ) +
    SumRevRef( HX:CWFluidSegOutRef, HX:IsNew )             
  SIZING
    // *FluidSegInRef
    SumRevRef( Blr:FluidSegInRef, Blr:IsNew ) +
    SumRevRef( Chlr:EvapFluidSegInRef, Chlr:IsNew ) + 
    SumRevRef( Chlr:CndsrFluidSegInRef, Chlr:IsNew ) + 
    SumRevRef( Chlr:GenFluidSegInRef, Chlr:IsNew ) +
    SumRevRef( HtRej:FluidSegInRef, HtRej:IsNew ) +    
    SumRevRef( ThrmlEngyStor:ChrgFluidSegInRef, ThrmlEngyStor:IsNew ) + 
    SumRevRef( ThrmlEngyStor:DischrgFluidSegInRef, ThrmlEngyStor:IsNew ) + 
    SumRevRef( HX:CHWFluidSegInRef, HX:IsNew ) +
    SumRevRef( HX:CWFluidSegInRef, HX:IsNew ) +
    // *FluidSegOutRef
    SumRevRef( Blr:FluidSegOutRef, Blr:IsNew ) +
    SumRevRef( Chlr:EvapFluidSegOutRef, Chlr:IsNew ) + 
    SumRevRef( Chlr:CndsrFluidSegOutRef, Chlr:IsNew ) + 
    SumRevRef( Chlr:GenFluidSegOutRef, Chlr:IsNew ) +
    SumRevRef( HtRej:FluidSegOutRef, HtRej:IsNew ) +    
    SumRevRef( ThrmlEngyStor:ChrgFluidSegOutRef, ThrmlEngyStor:IsNew ) + 
    SumRevRef( ThrmlEngyStor:DischrgFluidSegOutRef, ThrmlEngyStor:IsNew ) + 
    SumRevRef( HX:CHWFluidSegOutRef, HX:IsNew ) +
    SumRevRef( HX:CWFluidSegOutRef, HX:IsNew )         
ENDRULE

RULE NEW FluidSeg:NumExistingPriObj
  DATATYPE
    Integer
  LONGFORM
   NumberExistingPrimaryObjects
  DESCRIPTION
    "The number of Existing primary components that reference the FluidSegment."
  HELP
    "Used in rule to determine if the Parent FluidSys should be purged according to
     Add/Alt rules."
  INPUTCLASS 
    NotInput
  DEFAULT
    // *FluidSegInRef
    SumRevRef( Blr:FluidSegInRef, Blr:IsExisting ) +
    SumRevRef( Chlr:EvapFluidSegInRef, Chlr:IsExisting ) + 
    SumRevRef( Chlr:CndsrFluidSegInRef, Chlr:IsExisting ) + 
    SumRevRef( Chlr:GenFluidSegInRef, Chlr:IsExisting ) +
    SumRevRef( HtRej:FluidSegInRef, HtRej:IsExisting ) +    
    SumRevRef( ThrmlEngyStor:ChrgFluidSegInRef, ThrmlEngyStor:IsExisting ) + 
    SumRevRef( ThrmlEngyStor:DischrgFluidSegInRef, ThrmlEngyStor:IsExisting ) + 
    SumRevRef( HX:CHWFluidSegInRef, HX:IsExisting ) +
    SumRevRef( HX:CWFluidSegInRef, HX:IsExisting ) +
    // *FluidSegOutRef
    SumRevRef( Blr:FluidSegOutRef, Blr:IsExisting ) +
    SumRevRef( Chlr:EvapFluidSegOutRef, Chlr:IsExisting ) + 
    SumRevRef( Chlr:CndsrFluidSegOutRef, Chlr:IsExisting ) + 
    SumRevRef( Chlr:GenFluidSegOutRef, Chlr:IsExisting ) +
    SumRevRef( HtRej:FluidSegOutRef, HtRej:IsExisting ) +
    SumRevRef( ThrmlEngyStor:ChrgFluidSegOutRef, ThrmlEngyStor:IsExisting ) + 
    SumRevRef( ThrmlEngyStor:DischrgFluidSegOutRef, ThrmlEngyStor:IsExisting ) + 
    SumRevRef( HX:CHWFluidSegOutRef, HX:IsExisting ) +
    SumRevRef( HX:CWFluidSegOutRef, HX:IsExisting )           
  SIZING
    // *FluidSegInRef
    SumRevRef( Blr:FluidSegInRef, Blr:IsExisting ) +
    SumRevRef( Chlr:EvapFluidSegInRef, Chlr:IsExisting ) + 
    SumRevRef( Chlr:CndsrFluidSegInRef, Chlr:IsExisting ) + 
    SumRevRef( Chlr:GenFluidSegInRef, Chlr:IsExisting ) +
    SumRevRef( HtRej:FluidSegInRef, HtRej:IsExisting ) +    
    SumRevRef( ThrmlEngyStor:ChrgFluidSegInRef, ThrmlEngyStor:IsExisting ) + 
    SumRevRef( ThrmlEngyStor:DischrgFluidSegInRef, ThrmlEngyStor:IsExisting ) + 
    SumRevRef( HX:CHWFluidSegInRef, HX:IsExisting ) +
    SumRevRef( HX:CWFluidSegInRef, HX:IsExisting ) +
    // *FluidSegOutRef
    SumRevRef( Blr:FluidSegOutRef, Blr:IsExisting ) +
    SumRevRef( Chlr:EvapFluidSegOutRef, Chlr:IsExisting ) + 
    SumRevRef( Chlr:CndsrFluidSegOutRef, Chlr:IsExisting ) + 
    SumRevRef( Chlr:GenFluidSegOutRef, Chlr:IsExisting ) +
    SumRevRef( HtRej:FluidSegOutRef, HtRej:IsExisting ) +
    SumRevRef( ThrmlEngyStor:ChrgFluidSegOutRef, ThrmlEngyStor:IsExisting ) + 
    SumRevRef( ThrmlEngyStor:DischrgFluidSegOutRef, ThrmlEngyStor:IsExisting ) + 
    SumRevRef( HX:CHWFluidSegOutRef, HX:IsExisting ) +
    SumRevRef( HX:CWFluidSegOutRef, HX:IsExisting ) 
ENDRULE

// ------------ FluidSegment Flags ---------------------------------------------
RULE NEW FluidSeg:IsPriSeg
  DATATYPE
    Integer
  LONGFORM
    IsPrimarySegment
  DESCRIPTION
    "A flag indicating the the FluidSegment is a 'Primary' segment."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( Type = "PrimarySupply" .OR. Type = "PrimaryReturn" ) then 1 else 0 endif
  SIZING
    if( Type = "PrimarySupply" .OR. Type = "PrimaryReturn" ) then 1 else 0 endif
  ANNUAL
    z:IsPriSeg  
ENDRULE

RULE NEW FluidSeg:IsSecSeg
  DATATYPE
    Integer
  LONGFORM
    IsSecondarySegment
  DESCRIPTION
    "A flag indicating the the FluidSegment is a 'Secondary' segment."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( Type = "SecondarySupply" .OR. Type = "SecondaryReturn" ) then 1 else 0 endif
  SIZING
    if( Type = "SecondarySupply" .OR. Type = "SecondaryReturn" ) then 1 else 0 endif
  ANNUAL
    z:IsPriSeg  
ENDRULE

RULE NEW FluidSeg:IsSupSeg
  DATATYPE
    Integer
  LONGFORM
    IsSupplySegment
  DESCRIPTION
    "A flag indicating the the FluidSegment is a 'Supply' segment."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( Type = "PrimarySupply" .OR. Type = "SecondarySupply" ) then 1 else 0 endif
  SIZING
    if( Type = "PrimarySupply" .OR. Type = "SecondarySupply" ) then 1 else 0 endif
  ANNUAL
    z:IsSupSeg 
ENDRULE

RULE NEW FluidSeg:IsRetSeg
  DATATYPE
    Integer
  LONGFORM
    IsReturnSegment
  DESCRIPTION
    "A flag indicating the the FluidSegment is a 'Return' segment."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( Type = "PrimaryReturn" .OR. Type = "SecondaryReturn" ) then 1 else 0 endif
  SIZING
    if( Type = "PrimaryReturn" .OR. Type = "SecondaryReturn" ) then 1 else 0 endif
  ANNUAL
    z:IsRetSeg
ENDRULE


// ********** System Flags ***************************************************** 
// -----------------------------------------------------------------------------
RULE NEW FluidSys:IsPriSec
  DATATYPE
    Integer
  LONGFORM
    IsPrimarySecondary
  DESCRIPTION
    "A flag set to 1 if the loop is configured as primary/secondary. Used for reporting."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( ( SumChildrenIf( FluidSeg:NumCoilHtgComp, FluidSeg:Type = "SecondarySupply" ) +
          SumChildrenIf( FluidSeg:NumCoilClgComp, FluidSeg:Type = "SecondarySupply" ) ) > 0 )
    then 1
    else 0
    endif
  CHECKSIM : T24N_2016
    UNCHANGED
  CHECKSIM : T24N
    if( Proj:IsNoMech > 0 .OR. ( Proj:IsNoAddMech > 0 .AND. IsNew > 0 ) .OR. CompOptDHW = 0 )
    then UNCHANGED // Partial compliance w/o mechanical or DHW
    else
    if( FluidSys:IsPriSec > 0 )
    then // Is primary/secondary configuration, see also Pump:OperCtrl
      PostWarning("FluidSystem '%s' is configured with primary/secondary pumping
                   control. As of 2019.1.0 using the EnergyPlus v9.0.1
                   simulation engine, this configuration results in unexpected 
                   plant simulation behavior.", Name)
    else UNCHANGED
    endif endif
  SIZING
    if( ( SumChildrenIf( FluidSeg:NumCoilHtgComp, FluidSeg:Type = "SecondarySupply" ) +
          SumChildrenIf( FluidSeg:NumCoilClgComp, FluidSeg:Type = "SecondarySupply" ) ) > 0 )
    then 1
    else 0
    endif
  ANNUAL
    z:IsPriSec 
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW FluidSys:IsWSHPSys
  DATATYPE
    Integer
  LONGFORM
    IsWSHPSystem
  DESCRIPTION
    "A flag set to 1 if the loop a condenser water loop for WSHP systems."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( Type = "CondenserWater" .AND.
        ( SumChildrenIf( FluidSeg:CoilHtRejLd, FluidSeg:Type = "PrimarySupply" ) > 0 .OR.
          SumChildrenIf( FluidSeg:CoilHtExtractionLd, FluidSeg:Type = "PrimarySupply" ) > 0 )
      ) 
    then 1
    else 0
    endif
ENDRULE


RULE FluidSeg:Src
  DESCRIPTION
    "The source for fluid segments with Type = MakeupFluid"
  INPUTCLASS
    Required
;  OPTION
;    NoExternalSource
;    MunicipalWater
;    ; WellWater - not yet supported
  DEFAULT
    "NoExternalSource"
// Baseline transformation definitions defined by Library_HVAC.txt file.
  ANNUAL
    if( Parent(Type) = "ServiceHotWater" .AND. Src = "MunicipalWater")
      then z:Src
    else UNDEFINED
    endif
ENDRULE

// -----------------------------------------------------------------------------
// Define the name of fluid segments parent FluidSys
RULE NEW FluidSeg:ParentFluidSysRef
  DATATYPE
    FluidSys
  LONGFORM
    ParentFluidSysReference
  DESCRIPTION
    "The name reference of the FluidSegments parent FluidSys"
  INPUTCLASS
    NotInput   IgnoreUserInput  "FluidSeg:ParentFluidSysRef removed in transition from 2013 3d to 3e and 2016.1 to 2016.2"
  DEFAULT
    FluidSys:Name
  SIZING
    FluidSys:Name
  ANNUAL
    FluidSys:Name
ENDRULE

// -----------------------------------------------------------------------------
// Type of FluidSys that the FluidSeg belongs to
RULE NEW FluidSeg:ParentFluidSysType
  DATATYPE
    Enumeration
  LONGFORM
    ParentFluidSysType
  DESCRIPTION
    "The type of FluidSystem that the FluidSegment is a child of."
  INPUTCLASS
    NotInput
  OPTION
    ChilledWater
    CondenserWater
    HotWater
    ServiceHotWater
    ;TwoPipeWater   - Not supported yet
  DEFAULT
    Parent(Type)
  SIZING
    Parent(Type)
  ANNUAL
    Parent(Type)
ENDRULE

// -----------------------------------------------------------------------------
// QC PriSegRef references
RULE FluidSeg:PriSegRef
  DESCRIPTION
    "Refers to the segment that supplies fluid to a secondary segment."
  HELP
    "Applicable to fluid loops subordinate to the primary loop (secondary, tertiary, etc),
     this property is used to define the inlet and outlet of secondary segment."
  INPUTCLASS
    CondRequired
  CHECKSIM
// DR 12/29/15: This first check is not necessary
;   if( ( Type = "PrimarySupply" .OR.
;         Type = "PrimaryReturn" ) .AND.
;       LocalCompAssigned( PriSegRef ) > 0 )
;   then
;     
;     PostWarning("Primary segment '%s' references another segment via 
;                  the PrimarySegmentRefence property; this may be an indication
;                  of an incorrectly defined fluid system.", Name)
;   else
    if( ( Type = "SecondarySupply" .OR.
        ( Type = "SecondaryReturn" .AND. FluidSys:Type != "ServiceHotWater" ) ) .AND.
        LocalCompAssigned(PriSegRef) = 0 )
    then
      PostError("Secondary segment '%s' must reference a feeder/reciever segment
                 via the PrimarySegmentRefence property.", Name)
    else UNCHANGED
    endif ;endif
  SIZING
    if( IsPriSeg )
    then UNDEFINED
    else UNCHANGED
    endif
ENDRULE

// -----------------------------------------------------------------------------
// Sum up capacity of primary equipment attached to primary segments
RULE NEW FluidSeg:TotPriEquipCap
  DATATYPE
    Float
  LONGFORM
    TotalPrimaryEquipmentCapacity
  DESCRIPTION
    "The sum capacity of primary equipment connected to the primary supply fluid segments."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    if( IsPriSeg )
    then 
      if( FluidSys:Type = "ChilledWater" )
      then
        SumRevRef( Chlr:EvapFluidSegInRef, Chlr:CapRtd ) +  // return side
        SumRevRef( Chlr:EvapFluidSegOutRef, Chlr:CapRtd ) + // supply side
        SumRevRef( ThrmlEngyStor:DischrgFluidSegInRef, ThrmlEngyStor:CapRtd ) +  // return side
        SumRevRef( ThrmlEngyStor:DischrgFluidSegOutRef, ThrmlEngyStor:CapRtd )   // supply side
      else
      if( FluidSys:Type = "CondenserWater" )
      then
        Max(
        Max( ( SumRevRef( HtRej:FluidSegInRef, HtRej:CapRtd ) + // return side
               SumRevRef( HtRej:FluidSegOutRef, HtRej:CapRtd ) ), // supply side  
             ( SumRevRef( Blr:FluidSegInRef, Blr:CapRtd ) + // return side
               SumRevRef( Blr:FluidSegOutRef, Blr:CapRtd ) ) // supply side  
          ), 
             ( SumRevRef( WtrHtr:FluidSegInRef, WtrHtr:CapRtd ) + // return side
               SumRevRef( WtrHtr:FluidSegOutRef, WtrHtr:CapRtd ) ) // supply side  
          ) 
      else
      if( FluidSys:Type = "HotWater" )
      then
        Max( ( SumRevRef( Blr:FluidSegInRef, Blr:CapRtd ) + // return side
               SumRevRef( Blr:FluidSegOutRef, Blr:CapRtd ) ), // supply side    
             ( SumRevRef( WtrHtr:FluidSegInRef, WtrHtr:CapRtd ) + // return side
               SumRevRef( WtrHtr:FluidSegOutRef, WtrHtr:CapRtd ) ) // supply side  
          ) 
      else 0
      endif endif endif
    else
    if( Type = "SecondarySupply" )
    then
      PriSegRef:TotPriEquipCap
    else 0
    endif endif
  CHECKSIM
    if( Parent(Type) <> "ServiceHotWater" ) then
      if( Type = "PrimarySupply" .AND. u:TotPriEquipCap <= 0 ) then
        PostError("Fluid system '%s' has no primary equipment assigned.  Primary 
                   equipment (chillers, boilers, water heaters, cooling towers) must be 
                   assigned.", Parent(Name))
      else UNCHANGED
      endif
    else UNCHANGED
    endif
  SIZING
    UNDEFINED
  ANNUAL
    if( IsPriSeg )
    then 
      if( FluidSys:Type = "ChilledWater" )
      then
        SumRevRef( Chlr:EvapFluidSegInRef, Chlr:CapRtd ) + // return side
        SumRevRef( Chlr:EvapFluidSegOutRef, Chlr:CapRtd ) // supply side
      else
      if( FluidSys:Type = "CondenserWater" )
      then
        Max(
        Max( ( SumRevRef( HtRej:FluidSegInRef, HtRej:CapRtd ) + // return side
               SumRevRef( HtRej:FluidSegOutRef, HtRej:CapRtd ) ), // supply side  
             ( SumRevRef( Blr:FluidSegInRef, Blr:CapRtd ) + // return side
               SumRevRef( Blr:FluidSegOutRef, Blr:CapRtd ) ) // supply side
           ),  
             ( SumRevRef( WtrHtr:FluidSegInRef, WtrHtr:CapRtd ) + // return side
               SumRevRef( WtrHtr:FluidSegOutRef, WtrHtr:CapRtd ) ) // supply side  
           ) 
      else
      if( FluidSys:Type = "HotWater" )
      then
        Max( ( SumRevRef( Blr:FluidSegInRef, Blr:CapRtd ) + // return side
               SumRevRef( Blr:FluidSegOutRef, Blr:CapRtd ) ), // supply side    
             ( SumRevRef( WtrHtr:FluidSegInRef, WtrHtr:CapRtd ) + // return side
               SumRevRef( WtrHtr:FluidSegOutRef, WtrHtr:CapRtd ) ) // supply side  
          ) 
      else 0
      endif endif endif
    else
    if( Type = "SecondarySupply" )
    then
      PriSegRef:TotPriEquipCap
    else 0
    endif endif
ENDRULE

// -----------------------------------------------------------------------------
// DR: These rules are redundant to the FluidSeg:Coil*TotCap rules below
// Calculate capacity of coils attached to supply fluid segments
//RULE NEW FluidSeg:TotCoilCapTotGrossRtd
//  DATATYPE
//    Float
//  LONGFORM
//    TotalCoilCapacityTotalGrossRated
//  DESCRIPTION
//    "The sum capacity of all coils connected to the secondary supply/return
//     and primary return fluid segments."
//  INPUTCLASS
//    NotInput
//  UNITS
//    Btu/h
//  DEFAULT
//    switch ( FluidSys:Type )
//      case "ChilledWater" :
//        SumRevRef(CoilClg:FluidSegOutRef, CoilClg:CapTotGrossRtdSim) +
//        SumRevRef(CoilClg:FluidSegInRef, CoilClg:CapTotGrossRtdSim) +
//        SumRevRef(FluidSeg:PriSegRef, FluidSeg:TotCoilCapTotGrossRtd)
//      case "HotWater"     :
//        SumRevRef(CoilHtg:FluidSegOutRef, CoilHtg:CapTotGrossRtdSim) +
//        SumRevRef(CoilHtg:FluidSegInRef, CoilHtg:CapTotGrossRtdSim) +
//        SumRevRef(FluidSeg:PriSegRef, FluidSeg:TotCoilCapTotGrossRtd)
//      default: 0
//    endswitch
//  SIZING
//    0
//  ANNUAL
//    switch ( FluidSys:Type )
//      case "ChilledWater" :
//        SumRevRef(CoilClg:FluidSegOutRef, CoilClg:CapTotGrossRtdSim) +
//        SumRevRef(CoilClg:FluidSegInRef, CoilClg:CapTotGrossRtdSim) +
//        SumRevRef(FluidSeg:PriSegRef, FluidSeg:TotCoilCapTotGrossRtd)
//      case "HotWater"     :
//        SumRevRef(CoilHtg:FluidSegOutRef, CoilHtg:CapTotGrossRtdSim) +
//        SumRevRef(CoilHtg:FluidSegInRef, CoilHtg:CapTotGrossRtdSim) +
//        SumRevRef(FluidSeg:PriSegRef, FluidSeg:TotCoilCapTotGrossRtd)
//      default: 0
//    endswitch
//ENDRULE
//RULE NEW FluidSeg:TotCoilCapTotGrossRtdNew
//  DATATYPE
//    Float
//  LONGFORM
//    TotalCoilCapacityTotalGrossRatedNew
//  DESCRIPTION
//    "The sum capacity of all NEW coils connected to the secondary supply/return
//     and primary return fluid segments."
//  INPUTCLASS
//    NotInput
//  UNITS
//    Btu/h
//  DEFAULT
//    switch ( FluidSys:Type )
//      case "ChilledWater" :
//        SumRevRefEx(CoilClg:FluidSegOutRef, CoilClg:CapTotGrossRtdSim, 0, 1, CoilClg:IsNew) +
//        SumRevRefEx(CoilClg:FluidSegInRef, CoilClg:CapTotGrossRtdSim, 0, 1, CoilClg:IsNew) +
//        SumRevRef(FluidSeg:PriSegRef, FluidSeg:TotCoilCapTotGrossRtdNew)
//      case "HotWater"     :
//        SumRevRefEx(CoilHtg:FluidSegOutRef, CoilHtg:CapTotGrossRtdSim, 0, 1, CoilHtg:IsNew) +
//        SumRevRefEx(CoilHtg:FluidSegInRef, CoilHtg:CapTotGrossRtdSim, 0, 1, CoilHtg:IsNew) +
//        SumRevRef(FluidSeg:PriSegRef, FluidSeg:TotCoilCapTotGrossRtdNew)
//      default: 0
//    endswitch
//ENDRULE


// -----------------------------------------------------------------------------
// Check primary equipment fluid segment connections
// Chillers
RULE FluidSys:ChlrRef
  DESCRIPTION
    "Reference to the largest chiller in the model, or in the case of a baseline
     system, the name of the chiller that is pulled from the library when the 
     baseline FluidSys is added to the model."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( Type = "ChilledWater" )
    then MaxChildComp( Chlr:CapRtd )
    else UNDEFINED
    endif
  SIZING
    if( IsBaseSys > 0 )
    then UNCHANGED
    else ChlrRef
    endif
ENDRULE

RULE NEW Chlr:ParentFluidSysRef
  DATATYPE
    FluidSys
  LONGFORM
    ParentFluidSysRef
  DESCRIPTION
    "The parent FluidSystem of the Chiller object."
  INPUTCLASS 
    NotInput
  DEFAULT
    Parent( Name )
  SIZING
    Parent( Name )
ENDRULE

RULE Chlr:EvapFluidSegOutRef
  DESCRIPTION
    "The chiller evaporator outlet connection, to chilled water supply, or ChWS)"
  HELP
    "Must be FluidSeg:Type = PrimarySupply for parallel-piped chillers or
     FluidSeg:Type = Connector for upstream series-piped chillers"
  INPUTCLASS
    Required
  CHECKSIM
    if( LocalCompAssigned(EvapFluidSegOutRef) = 0 ) then
      PostError("Chiller '%s' evaporator outlet is not connected to the FluidSegment", Name)
    else if( EvapFluidSegOutRef:Type != "PrimarySupply" .AND.
             EvapFluidSegOutRef:Type != "Connector" ) then
      PostError("Chiller '%s' evaporator is not connected to the PrimarySupply or
                 Connector fluid segment", Name)
    else if( EvapFluidSegOutRef:ParentFluidSysType != "ChilledWater" ) then
      PostError("The evap outlet fluid segment of chiller '%s' must belong to a
                 ChilledWater system", Name)
    else UNCHANGED
    endif endif endif
ENDRULE

RULE Chlr:EvapFluidSegInRef
  DESCRIPTION
    "The chiller evaporator inlet connection, to chilled water return, or ChWR)"
  HELP
    "Must be FluidSeg:Type = PrimaryReturn for parallel-piped chillers or
     FluidSeg:Type = Connector for downstream series-piped chillers"
  INPUTCLASS
    Required
  CHECKSIM
    if( LocalCompAssigned(EvapFluidSegInRef) = 0 ) then
      PostError("Chiller '%s' evaporator inlet is not connected to the FluidSegment", Name)
    else if( EvapFluidSegInRef:Type != "PrimaryReturn" .AND.
             EvapFluidSegInRef:Type != "Connector" ) then
      PostError("Chiller '%s' evaporator is not connected to the PrimaryReturn or
                 Connector fluid segment", Name)
    else if( EvapFluidSegInRef:ParentFluidSysType != "ChilledWater" ) then
      PostError("The evap inlet fluid segment of chiller '%s' must belong to a
                 ChilledWater system", Name)
    else UNCHANGED
    endif endif endif
ENDRULE

RULE Chlr:CndsrFluidSegOutRef
  DESCRIPTION
    "The chiller condenser outlet connection, to condenser water return, or CWR)"
  HELP
    "Must be FluidSeg:Type = PrimaryReturn"
  INPUTCLASS
    CondRequired
  DEFAULT
    if( CndsrType = "Air")
    then UNDEFINED
    else UNCHANGED
    endif
  CHECKSIM
    if( CndsrType != "Air" ) then
      if( LocalCompAssigned(CndsrFluidSegOutRef) = 0 ) then
        PostError("Chiller '%s' condenser outlet is not connected to the FluidSegment", Name)
      else if( CndsrFluidSegOutRef:Type != "PrimaryReturn" ) then
        PostError("Chiller '%s' condenser is not connected to the PrimaryReturn fluid segment", Name)
      else if( CndsrFluidSegOutRef:ParentFluidSysType != "CondenserWater" ) then
        PostError("The condenser outlet fluid segment of chiller '%s' must belong to a
                   CondenserWater system", Name)
      else UNCHANGED
      endif endif endif
    else UNCHANGED
    endif
ENDRULE

RULE Chlr:CndsrFluidSegInRef
  DESCRIPTION
    "The chiller condenser inlet connection, to condenser water supply, or CWS)"
  HELP
    "Must be FluidSeg:Type = PrimarySupply"
  INPUTCLASS
    CondRequired
  DEFAULT
    if( CndsrType = "Air")
    then UNDEFINED
    else UNCHANGED
    endif
  CHECKSIM
    if( CndsrType != "Air")
    then
      if( LocalCompAssigned(CndsrFluidSegInRef) = 0 ) then
        PostError("Chiller '%s' condenser outlet is not connected to the FluidSegment", Name)
      else if( CndsrFluidSegInRef:Type != "PrimarySupply" ) then
        PostError("Chiller '%s' condenser is not connected to the PrimarySupply fluid segment", Name)
      else if( CndsrFluidSegInRef:ParentFluidSysType != "CondenserWater") then
        PostError("The condenser inlet fluid segment of chiller '%s' must belong to a
                   CondenserWater system", Name)
      else UNCHANGED
      endif endif endif
    else UNCHANGED
    endif
ENDRULE

RULE Chlr:GenFluidSegOutRef
  DESCRIPTION
    "The absorption chiller generator outlet connection to a hot water system."
  HELP
    "Must be FluidSeg:Type = PrimaryReturn"
  INPUTCLASS
    CondRequired
  DEFAULT
    if( Type <> "AbsorptionSingleEffect" )
      then UNDEFINED
    else UNCHANGED
    endif
  CHECKSIM
    if( Type = "AbsorptionSingleEffect" ) then
      if( LocalCompAssigned(GenFluidSegOutRef) = 0 ) then
        PostError("Chiller '%s' generator fluid outlet is not connected to the FluidSegment", Name)
      else if( GenFluidSegOutRef:Type != "PrimaryReturn" ) then
        PostError("Chiller '%s' generator fluid outlet is not connected to the PrimaryReturn fluid segment", Name)
      else if( GenFluidSegOutRef:ParentFluidSysType != "HotWater" ) then
        PostError("The generator outlet fluid segment of chiller '%s' must belong to a
                   HotWater system", Name)
      else UNCHANGED
      endif endif endif
    else UNCHANGED
    endif
ENDRULE

RULE Chlr:GenFluidSegInRef
  DESCRIPTION
    "The absorption chiller generator inlet connection to a hot water system."
  HELP
    "Must be FluidSeg:Type = PrimarySupply"
  INPUTCLASS
    CondRequired
  DEFAULT
    if( Type <> "AbsorptionSingleEffect" )
      then UNDEFINED
    else UNCHANGED
    endif
  CHECKSIM
    if( Type = "AbsorptionSingleEffect" ) then
      if( LocalCompAssigned(GenFluidSegInRef) = 0 ) then
        PostError("Chiller '%s' generator fluid inlet is not connected to the FluidSegment", Name)
      else if( GenFluidSegInRef:Type != "PrimarySupply" ) then
        PostError("Chiller '%s' generator fluid inlet is not connected to the PrimarySupply fluid segment", Name)
      else if( GenFluidSegInRef:ParentFluidSysType != "HotWater" ) then
        PostError("The generator inlet fluid segment of chiller '%s' must belong to a
                   HotWater system", Name)
      else UNCHANGED
      endif endif endif
    else UNCHANGED
    endif
ENDRULE

RULE NEW Chlr:CWSysRef
  DATATYPE
    FluidSys
  LONGFORM
    CondenserWaterSystemReference
  DESCRIPTION
    "The CondenserWater system that serves the Chiller object."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( CndsrType = "Fluid" .AND.
        LocalCompAssigned( CndsrFluidSegInRef ) )
    then 
      CndsrFluidSegInRef:ParentFluidSysRef
    else UNDEFINED
    endif
  SIZING
    if( CndsrType = "Fluid" .AND.
        LocalCompAssigned( CndsrFluidSegInRef ) )
    then 
      CndsrFluidSegInRef:ParentFluidSysRef
    else UNDEFINED
    endif
ENDRULE

RULE NEW FluidSys:CWSysRef
  DATATYPE
    FluidSys
  LONGFORM
    CondenserWaterSystemReference
  DESCRIPTION
    "The CondenserWater system that serves the largest chiller
     of the ChilledWater system."
  HELP
    "This currently only supports the case that all chillers are 
     connected to the same CondenserWater system."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( Type = "ChilledWater" .AND.
        SumChildrenIf( Chlr:CapRtd, Chlr:CndsrType = "Fluid" ) > 0 )
    then ChlrRef:CWSysRef
    else UNDEFINED
    endif
  SIZING
    if( Type = "ChilledWater" .AND.
        SumChildrenIf( Chlr:CapRtd, Chlr:CndsrType = "Fluid" ) > 0 )
    then ChlrRef:CWSysRef
    else UNDEFINED
    endif
ENDRULE

// -----------------------------------------------------------------------------
// Boilers
RULE NEW Blr:ParentFluidSysRef
  DATATYPE
    FluidSys
  LONGFORM
    ParentFluidSysRef
  DESCRIPTION
    "The parent FluidSystem of the Boiler object."
  INPUTCLASS 
    NotInput
  DEFAULT
    Parent( Name )
  SIZING
    Parent( Name )
ENDRULE

RULE Blr:FluidSegOutRef
  DESCRIPTION
    "The boiler outlet connection, to hot water supply, or HWS)"
  HELP
    "Must be FluidSeg:Type = PrimarySupply for parallel-piped boilers or
     FluidSeg:Type = Connector for upstream series-piped boilers"
  INPUTCLASS
    CondRequired
  CHECKSIM
    if( LocalCompAssigned(FluidSegOutRef) = 0 ) then
      PostError("Boiler '%s' outlet is not connected to the FluidSegment", Name)
    else if( FluidSegOutRef:Type != "PrimarySupply" .AND.
             FluidSegOutRef:Type != "Connector" ) then
      PostError("Boiler '%s' outlet is not connected to the PrimarySupply or
                 Connector fluid segment", Name)
    else if( Type = "HotWater" .AND.
             FluidSegOutRef:ParentFluidSysType != "HotWater" .AND.
             FluidSegOutRef:ParentFluidSysType != "CondenserWater" ) then
      PostError("The outlet fluid segment of boiler '%s' must belong to a
                 HotWater system or a CondenserWater", Name)
    else UNCHANGED
    endif endif endif
ENDRULE

RULE Blr:FluidSegInRef
  DESCRIPTION
    "The boiler inlet connection, to hot water return, or HWR)"
  HELP
    "Must be FluidSeg:Type = PrimaryReturn for parallel-piped chillers or
     FluidSeg:Type = Connector for downstream series-piped boilers"
  INPUTCLASS
    CondRequired
  CHECKSIM
    if( LocalCompAssigned(FluidSegInRef) = 0 ) then
      PostError("Boiler '%s' inlet is not connected to the FluidSegment", Name)
    else if( FluidSegInRef:Type != "PrimaryReturn" .AND.
             FluidSegInRef:Type != "Connector" ) then
      PostError("Boiler '%s' is not connected to the PrimaryReturn or
                 Connector fluid segment", Name)
    else if( Type = "HotWater" .AND.
             FluidSegInRef:ParentFluidSysType != "HotWater" .AND.
             FluidSegInRef:ParentFluidSysType != "CondenserWater" ) then
      PostError("The inlet fluid segment of boiler '%s' must belong to a
                 HotWater system or a CondenserWater", Name)
    else UNCHANGED
    endif endif endif
ENDRULE

// -----------------------------------------------------------------------------
// Heat rejection
RULE NEW HtRej:ParentFluidSysRef
  DATATYPE
    FluidSys
  LONGFORM
    ParentFluidSysRef
  DESCRIPTION
    "The parent FluidSystem of the HeatRejection object."
  INPUTCLASS 
    NotInput
  DEFAULT
    Parent( Name )
  SIZING
    Parent( Name )
ENDRULE

RULE HtRej:FluidSegOutRef
  DESCRIPTION
    "The heat rejection outlet connection, to condenser water supply, or CWS)"
  HELP
    "Must be FluidSeg:Type = PrimarySupply"
  INPUTCLASS
    CondRequired
  CHECKSIM
    if( LocalCompAssigned(FluidSegOutRef) = 0 ) then
      PostError("Heat rejection '%s' outlet is not connected to the FluidSegment", Name)
    else if( FluidSegOutRef:Type != "PrimarySupply" ) then
      PostError("Heat rejection '%s' outlet is not connected to the PrimarySupply fluid segment", Name)
    else if( FluidSegOutRef:ParentFluidSysType != "CondenserWater" ) then
      PostError("The outlet fluid segment of heat rejection '%s' must belong to a
                 CondenserWater system", Name)
    else UNCHANGED
    endif endif endif
ENDRULE

RULE HtRej:FluidSegInRef
  DESCRIPTION
    "The heat rejection inlet connection, to condenser water return, or CWR)"
  HELP
    "Must be FluidSeg:Type = PrimaryReturn"
  INPUTCLASS
    CondRequired
  CHECKSIM
    if( LocalCompAssigned(FluidSegInRef) = 0 ) then
      PostError("Heat rejection '%s' inlet is not connected to the FluidSegment", Name)
    else if( FluidSegInRef:Type != "PrimaryReturn" ) then
      PostError("Heat rejection '%s' is not connected to the PrimaryReturn fluid segment", Name)
    else if( FluidSegInRef:ParentFluidSysType != "CondenserWater" ) then
      PostError("The inlet fluid segment of heat rejection '%s' must belong to a
                 CondenserWater system", Name)
    else UNCHANGED
    endif endif endif
ENDRULE

// -----------------------------------------------------------------------------
// Count the number of coils on demand side of FluidSystem segments
RULE NEW FluidSeg:NumCoilClgComp
  DATATYPE
    Integer
  LONGFORM
    NumberCoilCoolingComponents
  DESCRIPTION
    "The number of CoilClg components connected to supply-side of plant FluidSys"
  INPUTCLASS
    NotInput
  DEFAULT
    if( IsSupSeg > 0 )
    then CountRefs(CoilClg:FluidSegInRef)
    else 0
    endif
  ANNUAL
    if( IsSupSeg > 0 )
    then CountRefs(CoilClg:FluidSegInRef)
    else 0
    endif
ENDRULE

RULE NEW FluidSeg:NumCoilHtgComp
  DATATYPE
    Integer
  LONGFORM
    NumberCoilHeatingComponents
  DESCRIPTION
    "The number of CoilHtg components connected to supply-side of plant FluidSys"
  INPUTCLASS
    NotInput
  DEFAULT
    if( IsSupSeg > 0 )
    then CountRefs(CoilHtg:FluidSegInRef)
    else 0
    endif
  ANNUAL
    if( IsSupSeg > 0 )
    then CountRefs(CoilHtg:FluidSegInRef)
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW FluidSeg:CondHVACZnCntWithMult
  DATATYPE
    Integer
  LONGFORM
    ConditionedHVACZoneCountWithMultiplier
  DESCRIPTION
    "The number of HVAC zones served by systems that include coils that reference
     the local FluidSeg. Includes thermal zone multipliers."
  INPUTCLASS
    NotInput
  DEFAULT
    if( IsSupSeg > 0 )
    then
      Max( MaxRevRef( CoilClg:FluidSegInRef, CoilClg:CondHVACZnCntWithMult ),
           MaxRevRef( CoilHtg:FluidSegInRef, CoilHtg:CondHVACZnCntWithMult ) )
    else 0
    endif
  SIZING
    if( IsSupSeg > 0 )
    then
      Max( MaxRevRef( CoilClg:FluidSegInRef, CoilClg:CondHVACZnCntWithMult ),
           MaxRevRef( CoilHtg:FluidSegInRef, CoilHtg:CondHVACZnCntWithMult ) )
    else 0
    endif
  ANNUAL
    z:CondHVACZnCntWithMult
ENDRULE

// -----------------------------------------------------------------------------
// Calculate the total gross capacity of cooling coils
// FluidSeg
// These FluidSeg should eventually be deprecated because the FluidSys
// properties below can take thier place
RULE NEW FluidSeg:CoilClgCapHydronic
  DATATYPE
    Float
  LONGFORM
    CoilCoolingCapacityHydronic
  DESCRIPTION
    "Total gross capacity of hydronic ChW cooling coil components connected to the
     supply or return FluidSeg."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    if( IsSupSeg > 0 .OR. IsRetSeg > 0 )
    then
      SumRevRef(CoilClg:FluidSegInRef, CoilClg:CapTotGrossRtdSim) + 
      SumRevRef(CoilClg:FluidSegOutRef, CoilClg:CapTotGrossRtdSim) + 
      SumRevRef(FluidSeg:PriSegRef, FluidSeg:CoilClgCapHydronic) +
      SumRevRef(ResHVACSys:ChWFluidSegInRef, ResHVACSys:SumCentralClgCap) + 
      SumRevRef(ResHVACSys:ChWFluidSegOutRef, ResHVACSys:SumCentralClgCap) +
      SumRevRef(ResHVACSys:CWFluidSegInRef, ResHVACSys:SumCentralClgCap) + 
      SumRevRef(ResHVACSys:CWFluidSegOutRef, ResHVACSys:SumCentralClgCap) +
      SumRevRef(DwellUnitType:ChWFluidSegInRef, DwellUnitType:SumCentralClgCap) + 
      SumRevRef(DwellUnitType:ChWFluidSegOutRef, DwellUnitType:SumCentralClgCap)
    else 0
    endif
  SIZING_PROPOSED
    if( IsSupSeg > 0 .OR. IsRetSeg > 0 )
    then
      SumRevRef(CoilClg:FluidSegInRef, CoilClg:CapTotGrossRtdSim) + 
      SumRevRef(CoilClg:FluidSegOutRef, CoilClg:CapTotGrossRtdSim) + 
      SumRevRef(FluidSeg:PriSegRef, FluidSeg:CoilClgCapHydronic) +
      SumRevRef(ResHVACSys:ChWFluidSegInRef, ResHVACSys:SumCentralClgCap) + 
      SumRevRef(ResHVACSys:ChWFluidSegOutRef, ResHVACSys:SumCentralClgCap) +
      SumRevRef(ResHVACSys:CWFluidSegInRef, ResHVACSys:SumCentralClgCap) + 
      SumRevRef(ResHVACSys:CWFluidSegOutRef, ResHVACSys:SumCentralClgCap)
    else 0
    endif
ENDRULE

RULE NEW FluidSeg:CoilClgCapHydronicExisting
  DATATYPE
    Float
  LONGFORM
    CoilCoolingCapacityHydronicExisting
  DESCRIPTION
    "Total gross capacity of EXISTING ChW cooling coil components connected to the
     supply or return FluidSeg."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    if( IsSupSeg > 0 .OR. IsRetSeg > 0 )
    then
      SumRevRefEx(CoilClg:FluidSegInRef, CoilClg:CapTotGrossRtdSim, 0, 1, CoilClg:IsExisting) +
      SumRevRefEx(CoilClg:FluidSegOutRef, CoilClg:CapTotGrossRtdSim, 0, 1, CoilClg:IsExisting) +
      SumRevRef(FluidSeg:PriSegRef, FluidSeg:CoilClgCapHydronicExisting)
    else 0
    endif
ENDRULE

RULE NEW FluidSeg:CoilClgCapHydronicHlthCare
  DATATYPE
    Float
  LONGFORM
    CoilCoolingCapacityHydronicHealthCare
  DESCRIPTION
    "Total gross capacity of healthcare ChW cooling coil components connected to the
     supply or return FluidSeg."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    if( IsSupSeg > 0 .OR. IsRetSeg > 0 )
    then
      SumRevRefEx(CoilClg:FluidSegInRef, CoilClg:CapTotGrossRtdSim, 0, 1, CoilClg:IsHlthCare) +
      SumRevRefEx(CoilClg:FluidSegOutRef, CoilClg:CapTotGrossRtdSim, 0, 1, CoilClg:IsHlthCare) +
      SumRevRef(FluidSeg:PriSegRef, FluidSeg:CoilClgCapHydronicHlthCare)
    else 0
    endif
ENDRULE

RULE NEW FluidSeg:CoilClgTotFlowRt
  DATATYPE
    Float
  LONGFORM
    CoilCoolingTotalFlowRate
  DESCRIPTION
    "Total gross capacity of cooling coil components connected to the supply or return
     FluidSeg."
  INPUTCLASS
    NotInput
  UNITS
    gpm
  ANNUAL
    if( IsSupSeg > 0 .OR. IsRetSeg > 0 )
    then
      SumRevRef(CoilClg:FluidSegInRef, CoilClg:FluidFlowRtDsgnSim) + 
      SumRevRef(CoilClg:FluidSegOutRef, CoilClg:FluidFlowRtDsgnSim) + 
      SumRevRef(FluidSeg:PriSegRef, FluidSeg:CoilClgTotFlowRt)
    else 0
    endif
ENDRULE

RULE NEW FluidSeg:CoilClgSensCap
  DATATYPE
    Float
  LONGFORM
    CoilCoolingSensibleCapacity
  DESCRIPTION
    "Total sensible capacity of cooling coil components connected to the
     supply or return FluidSeg."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    if( IsSupSeg > 0 .OR. IsRetSeg > 0 )
    then
      SumRevRef(CoilClg:FluidSegInRef, CoilClg:CapSensGrossRtdSim) + 
      SumRevRef(CoilClg:FluidSegOutRef, CoilClg:CapSensGrossRtdSim) + 
      SumRevRef(FluidSeg:PriSegRef, FluidSeg:CoilClgSensCap)
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
// FluidSys
RULE NEW FluidSys:CoilClgCapHydronic
  DATATYPE
    Float
  LONGFORM
    CoilCoolingCapacityHydronic
  DESCRIPTION
    "Total capacity of ChW cooling coil components connected to the
     FluidSys."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    SumRevRef( CoilClg:FluidSysRef, CoilClg:CapHydronic )
  ANNUAL
    SumRevRef( CoilClg:FluidSysRef, CoilClg:CapHydronic )
ENDRULE

RULE NEW FluidSys:CoilClgCapHydronicNew
  DATATYPE
    Float
  LONGFORM
    CoilCoolingCapacityHydronicNew
  DESCRIPTION
    "Total capacity of New ChW cooling coil components connected to the
     FluidSys."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    SumRevRefEx( CoilClg:FluidSysRef, CoilClg:CapHydronic, 0, 1, CoilClg:IsNew )
  ANNUAL
    SumRevRefEx( CoilClg:FluidSysRef, CoilClg:CapHydronic, 0, 1, CoilClg:IsNew )
ENDRULE

RULE NEW FluidSys:CoilClgCapHydronicExisting
  DATATYPE
    Float
  LONGFORM
    CoilCoolingCapacityHydronicExisting
  DESCRIPTION
    "Total capacity of Existing ChW cooling coil components connected to the
     FluidSys."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    SumRevRefEx( CoilClg:FluidSysRef, CoilClg:CapHydronic, 0, 1, CoilClg:IsExisting )
  ANNUAL
    SumRevRefEx( CoilClg:FluidSysRef, CoilClg:CapHydronic, 0, 1, CoilClg:IsExisting )
ENDRULE

RULE NEW FluidSys:CoilClgCapHydronicHlthCare
  DATATYPE
    Float
  LONGFORM
    CoilCoolingCapacityHydronicHealthCare
  DESCRIPTION
    "Total capacity of Healthcare ChW cooling coil components connected to the
     FluidSys."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    SumRevRefEx( CoilClg:FluidSysRef, CoilClg:CapHydronic, 0, 1, CoilClg:IsHlthCare )
  ANNUAL
    SumRevRefEx( CoilClg:FluidSysRef, CoilClg:CapHydronic, 0, 1, CoilClg:IsHlthCare )
ENDRULE

RULE NEW FluidSys:CoilClgCapWSHP
  DATATYPE
    Float
  LONGFORM
    CoilCoolingCapacityWaterSourceHeatPump
  DESCRIPTION
    "The amount of heat rejected by WSHP heating coils to the
     FluidSys at the peak rated coil output."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    SumRevRef( CoilClg:FluidSysRef, CoilClg:CapWSHP )
  ANNUAL
    SumRevRef( CoilClg:FluidSysRef, CoilClg:CapWSHP )
ENDRULE

RULE NEW FluidSys:CoilClgCapWSHPNew
  DATATYPE
    Float
  LONGFORM
    CoilCoolingCapacityWaterSourceHeatPumpNew
  DESCRIPTION
    "The amount of heat rejected by New WSHP heating coils to the
     FluidSys at the peak rated coil output."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    SumRevRefEx( CoilClg:FluidSysRef, CoilClg:CapWSHP, 0, 1, CoilClg:IsNew )
  ANNUAL
    SumRevRefEx( CoilClg:FluidSysRef, CoilClg:CapWSHP, 0, 1, CoilClg:IsNew )
ENDRULE

RULE NEW FluidSys:CoilClgCapWSHPExisting
  DATATYPE
    Float
  LONGFORM
    CoilCoolingCapacityWaterSourceHeatPumpExisting
  DESCRIPTION
    "The amount of heat rejected by Existing WSHP heating coils to the
     FluidSys at the peak rated coil output."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    SumRevRefEx( CoilClg:FluidSysRef, CoilClg:CapWSHP, 0, 1, CoilClg:IsExisting )
  ANNUAL
    SumRevRefEx( CoilClg:FluidSysRef, CoilClg:CapWSHP, 0, 1, CoilClg:IsExisting )
ENDRULE

RULE NEW FluidSys:CoilClgCapWSHPHlthCare
  DATATYPE
    Float
  LONGFORM
    CoilCoolingCapacityWaterSourceHeatPumpHealthCare
  DESCRIPTION
    "The amount of heat rejected by Healthcare WSHP heating coils to the
     FluidSys at the peak rated coil output."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    SumRevRefEx( CoilClg:FluidSysRef, CoilClg:CapWSHP, 0, 1, CoilClg:IsHlthCare )
  ANNUAL
    SumRevRefEx( CoilClg:FluidSysRef, CoilClg:CapWSHP, 0, 1, CoilClg:IsHlthCare )
ENDRULE

RULE NEW FluidSys:CoilClgTotFlowRt
  DATATYPE
    Float
  LONGFORM
    CoilCoolingTotalFlowRate
  DESCRIPTION
    "Total gross capacity of cooling coil (ChW or WSHP) components connected to the
     FluidSys."
  INPUTCLASS
    NotInput
  UNITS
    gpm
  DEFAULT
    SumRevRef( CoilClg:FluidSysRef, CoilClg:FluidFlowRtDsgnSim )
  ANNUAL
    SumRevRef( CoilClg:FluidSysRef, CoilClg:FluidFlowRtDsgnSim )
ENDRULE

// -----------------------------------------------------------------------------
// Calculate the total gross capacity of heating coils
// FluidSeg
// These FluidSeg should eventually be deprecated because the FluidSys
// properties below can take thier place
RULE NEW FluidSeg:CoilHtgCapHydronic
  DATATYPE
    Float
  LONGFORM
    CoilHeatingTotalCapacity
  DESCRIPTION
    "Total capacity of heating coil components connected to the
     supply or return FluidSeg."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    if( IsSupSeg > 0 .OR. IsRetSeg > 0 )
    then
      SumRevRef(CoilHtg:FluidSegInRef, CoilHtg:CapTotGrossRtdSim) + 
      SumRevRef(CoilHtg:FluidSegOutRef, CoilHtg:CapTotGrossRtdSim) + 
      SumRevRef(FluidSeg:PriSegRef, FluidSeg:CoilHtgCapHydronic) +
      SumRevRef(ResHVACSys:HWFluidSegInRef, ResHVACSys:SumCentralHtgCap) +
      SumRevRef(ResHVACSys:HWFluidSegOutRef, ResHVACSys:SumCentralHtgCap) +
      SumRevRef(DwellUnitType:HWFluidSegInRef, DwellUnitType:SumCentralHtgCap) +
      SumRevRef(DwellUnitType:HWFluidSegOutRef, DwellUnitType:SumCentralHtgCap)
    else 0
    endif
  SIZING_PROPOSED
    if( IsSupSeg > 0 .OR. IsRetSeg > 0 )
    then
      SumRevRef(CoilHtg:FluidSegInRef, CoilHtg:CapTotGrossRtdSim) + 
      SumRevRef(CoilHtg:FluidSegOutRef, CoilHtg:CapTotGrossRtdSim) + 
      SumRevRef(FluidSeg:PriSegRef, FluidSeg:CoilHtgCapHydronic) +
      SumRevRef(ResHVACSys:HWFluidSegInRef, ResHVACSys:SumCentralHtgCap) +
      SumRevRef(ResHVACSys:HWFluidSegOutRef, ResHVACSys:SumCentralHtgCap)
    else 0
    endif
ENDRULE

RULE NEW FluidSeg:CoilHtgCapHydronicExisting
  DATATYPE
    Float
  LONGFORM
    CoilHeatingTotalCapacityExisting
  DESCRIPTION
    "Total capacity of Existing heating coil components connected to the
     supply or return FluidSeg."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    if( IsSupSeg > 0 .OR. IsRetSeg > 0 )
    then
      SumRevRefEx(CoilHtg:FluidSegInRef, CoilHtg:CapTotGrossRtdSim, 0, 1, CoilHtg:IsExisting) + 
      SumRevRefEx(CoilHtg:FluidSegOutRef, CoilHtg:CapTotGrossRtdSim, 0, 1, CoilHtg:IsExisting) + 
      SumRevRef(FluidSeg:PriSegRef, FluidSeg:CoilHtgCapHydronicExisting)
    else 0
    endif
ENDRULE

RULE NEW FluidSeg:CoilHtgCapHydronicHlthCare
  DATATYPE
    Float
  LONGFORM
    CoilHeatingTotalCapacityHealthCare
  DESCRIPTION
    "Total gross capacity of healthcare heating coil components connected to the
     supply or return FluidSeg."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    if( IsSupSeg > 0 .OR. IsRetSeg > 0 )
    then
      SumRevRefEx(CoilHtg:FluidSegInRef, CoilHtg:CapTotGrossRtdSim, 0, 1, CoilHtg:IsHlthCare) +
      SumRevRefEx(CoilHtg:FluidSegOutRef, CoilHtg:CapTotGrossRtdSim, 0, 1, CoilHtg:IsHlthCare) +
      SumRevRef(FluidSeg:PriSegRef, FluidSeg:CoilHtgCapHydronicHlthCare)
    else 0
    endif
ENDRULE

RULE NEW FluidSeg:CoilHtgTotFlowRt
  DATATYPE
    Float
  LONGFORM
    CoilHeatingTotalFlowRate
  DESCRIPTION
    "Total capacity of heating coil components connected to the supply or return
     FluidSeg."
  INPUTCLASS
    NotInput
  UNITS
    gpm
  ANNUAL
    if( IsSupSeg > 0 .OR. IsRetSeg > 0 )
    then
      SumRevRef(CoilHtg:FluidSegInRef, CoilHtg:FluidFlowRtDsgnSim) +
      SumRevRef(CoilHtg:FluidSegOutRef, CoilHtg:FluidFlowRtDsgnSim) +
      SumRevRef(FluidSeg:PriSegRef, FluidSeg:CoilHtgTotFlowRt)
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
// FluidSys
RULE NEW FluidSys:CoilHtgCapHydronic
  DATATYPE
    Float
  LONGFORM
    CoilHeatingCapacityHydronic
  DESCRIPTION
    "Total capacity of HW heating coil components connected to the
     FluidSys."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    SumRevRef( CoilHtg:FluidSysRef, CoilHtg:CapHydronic )
  ANNUAL
    SumRevRef( CoilHtg:FluidSysRef, CoilHtg:CapHydronic )
ENDRULE

RULE NEW FluidSys:CoilHtgCapHydronicNew
  DATATYPE
    Float
  LONGFORM
    CoilHeatingCapacityHydronicNew
  DESCRIPTION
    "Total capacity of New heating coil components connected to the
     FluidSys."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    SumRevRefEx( CoilHtg:FluidSysRef, CoilHtg:CapHydronic, 0, 1, CoilHtg:IsNew )
  ANNUAL
    SumRevRefEx( CoilHtg:FluidSysRef, CoilHtg:CapHydronic, 0, 1, CoilHtg:IsNew )
ENDRULE

RULE NEW FluidSys:CoilHtgCapHydronicExisting
  DATATYPE
    Float
  LONGFORM
    CoilHeatingCapacityHydronicExisting
  DESCRIPTION
    "Total capacity of Existing heating coil components connected to the
     FluidSys."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    SumRevRefEx( CoilHtg:FluidSysRef, CoilHtg:CapHydronic, 0, 1, CoilHtg:IsExisting )
  ANNUAL
    SumRevRefEx( CoilHtg:FluidSysRef, CoilHtg:CapHydronic, 0, 1, CoilHtg:IsExisting )
ENDRULE

RULE NEW FluidSys:CoilHtgCapHydronicHlthCare
  DATATYPE
    Float
  LONGFORM
    CoilHeatingCapacityHydronicHealthCare
  DESCRIPTION
    "Total capacity of Healthcare heating coil components connected to the
     FluidSys."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    SumRevRefEx( CoilHtg:FluidSysRef, CoilHtg:CapHydronic, 0, 1, CoilHtg:IsHlthCare )
  ANNUAL
    SumRevRefEx( CoilHtg:FluidSysRef, CoilHtg:CapHydronic, 0, 1, CoilHtg:IsHlthCare )
ENDRULE

RULE NEW FluidSys:CoilHtgCapWSHP
  DATATYPE
    Float
  LONGFORM
    CoilHeatingCapacityWaterSourceHeatPump
  DESCRIPTION
    "The amount of heat rejected by WSHP heating coils to the 
     FluidSys at the peak rated coil output."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    SumRevRef( CoilHtg:FluidSysRef, CoilHtg:CapWSHP )
  ANNUAL
    SumRevRef( CoilHtg:FluidSysRef, CoilHtg:CapWSHP )
ENDRULE

RULE NEW FluidSys:CoilHtgCapWSHPNew
  DATATYPE
    Float
  LONGFORM
    CoilHeatingCapacityWaterSourceHeatPumpNew
  DESCRIPTION
    "The amount of heat extracted by New WSHP heating coils to the
     FluidSys at the peak rated coil output."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    SumRevRefEx( CoilHtg:FluidSysRef, CoilHtg:CapWSHP, 0, 1, CoilHtg:IsNew )
  ANNUAL
    SumRevRefEx( CoilHtg:FluidSysRef, CoilHtg:CapWSHP, 0, 1, CoilHtg:IsNew )
ENDRULE

RULE NEW FluidSys:CoilHtgCapWSHPExisting
  DATATYPE
    Float
  LONGFORM
    CoilHeatingCapacityWaterSourceHeatPumpExisting
  DESCRIPTION
    "The amount of heat extracted by Existing WSHP heating coils to the
     FluidSys at the peak rated coil output."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    SumRevRefEx( CoilHtg:FluidSysRef, CoilHtg:CapWSHP, 0, 1, CoilHtg:IsExisting )
  ANNUAL
    SumRevRefEx( CoilHtg:FluidSysRef, CoilHtg:CapWSHP, 0, 1, CoilHtg:IsExisting )
ENDRULE

RULE NEW FluidSys:CoilHtgCapWSHPHlthCare
  DATATYPE
    Float
  LONGFORM
    CoilHeatingCapacityWaterSourceHeatPumpHealthCare
  DESCRIPTION
    "The amount of heat extracted by Healthcare WSHP heating coils to the
     FluidSys at the peak rated coil output."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    SumRevRefEx( CoilHtg:FluidSysRef, CoilHtg:CapWSHP, 0, 1, CoilHtg:IsHlthCare )
  ANNUAL
    SumRevRefEx( CoilHtg:FluidSysRef, CoilHtg:CapWSHP, 0, 1, CoilHtg:IsHlthCare )
ENDRULE

RULE FluidSys:IsHlthCareSys
  DESCRIPTION
    "A flag that indicates if the FluidSys is classified as a 'health care'
     system for compliance."
  HELP
    ""
  INPUTCLASS
    NotInput
  DEFAULT : T24N_2016 S901G
    0 
  DEFAULT : T24N
    if( CoilClgCapHydronicHlthCare + CoilHtgCapHydronicHlthCare +
        CoilClgCapWSHPHlthCare + CoilHtgCapWSHPHlthCare > 0 )
    then 1
    else if( Type = "CondenserWater" .AND. 
             SumRevRef( FluidSys:CWSysRef, FluidSys:IsHlthCareSys ) > 0 )
    then 1
    else 0
    endif endif
  ANNUAL : T24N
    if( CoilClgCapHydronicHlthCare + CoilHtgCapHydronicHlthCare +
        CoilClgCapWSHPHlthCare + CoilHtgCapWSHPHlthCare > 0 )
    then 1
    else if( Type = "CondenserWater" .AND. 
             SumRevRef( FluidSys:CWSysRef, FluidSys:IsHlthCareSys ) > 0 )
    then 1
    else 0
    endif endif
ENDRULE
RULE NEW FluidSys:IsBaseHlthCareSys
  DATATYPE
    Integer
  LONGFORM
    IsBaselineHealthcareSystem
  DESCRIPTION
    "A flag that indicates if the FluidSys system is a baseline 'health care' 
     system which is based on the proposed design but is modified to meet the 
     requirements described in Standard Section 140.4."
  INPUTCLASS
    NotInput
  SIZING_PROPOSED : T24N
    0
  SIZING_BASELINE : T24N
    if( IsExisting > 0 .OR. IsBaseSys > 0 )
    then 0
    else IsHlthCareSys
    endif
ENDRULE


RULE NEW FluidSys:CoilHtgTotFlowRt
  DATATYPE
    Float
  LONGFORM
    CoilHeatingTotalFlowRate
  DESCRIPTION
    "Total gross capacity of heating coil (HW or WSHP) components connected to the
     FluidSys."
  INPUTCLASS
    NotInput
  UNITS
    gpm
  DEFAULT
    SumRevRef( CoilHtg:FluidSysRef, CoilHtg:FluidFlowRtDsgnSim )
  ANNUAL
    SumRevRef( CoilHtg:FluidSysRef, CoilHtg:FluidFlowRtDsgnSim )
ENDRULE

// -----------------------------------------------------------------------------
// Calculate clg capacity of WSHP coils attached to supply fluid segments
RULE NEW FluidSeg:CoilHtRejLd
  DATATYPE
    Float
  LONGFORM
    CoilHeatRejectionLoad
  DESCRIPTION
    "The sum heat rejection load of all cooling coils connected to the
     supply or return FluidSeg."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    if( IsSupSeg > 0 .OR. IsRetSeg > 0 )
    then
      SumRevRef(CoilClg:FluidSegInRef, CoilClg:HtRejLdSim) + 
      SumRevRef(CoilClg:FluidSegOutRef, CoilClg:HtRejLdSim) + 
      SumRevRef(FluidSeg:PriSegRef, FluidSeg:CoilHtRejLd) +
      SumRevRef(ResHVACSys:CWFluidSegInRef, ResHVACSys:SumCentralHtRejLd) + 
      SumRevRef(ResHVACSys:CWFluidSegOutRef, ResHVACSys:SumCentralHtRejLd) +
      SumRevRef(DwellUnitType:CWFluidSegInRef, DwellUnitType:SumCentralHtRejLd) + 
      SumRevRef(DwellUnitType:CWFluidSegOutRef, DwellUnitType:SumCentralHtRejLd)
    else 0
    endif
  SIZING_PROPOSED
    if( IsSupSeg > 0 .OR. IsRetSeg > 0 )
    then
      SumRevRef(CoilClg:FluidSegInRef, CoilClg:HtRejLdSim) + 
      SumRevRef(CoilClg:FluidSegOutRef, CoilClg:HtRejLdSim) + 
      SumRevRef(FluidSeg:PriSegRef, FluidSeg:CoilHtRejLd) +
      SumRevRef(ResHVACSys:CWFluidSegInRef, ResHVACSys:SumCentralHtRejLd) + 
      SumRevRef(ResHVACSys:CWFluidSegOutRef, ResHVACSys:SumCentralHtRejLd)
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
// Calculate htg capacity of WLHP coils attached to supply fluid segments
RULE NEW FluidSeg:CoilHtExtractionLd
  DATATYPE
    Float
  LONGFORM
    CoilHeatExtractionLoad
  DESCRIPTION
    "The sum heat extraction load of all heating coils connected to the
     supply or return FluidSeg."
  INPUTCLASS
    NotInput
  UNITS
    Btu/h
  DEFAULT
    if( IsSupSeg > 0 .OR. IsRetSeg > 0 )
    then
      SumRevRef(CoilHtg:FluidSegInRef, CoilHtg:HtExtractionLdSim) + 
      SumRevRef(CoilHtg:FluidSegOutRef, CoilHtg:HtExtractionLdSim) + 
      SumRevRef(FluidSeg:PriSegRef, FluidSeg:CoilHtExtractionLd) +
      SumRevRef(ResHVACSys:CWFluidSegInRef, ResHVACSys:SumCentralHtExtractionLd) +
      SumRevRef(ResHVACSys:CWFluidSegOutRef, ResHVACSys:SumCentralHtExtractionLd) +
      SumRevRef(DwellUnitType:CWFluidSegInRef, DwellUnitType:SumCentralHtExtractionLd) +
      SumRevRef(DwellUnitType:CWFluidSegOutRef, DwellUnitType:SumCentralHtExtractionLd)
    else 0
    endif
  SIZING_PROPOSED
    if( IsSupSeg > 0 .OR. IsRetSeg > 0 )
    then
      SumRevRef(CoilHtg:FluidSegInRef, CoilHtg:HtExtractionLdSim) + 
      SumRevRef(CoilHtg:FluidSegOutRef, CoilHtg:HtExtractionLdSim) + 
      SumRevRef(FluidSeg:PriSegRef, FluidSeg:CoilHtExtractionLd) +
      SumRevRef(ResHVACSys:CWFluidSegInRef, ResHVACSys:SumCentralHtExtractionLd) +
      SumRevRef(ResHVACSys:CWFluidSegOutRef, ResHVACSys:SumCentralHtExtractionLd)
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
// QC number of child objects in FluidSys
RULE NEW FluidSeg:PumpCnt
  DATATYPE
    Integer
  LONGFORM
    PumpCount
  INPUTCLASS 
    NotInput
  DEFAULT
    ChildCount( Pump )
  CHECKSIM
    if( PumpCnt > 1 )
    then 
      PostError("FluidSegment '%s' has more than one child Pump object.
                 This is currently not supported.", Name)
    else if( Type = "MakeupFluid" .AND. PumpCnt > 0 )
    then 
      PostError("Makeup FluidSegment '%s' has child Pump object.
                 This is currently not supported. Remove the pump.", Name)
    else UNCHANGED
    endif endif
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Blr:PumpCnt
  DATATYPE
    Integer
  LONGFORM
    PumpCount
  INPUTCLASS 
    NotInput
  DEFAULT
    ChildCount( Pump )
  CHECKSIM
    if( PumpCnt > 1 )
    then 
      PostError("Boiler '%s' has more than one child Pump object.
                 This is currently not supported.", Name)
    else UNCHANGED
    endif  
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW WtrHtr:PumpCnt
  DATATYPE
    Integer
  LONGFORM
    PumpCount
  INPUTCLASS 
    NotInput
  DEFAULT
    ChildCount( Pump )
  CHECKSIM
    if( PumpCnt > 1 )
    then 
      PostError("WtrHtr '%s' has more than one child Pump object.
                 This is currently not supported.", Name)
    else UNCHANGED
    endif  
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Chlr:PumpCnt
  DATATYPE
    Integer
  LONGFORM
    PumpCount
  INPUTCLASS 
    NotInput
  DEFAULT
    ChildCount( Pump )
  CHECKSIM
    if( PumpCnt > 1 )
    then 
      PostError("Chiller '%s' has more than one child Pump object.
                 This is currently not supported.", Name)
    else UNCHANGED
    endif  
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW HtRej:PumpCnt
  DATATYPE
    Integer
  LONGFORM
    PumpCount
  INPUTCLASS 
    NotInput
  DEFAULT
    ChildCount( Pump )
  CHECKSIM
    if( PumpCnt > 1 )
    then 
      PostError("HeatRejection '%s' has more than one child Pump object.
                 This is currently not supported.", Name)
    else UNCHANGED
    endif  
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW ThrmlEngyStor:PumpCnt
  DATATYPE
    Integer
  LONGFORM
    PumpCount
  INPUTCLASS 
    NotInput
  DEFAULT
    ChildCount( Pump )
  CHECKSIM
    if( PumpCnt < 1 )
    then 
      PostWarning("Thermal energy storage system '%s' has no child 
                 Pump object. It is recommended that a pump be modeled for 
                 the thermal energy storage system. ", Name)
    else if ( PumpCnt > 1 )
    then 
      	PostError("Thermal energy storage system '%s' has more than one child 
                 Pump object. This is currently not supported.", Name)
    else UNCHANGED
    endif  endif

ENDRULE

// -----------------------------------------------------------------------------
// QC number of child objects in FluidSys
RULE NEW FluidSys:PriPumpCnt
  DATATYPE
    Integer
  LONGFORM
    PrimaryPumpCount
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildrenIf( FluidSeg:PumpCnt, FluidSeg:Type = "PrimarySupply" ) +
    SumChildrenIf( FluidSeg:PumpCnt, FluidSeg:Type = "PrimaryReturn" )
ENDRULE

// -----------------------------------------------------------------------------
// QC number of child objects in FluidSys
RULE NEW FluidSys:SecPumpCnt
  DATATYPE
    Integer
  LONGFORM
    SecondaryPumpCount
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildrenIf( FluidSeg:PumpCnt, FluidSeg:Type = "SecondarySupply" ) +
    SumChildrenIf( FluidSeg:PumpCnt, FluidSeg:Type = "SecondaryReturn" )
ENDRULE

// -----------------------------------------------------------------------------
// QC number of child objects in FluidSys
RULE NEW FluidSeg:PumpCntVarSpd
  DATATYPE
    Integer
  LONGFORM
    PumpCountVariableSpeed
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildren( Pump:PumpVarSpdFlag )
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Blr:PumpCntVarSpd
  DATATYPE
    Integer
  LONGFORM
    PumpCountVariableSpeed
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildren( Pump:PumpVarSpdFlag )
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW WtrHtr:PumpCntVarSpd
  DATATYPE
    Integer
  LONGFORM
    PumpCountVariableSpeed
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildren( Pump:PumpVarSpdFlag )
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Chlr:PumpCntVarSpd
  DATATYPE
    Integer
  LONGFORM
    PumpCountVariableSpeed
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildren( Pump:PumpVarSpdFlag )
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW HtRej:PumpCntVarSpd
  DATATYPE
    Integer
  LONGFORM
    PumpCountVariableSpeed
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildren( Pump:PumpVarSpdFlag )
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW ThrmlEngyStor:PumpCntVarSpd
  DATATYPE
    Integer
  LONGFORM
    PumpCountVariableSpeed
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildren( Pump:PumpVarSpdFlag )
ENDRULE

// -----------------------------------------------------------------------------
// QC number of child objects in FluidSys
RULE NEW FluidSeg:PumpCntVarSpd
  DATATYPE
    Integer
  LONGFORM
    PumpCountVariableSpeed
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildren( Pump:PumpVarSpdFlag )
ENDRULE

// -----------------------------------------------------------------------------
// QC number of child objects in FluidSys
RULE NEW FluidSys:PriPumpCntVarSpd
  DATATYPE
    Integer
  LONGFORM
    PrimaryPumpCountVariableSpeed
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildrenIf( FluidSeg:PumpCntVarSpd, FluidSeg:Type = "PrimarySupply" ) +
    SumChildrenIf( FluidSeg:PumpCntVarSpd, FluidSeg:Type = "PrimaryReturn" )
ENDRULE

// -----------------------------------------------------------------------------
// QC number of child objects in FluidSys
RULE NEW FluidSys:SecPumpCntVarSpd
  DATATYPE
    Integer
  LONGFORM
    SecondaryPumpCountVariableSpeed
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildrenIf( FluidSeg:PumpCntVarSpd, FluidSeg:Type = "SecondarySupply" ) +
    SumChildrenIf( FluidSeg:PumpCntVarSpd, FluidSeg:Type = "SecondaryReturn" )
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Blr:PumpCntConstantSpd
  DATATYPE
    Integer
  LONGFORM
    PumpCountConstantSpeed
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildren( Pump:PumpConstantSpdFlag )
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW WtrHtr:PumpCntConstantSpd
  DATATYPE
    Integer
  LONGFORM
    PumpCountConstantSpeed
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildren( Pump:PumpConstantSpdFlag )
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Chlr:PumpCntConstantSpd
  DATATYPE
    Integer
  LONGFORM
    PumpCountConstantSpeed
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildren( Pump:PumpConstantSpdFlag )
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW HtRej:PumpCntConstantSpd
  DATATYPE
    Integer
  LONGFORM
    PumpCountConstantSpeed
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildren( Pump:PumpConstantSpdFlag )
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW ThrmlEngyStor:PumpCntConstantSpd
  DATATYPE
    Integer
  LONGFORM
    PumpCountConstantSpeed
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildren( Pump:PumpConstantSpdFlag )
ENDRULE

// -----------------------------------------------------------------------------
// QC number of child objects in FluidSys
RULE NEW FluidSeg:PumpCntConstantSpd
  DATATYPE
    Integer
  LONGFORM
    PumpCountConstantSpeed
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildren( Pump:PumpConstantSpdFlag )
ENDRULE

// -----------------------------------------------------------------------------
// QC number of child objects in FluidSys
RULE NEW FluidSys:PriPumpCntConstantSpd
  DATATYPE
    Integer
  LONGFORM
    PrimaryPumpCountConstantSpeed
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildrenIf( FluidSeg:PumpCntConstantSpd, FluidSeg:Type = "PrimarySupply" ) +
    SumChildrenIf( FluidSeg:PumpCntConstantSpd, FluidSeg:Type = "PrimaryReturn" )
ENDRULE

// -----------------------------------------------------------------------------
// QC number of child objects in FluidSys
RULE NEW FluidSys:SecPumpCntConstantSpd
  DATATYPE
    Integer
  LONGFORM
    SecondaryPumpCountConstantSpeed
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildrenIf( FluidSeg:PumpCntConstantSpd, FluidSeg:Type = "SecondarySupply" ) +
    SumChildrenIf( FluidSeg:PumpCntConstantSpd, FluidSeg:Type = "SecondaryReturn" )
ENDRULE

// -----------------------------------------------------------------------------
// QC number of child objects in FluidSys
RULE NEW FluidSys:SecLoopCnt
  DATATYPE
    Integer
  LONGFORM
    SecondaryLoopCount
  INPUTCLASS 
    NotInput
  DEFAULT
    ( SumChildrenIf( FluidSeg:IsSecSeg, FluidSeg:Type = "SecondarySupply" ) +
      SumChildrenIf( FluidSeg:IsSecSeg, FluidSeg:Type = "SecondaryReturn" ) ) / 2
  CHECKSIM
    if( SumChildrenIf( FluidSeg:IsSecSeg, FluidSeg:Type = "SecondarySupply" ) <>
        SumChildrenIf( FluidSeg:IsSecSeg, FluidSeg:Type = "SecondaryReturn" ) ) then
      PostError("Fluid System '%s' has an unequal number of secondary supply 
                 and secondary return segments.  Secondary loops must have one 
                 supply and one return segment per loop.  Correct the loop
                 configuration.", Name)
    else UNCHANGED
    endif
ENDRULE

// -----------------------------------------------------------------------------
// QC number of child objects in FluidSys
RULE NEW FluidSys:SysPumpCnt
  DATATYPE
    Integer
  LONGFORM
    SystemPumpCount
  INPUTCLASS 
    NotInput
  DEFAULT
    if( Type != "ServiceHotWater" ) then
      SumChildren( Blr:PumpCnt ) +
      SumChildren( WtrHtr:PumpCnt ) +
      SumChildren( Chlr:PumpCnt ) +
      SumChildren( HtRej:PumpCnt ) +
      SumChildren( ThrmlEngyStor:PumpCnt )
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
// QC number of child objects in FluidSys
RULE NEW FluidSys:SysPumpCntVarSpd
  DATATYPE
    Integer
  LONGFORM
    SystemPumpCountVariableSpeed
  INPUTCLASS 
    NotInput
  DEFAULT
    if( Type != "ServiceHotWater" ) then
      SumChildren( Blr:PumpCntVarSpd ) +
      SumChildren( WtrHtr:PumpCntVarSpd ) +
      SumChildren( Chlr:PumpCntVarSpd ) +
      SumChildren( HtRej:PumpCntVarSpd ) +
      SumChildren( ThrmlEngyStor:PumpCntVarSpd )
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
// QC number of child objects in FluidSys
RULE NEW FluidSys:SysPumpCntConstantSpd
  DATATYPE
    Integer
  LONGFORM
    SystemPumpCountConstantSpeed
  INPUTCLASS 
    NotInput
  DEFAULT
    if( Type != "ServiceHotWater" ) then
      SumChildren( Blr:PumpCntConstantSpd ) +
      SumChildren( WtrHtr:PumpCntConstantSpd ) +
      SumChildren( Chlr:PumpCntConstantSpd ) +
      SumChildren( HtRej:PumpCntConstantSpd ) +
      SumChildren( ThrmlEngyStor:PumpCntConstantSpd )
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW FluidSys:PumpCheck
  DATATYPE
    Integer
  LONGFORM
    PumpCheck
  INPUTCLASS 
    NotInput
  CHECKSIM
    if( Type != "ServiceHotWater" ) then
      if( Proj:IsNoMech > 0 .OR. ( Proj:IsNoAddMech > 0 .AND. IsNew > 0 ) )
      then UNCHANGED // Partial compliance w/o mechanical
      else
      if( PriPumpCnt > 0 .AND. SysPumpCnt > 0 ) then
        if( Type = "ChilledWater" ) then
          PostError("Fluid System '%s' has pumps that are children of both the  
                     chiller and a primary fluid segment.  This is not allowed.
                     Remove the pumps from the chiller(s) or the primary fluid
                     segments.", Name)
        else if( Type = "HotWater" ) then
          PostError("Fluid System '%s' has pumps that are children of both the  
                     boiler/water heater and a primary fluid segment.  This is not allowed. 
                     Remove the pumps from the boiler(s)/water heater(s) or the primary fluid
                     segments.", Name)
        else if( Type = "CondenserWater" ) then
          PostError("Fluid System '%s' has pumps that are children of both the  
                     primary equipment (cooling towers, boiler, etc.) and a 
                     primary fluid segment.  This is not allowed.  Remove the 
                     pumps from the primary equipment or the primary fluid
                     segments.", Name)
        else UNCHANGED
        endif endif endif
      else if( PriPumpCnt = 0 .AND. SysPumpCnt = 0 ) then
        PostError("Fluid System '%s' has no pumps.  Pumps must be specified
                   as children of either the primary fluid segment or the 
                   primary equipment (boiler, chiller or cooling tower), but
                   not both.  Add a pump to the fluid system.", Name)
      else if( PriPumpCnt > 0 .AND. SumChildren( ThrmlEngyStor:CapRtd ) > 0 ) then
        PostError("Fluid System '%s' has pumps that are children of a primary 
                   fluid segment.  This is not allowed. Pumps must be specified
                   as children of the chiller(s) and the thermal energy storage
                   system.", Name)
      else if( IsPriSec ) then
        UNCHANGED
      else if( PriPumpCntVarSpd + SysPumpCntVarSpd <> 0 .AND.
               PriPumpCntConstantSpd + SysPumpCntConstantSpd <> 0 ) then
        PostError("Fluid System '%s' has both constant speed and variable speed
                   pumps.  This is not allowed.  All the pumps must be either 
                   constant speed or variable speed, but not both.  Change the 
                   Speed Type to be consistent.", Name)
      else UNCHANGED
      endif endif endif endif endif
      endif
    else if( Type = "ServiceHotWater" ) then
      if( Proj:CompOptDHW = 0 )
      then UNCHANGED // Partial compliance w/o DHW
      else
      if( CoilHtgCapHydronic > 0 .AND. Proj:ExcptCondWtrHtr = "Yes" ) then
        PostError("Service hot water fluid system '%s' has been specified
                   to provide both service hot water and space heating.  In  
                   addition, service water heating has been excluded from the 
                   analysis.  This is not an allowed combination of inputs.  
                   Check the box to include DHW in the analysis.", Name)
      else if( SecPumpCnt = 0 .AND. CoilHtgCapHydronic > 0 ) then
        PostError("Service hot water fluid system '%s' has heating coils but 
                   does not have a secondary loop pump.  Combination 
                   SHW/Heating systems must have heating coils attached to a 
                   secondary loop which must also have a pump.  Check the system
                   configuration.", Name)
      else if( SecPumpCnt <> SecLoopCnt .AND. CoilHtgCapHydronic > 0 ) then
        PostError("Service hot water fluid system '%s' has %g secondary loops 
                   and %g secondary loop pumps.  Combination SHW/Heating systems 
                   must have one pump per secondary loop.  Correct the number of 
                   pumps.", Name, SecLoopCnt, SecPumpCnt )
      else if( SecPumpCnt > 0 .AND. CoilHtgCapHydronic = 0 ) then
        PostError("Service hot water fluid system '%s' has a secondary loop   
                   and a secondary loop pump, but there is no connected heating
                   coil capacity.  Secondary loops for SHW systems are allowed 
                   only for Combination SHW/Heating systems, which require 
                   heating coils.  Add heating coils with non-zero capacity  
                   or remover the secondary loop and pump.", Name)
      else if( PriPumpCnt > 0 .OR. SysPumpCnt > 0 ) then
        PostError("Service hot water fluid system '%s' has a pump on the primary 
                   equipment or primary fluid segments.  This is not allowed. 
                   Remove the pump.", Name)
      else UNCHANGED
      endif endif endif endif endif
      endif
    else UNCHANGED
    endif endif
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW FluidSys:ThrmlEngyStorCnt
  DATATYPE
    Integer
  LONGFORM
    ThermalEnergyStorageCount
  INPUTCLASS 
    NotInput
  DEFAULT
    ChildCount( ThrmlEngyStor )
  CHECKSIM
    if( ThrmlEngyStorCnt > 1 )
    then 
      PostError("Fluid system '%s' has more than one thermal energy storage 
                 system object. This is currently not supported.", Name)
    else UNCHANGED
    endif  
ENDRULE

// -----------------------------------------------------------------------------
// FluidSeg
RULE NEW FluidSeg:WtrFlowCap
  DATATYPE
    Float
  LONGFORM
    WaterFlowCapacity
  DESCRIPTION
    "Total flow rate of all primary components that reference the FluidSeg."
  HELP
    "Used to check consistency between pump and primary equipment flow rates."
  INPUTCLASS
    NotInput
  DEFAULT
    if( FluidSys:Type = "ChilledWater" )
    then
      SumRevRef( Chlr:EvapFluidSegInRef, Chlr:WtrFlowCap ) + // return side
      SumRevRef( Chlr:EvapFluidSegOutRef, Chlr:WtrFlowCap ) // supply side
    else
    if( FluidSys:Type = "CondenserWater" )
    then
      Max( ( SumRevRef( HtRej:FluidSegInRef, HtRej:WtrFlowCap ) + // return side
             SumRevRef( HtRej:FluidSegOutRef, HtRej:WtrFlowCap ) ), // supply side  
           ( SumRevRef( Blr:FluidSegInRef, Blr:WtrFlowCap ) + // return side
             SumRevRef( Blr:FluidSegOutRef, Blr:WtrFlowCap ) ) // supply side  
         ) 
    else
    if( FluidSys:Type = "HotWater" )
    then
      SumRevRef( Blr:FluidSegInRef, Blr:WtrFlowCap ) + // return side
      SumRevRef( Blr:FluidSegOutRef, Blr:WtrFlowCap ) // supply side    
    else 0
    endif endif endif
ENDRULE

// ---------- Annual Solar Fraction for Water Heaters --------------
//RULE FluidSys:AnnualSolFrac
//  DESCRIPTION
//    "This Annual Solar Fraction used for Water Heaters."
//  HELP
//    ""
//  REFERENCE 
//    ACM-5.9.1 Water Heating
//  INPUTCLASS
//    Default
//  MINIMUM
//    0
//  MAXIMUM
//    1
//  DEFAULT : T24N
//    if( FluidSys:Type = "ServiceHotWater" )
//    then
//      if( Proj:AutoHardSize = 1 )
//      then 
//        if( Bldg:AboveGrdStoryCnt < 8 )
//        then
//          if( Bldg:ResFlrArea >=  Bldg:NonResFlrArea )
//          then 
//            if( Proj:CliZnNum < 10 )
//            then 0.20
//            else 0.35
//            endif
//          else 0
//          endif
//        else 0
//        endif
//      else 0
//      endif
//    else UNDEFINED
//    endif
//  DEFAULT : T24N_2016
//    if( FluidSys:Type = "ServiceHotWater" )
//    then
//      if( Proj:AutoHardSize = 1 )
//      then 
//        if( Bldg:ResFlrArea >=  Bldg:NonResFlrArea )
//        then 
//          if( Proj:CliZnNum < 10 )
//          then 0.20
//          else 0.35
//          endif
//        else 0
//        endif
//      else 0
//      endif
//    else UNDEFINED
//    endif
//  SIZING_PROPOSED
//    if( Type = "ServiceHotWater" )
//    then
//      if( (Proj:IsNewEnv = 1 .AND. Proj:IsNewMech = 1) .OR.
//          (Proj:IsNewEnv = 0 .AND. Proj:IsNewMech = 1) .OR.
//          (Proj:IsAddOrAlt = 1 .AND. Proj:IsNewSHWFluidSys = 1) )
//      then
//        if( Proj:ExcptCondWtrHtr = "No" )
//        then u:AnnualSolFrac  //PROPOSED
//        else UNDEFINED  //BASELINE
//        endif
//      else
//        if( Proj:IsNoMech )
//        then
//          if( Proj:ExcptCondWtrHtr = "No" )
//          then u:AnnualSolFrac  //PROPOSED
//          else UNDEFINED  //NOT SIMULATED
//          endif
//        else
//          if( Proj:IsAddOrAlt = 1 .AND. Proj:IsNewSHWFluidSys = 0 )
//          then
//            if( Proj:ExcptCondWtrHtr = "No" )
//            then u:AnnualSolFrac  //PROPOSED
//            else UNDEFINED  //BASELINE
//            endif
//          else UNDEFINED
//          endif
//        endif
//      endif
//    else UNDEFINED
//    endif
//  SIZING_BASELINE
//    UNDEFINED
//  ANNUAL
//    z:AnnualSolFrac
//ENDRULE

//RULE FluidSys:SolCollectorCnt
//  DESCRIPTION
//    ""
//  HELP
//    ""
//  REFERENCE 
//    ACM-5.9.1 Water Heating
//  PREVIOUSNAMES
//    Number  SolPanelCnt
//  INPUTCLASS
//    NotInput
//ENDRULE

// ---------- Does a FluidSys have a Chiller? ----------------------------------
RULE NEW FluidSys:HasChlr
  DATATYPE
    Integer
  LONGFORM
    HasChiller
  DESCRIPTION
    "A flag that indcates that a FluidSys is connected to the chiller."
  HELP
    "The flag values are:
     0 = Is not connected to the chiller
     1 = Is connected to the chiller"
  INPUTCLASS
    NotInput
  DEFAULT
    if( SumChildren( Chlr:CapRtd ) > 0 .OR.
        SumChildren( FluidSeg:TotHtRejFromChlr ) > 0 )
    then 1
    else 0
    endif
  CHECKSIM
    if( Type = "HotWater" .AND. HasChiller = 1 ) then
      PostWarning("FluidSys '%s' is type HotWater, but has a chiller connected 
                   to it.  Check that the fluid system is correctly specified.",
                   Name)
    else if( Type = "ServiceHotWater" .AND. HasChiller = 1 ) then
      PostWarning("FluidSys '%s' is type ServiceHotWater, but has a chiller 
                   connected to it.  Check that the fluid system is correctly 
                   specified.", Name)
    else UNCHANGED
    endif endif
ENDRULE

// ---------- Does a FluidSys have a Thermal Energy Storage System? ----------------------------------
RULE NEW FluidSys:HasChlrPriorityThrmlEngyStor
  DATATYPE
    Integer
  LONGFORM
    HasChillerPriorityThermalEnergyStorage
  DESCRIPTION
    "A flag that indcates that a FluidSys has a thermal energy storage system connected to it."
  HELP
    "The flag values are:
     0 = Does not have thermal energy storage
     1 = Has thermal energy storage"
  INPUTCLASS
    NotInput
  DEFAULT
    if( SumChildren( ThrmlEngyStor:IsChlrPriority ) > 0 )
    then 1
    else 0
    endif
ENDRULE

// Properties primarily for S901G ruleset
// ---------- Heating Fuel Source ------------
RULE NEW FluidSys:HtgFuelSrc
  DATATYPE
    Integer
  LONGFORM
    HeatingFuelSource
  DESCRIPTION
    "A flag that indcates the heating fuel source, if heating components are 
     present, of the FluidSystem."
  HELP
    "The flag values are:
     0 = Electic or no heating components
     1 = Fossil fuel, fossil/electric, or other"
  INPUTCLASS
    NotInput
  DEFAULT
    if( SumChildrenIf( Blr:CapRtd, Blr:FuelSrc = "Gas") +
        SumChildrenIf( Blr:CapRtd, Blr:FuelSrc = "Oil") > 0 )
    then 1
    else 0 
    endif
ENDRULE

// -----------------------------------------------------------------------------
//RULE FluidSys:SolFracFluidSysName
//  DESCRIPTION
//    "Name of the service hot water fluid system with a solar hot water collector."
//  HELP
//    ""
//  REFERENCE 
//    ACM Section 5.2.1-General Information
//  INPUTCLASS 
//    NotInput
//  DEFAULT
//    if( Type = "ServiceHotWater" 
//       .AND. IfValidAnd(AnnualSolFrac > 0) )
//    then Name
//    else UNDEFINED
//    endif
//ENDRULE

// -----------------------------------------------------------------------------
//RULE FluidSys:SolFracRpt
//  DESCRIPTION
//    "Solar Fraction value from Fluid System Data Tab."
//  HELP
//    ""
//  REFERENCE 
//    ACM Section 5.2.1-General Information
//  INPUTCLASS 
//    NotInput
//  DEFAULT
//    if( Type = "ServiceHotWater" 
//       .AND. IfValidAnd(AnnualSolFrac > 0) )
//    then AnnualSolFrac
//    else UNDEFINED
//   endif
//ENDRULE

// -----------------------------------------------------------------------------
RULE FluidSys:WtrHtrTankVol
  DESCRIPTION
    "Storage capacities of all water heaters on the fluid system."
  HELP
    ""
  REFERENCE 
    ACM Section 5.2.1-General Information
  INPUTCLASS 
    Optional
  DEFAULT
    if( Type = "ServiceHotWater" 
       .AND. IfValidAnd(AnnualSolFrac > 0) )
    then TotStorCapProp
    else UNDEFINED
    endif
ENDRULE


// ---------- Common Pipe Simulation ----------------------------------
// For direct control over EnergyPlus PlantLoop:CommonPipeSimulation
// If not specified in SDD Sim XML, translator default rules will take over
RULE FluidSys:CommonPipeSim
  DESCRIPTION
    "Property used to specify EnergyPlus PlantLoop, Field: Common Pipe Simulation."
  HELP
    "This is used to directly manage the value of this property in EnergyPlus. 
     If not specified in SDD XML, it is assumed translator default rules will 
     take over."
  INPUTCLASS 
    Prescribed
  OPTION
    None
    CommonPipe
    TwoWayCommonPipe
  DEFAULT
    if( IfValidAnd( SecLoopCnt > 0 ) .AND. 
        IfValidAnd( SecPumpCnt > 0 ) )
    then "CommonPipe"
    else UNDEFINED
    endif
  SIZING
    if( IfValidAnd( SecLoopCnt > 0 ) .AND. 
        IfValidAnd( SecPumpCnt > 0 ) )
    then "CommonPipe"    // CommonPipe should generally not be used for SHW systems
    else UNDEFINED // Let default translator rules take over
    endif
  ANNUAL
    z:CommonPipeSim
ENDRULE

// ---------- Fluid Seg for Dummy Coils ----------------------------------
RULE NEW FluidSeg:FluidSegInForDummyCoilClg
  DATATYPE 
    Integer
  LONGFORM
    FluidSegmentInForDummyCoilCooling
  DESCRIPTION
    "A flag to designate the FluidSeg object that can be designated as the FluidSegInRef 
     when adding a dummy 'ChilledWater' coil to a system. This assumes FluidSystem 
     is already defined in the user's model."
  HELP
    "The flag is the index of the object in the model. If there is more than one CHW
     loop, the last loop in the model will have dummy coils connected to it."
  INPUTCLASS
    NotInput
  DEFAULT
// Use ComponentIndex to tag a FluidSeg object, which is referenced in rule via MaxAllComp()
    if( IsSupSeg > 0 .AND. FluidSys:Type = "ChilledWater" )
    then
      if( FluidSys:IsPriSec > 0 .AND. IsSecSeg > 0 )
      then ComponentIndex() // Secondary segments are first priority if they exist
      else if( IsPriSeg > 0 )
      then ComponentIndex()
      else 0
      endif endif
    else 0
    endif
ENDRULE

RULE NEW FluidSeg:FluidSegOutForDummyCoilClg
  DATATYPE 
    Integer
  LONGFORM
    FluidSegmentOutForDummyCoilCooling
  DESCRIPTION
    "A flag to designate the FluidSeg object that can be designated as the FluidSegOutRef 
     when adding a dummy 'ChilledWater' coil to a system. This assumes FluidSystem 
     is already defined in the user's model."
  HELP
    "The flag is the index of the object in the model. If there is more than one CHW
     loo, the last loop in the model will have dummy coils connected to it."
  INPUTCLASS
    NotInput
  DEFAULT
// Use ComponentIndex to tag a FluidSeg object, which is referenced in rule via MaxAllComp()
    if( IsRetSeg > 0 .AND. FluidSys:Type = "ChilledWater" )
    then
      if( FluidSys:IsPriSec > 0 .AND. IsSecSeg > 0 )
      then ComponentIndex() // Secondary segments are first priority if they exist
      else if( IsPriSeg > 0 )
      then ComponentIndex()
      else 0
      endif endif
    else 0
    endif
ENDRULE

// =============================================================================
// ---------- Fluid Seg & Sys for Res load passing & TDV scaling --------------- SAC 03/15/22
RULE NEW FluidSeg:ResFlrAreaServed
  DATATYPE 
    Float
  LONGFORM
    ResidentialFloorAreaServed
  DESCRIPTION
    "Residential area served (via ResCentralHtgClgSys) - based on Inlet segs only"
  INPUTCLASS
    NotInput
  DEFAULT
    SumRevRef( ResCentralHtgClgSys:CWFluidSegInRef, ResCentralHtgClgSys:FloorAreaServed ) +
    SumRevRef( ResCentralHtgClgSys:HWFluidSegInRef, ResCentralHtgClgSys:FloorAreaServed ) +
    SumRevRef( ResCentralHtgClgSys:ChWFluidSegInRef, ResCentralHtgClgSys:FloorAreaServed )
  ANNUAL
    SumRevRef( ResCentralHtgClgSys:CWFluidSegInRef, ResCentralHtgClgSys:FloorAreaServed ) +
    SumRevRef( ResCentralHtgClgSys:HWFluidSegInRef, ResCentralHtgClgSys:FloorAreaServed ) +
    SumRevRef( ResCentralHtgClgSys:ChWFluidSegInRef, ResCentralHtgClgSys:FloorAreaServed )
ENDRULE

RULE NEW FluidSeg:ResExistingFlrAreaServed
  DATATYPE 
    Float
  LONGFORM
    ResidentialExistingFloorAreaServed
  DESCRIPTION
    "Residential area served (via existing ResCentralHtgClgSys) - based on Inlet segs only"
  INPUTCLASS
    NotInput
  DEFAULT
    SumRevRef( ResCentralHtgClgSys:CWFluidSegInRef, ResCentralHtgClgSys:exFloorAreaServed ) +
    SumRevRef( ResCentralHtgClgSys:HWFluidSegInRef, ResCentralHtgClgSys:exFloorAreaServed ) +
    SumRevRef( ResCentralHtgClgSys:ChWFluidSegInRef, ResCentralHtgClgSys:exFloorAreaServed )
  ANNUAL
    SumRevRef( ResCentralHtgClgSys:CWFluidSegInRef, ResCentralHtgClgSys:exFloorAreaServed ) +
    SumRevRef( ResCentralHtgClgSys:HWFluidSegInRef, ResCentralHtgClgSys:exFloorAreaServed ) +
    SumRevRef( ResCentralHtgClgSys:ChWFluidSegInRef, ResCentralHtgClgSys:exFloorAreaServed )
ENDRULE

RULE NEW FluidSys:ResFlrAreaServed
  DATATYPE 
    Float
  LONGFORM
    ResidentialFloorAreaServed
  DESCRIPTION
    "Residential area served (via ResCentralHtgClgSys) - based on child Inlet segs only"
  INPUTCLASS
    NotInput
  DEFAULT
    SumChildren( FluidSeg:ResFlrAreaServed )
  ANNUAL
    SumChildren( FluidSeg:ResFlrAreaServed )
ENDRULE

RULE NEW FluidSys:ResExistingFlrAreaServed
  DATATYPE 
    Float
  LONGFORM
    ResidentialExistingFloorAreaServed
  DESCRIPTION
    "Residential area served (via existing ResCentralHtgClgSys) - based on child Inlet segs only"
  INPUTCLASS
    NotInput
  DEFAULT
    SumChildren( FluidSeg:ResExistingFlrAreaServed )
  ANNUAL
    SumChildren( FluidSeg:ResExistingFlrAreaServed )
ENDRULE

RULE NEW ResCentralHtgClgSys:CSELoadPassing
  DATATYPE 
    Integer
  DESCRIPTION
    "Boolean whether this system requires CSE load passing (to E+ simulation)"
  INPUTCLASS
    NotInput
  DEFAULT
    if (IfValidAnd( FloorAreaServed > 0 )==0) then  0
    else  switch (Type)
            case "Water source heat pump" :  1
            case "Four-pipe fan coil"     :  1
            default  :  0
          endswitch
    endif
  ANNUAL
    ValidOr( CSELoadPassing, 0 )
ENDRULE
;; 2,              3,    "Hydronic heating only"
;2,              4,    "Variable refrigerant flow"

RULE NEW FluidSeg:CSELoadPassing
  DATATYPE 
    Float
  DESCRIPTION
    "Boolean whether this system requires CSE load passing (to E+ simulation)"
  INPUTCLASS
    NotInput
  DEFAULT
    SumRevRef( ResCentralHtgClgSys:CWFluidSegInRef, ResCentralHtgClgSys:CSELoadPassing ) +
    SumRevRef( ResCentralHtgClgSys:HWFluidSegInRef, ResCentralHtgClgSys:CSELoadPassing ) +
    SumRevRef( ResCentralHtgClgSys:ChWFluidSegInRef, ResCentralHtgClgSys:CSELoadPassing ) 
  ANNUAL
    ValidOr( CSELoadPassing, 0 )
ENDRULE

RULE NEW FluidSys:CSELoadPassing
  DATATYPE 
    Float
  DESCRIPTION
    "Boolean whether this system requires CSE load passing (to E+ simulation)"
  INPUTCLASS
    NotInput
  DEFAULT
    SumChildren( FluidSeg:CSELoadPassing )
  ANNUAL
    ValidOr( CSELoadPassing, 0 )
ENDRULE

RULE NEW FluidSys:CSE_LoadMeter
  DATATYPE 
    cseLOADMETER
  DESCRIPTION
    "reference to CSE LOADMETER used to facilitate load passing (to E+ simulation)"
  INPUTCLASS
    NotInput
ENDRULE

RULE NEW FluidSys:CSELoadMeterIdx
  DATATYPE 
    Integer
  DESCRIPTION
    "index of cseLOADMETER assigned to this FluidSys"
  INPUTCLASS
    Prescribed
ENDRULE



// =============================================================================
RULE FluidSys:TypeRpt
  DESCRIPTION
    "A text string describing the loop configuration for reporting."
  INPUTCLASS 
    NotInput
  ANNUAL_PROPOSED
    if( Type = "ChilledWater" ) then
      if( IsPriSec > 0 ) then 
        "Chilled Water, Primary/Secondary"
      else "Chilled Water, Primary Only" 
      endif
    else if( Type = "CondenserWater" ) then
      if( IsPriSec > 0 ) then 
        "Condenser Water, Primary/Secondary"
      else "Condenser Water, Primary Only" 
      endif
    else if( Type = "HotWater" ) then
      if( IsPriSec > 0 ) then 
        "Heating Hot Water, Primary/Secondary"
      else "Heating Hot Water, Primary Only" 
      endif
    else if( Type = "ServiceHotWater" ) then
      if( IsPriSec > 0 ) then 
        "Service Hot Water, Primary/Secondary"
      else "Service Hot Water, Primary Only" 
      endif
    else
      "Type not properly defined"
    endif endif endif endif
  ANNUAL_BASELINE
    "NA"
ENDRULE

RULE FluidSys:CtrlRpt
  DESCRIPTION
    "A text string describing the fluid system controls for reporting."
  INPUTCLASS 
    NotInput
  ANNUAL_PROPOSED
    if( TempCtrl = "Fixed" ) then
      if( CtrlType = "DDC" ) then 
        "Fixed Temperature Control, DDC"
      else "Fixed Temperature Control, No DDC"
      endif
    else if( TempCtrl = "Scheduled" ) then
      if( CtrlType = "DDC" ) then 
        "Scheduled Temperature Control, DDC"
      else "Scheduled Temperature Control, No DDC"
      endif
    else if( TempCtrl = "OutsideAirReset" ) then
      if( CtrlType = "DDC" ) then 
        "Outside Air Reset Temperature Control, DDC"
      else "Outside Air Reset Temperature Control, No DDC"
      endif
    else if( TempCtrl = "WetBulbReset" ) then
      if( CtrlType = "DDC" ) then 
        "Wet Bulb Reset Temperature Control, DDC"
      else "Wet Bulb Reset Temperature Control, No DDC"
      endif
    else if( TempCtrl = "FixedDualSetpoint" ) then
      if( CtrlType = "DDC" ) then 
        "Fixed Dual Setpoint Temperature Control, DDC"
      else "Fixed Dual Setpoint Temperature Control, No DDC"
      endif
    else if( TempCtrl = "ScheduledDualSetpoint" ) then
      if( CtrlType = "DDC" ) then 
        "Scheduled Dual Setpoint Temperature Control, DDC"
      else "Scheduled Dual Setpoint Temperature Control, No DDC"
      endif
    else
      "Type not properly defined"
    endif endif endif endif endif endif
ENDRULE

RULE FluidSys:SysCtrlRpt[1]
  DESCRIPTION
    "A text string describing the zone system controls for reporting"
  INPUTCLASS 
    NotInput
  ANNUAL_PROPOSED
    if( LocalStatus( CtrlType ) > 0 ) then
       if( CtrlType = "DDC" ) then 
       "DDC Controls"
       else "NA"
       endif
    else
      "NA" 
    endif
ENDRULE

        
RULE FluidSys:SysCtrlRpt[2]
  DESCRIPTION
    "A text string describing the zone system controls for reporting"
  INPUTCLASS 
    NotInput
  ANNUAL_PROPOSED
    if( LocalStatus( TempCtrl ) > 0 ) then
       if( TempCtrl = "Fixed" ) then 
         "Fixed Temperature Control"
       else if( TempCtrl = "Scheduled" ) then
         "Scheduled Temperature Control"
       else if( TempCtrl = "OutsideAirReset" ) then
         "Outside Air Reset Temperature Control"
       else if( TempCtrl = "WetBulbReset" ) then
         "Wet Bulb Reset Temperature Control"
       else if( TempCtrl = "FixedDualSetpoint" ) then
         "Fixed Dual Setpoint Temperature Control"
       else "NA"
       endif endif endif endif endif
    else
      "NA" 
    endif        
ENDRULE        
        


