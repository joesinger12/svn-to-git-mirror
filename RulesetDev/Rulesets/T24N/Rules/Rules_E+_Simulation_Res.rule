; -------------------------------------------------------------------------
; Rules pertaining to:   Prep Simulating ResZn/ResOtherZn in EnergyPlus
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2014, California Energy Commission
; Copyright (c) 2012-2014, Wrightsoft Corporation
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
; STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------

ENUM_PROPERTIES_VALUE   ; ensures retrieval/logic/us of enum properties assume numeric value (alternative is ENUM_PROPERTIES_STRING)

; SAC 10/24/16 - new rulelist to default misc CSE shell properties
;*************************************************************************
RULELIST "E+_SimulationPrep_Res" 1 0 1 1
;*************************************************************************
   ;--------------------------------------------------------------------
   ; Create Story
   ;--------------------------------------------------------------------
  "Create Story for ResZn and/or ResOtherZn" ResZnGrp:StoryRef = {
      if( ( SumChildren( ResOtherZn:SimInEnergyPlus ) > 0 .OR. SumChildren( ResZn:SimInEnergyPlus ) > 0 )
            .AND. LocalCompAssigned( StoryRef ) = 0 )
      then CreateComp( Story, Local( Name ) + " Story")
      else UNCHANGED
      endif }
  "Set Story parent" ResZnGrp:StoryRef:Parent = { ResZnGrp:Parent }
;  "Set Story:Mult" ResZmGrp:StoryRef:Mult = { Mult }  
  "Set Story FlrToFlrHgt" ResZnGrp:StoryRef:FlrToFlrHgt = { FlrToFlrHgt }
  "Set Story FlrToCeilingHgt" ResZnGrp:StoryRef:FlrToCeilingHgt = { FlrToCeilingHgt }
  "Set Story:IsResCommon" ResZnGrp:StoryRef:IsResCommon = { 1 }
  
   ;--------------------------------------------------------------------
   ; Create Spaces
   ;--------------------------------------------------------------------
  "Create Spc for ResZn" ResZn:SpcRef = {
      if( SimInEnergyPlus > 0 .AND. LocalCompAssigned( SpcRef ) = 0 )
      then CreateComp( Spc, Local( Name ) + " Spc")
      else UNCHANGED
      endif }
  "Create Spc for ResOtherZn" ResOtherZn:SpcRef = {
      if( SimInEnergyPlus > 0 .AND. LocalCompAssigned( SpcRef ) = 0 )
      then CreateComp( Spc, Local( Name ) + " Spc")
      else UNCHANGED
      endif }
      
  "Set ResZn:SpcRef:parent" ResZn:SpcRef:Parent = { Parent( StoryRef ) }
  "Set ResOtherZn:SpcRef:parent" ResOtherZn:SpcRef:Parent = { Parent( StoryRef ) }
  
  "Set ResZn:SpcRef:Area" ResZn:SpcRef:Area = { Area }
  "Set ResOtherZn:SpcRef:Area" ResOtherZn:SpcRef:Area = { Area }
  "Set ResOtherZn:SpcRef:ResCommonArea" ResOtherZn:SpcRef:ResCommonArea = { Area }
  
  
  "Set ResZn:SpcRef:Vol" ResZn:SpcRef:Vol = { Volume }
  "Set ResOtherZn:SpcRef:Vol" ResOtherZn:SpcRef:Vol = { Volume }  
  
  "Set ResZn:SpcRef:SpcFunc" ResZn:SpcRef:SpcFunc = { "High-Rise Residential Living Spaces" }
  "Set ResOtherZn:SpcRef:SpcFunc" ResOtherZn:SpcRef:SpcFunc = { SpcFunc }
  "Set ResOtherZn:SpcRef:IsResCommon" ResOtherZn:SpcRef:IsResCommon = { 1 }
  
  "Set ResZn:SpcRef:VentIsRequired" ResZn:SpcRef:VentIsRequired = { 1 }
  "Set ResOtherZn:SpcRef:VentIsRequired" ResOtherZn:SpcRef:VentIsRequired = { 1 }
// TO DO Spc:CodeVentFlow rule need to be modified to for MFam
  "Set ResZn:SpcRef:CodeVentFlow" ResZn:SpcRef:CodeVentFlow = { SumChildren( DwellUnit:MinIAQCFM ) }
  "Set ResOtherZn:SpcRef:CodeVentFlow" ResOtherZn:SpcRef:CodeVentFlow = { MinIAQCFM }
  
  "Set ResZn:SpcRef:VentFlow" ResZn:SpcRef:VentFlow = { 
      if( Max( CentralSupplyCFM, CentralExhaustCFM ) > 0 ) 
      then Max( CentralSupplyCFM, CentralExhaustCFM )
      else SumChildren( DwellUnit:TotalIAQCFM )
      endif }
  "Set ResOtherZn:SpcRef:VentFlow" ResOtherZn:SpcRef:VentFlow = { 
      if( Max( CentralSupplyCFM, CentralExhaustCFM ) > 0 ) 
      then Max( CentralSupplyCFM, CentralExhaustCFM )
      else TotalIAQCFM
      endif }                                                               
  
  "Set ResZn:SpcRef:ExhFlow" ResZn:SpcRef:ExhFlow = { 
      if( CentralExhaustCFM > 0 ) 
      then CentralExhaustCFM
      else SumChildren( DwellUnit:IAQCFM_Exhaust ) + SumChildren( DwellUnit:IAQBalCFM )
      endif }
  "Set ResOtherZn:SpcRef:ExhFlow" ResOtherZn:SpcRef:ExhFlow = { 
      if( CentralExhaustCFM > 0 ) 
      then CentralExhaustCFM
      else IAQCFM_Exhaust + IAQBalCFM
      endif }
   ;--------------------------------------------------------------------
   ; Create surfaces
   ;--------------------------------------------------------------------
// -------------------- ExtWall --------------------
  "Create ExtWall for ResExtWall" ResExtWall:ExtWallRef = {
      if( Parent( SimInEnergyPlus ) > 0 .AND. Area > 0 .AND. LocalCompAssigned( ExtWallRef ) = 0 )
      then CreateComp( ExtWall, Local( Name ) + " ExtWall")
      else UNCHANGED
      endif }

  "Set ResExtWall:ExtWallRef:Parent" ResExtWall:ExtWallRef:Parent = { Parent( SpcRef) }

  "Set ResExtWall:ExtWallRef:Area" ResExtWall:ExtWallRef:Area = { Area }

  "Set ResExtWall:ExtWallRef:Az" ResExtWall:ExtWallRef:Az = { OrientationValue }
;  "Set ResExtWall:ExtWallRef:RealAz" ResExtWall:ExtWallRef:RealAz = { Azimuth }
; need Az or RealAz to create PolyLp??
  "Set ResExtWall:ExtWallRef:Tilt" ResExtWall:ExtWallRef:Tilt = { Tilt }
  
  "Set ResExtWall:ExtWallRef:ConsAssmRef" ResExtWall:ExtWallRef:ConsAssmRef = { RuleLibrary( ConsAssm, "WoodWallU042") }

// -------------------- IntWall --------------------
  "Create IntWall for ResIntWall" ResIntWall:IntWallRef = {
      if( Parent( SimInEnergyPlus ) > 0 .AND. Area > 0 .AND. LocalCompAssigned( IntWallRef ) = 0 )
      then CreateComp( IntWall, Local( Name ) + " IntWall")
      else UNCHANGED
      endif }

  "Set ResIntWall:IntWallRef:Parent" ResIntWall:IntWallRef:Parent = { Parent( SpcRef) }
  
  "Set ResIntWall:IntWallRef:Area" ResIntWall:IntWallRef:Area = { Area }
  
  "Set ResIntWall:IntWallRef:ConsAssmRef" ResIntWall:IntWallRef:ConsAssmRef = { RuleLibrary( ConsAssm, "WoodFrameIntWallU099") }
  
// -------------------- UndgrFlr --------------------
  "Create UndgrFlr for ResSlabFlr" ResSlabFlr:UndgrFlrRef = {
      if( Parent( SimInEnergyPlus ) > 0 .AND. Area > 0 .AND. LocalCompAssigned( UndgrFlrRef ) = 0 )
      then CreateComp( UndgrFlr, Local( Name ) + " UndgrFlr")
      else UNCHANGED
      endif }

  "Set ResSlabFlr:UndgrFlrRef:Parent" ResSlabFlr:UndgrFlrRef:Parent = { Parent( SpcRef) }

  "Set ResSlabFlr:UndgrFlrRef:Area" ResSlabFlr:UndgrFlrRef:Area = { Area }
  
  "Set ResSlabFlr:UndgrFlrRef:ConsAssmRef" ResSlabFlr:UndgrFlrRef:ConsAssmRef = { RuleLibrary( ConsAssm, "SlabOnOrBelowGradeF073") }
  
   ;--------------------------------------------------------------------
   ; Create sub-surfaces
   ;--------------------------------------------------------------------
// -------------------- Win --------------------
  "Create Win for ResWin" ResWin:WinRef = {
      if( Parent2( SimInEnergyPlus ) > 0 .AND. Area > 0 .AND. LocalCompAssigned( WinRef ) = 0 )
      then CreateComp( Win, Local( Name ) + " Win")
      else UNCHANGED
      endif }

  "Set ResWin:WinRef:Parent" ResWin:WinRef:Parent = { 
      if( ParentComponentType() == "ResExtWall" )
      then Parent( ExtWallRef ) 
      else Parent( IntWallRef )
      endif }
      
  "Set ResWin:WinRef:Area" ResWin:WinRef:Area = { Area }
  
  "Set ResWin:WinRef:FenConsRef" ResWin:WinRef:FenConsRef = { RuleLibrary( FenCons, "FixedWindowU030") }

// -------------------- Dr --------------------
  "Create Dr for ResDr" ResDr:DrRef = {
      if( Parent2( SimInEnergyPlus ) > 0 .AND. Area > 0 .AND. LocalCompAssigned( DrRef ) = 0 )
      then CreateComp( Dr, Local( Name ) + " Dr")
      else UNCHANGED
      endif }

  "Set ResDr:DrRef:Parent" ResDr:DrRef:Parent = { 
      if( ParentComponentType() == "ResExtWall" )
      then Parent( ExtWallRef ) 
      else Parent( IntWallRef )
      endif }
      
  "Set ResDr:DrRef:Area" ResDr:DrRef:Area = { Area }
  
  "Set ResDr:DrRef:DrConsRef" ResDr:DrRef:DrConsRef = { RuleLibrary( DrCons, "ExtOpaqueDoorU050") }

//
//; ResOpening
//; ResSkylt
   
   ;--------------------------------------------------------------------
   ; Create thermal zones
   ;--------------------------------------------------------------------

  "Create ThrmlZn for ResZn" ResZn:SpcRef:ThrmlZnRef = {
      if( SimInEnergyPlus > 0 .AND. LocalCompAssigned( SpcRef:ThrmlZnRef ) = 0 )
      then CreateComp( ThrmlZn, Local( Name ) + " ThrmlZn")
      else UNCHANGED
      endif }
  "Create ThrmlZn for ResOtherZn" ResOtherZn:SpcRef:ThrmlZnRef = {
      if( SimInEnergyPlus > 0 .AND. LocalCompAssigned( SpcRef:ThrmlZnRef ) = 0 )
      then CreateComp( ThrmlZn, Local( Name ) + " ThrmlZn")
      else UNCHANGED
      endif }

  "Evaluate defaulting rules" Proj:Action = { EvalRuleList ("rl_DEFAULT" ) }
  
   ;--------------------------------------------------------------------
   ; Create VentSys
   ;--------------------------------------------------------------------  
  "Set ResZn:SpcRef:ThrmlZnRef:VentSrc" ResZn:SpcRef:ThrmlZnRef:VentSrc = { 2 } ; Forced
  "Set ResOtherZn:SpcRef:ThrmlZnRef:VentSrc" ResOtherZn:SpcRef:ThrmlZnRef:VentSrc = { 2 } ; Forced

  "Create central ventilation system" ResZn:CentralVentSysRef:AirSysRef = {
    if( SimInEnergyPlus > 0 .AND. ( CentralVentSysRef:SupFanCap > 0 .OR. CentralVentSysRef:ExhFanCap > 0 ) )
    then RuleLibrary( AirSys, "ResCentralVentAirSys", 1 )
    else UNCHANGED
    endif }

  "Create VentSys for ResZn" ResZn:SpcRef:ThrmlZnRef:VentSysRef = {
    if( SimInEnergyPlus > 0 )
    then if ( IsCentralVent > 0 )
         then CentralVentSysRef:AirSysRef
         else RuleLibrary( AirSys, "PropVentOnlyAirSys", 1 )
         endif
    else UNCHANGED
    endif }  
  "Create VentSys for ResOtherZn" ResOtherZn:SpcRef:ThrmlZnRef:VentSysRef = {
    if( SimInEnergyPlus > 0 )
    then if ( IsCentralVent > 0 )
         then CentralVentSysRef:AirSysRef
         else RuleLibrary( AirSys, "PropVentOnlyAirSys", 1 )
         endif
    else UNCHANGED
    endif }  

  "Create TrmlUnit for ResZn" ResZn:SpcRef:ThrmlZnRef:TrmlUnitRef = {
    if( SimInEnergyPlus > 0 .AND. IsCentralVent > 0 )
    then RuleLibrary( TrmlUnit, "ResCentralVentAirSys TrmlUnit", 1, SpcRef:ThrmlZnRef:VentSysRef )
    else UNCHANGED
    endif }
  "Create TrmlUnit for ResOtherZn" ResOtherZn:SpcRef:ThrmlZnRef:TrmlUnitRef = {
    if( SimInEnergyPlus > 0 .AND. IsCentralVent > 0 )
    then RuleLibrary( TrmlUnit, "ResCentralVentAirSys TrmlUnit", 1, SpcRef:ThrmlZnRef:VentSysRef )
    else UNCHANGED
    endif }    
  "Set ResZn:SpcRef:ThrmlZnRef:TrmlUnitRef:ZnServedRef" ResZn:SpcRef:ThrmlZnRef:TrmlUnitRef:ZnServedRef = {
    SpcRef:ThrmlZnRef:Name }
  "Set ResOtherZn:SpcRef:ThrmlZnRef:TrmlUnitRef:ZnServedRef" ResOtherZn:SpcRef:ThrmlZnRef:TrmlUnitRef:ZnServedRef = {
    SpcRef:ThrmlZnRef:Name }
      
// ---------- Fan Power ----------
  "Set ResCentralVentSys supply fan power" ResCentralVentSys:AirSysRef:SupAirSegRef:FanRef:PwrIdx = { SupFanPwrIdx }
  "Set ResCentralVentSys exhaust fan power" ResCentralVentSys:AirSysRef:RetAirSegRef:FanRef:PwrIdx = { ExhFanPwrIdx }



// --------- Heat Recovery ----------
  "Create HtRcvry for ResCentralVentSys" ResCentralVentSys:AirSysRef:HtRcvryRef = {
    if( HXType > 0 ) then CreateComp( HtRcvry, AirSysRef:Name + " HtRcvry" ) else UNCHANGED endif }
  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:Parent" ResCentralVentSys:AirSysRef:HtRcvryRef:Parent = {
    AirSysRef:Name }
  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:Type" ResCentralVentSys:AirSysRef:HtRcvryRef:Type = { HXType }
  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:RcvryType" ResCentralVentSys:AirSysRef:HtRcvryRef:RcvryType = { RcvryType }
  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:HtRcvryCertification" ResCentralVentSys:AirSysRef:HtRcvryRef:HtRcvryCertification = { HtRcvryCertification }
  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:HasHXBypass" ResCentralVentSys:AirSysRef:HtRcvryRef:HasHXBypass = {
    if( HXType = 1 ) then HasHXBypass else UNDEFINED endif }

  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:SupFlowRtd" ResCentralVentSys:AirSysRef:HtRcvryRef:SupFlowRtd = { HtRcvrySupFlowRtd }
  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:RtdHtRcvryEff" ResCentralVentSys:AirSysRef:HtRcvryRef:RtdHtRcvryEff = {
    if( HtRcvryCertification = 2 ) then AdjSensHtRcvryEff else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:HtgSensEff100" ResCentralVentSys:AirSysRef:HtRcvryRef:HtgSensEff100 = {
    if( HtRcvryCertification = 1 .AND. RcvryType != 3 ) then HtgSensEff100 else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:HtgSensEff75" ResCentralVentSys:AirSysRef:HtRcvryRef:HtgSensEff75 = {
    if( HtRcvryCertification = 1 .AND. RcvryType != 3 ) then HtgSensEff75 else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:HtgTotEff100" ResCentralVentSys:AirSysRef:HtRcvryRef:HtgTotEff100 = {
    if( HtRcvryCertification = 1 ) then HtgTotEff100 else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:HtgTotEff75" ResCentralVentSys:AirSysRef:HtRcvryRef:HtgTotEff75 = {
    if( HtRcvryCertification = 1 ) then HtgTotEff75 else UNDEFINED endif } 
  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:HtgLatEff100" ResCentralVentSys:AirSysRef:HtRcvryRef:HtgLatEff100 = {
    if( HtRcvryCertification = 1 .AND. RcvryType != 2 ) then HtgLatEff100 else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:HtgLatEff75" ResCentralVentSys:AirSysRef:HtRcvryRef:HtgLatEff75 = {
    if( HtRcvryCertification = 1 .AND. RcvryType != 2 ) then HtgLatEff75 else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:ClgSensEff100" ResCentralVentSys:AirSysRef:HtRcvryRef:ClgSensEff100 = {
    if( HtRcvryCertification = 1 .AND. RcvryType != 3 ) then ClgSensEff100 else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:ClgSensEff75" ResCentralVentSys:AirSysRef:HtRcvryRef:ClgSensEff75 = {
    if( HtRcvryCertification = 1 .AND. RcvryType != 3 ) then ClgSensEff75 else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:ClgTotEff100" ResCentralVentSys:AirSysRef:HtRcvryRef:ClgTotEff100 = {
    if( HtRcvryCertification = 1 ) then ClgTotEff100 else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:ClgTotEff75" ResCentralVentSys:AirSysRef:HtRcvryRef:ClgTotEff75 = {
    if( HtRcvryCertification = 1 ) then ClgTotEff75 else UNDEFINED endif } 
  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:ClgLatEff100" ResCentralVentSys:AirSysRef:HtRcvryRef:ClgLatEff100 = {
    if( HtRcvryCertification = 1 .AND. RcvryType != 2 ) then ClgLatEff100 else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:ClgLatEff75" ResCentralVentSys:AirSysRef:HtRcvryRef:ClgLatEff75 = {
    if( HtRcvryCertification = 1 .AND. RcvryType != 2 ) then ClgLatEff75 else UNDEFINED endif }

;  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:TempCtrl" ResCentralVentSys:AirSysRef:HtRcvryRef:TempCtrl = {
;    if( HXType = 2 .OR. HasHXBypass = 1 ) then HtRcvryTempCtrl else UNDEFINED endif }
;  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:FixedSupTemp" ResCentralVentSys:AirSysRef:HtRcvryRef:FixedSupTemp = {
;    if( HtRcvryTempCtrl = 2 ) then FixedSupTemp else UNDEFINED endif }
;  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:TempSetptSchRef" ResCentralVentSys:AirSysRef:HtRcvryRef:TempSetptSchRef = {
;    if( HtRcvryTempCtrl = 3 ) then TempSetptSchRef else UNDEFINED endif }
    
  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:DefrostCtrl" ResCentralVentSys:AirSysRef:HtRcvryRef:DefrostCtrl = { DefrostCtrl }
  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:DefrostCtrlTemp" ResCentralVentSys:AirSysRef:HtRcvryRef:DefrostCtrlTemp = {
    if( DefrostCtrl = 2 .OR. DefrostCtrl = 3 ) then DefrostCtrlTemp else UNDEFINED endif }  

  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:EconoLockout" ResCentralVentSys:AirSysRef:HtRcvryRef:EconoLockout = { EconoLockout }
  "Set ResCentralVentSys:AirSysRef:HtRcvryRef:AuxPwr" ResCentralVentSys:AirSysRef:HtRcvryRef:AuxPwr = { AuxPwr }
    
// ---------- Temperature Control ----------  
  "Set ResCentralVentSys:AirSysRef:ClgCtrl" ResCentralVentSys:AirSysRef:ClgCtrl = { TempCtrl }
  "Set ResCentralVentSys:AirSysRef:ClgFixedSupTemp" ResCentralVentSys:AirSysRef:ClgFixedSupTemp = {
    if( TempCtrl = 2 .OR. TempCtrl = 8 ) then ClgFixedSupTemp else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:HtgFixedSupTemp" ResCentralVentSys:AirSysRef:HtgFixedSupTemp = {
    if( TempCtrl = 8 ) then HtgFixedSupTemp  else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:ClgSetptSchRef" ResCentralVentSys:AirSysRef:ClgSetptSchRef = {
    if( TempCtrl = 3 .OR. TempCtrl = 9 ) then ClgSetptSchRef else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:HtgSetptSchRef" ResCentralVentSys:AirSysRef:HtgSetptSchRef = {
    if( TempCtrl = 9 ) then HtgSetptSchRef else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:ClRstSupHi" ResCentralVentSys:AirSysRef:ClRstSupHi = {
    if( TempCtrl = 4 ) then ClRstSupHi else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:ClRstSupLow" ResCentralVentSys:AirSysRef:ClRstSupLow = {
    if( TempCtrl = 4 ) then ClRstSupLow else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:ClRstOutdrLow" ResCentralVentSys:AirSysRef:ClRstOutdrLow = {
    if( TempCtrl = 4 ) then ClRstOutdrLow else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:ClRstOutdrHi" ResCentralVentSys:AirSysRef:ClRstOutdrHi = {
    if( TempCtrl = 4 ) then ClRstOutdrHi else UNDEFINED endif }

  "Create necessary CoilClg" ResCentralVentSys:AirSysRef:SupAirSegRef:CoilClgRef = {
    if( TempCtrl > 1 ) then CreateComp( CoilClg, AirSysRef:Name + " CoilClg") else UNCHANGED endif }
  "Create necessary CoilHtg" ResCentralVentSys:AirSysRef:SupAirSegRef:CoilHtgRef = {
    if( TempCtrl > 3 ) then CreateComp( CoilHtg, AirSysRef:Name + " CoilHtg") else UNCHANGED endif }
    
  "Set ResCentralVentSys:AirSysRef:SupAirSegRef:CoilClgRef:Parent" ResCentralVentSys:AirSysRef:SupAirSegRef:CoilClgRef:Parent = {
    AirSysRef:SupAirSegRef }
  "Set ResCentralVentSys:AirSysRef:SupAirSegRef:CoilHtgRef:Parent" ResCentralVentSys:AirSysRef:SupAirSegRef:CoilHtgRef:Parent = {
    AirSysRef:SupAirSegRef }
  "Set ResCentralVentSys:AirSysRef:SupAirSegRef:CoilClgRef:Type" ResCentralVentSys:AirSysRef:SupAirSegRef:CoilClgRef:Type = {
    CoilClgType }
  "Set ResCentralVentSys:AirSysRef:SupAirSegRef:CoilHtgRef:Type" ResCentralVentSys:AirSysRef:SupAirSegRef:CoilHtgRef:Type = {
    CoilHtgType }
  "Set ResCentralVentSys:AirSysRef:SupAirSegRef:CoilClgRef:FluidSegInRef" ResCentralVentSys:AirSysRef:SupAirSegRef:CoilClgRef:FluidSegInRef = {
    if( CoilClgType = 1 ) then ChWFluidSegInRef else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:SupAirSegRef:CoilClgRef:FluidSegOutRef" ResCentralVentSys:AirSysRef:SupAirSegRef:CoilClgRef:FluidSegOutRef = {
    if( CoilClgType = 1 ) then ChWFluidSegOutRef else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:SupAirSegRef:CoilHtgRef:FluidSegInRef" ResCentralVentSys:AirSysRef:SupAirSegRef:CoilHtgRef:FluidSegInRef = {
    if( CoilHtgType = 4 ) then HWFluidSegInRef else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:SupAirSegRef:CoilHtgRef:FluidSegOutRef" ResCentralVentSys:AirSysRef:SupAirSegRef:CoilHtgRef:FluidSegOutRef = {
    if( CoilHtgType = 4 ) then HWFluidSegOutRef else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:SupAirSegRef:CoilHtgRef:FurnAFUE" ResCentralVentSys:AirSysRef:SupAirSegRef:CoilHtgRef:FurnAFUE = {
    if( CoilHtgType = 2 ) then FurnAFUE else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:SupAirSegRef:CoilHtgRef:HtPumpCOP" ResCentralVentSys:AirSysRef:SupAirSegRef:CoilHtgRef:HtPumpCOP = {
    if( CoilHtgType = 3 ) then COP47 else UNDEFINED endif }
  "Set ResCentralVentSys:AirSysRef:SupAirSegRef:CoilClgRef:DXEER" ResCentralVentSys:AirSysRef:SupAirSegRef:CoilClgRef:DXEER = {
    if( CoilClgType = 2 ) then EER else UNDEFINED endif }
          
   ;--------------------------------------------------------------------
   ; Create ZnSys
   ;--------------------------------------------------------------------
// TO DO
  "Create ZnSys for ResZn" ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1] = {
    if( SimInEnergyPlus > 0 )
    then switch( HVACSystem:Type )
         case  1  :  RuleLibrary( ZnSys, "PTAC-ResZnSys", 1 ) ; Other Heating and Cooling System
         case  2  :  RuleLibrary( ZnSys, "PTHP-ResZnSys", 1 ) ; Heat Pump Heating and Cooling System
         case  4  :  switch( ChildDwellUnitRef:DwellUnitTypeRef:HVACCentralRef:Type )
                     case  1  :  RuleLibrary( ZnSys, "FPFC-ResZnSys", 1 )
                     case  2  :  RuleLibrary( ZnSys, "WSHP-ResZnSys", 1 )
                     case  3  :  RuleLibrary( ZnSys, "HydHtgOnly-ResZnSys", 1 )
                     case  4  :  RuleLibrary( ZnSys, "VRF-ResZnSys", 1 )
                     default  :  UNCHANGED
                     endswitch
         default  :  UNCHANGED
         endswitch
    else UNCHANGED
    endif }
  "Create ZnSys for ResOtherZn" ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1] = {
    if( SimInEnergyPlus > 0 ) ;.AND. LocalCompAssigned( SpcRef:ThrmlZnRef:PriAirCondgSysRef[1] ) = 0 )
    then switch( ActiveHVACSystem:Type )
         case  1  :  RuleLibrary( ZnSys, "PTAC-ResZnSys", 1 ) ; Other Heating and Cooling System
         case  2  :  RuleLibrary( ZnSys, "PTHP-ResZnSys", 1 ) ; Heat Pump Heating and Cooling System
         case  4  :  switch( ActiveHVACSystem:HVACCentralRef:Type )
                     case  1  :  RuleLibrary( ZnSys, "FPFC-ResZnSys", 1 )
                     case  2  :  RuleLibrary( ZnSys, "WSHP-ResZnSys", 1 )
                     case  3  :  RuleLibrary( ZnSys, "HydHtgOnly-ResZnSys", 1 )
                     case  4  :  RuleLibrary( ZnSys, "VRF-ResZnSys", 1 )
                     default  :  UNCHANGED
                     endswitch
         default  :  UNCHANGED
         endswitch
    else UNCHANGED
    endif }
    
  "Set ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:VRFSysRef" ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:VRFSysRef = {
    if( SimInEnergyPlus > 0 .AND. LocalCompAssigned( SpcRef:ThrmlZnRef:PriAirCondgSysRef[1] ) .AND. HVACSystem:Type = 4 ) 
    then if( HVACSystem:HVACCentralRef:Type = 4 )
         then HVACSystem:HVACCentralRef:VRFSysRef
         else UNDEFINED
         endif
    else UNDEFINED
    endif }
  "Set ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:VRFSysRef" ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:VRFSysRef = {
    if( SimInEnergyPlus > 0 .AND. LocalCompAssigned( SpcRef:ThrmlZnRef:PriAirCondgSysRef[1] ) .AND. ActiveHVACSystem:Type = 4 ) 
    then if( ActiveHVACSystem:HVACCentralRef:Type = 4 )
         then ActiveHVACSystem:HVACCentralRef:VRFSysRef
         else UNDEFINED
         endif
    else UNDEFINED
    endif }
    
  "Set ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:CoilHtgRef:FluidSegInRef" ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:CoilHtgRef:FluidSegInRef = {
    if( SimInEnergyPlus > 0 .AND. LocalCompAssigned( SpcRef:ThrmlZnRef:PriAirCondgSysRef[1] ) .AND. HVACSystem:Type = 4 ) 
    then switch( HVACSystem:HVACCentralRef:Type )
         case  1  :  HVACSystem:HVACCentralRef:HWFluidSegInRef
         case  2  :  HVACSystem:HVACCentralRef:CWFluidSegInRef
         case  3  :  HVACSystem:HVACCentralRef:HWFluidSegInRef
         default  :  UNDEFINED
         endswitch
    else UNDEFINED
    endif } 
  "Set ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:CoilHtgRef:FluidSegInRef" ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:CoilHtgRef:FluidSegInRef = {
    if( SimInEnergyPlus > 0 .AND. LocalCompAssigned( SpcRef:ThrmlZnRef:PriAirCondgSysRef[1] ) .AND. ActiveHVACSystem:Type = 4 ) 
    then switch( ActiveHVACSystem:HVACCentralRef:Type )
         case  1  :  ActiveHVACSystem:HVACCentralRef:HWFluidSegInRef
         case  2  :  ActiveHVACSystem:HVACCentralRef:CWFluidSegInRef
         case  3  :  ActiveHVACSystem:HVACCentralRef:HWFluidSegInRef
         default  :  UNDEFINED
         endswitch
    else UNDEFINED
    endif } 
    
  "Set ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:CoilHtgRef:FluidSegOutRef" ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:CoilHtgRef:FluidSegOutRef = {
    if( SimInEnergyPlus > 0 .AND. LocalCompAssigned( SpcRef:ThrmlZnRef:PriAirCondgSysRef[1] ) .AND. HVACSystem:Type = 4 ) 
    then switch( HVACSystem:HVACCentralRef:Type )
         case  1  :  HVACSystem:HVACCentralRef:HWFluidSegOutRef
         case  2  :  HVACSystem:HVACCentralRef:CWFluidSegOutRef
         case  3  :  HVACSystem:HVACCentralRef:HWFluidSegOutRef
         default  :  UNDEFINED
         endswitch
    else UNDEFINED
    endif }
  "Set ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:CoilHtgRef:FluidSegOutRef" ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:CoilHtgRef:FluidSegOutRef = {
    if( SimInEnergyPlus > 0 .AND. LocalCompAssigned( SpcRef:ThrmlZnRef:PriAirCondgSysRef[1] ) .AND. ActiveHVACSystem:Type = 4 ) 
    then switch( ActiveHVACSystem:HVACCentralRef:Type )
         case  1  :  ActiveHVACSystem:HVACCentralRef:HWFluidSegOutRef
         case  2  :  ActiveHVACSystem:HVACCentralRef:CWFluidSegOutRef
         case  3  :  ActiveHVACSystem:HVACCentralRef:HWFluidSegOutRef
         default  :  UNDEFINED
         endswitch
    else UNDEFINED
    endif } 
    
  "Set ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:CoilClgRef:FluidSegInRef" ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:CoilClgRef:FluidSegInRef = {
    if( SimInEnergyPlus > 0 .AND. LocalCompAssigned( SpcRef:ThrmlZnRef:PriAirCondgSysRef[1] ) .AND. HVACSystem:Type = 4 ) 
    then switch( HVACSystem:HVACCentralRef:Type )
         case  1  :  HVACSystem:HVACCentralRef:ChWFluidSegInRef
         case  2  :  HVACSystem:HVACCentralRef:CWFluidSegInRef
         case  3  :  HVACSystem:HVACCentralRef:ChWFluidSegInRef
         default  :  UNDEFINED
         endswitch
    else UNDEFINED
    endif } 
  "Set ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:CoilClgRef:FluidSegInRef" ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:CoilClgRef:FluidSegInRef = {
    if( SimInEnergyPlus > 0 .AND. LocalCompAssigned( SpcRef:ThrmlZnRef:PriAirCondgSysRef[1] ) .AND. ActiveHVACSystem:Type = 4 ) 
    then switch( ActiveHVACSystem:HVACCentralRef:Type )
         case  1  :  ActiveHVACSystem:HVACCentralRef:ChWFluidSegInRef
         case  2  :  ActiveHVACSystem:HVACCentralRef:CWFluidSegInRef
         case  3  :  ActiveHVACSystem:HVACCentralRef:ChWFluidSegInRef
         default  :  UNDEFINED
         endswitch
    else UNDEFINED
    endif } 
    
  "Set ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:CoilClgRef:FluidSegOutRef" ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:CoilClgRef:FluidSegOutRef = {
    if( SimInEnergyPlus > 0 .AND. LocalCompAssigned( SpcRef:ThrmlZnRef:PriAirCondgSysRef[1] ) .AND. HVACSystem:Type = 4 ) 
    then switch( HVACSystem:HVACCentralRef:Type )
         case  1  :  HVACSystem:HVACCentralRef:ChWFluidSegOutRef
         case  2  :  HVACSystem:HVACCentralRef:CWFluidSegOutRef
         case  3  :  HVACSystem:HVACCentralRef:ChWFluidSegOutRef
         default  :  UNDEFINED
         endswitch
    else UNDEFINED
    endif } 
  "Set ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:CoilClgRef:FluidSegOutRef" ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:CoilClgRef:FluidSegOutRef = {
    if( SimInEnergyPlus > 0 .AND. LocalCompAssigned( SpcRef:ThrmlZnRef:PriAirCondgSysRef[1] ) .AND. ActiveHVACSystem:Type = 4 ) 
    then switch( ActiveHVACSystem:HVACCentralRef:Type )
         case  1  :  ActiveHVACSystem:HVACCentralRef:ChWFluidSegOutRef
         case  2  :  ActiveHVACSystem:HVACCentralRef:CWFluidSegOutRef
         case  3  :  ActiveHVACSystem:HVACCentralRef:ChWFluidSegOutRef
         default  :  UNDEFINED
         endswitch
    else UNDEFINED
    endif } 
    
// Setting coil performance parameters
  "Set ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:CoilClgRef:DXEER" ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:CoilClgRef:DXEER = {
    switch( HVACSystem:Type )
    case  1  :  UNDEFINED
    case  2  :  UNDEFINED
    case  4  :  HVACSystem:WSHPEER
    default  :  UNDEFINED
    endswitch }
  "Set ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:CoilClgRef:DXEER" ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:CoilClgRef:DXEER = {
    switch( ActiveHVACSystem:Type )
    case  1  :  UNDEFINED
    case  2  :  UNDEFINED
    case  4  :  ActiveHVACSystem:WSHPEER
    default  :  UNDEFINED
    endswitch }
  "Set ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:CoilHtgRef:HtPumpCOP" ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:CoilHtgRef:HtPumpCOP = {
    switch( HVACSystem:Type )
    case  1  :  UNDEFINED
    case  2  :  UNDEFINED
    case  4  :  HVACSystem:WSHPCOP
    default  :  UNDEFINED
    endswitch }
  "Set ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:CoilHtgRef:HtPumpCOP" ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:CoilHtgRef:HtPumpCOP = {
    switch( ActiveHVACSystem:Type )
    case  1  :  UNDEFINED
    case  2  :  UNDEFINED
    case  4  :  ActiveHVACSystem:WSHPCOP
    default  :  UNDEFINED
    endswitch }
    
    
// Setting system capacity to avoild the creation of PropNoClg-ResZnSys ( won't be used in simulation )
  "Set ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:CoilClgRef:CapTotGrossRtd" ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:CoilClgRef:CapTotGrossRtd = {
    CondFloorArea / 400 * 12000 }
  "Set ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:CoilClgRef:CapTotGrossRtd" ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:CoilClgRef:CapTotGrossRtd = {
    CondFloorArea / 400 * 12000 }
  "Set ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:CoilHtgRef:CapTotGrossRtd" ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:CoilHtgRef:CapTotGrossRtd = {
    CondFloorArea / 400 * 12000 * 1.05 }
  "Set ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:CoilHtgRef:CapTotGrossRtd" ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:CoilHtgRef:CapTotGrossRtd = {
    CondFloorArea / 400 * 12000 * 1.05 }
    
// Set Fan properties  
  "Set ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:FanRef:ModelingMthd" ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:FanRef:ModelingMthd = {
    if( SimInEnergyPlus > 0 .AND. LocalCompAssigned( SpcRef:ThrmlZnRef:PriAirCondgSysRef[1] ) ) 
    then 3 ; PowerPerUnitFlow
    else UNDEFINED
    endif } 
  "Set ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:FanRef:ModelingMthd" ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:FanRef:ModelingMthd = {
    if( SimInEnergyPlus > 0 .AND. LocalCompAssigned( SpcRef:ThrmlZnRef:PriAirCondgSysRef[1] ) ) 
    then 3 ; PowerPerUnitFlow
    else UNDEFINED
    endif } 
    
  "Set ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:FanRef:PwrIdx" ResZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:FanRef:PwrIdx = {
    if( SimInEnergyPlus > 0 .AND. LocalCompAssigned( SpcRef:ThrmlZnRef:PriAirCondgSysRef[1] ) ) 
    then HVACSystem:Fan:WperCFMCool
    else UNDEFINED
    endif } 
  "Set ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef:FanRef:PwrIdx" ResOtherZn:SpcRef:ThrmlZnRef:PriAirCondgSysRef[1]:FanRef:PwrIdx = {
    if( SimInEnergyPlus > 0 .AND. LocalCompAssigned( SpcRef:ThrmlZnRef:PriAirCondgSysRef[1] ) ) 
    then ActiveHVACSystem:Fan:WperCFMCool
    else UNDEFINED
    endif } 
  

  "Evaluate defaulting rules" Proj:Action = { EvalRuleList ("rl_DEFAULT" ) }
  "Evaluate defaulting rules" Proj:Action = { EvalRuleList ("rl_DEFAULT" ) }

END

ENDFILE
