// Tree Descriptions
//
// -------------------------------------------------------------------------
//  Copyright (c) 2012-2017, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------
//

// Envelope

RULE NEW Roof:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ConsAssmRef ) .AND. IfValidAnd( Area > 0 ) .AND. IfValidAnd( Tilt > -999 ) )
    then  Format( "%s, %s ft2, %s deg tilt, %s", ConsAssmRef:Name, FltToStr( Area ), FltToStr( Tilt ), Status )
	  else if( LocalCompAssigned( ConsAssmRef ) )
    then  Format( "%s, %s", ConsAssmRef:Name, Status )
	  else if( IfValidAnd( Area > 0 ) )
    then  Format( "%s ft2, %s", FltToStr( Area ), Status )
	  else if( IfValidAnd( Tilt > -999 ) )
    then  Format( "%s deg tilt, %s", FltToStr( Tilt ), Status )
    else  " "  endif endif endif endif
  SIZING
    UNDEFINED
  ANNUAL
    UNDEFINED
ENDRULE

RULE NEW ExtWall:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if (LocalCompAssigned( ConsAssmRef )) then
      if (RealAz < -998) then  Format( "unknown facing direction, %s, %s ft2, %s", ConsAssmRef:Name, FltToStr( Area ), Status )
      else if (RealAz == 0 .OR. RealAz == 360) then  Format( "N-facing, %s, %s ft2, %s", ConsAssmRef:Name, FltToStr( Area ), Status )
      else if (RealAz ==  45) then  Format( "NE-facing, %s, %s ft2, %s", ConsAssmRef:Name, FltToStr( Area ), Status )
      else if (RealAz ==  90) then  Format(  "E-facing, %s, %s ft2, %s", ConsAssmRef:Name, FltToStr( Area ), Status )
      else if (RealAz == 135) then  Format( "SE-facing, %s, %s ft2, %s", ConsAssmRef:Name, FltToStr( Area ), Status )
      else if (RealAz == 180) then  Format(  "S-facing, %s, %s ft2, %s", ConsAssmRef:Name, FltToStr( Area ), Status )
      else if (RealAz == 225) then  Format( "SW-facing, %s, %s ft2, %s", ConsAssmRef:Name, FltToStr( Area ), Status )
      else if (RealAz == 270) then  Format(  "W-facing, %s, %s ft2, %s", ConsAssmRef:Name, FltToStr( Area ), Status )
      else if (RealAz == 315) then  Format( "NW-facing, %s, %s ft2, %s", ConsAssmRef:Name, FltToStr( Area ), Status )
      else if (RealAz <   45) then  Format( "faces %.0f deg E of N, %s, %s ft2, %s", RealAz,     ConsAssmRef:Name, FltToStr( Area ), Status )
      else if (RealAz <   90) then  Format( "faces %.0f deg N of E, %s, %s ft2, %s", 90-RealAz,  ConsAssmRef:Name, FltToStr( Area ), Status )
      else if (RealAz <  135) then  Format( "faces %.0f deg S of E, %s, %s ft2, %s", RealAz-90,  ConsAssmRef:Name, FltToStr( Area ), Status )
      else if (RealAz <  180) then  Format( "faces %.0f deg E of S, %s, %s ft2, %s", 180-RealAz, ConsAssmRef:Name, FltToStr( Area ), Status )
      else if (RealAz <  225) then  Format( "faces %.0f deg W of S, %s, %s ft2, %s", RealAz-180, ConsAssmRef:Name, FltToStr( Area ), Status )
      else if (RealAz <  270) then  Format( "faces %.0f deg S of W, %s, %s ft2, %s", 270-RealAz, ConsAssmRef:Name, FltToStr( Area ), Status )
      else if (RealAz <  315) then  Format( "faces %.0f deg N of W, %s, %s ft2, %s", RealAz-270, ConsAssmRef:Name, FltToStr( Area ), Status )
      else  Format( "%.0f deg azimuth, %s, %s ft2, %s", RealAz, ConsAssmRef:Name, FltToStr( Area ), Status )
      endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif
    else		; abbreviated 
      if (RealAz < -998) then  Format( "unknown facing direction, %s ft2, %s", FltToStr( Area ), Status )
      else if (RealAz == 0 .OR. RealAz == 360) then  Format( "N-facing, %s ft2, %s", FltToStr( Area ), Status )
      else if (RealAz ==  45) then  Format( "NE-facing, %s ft2, %s", FltToStr( Area ), Status )
      else if (RealAz ==  90) then  Format(  "E-facing, %s ft2, %s", FltToStr( Area ), Status )
      else if (RealAz == 135) then  Format( "SE-facing, %s ft2, %s", FltToStr( Area ), Status )
      else if (RealAz == 180) then  Format(  "S-facing, %s ft2, %s", FltToStr( Area ), Status )
      else if (RealAz == 225) then  Format( "SW-facing, %s ft2, %s", FltToStr( Area ), Status )
      else if (RealAz == 270) then  Format(  "W-facing, %s ft2, %s", FltToStr( Area ), Status )
      else if (RealAz == 315) then  Format( "NW-facing, %s ft2, %s", FltToStr( Area ), Status )
      else  Format( "%.0f deg azimuth, %s ft2, %s", RealAz, FltToStr( Area ), Status )
      endif endif endif endif endif endif endif endif endif
    endif
  SIZING
    UNDEFINED
  ANNUAL
    UNDEFINED
ENDRULE

RULE NEW ExtFlr:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ConsAssmRef ) .AND. IfValidAnd( Area > 0 ) )
    then  Format( "%s, %s ft2, %s", ConsAssmRef:Name, FltToStr( Area ), Status )
	  else if( LocalCompAssigned( ConsAssmRef ) )
    then  Format( "%s, %s", ConsAssmRef:Name, Status )
	  else if( IfValidAnd( Area > 0 ) )
    then  Format( "%s ft2, %s", FltToStr( Area ), Status )
    else  " "  endif endif endif
  SIZING
    UNDEFINED
  ANNUAL
    UNDEFINED
ENDRULE

RULE NEW Win:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( FenConsRef ) .AND. IfValidAnd( Area > 0 ) )
    then  Format( "%s, %s ft2, %s", FenConsRef:Name, FltToStr( Area ), Status )
	  else if( LocalCompAssigned( FenConsRef ) )
    then  Format( "%s, %s", FenConsRef:Name, Status )
	  else if( IfValidAnd( Area > 0 ) )
    then  Format( "%s ft2, %s", FltToStr( Area ), Status )
    else  " "  endif endif endif
  SIZING
    UNDEFINED
  ANNUAL
    UNDEFINED
ENDRULE

RULE NEW Skylt:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( FenConsRef ) .AND. IfValidAnd( Area > 0 ) )
    then  Format( "%s, %s ft2, %s", FenConsRef:Name, FltToStr( Area ), Status )
	  else if( LocalCompAssigned( FenConsRef ) )
    then  Format( "%s, %s", FenConsRef:Name, Status )
	  else if( IfValidAnd( Area > 0 ) )
    then  Format( "%s ft2, %s", FltToStr( Area ), Status )
    else  " "  endif endif endif
  SIZING
    UNDEFINED
  ANNUAL
    UNDEFINED
ENDRULE

RULE NEW Dr:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( DrConsRef ) .AND. IfValidAnd( Area > 0 ) )
    then  Format( "%s, %s ft2, %s", DrConsRef:Name, FltToStr( Area ), Status )
	  else if( LocalCompAssigned( DrConsRef ) )
    then  Format( "%s, %s", DrConsRef:Name, Status )
	  else if( IfValidAnd( Area > 0 ) )
    then  Format( "%s ft2, %s", FltToStr( Area ), Status )
    else  " "  endif endif endif
  SIZING
    UNDEFINED
  ANNUAL
    UNDEFINED
ENDRULE

RULE NEW Ceiling:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ConsAssmRef ) .AND. IfValidAnd( Area > 0 ) )
    then  Format( "%s, %s ft2, %s", ConsAssmRef:Name, FltToStr( Area ), Status )
	  else if( LocalCompAssigned( ConsAssmRef ) )
    then  Format( "%s, %s", ConsAssmRef:Name, Status )
	  else if( IfValidAnd( Area > 0 ) )
    then  Format( "%s ft2, %s", FltToStr( Area ), Status )
    else  " "  endif endif endif
  SIZING
    UNDEFINED
  ANNUAL
    UNDEFINED
ENDRULE

RULE NEW IntFlr:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ConsAssmRef ) .AND. IfValidAnd( Area > 0 ) )
    then  Format( "%s, %s ft2, %s", ConsAssmRef:Name, FltToStr( Area ), Status )
	  else if( LocalCompAssigned( ConsAssmRef ) )
    then  Format( "%s, %s", ConsAssmRef:Name, Status )
	  else if( IfValidAnd( Area > 0 ) )
    then  Format( "%s ft2, %s", FltToStr( Area ), Status )
    else  " "  endif endif endif
  SIZING
    UNDEFINED
  ANNUAL
    UNDEFINED
ENDRULE

RULE NEW IntWall:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ConsAssmRef ) .AND. IfValidAnd( Area > 0 ) )
    then  Format( "%s, %s ft2, %s", ConsAssmRef:Name, FltToStr( Area ), Status )
	  else if( LocalCompAssigned( ConsAssmRef ) )
    then  Format( "%s, %s", ConsAssmRef:Name, Status )
	  else if( IfValidAnd( Area > 0 ) )
    then  Format( "%s ft2, %s", FltToStr( Area ), Status )
    else  " "  endif endif endif
  SIZING
    UNDEFINED
  ANNUAL
    UNDEFINED
ENDRULE

RULE NEW UndgrFlr:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ConsAssmRef ) .AND. IfValidAnd( Area > 0 ) )
    then  Format( "%s, %s ft2, %s", ConsAssmRef:Name, FltToStr( Area ), Status )
	  else if( LocalCompAssigned( ConsAssmRef ) )
    then  Format( "%s, %s", ConsAssmRef:Name, Status )
	  else if( IfValidAnd( Area > 0 ) )
    then  Format( "%s ft2, %s", FltToStr( Area ), Status )
    else  " "  endif endif endif
  SIZING
    UNDEFINED
  ANNUAL
    UNDEFINED
ENDRULE

RULE NEW UndgrWall:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ConsAssmRef ) .AND. IfValidAnd( Area > 0 ) )
    then  Format( "%s, %s ft2, %s", ConsAssmRef:Name, FltToStr( Area ), Status )
	  else if( LocalCompAssigned( ConsAssmRef ) )
    then  Format( "%s, %s", ConsAssmRef:Name, Status )
	  else if( IfValidAnd( Area > 0 ) )
    then  Format( "%s ft2, %s", FltToStr( Area ), Status )
    else  " "  endif endif endif
  SIZING
    UNDEFINED
  ANNUAL
    UNDEFINED
ENDRULE

// Building - Story - Space - ThermalZone
RULE NEW Bldg:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT 
    if( LocalStatus( TotStoryCnt ) = 0 )
    then Format( "**Define # stories** / %s cond ft2 / Orientation: %s", FltToStr( TotCondFlrArea ), OrientationRpt )
    else if( TotStoryCnt = 1 )
	  then Format( "%.0f story / %s cond ft2 / Orientation: %s", TotStoryCnt, FltToStr( TotCondFlrArea ), OrientationRpt )
    else Format( "%.0f stories / %s cond ft2 / Orientation: %s", TotStoryCnt, FltToStr( TotCondFlrArea ), OrientationRpt )
    endif endif
ENDRULE

RULE NEW Story:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT 
    Format( "Total = %s ft2, Conditioned: NonRes = %s ft2, Res = %s ft2, Mult = %s", 
            FltToStr( TotFlrAreaWithMult ), FltToStr( NonResCondFlrAreaWithMult ), 
            FltToStr( ResCondFlrAreaWithMult ), FltToStr( Mult ) )
ENDRULE

RULE NEW Spc:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( Area > 0 )  )
    then Format( "%s, %s ft2 -> Zn: %s, %s", CondgType, FltToStr( Area ), ThrmlZnRef, OverallStatus )
    else Format( "%s -> Zn: %s, %s", CondgType, ThrmlZnRef, OverallStatus )
    endif
ENDRULE

RULE NEW ThrmlZn:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( FlrArea > 0 ) )
    then
      if( LocalCompAssigned( VentSysRef ) ) 
      then // Has VentSys
        if( LocalCompAssigned( PriAirCondgSysRef[1] ) .AND. LocalCompAssigned( PriAirCondgSysRef[2] ) = 0 )
        then // Pri1 defined by not Pri2
          if( PriAirCondgSysRef[1] = VentSysRef ) 
          then  // Pri1 and Vent systems are the same
            if( LocalCompAssigned( ExhSysRef ) )
            then // ExhSys also defined
              Format( "%s, %s ft2, HVACSys = %s, ExhSys = %s", 
                      Type, FltToStr( FlrArea ), PriAirCondgSysRef[1], ExhSysRef )
            else
              Format( "%s, %s ft2, HVACSys = %s",
                      Type, FltToStr( FlrArea ), PriAirCondgSysRef[1] )
            endif
          else // Pri1 and Vent systems are different
          if( LocalCompAssigned( ExhSysRef ) )
          then // ExhSys also defined
            Format( "%s, %s ft2, CondgSys1 = %s, VentSys = %s, ExhSys = %s", 
                    Type, FltToStr( FlrArea ), PriAirCondgSysRef[1], VentSysRef, ExhSysRef )
          else
            Format( "%s, %s ft2, CondgSys1 = %s, VentSys = %s", 
                    Type, FltToStr( FlrArea ), PriAirCondgSysRef[1], VentSysRef )
          endif endif
        else
        if( LocalCompAssigned( PriAirCondgSysRef[1] ) .AND. LocalCompAssigned( PriAirCondgSysRef[2] ) )
        then // Both Pri1 and Pri2 are defined
          if( PriAirCondgSysRef[1] = VentSysRef ) 
          then // Pri1 and Vent systems are the same
            if( LocalCompAssigned( ExhSysRef ) )
            then // ExhSys also defined
              Format( "%s, %s ft2, HVACSys = %s, CondgSys2 = %s, ExhSys = %s", 
                      Type, FltToStr( FlrArea ), PriAirCondgSysRef[1], PriAirCondgSysRef[2], ExhSysRef )
            else
              Format( "%s, %s ft2, HVACSys = %s, CondgSys2 = %s", 
                      Type, FltToStr( FlrArea ), PriAirCondgSysRef[1], PriAirCondgSysRef[2] )
            endif
          else // Pri and Vent systems are different
          if( LocalCompAssigned( ExhSysRef ) )
          then 
            Format( "%s, %s ft2, CondgSys1 = %s, CondgSys2 = %s, VentSys = %s, ExhSys = %s", 
                    Type, FltToStr( FlrArea ), PriAirCondgSysRef[1], PriAirCondgSysRef[2], VentSysRef, ExhSysRef )
          else // ExhSys also defined
            Format( "%s, %s ft2, CondgSys1 = %s, CondgSys2 = %s, VentSys = %s", 
                    Type, FltToStr( FlrArea ), PriAirCondgSysRef[1], PriAirCondgSysRef[2], VentSysRef )
          endif endif
        else // Vent system only
            Format( "%s, %s ft2, VentSys = %s", 
                    Type, FltToStr( FlrArea ), VentSysRef )
        endif endif
      else if( LocalCompAssigned( PriAirCondgSysRef[1] ) .AND. LocalCompAssigned( PriAirCondgSysRef[2] ) ) 
      then // Has Pri1 and Pri2 systems defined, no Vent
        if( LocalCompAssigned( ExhSysRef ) )
        then // ExhSys also defined
          Format( "%s, %s ft2, CondgSys1 = %s, CondgSys2 = %s, ExhSys = %s", 
                      Type, FltToStr( FlrArea ), PriAirCondgSysRef[1], PriAirCondgSysRef[2], ExhSysRef ) 
       else
          Format( "%s, %s ft2, CondgSys1 = %s, CondgSys2 = %s", 
                      Type, FltToStr( FlrArea ), PriAirCondgSysRef[1], PriAirCondgSysRef[2] ) 
        endif
      else if( LocalCompAssigned( PriAirCondgSysRef[1] ) ) 
      then // Has Pri1 systems defined, no Vent
        if( LocalCompAssigned( ExhSysRef ) )
        then // ExhSys also defined
          Format( "%s, %s ft2, CondgSys1 = %s, ExhSys = %s", 
                      Type, FltToStr( FlrArea ), PriAirCondgSysRef[1], ExhSysRef ) 
       else
          Format( "%s, %s ft2, CondgSys1 = %s", 
                      Type, FltToStr( FlrArea ), PriAirCondgSysRef[1] ) 
        endif
      else // No HVAC system
        Format( "%s, %s ft2", Type, FltToStr( FlrArea ) )
      endif endif endif
    else Format( "%s", Type ) // No area
    endif
  SIZING
    UNDEFINED
  ANNUAL
    if( IfValidAnd( FlrArea > 0 ) )
    then
      if( LocalCompAssigned( VentSysRef ) ) 
      then // Has VentSys
        if( LocalCompAssigned( PriAirCondgSysRef[1] ) .AND. LocalCompAssigned( PriAirCondgSysRef[2] ) = 0 )
        then // Pri1 defined by not Pri2
          if( PriAirCondgSysRef[1] = VentSysRef ) 
          then  // Pri1 and Vent systems are the same
            if( LocalCompAssigned( ExhSysRef ) )
            then // ExhSys also defined
              Format( "%s, %s ft2, HVACSys = %s, ExhSys = %s", 
                      Type, FltToStr( FlrArea ), PriAirCondgSysRef[1], ExhSysRef )
            else
              Format( "%s, %s ft2, HVACSys = %s",
                      Type, FltToStr( FlrArea ), PriAirCondgSysRef[1] )
            endif
          else // Pri1 and Vent systems are different
          if( LocalCompAssigned( ExhSysRef ) )
          then // ExhSys also defined
            Format( "%s, %s ft2, CondgSys1 = %s, VentSys = %s, ExhSys = %s", 
                    Type, FltToStr( FlrArea ), PriAirCondgSysRef[1], VentSysRef, ExhSysRef )
          else
            Format( "%s, %s ft2, CondgSys1 = %s, VentSys = %s", 
                    Type, FltToStr( FlrArea ), PriAirCondgSysRef[1], VentSysRef )
          endif endif
        else
        if( LocalCompAssigned( PriAirCondgSysRef[1] ) .AND. LocalCompAssigned( PriAirCondgSysRef[2] ) )
        then // Both Pri1 and Pri2 are defined
          if( PriAirCondgSysRef[1] = VentSysRef ) 
          then // Pri1 and Vent systems are the same
            if( LocalCompAssigned( ExhSysRef ) )
            then // ExhSys also defined
              Format( "%s, %s ft2, HVACSys = %s, CondgSys2 = %s, ExhSys = %s", 
                      Type, FltToStr( FlrArea ), PriAirCondgSysRef[1], PriAirCondgSysRef[2], ExhSysRef )
            else
              Format( "%s, %s ft2, HVACSys = %s, CondgSys2 = %s", 
                      Type, FltToStr( FlrArea ), PriAirCondgSysRef[1], PriAirCondgSysRef[2] )
            endif
          else // Pri and Vent systems are different
          if( LocalCompAssigned( ExhSysRef ) )
          then 
            Format( "%s, %s ft2, CondgSys1 = %s, CondgSys2 = %s, VentSys = %s, ExhSys = %s", 
                    Type, FltToStr( FlrArea ), PriAirCondgSysRef[1], PriAirCondgSysRef[2], VentSysRef, ExhSysRef )
          else // ExhSys also defined
            Format( "%s, %s ft2, CondgSys1 = %s, CondgSys2 = %s, VentSys = %s", 
                    Type, FltToStr( FlrArea ), PriAirCondgSysRef[1], PriAirCondgSysRef[2], VentSysRef )
          endif endif
        else // Vent system only
            Format( "%s, %s ft2, VentSys = %s", 
                    Type, FltToStr( FlrArea ), VentSysRef )
        endif endif
      else if( LocalCompAssigned( PriAirCondgSysRef[1] ) .AND. LocalCompAssigned( PriAirCondgSysRef[2] ) ) 
      then // Has Pri1 and Pri2 systems defined, no Vent
        if( LocalCompAssigned( ExhSysRef ) )
        then // ExhSys also defined
          Format( "%s, %s ft2, CondgSys1 = %s, CondgSys2 = %s, ExhSys = %s", 
                      Type, FltToStr( FlrArea ), PriAirCondgSysRef[1], PriAirCondgSysRef[2], ExhSysRef ) 
       else
          Format( "%s, %s ft2, CondgSys1 = %s, CondgSys2 = %s", 
                      Type, FltToStr( FlrArea ), PriAirCondgSysRef[1], PriAirCondgSysRef[2] ) 
        endif
      else if( LocalCompAssigned( PriAirCondgSysRef[1] ) ) 
      then // Has Pri1 systems defined, no Vent
        if( LocalCompAssigned( ExhSysRef ) )
        then // ExhSys also defined
          Format( "%s, %s ft2, CondgSys1 = %s, ExhSys = %s", 
                      Type, FltToStr( FlrArea ), PriAirCondgSysRef[1], ExhSysRef ) 
       else
          Format( "%s, %s ft2, CondgSys1 = %s", 
                      Type, FltToStr( FlrArea ), PriAirCondgSysRef[1] ) 
        endif
      else // No HVAC system
        Format( "%s, %s ft2", Type, FltToStr( FlrArea ) )
      endif endif endif
    else Format( "%s", Type ) // No area
    endif
ENDRULE

// HVAC Secondary
// -----------------------------------------------------------------------------
RULE NEW AirSeg:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalStatus( Path ) > 0 )
    then Format( "%s, Path = %s", Type, Path )
    else Format( "%s", Type )
    endif
  SIZING
    UNDEFINED
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW CoilClg:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( Type = "DirectExpansion" .AND. IfValidAnd( CapTotNetRtd >= 0 ) )
    then // Is a DX coil
      if( LocalStatus( DXSEER ) > 0 .AND.IfValidAnd( CodeMinSEER > 0 ) )
      then Format( "%s, Net = %s MBH, SEER-%s", 
                    Type, FltToStr( CapTotNetRtd/1000 ), FltToStr( DXSEER, 1 ) )
      else
      if( LocalStatus( DXEER ) > 0 )
      then Format( "%s, Net = %s MBH, EER-%s", 
                    Type, FltToStr( CapTotNetRtd/1000 ), FltToStr( DXEER, 1 ) )
      else Format( "%s, Net = %s MBH", 
                    Type, FltToStr( CapTotNetRtd/1000 ) )
      endif endif
    else
    if( Type = "VRF" .AND. IfValidAnd( CapTotNetRtd >= 0 ) )
    then Format( "%s, Net = %s MBH", 
                 Type, FltToStr( CapTotNetRtd/1000 ) )   
    else
    if( IfValidAnd( CapTotGrossRtd >= 0 ) ) // Is a ChW coil
    then Format( "%s, Gross = %s MBH", 
                 Type, FltToStr( CapTotGrossRtd/1000 ) )
    else Format( "%s", Type )
    endif endif endif
  SIZING
    UNDEFINED
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW CoilHtg:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( Type = "HeatPump" .AND. IfValidAnd( CapTotNetRtd >= 0 ) )
    then // Is a HP coil
      if( LocalStatus( HtPumpHSPF ) > 0 .AND. IfValidAnd( CodeMinHSPF > 0 ) )
      then Format( "%s, Net = %s MBH, HSPF-%s", 
                    Type, FltToStr( CapTotNetRtd/1000 ), FltToStr( HtPumpHSPF, 1 ) )
      else
      if( LocalStatus( HtPumpCOP ) > 0 )
      then Format( "%s, Net = %s MBH, COP-%s", 
                    Type, FltToStr( CapTotNetRtd/1000 ), FltToStr( HtPumpCOP, 1 ) )
      else Format( "%s, Net = %s MBH", 
                    Type, FltToStr( CapTotNetRtd/1000 ) )
      endif endif
    else
    if( Type = "VRF" .AND. IfValidAnd( CapTotNetRtd >= 0 ) )
    then Format( "%s, Net = %s MBH", 
                 Type, FltToStr( CapTotNetRtd/1000 ) )   
    else
    if( IfValidAnd( CapTotGrossRtd >= 0 ) )
      then // Is a Furnace, HW, or other coil
      if( Type = "Furnace" .AND. LocalStatus( FurnAFUE ) > 0 .AND. 
          IfValidAnd( CodeMinAFUE > 0 )  )
      then Format( "%s, Gross = %s MBH, AFUE-%s%", 
                    Type, FltToStr( CapTotGrossRtd/1000 ), FltToStr( FurnAFUE*100, 1 ) )
      else
      if( Type = "Furnace" .AND. LocalStatus( FurnThrmlEff ) > 0 )
      then Format( "%s, Gross = %s MBH, TE-%s%", 
                    Type, FltToStr( CapTotGrossRtd/1000 ), FltToStr( FurnThrmlEff*100, 1 ) )
      else Format( "%s, Gross = %s MBH", 
                    Type, FltToStr( CapTotGrossRtd/1000 ) )
      endif endif
    else Format( "%s", Type )
    endif endif endif
  SIZING
    UNDEFINED
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW Fan:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( FlowCap >= 0 ) )
    then
      if( IfValidAnd( FlowMin >= 0 ) .AND. CtrlMthd != "ConstantVolume" )
      then Format( "%s, %s, FlowCap = %s cfm, Min = %s cfm", CtrlMthd, Class, FltToStr( FlowCap ), FltToStr( FlowMin ) )
      else Format( "%s, %s, FlowCap = %s cfm", CtrlMthd, Class, FltToStr( FlowCap ) )
      endif
    else Format( "%s, %s", CtrlMthd, Class )
    endif
  SIZING
    UNDEFINED
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW TrmlUnit:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ZnServedRef ) )
    then Format( "%s (Qty %g), ZnServed = %s, PriAirMax = %s cfm, %s", Type, Cnt, ZnServedRef, FltToStr( ValidOr( PriAirFlowMax, 0 ) ), Status )
    else Format( "%s (Qty %g), ZnServed = ???, %s", Type, Cnt, Status )
    endif
  SIZING
    UNDEFINED
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW OACtrl:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( DsgnOAFlow >= 0 ) )
    then Format( "%s, %s cfm", EconoCtrlMthd, FltToStr( DsgnOAFlow ) )
    else Format( "%s", EconoCtrlMthd )
    endif
  SIZING
    UNDEFINED
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW EvapClr:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( Eff >= 0 ) )
    then Format( "%s, Eff = %s", Type, FltToStr( Eff * 100, 1 ) )
    else Format( "%s", Type )
    endif
  SIZING
    UNDEFINED
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW AirSys:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( CtrlZnRef ) )
    then Format( "%s, (Qty %g), CtrlZn = %s, %s", Type, Cnt, CtrlZnRef, Status )
    else Format( "%s (Qty %g), %s", Type, Cnt, Status )
    endif
  SIZING
    UNDEFINED
  ANNUAL
    if( LocalCompAssigned( CtrlZnRef ) )
    then Format( "%s, (Qty %g), CtrlZn = %s, %s", Type, Cnt, CtrlZnRef, Status )
    else Format( "%s (Qty %g), %s", Type, Cnt, Status )
    endif
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW ZnSys:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( CtrlZnRef ) )
    then Format( "%s, (Qty %g), CtrlZn = %s, %s", Type, Cnt, CtrlZnRef, Status )
    else Format( "%s (Qty %g), %s", Type, Cnt, Status )
    endif
  SIZING
    UNDEFINED
  ANNUAL
    if( LocalCompAssigned( CtrlZnRef ) )
    then Format( "%s, (Qty %g), CtrlZn = %s, %s", Type, Cnt, CtrlZnRef, Status )
    else Format( "%s (Qty %g), %s", Type, Cnt, Status )
    endif
ENDRULE

// HVAC Primary

// ------------ setup description for display in component tree ----------------
RULE NEW FluidSys:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    Format( "%s, %s", Type, Status )
  SIZING
    UNDEFINED
  ANNUAL
    Format( "%s, %s", Type, Status )  
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW Blr:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    Format( "%s, %s", Type, Status )
  SIZING
    UNDEFINED
  ANNUAL
    Format( "%s, %s", Type, Status )  
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW Chlr:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    Format( "%s, %s", Type, Status )
  SIZING
    UNDEFINED
  ANNUAL
    Format( "%s, %s", Type, Status )  
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW HtRej:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    Format( "%s, %s", Type, Status )
  SIZING
    UNDEFINED
  ANNUAL
    Format( "%s, %s", Type, Status )  
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW Pump:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    Format( "%s, %s", SpdCtrl, Status )
  SIZING
    UNDEFINED
  ANNUAL
    Format( "%s, %s", SpdCtrl, Status )  
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW ThrmlEngyStor:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    Format( "%s, %s", Type, Status )
  SIZING
    UNDEFINED
  ANNUAL
    Format( "%s, %s", Type, Status )  
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW HX:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    Format( "%s, %s", Type, Status )
  SIZING
    UNDEFINED
  ANNUAL
    Format( "%s, %s", Type, Status )  
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW WtrHtr:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    Format( "%s, %s", Type, Status )
  SIZING
    UNDEFINED
  ANNUAL
    Format( "%s, %s", Type, Status )  
ENDRULE
; RES DHW REMOVAL
;// -----------------------------------------------------------------------------
;RULE NEW ResDHWSys:TreeDescrip
;  DATATYPE
;    String
;  INPUTCLASS
;    NotInput
;  DEFAULT
;    if (IfValidAnd( CentralSys > 0 )==0)
;    then  Format( "%s, %s", Type, Status )
;    else if (CentralSysType == "HPWH")
;    then  Format( "Central HPWH, distrib: %s, %s", DistType, Status )
;    else  Format( "Central, distrib: %s, %s", DistType, Status )
;    endif endif
;  SIZING
;    UNDEFINED
;  ANNUAL
;    if (IfValidAnd( CentralSys > 0 )==0)
;    then  Format( "%s, %s", Type, Status )
;    else if (CentralSysType == "HPWH")
;    then  Format( "Central HPWH, distrib: %s, %s", DistType, Status )
;    else  Format( "Central, distrib: %s, %s", DistType, Status )
;    endif endif
;ENDRULE
;RULE NEW ResDHWSys:TreeDescrip
;  DEFAULT
;    if (LocalCompAssigned( DHWSolarSysRef ) > 0)
;    then  TreeDescrip + Format( ", solar: %s", DHWSolarSysRef:Name )
;    else  UNCHANGED  endif
;  ANNUAL
;    if (LocalCompAssigned( DHWSolarSysRef ) > 0)
;    then  TreeDescrip + Format( ", solar: %s", DHWSolarSysRef:Name )
;    else  UNCHANGED  endif
;ENDRULE
;// -----------------------------------------------------------------------------
;RULE NEW ResWtrHtr:TreeDescrip
;  DATATYPE
;    String
;  INPUTCLASS
;    NotInput
;  DEFAULT
;    if (ElementType == "Heat Pump")
;    then  switch (HPWHCat)
;            case  "Residential (NEEA rated) Product" :  Format( "NEEA-rated HPWH (qty: %g), %s", Cnt, Status )
;            case  "Commercial Product"               :  Format( "Commercial HPWH (qty: %g), %s", Cnt, Status )
;            case  "UEF Rated"                        :  Format( "UEF-rated HPWH (qty: %g), %s", Cnt, Status )
;            default  :  Format( "HPWH (qty: %g), %s", Cnt, Status )
;          endswitch
;    else  Format( "%s (qty: %g), %s", ElementType, Cnt, Status )  endif
;  SIZING
;    UNDEFINED
;  ANNUAL
;    if (ElementType == "Heat Pump")
;    then  switch (HPWHCat)
;            case  "Residential (NEEA rated) Product" :  Format( "NEEA-rated HPWH (qty: %g), %s", Cnt, Status )
;            case  "Commercial Product"               :  Format( "Commercial HPWH (qty: %g), %s", Cnt, Status )
;            case  "UEF Rated"                        :  Format( "UEF-rated HPWH (qty: %g), %s", Cnt, Status )
;            default  :  Format( "HPWH (qty: %g), %s", Cnt, Status )
;          endswitch
;    else  Format( "%s (qty: %g), %s", ElementType, Cnt, Status )  endif
;ENDRULE
;// -----------------------------------------------------------------------------
;RULE NEW DHWSolarSys:TreeDescrip
;  DATATYPE
;    String
;  INPUTCLASS
;    NotInput
;  DEFAULT
;    if (IfValidAnd( FloorAreaServed > 0 )==0)
;    then  if (IfValidAnd( ErrID > 0 ))
;          then  "unassigned"
;          else  Format( "unassigned, model: %s (%g x %s ft2)", Model, Cnt, FltToStr( Area ) )
;          endif
;    else  if (IfValidAnd( ErrID > 0 ))
;          then  ErrMsg
;          else  Format( "model: %s (%g x %s ft2)", Model, Cnt, FltToStr( Area ) )
;          endif
;    endif
;  SIZING
;    UNDEFINED
;  ANNUAL
;    if (IfValidAnd( FloorAreaServed > 0 )==0)
;    then  if (IfValidAnd( ErrID > 0 ))
;          then  "unassigned"
;          else  Format( "unassigned, model: %s (%g x %s ft2)", Model, Cnt, FltToStr( Area ) )
;          endif
;    else  if (IfValidAnd( ErrID > 0 ))
;          then  ErrMsg
;          else  Format( "model: %s (%g x %s ft2)", Model, Cnt, FltToStr( Area ) )
;          endif
;    endif
;ENDRULE
