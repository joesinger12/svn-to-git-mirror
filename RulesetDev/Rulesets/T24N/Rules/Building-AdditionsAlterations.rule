// Project - Additions, Alterations, and Partial Compliance
//
// ----------------------------------------------------------------------
//  Copyright (c) 2014-2017, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALifORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN if
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ----------------------------------------------------------------------



// Proj:CompType options:
//    NewComplete
//    NewEnvelope
//    NewEnvelopeAndLighting
//    NewEnvelopeAndPartialLighting
//    NewEnvelopeAndMechanical
//    NewMechanical
//    NewMechanicalAndLighting
//    NewMechanicalAndPartialLighting
//    ExistingAlteration
//    ExistingAdditionAndAlteration
//    AdditionComplete
//    AdditionEnvelope
//    AdditionEnvelopeAndLighting
//    AdditionEnvelopeAndPartialLighting
//    AdditionEnvelopeAndMechanical
//    AdditionMechanical
//    AdditionMechanicalAndLighting
//    AdditionMechanicalAndPartialLighting


RULE Bldg:WholeBldgModeled
  DESCRIPTION
    "A flag that indicates if the entire building and the HVAC systems that 
     serve it are explicitly modeled."
  HELP
    "Defaults to true (1) for all Project:ComplianceType options except those 
     identified as 'Existing'.  For these options, it is possible that only a 
     portion of the building is modeled.  In this case, the user must define to
     whether the entire building has modeled, and if not, enter the 'Total' building
     attributes."
  INPUTCLASS
    Default
  DEFAULT
    1
  CHECKCODE
    if( WholeBldgModeled = 1 .AND. Proj:CompType = "AdditionEnvelope" )
    then
      PostError("The project compliance type is 'AdditionEnvelope' and 'Whole 
                 BuildingModeled' is checked. This combination is not supported.
                 For 'AdditionEnvelope', only the addition should be modeled.")
    else UNCHANGED
    endif
  SIZING
    WholeBldgModeled
  ANNUAL
    z:WholeBldgModeled
ENDRULE

RULE Bldg:WholePlantModeled
  DESCRIPTION
    "A flag that indicates if the entire central plant is 
     explicitly modeled."
  HELP
    "Defaults to true (1) for all Project:ComplianceType options except those 
     identified as 'Existing'.  For these options, it is possible that only a 
     portion of the building is modeled.  In this case, the user must define 
     whether the entire central is modeled, and if not, enter the 'Total' plant
     attributes."
  INPUTCLASS
    Default
  DEFAULT
    1
  SIZING
    WholePlantModeled
  ANNUAL
    z:WholePlantModeled
ENDRULE

// Sum areas of Space child components by Status
// See issue 1965 for decision to exclude demising walls from ChildExtArea*
RULE NEW Spc:ChildExtAreaNew 
  DATATYPE
    Float
  LONGFORM
    ChildExteriorAreaNew
  INPUTCLASS
    NotInput
  DEFAULT
    SumChildrenIf( Roof:Area, Roof:IsNew = 1 ) +
    SumChildrenIf( ExtWall:Area, ExtWall:IsNew = 1 ) +
    SumChildrenIf( ExtFlr:Area, ExtFlr:IsNew = 1 ) +
    SumChildrenIf( UndgrWall:Area, UndgrWall:IsNew = 1 ) +
    SumChildrenIf( UndgrFlr:Area, UndgrFlr:IsNew = 1 ) +
    SumChildrenIf( Win:Area, Win:IsNew = 1 ) +
    SumChildrenIf( Skylt:Area, Skylt:IsNew = 1 ) +
    SumChildrenIf( Dr:Area, Dr:IsNew = 1 )
ENDRULE
RULE NEW Spc:ChildDemAreaNew
  DATATYPE
    Float
  LONGFORM
    ChildDemisingAreaNew
  INPUTCLASS
    NotInput
  DEFAULT
    SumChildrenIf( IntFlr:ResDemArea, IntFlr:IsNew = 1 ) +
    SumChildrenIf( IntFlr:NonResDemArea, IntFlr:IsNew = 1 ) +
    SumChildrenIf( IntWall:ResDemArea, IntWall:IsNew = 1 ) +
    SumChildrenIf( IntWall:NonResDemArea, IntWall:IsNew = 1 )
ENDRULE

RULE NEW Spc:ChildExtAreaExisting 
  DATATYPE
    Float
  LONGFORM
    ChildExteriorAreaExisting
  INPUTCLASS
    NotInput
  DEFAULT
    SumChildrenIf( Roof:Area, Roof:IsExisting = 1 ) +
    SumChildrenIf( ExtWall:Area, ExtWall:IsExisting = 1 ) +
    SumChildrenIf( ExtFlr:Area, ExtFlr:IsExisting = 1 ) +
    SumChildrenIf( UndgrWall:Area, UndgrWall:IsExisting = 1 ) +
    SumChildrenIf( UndgrFlr:Area, UndgrFlr:IsExisting = 1 ) +
    SumChildrenIf( Win:Area, Win:IsExisting = 1 ) +
    SumChildrenIf( Skylt:Area, Skylt:IsExisting = 1 ) +
    SumChildrenIf( Dr:Area, Dr:IsExisting = 1 )
ENDRULE
RULE NEW Spc:ChildDemAreaExisting
  DATATYPE
    Float
  LONGFORM
    ChildDemisingAreaExisting
  INPUTCLASS
    NotInput
  DEFAULT
    SumChildrenIf( IntFlr:ResDemArea, IntFlr:IsExisting = 1 ) +
    SumChildrenIf( IntFlr:NonResDemArea, IntFlr:IsExisting = 1 ) +
    SumChildrenIf( IntWall:ResDemArea, IntWall:IsExisting = 1 ) +
    SumChildrenIf( IntWall:NonResDemArea, IntWall:IsExisting = 1 )
ENDRULE

RULE NEW Spc:ChildExtAreaAltered 
  DATATYPE
    Float
  LONGFORM
    ChildExteriorAreaAltered
  INPUTCLASS
    NotInput
  DEFAULT
    SumChildrenIf( Roof:Area, Roof:IsAltered = 1 ) +
    SumChildrenIf( ExtWall:Area, ExtWall:IsAltered = 1 ) +
    SumChildrenIf( ExtFlr:Area, ExtFlr:IsAltered = 1 ) +
    SumChildrenIf( UndgrWall:Area, UndgrWall:IsAltered = 1 ) +
    SumChildrenIf( UndgrFlr:Area, UndgrFlr:IsAltered = 1 ) +
    SumChildrenIf( Win:Area, Win:IsAltered = 1 ) +
    SumChildrenIf( Skylt:Area, Skylt:IsAltered = 1 ) +
    SumChildrenIf( Dr:Area, Dr:IsAltered = 1 )
ENDRULE
RULE NEW Spc:ChildDemAreaAltered
  DATATYPE
    Float
  LONGFORM
    ChildDemisingAreaAltered
  INPUTCLASS
    NotInput
  DEFAULT
    SumChildrenIf( IntFlr:ResDemArea, IntFlr:IsAltered = 1 ) +
    SumChildrenIf( IntFlr:NonResDemArea, IntFlr:IsAltered = 1 ) +
    SumChildrenIf( IntWall:ResDemArea, IntWall:IsAltered = 1 ) +
    SumChildrenIf( IntWall:NonResDemArea, IntWall:IsAltered = 1 )
ENDRULE

// Set Spc:OverallStatus based on the ChildComponentArea status and LtgStatus
RULE Spc:OverallStatus
  DESCRIPTION
    "Specifies the Status of the space, as determined by the Status of specific
     child objects that impact HVAC energy use.  For additions/alterations."
  HELP
    "Used to determine if how the space floor area is classified for determining
     the baseline HVAC system for Additions/Alterations. The classification is
     determined automatically based on the following criteria:


     New:      The floor area and all child components (including lighting even 
               if not specified with IntLtgSys) are New.  This is the default 
               assumption if the status is neither Altered or Existing.


     Existing: The floor area and all child components (including lighting even 
               if not specified with IntLtgSys) are Existing.


     Altered:  The conditioned floor area is existing, but the Spc has a mix of 
               New/Existing or New/Altered local or child components."
  INPUTCLASS 
    NotInput
  OPTION
    New
    Existing
    Altered
  DEFAULT
    if( ChildExtAreaExisting > 0 .OR.
        IsExistingLtg = 1 .OR.
        IsExistingEnv = 1 ) 
//      IsNewHVAC = 0  
// Issue 1965: Removed HVAC status from first determination. 
    then // System includes some Existing components
      if( ChildExtAreaNew > 0 .OR.
          IsNewLtg = 1 .OR.
          ChildExtAreaAltered > 0 .OR. 
          IsAlteredLtg = 1 .OR.
          ( IsNewHVAC = 1 .AND. HasUnknownHVAC = 0 ) )
// Issue 1965: HVACStatus = 'Unknown' does not impact 'OverallStatus'
      then // There is a mix of New and Existing components
        "Altered" 
      else // There are no Altered or New components
        "Existing"
      endif
    else "New"  
// Issue 1965: 'New' space can have HVACStatus = 'New', 'Existing', or 'Unknown'
    endif
 CHECKCODE : T24N
//  LH - throws error too early, becuase many invalid statuses automatically fixed in zp rules
;   if( ( OverallStatus = "New" .AND.
;         ValidCompStatus:Spc_New( "ComplianceType", Proj:CompType ) = 0 ) .OR.
;       ( OverallStatus = "Existing" .AND.
;         ValidCompStatus:Spc_Existing( "ComplianceType", Proj:CompType ) = 0 ) .OR.
;       ( OverallStatus = "Altered" .AND.
;         ValidCompStatus:Spc_Altered( "ComplianceType", Proj:CompType ) = 0 ) )
;   then PostError( "Space '%s' has overall status '%s', which is inconsistent
;                    with project compliance type '%s'.  Please update envelope, 
;                    lighting or HVAC status for consistancy with the selected
;                    project compliance type.",
;                    Name, OverallStatus, Proj:CompType )
;   else UNCHANGED
;   endif 
ENDRULE

// Set values for area that correpond to each OverallStatus option
RULE NEW Spc:OverallAreaNew
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    if( OverallStatus = "New" ) then CondFlrAreaWithMult else 0 endif
  SIZING
    if( BaseSysNum > 0 ) then CondFlrAreaWithMult else OverallAreaNew endif
  ANNUAL
    z:OverallAreaNew
ENDRULE

RULE NEW Spc:OverallAreaExisting
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    if( OverallStatus = "Existing" ) then CondFlrAreaWithMult else 0 endif
  SIZING
    if( BaseSysNum > 0 ) then 0 else OverallAreaExisting endif
  ANNUAL
    z:OverallAreaExisting
ENDRULE

RULE NEW Spc:OverallAreaAltered
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    if( OverallStatus = "Altered" ) then CondFlrAreaWithMult else 0 endif
  SIZING
    if( BaseSysNum > 0 ) then 0 else OverallAreaAltered endif
  ANNUAL
    z:OverallAreaAltered
ENDRULE

// Set values for area that correpond to each OverallStatus option
RULE NEW ThrmlZn:OverallAreaNew
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    SumRevRef( Spc:ThrmlZnRef, Spc:OverallAreaNew )
  SIZING
    SumRevRef( Spc:ThrmlZnRef, Spc:OverallAreaNew )
  ANNUAL
    z:OverallAreaNew
ENDRULE

RULE NEW ThrmlZn:OverallAreaExisting
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    SumRevRef( Spc:ThrmlZnRef, Spc:OverallAreaExisting )
  SIZING
    SumRevRef( Spc:ThrmlZnRef, Spc:OverallAreaExisting )
  ANNUAL
    z:OverallAreaExisting
ENDRULE

RULE NEW ThrmlZn:OverallAreaAltered
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    SumRevRef( Spc:ThrmlZnRef, Spc:OverallAreaAltered )
  SIZING
    SumRevRef( Spc:ThrmlZnRef, Spc:OverallAreaAltered )
  ANNUAL
    z:OverallAreaAltered
ENDRULE

// Set flags that describe the status of the proposed HVAC system at the ThrmlZn.
// Current criteria is if any of the systems serving the zone are New, the status
// is New
RULE NEW ThrmlZn:HVACStatus
  DATATYPE
    Enumeration
  DESCRIPTION
    "An enumeration that specifies if the Status of HVAC system(s) serving
     the ThermalZone is 'New'."
  HELP
    "If ANY of the HVAC systems (not including exhaust) serving the 
     ThermalZone are 'New', the zone status is 'New'. 
     
     If all HVAC systems are 'Existing', the zone status is 'Existing'.  
     
     For partial compliance cases where mechanical systems are not modeled,
     such as 'NewEnvelope', or as part of an addition/alteration analysis 
     where the HVAC is unknown or not in the scope of the analysis, 
     the zone status is 'Unknown'."
  INPUTCLASS 
    NotInput
  OPTION
    New
    Existing
    Unknown
  DEFAULT : T24N
    if( IsCond > 0 .AND. 
        LocalCompAssigned( PriAirCondgSysRef[1] ) .AND. 
        HasUnknownHVAC = 0 )
    then
      if( LocalCompAssigned( PriAirCondgSysRef[2] ) )
      then // Secondary system is defined
        if( LocalCompAssigned( VentSysRef ) )
        then // Ventilation system is defined
          if( PriAirCondgSysRef[1]:IsNew = 1 .OR.
              PriAirCondgSysRef[2]:IsNew = 1 .OR.
              VentSysRef:IsNew = 1 )
          then "New"
          else "Existing"
          endif
        else // No ventilation system
          if( PriAirCondgSysRef[1]:IsNew = 1 .OR.
              PriAirCondgSysRef[2]:IsNew = 1 )
          then "New"
          else "Existing"
          endif
        endif
      else // No secondary system
      if( LocalCompAssigned( VentSysRef ) )
      then // Ventilation system is defined, 
        if( PriAirCondgSysRef[1]:IsNew = 1 .OR.
            VentSysRef:IsNew = 1 )
        then "New"
        else "Existing"
        endif
      else // No ventilation system
      if( PriAirCondgSysRef[1]:IsNew = 1 )
      then "New"
      else "Existing"
      endif endif endif
    else if( PrkgGarArea > 0 .AND. LocalCompAssigned( VentSysRef ) )
    then // Check to see if parking garage vent system is new
      if( VentSysRef:IsNew = 1 )
      then "New"
      else "Existing"
      endif
    else if( PrkgGarArea > 0 .AND. LocalCompAssigned( ExhSysRef ) )
    then // Check to see if parking garage vent system is new
      if( ExhSysRef:IsNew = 1 )
      then "New"
      else "Existing"
      endif
    else "Unknown"
    endif endif endif
  DEFAULT : S901G ECBC
    if( IsCond > 0 .AND. LocalCompAssigned( PriAirCondgSysRef[1] ) )
    then
      if( LocalCompAssigned( PriAirCondgSysRef[2] ) )
      then // Secondary system is defined
        if( LocalCompAssigned( VentSysRef ) )
        then // Ventilation system is defined
          if( PriAirCondgSysRef[1]:IsNew = 1 .OR.
              PriAirCondgSysRef[2]:IsNew = 1 .OR.
              VentSysRef:IsNew = 1 )
          then "New"
          else "Existing"
          endif
        else // No ventilation system
          if( PriAirCondgSysRef[1]:IsNew = 1 .OR.
              PriAirCondgSysRef[2]:IsNew = 1 )
          then "New"
          else "Existing"
          endif
        endif
      else // No secondary system
      if( LocalCompAssigned( VentSysRef ) )
      then // Ventilation system is defined, 
        if( PriAirCondgSysRef[1]:IsNew = 1 .OR.
            VentSysRef:IsNew = 1 )
        then "New"
        else "Existing"
        endif
      else // No ventilation system
      if( PriAirCondgSysRef[1]:IsNew = 1 )
      then "New"
      else "Existing"
      endif endif endif
    else "Unknown"
    endif
ENDRULE

RULE NEW ThrmlZn:IsNewHVAC
  DATATYPE
    Integer
  DESCRIPTION
    "A flag that specifies if the Status of any HVAC system(s) (not including
     exhaust) that serve the ThermalZone is 'New' or is an 'Existing' system
     that has hydronic coils served by plant with 'New' equipment."
  INPUTCLASS 
    NotInput
  DEFAULT : T24N
    if( Proj:IsNoMech > 0 .OR. ( IsCond > 0 .AND. HasUnknownHVAC > 0 ) )
    then -999 // Partial envelope or Core & Shell unknown HVAC
    else
    if( HVACStatus = "New" )
    then 1
    else if( HVACStatus = "Existing" ) 
    then 0
    else -999
    endif endif endif
ENDRULE

RULE NEW ThrmlZn:IsExistingHVAC
  DATATYPE
    Integer
  DESCRIPTION
    "A flag that specifies if the Status of all HVAC system(s) (not including
     exhaust) that serve the ThermalZone is 'Existing'."
  INPUTCLASS 
    NotInput
  DEFAULT : T24N
    if( Proj:IsNoMech > 0 .OR. ( IsCond > 0 .AND. HasUnknownHVAC > 0 ) )
    then -999 // Partial envelope or Core & Shell unknown HVAC
    else
    if( HVACStatus = "Existing" )
    then 1
    else if( HVACStatus = "New" ) 
    then 0
    else -999
    endif endif endif
ENDRULE

RULE NEW ThrmlZn:IsNewVent
  DATATYPE
    Integer
  LONGFORM
    IsNewVentilation
  DESCRIPTION
    "A flag that specifies if the Status of the Ventilation system that serves the 
     ThermalZone is 'New'."
  INPUTCLASS 
    NotInput
  DEFAULT : T24N
    if( Proj:IsNoMech > 0 .OR. ( IsCond > 0 .AND. HasUnknownHVAC > 0 ) )
    then -999 // Partial envelope or Core & Shell unknown HVAC
    else
    if( LocalCompAssigned( VentSysRef ) )
    then
      if( VentSysRef:IsNew > 0 )
      then 1
      else 0
      endif
    else -999
    endif endif
  DEFAULT : S901G ECBC
    if( LocalCompAssigned( VentSysRef ) )
    then
      if( VentSysRef:IsNew > 0 )
      then 1
      else 0
      endif
    else -999
    endif
ENDRULE

RULE NEW ThrmlZn:IsNewExh
  DATATYPE
    Integer
  LONGFORM
    IsNewExhaust
  DESCRIPTION
    "A flag that specifies if the Status of the Exhaust system that serves the 
     ThermalZone is 'New'."
  INPUTCLASS 
    NotInput
  DEFAULT : T24N
    if( Proj:IsNoMech .OR. ( IsCond .AND. HasUnknownHVAC = 1 ) )
    then -999 // Partial envelope or Core & Shell unknown HVAC
    else
    if( LocalCompAssigned( ExhSysRef ) )
    then
      if( ExhSysRef:IsNew > 0 )
      then 1
      else 0
      endif
    else -999
    endif endif
  DEFAULT : S901G ECBC
    if( LocalCompAssigned( ExhSysRef ) )
    then
      if( ExhSysRef:IsNew > 0 )
      then 1
      else 0
      endif
    else -999
    endif
ENDRULE


RULE NEW Spc:HVACStatus
  DATATYPE
    Enumeration
  DESCRIPTION
    "A flag that specifies if the Status of any HVAC system(s) (not including
     exhaust) that serve the ThermalZone that the Space is assigned to."
  HELP
    "If ANY of the HVAC systems (not including exhaust) serving the 
     ThermalZone are 'New', the zone status is 'New'. 
     
     If all HVAC systems are 'Existing', the zone status is 'Existing'.  
     
     For partial compliance cases where mechanical systems are not modeled,
     such as 'NewEnvelope', or as part of an addition/alteration analysis 
     where the HVAC is unknown or not in the scope of the analysis, 
     the zone status is 'Unknown'."
  INPUTCLASS 
    NotInput
  OPTION
    New
    Existing
    Unknown   
  DEFAULT
    if( LocalCompAssigned( ThrmlZnRef ) .AND. CondgType != "Plenum" )
    then ThrmlZnRef:HVACStatus
    else UNDEFINED
    endif
ENDRULE

RULE NEW Spc:IsNewHVAC
  DATATYPE
    Integer
  DESCRIPTION
    "A flag that specifies if the Status of any HVAC system(s) (not including
     exhaust) that serve the ThermalZone the Space is assigned to."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( LocalCompAssigned( ThrmlZnRef ) )
    then ThrmlZnRef:IsNewHVAC
    else 0
    endif
ENDRULE

RULE NEW Spc:IsExistingHVAC
  DATATYPE
    Integer
  DESCRIPTION
    "A flag that specifies if the Status of any HVAC system(s) that serve the 
     ThermalZone the Space is assigned to."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( LocalCompAssigned( ThrmlZnRef ) )
    then ThrmlZnRef:IsExistingHVAC
    else 0
    endif
ENDRULE

RULE NEW Spc:IsNewVent
  DATATYPE
    Integer
  DESCRIPTION
    "A flag that specifies if the Status of the Ventilation system that serve the 
     ThermalZone the Space is assigned to."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( LocalCompAssigned( ThrmlZnRef ) )
    then ThrmlZnRef:IsNewVent
    else 0
    endif
ENDRULE

RULE NEW Spc:IsNewExh
  DATATYPE
    Integer
  DESCRIPTION
    "A flag that specifies if the Status of the Exhaust system that serve the 
     ThermalZone the Space is assigned to."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( LocalCompAssigned( ThrmlZnRef ) )
    then ThrmlZnRef:IsNewExh
    else 0
    endif
ENDRULE



// --------------- Story Totals ------------------------------------------------
// See Building-General.rule for Story totals independent of Add/Alt
// NEW Totals -----------
RULE NEW Story:TotFlrAreaNewWithMult
  DATATYPE
    Float
  LONGFORM
    TotalFloorAreaNewWithMultiplier
  DESCRIPTION
    "The total NEW floor area (conditioned and unconditioned) of the Story, 
     including multipliers."
  INPUTCLASS
    NotInput 
  DEFAULT
    SumChildrenIf( Spc:FlrAreaWithMult, Spc:OverallStatus = "New" ) 
ENDRULE 

RULE NEW Story:IsNewStory
  DATATYPE
    Integer
  LONGFORM
    IsNewStory
  DESCRIPTION
   "A flag that indicates whether a story in a building includes new building area"
  INPUTCLASS
    NotInput
  DEFAULT
    if ( TotFlrAreaNewWithMult > 0 )  
    then 
      Mult
    else
      0
    endif     
ENDRULE

RULE NEW Story:NonResFlrAreaNewWithMult
  DATATYPE
    Float
  LONGFORM
    NonresidentialFloorAreaNewWithMultiplier
  DESCRIPTION
    "The total NEW story nonresidential (conditioned) floor area, 
     including multipliers."
  INPUTCLASS
    NotInput  
  DEFAULT
    SumChildrenIf( Spc:NonResCondFlrAreaWithMult, Spc:OverallStatus = "New" ) 
ENDRULE  

RULE NEW Story:ResFlrAreaNewWithMult
  DATATYPE
    Float
  LONGFORM
    ResidentialFloorAreaNewWithMultiplier
  DESCRIPTION
    "The total NEW story residential (conditioned) floor area, 
     including multipliers."
  INPUTCLASS
    NotInput  
  DEFAULT
    SumChildrenIf( Spc:ResCondFlrAreaWithMult, Spc:OverallStatus = "New" ) 
ENDRULE  

// Space with new HVAC -----------
RULE NEW Story:NonResFlrAreaNewHVACWithMult
  DATATYPE
    Float
  LONGFORM
    NonresidentialFloorAreaNewHVACWithMultiplier
  DESCRIPTION
    "The total nonresidential conditioned floor area served by NEW HVAC equipment,
     including multipliers."
  INPUTCLASS
    NotInput 
  DEFAULT
    SumChildrenIf( Spc:NonResCondFlrAreaWithMult, Spc:IsNewHVAC = 1 ) 
ENDRULE 

RULE NEW Story:ResFlrAreaNewHVACWithMult
  DATATYPE
    Float
  LONGFORM
    ResidentialFloorAreaNewWithHVACMultiplier
  DESCRIPTION
    "The total residential conditioned floor area served by NEW HVAC equipment, 
     including multipliers."
  INPUTCLASS
    NotInput 
  DEFAULT
    SumChildrenIf( Spc:ResCondFlrAreaWithMult, Spc:IsNewHVAC = 1 ) 
ENDRULE 

// ALTERED Totals --------------------------------------------------------------
RULE NEW Story:TotFlrAreaAlteredWithMult
  DATATYPE
    Float
  LONGFORM
    TotalFloorAreaNewWithMultiplier
  DESCRIPTION
    "The total ALTERED floor area (conditioned and unconditioned) of the Story, 
     including multipliers."
  INPUTCLASS
    NotInput 
  DEFAULT
    SumChildrenIf( Spc:FlrAreaWithMult, Spc:OverallStatus = "Altered" ) 
ENDRULE 

RULE NEW Story:NonResFlrAreaAlteredWithMult
  DATATYPE
    Float
  LONGFORM
    NonresidentialFloorAreaAlteredWithMultiplier
  DESCRIPTION
    "The total ALTERED story nonresidential (conditioned) floor area,
     including space multipliers."
  INPUTCLASS
    NotInput  
  DEFAULT
    SumChildrenIf( Spc:NonResCondFlrAreaWithMult, Spc:OverallStatus = "Altered" )
ENDRULE  

RULE NEW Story:ResFlrAreaAlteredWithMult
  DATATYPE
    Float
  LONGFORM
    ResidentialFloorAreaAlteredWithMultiplier
  DESCRIPTION
    "The total ALTERED story residential (conditioned) floor area,
     including space multipliers."
  INPUTCLASS
    NotInput  
  DEFAULT
    SumChildrenIf( Spc:ResCondFlrAreaWithMult, Spc:OverallStatus = "Altered" )
ENDRULE  

RULE NEW Story:TotCondFlrAreaAlteredWithMult
  DATATYPE
    Float
  LONGFORM
    TotalConditionedFloorAreaAlteredWithMultiplier
  DESCRIPTION
    "The total ALTERED story conditioned floor area,
     including space multipliers."
  INPUTCLASS
    NotInput  
  DEFAULT
    NonResFlrAreaAlteredWithMult + ResFlrAreaAlteredWithMult
ENDRULE 

// EXISTING Totals ----------
RULE NEW Story:TotFlrAreaExistingWithMult
  DATATYPE
    Float
  LONGFORM
    TotalFloorAreaExistingWithMultiplier
  DESCRIPTION
    "The total EXISTING floor area (conditioned and unconditioned) of the Story, 
     including multipliers."
  INPUTCLASS
    NotInput  
  DEFAULT
    Max( 0, TotFlrAreaWithMult - ( TotFlrAreaNewWithMult + TotFlrAreaAlteredWithMult ) )
ENDRULE 

RULE NEW Story:NonResFlrAreaExistingWithMult
  DATATYPE
    Float
  LONGFORM
    NonresidentialFloorAreaExistingWithMultiplier
  DESCRIPTION
    "The total EXISTING story nonresidential (conditioned) floor area,
     including space multipliers."
  INPUTCLASS
    NotInput  
  DEFAULT
    Max( 0, TotCondFlrAreaWithMult - ( NonResFlrAreaNewWithMult + NonResFlrAreaAlteredWithMult ) )
ENDRULE  

RULE NEW Story:ResFlrAreaExistingWithMult
  DATATYPE
    Float
  LONGFORM
    ResidentialFloorAreaExistingWithMultiplier
  DESCRIPTION
    "The total EXISTING story residential (conditioned) floor area,
     including space multipliers."
  INPUTCLASS
    NotInput  
  DEFAULT
    Max( 0, TotCondFlrAreaWithMult - ( ResFlrAreaNewWithMult + ResFlrAreaAlteredWithMult ) )
ENDRULE  

RULE NEW Story:TotCondFlrAreaExistingWithMult
  DATATYPE
    Float
  LONGFORM
    TotalConditionedFloorAreaExistingWithMultiplier
  DESCRIPTION
    "The total EXISTING story conditioned floor area,
     including space multipliers."
  INPUTCLASS
    NotInput
  DEFAULT
    Max( 0, NonResFlrAreaExistingWithMult + ResFlrAreaExistingWithMult )
ENDRULE 

// --------------- Bldg Totals -------------------------------------------------
// See Building-General.rule for Bldg totals independent of Add/Alt
// Bldg NEW Totals -----------
RULE Bldg:TotStoryCntNew
  DESCRIPTION
    "The total number of NEW stories in a building."
  RESETS
    ResetThisWhenTheFollowingIsModified
      Bldg:WholeBldgModeled
  INPUTCLASS
    Optional 
  MINIMUM
    0
  REPORTPRECISION
    0
  DEFAULT
    if( Proj:IsAddOrAlt = 1 ) 
    then
      SumChildren( Story:IsNewStory )
    else
      TotStoryCnt
    endif
ENDRULE  

RULE Bldg:AboveGrdStoryCntNew
  DESCRIPTION
    "The number of NEW above-grade building stories."
  RESETS
    ResetThisWhenTheFollowingIsModified
      Bldg:WholeBldgModeled
  INPUTCLASS
    Optional
  MINIMUM
    0
  REPORTPRECISION
    0
  DEFAULT
    if( Proj:IsAddOrAlt = 1 ) 
    then
      SumChildrenIf( Story:IsNewStory, Story:Z > -1 )
    else 
      AboveGrdStoryCnt
    endif
ENDRULE  

RULE Bldg:LivingUnitCntNew
  DESCRIPTION
    "The number of NEW living units in the building."
  INPUTCLASS
    Optional
  MINIMUM
    0
  REPORTPRECISION
    0
  DEFAULT
    if( Proj:IsAddOrAlt = 1 ) 
    then 0
    else LivingUnitCntRpt
    endif
ENDRULE  

RULE Bldg:TotFlrAreaNew
  DESCRIPTION
    "The total NEW floor area (conditioned and unconditioned) of the building, 
     including multipliers."
  INPUTCLASS
    NotInput 
  REPORTPRECISION
    0
  DEFAULT
    if( Proj:IsAddOrAlt )
    then SumChildren( Story:TotFlrAreaNewWithMult )
    else 0
    endif
ENDRULE 

RULE NEW Bldg:NonResFlrAreaNew
  DATATYPE
    Float
  LONGFORM
    NonresidentialFloorAreaNew
  DESCRIPTION
    "The total NEW building nonresidential (conditioned) floor area."
  INPUTCLASS
    NotInput  
  DEFAULT
    SumChildren( Story:NonResFlrAreaNewWithMult )
ENDRULE  

RULE NEW Bldg:ResFlrAreaNew
  DATATYPE
    Float
  LONGFORM
    ResidentialFloorAreaNew
  DESCRIPTION
    "The total NEW building residential (conditioned) floor area."
  INPUTCLASS
    NotInput  
  REPORTPRECISION
    0
  DEFAULT
    SumChildren( Story:ResFlrAreaNewWithMult )
ENDRULE  

RULE Bldg:TotCondFlrAreaNew
  DESCRIPTION
    "The total NEW building conditioned floor area." 
  INPUTCLASS
    NotInput 
  REPORTPRECISION
    0
  DEFAULT
    if( Proj:IsAddOrAlt )
    then NonResFlrAreaNew + ResFlrAreaNew
    else 0
    endif
ENDRULE 

RULE NEW Bldg:TotCondVolNew
  DATATYPE
    Float
  LONGFORM
    TotalConditionedVolumeNew
  DESCRIPTION
    "The total NEW building conditioned volume." 
  INPUTCLASS
    NotInput
  REPORTPRECISION
    0
  DEFAULT
    SumChildrenIf(Spc:CondVolWithMult, Spc:OverallStatus = "New")   
ENDRULE 

// Bldg ALTERED Totals ---------
RULE Bldg:TotStoryCntAltered
  DESCRIPTION
    "The total number of ALTERED stories in a building."
  RESETS
    ResetThisWhenTheFollowingIsModified
      Bldg:WholeBldgModeled
  INPUTCLASS
    Optional
  MINIMUM
    0
  REPORTPRECISION
    0
  DEFAULT
    0 
ENDRULE  

RULE Bldg:AboveGrdStoryCntAltered
  DESCRIPTION
    "The number of ALTERED above-grade building stories."
  RESETS
    ResetThisWhenTheFollowingIsModified
      Bldg:WholeBldgModeled
  INPUTCLASS
    Optional
  MINIMUM
    0
  REPORTPRECISION
    0
  DEFAULT
    0
ENDRULE  

RULE Bldg:LivingUnitCntAltered
  DESCRIPTION
    "The number of ALTERED living units in the building."
  INPUTCLASS
    Optional
  MINIMUM
    0
  REPORTPRECISION
    0
  DEFAULT
    0
ENDRULE  

RULE NEW Bldg:TotFlrAreaAltered
  DATATYPE
    Float
  LONGFORM
    TotalFloorAreaAltered
  DESCRIPTION
    "The total ALTERED floor area (conditioned and unconditioned) of the building,
     including space multipliers."
  INPUTCLASS
    NotInput  
  REPORTPRECISION
    0
  DEFAULT
    SumChildren( Story:TotFlrAreaAlteredWithMult )
ENDRULE 

RULE NEW Bldg:NonResFlrAreaAltered
  DATATYPE
    Float
  LONGFORM
    NonresidentialFloorAreaAltered
  DESCRIPTION
    "The total ALTERED building nonresidential (conditioned) floor area,
     including space multipliers."
  INPUTCLASS
    NotInput  
  DEFAULT
    SumChildren( Story:NonResFlrAreaAlteredWithMult )
ENDRULE  

RULE NEW Bldg:ResFlrAreaAltered
  DATATYPE
    Float
  LONGFORM
    ResidentialFloorAreaAltered
  DESCRIPTION
    "The total ALTERED building residential (conditioned) floor area,
     including space multipliers."
  INPUTCLASS
    NotInput  
  DEFAULT
    SumChildren( Story:ResFlrAreaAlteredWithMult )
ENDRULE  

RULE NEW Bldg:TotCondFlrAreaAltered
  DATATYPE
    Float
  LONGFORM
    TotalConditionedFloorAreaAltered
  DESCRIPTION
    "The total ALTERED building conditioned floor area,
     including space multipliers."
  INPUTCLASS
    NotInput  
  DEFAULT
    NonResFlrAreaAltered + ResFlrAreaAltered
ENDRULE 

RULE NEW Bldg:TotCondVolAltered
  DATATYPE
    Float
  LONGFORM
    TotalConditionedVolumeAltered
  DESCRIPTION
    "The total ALTERED building conditioned volume,
     including space multipliers."
  INPUTCLASS
    NotInput 
  REPORTPRECISION
    0
  DEFAULT
    SumChildrenIf( Spc:CondVolWithMult, Spc:OverallStatus = "Altered" ) 
ENDRULE 

// Bldg EXISTING Totals --------
// Existing = Total - ( New + Altered )
RULE Bldg:TotStoryCntExisting
  DESCRIPTION
    "The total number of EXISTING stories in a building."
  RESETS
    ResetThisWhenTheFollowingIsModified
      Bldg:WholeBldgModeled
  INPUTCLASS
    Optional 
  MINIMUM
    0
  REPORTPRECISION
    0
  DEFAULT
    if( LocalStatus( TotStoryCnt ) > 0 )
    then 
      Max(0 , TotStoryCnt - ( TotStoryCntNew + TotStoryCntAltered ) )
    else 0
    endif
ENDRULE 
 
RULE Bldg:AboveGrdStoryCntExisting
  DESCRIPTION
    "The number of EXISTING above-grade building stories."
  RESETS
    ResetThisWhenTheFollowingIsModified
      Bldg:WholeBldgModeled
  INPUTCLASS
    Optional
  MINIMUM
    0
  REPORTPRECISION
    0
  DEFAULT
    if( LocalStatus( AboveGrdStoryCnt ) > 0 )
    then 
      Max( 0, AboveGrdStoryCnt - ( AboveGrdStoryCntNew + AboveGrdStoryCntAltered ) )
    else 0
    endif
ENDRULE  

RULE Bldg:LivingUnitCntExisting
  DESCRIPTION
    "The number of EXISTING living units in the building."
  INPUTCLASS
    Optional
  MINIMUM
    0
  REPORTPRECISION
    0
  DEFAULT
    if( LocalStatus( LivingUnitCntRpt ) > 0 )
    then 
      Max( 0, LivingUnitCntRpt - ( LivingUnitCntNew + LivingUnitCntAltered ) )
    else 0
    endif
ENDRULE  

RULE NEW Bldg:TotFlrAreaExisting
  DATATYPE
    Float
  LONGFORM
    TotalFloorAreaExisting
  DESCRIPTION
    "The total EXISTING floor area (conditioned and unconditioned) of the building, 
     including multipliers."
  INPUTCLASS
    NotInput  
  DEFAULT
    Max( 0, TotFlrArea - ( TotFlrAreaNew + TotFlrAreaAltered ) )
  CHECKCODE
    if( Proj:IsAdd = 1 .AND. Proj:CompType != "AdditionEnvelope" .AND. TotFlrAreaExisting = 0 )
    then
      if( WholeBldgModeled = 1  )
      then 
        PostError("The project compliance type is '%s' and 'WholeBuildingModeled
                   has been selected. Existing space must included in the model.",
                   Proj:CompType)
      else 
        PostError("The project compliance type is '%s' and 'WholeBuildingModeled'
                   has not been selected. Enter the Total Floor Area for the building,
                   including both new and existing space.",
                   Proj:CompType)
      endif
    else UNCHANGED
    endif   
//CHECKCODE
//  if( TotFlrAreaNew > 0 .AND. IsAltOnly )
//  then // Is Alteration only, but has new floor area
//    PostError("The project ComplianceType = %s, but the model includes
//               new floor area.", Proj:CompType )
//  else
//  if( TotFlrAreaAltered > 0 .AND. IsAddOrAlt .AND. IsAlt = 0 )
//  then // Is Addition* but has Altered area
//    PostError("The project ComplianceType = %s, but the model includes
//               altered floor area.", Proj:CompType )
//  else UNCHANGED
//  endif endif 
ENDRULE 

RULE NEW Bldg:NonResFlrAreaExisting
  DATATYPE
    Float
  LONGFORM
    NonresidentialFloorAreaExisting
  DESCRIPTION
    "The total EXISTING building nonresidential (conditioned) floor area,
     including space multipliers."
  INPUTCLASS
    NotInput  
  DEFAULT
    Max( 0, NonResFlrArea - ( NonResFlrAreaNew + NonResFlrAreaAltered ) )
ENDRULE  

RULE NEW Bldg:ResFlrAreaExisting
  DATATYPE
    Float
  LONGFORM
    ResidentialFloorAreaExisting
  DESCRIPTION
    "The total EXISTING building residential (conditioned) floor area,
     including space multipliers."
  INPUTCLASS
    NotInput  
  DEFAULT
    Max( 0, ResFlrArea - ( ResFlrAreaNew + ResFlrAreaAltered ) )
ENDRULE  

RULE NEW Bldg:TotCondFlrAreaExisting
  DATATYPE
    Float
  LONGFORM
    TotalConditionedFloorAreaExisting
  DESCRIPTION
    "The total EXISTING building conditioned floor area,
     including space multipliers."
  INPUTCLASS
    NotInput
  DEFAULT
    Max( 0, NonResFlrAreaExisting + ResFlrAreaExisting )
ENDRULE 

RULE NEW Bldg:TotCondVolExisting
  DATATYPE
    Float
  LONGFORM
    TotalConditionedVolumeExisting
  DESCRIPTION
    "The total EXISTING building conditioned volume,
     including space multipliers."
  INPUTCLASS
    NotInput
  REPORTPRECISION
    0
  DEFAULT
    Max( 0, TotCondVol - ( TotCondVolNew + TotCondVolAltered ) )
ENDRULE 


// HVAC ------------------------------------------------------------------------
// --------------- Building Totals ---------------------------------------------
// HVAC (New + Existing) ---------
RULE Bldg:CoilClgCap
  DESCRIPTION
    "The total cooling capacity of non-hydronic coils in the Building."
  INPUTCLASS 
    Default
  MINIMUM
    0
  REPORTPRECISION
    -3
  DEFAULT
    SumChildrenIf( CoilClg:CapNonHydronic, CoilClg:CapNonHydronic > 0 )
  CHECKCODE
    if( WholeBldgModeled = 1 .AND. LocalStatus( CoilClgCap ) > 4 )
    then
      PostError("Building total coil cooling (DX) capacity should not 
                 be user-defined if the whole building is modeled. Uncheck this
                 option and restore the default to perform compliance.")
    else UNCHANGED
    endif
  ANNUAL
    SumChildrenIf( CoilClg:CapNonHydronic, CoilClg:CapNonHydronic > 0 )
ENDRULE

// -----------------------------------------------------------------------------
RULE Bldg:CoilHtgCap
  DESCRIPTION
    "The total heating capacity of non-hydronic coils in the Building."
  INPUTCLASS 
    Default
  MINIMUM
    0
  REPORTPRECISION
    -3
  DEFAULT
    SumChildrenIf( CoilHtg:CapNonHydronic, CoilHtg:CapNonHydronic > 0 )
  CHECKCODE
    if( WholeBldgModeled = 1 .AND. LocalStatus( CoilHtgCap ) > 4 )
    then
      PostError("Building total coil heating (HP + Furnace) capacity should not 
                 be user-defined if the whole building is modeled. Uncheck this
                 option and restore the default to perform compliance.")
    else UNCHANGED
    endif
  ANNUAL
    SumChildrenIf( CoilHtg:CapNonHydronic, CoilHtg:CapNonHydronic > 0 )
ENDRULE

// -----------------------------------------------------------------------------
RULE Bldg:CoilClgCapHydronic
  DESCRIPTION
    "The total cooling capacity of hydronic coils in the Building."
  INPUTCLASS 
    Default
  MINIMUM
    0
  REPORTPRECISION
    -3
  DEFAULT
    SumChildrenIf( CoilClg:CapHydronic, CoilClg:CapHydronic > 0 )
  CHECKCODE
    if( WholeBldgModeled = 1 .AND. LocalStatus( CoilClgCap ) > 4 )
    then
      PostError("Building total coil cooling (DX) capacity should not 
                 be user-defined if the whole building is modeled. Uncheck this
                 option and restore the default to perform compliance.")
    else UNCHANGED
    endif
// This is here only for debugging  
  ANNUAL
    CoilClgCapHydronic
//  ANNUAL
//    SumChildrenIf( CoilClg:CapHydronic, CoilClg:CapHydronic > 0 )
ENDRULE

// -----------------------------------------------------------------------------
RULE Bldg:CoilHtgCapHydronic
  DESCRIPTION
    "The total heating capacity of hydronic coils in the Building."
  INPUTCLASS 
    Default
  MINIMUM
    0
  REPORTPRECISION
    -3
  DEFAULT
    SumChildrenIf( CoilHtg:CapHydronic, CoilHtg:CapHydronic > 0 )
  CHECKCODE
    if( WholeBldgModeled = 1 .AND. LocalStatus( CoilHtgCap ) > 4 )
    then
      PostError("Building total coil heating (HP + Furnace) capacity should not 
                 be user-defined if the whole building is modeled. Uncheck this
                 option and restore the default to perform compliance.")
    else UNCHANGED
    endif
// This is here only for debugging  
  ANNUAL
    CoilHtgCapHydronic
//  ANNUAL
//    SumChildrenIf( CoilHtg:CapHydronic, CoilHtg:CapHydronic > 0 )
ENDRULE

// -----------------------------------------------------------------------------
RULE Bldg:PlantClgCap
  DESCRIPTION
    "Total building NEW plant cooling capacity.  Currently this only includes 
     chillers."
  INPUTCLASS
    Default
  MINIMUM
    0 
  REPORTPRECISION
    -3
  DEFAULT
    SumAll( Chlr:CapRtd )
  CHECKCODE
    if( WholeBldgModeled = 1 .AND. LocalStatus( PlantClgCap ) > 4 )
    then
      PostError("Building total plant chiller capacity should not 
                 be user-defined if the whole building is modeled. Uncheck this
                 option and restore the default to perform compliance.")
    else UNCHANGED
    endif
  ANNUAL
    SumAll( Chlr:CapRtd )
ENDRULE

// -----------------------------------------------------------------------------
RULE Bldg:PlantHtgCap
  DESCRIPTION
    "Total building NEW plant heating capacity.  Currently this only includes 
     boilers."
  INPUTCLASS
    Default
  MINIMUM
    0
  REPORTPRECISION
    -3
  DEFAULT
    SumAll( Blr:CapRtd )
  CHECKCODE
    if( WholeBldgModeled = 1 .AND. LocalStatus( PlantHtgCap ) > 4 )
    then
      PostError("Building total plant boiler capacity should not 
                 be user-defined if the whole building is modeled. Uncheck this
                 option and restore the default to perform compliance.")
    else UNCHANGED
    endif
  ANNUAL
    SumAll( Blr:CapRtd )
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Bldg:CoilClgCapNonHydronicNew
  DATATYPE
    Float
  LONGFORM
    CoilCoolingCapacityNonHydronicNew
  DESCRIPTION
    "Total building net capacity of cooling coils, if Status = New. Does not include 
     Type = ChilledWater coils"
  INPUTCLASS
    NotInput  
  DEFAULT
    SumChildrenIf( CoilClg:CapNonHydronic, CoilClg:IsNew = 1 )
  ANNUAL
    SumChildrenIf( CoilClg:CapNonHydronic, CoilClg:IsNew = 1 )
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Bldg:CoilHtgCapNonHydronicNew
  DATATYPE
    Float
  LONGFORM
    CoilHeatingCapacityNonHydronicNew
  DESCRIPTION
    "Total building gross capacity of heating coils, if Status = New.  Does not include 
     Type = HotWater or Steam coils."
  INPUTCLASS
    NotInput  
  DEFAULT
    SumChildrenIf( CoilHtg:CapNonHydronic, CoilHtg:IsNew = 1 )
  ANNUAL
    SumChildrenIf( CoilHtg:CapNonHydronic, CoilHtg:IsNew = 1 )
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Bldg:CoilClgCapHydronicNew
  DATATYPE
    Float
  LONGFORM
    CoilCoolingCapacityHydronicNew
  DESCRIPTION
    "Total building net capacity of hydronic cooling coils, if Status = New."
  INPUTCLASS
    NotInput  
  DEFAULT
    SumChildrenIf( CoilClg:CapHydronic, CoilClg:IsNew = 1 )
  ANNUAL
    SumChildrenIf( CoilClg:CapHydronic, CoilClg:IsNew = 1 )
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Bldg:CoilHtgCapHydronicNew
  DATATYPE
    Float
  LONGFORM
    CoilHeatingCapacityHydronicNew
  DESCRIPTION
    "Total building gross capacity of hydronic heating coils, if Status = New."
  INPUTCLASS
    NotInput  
  DEFAULT
    SumChildrenIf( CoilHtg:CapHydronic, CoilHtg:IsNew = 1 )
  ANNUAL
    SumChildrenIf( CoilHtg:CapHydronic, CoilHtg:IsNew = 1 )
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Bldg:CoilClgCapHydronicExisting
  DATATYPE
    Float
  LONGFORM
    CoilCoolingCapacityHydronicExisting
  DESCRIPTION
    "Total building net capacity of hydronic cooling coils, if Status <> New."
  INPUTCLASS
    NotInput  
  DEFAULT
;   SumChildrenIf( CoilClg:CapHydronic, CoilClg:IsNew = 0 )
    Max( 0, CoilClgCapHydronic - CoilClgCapHydronicNew )
  ANNUAL
;   SumChildrenIf( CoilClg:CapHydronic, CoilClg:IsNew = 0 )
    Max( 0, CoilClgCapHydronic - CoilClgCapHydronicNew )
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Bldg:CoilHtgCapHydronicExisting
  DATATYPE
    Float
  LONGFORM
    CoilHeatingCapacityHydronicExisting
  DESCRIPTION
    "Total building gross capacity of hydronic heating coils, if Status <> New."
  INPUTCLASS
    NotInput  
  DEFAULT
;   SumChildrenIf( CoilHtg:CapHydronic, CoilHtg:IsNew = 0 )
    Max( 0, CoilHtgCapHydronic - CoilHtgCapHydronicNew )
  ANNUAL
;   SumChildrenIf( CoilHtg:CapHydronic, CoilHtg:IsNew = 0 )
    Max( 0, CoilHtgCapHydronic - CoilHtgCapHydronicNew )
ENDRULE

// -----------------------------------------------------------------------------
// NEW Totals ---------
RULE NEW Bldg:PlantClgCapNew
  DATATYPE
    Float
  LONGFORM
    PlantCoolingCapacityNew
  DESCRIPTION
    "Total building NEW plant cooling capacity.  Currently this only includes 
     chillers."
  INPUTCLASS
    NotInput  
  DEFAULT
    SumAll( Chlr:CapRtdNew )
  ANNUAL
    SumAll( Chlr:CapRtdNew )
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Bldg:PlantHtgCapNew
  DATATYPE
    Float
  LONGFORM
    PlantHeatingCapacityNew
  DESCRIPTION
    "Total building NEW plant heating capacity.  Currently this only includes 
     boilers."
  INPUTCLASS
    NotInput  
  DEFAULT
    SumAll( Blr:CapRtdNew )
  ANNUAL
    SumAll( Blr:CapRtdNew )
ENDRULE

// -----------------------------------------------------------------------------
// Existing Totals ---------------
// Existing = Total - New
// -----------------------------------------------------------------------------
RULE NEW Bldg:CoilClgCapNonHydronicExisting
  DATATYPE
    Float
  LONGFORM
    CoilCoolingCapacityNonHydronicExisting
  DESCRIPTION
    "Total building net capacity of cooling coils, if Status = Existing. If the
     entire building is not modeled, it is assumed that
     Existing = Total (input by user) - New. 
     Does not include Type = ChilledWater as the capacity of these coils 
     does not impact the baseline system selection for additions/alterations."
  INPUTCLASS
    NotInput 
  DEFAULT
    // Total - New = Existing
    Max( 0, CoilClgCap - CoilClgCapNonHydronicNew )
  ANNUAL
    Max( 0, CoilClgCap - CoilClgCapNonHydronicNew )
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Bldg:CoilHtgCapNonHydronicExisting
  DATATYPE
    Float
  LONGFORM
    CoilHeatingCapacityNonHydronicExisting
  DESCRIPTION
    "Total building gross capacity of heating coils, if Status = Existing. If the
     entire building is not modeled, it is assumed that the 
     Existing = Total (input by user) - New. 
     Does not include Type = HotWater or Steam, as the capacity of these coils 
     does not impact the baseline system selection for additions/alterations."
  INPUTCLASS
    NotInput  
  DEFAULT
    Max( 0, CoilHtgCap - CoilHtgCapNonHydronicNew )
  ANNUAL
    Max( 0, CoilHtgCap - CoilHtgCapNonHydronicNew )
ENDRULE


// -----------------------------------------------------------------------------
RULE NEW Bldg:PlantClgCapExisting
  DATATYPE
    Float
  LONGFORM
    PlantCoolingCapacityExisting
  DESCRIPTION
    "Total building EXISTING plant cooling capacity.  Currently this only includes 
     chillers."
  INPUTCLASS
    NotInput 
  DEFAULT
    Max( 0, PlantClgCap - PlantClgCapNew )
  ANNUAL
    SumAll( Chlr:CapRtdExisting)
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Bldg:PlantHtgCapExisting
  DATATYPE
    Float
  LONGFORM
    PlantHeatingCapacityExisting
  DESCRIPTION
    "Total building EXISTING plant heating capacity.  Currently this only includes 
     boilers."
  INPUTCLASS
    NotInput  
  DEFAULT
    Max( 0, PlantHtgCap - PlantHtgCapNew )
  ANNUAL
    SumAll( Blr:CapRtdExisting)
ENDRULE

// Altered Totals -----------------
// None for HVAC


// DCapBldg% calculation
// Cooling
RULE NEW Bldg:TotClgCap
  DATATYPE
    Float
  LONGFORM
    TotalCoolingCapacity
  INPUTCLASS
    NotInput 
  DESCRIPTION 
    "The total building cooling capacity for Add/Alt and plant scaling rules."
  HELP
    "Includes capacity of coils not served by a plant system, plus the
     capacity of plant heating equipment."
  DEFAULT
    PlantClgCap + CoilClgCap
  ANNUAL
    PlantClgCap + CoilClgCap
ENDRULE

RULE NEW Bldg:TotHtgCap
  DATATYPE
    Float
  LONGFORM
    TotalHeatingCapacity
  INPUTCLASS
    NotInput  
  DESCRIPTION 
    "The total building heating capacity for Add/Alt and plant scaling rules."
  HELP
    "Includes capacity of coils not served by a plany system, plus the
     capacity of plant heating equipment."
  DEFAULT
    PlantHtgCap + CoilHtgCap
  ANNUAL
    PlantHtgCap + CoilHtgCap
ENDRULE


// DCapBldg% calculation
// Cooling
RULE NEW Bldg:DeltaClgCapBldgRat
  DATATYPE
    Float
  LONGFORM
    DeltaCoolingCapacityBuildingRatio
  DESCRIPTION
    "The ratio of NEW cooling capacity ( non-hydronic coil + hydronic coil with
     new plant ) to total building cooling coil capacity, as defined for Add/Alt
     rules."
  INPUTCLASS
    NotInput  
  DEFAULT
    if( TotClgCap > 0 )
    then
      ( PlantClgCapNew + CoilClgCapNonHydronicNew ) /
      TotClgCap
    else 0
    endif
  SIZING
    DeltaClgCapBldgRat
  ANNUAL
    z:DeltaClgCapBldgRat
ENDRULE
// Heating
RULE NEW Bldg:DeltaHtgCapBldgRat
  DATATYPE
    Float
  LONGFORM
    DeltaHeatingCapacityBuildingRatio
  DESCRIPTION
    "The ratio of NEW heating capacity ( non-hydronic coil + hydronic coil with
     new plant ) to total building heating coil capacity, as defined for Add/Alt
     rules."
  INPUTCLASS
    NotInput  
  DEFAULT
    if( TotHtgCap > 0 )
    then
      ( PlantHtgCapNew + CoilHtgCapNonHydronicNew ) /
      TotHtgCap
    else 0
    endif
  SIZING
    DeltaHtgCapBldgRat
  ANNUAL
    z:DeltaHtgCapBldgRat
ENDRULE


// DCapAlt% calculation
// Cooling
RULE NEW Bldg:DeltaClgCapAltAddRat
  DATATYPE
    Float
  LONGFORM
    DeltaCoolingCapacityAlterationRatio
  DESCRIPTION
    "The ratio of NEW non-hydronic cooling coil capacity to total building
     cooling coil capacity, as defined for Add/Alt rules."
  INPUTCLASS
    NotInput  
  DEFAULT
    if( CoilClgCap > 0 )
    then
      CoilClgCapNonHydronicNew /
      CoilClgCap  
    else 0
    endif
  SIZING
    DeltaClgCapAltAddRat
  ANNUAL
    z:DeltaClgCapAltAddRat
ENDRULE

// Heating
RULE NEW Bldg:DeltaHtgCapAltAddRat
  DATATYPE
    Float
  LONGFORM
    DeltaHeatingCapacityAlterationRatio
  DESCRIPTION
    "The ratio of NEW non-hydronic heating coil capacity to total building
     heating coil capacity, as defined for Add/Alt rules."
  INPUTCLASS
    NotInput  
  DEFAULT
    if( CoilHtgCap > 0 )
    then
      CoilHtgCapNonHydronicNew /
      CoilHtgCap
    else 0
    endif
  SIZING
    DeltaHtgCapAltAddRat
  ANNUAL
    z:DeltaHtgCapAltAddRat
ENDRULE

// Thresholds for DCapAltDCapBldg Add/Alt system map
// Building
RULE NEW Bldg:DeltaCapBldgRatThreshold
  DATATYPE
    Float
  LONGFORM
    DeltaCapacityBuildingRatioThreshold
  DESCRIPTION
    "If the total building NEW capacity ( non-hydronic coil + hydronic coil with
     new plant ) exceeds this threshold, the total building conditioned floor area
     is used in the baseline system map when determining the baseline system number/type.
     If this threshold is not exceeded, the next condition checked is the whether the
     DeltaCapAltAddRatThreshold is exceeded."
  INPUTCLASS
    NotInput  
  DEFAULT
    0.25  
  SIZING
    DeltaCapBldgRatThreshold
  ANNUAL
    z:DeltaCapBldgRatThreshold
ENDRULE

// Alteration
RULE NEW Bldg:DeltaCapAltAddRatThreshold
  DATATYPE
    Float
  LONGFORM
    DeltaCapacityAlterationRatioThreshold
  DESCRIPTION
    "If the total building NEW capacity ( non-hydronic coil only ) exceeds
     this threshold, the total building conditioned floor area
     is used in the baseline system map when determining the baseline system number/type.
     If this threshold is not exceeded, only the 'Altered' building conditioned floor area
     is used in the baseline system map to determining the baseline system number/type."
  INPUTCLASS
    NotInput  
  DEFAULT
    0.90  
  SIZING
    DeltaCapAltAddRatThreshold
  ANNUAL
    z:DeltaCapAltAddRatThreshold
ENDRULE

RULE NEW Proj:BaseHVACSameAsPropHVAC
  DATATYPE
    Integer
  LONGFORM
    BaselineHVACSameAsProposedHVAC
  DESCRIPTION
    "For Additions/Alterations, a flag that indicates when all baseline HVAC 
     systems are the same as the proposed systems."
  INPUTCLASS
    NotInput
  DEFAULT
    if( IsAddOrAlt )
    then // Is an addition and/or alteration 
      if( IfValidAnd( Proj:PropHasUnknownHVACZns > 0 ) )
      then 0 // Proposed has unknown HVAC, which will be sized independently of baseline
      else
      if( ( IfValidAnd( Bldg:TotClgCap > 0 ) .AND. 
            IfValidAnd( Bldg:DeltaClgCapBldgRat = 0 ) .AND. 
            IfValidAnd( Bldg:DeltaClgCapAltAddRat = 0 ) ) 
          .OR. 
          ( IfValidAnd( Bldg:TotClgCap = 0 ) .AND. 
            IfValidAnd( Bldg:DeltaHtgCapBldgRat = 0 ) .AND. 
            IfValidAnd( Bldg:DeltaHtgCapAltAddRat = 0 ) ) )        
      then // Baseline = proposed if IsAltered and change in building
           // cooling capacity is 0 or is a heating only building with 
           // no new heating capacity.    
        1
      else // Baseline is simulated per ACM rules
        0
      endif endif
    else 0
    endif
ENDRULE

;// Calculate building total capacities
;RULE NEW ThrmlZn:CoilClgCapNonHydronic
;  DATATYPE
;    Float
;  LONGFORM
;    CoilCoolingCapacityAdditionAlteration
;  DESCRIPTION
;    "The total cooling capacity of systems that serve the ThermalZone, as 
;     classified for Add/Alt rules."
;  INPUTCLASS 
;    NotInput
;  DEFAULT
;    if( Type = "Conditioned" .AND. LocalCompAssigned( PriAirCondgSysRef[1] ) )
;    then // Primary system is defined  
;      if( LocalCompAssigned( PriAirCondgSysRef[2] ) )
;      then // Secondary system is defined
;        if( LocalCompAssigned( VentSysRef ) )
;        then // Ventilation system is defined
;          if( PriAirCondgSysRef[1]:Name = VentSysRef:Name .OR. 
;              PriAirCondgSysRef[2]:Name = VentSysRef:Name )
;          then // Don't double count VentSys capacity
;            PriAirCondgSysRef[1]:CoilClgCapNonHydronic + 
;            PriAirCondgSysRef[2]:CoilClgCapNonHydronic
;          else // VentSys is different from Pri/Sec systems
;            PriAirCondgSysRef[1]:CoilClgCapNonHydronic + 
;            PriAirCondgSysRef[2]:CoilClgCapNonHydronic +
;            VentSysRef:CoilClgCapNonHydronic
;          endif
;        else // No ventilation system
;          PriAirCondgSysRef[1]:CoilClgCapNonHydronic + 
;          PriAirCondgSysRef[2]:CoilClgCapNonHydronic
;        endif
;      else // No Secondary system
;      if( LocalCompAssigned( VentSysRef ) )
;      then // Ventilation system is defined
;        if( PriAirCondgSysRef[1]:Name = VentSysRef:Name )
;        then // Don't double count VentSys capacity
;          PriAirCondgSysRef[1]:CoilClgCapNonHydronic
;        else // VentSys is different from Pri/Sec systems
;          PriAirCondgSysRef[1]:CoilClgCapNonHydronic + 
;          VentSysRef:CoilClgCapNonHydronic
;        endif
;      else // No ventilation system
;        PriAirCondgSysRef[1]:CoilClgCapNonHydronic
;      endif endif
;    else 0
;    endif
;  SIZING
;    UNDEFINED
;  ANNUAL
;    if( Type = "Conditioned" .AND. LocalCompAssigned( PriAirCondgSysRef[1] ) )
;    then // Primary system is defined  
;      if( LocalCompAssigned( PriAirCondgSysRef[2] ) )
;      then // Secondary system is defined
;        if( LocalCompAssigned( VentSysRef ) )
;        then // Ventilation system is defined
;          if( PriAirCondgSysRef[1]:Name = VentSysRef:Name .OR. 
;              PriAirCondgSysRef[2]:Name = VentSysRef:Name )
;          then // Don't double count VentSys capacity
;            PriAirCondgSysRef[1]:CoilClgCapNonHydronic + 
;            PriAirCondgSysRef[2]:CoilClgCapNonHydronic
;          else // VentSys is different from Pri/Sec systems
;            PriAirCondgSysRef[1]:CoilClgCapNonHydronic + 
;            PriAirCondgSysRef[2]:CoilClgCapNonHydronic +
;            VentSysRef:CoilClgCapNonHydronic
;          endif
;        else // No ventilation system
;          PriAirCondgSysRef[1]:CoilClgCapNonHydronic + 
;          PriAirCondgSysRef[2]:CoilClgCapNonHydronic
;        endif
;      else // No Secondary system
;      if( LocalCompAssigned( VentSysRef ) )
;      then // Ventilation system is defined
;        if( PriAirCondgSysRef[1]:Name = VentSysRef:Name )
;        then // Don't double count VentSys capacity
;          PriAirCondgSysRef[1]:CoilClgCapNonHydronic
;        else // VentSys is different from Pri/Sec systems
;          PriAirCondgSysRef[1]:CoilClgCapNonHydronic + 
;          VentSysRef:CoilClgCapNonHydronic
;        endif
;      else // No ventilation system
;        PriAirCondgSysRef[1]:CoilClgCapNonHydronic
;      endif endif
;    else 0
;    endif
;ENDRULE
;
;RULE NEW ThrmlZn:CoilHtgCapNonHydronic
;  DATATYPE
;    Float
;  LONGFORM
;    CoilHeatingCapacityAdditionAlteration
;  DESCRIPTION
;    "The total heating capacity of systems that serve the ThermalZone, as 
;     classified for Add/Alt rules."
;  INPUTCLASS 
;    NotInput
;  DEFAULT
;    if( Type = "Conditioned" .AND. LocalCompAssigned( PriAirCondgSysRef[1] ) )
;    then // Primary system is defined  
;      if( LocalCompAssigned( PriAirCondgSysRef[2] ) )
;      then // Secondary system is defined
;        if( LocalCompAssigned( VentSysRef ) )
;        then 
;          if( PriAirCondgSysRef[1]:Name = VentSysRef:Name .OR. 
;              PriAirCondgSysRef[2]:Name = VentSysRef:Name )
;          then // Don't double count VentSys capacity
;            PriAirCondgSysRef[1]:CoilHtgCapNonHydronic + 
;            PriAirCondgSysRef[2]:CoilHtgCapNonHydronic
;          else // VentSys is defferent from Pri/Sec systems
;            PriAirCondgSysRef[1]:CoilHtgCapNonHydronic + 
;            PriAirCondgSysRef[2]:CoilHtgCapNonHydronic +
;            VentSysRef:CoilHtgCapNonHydronic
;          endif
;        else // No ventilation system
;          PriAirCondgSysRef[1]:CoilHtgCapNonHydronic + 
;          PriAirCondgSysRef[2]:CoilHtgCapNonHydronic
;        endif
;      else // No Secondary system
;      if( LocalCompAssigned( VentSysRef ) )
;      then 
;        if( PriAirCondgSysRef[1]:Name = VentSysRef:Name )
;        then // Don't double count VentSys capacity
;          PriAirCondgSysRef[1]:CoilHtgCapNonHydronic
;        else // VentSys is defferent from Pri/Sec systems
;          PriAirCondgSysRef[1]:CoilHtgCapNonHydronic + 
;          VentSysRef:CoilHtgCapNonHydronic
;        endif
;      else // No VentSys defined
;        PriAirCondgSysRef[1]:CoilHtgCapNonHydronic
;      endif endif
;    else 0
;    endif
;  SIZING
;    UNDEFINED
;  ANNUAL
;    if( Type = "Conditioned" .AND. LocalCompAssigned( PriAirCondgSysRef[1] ) )
;    then // Primary system is defined  
;      if( LocalCompAssigned( PriAirCondgSysRef[2] ) )
;      then // Secondary system is defined
;        if( LocalCompAssigned( VentSysRef ) )
;        then 
;          if( PriAirCondgSysRef[1]:Name = VentSysRef:Name .OR. 
;              PriAirCondgSysRef[2]:Name = VentSysRef:Name )
;          then // Don't double count VentSys capacity
;            PriAirCondgSysRef[1]:CoilHtgCapNonHydronic + 
;            PriAirCondgSysRef[2]:CoilHtgCapNonHydronic
;          else // VentSys is defferent from Pri/Sec systems
;            PriAirCondgSysRef[1]:CoilHtgCapNonHydronic + 
;            PriAirCondgSysRef[2]:CoilHtgCapNonHydronic +
;            VentSysRef:CoilHtgCapNonHydronic
;          endif
;        else // No ventilation system
;          PriAirCondgSysRef[1]:CoilHtgCapNonHydronic + 
;          PriAirCondgSysRef[2]:CoilHtgCapNonHydronic
;        endif
;      else // No Secondary system
;      if( LocalCompAssigned( VentSysRef ) )
;      then 
;        if( PriAirCondgSysRef[1]:Name = VentSysRef:Name )
;        then // Don't double count VentSys capacity
;          PriAirCondgSysRef[1]:CoilHtgCapNonHydronic
;        else // VentSys is defferent from Pri/Sec systems
;          PriAirCondgSysRef[1]:CoilHtgCapNonHydronic + 
;          VentSysRef:CoilHtgCapNonHydronic
;        endif
;      else // No VentSys defined
;        PriAirCondgSysRef[1]:CoilHtgCapNonHydronic
;      endif endif
;    else 0
;    endif
;ENDRULE

