; -------------------------------------------------------------------------
; Rules pertaining to:   Prep For and Clean-up After each CSE Energy Simulation
; CEC Title-24 Nonresidential Energy Code  (ported from Res - SAC 7/12/18)
; -------------------------------------------------------------------------
; Copyright (c) 2012-2016, California Energy Commission
; Copyright (c) 2012-2016, Wrightsoft Corporation
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
; STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------


;*************************************************************************
RULELIST "CSE_SimulationPrep_PV" 1 0 0 1
;   Rules which are executed immediately prior to performing a CSE simulation - covering PVARRAY objects only
;*************************************************************************
;"dbg - store BEMProc details" Proj:Action = {  StoreBEMProc( Format( "Before run %s CSE PV SimPrep", RunAbbrev ), 0 )  }

  ; SAC 3/4/17 - add call to rulelist that creates a PVArray PolyLp based on user inputs
   "Create PolyLp representing PVArray"   PVArray:Action = {
         if (IfValidAnd( DCSysSize > 0 ) .AND. GeomSpecMthd == "azimuth and tilt" .AND.
             IfValidAnd( LctnSpecified > 0 ))
         then  EvalRulelist( "Create_PVArrayPolyLp", 1 )
         else  UNCHANGED  endif  }
   "Default PolyLp data"   ; for those created above...
      PolyLp:Area  = {  if (LocalStatus(Area) > 0) then  UNCHANGED
                        else  InitializePolyLoop()  endif  }

   ; SAC 2/7/18 - revised to prevent output of PVArrays when PV scaled to 0 (possibly due to reduced PV requirement of 0kW) (tic #974)
   "Create csePVARRAY (when called for)"      PVArray:csePVARRAYRef  = {
         if (IfValidAnd( DCSysSize > 0 ) == 0 .OR.   ; to do? IfValidAnd( PVWDCSizeMultiplier[1] = 0 ) .OR.
             IfValidAnd( Az >= 0 )==0 .OR. IfValidAnd( Az <= 360 )==0 .OR.
             IfValidAnd( TiltAngle >= 0 )==0 .OR. IfValidAnd( TiltAngle <= 90 )==0) then  UNDEFINED
         else   CreateComp( csePVARRAY, substr( Name, 0, 48 ) + "-sim" )  endif  }

   "Set csePVARRAY:pvDCSysSize"     PVArray:csePVARRAYRef:pvDCSysSize     = {
         DCSysSize  }   ; to do?  * ValidOr( Proj:PVWDCSizeMultiplier[1], 1 )  }         ; already checked before PVARRAY created
   "Set csePVARRAY:pvModuleType"    PVArray:csePVARRAYRef:pvModuleType    = {
         switch (ModuleType)
            case  "Standard"   : "Standard"
            case  "Premium"    : "Premium" 
            case  "Thin Film"  : "ThinFilm"
            case  "Custom"     : "Custom"      ; not yet a Com option
            default  : UNDEFINED
         endswitch  }
   "Set csePVARRAY:pvArrayType"     PVArray:csePVARRAYRef:pvArrayType     = {
         switch (ArrayType)
            case  "Fixed (open rack)"   : "FixedOpenRack" 
            case  "Fixed (roof mount)"  : "FixedRoofMount"
            ;      "OneAxisTracking"    - not available in CBECC tools (yet)
            ;      "OneAxisBacktracking"
            ;      "TwoAxisTracking"
            default  : UNDEFINED
         endswitch  }

  ; SAC 2/24/17 - rules to specify PVARRAY geometry via PolyLp objects (in place of Azm/Tilt)
   "Set csePVARRAY:pvVertices"      PVArray:csePVARRAYRef:pvVertices      = {
         if (LocalCompAssigned( PolyLpRef ))
         then  PolyLpRef
         else  UNDEFINED  endif  }
      ;   if ((GeomSpecMthd = "reference PVArrayGeom object" .OR. IfValidAnd( Proj:PVWLocSpecified[1] > 0 )) .AND.
      ;       GlobalCompAssigned( Proj:PVWGeomPolyLpRef[1] ))
   "Set csePVARRAY:pvTilt"          PVArray:csePVARRAYRef:pvTilt          = { 
         if (LocalCompAssigned( PolyLpRef ) .OR. LocalStatus( TiltAngle ) < 1)
         then  UNDEFINED
         else  TiltAngle  endif  }
   "Set csePVARRAY:pvAzm"           PVArray:csePVARRAYRef:pvAzm           = { 
         if (LocalCompAssigned( PolyLpRef ) .OR. LocalStatus( Az ) < 1)
         then  UNDEFINED
         else  Az  endif  }

;   "Set csePVARRAY:pvGrndRefl"      csePVARRAY:pvGrndRefl      = {   
;   "Set csePVARRAY:pvGCR"           PVArray:csePVARRAYRef:pvGCR           = {
;         if (IfValidAnd( Proj:PVWGCR[1]         >= 0 )) then  Proj:PVWGCR[1]
;         else  UNDEFINED  endif  }
;   "Set csePVARRAY:pvDCtoACRatio"   PVArray:csePVARRAYRef:pvDCtoACRatio   = {
;         if (IfValidAnd( Proj:PVWDCtoACRatio[1] >  0 )) then  Proj:PVWDCtoACRatio[1]
;         else  UNDEFINED  endif  }
   "Set csePVARRAY:pvInverterEff"   PVArray:csePVARRAYRef:pvInverterEff   = {
         if (IfValidAnd( InverterEff >  0 )) then  InverterEff / 100
         else  UNDEFINED  endif  }
;   "Set csePVARRAY:pvSysLosses"     PVArray:csePVARRAYRef:pvSysLosses     = {
;         if (IfValidAnd( Proj:PVWSysLosses[1]   >  0 )) then  Proj:PVWSysLosses[1]   / 100
;         else  UNDEFINED  endif  }
;   "Set csePVARRAY:pvCoverRefrInd"  PVArray:csePVARRAYRef:pvCoverRefrInd  = {
;         if (IfValidAnd( Proj:PVWCoverRefrInd[1] >= 1 ) .AND. IfValidAnd( ModuleType = 4 ))
;         then  Proj:PVWCoverRefrInd[1]   else  UNDEFINED  endif  }
;   "Set csePVARRAY:pvTempCoeff"     PVArray:csePVARRAYRef:pvTempCoeff     = {
;         if (IfValidAnd( Proj:PVWTempCoeff[1]  > -100 ) .AND. IfValidAnd( ModuleType = 4 ))
;         then  Proj:PVWTempCoeff[1]      else  UNDEFINED  endif  }
;   "Set csePVARRAY:pvUsePVWatts"    PVArray:csePVARRAYRef:pvUsePVWatts    = {
;         if (IfValidAnd( Proj:UsePVWattsDLL     >  0 )) then  "Yes"  else  UNDEFINED  endif  }

   "Set csePVARRAY:pvElecMtr"       PVArray:csePVARRAYRef:pvElecMtr       = {
         if (GlobalCompAssigned( Proj:CSE_ElecMETER ))
         then  Proj:CSE_ElecMETER  else  UNDEFINED  endif  }
;   "Set csePVARRAY:pvEndUse"        PVArray:csePVARRAYRef:pvEndUse        = {   
END
;*************************************************************************


; SAC 3/1/17 - rulelist to create PV array PolyLp
;*************************************************************************
RULELIST "Create_PVArrayPolyLp"  1 0 0 1
;*************************************************************************
   "Delete any/all PolyLp children of PVArray"  PVArray:Action = {  DeleteChildren( PolyLp )  }

   "Create PolyLp (and set PVArray:PolyLpIdx)"  PVArray:PolyLpIdx  = {
         CreatePolyLoopChild( (Hgt * Wd), Az, TiltAngle, RefZ, 5, Hgt, 0, RefX, RefY )  }
		// CreatePolyLoopChild( Area, Azimuth, Tilt, Z, PolyType (4=Shade), Height, Shape (0-Rect/1-Oct), Lower-Left X,Y )

   "Set PVArray:PolyLpRef"   PVArray:PolyLpRef  = {
         if (IfValidAnd( PolyLpIdx >= 0 )==0) then  UNDEFINED
         else  CompName( PolyLp, PolyLpIdx+1 )  endif  }
END
;*************************************************************************
RULELIST "Init_PolyLp"  1 0 0 1
;*************************************************************************
   "Default PolyLp data"   ; for any not yet initialized
      PolyLp:Area  = {  if (LocalStatus(Area) > 0) then  UNCHANGED
                        else  InitializePolyLoop()  endif  }
END
;*************************************************************************


;*************************************************************************
;*************************************************************************

ENDFILE
