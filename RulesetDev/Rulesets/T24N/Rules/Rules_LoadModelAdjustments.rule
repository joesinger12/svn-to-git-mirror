// Rules to force certain changes to inputs for backward compatibility
//
// -------------------------------------------------------------------------
//  Copyright (c) 2012-2017, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------
//


; SAC 8/15/17 - new rulelist to handle model adjustments immediately following LoadModel (project file open) action
;*************************************************************************
RULELIST "LoadModelAdjustments" 1 0 0 0
;*************************************************************************
; RES DHW REMOVAL
;   ; SAC 8/15/17 - rule to transfer user-defined AirSrcHtPumpType -> new HPWHBrand & HPWHModel properties (tic #829)
;   "Backward compat for AirSrcHtPumpType"   ResWtrHtr:Action  = {
;         if (LocalStatus( AirSrcHtPumpType ) > 4)
;         then  EvalRulelist( "BackwardCompat_AirSrcHtPumpType_to_HPWHModel", 1 )
;         else  UNCHANGED  endif  }
         
   ; DR 8/25/17 - rule to reset ThrmlZn:VentStd for the current ruleset
   "Backward compat for VentStd"   ThrmlZn:Action  = {
         if ( IfValidAnd( VentStd = "T24-2013" ) )
         then ; VentStd is defined as 2013
           EvalRulelist( "BackwardCompat_VentStd", 1 )
         else
           UNCHANGED
         endif  }

   ; JP 12/7/2022 - backward compat rules to reset Very Valuable Display Case Allowance when no available
   "Backward compat for IntLtgSys:AllowType"  IntLtgSys:Action  = {
        if( IfValidAnd( Parent( SpcFunc ) != "Museum Area (Exhibition/Display)" ) .AND.
            IfValidAnd( Parent( SpcFunc ) != "Religious Worship Area" ) .AND.
            IfValidAnd( Parent( SpcFunc ) != "Retail Sales Area (Retail Merchandise Sales)" ) .AND.
            EnumValue( AllowType ) = 115 )
        then EvalRulelist( "BackwardCompat_VeryValuableDisplayCaseNotAllowa", 1 )
        else UNCHANGED
        endif }

   ; LH 12/21/2017 - backward compat rules to reset Tailored Method lighting inputs when no longer allowed
   "Backward compat for IntLtgSys:AllowType"  IntLtgSys:Action  = {
        if( IfValidAnd( Parent( IntLtgSpecMthd ) = "TailoredMethod" ) .AND.
            ParentComponentType() = "Spc" )
        then if( ParentStatus( SpcFunc ) > 4 .AND.
                 IfValidAnd( Parent( SpcFunc ) = 
                             "Lounge, Breakroom, or Waiting Area" ) )
          then EvalRulelist( "BackwardCompat_AlowType", 1 )
          else if( ParentCompAssigned( SpcFuncDefaultsRef ) )
          then if( IfValidAnd( SpcFuncDefaultsRef:SpcFunc = 
                               "Lounge, Breakroom, or Waiting Area" ) )
            then EvalRulelist( "BackwardCompat_AlowType", 1 )
            else UNCHANGED
            endif
          else UNCHANGED
          endif endif
        else
          UNCHANGED
        endif }

   ; LH 12/21/2017 - backward compat rules to reset Tailored Method lighting inputs when no longer allowed
   "Backward compat for Spc:IntLtgSpecMthd"  Spc:Action  = {
        if( IfValidAnd( IntLtgSpecMthd = "TailoredMethod" ) )
        then if( LocalStatus( SpcFunc ) > 4 .AND.
                 IfValidAnd( SpcFunc = "Lounge, Breakroom, or Waiting Area" ) ) 
          then EvalRulelist( "BackwardCompat_IntLtgSpecMthd", 1 )
          else if( LocalCompAssigned( SpcFuncDefaultsRef ) )
          then if( IfValidAnd( SpcFuncDefaultsRef:SpcFunc = "Lounge, Breakroom, or Waiting Area" ) )
            then EvalRulelist( "BackwardCompat_IntLtgSpecMthd", 1 )
            else UNCHANGED
            endif
          else UNCHANGED
          endif endif
        else
          UNCHANGED
        endif }

   ; LH 4/8/19 - backward compat rules to reset VRFSys DefCtrl
   "Backward compat for VRFSys:DefCtrl"  VRFSys:Action  = {
        if( LocalStatus( DefCtrl ) > 4 )
        then EvalRulelist( "BackwardCompat_DefCtrl", 1 )
        else UNCHANGED
        endif }

   ; LH 4/8/19 - backward compat rules to reset VRFSys DefHtrCap
   "Backward compat for VRFSys:DefHtrCap"  VRFSys:Action  = {
        if( LocalStatus( DefHtrCap ) > 4 )
        then EvalRulelist( "BackwardCompat_DefHtrCap", 1 )
        else UNCHANGED
        endif }

; RES DHW REMOVAL
;   ; SAC 2/2/20 - blast old DHW SSF stuff - w/ warning to user (log) (tic #3157)
;   "Remove w/ warning - ResDHWSys:AnnualSolFrac"  ResDHWSys:Action  = {
;        if( LocalStatus( AnnualSolFrac ) > 4 )
;        then  EvalRulelist( "BlastInput_ResDHWSys_AnnualSolFrac", 1 )
;        else  UNCHANGED  endif }
;
;   ; SAC 2/2/20 - blast old DHW solar reporting stuff - w/ warning to user (log) (tic #3157)
;   "Remove w/ warning - ResDHWSys:AnnualSolFrac"  ResDHWSys:Action  = {
;        if( LocalStatus( Manufacturer   ) > 4 .OR. LocalStatus( SolFracFluidSysName         ) > 4 .OR. 
;            LocalStatus( Brand          ) > 4 .OR. LocalStatus( RatedEffCurveSlope          ) > 4 .OR. 
;            LocalStatus( ModelNum       ) > 4 .OR. LocalStatus( RatedEffCurveIntercept      ) > 4 .OR. 
;            LocalStatus( SRRCCertNum    ) > 4 .OR. LocalStatus( SolCollectorCnt             ) > 4 .OR. 
;            LocalStatus( CollectorType  ) > 4 .OR. LocalStatus( AngleFromTrueNorth          ) > 4 .OR. 
;            LocalStatus( Area           ) > 4 .OR. LocalStatus( SlopeFromHorizontal         ) > 4 .OR. 
;            LocalStatus( Fluid          ) > 4 .OR. LocalStatus( NameOfProgramUsed           ) > 4 .OR. 
;            LocalStatus( Version        ) > 4 .OR. LocalStatus( SecondaryTankVol            ) > 4 .OR. 
;            LocalStatus( WtrHtrTankVol  ) > 4 .OR. LocalStatus( NumOfIdenticalDwellingUnits ) > 4 .OR. 
;            LocalStatus( SolFracRpt     ) > 4 )
;        then  EvalRulelist( "BlastInput_ResDHWSys_SolarReporting", 1 )
;        else  UNCHANGED  endif }
;
;   "Transform old ResDHWSys:PumpBHP & Eff to roughly consistent RecircPumpPwr"   ResDHWSys:Action  =     ; SAC 2/12/20 (Res tic #862)
;      {  if (LocalStatus( PumpBHP ) > 4 .OR. LocalStatus( PumpEff ) > 4)
;         then  EvalRulelist( "TransformOld_ResDHWSys_RecircPump", 1 )
;         else  UNCHANGED  endif  }
;
;   "Replace ResDHWSys:CentralSys & DistType inputs w/ new CentralRecircType"     ResDHWSys:Action =      ; SAC 03/05/21
;      {  if (LocalStatus( CentralSys ) > 5 .OR. LocalStatus( DistType ) > 5)
;         then  EvalRulelist( "TransformOld_ResDHWSys_CentralSys_DistType", 1 )
;         else  UNCHANGED  endif  }
;
;   "Reset old NEEA & UEF HPWH flags if needed"     ResWtrHtr:Action =         ; SAC 02/25/21
;      {  if (ElementType != "Heat Pump") then  UNCHANGED
;         else if ((LocalStatus( HtPumpWtrHtrNEEARtd ) > 5 .OR. LocalStatus( IsUEFRtd ) > 5) .AND.
;                  LocalStatus( HPWHCat ) > 5)
;         then  EvalRulelist( "ResWtrHtr_HPWHFlagIssue", 1 )
;         else if (LocalStatus( HtPumpWtrHtrNEEARtd ) > 5 .OR. LocalStatus( IsUEFRtd ) > 5)
;         then  EvalRulelist( "ResWtrHtr_Force_HPWHCat_FromHPWHFlags", 1 )
;         else  UNCHANGED  endif endif endif  }

; had to move following rule into ModelBackwardCompat... rule block since defaulting has to be performed to ensure assignment of Spc:ResDHWSysRef - SAC 10/01/21
;  "debugging" ResSpcDHWFeatures:Action = { PostMessageToLog( "ResSpcDHWFeatures '%s': Proj:BldgEngyModelVersion=%g | ResDHWSysRef=%s | ResDHWSysRef:CompactDist=%s | UserSpecCompactDist=%g", Name, Proj:BldgEngyModelVersion, ValidOr( ResDHWSysRef:Name, "undefined" ), ValidOr( ResDHWSysRef:CompactDist, "undefined" ), ValidOr( UserSpecCompactDist, -1 ) ) }
;   "Hardwire ResSpcDHWFeatures:SpecFxtrDistances for old MFam models w/ compact distribution"   ResSpcDHWFeatures:Action =     ; SAC 10/01/21
;      {  if (IfValidAnd( Proj:BldgEngyModelVersion < 16 ) .AND.
;             ParentCompAssigned( ResDHWSysRef ))
;         then  if (ParentRef( ResDHWSysRef:CompactDist ) != "not compact" .AND.
;                   IfValidAnd( UserSpecCompactDist > 0 )==0)
;               then  EvalRulelist( "TransformOld_ResSpcDHWFeatures_SpecFxtrDistances", 1 )
;               else  UNCHANGED  endif
;         else  UNCHANGED  endif  }

;   "TESTING new Psych_HAProps() function"    Proj:Action =        ; SAC 05/25/21
;      {  EvalRulelist( "Test_Psych_HAProps" )  }

   "Backward compat for DOAS AirSys:ClgCtrl"  AirSys:Action  =
      { if( IfValidAnd( Type = "DOASCV" ) .OR. IfValidAnd( Type = "DOASVAV" ) )
        then 
          if( IfValidAnd( ClgCtrl = "NoSATControl" ) .OR.
              IfValidAnd( ClgCtrl = "Scheduled" ) .OR.
              IfValidAnd( ClgCtrl = "OutsideAirReset" ) .OR.
              IfValidAnd( ClgCtrl = "FixedDualSetpoint" ) .OR.
              IfValidAnd( ClgCtrl = "ScheduledDualSetpoint" ) )
         then UNCHANGED
         else EvalRulelist( "BackwardCompat_AirSys_DOASClgCtrl", 1 )
         endif 
       else UNCHANGED
       endif }

   "Backward compat for PVArray:CalFlexibleInstall"     PVArray:Action =      ; APB 04/22/22 - Port CBECC-Res PV inputs (tic #3352) 
      {  if (LocalStatus( CalFlexibleInstall ) > 5 )
         then  EvalRulelist( "BackwardCompat_PVArray_CalFlexibleInstall", 1 )
         else  UNCHANGED  endif  }

   ; revised rule logic to take into account HVACSysStatus - SAC 06/27/23 (tic #3479)
   "Backward compat for ResOtherZn if an AirSystem is assigned."  ResOtherZn:Action  =
      { if( ( (HVACSysStatus == "New"      .AND. LocalCompAssigned(  ozHVACSystem ) = ComponentType ("AirSys" )) .OR.
              (HVACSysStatus == "Altered"  .AND. LocalCompAssigned( AltHVACSystem ) = ComponentType ("AirSys" )) .OR.
              (HVACSysStatus == "Existing" .AND. LocalCompAssigned(  exHVACSystem ) = ComponentType ("AirSys" )) ) .AND.
            ( LocalCompAssigned( IAQFanRef[1] ) .OR. 
              LocalCompAssigned( IAQFanRef[2] ) .OR. 
              LocalCompAssigned( IAQFanRef[3] ) .OR. 
              LocalCompAssigned( IAQFanRef[4] ) .OR. 
              LocalCompAssigned( CentralVentSysRef ) ) )
        then EvalRulelist( "Blast_ResOtherZnIAQ_forAirSys", 1 )
        else UNCHANGED
        endif }

   "Backward compat for MFam IAQ FID & Accessibility input at ResProj level." DwellUnitType:Action =
      { if( IfValidAnd( Proj:ResDwellUnits > 0 ) .AND.
            ( GlobalStatus( ResProj:IAQSupInletsAccessible ) > 4 .OR. GlobalStatus( ResProj:IAQHasFID ) > 4 ))
        then EvalRulelist( "Set_IAQFIDandAccessible_forDwellUnitType", 1 )
        else UNCHANGED
        endif }
   "Hard coded ResProj IAQ FID & Accessibility to 1 for MFam." ResProj:Action = 
      { if( IfValidAnd( Proj:ResDwellUnits > 0 ) .AND.
            ( GlobalStatus( ResProj:IAQSupInletsAccessible ) > 4 .OR. GlobalStatus( ResProj:IAQHasFID ) > 4 ))
        then EvalRulelist( "Set_MFamIAQFIDandAccessible", 1 )
        else UNCHANGED
        endif }

   "Reset important properties of AirSystem if it serves a ResOtherZn."  AirSys:Action  =
      { if( SumRevRef( ResOtherZn:ozHVACSystem, ResOtherZn:Area ) > 0 )
        then EvalRulelist( "Resets_ForResAirSys", 1 )
        else UNCHANGED
        endif }

   "Hardwire ResClgSys:EffMetric for old models"    ResClgSys:Action =       ; SAC 10/06/22 (tic #3431)
      {  if (IfValidAnd( Proj:BldgEngyModelVersion < 17 ) .AND. LocalStatus( EffMetric ) < 5)
         then  EvalRulelist( "TransformOld_ResClgSys_EffMetric", 1 )
         else  UNCHANGED  endif  }
   "Hardwire ResHtPumpSys:EffMetric for old models"  ResHtPumpSys:Action = 
      {  if (IfValidAnd( Proj:BldgEngyModelVersion < 17 ) .AND. LocalStatus( EffMetric ) < 5)
         then  EvalRulelist( "TransformOld_ResHtPumpSys_EffMetric", 1 )
         else  UNCHANGED  endif  }

; moved to ModelBackwardCompatibility.rule
;   "dbg" Proj:Action = { MessageBox( "AnalVer %g / WthrSta %g", ValidOr( AnalysisVersion, -9 ), EnumValue(WeatherStation) ) }
;   "Reset Proj:WeatherStation if necessary ('25)"  Proj:Action  =
;      { if( IfValidAnd( AnalysisVersion >= 250000 ) .AND.
;            (EnumValue( WeatherStation ) < 250000 .OR. EnumValue( WeatherStation ) >= 260000) )
;        then EvalRulelist( "ForceReset_Proj_WeatherStation", 1 )
;        else UNCHANGED
;        endif }

   "reset Attic:Status of 'Altered Roof Surface' to Altered for 2022+ analysis"     Attic:Action =    ; SAC 01/09/23 (tic #1302) - SAC 07/01/23 (tic #3479)
      {  if (EnumValue( Status ) == 4)
         then  EvalRulelist( "ForceUpdate_Attic_Status_AlteredRoofSurface", 1 )
         else  UNCHANGED  endif  }

   "force CommunitySolar OFF for highrise or non-res models"   Proj:Action =     ; SAC 07/17/23
      {  if ( IfValidAnd( UseCommunitySolar > 0 ) .AND. 
              (IfValidAnd( ResDwellUnits > 0 )==0 .OR. IfValidAnd( Bldg:AboveGrdStoryCnt >= 4 )) )
         then  EvalRulelist( "ForceReset_Proj_UseCommunitySolar" )
         else  UNCHANGED  endif  }


; ^^^^ Insert additional model adjustment rules above ^^^^


END
;*************************************************************************
;   END of 'LoadModelAdjustments' rulelist. Dependent rulelists below
;*************************************************************************






;*************************************************************************
;   Start of dependent rulelists for 'LoadModelAdjustments' rulelist. 
;*************************************************************************

;*************************************************************************
RULELIST "ForceReset_Proj_WeatherStation" 1 0 0 0
   "post warning to log"  Proj:Action = { PostMessageToLog( "Warning:  Proj:WeatherStation replaced with 2025 code default" )  }
   "Set valid Proj:WeatherStation"     Proj:WeatherStation  = {  EnsureSymbolExists()  }
END
;*************************************************************************

;*************************************************************************
RULELIST "ForceDefault_CodeVersion_RptGenUI" 1 0 0 0
	"Blast Proj:RptGenUIVer"     	Proj:RptGenUIVer     	= {	UNDEFINED  }
	"Blast Proj:RptGenUIApp"     	Proj:RptGenUIApp     	= {	UNDEFINED  }
   "Redefault RptGenUI properties"  Proj:Action  = {  EvalRulelist( "rl_DEFAULT" )  }
END
;*************************************************************************

;*************************************************************************
RULELIST "BackwardCompat_AirSrcHtPumpType_to_HPWHModel"  1 0 1 1
; RES DHW REMOVAL
;   "Set ResWtrHtr:HPWHBrand"     ResWtrHtr:HPWHBrand  = {
;      switch (AirSrcHtPumpType)
;         case  "AO Smith PHPT 60" :  "A. O. Smith"    
;         case  "AO Smith PHPT 80" :  "A. O. Smith"    
;         case  "AO Smith HPTU 50" :  "A. O. Smith"    
;         case  "AO Smith HPTU 66" :  "A. O. Smith"    
;         case  "AO Smith HPTU 80" :  "A. O. Smith"    
;         case  "GE2014 50"        :  "GE"
;         case  "GE2014 80"        :  "GE"
;         case  "Rheem HB 50"      :  "Rheem"          
;         case  "Stiebel 220E"     :  "Stiebel Eltron" 
;         default                  :  "- select Brand -"
;      endswitch  }
;   "Set ResWtrHtr:HPWHModel"     ResWtrHtr:HPWHModel  = {
;      switch (AirSrcHtPumpType)
;         case  "AO Smith PHPT 60" :  "PHPT 60  (60 gal)"                 
;         case  "AO Smith PHPT 80" :  "PHPT 80  (80 gal)"                 
;         case  "AO Smith HPTU 50" :  "HPTU 50 120  (50 gal)"             
;         case  "AO Smith HPTU 66" :  "HPTU 66 120  (66 gal)"             
;         case  "AO Smith HPTU 80" :  "HPTU 80 120  (80 gal)"             
;         case  "GE2014 50"        :  "GEH50DEEJSC  (50 gal)"             
;         case  "GE2014 80"        :  "GEH80DEEJSC  (80 gal)"             
;         case  "Rheem HB 50"      :  "HB50RH  (50 gal)"                  
;         case  "Stiebel 220E"     :  "Accelera 220 E  (58 gal)"          
;         default                  :  "- select Model -"
;      endswitch  }
;   "Blast ResWtrHtr:AirSrcHtPumpType"    ResWtrHtr:AirSrcHtPumpType   = {  UNDEFINED  }
END
;*************************************************************************

;*************************************************************************
RULELIST "BackwardCompat_VentStd"  1 0 1 1
   "Set ThrmlZn:VentStd"                 ThrmlZn:VentStd              = { "UNDEFINED" }
   ""                                    ThrmlZn:Action   = {
     PostWarning("The VentilationStandard defined for ThermalZone '%s' was not
                  compatible with the current ruleset and has been reset.",
                  Name ) }
END
;*************************************************************************

RULELIST "BackwardCompat_AlowType"  1 0 1 1
   "Set IntLtgSys:AllowType"             IntLtgSys:AllowType = { "UNDEFINED" }
   "Set IntLtgSys:AllowArea"             IntLtgSys:AllowArea = { "UNDEFINED" }
   "Set IntLtgSys:AllowQty"              IntLtgSys:AllowQty  = { "UNDEFINED" }
   "Set IntLtgSys:AllowLen"              IntLtgSys:AllowLen  = { "UNDEFINED" }
   "Post a Warning to the Log"           IntLtgSys:Action    = {
        PostWarning("In Interior Lighting System: '%s', the Tailored Additional
                     Allowance has been removed.  The Tailored Method is no 
                     longer allowed for the specified Space Function.",
                     Name ) }
END
;*************************************************************************

RULELIST "BackwardCompat_VeryValuableDisplayCaseNotAllowa"  1 0 1 1
   "Set IntLtgSys:AllowType"             IntLtgSys:AllowType = { UNDEFINED }
   "Set IntLtgSys:AllowArea"             IntLtgSys:AllowArea = { UNDEFINED }
   "Set IntLtgSys:AllowQty"              IntLtgSys:AllowQty  = { UNDEFINED }
   "Set IntLtgSys:AllowLen"              IntLtgSys:AllowLen  = { UNDEFINED }
   "Post a Warning to the Log"           IntLtgSys:Action    = {
        PostWarning("In Interior Lighting System: '%s', the specified additional 
                     allow type 'TailoredVeryValuableDisplayCaseAllowance'is not 
                     available for the specified Space Function. The allow type 
                     is reset to 'GeneralAllowance'", Name ) }
END

;*************************************************************************
RULELIST "BackwardCompat_IntLtgSpecMthd"  1 0 1 1
   "Set Spc:IntLtgSpecMthd"              Spc:IntLtgSpecMthd = { "AreaCategoryMethod" }
   "Post a Warning to the Log"           Spc:Action = {
        if( LocalStatus( SpcFunc ) > 4 )
        then
          PostWarning( "In Space: '%s', the Tailoired Method for determining lighting
                        power allowance is no longer allowed for Space Function '%s'.
                        IntLtgSpecMethod has been reset to 'AreaCategoryMethod'.",
                        Name, SpcFunc )
        else if( LocalStatus( SpcFuncDefaultsRef ) = 7  )
        then
          PostWarning( "In Space: '%s', the Tailoired Method for determining lighting
                       power allowance is no longer allowed for Space Function '%s'.
                       IntLtgSpecMethod has been reset to 'AreaCategoryMethod'.",
                       Name, SpcFuncDefaultsRef:SpcFunc ) 
        else 
          PostWarning("In Space: '%s', the Tailoired Method for determining lighting
                       power allowance is no longer allowed for the specified
                       Space Function.  IntLtgSpecMethod has been reset to 
                       'AreaCategoryMethod'.",
                       Name) 
        endif endif  }
END

;*************************************************************************

RULELIST "BackwardCompat_DefCtrl"  1 0 1 1
   "Set VRFSys:DefCtrl"                  VRFSys:DefCtrl = { "UNDEFINED" }
   "Post a Warning to the Log"           VRFSys:Action  = {
        PostWarning("In VRF System: '%s', the defrost control method has been 
                     reset.  User input is no longer permitted.",
                     Name ) }
END

;*************************************************************************

RULELIST "BackwardCompat_DefHtrCap"  1 0 1 1
   "Set VRFSys:DefHtrCap"                VRFSys:DefHtrCap = { "UNDEFINED" }
   "Post a Warning to the Log"           VRFSys:Action  = {
        PostWarning("In VRF System: '%s', the defrost heater capacity has been 
                     reset.  User input is no longer permitted.",
                     Name ) }
END


;************************************************************************* SAC 2/2/20 (tic #3157)
RULELIST "BlastInput_ResDHWSys_AnnualSolFrac"  1 0 1 1
; RES DHW REMOVAL
;   "Blast ResDHWSys:AnnualSolFrac"     ResDHWSys:AnnualSolFrac = { UNDEFINED }
;   "Post a Warning to the Log"         ResDHWSys:Action  = {
;        PostWarning("ResDHWSys '%s' had a user-specified solar Fraction, which is no longer supported. Describe and assign a DHWSolarSystem to model solar DHW savings.",
;                     Name ) }
END
;************************************************************************* SAC 2/2/20 (tic #3157)
RULELIST "BlastInput_ResDHWSys_SolarReporting"  1 0 1 1
; RES DHW REMOVAL
;   "Blast ResDHWSys:Manufacturer"                  ResDHWSys:Manufacturer                = { UNDEFINED }
;   "Blast ResDHWSys:SolFracFluidSysName"           ResDHWSys:SolFracFluidSysName         = { UNDEFINED }
;   "Blast ResDHWSys:Brand"                         ResDHWSys:Brand                       = { UNDEFINED }
;   "Blast ResDHWSys:ModelNum"                      ResDHWSys:ModelNum                    = { UNDEFINED }
;   "Blast ResDHWSys:SRRCCertNum"                   ResDHWSys:SRRCCertNum                 = { UNDEFINED }
;   "Blast ResDHWSys:CollectorType"                 ResDHWSys:CollectorType               = { UNDEFINED }
;   "Blast ResDHWSys:Area"                          ResDHWSys:Area                        = { UNDEFINED }
;   "Blast ResDHWSys:RatedEffCurveSlope"            ResDHWSys:RatedEffCurveSlope          = { UNDEFINED }
;   "Blast ResDHWSys:RatedEffCurveIntercept"        ResDHWSys:RatedEffCurveIntercept      = { UNDEFINED }
;   "Blast ResDHWSys:SolCollectorCnt"               ResDHWSys:SolCollectorCnt             = { UNDEFINED }
;   "Blast ResDHWSys:Fluid"                         ResDHWSys:Fluid                       = { UNDEFINED }
;   "Blast ResDHWSys:AngleFromTrueNorth"            ResDHWSys:AngleFromTrueNorth          = { UNDEFINED }
;   "Blast ResDHWSys:SlopeFromHorizontal"           ResDHWSys:SlopeFromHorizontal         = { UNDEFINED }
;   "Blast ResDHWSys:NameOfProgramUsed"             ResDHWSys:NameOfProgramUsed           = { UNDEFINED }
;   "Blast ResDHWSys:Version"                       ResDHWSys:Version                     = { UNDEFINED }
;   "Blast ResDHWSys:WtrHtrTankVol"                 ResDHWSys:WtrHtrTankVol               = { UNDEFINED }
;   "Blast ResDHWSys:SecondaryTankVol"              ResDHWSys:SecondaryTankVol            = { UNDEFINED }
;   "Blast ResDHWSys:NumOfIdenticalDwellingUnits"   ResDHWSys:NumOfIdenticalDwellingUnits = { UNDEFINED }
;   "Blast ResDHWSys:SolFracRpt"                    ResDHWSys:SolFracRpt                  = { UNDEFINED }
;   "Blast ResDHWSys:PlenumReport"                  ResDHWSys:PlenumReport                = { UNDEFINED }
;   "Blast ResDHWSys:OutsideReport"                 ResDHWSys:OutsideReport               = { UNDEFINED }
;   "Blast ResDHWSys:BuriedReport"                  ResDHWSys:BuriedReport                = { UNDEFINED }
;   "Blast ResDHWSys:SuppStorTankVol"               ResDHWSys:SuppStorTankVol             = { UNDEFINED }
;   "Post a Warning to the Log"         ResDHWSys:Action  = {
;        PostWarning("ResDHWSys '%s' had user-specified solar system reporting inputs, which are no longer supported. Describe and assign a DHWSolarSystem s a basis of solar reporting.",
;                     Name ) }
END
;*************************************************************************

;************************************************************************* SAC 2/12/20 (Res tic #862)
RULELIST  "TransformOld_ResDHWSys_RecircPump"  1 0 1 1
   "Post transform message to project log"   ResDHWSys:Action  =
      {  if (LocalStatus( RecircPumpPwr ) > 4) then  UNCHANGED   ; no msg or transform if RecircPumpPwr already user-specified
         else if (IfValidAnd( PumpBHP = 0.5 ) .AND. IfValidAnd( PumpEff = 0.6 ))  ; old oversized defaults not overridden by user
         then  PostMessageToLog( "ResDHWSys '%s' updated to replace recirculation pump BHP & Efficiency with new Power (W) input of equivalent electric use. Recommend review of pump power as old defaults were found to be substantially too large.", Name )
         else  PostMessageToLog( "ResDHWSys '%s' updated to replace recirculation pump BHP & Efficiency with new Power (W) input of equivalent electric use.", Name )
         endif endif  }
   "Transform ResDHWSys:PumpBHP & PumpEff into RecircPumpPwr (if not already user-defined)"    ResDHWSys:RecircPumpPwr  =     ; SAC 2/12/20 - difference in Com that BHP or Eff may be undefined, so use default when one undefined
      {  if (LocalStatus( RecircPumpPwr ) > 4)
         then  UNCHANGED
         else  746 * ValidOr( PumpBHP, 0.5 ) / ValidOr( PumpEff, 0.6 )
         endif  }
; RES DHW REMOVAL
;   "Blast ResDHWSys:PumpBHP"     ResDHWSys:PumpBHP  = {  UNDEFINED  }
;   "Blast ResDHWSys:PumpEff"     ResDHWSys:PumpEff  = {  UNDEFINED  }
END
;*************************************************************************

;************************************************************************* SAC 03/05/21
RULELIST "TransformOld_ResDHWSys_CentralSys_DistType"  1 0 1 1
; RES DHW REMOVAL
;   "Post Warning if project included one of the no-longer-supported DistType options"    ResDHWSys:Action =
;      {  if (LocalStatus( DistType ) > 5 .AND. IfValidAnd( CentralSys > 0 ) .AND. EnumValue( DistType ) > 5056)
;         then  PostWarning( "ResDHWSys '%s' Distribution Type '%s' is no longer supported, switching to recirculation w/ continuous pumping.", Name, DistType )
;         else  UNCHANGED  endif  }
;   "Hardwire ResDHWSys:CentralRecircType based on CentralSys & DistType"     ResDHWSys:CentralRecircType =
;      {  if (IfValidAnd( CentralSys > 0 )==0) then    "Non-Central"
;         else if (LocalStatus( DistType ) <= 5) then  "Central with Recirculation"
;         else if (EnumValue( DistType ) > 0) then     "Central with Recirculation"
;         else                                         "Central, no Recirculation"
;         endif endif endif }
;   "Blast ResDHWSys:CentralSys"     ResDHWSys:CentralSys = {  UNDEFINED  }
;   "Blast ResDHWSys:DistType"       ResDHWSys:DistType   = {  UNDEFINED  }
END
;*************************************************************************

;************************************************************************* SAC 02/25/21 (Res tic #1260)
RULELIST  "ResWtrHtr_Default_HPWHFlags" 0 0 0 0
; RES DHW REMOVAL
;   ; default via enums - ResWtrHtr:HPWHCat
;   "Default ResWtrHtr:HtPumpWtrHtrNEEARtd"	ResWtrHtr:HtPumpWtrHtrNEEARtd =
;      {  if (ElementType == "Heat Pump" .AND. HPWHCat == "Residential (NEEA rated) Product") then  1  else  0  endif  }
;   "Default ResWtrHtr:IsUEFRtd - Whether or not DHW heater is a UEF-rated heat pump"   ResWtrHtr:IsUEFRtd =
;      {  if (ElementType == "Heat Pump" .AND. HPWHCat == "UEF Rated") then  1  else  0  endif  }
;   "Default ResWtrHtr:HPWHCommProd"	ResWtrHtr:HPWHCommProd =
;      {  if (ElementType == "Heat Pump" .AND. HPWHCat == "Commercial Product") then  1  else  0  endif  }
;;   "Reset HPWHBrand if not applicable"    ResWtrHtr:Action =            ; SAC 02/18/21
;;      {  if (LocalStatus( HPWHBrand ) > 5 .AND. HPWHBrand > 0 .AND.
;;             (ElementType != "Heat Pump" .OR. HtPumpWtrHtrNEEARtd < 1))
;;         then  EvalRulelist( "ResWtrHtr_Force_HPWHBrand_NA", 1 )
;;         else  UNCHANGED  endif  }
END
RULELIST  "ResWtrHtr_HPWHFlagIssue"  1 0 0 0
; RES DHW REMOVAL
;   "Post msg to log"    ResWtrHtr:Action = {  PostMessageToLog( "ResWtrHtr '%s' Error - HPWHCat and either/both HtPumpWtrHtrNEEARtd and IsUEFRtd user-specified. HPWHCat selection of '%s' will override other settings.", Name, HPWHCat )  }
;   "Reset HPWH flags"   ResWtrHtr:Action = {  EvalRulelist( "ResWtrHtr_Force_HPWHFlagReset", 1 )  }
END
RULELIST  "ResWtrHtr_Force_HPWHCat_FromHPWHFlags"  1 0 1 1
; RES DHW REMOVAL
;   "Set ResWtrHtr:HPWHCat based on HPWH flags"      ResWtrHtr:HPWHCat =            ; SAC 02/01/21 (tic #1260)
;      {  if (IfValidAnd( HtPumpWtrHtrNEEARtd > 0 ) .AND. LocalStatus( HtPumpWtrHtrNEEARtd ) > 5) then  "Residential (NEEA rated) Product"
;         else if (IfValidAnd( IsUEFRtd > 0 ) .AND. LocalStatus( IsUEFRtd ) > 5) then   "UEF Rated"
;         else  "Non-UEF Rated"
;         endif endif  }
;   "Reset HPWH flags"   ResWtrHtr:Action = {  EvalRulelist( "ResWtrHtr_Force_HPWHFlagReset", 1 )  }
END
RULELIST  "ResWtrHtr_Force_HPWHFlagReset"  1 0 0 0
; RES DHW REMOVAL
;   "Blast ResWtrHtr:HtPumpWtrHtrNEEARtd"	ResWtrHtr:HtPumpWtrHtrNEEARtd = {  UNDEFINED  }
;   "Blast ResWtrHtr:IsUEFRtd"    ResWtrHtr:IsUEFRtd    = {  UNDEFINED  }
END
;*************************************************************************

;************************************************************************* SAC 10/01/21
RULELIST  "TransformOld_ResSpcDHWFeatures_SpecFxtrDistances"  1 0 1 1
   "Hardwire ResSpcDHWFeatures:SpecFxtrDistances to 1 for old models"   ResSpcDHWFeatures:SpecFxtrDistances = {  1  }
END
;*************************************************************************

;************************************************************************* SAC 05/25/21
RULELIST  "Test_Psych_HAProps"  1 0 0 0
   " " Proj:Action = { PostMessageToLog( "Testing Psych_HAProps function:" ) }
   " " Proj:Action = { PostMessageToLog( "   Psych_HAProps(    DPT, DBT, 75 F, HumRat,  60 gr/lb ) = %g  (=? ~53)",  Psych_HAProps( "DPT",    "DBT", 75, "HumRat",  60 ) ) }
   " " Proj:Action = { PostMessageToLog( "   Psych_HAProps(    DPT, DBT, 95 F, HumRat, 100 gr/lb ) = %g  (=? ~67)",  Psych_HAProps( "DPT",    "DBT", 95, "HumRat", 100 ) ) }
   " " Proj:Action = { PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, HumRat,  60 gr/lb ) = %g  (=? ~.45)", Psych_HAProps(  "RH",    "DBT", 75, "HumRat",  60 ) ) }
   " " Proj:Action = { PostMessageToLog( "   Psych_HAProps( HumRat, DBT, 90 F, RH,    0.45       ) = %g  (=? ~95)",  Psych_HAProps( "HumRat", "DBT", 90, "RH",    0.45 ) ) }
   " " Proj:Action = { PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, DPT,     35 F     ) = %g  (=? ~.23)", Psych_HAProps(  "RH",    "DBT", 75, "DPT",     35 ) ) }
   " " Proj:Action = { PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, DPT,     35 F,  27 in.hg  ) = %g",    Psych_HAProps(  "RH",    "DBT", 75, "DPT",     35, 27 ) ) }
   " " Proj:Action = {  if (Psych_HAPropsValid(  "RH",    "DBT", 75, "WBT",     35 )==0)
                        then  PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, WBT,     35 F     ) (invalid result)" )
                        else  PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, WBT,     35 F     ) should have returned invalid result" )  endif  }
   " " Proj:Action = {  if (Psych_HAPropsValid(  "RH",    "DBT", 75, "DPT"         )==0)
                        then  PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, DPT               ) (too few args)" )
                        else  PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, DPT               ) should have returned too few args" )  endif  }
   " " Proj:Action = {  if (Psych_HAPropsValid(  "RH",    "DBT", 75, "DPT",     35, "Press" )==0)
                        then  PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, DPT,     35 F  Press   ) (invalid 6th arg)" )
                        else  PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, DPT,     35 F  Press   ) should have returned invalid 6th arg" )  endif  }
   " " Proj:Action = {  if (Psych_HAPropsValid(  "RH",    "DBT", 75, "DPT",     35, 27, 27 )==0)
                        then  PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, DPT,     35 F  27  27   ) (too many args)" )
                        else  PostMessageToLog( "   Psych_HAProps(     RH, DBT, 75 F, DPT,     35 F  27  27   ) should have returned too many args" )  endif  }
   " " Proj:Action = {  if (Psych_HAPropsValid(  "RH",    "DBT", -20, "WBT",     35 )==0)
                        then  PostMessageToLog( "   Psych_HAProps(     RH, DBT, -20 F, WBT,     35 F     ) (DBT too low)" )
                        else  PostMessageToLog( "   Psych_HAProps(     RH, DBT, -20 F, WBT,     35 F     ) should have returned DBT too low" )  endif  }
   " " Proj:Action = {  if (Psych_HAPropsValid(  "RH",    "DBT", 220, "WBT",     35 )==0)
                        then  PostMessageToLog( "   Psych_HAProps(     RH, DBT, 220 F, WBT,     35 F     ) (DBT too high)" )
                        else  PostMessageToLog( "   Psych_HAProps(     RH, DBT, 220 F, WBT,     35 F     ) should have returned DBT too high" )  endif  }
   " " Proj:Action = {  if (Psych_HAPropsValid(  "RH",    "DB",  75, "WBT",     35 )==0)
                        then  PostMessageToLog( "   Psych_HAProps(     RH, DB,   75 F, WBT,     35 F     ) (invalid 2nd arg)" )
                        else  PostMessageToLog( "   Psych_HAProps(     RH, DB,   75 F, WBT,     35 F     ) should have returned invalid 2nd arg" )  endif  }
END
;*************************************************************************

;*************************************************************************
RULELIST "BackwardCompat_AirSys_DOASClgCtrl"  1 0 1 1

   "Post message to log that ClgCtrl will be blasted"  AirSys:Action  = 
       { PostWarning("The AirSys '%s' is a DOAS system using one of the 'Warmest'
                      supply air temperature control options, which are no longer
                      valid. The control has been reset to 'NoSATControl'.",
                  Name ) }
   "Reset AirSys:ClgCtrl"                AirSys:ClgCtrl = { UNDEFINED }
END

;*************************************************************************
RULELIST "BackwardCompat_PVArray_CalFlexibleInstall"  1 0 1 1

   "Set PVArray:CalFlexibleInstallOpt"               PVArray:CalFlexibleInstallOpt = {
     switch CalFlexibleInstall
        case    0 : "n/a"
        default   : "CFI1"
      endswitch }
   "Reset PVArray:CalFlexibleInstall"                PVArray:CalFlexibleInstall = { UNDEFINED }
END
;*************************************************************************

;*************************************************************************
RULELIST "Blast_ResOtherZnIAQ_forAirSys"  1 0 1 1

   "Post message to log that IAQOption will be blasted."  ResOtherZn:Action =
       { PostWarning("ResidentialOtherZone '%s' is served by an AirSystem but has
                      an IAQ system specified. Ventilation/exhaust will be provided
                      by the AirSystem, so the IAQOption will be removed.", Name) }

   "Blast ResOtherZn:IAQOption"          ResOtherZn:IAQOption = { UNDEFINED }
   "Blast ResOtherZn:IAQFanRef"          ResOtherZn:IAQFanRef[1] = { UNDEFINED }
   "Blast ResOtherZn:IAQFanRef"          ResOtherZn:IAQFanRef[2] = { UNDEFINED }
   "Blast ResOtherZn:IAQFanRef"          ResOtherZn:IAQFanRef[3] = { UNDEFINED }
   "Blast ResOtherZn:IAQFanRef"          ResOtherZn:IAQFanRef[4] = { UNDEFINED }
   "Blast ResOtherZn:IAQFanCnt"          ResOtherZn:IAQFanCnt[1] = { UNDEFINED }
   "Blast ResOtherZn:IAQFanCnt"          ResOtherZn:IAQFanCnt[2] = { UNDEFINED }
   "Blast ResOtherZn:IAQFanCnt"          ResOtherZn:IAQFanCnt[3] = { UNDEFINED }
   "Blast ResOtherZn:IAQFanCnt"          ResOtherZn:IAQFanCnt[4] = { UNDEFINED }
END
;*************************************************************************

;*************************************************************************
RULELIST "Set_IAQFIDandAccessible_forDwellUnitType" 0 0 1 1
  "Set DwellUnitType:IAQHasFID"              DwellUnitType:IAQHasFID              = { ResProj:IAQHasFID }
  "Set DwellUnitTYpe:IAQSupInletsAccessible" DwellUnitType:IAQSupInletsAccessible = { ResProj:IAQSupInletsAccessible }
END
;*************************************************************************

;*************************************************************************
RULELIST "Set_MFamIAQFIDandAccessible" 1 0 1 1
  "Set ResProj:IAQHasFID"              ResProj:IAQHasFID              = { 1 }
  "Set ResProj:IAQSupInletsAccessible" ResProj:IAQSupInletsAccessible = { 1 }
END
;*************************************************************************

;*************************************************************************

;*************************************************************************
RULELIST "Resets_ForResAirSys"  1 0 1 1

   "Alert user that AirSys:Type needs to be set"  AirSys:Action =
       { if( Type != "SZAC" .AND.
             Type != "SZHP" .AND.
             Type != "SZDFHP" .AND.
             Type != "SPVAC" .AND.
             Type != "SPVHP" )
         then 
           PostWarning("AirSys '%s' serves a ResidentialOtherZone and requires
                        the Type to be set to a valid option. Please review and change 
                        to one of the available Type options.", Name)
         else UNCHANGED
         endif  }

   "Reset AirSys:Type"  AirSys:Type =
       { if( Type != "SZAC" .AND.
             Type != "SZHP" .AND.
             Type != "SZDFHP" .AND.
             Type != "SPVAC" .AND.
             Type != "SPVHP" )
          then UNDEFINED ; Enums will default to "- specify -"
          else UNCHANGED
          endif }

   "Alert user that AirSys:FanCtrl = Cycling is not supported"  AirSys:Action =
       { if( IfValidAnd( FanCtrl = "Cycling" ) )
         then
           PostWarning("AirSys '%s' serves a ResidentialOtherZone and has FanControl =
                       'Cycling'. This is not yet supported. This property will be reset and
                       defaulted to 'Continuous'.", Name)
         else UNCHANGED
         endif }

   "Reset AirSys:FanCtrl to Continuous"  AirSys:FanCtrl = ; Enums will default to "Continuous"
       { if( IfValidAnd( FanCtrl = "Continuous" ) = 0 ) then UNDEFINED else UNCHANGED endif } 

   "Alert user that AirSys:ClgCtrl option not supported"  AirSys:Action =
       { if( IfValidAnd( ClgCtrl != "NoSATControl" ) )
         then
           PostWarning("AirSys '%s' serves a ResidentialOtherZone and has supply air control
                       = '%s'. This is not yet supported. This property will be reset and
                       defaulted to 'NoSATControl'.", Name, ClgCtrl)
         else UNCHANGED
         endif }

   "Reset AirSys:ClgCtrl to NoSATControl"  AirSys:ClgCtrl = ; Enums will default to "NoSATControl"
       { if( IfValidAnd( ClgCtrl != "NoSATControl" ) ) then UNDEFINED else UNCHANGED endif }

   "Alert user that AirSys:CtrlSysType option is not supported"  AirSys:Action =
       { if( IfValidAnd( CtrlSysType = "DDCToZone" ) )
         then
           PostWarning("AirSys '%s' serves a ResidentialOtherZone and has control system type
                       = '%s'. This is not yet supported. This property will be reset and
                       defaulted to 'Other'.", Name, CtrlSysType )
         else UNCHANGED
         endif }

   "Reset AirSys:CtrlSysType"  AirSys:CtrlSysType = ; Enums will default to "Other"
       { if( IfValidAnd( CtrlSysType = "DDCToZone" ) ) then UNDEFINED else UNCHANGED endif }

   "Alert user that AirSys:OptStart option is not supported"  AirSys:Action =
       { if( IfValidAnd( OptStart = 1 ) )
         then
           PostWarning("AirSys '%s' serves a ResidentialOtherZone and has Optimum Start.
                        This is not supported. This property will be removed.", Name )
         else UNCHANGED
         endif }

   "Reset AirSys:OptStart"  AirSys:OptStart = 
       { if( IfValidAnd( OptStart = 0 ) = 0 ) then 0 else UNCHANGED endif }

END
;*************************************************************************

;************************************************************************* SAC 10/06/22 (tic #3431)
RULELIST  "TransformOld_ResClgSys_EffMetric"  1 0 1 1
   "Hardwire ResClgSys:EffMetric to old metrics for old models"    ResClgSys:EffMetric = {  1  }
END
;*************************************************************************
RULELIST  "TransformOld_ResHtPumpSys_EffMetric"  1 0 1 1
   "Hardwire ResHtPumpSys:EffMetric to old metrics for old models"  ResHtPumpSys:EffMetric = {  1  }
END
;*************************************************************************

;************************************************************************* SAC 01/09/23 (tic #1302) - SAC 07/01/23 (tic #3479)
RULELIST "ForceUpdate_Attic_Status_AlteredRoofSurface" 1 0 1 0
   "post message to log if pertinent"  Attic:Action =
      {  PostMessageToLog( "Warning:  Attic '%s' Status updated from 'Altered Roof Surface' to 'Altered' due to code changes starting in 2022.", Name )  }
   "force Attic:Status to Altered"    Attic:Status = {  "Altered"  }
END
;*************************************************************************

;************************************************************************* SAC 07/17/23
RULELIST "ForceReset_Proj_UseCommunitySolar" 1 0 0 0
   "post message to log"   Proj:Action = {  PostMessageToLog( "Warning:  UseCommunitySolar toggled OFF for non-res or highrise models." )  }
   "force reset of Proj:UseCommunitySolar"   Proj:UseCommunitySolar = {  UNDEFINED  }
END
;*************************************************************************


; ^^^^ Insert dependent rulelists above ^^^^

;*************************************************************************
ENDFILE


