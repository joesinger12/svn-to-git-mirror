// Rules to be processed following all transform simulations and compliance determination
//
// -------------------------------------------------------------------------
//  Copyright (c) 2012-2019, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------
//

; SAC 4/20/19 - new rulelist to perform any checks/adjustments after all transforms have been simulated and compliance result determined
;*************************************************************************
RULELIST "AnalysisPostProcessing" 1 0 0 0
;*************************************************************************
; "dbg" Proj:Action = { PostMessageToLog( "Evaluating 'AnalysisPostProcessing' rulelist - # EUseSummary objects = %g", ComponentCount( EUseSummary ) ) }

   "Evaluate rules to set EUseSummary:PVBattResultsValid flag"    Proj:Action =     ; SAC 9/13/19 (tic #3106)
      {  if (IfValidAnd( EngyCodeYearNum < 2019 )) then  UNCHANGED
         else  EvalRulelist( "SetUserDefined_PVBattResultsValid" )  endif  }

   "Evaluate rules to set EUseSummary:ComplyMessage for 2022+ models"   EUseSummary:Action =    ; SAC 12/13/21
      {  if (IfValidAnd( Proj:EngyCodeYearNum < 2022 )) then  UNCHANGED
         else  EvalRulelist( "SetUserDefined_ComplyMessage" )  endif  }

   "Evaluate rules to set EUseSummary:DHW_SSF_Summary[*]"   EUseSummary:Action =    ; SAC 9/17/20 (tic #3215)
      {  if (IfValidAnd( PropDHW_SSF[1] > 0 ) .OR.
             IfValidAnd( StdDHW_SSF     > 0 ))
         then  EvalRulelist( "SetUserDefined_DHW_SSF_Summary" )
         else  UNCHANGED  endif  }

   "Revise Analysis Results UI labels for 2025+ code vintage(s)"     EUseSummary:Action =       ; SAC 11/18/22
      {  if (IfValidAnd( Proj:EngyCodeYearNum < 2025 )) then  UNCHANGED
         else  EvalRulelist( "SetupResultsUILabels_25" )  endif  }

   "Evaluate rules to determine CALGreen result"   Proj:Action = 
      {  EvalRulelist( "CALGreen_Results" )  }

END
;*************************************************************************

;************************************************************************* ; SAC 9/13/19 (tic #3106)
RULELIST "SetUserDefined_PVBattResultsValid" 1 0 1 0
   "Set EUseSummary:PVBattResultsValid"      EUseSummary:PVBattResultsValid =    ; revised to look @ current (final) run PLUS ap run - SAC 05/26/22
      {  if (IfValidAnd( Proj:HavePVBattSim > 0 )) then  1
         else if (IfValidAnd( ap:Proj:HavePVBattSim > 0 )) then  1
         else  0  endif endif  }
;"dbg" EUseSummary:Action = { PostMessageToLog( "   EUseSummary '%s' PVBattResultsValid = %g", Name, PVBattResultsValid ) }  ; SAC 11/03/21 (MFam)
END
;*************************************************************************

;************************************************************************* ; SAC 12/13/21
RULELIST "SetUserDefined_ComplyMessage" 1 0 1 0
   "Set EUseSummary:ComplyMessage"     EUseSummary:ComplyMessage =
      {  if (     IfValidAnd( PassFail == "PASS"      )) then  "COMPLIES"
         else if (IfValidAnd( PassFail == "FAIL"      )) then  "DOES NOT COMPLY"
         else if (IfValidAnd( PassFail == "FAIL-UMLH" )) then  "DOES NOT COMPLY (UMLH)"
         else  UNDEFINED  endif endif endif  }

   "Set EUseSummary:StdPVBatteryMsg"   EUseSummary:StdPVBatteryMsg =
      {  if (GlobalCompAssigned( Proj:T24PVArrayRef ) < 1 .OR.
             IfValidAnd( Proj:T24PVSize > 0.1 )==0)
         Then  "No Standard Design PV/Battery included in analysis"
         else  if (GlobalCompAssigned( Proj:T24BattRef ) < 1 .OR.
                   IfValidAnd( Proj:T24BattEngyCap > 0.1 )==0)
               then  Format( "Standard Design PV Capacity: %s kWdc  /  (no battery)", FltToStr( Proj:T24PVSize, 1 ) )
               else  Format( "Standard Design PV Capacity: %s kWdc  /  Battery System Capacity: %s kWh  (power %s kW)",
                              FltToStr( Proj:T24PVSize, 1 ), FltToStr( Proj:T24BattEngyCap, 1 ), FltToStr( Proj:T24BattPwrCap, 2 ) )
               endif
         endif  }
   "Set EUseSummary:CommunitySolMsg"   EUseSummary:CommunitySolMsg =       ; SAC 06/04/22
      {  if (IfValidAnd( CommunitySlrPVPwr > 0 ))
         then  Format( "PV System sized at %.2f kWdc for Community Solar project '%s'", CommunitySlrPVPwr, EnumString( Proj:CommunitySolarProject ) )
         else  UNDEFINED  endif  }

   "Set EUseSummary:HideCompSmrySrc"   EUseSummary:HideCompSmrySrc =       ; SAC 06/01/23 (tic #3521)
      {  if (IfValidAnd( Proj:InclSrcEngyInCompTest > 0 )) then  0  else  1  endif  }
   "Set EUseSummary:HideCompSmryTot"   EUseSummary:HideCompSmryTot =       ; SAC 06/01/23 (tic #3521)
      {  if (IfValidAnd( Proj:DisableAllPVBattRequirements > 0 )) then  1  else  0  endif  }
END
;*************************************************************************

;*************************************************************************   SAC 9/17/20 - ported from Res: CARes_ReportDHWSSF (tic #3215)
RULELIST "SetUserDefined_DHW_SSF_Summary" 1 0 1 1
   "Set EUseSummary:DHW_SSF_Summary[1]"     EUseSummary:DHW_SSF_Summary[1] = {  "DHW SSF:"  }
   "Set EUseSummary:DHW_SSF_Summary[2]"     EUseSummary:DHW_SSF_Summary[2] =
      {  if (IfValidAnd( PropDHW_SSF[1] > 0 ))
         then  Format( "%.2f", PropDHW_SSF[1] )
         else if (IfValidAnd( StdDHW_SSF > 0 ))
         then  Format( "%.2f", StdDHW_SSF )
         else  UNDEFINED  endif endif  }
   "Set EUseSummary:DHW_SSF_Summary[3]"     EUseSummary:DHW_SSF_Summary[3] =
      {  if (IfValidAnd( PropDHW_SSF[1] > 0 ) .AND.
             IfValidAnd( StdDHW_SSF > 0 ))
         then  Format( "%.2f", StdDHW_SSF )
         else  UNDEFINED  endif  }
END
;*************************************************************************


;*************************************************************************   SAC 11/18/22
RULELIST "SetupResultsUILabels_25" 1 0 1 1

   "Set EUseSummary:Enduse14[1]"    EUseSummary:Enduse14[1] = {  "Battery Storage"  }
   "Set EUseSummary:Enduse15[1]"    EUseSummary:Enduse15[1] = {  "Project Total"  }
   "Set EUseSummary:Enduse11[1]"    EUseSummary:Enduse11[1] = {  "Other Lighting"  }


   "Set EUseSummary:Title1[2]"      EUseSummary:Title1[2]   = {  "Proposed Design"  }
   "Set EUseSummary:Title2[2]"      EUseSummary:Title2[2] = {  "Site Elec."  }
   "Set EUseSummary:Title3[2]"      EUseSummary:Title3[2] = {  "(MWh/yr)"   }
   "Set EUseSummary:Title2[3]"      EUseSummary:Title2[3] = {  "Site Gas"   }
   "Set EUseSummary:Title3[3]"      EUseSummary:Title3[3] = {  "(MBtu/yr)"  }
   "Set EUseSummary:Title2[4]"      EUseSummary:Title2[4] = {  Proj:CompMetricLbl_Short + "¹"  }   ; SAC 01/26/23
;   "Set EUseSummary:Title3[4]"      EUseSummary:Title3[4] = {  "(/yr)"  }

   "Set EUseSummary:Title1[5]"      EUseSummary:Title1[5]   = {  "Standard Design"  }
   "Set EUseSummary:Title2[5]"      EUseSummary:Title2[5] = {  "Site Elec."  }
   "Set EUseSummary:Title3[5]"      EUseSummary:Title3[5] = {  "(MWh/yr)"   }
   "Set EUseSummary:Title2[6]"      EUseSummary:Title2[6] = {  "Site Gas"   }
   "Set EUseSummary:Title3[6]"      EUseSummary:Title3[6] = {  "(MBtu/yr)"  }
   "Set EUseSummary:Title2[7]"      EUseSummary:Title2[7] = {  Proj:CompMetricLbl_Short + "¹"  }
;   "Set EUseSummary:Title3[7]"      EUseSummary:Title3[7] = {  "(/yr)"  }

   "Set EUseSummary:Title1[17]"      EUseSummary:Title1[17]   = {  "Proposed Design Emissions"  }    
   "Set EUseSummary:Title2[17]"      EUseSummary:Title2[17]   = {  "Electricity"  }    
   "Set EUseSummary:Title3[17]"      EUseSummary:Title3[17]   = {  "(tonnes of CO2)"  }  
   "Set EUseSummary:Title2[18]"      EUseSummary:Title2[18]   = {  "Fuel"  }    
   "Set EUseSummary:Title3[18]"      EUseSummary:Title3[18]   = {  "(tonnes of CO2)"  }  
   "Set EUseSummary:Title2[19]"      EUseSummary:Title2[19]   = {  "Total"  }    
   "Set EUseSummary:Title3[19]"      EUseSummary:Title3[19]   = {  "(tonnes of CO2)"  }  

   "Set EUseSummary:Title1[20]"      EUseSummary:Title1[20]   = {  "Standard Design Emissions"  }    
   "Set EUseSummary:Title2[20]"      EUseSummary:Title2[20]   = {  "Electricity"  }    
   "Set EUseSummary:Title3[20]"      EUseSummary:Title3[20]   = {  "(tonnes of CO2)"  }  
   "Set EUseSummary:Title2[21]"      EUseSummary:Title2[21]   = {  "Fuel"  }    
   "Set EUseSummary:Title3[21]"      EUseSummary:Title3[21]   = {  "(tonnes of CO2)"  }     
   "Set EUseSummary:Title2[22]"      EUseSummary:Title2[22]   = {  "Total"  }    
   "Set EUseSummary:Title3[22]"      EUseSummary:Title3[22]   = {  "(tonnes of CO2)"  }     

   "Set EUseSummary:Title1[23]"      EUseSummary:Title1[23]   = {  "Emissions Margin"  }    
   "Set EUseSummary:Title2[23]"      EUseSummary:Title2[23]   = {  "Total"  }    
   "Set EUseSummary:Title3[23]"      EUseSummary:Title3[23]   = {  "(tonnes of CO2)"  }  
     
   "Set EUseSummary:Title2[11]"     EUseSummary:Title2[11] = {  "Source"   }
   "Set EUseSummary:Title2[12]"     EUseSummary:Title2[12] = {  "Source"   }
   "Set EUseSummary:Title1[8]"      EUseSummary:Title1[8] = {  "Compliance Margins"  }
   "Set EUseSummary:Title2[8]"      EUseSummary:Title2[8] = {  Proj:CompMetricLbl_Short + "¹"  }   
   "Set EUseSummary:Title2[13]"     EUseSummary:Title2[13] = {  "Source"  }

   ; added PV & Battery Prop & Std model data - SAC 11/21/22
   ; "Set EUseSummary:PropPV_Size"    EUseSummary:PropPV_Size    = {  int((  SumAll( ap:PVArray:DCSysSize ) * 100) + 0.5) / 100  }
   "Set EUseSummary:PropPV_Size"    EUseSummary:PropPV_Size    =
      {  if (IfValidAnd( ap:Proj:CommunitySolarProjID > 0 ))
         then  int(( ValidOr( ap:Proj:PrscrpPVSize,  0 ) * 100) + 0.5) / 100
         else  int(( SumAll( ap:csePVARRAY:pvDCSysSize ) * 100) + 0.5) / 100    endif  }
   "Set EUseSummary:PropPV_SizeMsg" EUseSummary:PropPV_SizeMsg =
      {  if (IfValidAnd( ap:Proj:UseReducedPVReqVal >= 0 ) .AND. IfValidAnd( ap:Proj:DCSizeMultiplier < 1 ))
         then  "(reduced PV requirement)"
         else if (IfValidAnd( ap:Proj:CommunitySolarProjID > 0 ))
         then  "(community solar)"
         else  UNDEFINED  endif endif  }
   "Set EUseSummary:PropBatt_Size"  EUseSummary:PropBatt_Size = {  int((  SumAll( ap:Batt:MaxCap ) * 10) + 0.5) / 10  }
   "Set EUseSummary:PropBatt_Pwr"   EUseSummary:PropBatt_Pwr  = {  int(( (SumAll( ap:Batt:MaxChrgPwr ) + SumAll( ap:Batt:MaxDschrgPwr )) * 100) + 0.5) / 200  }
   "Set EUseSummary:PropBatt_Ctrl"  EUseSummary:PropBatt_Ctrl = {  if (IfValidAnd( PropBatt_Size > 0 )==0) then  UNDEFINED
                                                                   else  switch (MaxAll( ap:Batt:Ctrl ))
                                                                            case   1 : "Basic"
                                                                            case  10 : "Time of Use"
                                                                            case  11 : "Advanced DR Control"
                                                                            default  :  UNDEFINED
                                                                         endswitch  endif  }      ; SAC 03/11/24 (tic #3579)

   "Set EUseSummary:StdPV_Size"     EUseSummary:StdPV_Size    = {  int((  SumAll( ab:PVArray:DCSysSize ) * 100) + 0.5) / 100  }
   "Set EUseSummary:StdBatt_Size"   EUseSummary:StdBatt_Size  = {  int((  SumAll( ab:Batt:MaxCap ) * 10) + 0.5) / 10  }
   "Set EUseSummary:StdBatt_Pwr"    EUseSummary:StdBatt_Pwr   = {  int(( (SumAll( ab:Batt:MaxChrgPwr ) + SumAll( ab:Batt:MaxDschrgPwr )) * 100) + 0.5) / 200  }
   "Set EUseSummary:StdBatt_Ctrl"   EUseSummary:StdBatt_Ctrl  = {  if (GlobalStatus( ab:Batt:Ctrl ) > 0) then  ab:Batt:Ctrl  else  UNDEFINED  endif  }      ; SAC 03/11/24 (tic #3579)

END
;*************************************************************************



;************************************************************************* SAC 11/02/23
RULELIST "RunPostProcessing" 1 0 0 0
;*************************************************************************
;"dbg" Proj:Action = { PostMessageToLog( "Evaluating 'RunPostProcessing' rulelist for %s run - # EUseSummary objects = %g", RunAbbrev, ComponentCount( EUseSummary ) ) }

; not working as designed - no EUseSummary present when processing ap run and no Proposed hourly results available when processing ab run - SAC 11/03/23
;   "eval rules to store CustomMeterOption results"    Proj:Action =
;      {  if ( IfValidAnd( CustomMeterOption = 1 ) .AND. 
;              ((RunAbbrev == "ap" .AND. ComponentCount( EUseSummary ) > 0) .OR.
;               (RunAbbrev == "ab" .AND. LocalStatus( EUseSummaryRef:CSEMeterNames_ap[1] ) < 1)) )
;         then  EvalRulelist( "RunPostProcessing_PropResDwellingEnergy" )
;         else  UNCHANGED  endif  }

END
;*************************************************************************

; ;************************************************************************* SAC 11/02/23
; RULELIST "RunPostProcessing_PropResDwellingEnergy" 1 0 1 0
; ;*************************************************************************
; ;"dbg" Proj:Action = { PostMessageToLog( "Evaluating 'RunPostProcessing_PropResDwellingEnergy' rulelist for %s run - # EUseSummary objects = %g", RunAbbrev, ComponentCount( EUseSummary ) ) }
; 
;    "Set EUseSummary:CSEMeterNames_ap[1]"     EUseSummary:CSEMeterNames_ap[1]   = {  Proj:CSE_ElecMETERByRms[1]  }
;    "Set EUseSummary:CSEMeterNames_ap[2]"     EUseSummary:CSEMeterNames_ap[2]   = {  if (GlobalCompAssigned( Proj:CSE_NatGasMETERByRms[1] ))
;                                                                                     then  Proj:CSE_NatGasMETERByRms[1]
;                                                                                     else if (GlobalCompAssigned( Proj:CSE_OtherFuelMETERByRms[1] ))
;                                                                                     then  Proj:CSE_OtherFuelMETERByRms[1]
;                                                                                     else  Proj:CSE_ElecMETER   endif endif   }
; 
;    "Set EUseSummary:CSEMeterNames_ap[3]"     EUseSummary:CSEMeterNames_ap[3]   = {  if ( GlobalCompAssigned( Proj:CSE_NatGasMETERByRms[1] ) .OR.
;                                                                                          GlobalCompAssigned( Proj:CSE_OtherFuelMETERByRms[1]  ))
;                                                                                     then  Proj:CSE_ElecMETER
;                                                                                     else  Proj:CSE_Elec2METER   endif   }
; 
;    "Set EUseSummary:CSEMeterNames_ap[4]"     EUseSummary:CSEMeterNames_ap[4]   = {  if ( GlobalCompAssigned( Proj:CSE_NatGasMETERByRms[1] ) .OR.
;                                                                                          GlobalCompAssigned( Proj:CSE_OtherFuelMETERByRms[1]  ))
;                                                                                     then  Proj:CSE_Elec2METER
;                                                                                     else if (GlobalCompAssigned( Proj:CSE_NatGasMETER ))
;                                                                                     then  Proj:CSE_NatGasMETER
;                                                                                     else if (GlobalCompAssigned( Proj:CSE_OtherFuelMETER ))
;                                                                                     then  Proj:CSE_OtherFuelMETER
;                                                                                     else  UNDEFINED   endif endif endif   }
; 
;    "Set EUseSummary:CSEMeterNames_ap[5]"     EUseSummary:CSEMeterNames_ap[5]   = {  if ( GlobalCompAssigned( Proj:CSE_NatGasMETERByRms[1] ) .OR.
;                                                                                          GlobalCompAssigned( Proj:CSE_OtherFuelMETERByRms[1]  ))
;                                                                                     then  if (GlobalCompAssigned( Proj:CSE_NatGasMETER ))
;                                                                                           then  Proj:CSE_NatGasMETER
;                                                                                           else if (GlobalCompAssigned( Proj:CSE_OtherFuelMETER ))
;                                                                                           then  Proj:CSE_OtherFuelMETER
;                                                                                           else  UNDEFINED   endif endif
;                                                                                     else  UNDEFINED   endif  }
; 
;    "Set EUseSummary:CSEMeterMult_ap[1-5]"  for:#M=(1to5)  EUseSummary:CSEMeterMult_ap[#M]  =
;       {  if (LocalStatus( CSEMeterNames_ap[#M] ) < 1) then  UNDEFINED
;          else  1 /  max( 1, ValidOr( ResProj:NumDwellingUnits, 1 ) )
;          endif  }
;       ;   else if (find( CSEMeterNames_ap[#M], "Elec" ) > 0)
;       ;   then  1 / (max( 1, ValidOr( ResProj:NumDwellingUnits, 1 ) ) * 3.412)    - unit conversion done in source code
;       ;   else  1 /  max( 1, ValidOr( ResProj:NumDwellingUnits, 1 ) )
;       ;   endif endif  }
; 
;    "Set EUseSummary:CSEMeterResults_ap_1-5[1]-Tot"  for:#M=(1to5)  EUseSummary:CSEMeterResults_ap_#M[1]  =
;       {  if (LocalStatus( CSEMeterNames_ap[#M] ) < 1) then  UNDEFINED
;          else  HourlyResultSum( "Proposed", CSEMeterNames_ap[#M], "Tot" ) * CSEMeterMult_ap[#M]  endif  }
;    "Set EUseSummary:CSEMeterResults_ap_1-5[2]-Clg"  for:#M=(1to5)  EUseSummary:CSEMeterResults_ap_#M[2]  =
;       {  if (LocalStatus( CSEMeterNames_ap[#M] ) < 1) then  UNDEFINED
;          else  HourlyResultSum( "Proposed", CSEMeterNames_ap[#M], "Clg" ) * CSEMeterMult_ap[#M]  endif  }
; 
; 
; ; 1,           "CSEMeterMult_ap",      BEMP_Flt, 20,  1,  0,  Pres,  "",              0,  0,                              1046, "CSEMeterMult_ap",  "" 
; 
; 
; ; 1,           "CSEMeterNames_ap",     BEMP_Str, 20,  1,  0,  Pres,  "",              0,  0,                              1046, "CSEMeterNames_ap",  ""    ; SAC 11/02/23
; ; 1,           "CSEMeterResults_ap_1", BEMP_Flt, 25,  1,  0,  Pres,  "",              0,  0,                              1046, "CSEMeterResults_ap_1",  "" 
; ; 1,           "CSEMeterResults_ap_2", BEMP_Flt, 25,  1,  0,  Pres,  "",              0,  0,                              1046, "CSEMeterResults_ap_2",  "" 
; ; 1,           "CSEMeterResults_ap_3", BEMP_Flt, 25,  1,  0,  Pres,  "",              0,  0,                              1046, "CSEMeterResults_ap_3",  "" 
; ; 1,           "CSEMeterResults_ap_4", BEMP_Flt, 25,  1,  0,  Pres,  "",              0,  0,                              1046, "CSEMeterResults_ap_4",  "" 
; ; 1,           "CSEMeterResults_ap_5", BEMP_Flt, 25,  1,  0,  Pres,  "",              0,  0,                              1046, "CSEMeterResults_ap_5",  "" 
; ; 
; ; 
; ;    CSE_ElecMETER = RVal: "MtrElec"
; ;    CSE_Elec2METER = RVal: "MtrElec2"
; ;    CSE_NatGasMETER = RVal: "MtrNatGas"
; ; 
; ;    DwellUnitBedrmLabel[1] = RVal: "ResDwell"
; ;    CSE_ElecMETERByRms[1] = RVal: "MtrElec_ResDwell"
; ;    CSE_NatGasMETERByRms[1] = RVal: "MtrNatGas_ResDwell"
; 
; 
; END
; ;*************************************************************************


ENDFILE














