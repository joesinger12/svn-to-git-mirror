// HVAC Secondary Systems - Fans - Fan Ratios
//
// -------------------------------------------------------------------------
//  Copyright (c) 2013-2017, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------


//  This rule file addresses the following building descriptors:



// =========================== Thermal Zones ==================================
// --------------------------- Flow Ratios ------------------------------------
// Transfer supply flow from system to zone for both Pri & VentSys
RULE NEW ResOtherZn:PriAirCondgSysDsgnFlow
  DATATYPE
    Float
  LONGFORM
    PrimaryAirConditioningSystemDesignFlow
  INPUTCLASS
    NotInput
  UNITS
    cfm
  SIZING_PROPOSED
    if( IsCond = 1 .AND. HasUnknownHVAC = 0 )
    then
      if( LocalCompAssigned( ActiveHVACSystem ) = ComponentType( "AirSys" ) .AND.
           LocalCompAssigned( TrmlUnitRef ) )
      then ; Referenced System is an AirSys
        ActiveHVACSystem:SupFanCap * 
        ( TrmlUnitRef:PriAirFlowMaxSim / ActiveHVACSystem:TotTrmlPriAirFlowMaxSim )
      else 0
      endif
    else 0
    endif
  ANNUAL
    if( IsCond = 1 )
    then
      if( LocalCompAssigned( ActiveHVACSystem ) = ComponentType( "AirSys" ) .AND.
           LocalCompAssigned( TrmlUnitRef ) )
      then ; Referenced System is an AirSys
        ActiveHVACSystem:SupFanCap * 
        ( ValidOr( TrmlUnitRef:PriAirFlowMaxSim, 1 ) / max( ValidOr( ActiveHVACSystem:TotTrmlPriAirFlowMaxSim, 1 ), 1 ) )
      else 0
      endif
    else 0
    endif
ENDRULE
RULE NEW ResOtherZn:VentSysDsgnFlow
  DATATYPE
    Float
  LONGFORM
    VentilationSystemDesignAirFlow
  INPUTCLASS
    NotInput
  UNITS
    cfm
  DEFAULT
    0
;  DEFAULT
;    if( IsCond = 1 .AND. HasUnknownHVAC = 0 )
;    then
;      if( LocalCompAssigned( VentSysRef ) = ComponentType( "AirSys" ) .AND.
;          LocalCompAssigned( TrmlUnitRef ) .AND.
;          IfValidAnd( VentSysRef:Type != "Exhaust" ) )
;      then ; Referenced System is an AirSys
;        ValidOr( VentSysRef:SupFanCap, 0 ) * 
;        ( ValidOr( TrmlUnitRef:PriAirFlowMaxSim, 0 ) / max( ValidOr( VentSysRef:TotTrmlPriAirFlowMaxSim, 1 ), 1 ) )
;      else
;      if( LocalCompAssigned( VentSysRef ) = ComponentType( "ZnSys" ) .AND.
;          IfValidAnd( VentSysRef:Type != "Exhaust" ) )
;      then ; Referenced System is a ZnSys
;        VentSysRef:SupFanCap
;      else 0
;      endif endif
;    else 0
;    endif
;  SIZING_PROPOSED
;    if( IsCond = 1 .AND. HasUnknownHVAC = 0 )
;    then
;      if( LocalCompAssigned( VentSysRef ) = ComponentType( "AirSys" ) .AND.
;          LocalCompAssigned( TrmlUnitRef ) .AND.
;          IfValidAnd( VentSysRef:Type != "Exhaust" ) )
;      then ; Referenced System is an AirSys
;        ValidOr( VentSysRef:SupFanCap, 0 ) * 
;        ( ValidOr( TrmlUnitRef:PriAirFlowMaxSim, 0 ) / max( ValidOr( VentSysRef:TotTrmlPriAirFlowMaxSim, 1 ), 1 ) )
;      else
;      if( LocalCompAssigned( VentSysRef ) = ComponentType( "ZnSys" ) .AND.
;          IfValidAnd( VentSysRef:Type != "Exhaust" ) )
;      then ; Referenced System is a ZnSys
;        VentSysRef:SupFanCap
;      else 0
;      endif endif
;    else 0
;    endif
;  ANNUAL
;    if( IsCond = 1 )
;    then
;      if( LocalCompAssigned( VentSysRef ) = ComponentType( "AirSys" ) .AND.
;          LocalCompAssigned( TrmlUnitRef ) .AND.
;          IfValidAnd( VentSysRef:Type != "Exhaust" ) )
;      then ; Referenced System is an AirSys
;        ValidOr( VentSysRef:SupFanCap, 0 ) * 
;        ( ValidOr( TrmlUnitRef:PriAirFlowMaxSim, 0 ) / max( ValidOr( VentSysRef:TotTrmlPriAirFlowMaxSim, 1 ), 1 ) )        
;      else
;      if( LocalCompAssigned( VentSysRef ) = ComponentType( "ZnSys" ) .AND.
;          IfValidAnd( VentSysRef:Type != "Exhaust" ) )
;      then ; Referenced System is a ZnSys
;        VentSysRef:SupFanCap
;      else 0
;      endif endif
;    else 0
;    endif
ENDRULE
// Determine max of Pri/Vent flow to zone
RULE NEW ResOtherZn:MaxDsgnFlow
  DATATYPE
    Float
  LONGFORM
    MaximumDesignAirFlow
  INPUTCLASS
    NotInput
  UNITS
    cfm
  ANNUAL
    Max( ValidOr( PriAirCondgSysDsgnFlow, 0 ), 
         ValidOr( VentSysDsgnFlow, 0 ) )
ENDRULE
// Calculate ratio of air flow baseline:proposed 
RULE NEW ResOtherZn:BaseToPropDsgnSupFlowRat
  DATATYPE
    Float
  LONGFORM
    BaselineToProposedDesignFlowRatio
  INPUTCLASS
    NotInput
  UNITS
    cfm
  ANNUAL
    if( IfValidAnd( ap:MaxDsgnFlow > 0 ) )
    then PriAirCondgSysDsgnFlow / ap:MaxDsgnFlow
    else 0 
    endif
ENDRULE

// Calculate ratio zone:sys flow for each zone, for Pri/Vent/Exh
RULE NEW ResOtherZn:PriZnToSysFlowRat
  DATATYPE
    Float
  LONGFORM
    PrimaryZoneToSystemFlowRatio
  INPUTCLASS
    NotInput
  SIZING_PROPOSED
    if( IsCond = 1 .AND. HasUnknownHVAC = 0 .AND.
        LocalCompAssigned( ActiveHVACSystem ) )
    then 
      if( IfValidAnd( ActiveHVACSystem:SupFanCap > 0 ) )
      then PriAirCondgSysDsgnFlow / ActiveHVACSystem:SupFanCap
      else 0
      endif
    else 0
    endif
  ANNUAL
    if( IsCond = 1 .AND. HasUnknownHVAC > 0 .AND.
        LocalCompAssigned( ActiveHVACSystem ) )
    then 
      if( IfValidAnd( ActiveHVACSystem:SupFanCap > 0 ) )
      then PriAirCondgSysDsgnFlow / ActiveHVACSystem:SupFanCap
      else 0
      endif
    else z:PriZnToSysFlowRat
    endif    
ENDRULE
RULE NEW ResOtherZn:VentZnToSysFlowRat
  DATATYPE
    Float
  LONGFORM
    VentilationZoneToSystemFlowRatio
  INPUTCLASS
    NotInput
  SIZING
    0
;  SIZING_PROPOSED
;    if( IsCond = 1 .AND. HasUnknownHVAC = 0 .AND.
;        UniqueVentSysAssigned > 0 )
;    then
;      if( IfValidAnd( VentSysRef:SupFanCap > 0 ) .AND.
;          IfValidAnd( VentSysRef:IsExhSys = 0 ) )
;      then VentSysDsgnFlow / VentSysRef:SupFanCap
;      else 0
;      endif
;    else 0
;    endif
;  ANNUAL
;    if( IsCond = 1 .AND.
;        HasUnknownHVAC > 0 )
;    then 0 // VentSys is always same as PriAirCondgSys
;    else z:VentZnToSysFlowRat
;    endif
ENDRULE
RULE NEW ResOtherZn:ExhZnToSysFlowRat
  DATATYPE
    Float
  LONGFORM
    ExhaustZoneToSystemFlowRatio
  INPUTCLASS
    NotInput
  SIZING
;  SIZING_PROPOSED
;    if( IsCond = 1 .AND. HasUnknownHVAC = 0 .AND.
;        LocalCompAssigned( ExhSysRef ) )
;    then
;      if( IfValidAnd( ExhSysRef:ExhFanCap > 0 ) )
;      then ExhFlow / ExhSysRef:ExhFanCap
;      else 0
;      endif
;    else 0
;    endif
;  ANNUAL
;    if( IsCond = 1 .AND.
;        HasUnknownHVAC > 0 )
;    then 1 // ExhSys defined on a zone-by-zone basis
;    else z:ExhZnToSysFlowRat
;    endif   
ENDRULE


// --------------------------- Fan Powers -------------------------------------
// Allocate the prop fan power (in kW) to the ResOtherZn by multiplying the system 
// fan power by the ZnToSysFlowratio, for Pri/Vent/Total, 
// and by fan type (supply, return, and relief)
// These steps are not applicable to zones that HasUnknownHVAC

// Supply
RULE NEW ResOtherZn:PriSysPropSupFanPwr
  DATATYPE
    Float
  LONGFORM
    PrimarySystemProposedSupplyFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING_PROPOSED
    if( IsCond = 1 .AND. HasUnknownHVAC = 0 .AND.
        LocalCompAssigned( ActiveHVACSystem ) )
    then ValidOr( ActiveHVACSystem:SupFanPwr, 0 ) * PriZnToSysFlowRat
    else 0 
    endif    
  SIZING_BASELINE
    zp:PriSysPropSupFanPwr
ENDRULE
RULE NEW ResOtherZn:VentSysPropSupFanPwr
  DATATYPE
    Float
  LONGFORM
    VentilationSystemProposedSupplyFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING
    0
;  SIZING_PROPOSED
;    if( IsCond = 1 .AND. HasUnknownHVAC = 0 .AND.
;        LocalCompAssigned( VentSysRef ) )
;    then ValidOr( VentSysRef:SupFanPwr, 0 ) * VentZnToSysFlowRat
;    else 0 
;    endif    
;  SIZING_BASELINE
;    zp:VentSysPropSupFanPwr
ENDRULE
RULE NEW ResOtherZn:TotPropSupFanPwr
  DATATYPE
    Float
  LONGFORM
    TotalProposedSupplyFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  ANNUAL_PROPOSED
    PriSysPropSupFanPwr +
    VentSysPropSupFanPwr
  ANNUAL_BASELINE  
    ap:TotPropSupFanPwr
ENDRULE

// Return
RULE NEW ResOtherZn:PriSysPropRetFanPwr
  DATATYPE
    Float
  LONGFORM
    PrimarySystemProposedReturnFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING_PROPOSED
    if( IsCond = 1 .AND. HasUnknownHVAC = 0 .AND.
        LocalCompAssigned( ActiveHVACSystem ) = ComponentType( "AirSys" ) )
    then ValidOr( ActiveHVACSystem:RetFanPwr, 0 ) * PriZnToSysFlowRat
    else 0 
    endif 
  SIZING_BASELINE  
    zp:PriSysPropRetFanPwr   
ENDRULE
RULE NEW ResOtherZn:VentSysPropRetFanPwr
  DATATYPE
    Float
  LONGFORM
    VentilationSystemProposedReturnFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING
    0
;  SIZING_PROPOSED
;    if( IsCond = 1 .AND. HasUnknownHVAC = 0 .AND.
;        LocalCompAssigned( VentSysRef ) = ComponentType( "AirSys" ) )
;    then ValidOr( VentSysRef:RetFanPwr, 0 ) * VentZnToSysFlowRat
;    else 0 
;    endif    
;  SIZING_BASELINE  
;    zp:VentSysPropRetFanPwr
ENDRULE
RULE NEW ResOtherZn:TotPropRetFanPwr
  DATATYPE
    Float
  LONGFORM
    TotalProposedReturnFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING_PROPOSED
    PriSysPropRetFanPwr +
    VentSysPropRetFanPwr
  SIZING_BASELINE  
    zp:TotPropRetFanPwr  
ENDRULE

// Relief
RULE NEW ResOtherZn:PriSysPropReliefFanPwr
  DATATYPE
    Float
  LONGFORM
    PrimarySystemProposedReliefFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING_PROPOSED
    if( IsCond = 1 .AND. HasUnknownHVAC = 0 .AND.
        LocalCompAssigned( ActiveHVACSystem ) = ComponentType( "AirSys" ) )
    then ValidOr( ActiveHVACSystem:ReliefFanPwr, 0 ) * PriZnToSysFlowRat
    else 0 
    endif    
  SIZING_BASELINE  
    zp:PriSysPropReliefFanPwr 
ENDRULE
RULE NEW ResOtherZn:VentSysPropReliefFanPwr
  DATATYPE
    Float
  LONGFORM
    VentilationSystemProposedReliefFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING
    0
;  SIZING_PROPOSED
;    if( IsCond = 1 .AND. HasUnknownHVAC = 0 .AND.
;        LocalCompAssigned( VentSysRef ) = ComponentType( "AirSys" ) )
;    then ValidOr( VentSysRef:ReliefFanPwr, 0 ) * VentZnToSysFlowRat
;    else 0 
;    endif    
;  SIZING_BASELINE  
;    zp:VentSysPropReliefFanPwr  
ENDRULE
RULE NEW ResOtherZn:TotPropReliefFanPwr
  DATATYPE
    Float
  LONGFORM
    TotalProposedReliefFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING_PROPOSED
    PriSysPropReliefFanPwr +
    VentSysPropReliefFanPwr
  SIZING_BASELINE  
    zp:TotPropReliefFanPwr 
ENDRULE

// Sum up supply + return + relief fan power for Pri/Vent
RULE NEW ResOtherZn:TotPriSysPropFanPwr
  DATATYPE
    Float
  LONGFORM
    TotalPrimarySystemProposedFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING_PROPOSED
    PriSysPropSupFanPwr +
    PriSysPropRetFanPwr +
    PriSysPropReliefFanPwr
  SIZING_BASELINE  
    zp:TotPriSysPropFanPwr
ENDRULE
RULE NEW ResOtherZn:TotVentSysPropFanPwr
  DATATYPE
    Float
  LONGFORM
    TotalVentilationSystemProposedFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING_PROPOSED
    VentSysPropSupFanPwr +
    VentSysPropRetFanPwr +
    VentSysPropReliefFanPwr 
  SIZING_BASELINE  
    zp:TotVentSysPropFanPwr
ENDRULE

// Only one reference that an ExhSys can be set to
RULE NEW ResOtherZn:PropExhFanPwr
  DATATYPE
    Float
  LONGFORM
    ProposedExhaustFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING
    0
;  SIZING_PROPOSED
;    if( IsCond = 1 .AND. HasUnknownHVAC = 0 .AND.
;        IfValidAnd( PropVentSysIsExh = 0 ) .AND.
;        LocalCompAssigned( ExhSysRef ) )
;    then ValidOr( ExhSysRef:ExhFanPwr, 0 ) * ExhZnToSysFlowRat
;    else 0 
;    endif   
;  SIZING_BASELINE  
;    zp:PropExhFanPwr 
ENDRULE

// Sum up total fan power for ResOtherZn (pri + vent + exh)
RULE NEW ResOtherZn:TotPropFanPwr
  DATATYPE
    Float
  LONGFORM
    TotalProposedFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  SIZING_PROPOSED
    TotPriSysPropFanPwr + 
    TotVentSysPropFanPwr +
    PropExhFanPwr
  SIZING_BASELINE  
    zp:TotPropFanPwr
ENDRULE

// =========================== AirSystem ======================================
// Sum zone fan power to system
RULE NEW AirSys:TotPropSysFanPwr
  DATATYPE
    Float
  LONGFORM
    TotalSystemFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  ANNUAL_PROPOSED
    if( ServesResZn > 0 ) 
    then
      SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:TotPriSysPropFanPwr )
  ;    SumRevRef( ResOtherZn:VentSysRef, ResOtherZn:TotVentSysPropFanPwr ) +
  ;    SumRevRef( ResOtherZn:ExhSysRef, ResOtherZn:PropExhFanPwr )  
    else UNCHANGED
    endif
  ANNUAL_BASELINE
    if( ServesResZn > 0 ) 
    then
      SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:TotPriSysPropFanPwr ) + 
      SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:TotVentSysPropFanPwr ) +
      SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:PropExhFanPwr )    
    else UNCHANGED
    endif
ENDRULE
RULE NEW AirSys:PropExhFanPwr
  DATATYPE
    Float
  LONGFORM
    ProposedExhaustFanPower
  INPUTCLASS
    NotInput
  UNITS
    kW
  ANNUAL_PROPOSED
    if( ServesResZn > 0 ) 
    then 0
    else UNCHANGED
    endif
;    SumRevRef( ResOtherZn:ExhSysRef, ResOtherZn:PropExhFanPwr ) 
  ANNUAL_BASELINE
    SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:PropExhFanPwr ) 
ENDRULE
// Calculate ratio of supply fan power to total system power
RULE NEW AirSys:SupFanPwrRat
  DATATYPE
    Float
  LONGFORM
    SupplyFanPowerRatio
  INPUTCLASS
    NotInput
  ANNUAL_PROPOSED
    if( TotPropSysFanPwr > 0 .AND. ServesResZn > 0 ) 
    then
      ( SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:PriSysPropSupFanPwr ) );+
;        SumRevRef( ResOtherZn:VentSysRef, ResOtherZn:VentSysPropSupFanPwr ) )
      / TotPropSysFanPwr
    else UNCHANGED
    endif
  ANNUAL_BASELINE
    if( TotPropSysFanPwr > 0 .AND. ServesResZn > 0 ) 
    then
      ( SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:PriSysPropSupFanPwr ) + 
        SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:VentSysPropSupFanPwr ) ) /
      TotPropSysFanPwr
    else UNCHANGED
    endif
ENDRULE
// Calculate ratio of return fan power to total system power
RULE NEW AirSys:RetFanPwrRat
  DATATYPE
    Float
  LONGFORM
    ReturnFanPowerRatio
  INPUTCLASS
    NotInput
  ANNUAL_PROPOSED
    if( TotPropSysFanPwr > 0 .AND. ServesResZn > 0 ) 
    then
      ( SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:PriSysPropRetFanPwr ) ) ;+ 
;        SumRevRef( ResOtherZn:VentSysRef, ResOtherZn:VentSysPropRetFanPwr ) ) /
      / TotPropSysFanPwr
    else UNCHANGED
    endif
  ANNUAL_BASELINE
    if( TotPropSysFanPwr > 0 .AND. ServesResZn > 0 ) 
    then
      ( SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:PriSysPropRetFanPwr ) + 
        SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:VentSysPropRetFanPwr ) ) /
      TotPropSysFanPwr
    else UNCHANGED
    endif
ENDRULE
// Calculate ratio of relief fan power to total system power
RULE NEW AirSys:ReliefFanPwrRat
  DATATYPE
    Float
  LONGFORM
    ReliefFanPowerRatio
  INPUTCLASS
    NotInput
  ANNUAL_PROPOSED
    if( TotPropSysFanPwr > 0 .AND. ServesResZn > 0 ) 
    then
      ( SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:PriSysPropReliefFanPwr ) ) ;+ 
;        SumRevRef( ResOtherZn:VentSysRef, ResOtherZn:VentSysPropReliefFanPwr ) ) /
      / TotPropSysFanPwr
    else UNCHANGED
    endif
  ANNUAL_BASELINE
    if( TotPropSysFanPwr > 0 .AND. ServesResZn > 0 ) 
    then
      ( SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:PriSysPropReliefFanPwr ) + 
        SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:VentSysPropReliefFanPwr ) ) /
      TotPropSysFanPwr
    else UNCHANGED
    endif
ENDRULE
// Calculate ratio of exhuast fan power to total system power
RULE NEW AirSys:ExhFanPwrRat
  DATATYPE
    Float
  LONGFORM
    ExhaustFanPowerRatio
  INPUTCLASS
    NotInput
  ANNUAL_PROPOSED
    if( ServesResZn > 0 ) 
    then 0
    else UNCHANGED
    endif
;    if( TotPropSysFanPwr > 0 ) 
;    then
;      SumRevRef( ResOtherZn:ExhSysRef, ResOtherZn:PropExhFanPwr ) /
;      TotPropSysFanPwr
;    else 0
;    endif
  ANNUAL_BASELINE
    if( TotPropSysFanPwr > 0 .AND. ServesResZn > 0 ) 
    then
      SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:PropExhFanPwr ) /
      TotPropSysFanPwr
    else UNCHANGED
    endif
ENDRULE
// QC Check
RULE NEW AirSys:TotFanPwrRat
  DATATYPE
    Float
  LONGFORM
    TotalFanPowerRatio
  INPUTCLASS
    NotInput
  ANNUAL_PROPOSED
    if( ServesResZn > 0 )
    then
      SupFanPwrRat + 
      RetFanPwrRat +
      ReliefFanPwrRat +
      ExhFanPwrRat
    else UNCHANGED
    endif
  ANNUAL_BASELINE
    if( ServesResZn > 0 )
    then
      SupFanPwrRat + 
      RetFanPwrRat +
      ReliefFanPwrRat +
      ExhFanPwrRat
    else UNCHANGED
    endif
ENDRULE


// =============== ZoneToSystemProposedExhaustFanPowerRatio =====================
RULE NEW ResOtherZn:ZnToSysPropExhFanPwrRat
  DATATYPE
    Float
  LONGFORM
    ZoneToSystemProposedExhaustFanPowerRatio
  INPUTCLASS
    NotInput
  ANNUAL_PROPOSED
    UNDEFINED
  ANNUAL_BASELINE  
    if( HasUnknownHVAC = 0 .AND. 
        LocalCompAssigned( ActiveHVACSystem) .AND.
        IfValidAnd( ActiveHVACSystem:PropExhFanPwr > 0 ) )
    then PropExhFanPwr / ActiveHVACSystem:PropExhFanPwr
    else 0
    endif
ENDRULE





