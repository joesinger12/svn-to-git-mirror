; -------------------------------------------------------------------------
; Rules pertaining to:   Defaulting the Proposed Building Model - focusing on MFam DHW properties
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2019, California Energy Commission
; Copyright (c) 2018-2019, SAC Software Solutions, LLC
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
;STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------
; -------------------------------------------------------------------------
; Global conversions for Res to Com ruleset -
;     object type DwellUnitType      -> ResSpcDHWFeatures
;     object type DHWSys   -> ResDHWSys
;     DUT:IsDHWRecircSystem     -> :IsDHWRecircSys
;     DUT:CDSpecFixDists        -> :SpecFxtrDistances     - SAC 10/01/21
;     DUT:UserSpecCmpctDist     -> :UserSpecCompactDist
;     DUT:CmpctDistErrorID     -> :CompactDistErrorID
;     DUT:NumFlrsServedByDHW     -> :NumFlrServedByResDHWSys
;     DUT:CDDistMessage     -> :CompactDistMsg
;     DUT:CDWeightedDist    -> :WtdFxtrDistance
;     DUT:CDMBathFixDist    -> :MasterBathFxtrDistance
;     DUT:CDKitFixDist      -> :KitFxtrDistance
;     DUT:CDThirdFixDist    -> :ThirdRoomFxtrDistance
;     DUT:CDQualifyDist     -> :QualFxtrDistance
;     DUT:CondFlrArea     -> :DwellingUnitArea
;     DUT:NumBedrooms     -> :DwellingUnitBedroomCnt
;     DUT:CDDistDWHRMsg     -> :CompactDistDWHRMsg
;     DUT:DWHRSysShowers1[1]     -> :ResDWHRSysShowers[1]
;     DUT:DWHRSysShowers2-6[1]     -> :ResDWHRSysShowers[2-6]
;     DUT:NumDWHRSysRefs     -> :NumResDWHRSysRefs
;     DUT:TotDWHRSysShowers     -> :TotResDWHRSysShowers
;     DUT:DWHRSysRef1-6[1]     -> :ResDWHRSysRef[1-6]
;     DUT:DWHRSysConfig1-6[1]     -> :ResDWHRSysConfig[1-6]
;     DUT:NumDWHRSysDevices     -> :NumResDWHRSysDevs
;     DUT:DWHRSysSummaryMsg     -> :ResDWHRSysSummaryMsg
;     DUT:DWHRSysConfigDescrip     -> :ResDWHRSysConfigDesc
;     DUT:NumAssigningDUs > 0     -> :DwellingUnitArea > 0

;     DUT:DHWSysRef  -> Spc:ResDHWSysRef
;     ResDHWSys:CentralDHW  -> :CentralSys
;     ResDHWSys:SystemType  -> :Type
;     ResDHWSys:MFamDistType  -> :DistType
;     ResDHWSys:CompactDistrib  -> :CompactDist
;     ResDHWSys:TotNumDHWHeaters  -> :WtrHtrCnt
;     ResDHWSys:IsExisting  -> :IsExistingResDHWSys
;     ResDHWSys:NumDUsServed  -> :LivingUnitCnt
;     ResDHWSys:CompactDistrib  -> ResSpcDHWFeatures:CompactDistIdx

;     DWHRSys:CSARatedEff  -> ResDWHRSys:CSARtdEff

;     Proj:ShwrDRAINHREFF   -> ResDHWSys:HaveShowerDrainHtRcvry / ShowerDrainHtRcvryEff


;        "DwellingUnitArea",        BEMP_Flt,  1,  1,  0,  NInp,  "ft2",        0,  0,                        1003, "DwellingUnitArea", ""                          ; Res: "CondFlrArea",  ""   
;        "DwellingUnitBedroomCnt",  BEMP_Int,  1,  1,  0,  NInp,  "",           0,  0,                        1003, "DwellingUnitBedroomCount", ""                  ; Res: "NumBedrooms",  ""   
;
;        "IsDHWRecircSys",          BEMP_Int,  1,  1,  0,  NInp,  "", 	         0,  0,                        1003, "IsDHWRecirculationSystem", ""                  ; Res: "IsDHWRecircSystem",  "flag indicating assigned DHW is a recirculation system"  
;        "UserSpecCompactDist",     BEMP_Int,  1,  1,  0,  Pres,  "",           0,  0,                        8002, "UserSpecifiedCompactDistribution", ""          ; Res: "UserSpecCmpctDist",  "whether or not user is specifying a custom Compactness Factor"  ; SAC 1/11/19
;        "UserCompactFactor",       BEMP_Flt,  1,  1,  0,  Pres,  "frac",       0,  0,                        1003, "UserCompactFactor", ""                         ; Res: "UserCompactFactor",  "User-specified Compactness Factor"   
;        "NumFlrServedByResDHWSys", BEMP_Int,  1,  1,  0,  CReq,  "",           0,  0,                        8002, "NumberFloorsServedByResidentialDHWSystem", ""  ; Res: "NumFlrsServedByDHW", "number of floors this DHW system serves (used in Compact Distrib calcs)" 
;        "CompactDistErrorID",      BEMP_Int,  1,  1,  0,  NInp,  "",           0,  0,                        8002, "CompactDistributionErrorID", ""                ; Res: "CmpctDistErrorID",   "flag indicating compact distribution error" 
;        "MasterBathFxtrDistance",  BEMP_Flt,  1,  1,  0,  CReq,  "ft", 	      0,  0,                        1003, "MasterBathFixtureDistance", ""                 ; Res: "CDMBathFixDist",     "Straight-line distance from heater to furthest fixture in master bathroom (used to calculate weighted distance of compact distribution)"  
;        "KitFxtrDistance",         BEMP_Flt,  1,  1,  0,  CReq,  "ft", 	      0,  0,                        1003, "KitchenFixtureDistance", ""                    ; Res: "CDKitFixDist",       "Straight-line distance from heater to furthest fixture in kitchen (used to calculate weighted distance of compact distribution)"  
;        "ThirdRoomFxtrDistance",   BEMP_Flt,  1,  1,  0,  CReq,  "ft", 	      0,  0,                        1003, "ThirdRoomFixtureDistance", ""                  ; Res: "CDThirdFixDist",     "Straight-line distance from heater to furthest fixture in third room (used to calculate weighted distance of compact distribution)"  
;        "WtdFxtrDistance",         BEMP_Flt,  1,  1,  0,  NInp,  "ft", 	      0,  0,                        1003, "WeightedFixtureDistance", ""                   ; Res: "CDWeightedDist",     "Weighted distance of compact distribution"  
;        "QualFxtrDistance",        BEMP_Flt,  1,  1,  0,  NInp,  "ft",  	      0,  0,                        1003, "QualificationFixtureDistance", ""              ; Res: "CDQualifyDist",      "Qualification distance of compact distribution"  
;        "CompactFactor",           BEMP_Flt,  1,  1,  0,  NInp,  "frac",       0,  0,                        1003, "CompactFactor", ""                             ; Res: "CompactFactor",      "Compactness Factor"   
;        "CompactDistMsg",          BEMP_Str,  1,  1,  0,  NInp,  "", 	         0,  0,                        1003, "CompactDistributionMessage", ""                ; Res: "CDDistMessage",      "User message describing compact distribution qualification or error (due to weighted dist > qual dist)"  
;        "CompactDistDWHRMsg",      BEMP_Str,  1,  1,  0,  NInp,  "", 	         0,  0,                        1003, "CompactDistributionDWHRMessge", ""             ; Res: "CDDistDWHRMsg",      "Summary of both compact distribution and drain water heat recovery inputs"  
;
;        "TotShowersServed",        BEMP_Int,  1,  1,  0,  Def,   "",           0,  0,   	                  1003, "TotalShowersServed", ""                  ; Res: "TotShowersServed",     "Number of showers this DHWSys serves (for single dwelling units)"
;        "TotBathsServed",          BEMP_Int,  1,  1,  0,  Def,   "",           0,  0,   	                  1003, "TotalBathsServed", ""                               ; Res: "TotBathsServed",       "Number of bath tubs this DHWSys serves (for single dwelling units)"   - SAC 4/28/19 (tic #2553)
;        "TotResDWHRSysShowers",    BEMP_Int,  1,  1,  0,  NInp,  "",           0,  0,   	                  1003, "TotalDWHRSysShowers", ""                 ; Res: "TotDWHRSysShowers",    "Number of showers this DHWSys recovers heat from (for single dwelling units)"
;        "ResDWHRSysSummaryMsg",    BEMP_Str,  1,  1,  0,  NInp,  "",           0,  0,   	                  1003, "DWHRSystemSummaryMessage", ""            ; Res: "DWHRSysSummaryMsg",    "Message describing status of shower drain heat recovery inputs"
;        "ResDWHRSysRef",           BEMP_Obj,  6,  1,  0,  Opt,   "",           0,  1, "ResDWHRSys", 0, "",   1003, "DWHRSystemReference", ""                 ; Res: "DWHRSysRef1-6",          "DWHRSys equipment" 
;        "ResDWHRSysConfig",        BEMP_Sym,  6,  1,  0,  Opt,   "",           0,  0,                        3008, "DWHRSystemConfiguration", ""             ; Res: "DWHRSysConfig1-6",       "DWHRSys Configuration" 
;        "ResDWHRSysShowers",       BEMP_Int,  6,  1,  0,  Opt,   "",           0,  0,   	                  1003, "DWHRSystemShowers", ""                   ; Res: "DWHRSysShowers1-6",      "Number of this type of DWHRSys object"
;        "ResDWHRSysConfigDesc",    BEMP_Str,  1,  1,  0,  NInp,  "",           0,  0,                        8002, "DWHRSystemConfigurationDescription", ""  ; Res: "DWHRSysConfigDescrip", "ACM description of DWHRSys plumbing configurations (RTF filename)" 
;        "NumResDWHRSysRefs",       BEMP_Int,  1,  1,  0,  NInp,  "",           0,  0,   	                  1003, "NumberDWHRSysReferences", ""             ; Res: "NumDWHRSysRefs",       "Number of DWHRSys object references are defined"
;        "NumResDWHRSysDevs",       BEMP_Int,  1,  1,  0,  NInp,  "",           0,  0,   	                  1003, "NumberDWHRSysDevices", ""                ; Res: "NumDWHRSysDevices",    "Number of valid DWHRSys devices w/ shower assignments -OR- negative values indicating DWHRSys assignment errors"


;- backward compat needed -
;   0, ResDHWSys:Type, 3840
;   2,        100, "2019 Basic Compact Distribution System"    ; new option for 2019 std design HPWH systems - SAC 8/8/18
;   2,    8394496, "(HERS req'd) Compact Distribution System"                      ; %WHDIST2013_HERSCDS =    8394496 * 256 = 2148990976  &B 10000000 0001 0111 00000000 00000000   ' compact distribution system


;*************************************************************************  - SAC 1/23/19 - rulelist to create & setup ResSpcDHWFeatures objects - DID NOT originate in Res Rules
RULELIST "Setup_ResSpcDHWFeatures" 0 0 0 0

   "Create ResSpcDHWFeatures for 0-bedroom dwellings"    Spc:Action  = 
      {  if (IfValidAnd( DwellingUnitTypeCnt[1]  > 0 ) .AND. SpcFunc = "High-Rise Residential Living Spaces" .AND.
             IfValidAnd( DwellingUnitTypeArea[1] > 0 ) .AND. LocalCompAssigned( ResSpcDHWFeaturesRef[1] ) < 1)
         then  EvalRulelist( "Create_Spc_ResSpcDHWFeatures_1", 1 )
         else  UNCHANGED  endif  }
   "Set Spc:ResSpcDHWFeaturesRef[1]:DwellingUnitArea (0-bedrm)"   Spc:ResSpcDHWFeaturesRef[1]:DwellingUnitArea  = {  DwellingUnitTypeArea[1]  }
   "Set Spc:ResSpcDHWFeaturesRef[1]:DwellingUnitBedroomCnt (0-bedrm)"   Spc:ResSpcDHWFeaturesRef[1]:DwellingUnitBedroomCnt  = {  0  }
   "Set Spc:HaveResSpcDHWFeatures[1] (0-bedrm)"   Spc:HaveResSpcDHWFeatures[1]  =
      {  if (IfValidAnd( DwellingUnitTypeCnt[1]  > 0 ) .AND. SpcFunc = "High-Rise Residential Living Spaces" .AND.
             IfValidAnd( DwellingUnitTypeArea[1] > 0 ) .AND. LocalCompAssigned( ResSpcDHWFeaturesRef[1] ) > 0)
         then  1  else  0  endif  }

   "Create ResSpcDHWFeatures for 1-bedroom dwellings"    Spc:Action  = 
      {  if (IfValidAnd( DwellingUnitTypeCnt[2]  > 0 ) .AND. SpcFunc = "High-Rise Residential Living Spaces" .AND.
             IfValidAnd( DwellingUnitTypeArea[2] > 0 ) .AND. LocalCompAssigned( ResSpcDHWFeaturesRef[2] ) < 1)
         then  EvalRulelist( "Create_Spc_ResSpcDHWFeatures_2", 1 )
         else  UNCHANGED  endif  }
   "Set Spc:ResSpcDHWFeaturesRef[2]:DwellingUnitArea (1-bedrm)"   Spc:ResSpcDHWFeaturesRef[2]:DwellingUnitArea  = {  DwellingUnitTypeArea[2]  }
   "Set Spc:ResSpcDHWFeaturesRef[2]:DwellingUnitBedroomCnt (0-bedrm)"   Spc:ResSpcDHWFeaturesRef[2]:DwellingUnitBedroomCnt  = {  1  }
   "Set Spc:HaveResSpcDHWFeatures[2] (1-bedrm)"   Spc:HaveResSpcDHWFeatures[2]  =
      {  if (IfValidAnd( DwellingUnitTypeCnt[2]  > 0 ) .AND. SpcFunc = "High-Rise Residential Living Spaces" .AND.
             IfValidAnd( DwellingUnitTypeArea[2] > 0 ) .AND. LocalCompAssigned( ResSpcDHWFeaturesRef[2] ) > 0)
         then  1  else  0  endif  }

   "Create ResSpcDHWFeatures for 2-bedroom dwellings"    Spc:Action  = 
      {  if (IfValidAnd( DwellingUnitTypeCnt[3]  > 0 ) .AND. SpcFunc = "High-Rise Residential Living Spaces" .AND.
             IfValidAnd( DwellingUnitTypeArea[3] > 0 ) .AND. LocalCompAssigned( ResSpcDHWFeaturesRef[3] ) < 1)
         then  EvalRulelist( "Create_Spc_ResSpcDHWFeatures_3", 1 )
         else  UNCHANGED  endif  }
   "Set Spc:ResSpcDHWFeaturesRef[3]:DwellingUnitArea (2-bedrm)"   Spc:ResSpcDHWFeaturesRef[3]:DwellingUnitArea  = {  DwellingUnitTypeArea[3]  }
   "Set Spc:ResSpcDHWFeaturesRef[3]:DwellingUnitBedroomCnt (2-bedrm)"   Spc:ResSpcDHWFeaturesRef[3]:DwellingUnitBedroomCnt  = {  2  }
   "Set Spc:HaveResSpcDHWFeatures[3] (2-bedrm)"   Spc:HaveResSpcDHWFeatures[3]  =
      {  if (IfValidAnd( DwellingUnitTypeCnt[3]  > 0 ) .AND. SpcFunc = "High-Rise Residential Living Spaces" .AND.
             IfValidAnd( DwellingUnitTypeArea[3] > 0 ) .AND. LocalCompAssigned( ResSpcDHWFeaturesRef[3] ) > 0)
         then  1  else  0  endif  }

   "Create ResSpcDHWFeatures for 3-bedroom dwellings"    Spc:Action  = 
      {  if (IfValidAnd( DwellingUnitTypeCnt[4]  > 0 ) .AND. SpcFunc = "High-Rise Residential Living Spaces" .AND.
             IfValidAnd( DwellingUnitTypeArea[4] > 0 ) .AND. LocalCompAssigned( ResSpcDHWFeaturesRef[4] ) < 1)
         then  EvalRulelist( "Create_Spc_ResSpcDHWFeatures_4", 1 )
         else  UNCHANGED  endif  }
   "Set Spc:ResSpcDHWFeaturesRef[4]:DwellingUnitArea (3-bedrm)"   Spc:ResSpcDHWFeaturesRef[4]:DwellingUnitArea  = {  DwellingUnitTypeArea[4]  }
   "Set Spc:ResSpcDHWFeaturesRef[4]:DwellingUnitBedroomCnt (3-bedrm)"   Spc:ResSpcDHWFeaturesRef[4]:DwellingUnitBedroomCnt  = {  3  }
   "Set Spc:HaveResSpcDHWFeatures[4] (3-bedrm)"   Spc:HaveResSpcDHWFeatures[4]  =
      {  if (IfValidAnd( DwellingUnitTypeCnt[4]  > 0 ) .AND. SpcFunc = "High-Rise Residential Living Spaces" .AND.
             IfValidAnd( DwellingUnitTypeArea[4] > 0 ) .AND. LocalCompAssigned( ResSpcDHWFeaturesRef[4] ) > 0)
         then  1  else  0  endif  }

   "Create ResSpcDHWFeatures for 4-bedroom dwellings"    Spc:Action  = 
      {  if (IfValidAnd( DwellingUnitTypeCnt[5]  > 0 ) .AND. SpcFunc = "High-Rise Residential Living Spaces" .AND.
             IfValidAnd( DwellingUnitTypeArea[5] > 0 ) .AND. LocalCompAssigned( ResSpcDHWFeaturesRef[5] ) < 1)
         then  EvalRulelist( "Create_Spc_ResSpcDHWFeatures_5", 1 )
         else  UNCHANGED  endif  }
   "Set Spc:ResSpcDHWFeaturesRef[5]:DwellingUnitArea (4-bedrm)"   Spc:ResSpcDHWFeaturesRef[5]:DwellingUnitArea  = {  DwellingUnitTypeArea[5]  }
   "Set Spc:ResSpcDHWFeaturesRef[5]:DwellingUnitBedroomCnt (4-bedrm)"   Spc:ResSpcDHWFeaturesRef[5]:DwellingUnitBedroomCnt  = {  4  }
   "Set Spc:HaveResSpcDHWFeatures[5] (4-bedrm)"   Spc:HaveResSpcDHWFeatures[5]  =
      {  if (IfValidAnd( DwellingUnitTypeCnt[5]  > 0 ) .AND. SpcFunc = "High-Rise Residential Living Spaces" .AND.
             IfValidAnd( DwellingUnitTypeArea[5] > 0 ) .AND. LocalCompAssigned( ResSpcDHWFeaturesRef[5] ) > 0)
         then  1  else  0  endif  }

   "Create ResSpcDHWFeatures for 5-bedroom dwellings"    Spc:Action  = 
      {  if (IfValidAnd( DwellingUnitTypeCnt[6]  > 0 ) .AND. SpcFunc = "High-Rise Residential Living Spaces" .AND.
             IfValidAnd( DwellingUnitTypeArea[6] > 0 ) .AND. LocalCompAssigned( ResSpcDHWFeaturesRef[6] ) < 1)
         then  EvalRulelist( "Create_Spc_ResSpcDHWFeatures_6", 1 )
         else  UNCHANGED  endif  }
   "Set Spc:ResSpcDHWFeaturesRef[6]:DwellingUnitArea (5-bedrm)"   Spc:ResSpcDHWFeaturesRef[6]:DwellingUnitArea  = {  DwellingUnitTypeArea[6]  }
   "Set Spc:ResSpcDHWFeaturesRef[6]:DwellingUnitBedroomCnt (5-bedrm)"   Spc:ResSpcDHWFeaturesRef[6]:DwellingUnitBedroomCnt  = {  5  }
   "Set Spc:HaveResSpcDHWFeatures[6] (5-bedrm)"   Spc:HaveResSpcDHWFeatures[6]  =
      {  if (IfValidAnd( DwellingUnitTypeCnt[6]  > 0 ) .AND. SpcFunc = "High-Rise Residential Living Spaces" .AND.
             IfValidAnd( DwellingUnitTypeArea[6] > 0 ) .AND. LocalCompAssigned( ResSpcDHWFeaturesRef[6] ) > 0)
         then  1  else  0  endif  }

   "Create GuestRmResSpcDHWFeatures for hotel/motel guest room spaces"     Spc:Action  =     ; SAC 04/30/21 (tic #3242)
      {  if (IfValidAnd( HotelMotelGuestRmCnt > 0 ) .AND. SpcFunc = "Hotel/Motel Guest Room" .AND.
             IfValidAnd( Area > 0 ) .AND. LocalCompAssigned( GuestRmResSpcDHWFeaturesRef ) < 1)
         then  EvalRulelist( "Create_Spc_GuestRmResSpcDHWFeatures", 1 )
         else  UNCHANGED  endif  }
   "Set Spc:GuestRmResSpcDHWFeaturesRef:DwellingUnitArea"         Spc:GuestRmResSpcDHWFeaturesRef:DwellingUnitArea  = {  ValidOr( Area, 0 ) / ValidOr( HotelMotelGuestRmCnt, 1 )  }
   "Set Spc:GuestRmResSpcDHWFeaturesRef:DwellingUnitBedroomCnt"   Spc:GuestRmResSpcDHWFeaturesRef:DwellingUnitBedroomCnt  = {  1  }
   "Set Spc:HaveGuestRmResSpcDHWFeatures"    Spc:HaveGuestRmResSpcDHWFeatures  =
      {  if (IfValidAnd( HotelMotelGuestRmCnt > 0 ) .AND. SpcFunc = "Hotel/Motel Guest Room" .AND.
             IfValidAnd( Area > 0 ) .AND. LocalCompAssigned( GuestRmResSpcDHWFeaturesRef ) > 0)
         then  1  else  0  endif  }

   "Default CompactDist ResSpcDHWFeatures properties"       Proj:Action  =
      {  EvalRulelist( "ProposedInput_ResSpcDHWFeatures_CompactDistribution" )  }

   "Default DWHR ResSpcDHWFeatures properties"       Proj:Action  =
      {  EvalRulelist( "ProposedInput_ResSpcDHWFeatures_DWHRSys" )  }

   "Set Spc:GuestRmDWHRSysConfigDesc"     Spc:GuestRmDWHRSysConfigDesc =      ; SAC 04/30/21 (tic #3242)
      {  if (HaveGuestRmResSpcDHWFeatures < 1) then  UNDEFINED
         else  GuestRmResSpcDHWFeaturesRef:ResDWHRSysConfigDesc  endif  }

   "Default combined CompactDist/DWHR ResSpcDHWFeatures messages"       Proj:Action  =
      {  EvalRulelist( "ProposedInput_MFam_ResSpcDHWFeatures_CompactDistDWHRMsg" )  }

   "Set Spc:CompactDistDWHRMsg[1] (0-bedrm)"    Spc:CompactDistDWHRMsg[1]  =
      {  if (HaveResSpcDHWFeatures[1] < 1) then  UNDEFINED
         else  ResSpcDHWFeaturesRef[1]:CompactDistDWHRMsg  endif  }
   "Set Spc:CompactDistDWHRMsg[2] (1-bedrm)"    Spc:CompactDistDWHRMsg[2]  =
      {  if (HaveResSpcDHWFeatures[2] < 1) then  UNDEFINED
         else  ResSpcDHWFeaturesRef[2]:CompactDistDWHRMsg  endif  }
   "Set Spc:CompactDistDWHRMsg[3] (2-bedrm)"    Spc:CompactDistDWHRMsg[3]  =
      {  if (HaveResSpcDHWFeatures[3] < 1) then  UNDEFINED
         else  ResSpcDHWFeaturesRef[3]:CompactDistDWHRMsg  endif  }
   "Set Spc:CompactDistDWHRMsg[4] (3-bedrm)"    Spc:CompactDistDWHRMsg[4]  =
      {  if (HaveResSpcDHWFeatures[4] < 1) then  UNDEFINED
         else  ResSpcDHWFeaturesRef[4]:CompactDistDWHRMsg  endif  }
   "Set Spc:CompactDistDWHRMsg[5] (4-bedrm)"    Spc:CompactDistDWHRMsg[5]  =
      {  if (HaveResSpcDHWFeatures[5] < 1) then  UNDEFINED
         else  ResSpcDHWFeaturesRef[5]:CompactDistDWHRMsg  endif  }
   "Set Spc:CompactDistDWHRMsg[6] (5-bedrm)"    Spc:CompactDistDWHRMsg[6]  =
      {  if (HaveResSpcDHWFeatures[6] < 1) then  UNDEFINED
         else  ResSpcDHWFeaturesRef[6]:CompactDistDWHRMsg  endif  }

   "Set Spc:NumResDWHRSysDevs (0-bedrm)"     Spc:NumResDWHRSysDevs  =      ; SAC 1/29/19
      {  if (HaveResSpcDHWFeatures[1] < 1) then      0      else                      ValidOr( ResSpcDHWFeaturesRef[1]:NumResDWHRSysDevs, 0 )  endif  }
   "Set Spc:NumResDWHRSysDevs (1-bedrm)"     Spc:NumResDWHRSysDevs  = {
         if (HaveResSpcDHWFeatures[2] < 1) then  UNCHANGED  else  NumResDWHRSysDevs + ValidOr( ResSpcDHWFeaturesRef[2]:NumResDWHRSysDevs, 0 )  endif  }
   "Set Spc:NumResDWHRSysDevs (2-bedrm)"     Spc:NumResDWHRSysDevs  = {
         if (HaveResSpcDHWFeatures[3] < 1) then  UNCHANGED  else  NumResDWHRSysDevs + ValidOr( ResSpcDHWFeaturesRef[3]:NumResDWHRSysDevs, 0 )  endif  }
   "Set Spc:NumResDWHRSysDevs (3-bedrm)"     Spc:NumResDWHRSysDevs  = {
         if (HaveResSpcDHWFeatures[4] < 1) then  UNCHANGED  else  NumResDWHRSysDevs + ValidOr( ResSpcDHWFeaturesRef[4]:NumResDWHRSysDevs, 0 )  endif  }
   "Set Spc:NumResDWHRSysDevs (4-bedrm)"     Spc:NumResDWHRSysDevs  = {
         if (HaveResSpcDHWFeatures[5] < 1) then  UNCHANGED  else  NumResDWHRSysDevs + ValidOr( ResSpcDHWFeaturesRef[5]:NumResDWHRSysDevs, 0 )  endif  }
   "Set Spc:NumResDWHRSysDevs (5-bedrm)"     Spc:NumResDWHRSysDevs  = {
         if (HaveResSpcDHWFeatures[6] < 1) then  UNCHANGED  else  NumResDWHRSysDevs + ValidOr( ResSpcDHWFeaturesRef[6]:NumResDWHRSysDevs, 0 )  endif  }

   "Set Spc:NumGuestRmDWHRSysDevs"           Spc:NumGuestRmDWHRSysDevs  =        ; SAC 05/04/21 (tic #3242)
      {  if (HaveGuestRmResSpcDHWFeatures < 1) then  0  else  ValidOr( GuestRmResSpcDHWFeaturesRef:NumResDWHRSysDevs, 0 )  endif  }
END
;*************************************************************************
RULELIST "Create_Spc_ResSpcDHWFeatures_1" 1 0 1 0
   "Create ResSpcDHWFeatures for 0-bedroom dwellings"    Spc:ResSpcDHWFeaturesRef[1]  = 
      {  CreateComp( ResSpcDHWFeatures, Name + " rsd0" )  }
   "Set Spc:ResSpcDHWFeaturesRef[1]:Parent (0-bedrm)"    Spc:ResSpcDHWFeaturesRef[1]:Parent  = {  Name  }
END
;*************************************************************************
RULELIST "Create_Spc_ResSpcDHWFeatures_2" 1 0 1 0
   "Create ResSpcDHWFeatures for 1-bedroom dwellings"    Spc:ResSpcDHWFeaturesRef[2]  = 
      {  CreateComp( ResSpcDHWFeatures, Name + " rsd1" )  }
   "Set Spc:ResSpcDHWFeaturesRef[2]:Parent (1-bedrm)"    Spc:ResSpcDHWFeaturesRef[2]:Parent  = {  Name  }
END
;*************************************************************************
RULELIST "Create_Spc_ResSpcDHWFeatures_3" 1 0 1 0
   "Create ResSpcDHWFeatures for 2-bedroom dwellings"    Spc:ResSpcDHWFeaturesRef[3]  = 
      {  CreateComp( ResSpcDHWFeatures, Name + " rsd2" )  }
   "Set Spc:ResSpcDHWFeaturesRef[3]:Parent (2-bedrm)"    Spc:ResSpcDHWFeaturesRef[3]:Parent  = {  Name  }
END
;*************************************************************************
RULELIST "Create_Spc_ResSpcDHWFeatures_4" 1 0 1 0
   "Create ResSpcDHWFeatures for 3-bedroom dwellings"    Spc:ResSpcDHWFeaturesRef[4]  = 
      {  CreateComp( ResSpcDHWFeatures, Name + " rsd3" )  }
   "Set Spc:ResSpcDHWFeaturesRef[4]:Parent (3-bedrm)"    Spc:ResSpcDHWFeaturesRef[4]:Parent  = {  Name  }
END
;*************************************************************************
RULELIST "Create_Spc_ResSpcDHWFeatures_5" 1 0 1 0
   "Create ResSpcDHWFeatures for 4-bedroom dwellings"    Spc:ResSpcDHWFeaturesRef[5]  = 
      {  CreateComp( ResSpcDHWFeatures, Name + " rsd4" )  }
   "Set Spc:ResSpcDHWFeaturesRef[5]:Parent (4-bedrm)"    Spc:ResSpcDHWFeaturesRef[5]:Parent  = {  Name  }
END
;*************************************************************************
RULELIST "Create_Spc_ResSpcDHWFeatures_6" 1 0 1 0
   "Create ResSpcDHWFeatures for 5-bedroom dwellings"    Spc:ResSpcDHWFeaturesRef[6]  = 
      {  CreateComp( ResSpcDHWFeatures, Name + " rsd5" )  }
   "Set Spc:ResSpcDHWFeaturesRef[6]:Parent (5-bedrm)"    Spc:ResSpcDHWFeaturesRef[6]:Parent  = {  Name  }
END
;*************************************************************************
RULELIST "Create_Spc_GuestRmResSpcDHWFeatures" 1 0 1 0
   "Create ResSpcDHWFeatures for GuestRm(s)"       Spc:GuestRmResSpcDHWFeaturesRef  = 
      {  CreateComp( ResSpcDHWFeatures, Name + " gstrm" )  }
   "Set Spc:GuestRmResSpcDHWFeaturesRef:Parent"    Spc:GuestRmResSpcDHWFeaturesRef:Parent  = {  Name  }
END
;*************************************************************************
;*************************************************************************

;*************************************************************************  - SAC 12/30/18
RULELIST "ProposedInput_ResSpcDHWFeatures_CompactDistribution" 0 0 0 0

   ; restore ResSpcDHWFeatures rules needed for ResDHWSys serving Hotel/Motel spaces - SAC 02/27/22
   "Set ResSpcDHWFeatures:CompactDistIdx"        ResSpcDHWFeatures:CompactDistIdx  = {
         if (ParentCompAssigned( ResDHWSysRef[1] ))
         then  switch (ResDHWSysRef[1]:CompactDistrib)
                  case  "Basic Credit"                 :  1
                  case  "Expanded Credit (HERS req'd)" :  2
                  default  :  0
               endswitch
         else  0  endif  }

   "Set ResSpcDHWFeatures:IsDHWRecircSys[1]"     ResSpcDHWFeatures:IsDHWRecircSys[1]  = {
         if (ParentCompAssigned( ResDHWSysRef[1] ))
         then  if (IfValidAnd( ResDHWSysRef[1]:CentralDHW < 1 ))
               then  switch (ResDHWSysRef[1]:SystemType)
                        case  "Recirculation, Demand Control Push Button"                   :  1  ;    5248 
                        case  "Recirculation, Demand Control Occupancy/Motion"              :  1  ;    5504 
                        case  "Recirculation, Non-Demand Control"                           :  1  ;    4992 
                        case  "(HERS req'd) Recirculation, Demand Control Push Button"      :  1  ; 8393856 
                        case  "(HERS req'd) Recirculation, Demand Control Occupancy/Motion" :  1  ; 8394112 
                        default      :  0
                     endswitch
               else if (ResDHWSysRef[1]:MFamDistType != "No loops or central system pump")
               then  1
               else  0  endif endif
         else  UNDEFINED  endif  }

;   "Default ResSpcDHWFeatures:UserSpecCompactDist[1]"    ResSpcDHWFeatures:UserSpecCompactDist[1]  = {  if (LocalStatus( UserSpecCompactDist[1] ) < 1) then  0  else  UNCHANGED  endif  }    ; SAC 1/11/19
   ; replace UserSpecCompactDist w/ SpecFxtrDistances - SAC 10/01/21
   "Default ResSpcDHWFeatures:SpecFxtrDistances"       ResSpcDHWFeatures:SpecFxtrDistances = {  if (LocalStatus( SpecFxtrDistances ) < 1) then  0  else  UNCHANGED  endif  } 

   ; restore ResSpcDHWFeatures rules needed for ResDHWSys serving Hotel/Motel spaces - SAC 02/27/22
   "Force reset of user-defined ResSpcDHWFeatures:UserCompactFactor if CompactDistrib = 'Basic'"   ResSpcDHWFeatures:Action =    ; SAC 10/01/21
      {  if (ParentCompAssigned( ResDHWSysRef[1] ) < 1 .OR. LocalStatus( UserCompactFactor ) < 5) then  UNCHANGED
         else if (ResDHWSysRef[1]:CompactDistrib == "Basic Credit")
         then  EvalRulelist( "Blast_ResSpcDHWFeatures_UserCompactFactor", 1 )
         else  UNCHANGED  endif endif  }
   "Default ResSpcDHWFeatures:UserCompactFactor[1]"    ResSpcDHWFeatures:UserCompactFactor[1]  =   ; SAC 10/01/21 was:  {  if (IfValidAnd( UserSpecCompactDist[1] > 0 ) .AND. IfValidAnd( ResDHWSysRef[1]:CompactDistrib == "Basic Credit" )) then  0.7  else  UNCHANGED  endif  }    ; SAC 1/12/19
      {  if (ParentCompAssigned( ResDHWSysRef[1] ) < 1) then  UNDEFINED
         else  switch (ResDHWSysRef[1]:CompactDistrib)
                  case  "Basic Credit"                 :  0.7
                  case  "Expanded Credit (HERS req'd)" :  0.6
                  default :  UNDEFINED
               endswitch  endif  }

   ; SAC 4/28/19 - added logic to prevent Compact Distribution for Point of Use or Parrallel Piping distribution types (tic #2553)
   "Set ResSpcDHWFeatures:CompactDistErrorID[1] flag"    ResSpcDHWFeatures:CompactDistErrorID[1] = {
         if (ParentCompAssigned( ResDHWSysRef[1] ))
         then  if (ResDHWSysRef[1]:CentralDHW) then  3
               else if (ResDHWSysRef[1]:CentralDHW = 0 .AND. IsDHWRecircSys[1]) then  4
               else if (ResDHWSysRef[1]:CompactDistrib = "not compact") then  5
               else if (ResDHWSysRef[1]:SystemType = "Parallel Piping" .OR.
                        ResDHWSysRef[1]:SystemType = "Point of use" .OR.
                        ResDHWSysRef[1]:SystemType = "(HERS req'd) Pipe Insulation, All Lines" .OR.
                        ResDHWSysRef[1]:SystemType = "(HERS req'd) Parallel Piping" ) then  6
               else if (IfValidAnd( SpecFxtrDistances > 0 ) .AND.
                        IfValidAnd( NumFlrServedByResDHWSys[1] > 0 )==0) then  2
               else if (IfValidAnd( SpecFxtrDistances > 0 )==0 .AND.
                        IfValidAnd( UserCompactFactor[1] > 0 )==0) then  1
               else  0  endif endif endif endif endif endif
         else  UNDEFINED  endif  }

   "Set initial ResSpcDHWFeatures:CompactDistMsg[1]"    ResSpcDHWFeatures:CompactDistMsg[1]  =     ; SAC 4/28/19 (tic #2553) 
      {  if (LocalStatus( CompactDistErrorID[1] ) < 1) then  UNDEFINED
         else  switch (CompactDistErrorID[1])
                  case  1 :  "User-specified distribution compactness factor missing"
                  case  2 :  "Number of floors served by this DHW system must be specified to achieve credit"
                  case  3 :  "Compact distribution credit not allowed for Central DHW systems"
                  case  4 :  "Compact distribution credit not allowed for multifamily DHW systems with recirculation"
                  case  5 :  "Compact distribution selection must be made for this DHW system to achieve credit"
                  case  6 :  "Compact distribution credit not available for Central Parallel Piping or Point of Use DHW Distribution types"
                  default :  UNCHANGED
               endswitch  endif  }

   "Init ResSpcDHWFeatures:CompactFactor[1]"     ResSpcDHWFeatures:CompactFactor[1]  = {
         if (IfValidAnd( CompactDistErrorID[1] = 0 )) then  UNCHANGED  ; set later
         else if (LocalStatus( CompactFactor[1] ) > 0) then  UNDEFINED
         else  UNCHANGED  endif endif  }

   "Setup Compact Distrib properties-1"      ResSpcDHWFeatures:Action  = {
         if (IfValidAnd( CompactDistErrorID[1] = 0 )==0) then  UNCHANGED
         else  EvalRulelist( "ProposedInput_ResSpcDHWFeatures_CompactDistribution_1", 1 )  endif  }
END
;*************************************************************************  - SAC 12/31/18
RULELIST "ProposedInput_ResSpcDHWFeatures_CompactDistribution_1" 0 0 0 0
   ; SAC 12/31/18 - 2019 Compact Distribution input
      ; ResSpcDHWFeatures:NumFlrServedByResDHWSys[1]  - no default
      ; ResSpcDHWFeatures:MasterBathFxtrDistance[1]      - no default
      ; ResSpcDHWFeatures:KitFxtrDistance[1]        - no default
      ; ResSpcDHWFeatures:ThirdRoomFxtrDistance[1]      - no default

   "Set ResSpcDHWFeatures:WtdFxtrDistance[1]"   ResSpcDHWFeatures:WtdFxtrDistance[1]  = {
         if (IfValidAnd( MasterBathFxtrDistance[1] >  0 )==0 .OR. IfValidAnd( KitFxtrDistance[1] > 0 )==0 .OR.
             IfValidAnd( ThirdRoomFxtrDistance[1] >= 0 )==0)
         then  10002
         else  (MasterBathFxtrDistance[1] * 0.4) +
               (KitFxtrDistance[1]   * 0.4) +
               (ThirdRoomFxtrDistance[1] * 0.2)
         endif  }

; RES DHW REMOVAL
;   "Set ResSpcDHWFeatures:QualFxtrDistance[1]"    ResSpcDHWFeatures:QualFxtrDistance[1]  = {
;         if (IfValidAnd( NumFlrServedByResDHWSys[1] <= 1 ))
;         then  (7.5 + (0.008 * DwellingUnitArea)) / ValidOr( ResDHWSysRef[1]:WtrHtrCnt, 1 )
;         else  (7.5 + (0.005 * DwellingUnitArea)) / ValidOr( ResDHWSysRef[1]:WtrHtrCnt, 1 )
;         endif  }
;
;   ; replaced UserSpecCompactDist with SpecFxtrDistances - SAC 10/01/21
;   "Set ResSpcDHWFeatures:CompactFactor[1]"    ResSpcDHWFeatures:CompactFactor[1]  = {
;         if (ParentCompAssigned( ResDHWSysRef ) > 0 .AND. IfValidAnd( SpecFxtrDistances > 0 )==0 .AND.
;             IfValidAnd( UserCompactFactor > 0 ))
;         then  switch (ResDHWSysRef:CompactDist)
;                  case  "Basic Credit"                 :  0.7
;                  case  "Expanded Credit (HERS req'd)" :  UserCompactFactor
;                  default :  1
;               endswitch
;         else if (WtdFxtrDistance[1] >= 10000 .OR. IfValidAnd( NumFlrServedByResDHWSys[1] > 0 )==0) then  1
;         else if (IfValidAnd( WtdFxtrDistance[1] <= QualFxtrDistance[1] )==0) then  10
;         else if (ResDHWSysRef[1]:CompactDist == "Basic Credit") then  0.7
;         else  0.3 + (0.4 * WtdFxtrDistance[1] / QualFxtrDistance[1])
;         endif endif endif endif  }
;
;   "Set ResSpcDHWFeatures:CompactDistMsg[1]"       ResSpcDHWFeatures:CompactDistMsg[1]  = {
;         if (IfValidAnd( SpecFxtrDistances > 0 )==0)
;         then  UNDEFINED
;         else if (IfValidAnd( NumFlrServedByResDHWSys[1] > 0 )==0)
;         then  "Number of floors this DHW system serves must be specified for Compact Distrib. Credit"
;         else if (IfValidAnd( WtdFxtrDistance[1] > 10000 ))
;         then  "Distances to fixtures must be specified for Compact Distribution Credit"
;         else if (CompactFactor[1] == 10)
;         then  Format( "Weighted Distance of %.1f cannot exceed Qualification Distance of %.1f", WtdFxtrDistance[1], QualFxtrDistance[1] )
;         else if (ResDHWSysRef[1]:CompactDist == "Basic Credit")
;         then  Format( "Qualifies for Basic Compact credit with compactness factor of %.2f", CompactFactor[1] )
;         else  Format( "Qualifies for Expanded Compact credit with compactness factor of %.2f", CompactFactor[1] )
;         endif endif endif endif endif  }
END
;*************************************************************************


;*************************************************************************  - SAC 1/5/19
RULELIST "ProposedInput_MFam_ResSpcDHWFeatures_CompactDistDWHRMsg" 0 0 0 0

   "Blast combined Compact Distrib & DWHRSys Message for DHWSys assignment #1 if not assigned"    ResSpcDHWFeatures:CompactDistDWHRMsg[1]  = {
         if (ParentCompAssigned( ResDHWSysRef[1] )) then  UNCHANGED
         else  UNDEFINED  endif  }
   "Call subordinate rulelist to set combined Compact Distrib & DWHRSys Message for DHWSys assignment #1"    ResSpcDHWFeatures:Action  = {
         if (ParentCompAssigned( ResDHWSysRef[1] ))
         then  EvalRulelist( "ProposedInput_MFam_ResSpcDHWFeatures_CompactDistDWHRMsg_System1", 1 )
         else  UNCHANGED  endif  }
END
;*************************************************************************  - SAC 1/5/19
RULELIST "ProposedInput_MFam_ResSpcDHWFeatures_CompactDistDWHRMsg_System1" 0 0 0 0
; first set Compact Distrib portion of message
   ; replaced UserSpecCompactDist with SpecFxtrDistances - SAC 10/01/21
; RES DHW REMOVAL
;   "Set Compact Distrib portion of message for ResDHWSysRef #1"   ResSpcDHWFeatures:CompactDistDWHRMsg[1]  = {
;         if (LocalStatus( CompactDistErrorID[1] ) < 1) then  "Compact Distrib. not available"
;         else if (IfValidAnd( SpecFxtrDistances > 0 )==0 .AND. ResDHWSysRef[1]:CompactDist != "not compact")
;         then  if (IfValidAnd( UserCompactFactor[1] > 0 ))
;               then  Format( "User compactness factor %g", UserCompactFactor[1] )
;               else  "Compactness factor not entered"
;               endif
;         else if (CompactDistErrorID[1] > 0) then  "Compact Distrib. not available"
;         else if (IfValidAnd( NumFlrServedByResDHWSys[1] > 0 )==0 .OR.
;                  IfValidAnd( WtdFxtrDistance[1] > 10000 )) then  "Compact Distrib. not specified"
;         else if (CompactFactor[1] == 10) then  "Compact Distrib. not qualified"
;         else if (ResDHWSysRef[1]:CompactDist == "Basic Credit") then  "Basic Compact Distrib. qualified"
;         else  "Expanded Compact Distrib. qualified"
;         endif endif endif endif endif endif  }
;; then set DWHRSys portion of message
;   "Set DWHRSys portion of message for ResDHWSysRef #1"     ResSpcDHWFeatures:CompactDistDWHRMsg[1]  = {
;         if (IfValidAnd( NumResDWHRSysRefs[1] > 0 )==0 .OR. IfValidAnd( TotResDWHRSysShowers[1] > 0 )==0 .OR.
;             IfValidAnd( TotShowersServed[1] < TotResDWHRSysShowers[1] ))
;         then  CompactDistDWHRMsg[1] + " / Drain Water Heat Recov. not specified"
;         else if ((TotResDWHRSysShowers[1] / TotShowersServed[1]) <= 0.095)
;         then  Format( "%s / Heat Recovery from %.1f% of shower drains", CompactDistDWHRMsg[1], (TotResDWHRSysShowers[1] * 100 / TotShowersServed[1]) )
;         else  Format( "%s / Heat Recovery from %.0f% of shower drains", CompactDistDWHRMsg[1], (TotResDWHRSysShowers[1] * 100 / TotShowersServed[1]) )
;         endif endif  }
END
;*************************************************************************


;*************************************************************************  - SAC 12/26/18
RULELIST "ProposedInput_ResSpcDHWFeatures_DWHRSys" 0 0 0 0

   "Call subordinate rulelist to default DWHRSys for DHWSys assignment #1"    ResSpcDHWFeatures:Action  = {
         if (ParentCompAssigned( ResDHWSysRef[1] ))
         then  EvalRulelist( "ProposedInput_ResSpcDHWFeatures_DWHRSys_System1", 1 )
         else  UNCHANGED  endif  }
END
;*************************************************************************  - SAC 12/26/18
RULELIST "ProposedInput_ResSpcDHWFeatures_DWHRSys_System1" 0 0 0 0
; RES DHW REMOVAL
;   "Set ResSpcDHWFeatures:AllowShowerDWHR"    ResSpcDHWFeatures:AllowShowerDWHR  =    ; SAC 4/28/19 - flag indicating shower-side DWHR allowed (=> not served by central system serving more than 8 units)
;      {  if (IfValidAnd( ResDHWSysRef[1]:CentralDHW > 0 ) .AND. IfValidAnd( ResDHWSysRef[1]:LivingUnitCnt > 8 ))
;         then  0  else  1  endif  }

      ; ResSpcDHWFeatures:DWHRSysRef<1-6>[1],                 Default,   0,    1,   1,    1,  1,  1 BEMP_Obj,  3,  1,   1, "DWHRSys", 0, "",  1003, "DWHRSys equipment" 
      ; ResSpcDHWFeatures:DWHRSysConfig<1-6>[1],              Default,   0,    1,   1,    1,  1,  1 BEMP_Sym,  3,  1,   0,                 3008, "DWHRSys Configuration" 
   "Default ResSpcDHWFeatures:ResDWHRSysShowers[1]"    ResSpcDHWFeatures:ResDWHRSysShowers[1]  = {
         if (LocalCompAssigned( ResDWHRSysRef[1] )) then  1  else  UNDEFINED  endif  }
   "Default ResSpcDHWFeatures:ResDWHRSysShowers[2]"    ResSpcDHWFeatures:ResDWHRSysShowers[2]  = {
         if (LocalCompAssigned( ResDWHRSysRef[2] )) then  1  else  UNDEFINED  endif  }
   "Default ResSpcDHWFeatures:ResDWHRSysShowers[3]"    ResSpcDHWFeatures:ResDWHRSysShowers[3]  = {
         if (LocalCompAssigned( ResDWHRSysRef[3] )) then  1  else  UNDEFINED  endif  }
   "Default ResSpcDHWFeatures:ResDWHRSysShowers[4]"    ResSpcDHWFeatures:ResDWHRSysShowers[4]  = {
         if (LocalCompAssigned( ResDWHRSysRef[4] )) then  1  else  UNDEFINED  endif  }
   "Default ResSpcDHWFeatures:ResDWHRSysShowers[5]"    ResSpcDHWFeatures:ResDWHRSysShowers[5]  = {
         if (LocalCompAssigned( ResDWHRSysRef[5] )) then  1  else  UNDEFINED  endif  }
   "Default ResSpcDHWFeatures:ResDWHRSysShowers[6]"    ResSpcDHWFeatures:ResDWHRSysShowers[6]  = {
         if (LocalCompAssigned( ResDWHRSysRef[6] )) then  1  else  UNDEFINED  endif  }
   "Set ResSpcDHWFeatures:NumResDWHRSysRefs[1] - Number of DWHRSys object references are defined"    ResSpcDHWFeatures:NumResDWHRSysRefs[1]  = {
           if (LocalCompAssigned( ResDWHRSysRef[6] )) then  6
      else if (LocalCompAssigned( ResDWHRSysRef[5] )) then  5
      else if (LocalCompAssigned( ResDWHRSysRef[4] )) then  4
      else if (LocalCompAssigned( ResDWHRSysRef[3] )) then  3
      else if (LocalCompAssigned( ResDWHRSysRef[2] )) then  2
      else if (LocalCompAssigned( ResDWHRSysRef[1] )) then  1
      else   0  endif endif endif endif endif endif  }

   ; SAC 4/28/19 - added revised DWHR inputs replacing DWHRSysConfig w/ DWHRSysTakeCold & DWHRSysFeedHeater
   ;               w/ rules to default to no DWHRSysTakeCold* showers and 'yes' to DWHRSysFeedHeater* when served by central DHW systems serving > 8 DUs
   "Default ResSpcDHWFeatures:ResDWHRSysTakeCold[1]"    ResSpcDHWFeatures:ResDWHRSysTakeCold[1]  = {
         if (LocalCompAssigned( ResDWHRSysRef[1] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR < 1) then  0  else  ValidOr( ResDWHRSysShowers[1], 0 )  endif endif  }
   "Default ResSpcDHWFeatures:ResDWHRSysTakeCold[2]"    ResSpcDHWFeatures:ResDWHRSysTakeCold[2]  = {
         if (LocalCompAssigned( ResDWHRSysRef[2] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR < 1) then  0  else  ValidOr( ResDWHRSysShowers[2], 0 )  endif endif  }
   "Default ResSpcDHWFeatures:ResDWHRSysTakeCold[3]"    ResSpcDHWFeatures:ResDWHRSysTakeCold[3]  = {
         if (LocalCompAssigned( ResDWHRSysRef[3] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR < 1) then  0  else  ValidOr( ResDWHRSysShowers[3], 0 )  endif endif  }
   "Default ResSpcDHWFeatures:ResDWHRSysTakeCold[4]"    ResSpcDHWFeatures:ResDWHRSysTakeCold[4]  = {
         if (LocalCompAssigned( ResDWHRSysRef[4] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR < 1) then  0  else  ValidOr( ResDWHRSysShowers[4], 0 )  endif endif  }
   "Default ResSpcDHWFeatures:ResDWHRSysTakeCold[5]"    ResSpcDHWFeatures:ResDWHRSysTakeCold[5]  = {
         if (LocalCompAssigned( ResDWHRSysRef[5] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR < 1) then  0  else  ValidOr( ResDWHRSysShowers[5], 0 )  endif endif  }
   "Default ResSpcDHWFeatures:ResDWHRSysTakeCold[6]"    ResSpcDHWFeatures:ResDWHRSysTakeCold[6]  = {
         if (LocalCompAssigned( ResDWHRSysRef[6] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR < 1) then  0  else  ValidOr( ResDWHRSysShowers[6], 0 )  endif endif  }
   "Default ResSpcDHWFeatures:ResDWHRSysFeedHeater[1]"  ResSpcDHWFeatures:ResDWHRSysFeedHeater[1]  = {
         if (LocalCompAssigned( ResDWHRSysRef[1] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR < 1) then  1  else  0  endif endif  }
   "Default ResSpcDHWFeatures:ResDWHRSysFeedHeater[2]"  ResSpcDHWFeatures:ResDWHRSysFeedHeater[2]  = {
         if (LocalCompAssigned( ResDWHRSysRef[2] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR < 1) then  1  else  0  endif endif  }
   "Default ResSpcDHWFeatures:ResDWHRSysFeedHeater[3]"  ResSpcDHWFeatures:ResDWHRSysFeedHeater[3]  = {
         if (LocalCompAssigned( ResDWHRSysRef[3] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR < 1) then  1  else  0  endif endif  }
   "Default ResSpcDHWFeatures:ResDWHRSysFeedHeater[4]"  ResSpcDHWFeatures:ResDWHRSysFeedHeater[4]  = {
         if (LocalCompAssigned( ResDWHRSysRef[4] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR < 1) then  1  else  0  endif endif  }
   "Default ResSpcDHWFeatures:ResDWHRSysFeedHeater[5]"  ResSpcDHWFeatures:ResDWHRSysFeedHeater[5]  = {
         if (LocalCompAssigned( ResDWHRSysRef[5] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR < 1) then  1  else  0  endif endif  }
   "Default ResSpcDHWFeatures:ResDWHRSysFeedHeater[6]"  ResSpcDHWFeatures:ResDWHRSysFeedHeater[6]  = {
         if (LocalCompAssigned( ResDWHRSysRef[6] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR < 1) then  1  else  0  endif endif  }

   "Set ResSpcDHWFeatures:TotResDWHRSysShowers[1] - 1"     ResSpcDHWFeatures:TotResDWHRSysShowers[1]  = {
         if (LocalCompAssigned( ResDWHRSysRef[1] )) then  ResDWHRSysShowers[1]  else  0  endif  }
   "Set ResSpcDHWFeatures:TotResDWHRSysShowers[1] - 2"     ResSpcDHWFeatures:TotResDWHRSysShowers[1]  = {
         if (LocalCompAssigned( ResDWHRSysRef[2] )) then  TotResDWHRSysShowers[1] + ResDWHRSysShowers[2]  else  UNCHANGED  endif  }
   "Set ResSpcDHWFeatures:TotResDWHRSysShowers[1] - 3"     ResSpcDHWFeatures:TotResDWHRSysShowers[1]  = {
         if (LocalCompAssigned( ResDWHRSysRef[3] )) then  TotResDWHRSysShowers[1] + ResDWHRSysShowers[3]  else  UNCHANGED  endif  }
   "Set ResSpcDHWFeatures:TotResDWHRSysShowers[1] - 4"     ResSpcDHWFeatures:TotResDWHRSysShowers[1]  = {
         if (LocalCompAssigned( ResDWHRSysRef[4] )) then  TotResDWHRSysShowers[1] + ResDWHRSysShowers[4]  else  UNCHANGED  endif  }
   "Set ResSpcDHWFeatures:TotResDWHRSysShowers[1] - 5"     ResSpcDHWFeatures:TotResDWHRSysShowers[1]  = {
         if (LocalCompAssigned( ResDWHRSysRef[5] )) then  TotResDWHRSysShowers[1] + ResDWHRSysShowers[5]  else  UNCHANGED  endif  }
   "Set ResSpcDHWFeatures:TotResDWHRSysShowers[1] - 6"     ResSpcDHWFeatures:TotResDWHRSysShowers[1]  = {
         if (LocalCompAssigned( ResDWHRSysRef[6] )) then  TotResDWHRSysShowers[1] + ResDWHRSysShowers[6]  else  UNCHANGED  endif  }

   "Default ResSpcDHWFeatures:TotShowersServed[1]"   ResSpcDHWFeatures:TotShowersServed[1]  = {  max( 1, TotResDWHRSysShowers[1] )  }
   "Default ResSpcDHWFeatures:TotBathsServed[1]"     ResSpcDHWFeatures:TotBathsServed[1]    = {  1  }    ; SAC 4/28/19 (tic #2553)

   "Set ResSpcDHWFeatures:NumResDWHRSysDevs[1] - error detection"   ResSpcDHWFeatures:NumResDWHRSysDevs[1]  = {
               if (NumResDWHRSysRefs[1] > 0 .AND. TotShowersServed[1] < TotResDWHRSysShowers[1])
               then  -1
               else   0
               endif  }
; RES DHW REMOVAL
;   "Set ResSpcDHWFeatures:NumResDWHRSysDevs[1] - DWHRSys 1"   ResSpcDHWFeatures:NumResDWHRSysDevs[1]  = {
;         if (NumResDWHRSysDevs[1] < 0 .OR. NumResDWHRSysRefs[1] < 1) then  UNCHANGED
;         else if (IfValidAnd( ResDWHRSysRef[1]:CSARtdEff > 0 ) .AND. IfValidAnd( ResDWHRSysShowers[1] > 0 )) then  1
;         else  UNCHANGED  endif endif  }
;   "Set ResSpcDHWFeatures:NumResDWHRSysDevs[1] - DWHRSys 2"   ResSpcDHWFeatures:NumResDWHRSysDevs[1]  = {
;         if (NumResDWHRSysDevs[1] < 0 .OR. NumResDWHRSysRefs[1] < 2) then  UNCHANGED
;         else if (IfValidAnd( ResDWHRSysRef[2]:CSARtdEff > 0 ) .AND. IfValidAnd( ResDWHRSysShowers[2] > 0 )) then  NumResDWHRSysDevs[1] + 1
;         else  UNCHANGED  endif endif  }
;   "Set ResSpcDHWFeatures:NumResDWHRSysDevs[1] - DWHRSys 3"   ResSpcDHWFeatures:NumResDWHRSysDevs[1]  = {
;         if (NumResDWHRSysDevs[1] < 0 .OR. NumResDWHRSysRefs[1] < 3) then  UNCHANGED
;         else if (IfValidAnd( ResDWHRSysRef[3]:CSARtdEff > 0 ) .AND. IfValidAnd( ResDWHRSysShowers[3] > 0 )) then  NumResDWHRSysDevs[1] + 1
;         else  UNCHANGED  endif endif  }
;   "Set ResSpcDHWFeatures:NumResDWHRSysDevs[1] - DWHRSys 4"   ResSpcDHWFeatures:NumResDWHRSysDevs[1]  = {
;         if (NumResDWHRSysDevs[1] < 0 .OR. NumResDWHRSysRefs[1] < 4) then  UNCHANGED
;         else if (IfValidAnd( ResDWHRSysRef[4]:CSARtdEff > 0 ) .AND. IfValidAnd( ResDWHRSysShowers[4] > 0 )) then  NumResDWHRSysDevs[1] + 1
;         else  UNCHANGED  endif endif  }
;   "Set ResSpcDHWFeatures:NumResDWHRSysDevs[1] - DWHRSys 5"   ResSpcDHWFeatures:NumResDWHRSysDevs[1]  = {
;         if (NumResDWHRSysDevs[1] < 0 .OR. NumResDWHRSysRefs[1] < 5) then  UNCHANGED
;         else if (IfValidAnd( ResDWHRSysRef[5]:CSARtdEff > 0 ) .AND. IfValidAnd( ResDWHRSysShowers[5] > 0 )) then  NumResDWHRSysDevs[1] + 1
;         else  UNCHANGED  endif endif  }
;   "Set ResSpcDHWFeatures:NumResDWHRSysDevs[1] - DWHRSys 6"   ResSpcDHWFeatures:NumResDWHRSysDevs[1]  = {
;         if (NumResDWHRSysDevs[1] < 0 .OR. NumResDWHRSysRefs[1] < 6) then  UNCHANGED
;         else if (IfValidAnd( ResDWHRSysRef[6]:CSARtdEff > 0 ) .AND. IfValidAnd( ResDWHRSysShowers[6] > 0 )) then  NumResDWHRSysDevs[1] + 1
;         else  UNCHANGED  endif endif  }

; TO DO - set based on DUT assignments ->  ResSpcDHWFeatures:CntrlDWHRSysShowers,            NotInput,   0,    0,   0,    1,  1,  1 BEMP_Int,  1,   1003, "Number of showers this central DHWSys recovers heat from"
   "Set ResSpcDHWFeatures:ResDWHRSysSummaryMsg[1]"      ResSpcDHWFeatures:ResDWHRSysSummaryMsg[1]  =     ; SAC 4/29/19 - updated (tic #2553)
      {  if (NumResDWHRSysRefs[1] < 1)
         then  "Assign ResDWHRSys devices below to enable shower drain heat recovery"
         else if (TotResDWHRSysShowers[1] < 1)
         then  "Specify number of shower drains below to enable shower drain ht recov"
         else if (TotShowersServed[1] < TotResDWHRSysShowers[1])
         ;then  Format( "ERROR:  Total showers served (%.0f) must be >= %.0f (# DWHRSys showers)", TotShowersServed[1], TotDWHRSysShowers[1] )
         then  Format( "ERROR:  Total shower drains served by this system must be >= %.0f (number of ResDWHRSys showers)", TotResDWHRSysShowers[1] )
         else if (LocalCompAssigned( ResDWHRSysRef[1] ) .AND. IfValidAnd( ResDWHRSysShowers[1] > 0 ) .AND. IfValidAnd( ResDWHRSysTakeCold[1] > ResDWHRSysShowers[1] ))
         then  Format( "ERROR:  System #1 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", ResDWHRSysTakeCold[1], ResDWHRSysShowers[1] )
         else if (LocalCompAssigned( ResDWHRSysRef[1] ) .AND. IfValidAnd( ResDWHRSysShowers[1] > 0 ) .AND. IfValidAnd( ResDWHRSysTakeCold[1] < 1 ) .AND. IfValidAnd( ResDWHRSysFeedHeater[1] > 0 )==0)
         then  Format( "ERROR:  System #1 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( ResDWHRSysRef[2] ) .AND. IfValidAnd( ResDWHRSysShowers[2] > 0 ) .AND. IfValidAnd( ResDWHRSysTakeCold[2] > ResDWHRSysShowers[2] ))
         then  Format( "ERROR:  System #2 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", ResDWHRSysTakeCold[2], ResDWHRSysShowers[2] )
         else if (LocalCompAssigned( ResDWHRSysRef[2] ) .AND. IfValidAnd( ResDWHRSysShowers[2] > 0 ) .AND. IfValidAnd( ResDWHRSysTakeCold[2] < 1 ) .AND. IfValidAnd( ResDWHRSysFeedHeater[2] > 0 )==0)
         then  Format( "ERROR:  System #2 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( ResDWHRSysRef[3] ) .AND. IfValidAnd( ResDWHRSysShowers[3] > 0 ) .AND. IfValidAnd( ResDWHRSysTakeCold[3] > ResDWHRSysShowers[3] ))
         then  Format( "ERROR:  System #3 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", ResDWHRSysTakeCold[3], ResDWHRSysShowers[3] )
         else if (LocalCompAssigned( ResDWHRSysRef[3] ) .AND. IfValidAnd( ResDWHRSysShowers[3] > 0 ) .AND. IfValidAnd( ResDWHRSysTakeCold[3] < 1 ) .AND. IfValidAnd( ResDWHRSysFeedHeater[3] > 0 )==0)
         then  Format( "ERROR:  System #3 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( ResDWHRSysRef[4] ) .AND. IfValidAnd( ResDWHRSysShowers[4] > 0 ) .AND. IfValidAnd( ResDWHRSysTakeCold[4] > ResDWHRSysShowers[4] ))
         then  Format( "ERROR:  System #4 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", ResDWHRSysTakeCold[4], ResDWHRSysShowers[4] )
         else if (LocalCompAssigned( ResDWHRSysRef[4] ) .AND. IfValidAnd( ResDWHRSysShowers[4] > 0 ) .AND. IfValidAnd( ResDWHRSysTakeCold[4] < 1 ) .AND. IfValidAnd( ResDWHRSysFeedHeater[4] > 0 )==0)
         then  Format( "ERROR:  System #4 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( ResDWHRSysRef[5] ) .AND. IfValidAnd( ResDWHRSysShowers[5] > 0 ) .AND. IfValidAnd( ResDWHRSysTakeCold[5] > ResDWHRSysShowers[5] ))
         then  Format( "ERROR:  System #5 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", ResDWHRSysTakeCold[5], ResDWHRSysShowers[5] )
         else if (LocalCompAssigned( ResDWHRSysRef[5] ) .AND. IfValidAnd( ResDWHRSysShowers[5] > 0 ) .AND. IfValidAnd( ResDWHRSysTakeCold[5] < 1 ) .AND. IfValidAnd( ResDWHRSysFeedHeater[5] > 0 )==0)
         then  Format( "ERROR:  System #5 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( ResDWHRSysRef[6] ) .AND. IfValidAnd( ResDWHRSysShowers[6] > 0 ) .AND. IfValidAnd( ResDWHRSysTakeCold[6] > ResDWHRSysShowers[6] ))
         then  Format( "ERROR:  System #6 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", ResDWHRSysTakeCold[6], ResDWHRSysShowers[6] )
         else if (LocalCompAssigned( ResDWHRSysRef[6] ) .AND. IfValidAnd( ResDWHRSysShowers[6] > 0 ) .AND. IfValidAnd( ResDWHRSysTakeCold[6] < 1 ) .AND. IfValidAnd( ResDWHRSysFeedHeater[6] > 0 )==0)
         then  Format( "ERROR:  System #6 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if ((TotResDWHRSysShowers[1] / TotShowersServed[1]) <= 0.2)
         then  Format( "Heat being recovered from %.1f% of shower drains", (TotResDWHRSysShowers * 100 / TotShowersServed) )
         else  Format( "Heat being recovered from %.0f% of shower drains", (TotResDWHRSysShowers * 100 / TotShowersServed) )
         endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  endif  }

   ;      if (IfValidAnd( ResDHWSysRef[1]:CentralDHW > 0 )==0)
   ;      then  ; non-central MFam
   ;      else
   ;            "Message describing central DHWSys drain water heat recovery"
   ;      endif  }

   "Set ResSpcDHWFeatures:ResDWHRSysConfigDesc[1]"      ResSpcDHWFeatures:ResDWHRSysConfigDesc[1]  = {
         if (NumResDWHRSysRefs[1] < 1) then  UNDEFINED
         else  "RTF\DWHX_Config.rtf"  endif  }
END
;*************************************************************************

; RES DHW REMOVAL - SAC 03/09/22
;  ;*************************************************************************
;  ; SAC 1/12/19 - replaced original DWHR default/std design rules (above) w/ updated version for 2019
;  RULELIST  "ForceDefault_ShowerDrainHeatRecov_MFam" 1 0 0 1
;  ; RES DHW REMOVAL
;  ;   ;"Blast Proj:ShwrDRAINHREFF"    Proj:ShwrDRAINHREFF  = {  0  }
;  ;   ; Com version stored by ResDHWSys
;  ;   "Blast ResDHWSys:HaveShowerDrainHtRcvry"    ResDHWSys:HaveShowerDrainHtRcvry  = {  0  }
;  
;     "Setup std design ResSpcDHWFeatures:ResDHWSysRef[1]"   ResSpcDHWFeatures:Action  =        ; SAC 10/8/19 - use IfValidAnd() to access DwellingUnitArea in case ResSpcDHWFeatures not properly initialized
;        {  if (IfValidAnd( ResDHWSysRef[1]:IsStdDesignElec > 0 ) .AND. IfValidAnd( DwellingUnitArea > 0 ))
;           then  EvalRulelist( "ForceDefault_ShowerDrainHeatRecov_MFam_DUT1", 1 )  else  UNCHANGED  endif  }
;  END
;  RULELIST  "ForceDefault_ShowerDrainHeatRecov_MFam_DUT1" 1 0 1 1
;     "Set std design ResSpcDHWFeatures:TotShowersServed[1]"    ResSpcDHWFeatures:TotShowersServed[1]  = {
;           1 + int( (ValidOr( DwellingUnitBedroomCnt, 1 )+1)/2.5 )  }
;     "Set std design ResSpcDHWFeatures:ResDWHRSysRef[1]"      ResSpcDHWFeatures:ResDWHRSysRef[1]     = {
;           if (ResDHWSysRef[1]:CentralDHW)
;           then  Proj:StdElecDWHRSysRef[2]
;           else  Proj:StdElecDWHRSysRef[1]  endif  }
;     "Set std design ResSpcDHWFeatures:ResDWHRSysShowers[1]"  ResSpcDHWFeatures:ResDWHRSysShowers[1] = {
;           if (ResDHWSysRef[1]:CentralDHW)
;           then  TotShowersServed[1]
;           else  TotShowersServed[1] * T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovShwrSrvd( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdsVersionYr, "BldgType", Proj:BldgTypeTblStr ) / 100  endif  }
;  ;   "Set std design ResSpcDHWFeatures:ResDWHRSysConfig[1]"   ResSpcDHWFeatures:ResDWHRSysConfig[1]  = {
;  ;         if (ResDHWSysRef[1]:CentralDHW)
;  ;         then  "Equal Flow"
;  ;         else  T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovConfig( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdsVersionYr, "BldgType", Proj:BldgTypeTblStr )  endif  }
;     ; SAC 4/29/19 - replaced above Config rule to following setting newer inputs
;  ; RES DHW REMOVAL
;  ;   "Set std design ResSpcDHWFeatures:ResDWHRSysTakeCold[1]"  ResSpcDHWFeatures:ResDWHRSysTakeCold[1] = {
;  ;         if (ResDHWSysRef[1]:CentralDHW)
;  ;         then  if (ResDHWSysRef[1]:LivingUnitCnt > 8) then  0  else  ResDWHRSysShowers[1]  endif
;  ;         else  switch (T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovConfig( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdsVersionYr, "BldgType", Proj:BldgTypeTblStr ))
;  ;                  case  "Equal Flow"              :  ResDWHRSysShowers[1]
;  ;                  case  "Unequal - Water Heater"  :  0
;  ;                  case  "Unequal - Shower"        :  ResDWHRSysShowers[1]
;  ;                  default  :  0
;  ;               endswitch  endif  }
;  ;   "Set std design ResSpcDHWFeatures:ResDWHRSysFeedHeater[1]"  ResSpcDHWFeatures:ResDWHRSysFeedHeater[1] = {
;  ;         if (ResDHWSysRef[1]:CentralDHW)
;  ;         then  1
;  ;         else  switch (T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovConfig( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdsVersionYr, "BldgType", Proj:BldgTypeTblStr ))
;  ;                  case  "Equal Flow"              :  1
;  ;                  case  "Unequal - Water Heater"  :  1
;  ;                  case  "Unequal - Shower"        :  0
;  ;                  default  :  0
;  ;               endswitch  endif  }
;     "Blast std design ResSpcDHWFeatures:ResDWHRSysRef[2]"     ResSpcDHWFeatures:ResDWHRSysRef[2]  = {  UNDEFINED  }
;     "Blast std design ResSpcDHWFeatures:ResDWHRSysRef[3]"     ResSpcDHWFeatures:ResDWHRSysRef[3]  = {  UNDEFINED  }
;     "Blast std design ResSpcDHWFeatures:ResDWHRSysRef[4]"     ResSpcDHWFeatures:ResDWHRSysRef[4]  = {  UNDEFINED  }
;     "Blast std design ResSpcDHWFeatures:ResDWHRSysRef[5]"     ResSpcDHWFeatures:ResDWHRSysRef[5]  = {  UNDEFINED  }
;     "Blast std design ResSpcDHWFeatures:ResDWHRSysRef[6]"     ResSpcDHWFeatures:ResDWHRSysRef[6]  = {  UNDEFINED  }
;  END
;  ;;*************************************************************************  SAC 1/12/19
;  ;RULELIST  "Remove_ShowerDrainHeatRecov_MFam" 1 0 0 1
;  ;   ;"Blast Proj:ShwrDRAINHREFF"    Proj:ShwrDRAINHREFF  = {  0  }
;  ;   ; Com version stored by ResDHWSys
;  ;   "Blast ResDHWSys:HaveShowerDrainHtRcvry"    ResDHWSys:HaveShowerDrainHtRcvry  = {  0  }
;  ;   "Blast std design ResSpcDHWFeatures:ResDHWSysRef[1]"   ResSpcDHWFeatures:Action  = {
;  ;         if (IfValidAnd( ResDHWSysRef[1]:Status != "Existing" ) .AND. DwellingUnitArea > 0)
;  ;         then  EvalRulelist( "Blast_ResSpcDHWFeatures_DWHRSysRefs_1", 1 )  else  UNCHANGED  endif  }
;  ;END
;  ;;*************************************************************************

; RES DHW REMOVAL - SAC 03/09/22
;  ;*************************************************************************  - SAC 1/12/19
;  RULELIST  "ForceDefault_CompactDistribution_MFam" 1 0 1 1
;  ; RES DHW REMOVAL
;  ;   ; first make changes to individual DHWSys CompactDist settings
;  ;   "Setup std design Compact Distribution inputs for indiv ResDHWSys objects"    ResDHWSys:Action  = {
;  ;         if (IfValidAnd( IsExistingResDHWSys > 0.5 ) .OR. CentralDHW) then  UNCHANGED
;  ;         else  EvalRulelist( "ForceDefault_CompactDistribution_SFam" )  endif  }
;  
;     ; then mods to DwellingUnitType data
;     "Setup std design ResSpcDHWFeatures:ResDHWSysRef[1]:CompactDist"   ResSpcDHWFeatures:Action  =        ; SAC 10/8/19 - use IfValidAnd() to access DwellingUnitArea in case ResSpcDHWFeatures not properly initialized
;        {  if (IfValidAnd( ResDHWSysRef[1]:CentralDHW = 0 ) .AND. IfValidAnd( DwellingUnitArea > 0 ))
;           then  EvalRulelist( "ForceDefault_CompactDistribution_MFam_DUT1", 1 )  else  UNCHANGED  endif  }
;  END
;  RULELIST  "ForceDefault_CompactDistribution_MFam_DUT1" 1 0 1 1
;     ;"Set std design ResSpcDHWFeatures:UserSpecCompactDist[1]"    ResSpcDHWFeatures:UserSpecCompactDist[1]  = {
;     ;      if (IfValidAnd( ResDHWSysRef[1]:CompactDist != "not compact" )) then  1  else  0  endif  }
;     ; replaced UserSpecCompactDist with SpecFxtrDistances - SAC 10/01/21
;  ; RES DHW REMOVAL
;  ;   "Set std design ResSpcDHWFeatures:SpecFxtrDistances"      ResSpcDHWFeatures:SpecFxtrDistances  = 
;  ;      {  if (IfValidAnd( ResDHWSysRef[1]:CompactDist != "not compact" )) then  0  else  1  endif  }
;  ;   "Set std design ResSpcDHWFeatures:UserCompactFactor[1]"    ResSpcDHWFeatures:UserCompactFactor[1]  = {
;  ;         if (IfValidAnd( SpecFxtrDistances > 0 )) then  UNDEFINED
;  ;         else if (IfValidAnd( ResDHWSysRef[1]:IsStdDesignElec > 0 ))
;  ;         then  T24RClimateZoneCodeBase:ElecDHWCompactFactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdsVersionYr, "BldgType", Proj:BldgTypeTblStr )
;  ;         else  0.7  endif endif  }
;  END
;  ;*************************************************************************  - SAC 10/01/21
;  RULELIST  "Blast_ResSpcDHWFeatures_UserCompactFactor" 1 0 0 0
;     "Blast ResSpcDHWFeatures:UserCompactFactor"     ResSpcDHWFeatures:UserCompactFactor = {  UNDEFINED  }
;  END

; RES DHW REMOVAL
;;*************************************************************************  - SAC 1/12/19  / SAC 1/29/19 - ported from Res
;RULELIST  "ForceDefault_CompactDistribution_SFam" 1 0 1 1
;   "Set std design ResDHWSys:CompactDist"    ResDHWSys:CompactDist  = {
;         if (IfValidAnd( IsStdDesignElec > 0 ))
;         then  switch (T24RClimateZoneCodeBase:ElecDHWCompactFactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdsVersionYr, "BldgType", Proj:BldgTypeTblStr ))
;                  case  0.0 :  "not compact"   ; covers DRtg run
;                  case  1.0 :  "not compact"
;                  case  0.7 :  "Basic Credit"
;                  default   :  "Expanded Credit (HERS req'd)"
;               endswitch
;         else  T24RClimateZoneCodeBase:DHWCompactDistrib( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdsVersionYr, "BldgType", Proj:BldgTypeTblStr )
;         endif  }
;END
;
;;************************************************************************* - SAC 1/13/20 (Com tic #3156)
;RULELIST "PostProposedInput_CentralHPWH" 1 0 1 0
;;*************************************************************************
;;"dbg" ResDHWSys:Action = { PostMessageToLog( "      evaluating 'PostProposedInput_CentralHPWH' rules on ResDHWSys '%s'...", Name ) }
;
;   "Delete all child ResWtrHtrs"       ResDHWSys:Action  = {  DeleteChildren( ResWtrHtr )  }
;   "Delete all child ResLpTankHtr"     ResDHWSys:Action  = {  DeleteChildren( ResLpTankHtr )  }
;
;   "Import ResDHWSys:PropHPWHRef from library"   ResDHWSys:PropHPWHRef  =
;      {  RuleLibrary( ResWtrHtr, "t24r-CHPWH", 1 )  }
;   "Set proposed central HPWH Parent"  ResDHWSys:PropHPWHRef:Parent  = {  Name  }
;
;   "Setup Central HPWH"    ResDHWSys:Action =      ; SAC 6/1/20   ; SAC 03/08/21
;      {  if (EnumValue( CentralHPWHSysDesc ) == 1)
;         then  if (EnumValue( CentralHPWHIntegratedPackagedType ) == 1)
;               then  EvalRulelist( "PostProposedInput_CentralHPWH_Integrated_NEEA", 1 )
;               else  EvalRulelist( "PostProposedInput_CentralHPWH_Integrated_Comm", 1 )  endif
;         else        EvalRulelist( "PostProposedInput_CentralHPWH_Large", 1 )  endif  }
;END
;;************************************************************************* - SAC 1/5/20 (tic #862)
;RULELIST "PostProposedInput_CentralHPWH_Large" 1 0 1 0
;
;; all subsequent rules re-defined for new CHPWH inputs - SAC 5/28/20
;   "Set ResDHWSys:PropHPWHRef:CentralHPWHCprsrType"     ResDHWSys:PropHPWHRef:CentralHPWHCprsrType  =     ; SAC 3/9/20 (Colmac)
;      {  CentralHPWHCprsrType  }
;   "Set ResDHWSys:PropHPWHRef:IsBuiltUp flag"     ResDHWSys:PropHPWHRef:IsBuiltUp  = {  1  }              ; SAC 5/28/20
;
;   ; SAC 2/4/20 - CHPWHAutosize removed (tic #1197)
;   ; SAC 4/29/20 - revised rule to divide CHPWHTotTankVol by CHPWHNumCompFlt so that NonStdTankVol represents tank volume PER compressor, which is how CSE uses/interprets it (tic #862)
;   "Set ResDHWSys:PropHPWHRef:NonStdTankVol (if specified)"   ResDHWSys:PropHPWHRef:NonStdTankVol  =
;      {  if (IfValidAnd( CentralHPWHPriTankVol > 0 ) .AND. IfValidAnd( CentralHPWHCprsrCnt > 0 ))
;         then  CentralHPWHPriTankVol / CentralHPWHCprsrCnt
;         else  UNCHANGED  endif  }
;;   "Set ResDHWSys:PropHPWHRef:TankZone to '- none -'"   ResDHWSys:PropHPWHRef:TankZone  =
;;      {  NONE  }     ; should cause simulated location to be UnCond (avg of DBT & 70)
;
;   "Set ResDHWSys:PropHPWHRef:TankCntSim (tanks per htr/compressor)"    ResDHWSys:PropHPWHRef:TankCntSim  =       ; SAC 5/28/20
;      {  if (EnumValue( CentralHPWHSysDesc ) == 2)
;         then  ValidOr( CentralHPWHTankCnt, 1 ) / CentralHPWHCprsrCnt
;         else  UNDEFINED  endif  }
;   "Set ResDHWSys:PropHPWHRef:InsRValSim"             ResDHWSys:PropHPWHRef:InsRValSim  =       ; SAC 5/28/20
;      {  if (EnumValue( CentralHPWHSysDesc ) == 2)
;         then  CentralHPWHTankRVal
;         else  UNDEFINED  endif  }
;
;; not valid for BuiltUp ASHPX - which is always the case here - SAC 6/1/20
;;   "Set ResDHWSys:PropHPWHRef:ResHtPwrSim[1]-upper"     ResDHWSys:PropHPWHRef:ResHtPwrSim[1] =
;;      {  if (IfValidAnd( CHPWHTotTankVol > 0 ) .AND. IfValidAnd( CentralHPWHCprsrCnt > 0 ))
;;         then  1000 * DHWHeater[1]:NonStdTankVol / 10
;;         else  UNDEFINED  endif  }
;;   "Set ResDHWSys:PropHPWHRef:ResHtPwrSim[2]-lower"     ResDHWSys:PropHPWHRef:ResHtPwrSim[2] = {  DHWHeater[1]:ResHtPwrSim[1]  }
;
;; PRIOR CHPWH rules - SAC 5/28/20
;;   "Set ResDHWSys:PropHPWHRef:CentralHPWHCprsrType"     ResDHWSys:PropHPWHRef:CentralHPWHCprsrType  =     ; SAC 3/9/20 (Colmac)
;;      {  CHPWHCompType  }
;;
;;   ; SAC 2/4/20 - CHPWHAutosize removed (tic #1197)
;;   ; SAC 4/29/20 - revised rule to divide CHPWHTotTankVol by CentralHPWHCprsrCnt so that NonStdTankVol represents tank volumer PER compressor, which is how CSE uses/interprets it (tic #862)
;;   "Set ResDHWSys:PropHPWHRef:NonStdTankVol (if specified)"   ResDHWSys:PropHPWHRef:NonStdTankVol  =
;;      {  if (IfValidAnd( CHPWHTotTankVol > 0 ) .AND. IfValidAnd( CentralHPWHCprsrCnt > 0 ))
;;         then  CHPWHTotTankVol / CentralHPWHCprsrCnt
;;         else  UNCHANGED  endif  }
;;   "Set ResDHWSys:PropHPWHRef:TankZone to '- none -'"   ResDHWSys:PropHPWHRef:TankZone  =
;;      {  NONE  }     ; should cause simulated location to be UnCond (avg of DBT & 70)
;;
;;   ; SAC 3/9/20 - revised following rules to set EITHER ResDHWSys:HeaterMultFlt[1] OR HeaterMult[1] based on EnableResearchMode
;;   "Set ResDHWSys:HeaterMultFlt[1]"    ResDHWSys:HeaterMultFlt[1]  =
;;     ; {  if (IfValidAnd( CHPWHAutosize = 0 )==0 .OR.          - SAC 2/4/20 - CHPWHAutosize removed (tic #1197)
;;     ;        IfValidAnd( CentralHPWHCprsrCnt  > 0 )==0) then  1
;;      {  if (IfValidAnd( Proj:EnableResearchMode > 0 )==0) then  UNDEFINED
;;         else if (IfValidAnd( CentralHPWHCprsrCnt  > 0 )==0) then  1
;;         else  CentralHPWHCprsrCnt  endif endif  }
;;   "Set ResDHWSys:HeaterMult[1]"       ResDHWSys:HeaterMult[1]  =
;;      {  if (IfValidAnd( Proj:EnableResearchMode > 0 )) then  UNDEFINED
;;         else if (IfValidAnd( CHPWHNumComp  > 0 )==0) then  1
;;         else  CHPWHNumComp  endif endif  }
;;
;;   "Import ResDHWSys:LoopHeater from library"   ResDHWSys:LoopHeater  =
;;      {  RuleLibrary( DHWLoopTankHeater, "t24-LpTankHtr", 1 )  }
;;   "Set ResDHWSys:LoopHeater:whVol (if valid)"   ResDHWSys:LoopHeater:whVol  =
;;      {  if (IfValidAnd( CHPWHLoopTankVol > 0 )) then  CHPWHLoopTankVol
;;         else  UNCHANGED  endif  }
;;   "Set ResDHWSys:LoopHeater:TankZone to '- none -'"     ResDHWSys:LoopHeater:TankZone  =
;;      {  NONE  }     ; should cause simulated location to be UnCond (avg of DBT & 70)
;
;   "call subordinate rulelist to set remaining DHWHeater properties"    ResDHWSys:Action =
;      {  EvalRulelist( "PostProposedInput_CentralHPWH_LargeAndIntegrated", 1 )  }
;END
;;************************************************************************* - SAC 6/1/20
;RULELIST "PostProposedInput_CentralHPWH_Integrated_NEEA" 1 0 1 0
;
;   "Set ResDHWSys:PropHPWHRef:HPWHCat"         ResDHWSys:PropHPWHRef:HPWHCat    = {  "Residential (NEEA rated) Product"  }    ; SAC 03/08/21
;   "Set ResDHWSys:PropHPWHRef:HPWHBrand"       ResDHWSys:PropHPWHRef:HPWHBrand  = {  CentralHPWHBrand  }
;   "Set ResDHWSys:PropHPWHRef:HPWHModel"       ResDHWSys:PropHPWHRef:HPWHModel  = {  CentralHPWHModel  }
;
;;   ; SAC 2/4/20 - CHPWHAutosize removed (tic #1197)
;;   ; SAC 4/29/20 - revised rule to divide CHPWHTotTankVol by CentralHPWHCprsrCnt so that NonStdTankVol represents tank volumer PER compressor, which is how CSE uses/interprets it (tic #862)
;;   "Set ResDHWSys:PropHPWHRef:NonStdTankVol (if specified)"   ResDHWSys:PropHPWHRef:NonStdTankVol  =
;;      {  if (IfValidAnd( CHPWHTotTankVol > 0 ) .AND. IfValidAnd( CentralHPWHCprsrCnt > 0 ))
;;         then  CHPWHTotTankVol / CentralHPWHCprsrCnt
;;         else  UNCHANGED  endif  }
;;   "Set ResDHWSys:PropHPWHRef:TankZone to '- none -'"   ResDHWSys:PropHPWHRef:TankZone  =
;;      {  NONE  }     ; should cause simulated location to be UnCond (avg of DBT & 70)
;
;;   "Set ResDHWSys:PropHPWHRef:TankCntSim (tanks per htr/compressor)"    ResDHWSys:PropHPWHRef:TankCntSim  =       ; SAC 5/28/20
;;      {  if (EnumValue( CentralHPWHSysDesc ) == 2)
;;         then  CHPWHTankCount / CentralHPWHCprsrCnt
;;         else  UNDEFINED  endif  }
;;   "Set ResDHWSys:PropHPWHRef:InsRValSim"             ResDHWSys:PropHPWHRef:InsRValSim  =       ; SAC 5/28/20
;;      {  if (EnumValue( CentralHPWHSysDesc ) == 2)
;;         then  CHPWHTankRVal
;;         else  UNDEFINED  endif  }
;
;   "call subordinate rulelist to set remaining DHWHeater properties"    ResDHWSys:Action =
;      {  EvalRulelist( "PostProposedInput_CentralHPWH_LargeAndIntegrated", 1 )  }
;END
;;************************************************************************* - SAC 03/08/21
;RULELIST "PostProposedInput_CentralHPWH_Integrated_Comm" 1 0 1 0
;
;   "Set ResDHWSys:PropHPWHRef:HPWHCat"          ResDHWSys:PropHPWHRef:HPWHCat        = {  "Commercial Product"  }
;   "Set ResDHWSys:PropHPWHRef:HPWHCommModel"    ResDHWSys:PropHPWHRef:HPWHCommModel  = {  CentralHPWHCommModel  }
;
;   "call subordinate rulelist to set remaining DHWHeater properties"    ResDHWSys:Action =
;      {  EvalRulelist( "PostProposedInput_CentralHPWH_LargeAndIntegrated", 1 )  }
;END
;;*************************************************************************  SAC 6/3/20
;RULELIST "PostProposedInput_CentralHPWH_LargeAndIntegrated" 1 0 1 0
;
;;   ; SAC 3/9/20 - revised following rules to set EITHER ResDHWSys:HeaterMultFlt[1] OR HeaterMult[1] based on EnableResearchMode
;;   "Set ResDHWSys:HeaterMultFlt[1]"    ResDHWSys:PropHPWHRef:Cnt  =
;;     ; {  if (IfValidAnd( CHPWHAutosize = 0 )==0 .OR.          - SAC 2/4/20 - CHPWHAutosize removed (tic #1197)
;;     ;        IfValidAnd( CentralHPWHCprsrCnt  > 0 )==0) then  1
;;      {  if (IfValidAnd( CentralHPWHCprsrCnt > 0 )==0) then  1
;;         else  CentralHPWHCprsrCnt  endif  }
;   "Set ResDHWSys:PropHPWHRef:Cnt"       ResDHWSys:PropHPWHRef:Cnt  =
;      {  if (IfValidAnd( CentralHPWHCprsrCnt  > 0 )==0) then  1
;         else  CentralHPWHCprsrCnt  endif  }
;;   "Set ResDHWSys:CntrlHtrMultFlt[1]"     ResDHWSys:CntrlHtrMultFlt[1]  =           ; SAC 6/14/20 (tic #185)
;;      {  HeaterMultFlt[1]  }
;
;   ; rules to setup both tank & air source locations - SAC 6/3/20
;   "Set ResDHWSys:PropHPWHRef:IsCentralHPWH flag"    ResDHWSys:PropHPWHRef:IsCentralHPWH  = {  1  }              ; SAC 6/3/20
;   "Set ResDHWSys:PropHPWHRef:TankZn"     ResDHWSys:PropHPWHRef:TankZn =
;      {  switch (CentralHPWHTankLctn)
;            case  "Outside"            : "Outside or in Exterior Closet" 
;            case  "Unconditioned Zone" : "Unconditioned"                 
;            case  "Conditioned Zone"   : "Conditioned"                   
;            default :  UNDEFINED
;         endswitch  }
;;      {  if (CHPWHTankLoc == 1) then  1  else  0  endif  }
;;   "Set ResDHWSys:PropHPWHRef:TankZone"        ResDHWSys:PropHPWHRef:TankZone =
;;      {  if (CHPWHTankLoc == 2 .AND. LocalCompAssigned( CHPWHTankZone ) > 0)
;;         then  CHPWHTankZone  else  UNDEFINED  endif  } 
;   "Set ResDHWSys:PropHPWHRef:AirSrcHtPumpTempSrc"     ResDHWSys:PropHPWHRef:AirSrcHtPumpTempSrc =
;      {  CentralHPWHAirSrc  }
;;      {  if (CHPWHSrcAirLoc == 1) then  1  else  0  endif  }
;;   "Set ResDHWSys:PropHPWHRef:ASHPSplit"       ResDHWSys:PropHPWHRef:ASHPSplit = {  1  }   ; hardwire for CHPWHs  - no effect
;;   "Set ResDHWSys:PropHPWHRef:ASHPTSrcZone"    ResDHWSys:PropHPWHRef:ASHPTSrcZone =
;;      {  if (CHPWHSrcAirLoc == 2 .AND. LocalCompAssigned( CHPWHSrcAirZone ) > 0)
;;         then  CHPWHSrcAirZone  else  UNDEFINED  endif  } 
;END
;;*************************************************************************
;; replaced following w/ above - SAC 7/1/20
;;   "Import default central HPWH as ResDHWSys:PropHPWHRef"   ResDHWSys:PropHPWHRef  =
;;      {  RuleLibrary( ResWtrHtr, "t24r-CHPWH", 1 )  }
;;   "Set proposed central HPWH Parent"  ResDHWSys:PropHPWHRef:Parent  = {  Name  }
;;
;;   "Set ResDHWSys:PropHPWHRef:CentralHPWHCprsrType"     ResDHWSys:PropHPWHRef:CentralHPWHCprsrType  =     ; SAC 3/12/20 (Colmac)
;;      {  CentralHPWHCprsrType  }
;;
;;   "Set ResDHWSys:PropHPWHRef:NonStdTankVol (if specified)"   ResDHWSys:PropHPWHRef:NonStdTankVol  =
;;      {  if (IfValidAnd( CentralHPWHPriTankVol > 0 )) then  CentralHPWHPriTankVol
;;         else  UNCHANGED  endif  }
;;   "Set ResDHWSys:PropHPWHRef:TankZn to 'Unconditioned'"   ResDHWSys:PropHPWHRef:TankZn  =
;;      {  "Unconditioned"  }     ; should cause simulated location to be UnCond (avg of DBT & 70)
;;   "Set ResDHWSys:PropHPWHRef:Cnt"    ResDHWSys:PropHPWHRef:Cnt  =
;;      {  if (IfValidAnd( CentralHPWHCprsrCnt > 0 )==0) then  1
;;         else  CentralHPWHCprsrCnt  endif  }
;;
;;   "Import ResDHWSys:ResLpTankHtrRef from library"    ResDHWSys:ResLpTankHtrRef  =
;;      {  RuleLibrary( ResLpTankHtr, "t24r-LpTankHtr", 1 )  }
;;   "Set ResLpTankHtrRef Parent"     ResDHWSys:ResLpTankHtrRef:Parent  = {  Name  }
;;   "Set ResDHWSys:ResLpTankHtrRef:whVol (if valid)"   ResDHWSys:ResLpTankHtrRef:whVol  =
;;      {  if (IfValidAnd( CentralHPWHLpTankVol > 0 )) then  CentralHPWHLpTankVol
;;         else  UNCHANGED  endif  }
;;   "Set ResDHWSys:ResLpTankHtrRef:TankZn to 'Unconditioned'"   ResDHWSys:ResLpTankHtrRef:TankZn  =
;;      {  "Unconditioned"  }     ; should cause simulated location to be UnCond (avg of DBT & 70)
;;
;;   ; set additional data to ensure proper simulation of default configuration
;;
;;
;;END
;;;*************************************************************************
;


;******************************************************************************* SAC 02/26/22
RULELIST "AdjustCom_ResDHWSys_FloorAreaServed"  0 0 0 0

   "Adjust ResDHWSys:FloorAreaServed[1] for Spc Htl/Mtl assignments"    Spc:ResDHWSysRef:FloorAreaServed[1] =
      {  if (IfValidAnd( HotelMotelGuestRmCntWithMult > 0 ))
         then  ResDHWSysRef:FloorAreaServed[1] + DwellingUnitSpcTotAreaWithMult
         else  UNCHANGED  endif}

   "Adjust ResDHWSys:ExFlrAreaServed[1] for Spc Htl/Mtl assignments"    Spc:ResDHWSysRef:ExFlrAreaServed[1] =
      {  if (IfValidAnd( HotelMotelGuestRmCntWithMult > 0 ) .AND.
             IfValidAnd( IsExistingEnv > 0 ))
         then  ResDHWSysRef:ExFlrAreaServed[1] + DwellingUnitSpcTotAreaWithMult
         else  UNCHANGED  endif}

   "Adjust ResDHWSys:AltFlrAreaServed[1] for Spc Htl/Mtl assignments"   Spc:ResDHWSysRef:AltFlrAreaServed[1] =
      {  if (IfValidAnd( HotelMotelGuestRmCntWithMult > 0 ) .AND.
             IfValidAnd( IsAlteredEnv > 0 ))
         then  ResDHWSysRef:AltFlrAreaServed[1] + DwellingUnitSpcTotAreaWithMult
         else  UNCHANGED  endif}

   "Adjust ResDHWSys:NewFlrAreaServed[1] for Spc Htl/Mtl assignments"   Spc:ResDHWSysRef:NewFlrAreaServed[1] =
      {  if (IfValidAnd( HotelMotelGuestRmCntWithMult > 0 ) .AND.
             IfValidAnd( IsNewEnv > 0 ))
         then  ResDHWSysRef:NewFlrAreaServed[1] + DwellingUnitSpcTotAreaWithMult
         else  UNCHANGED  endif}

END
;******************************************************************************* SAC 02/26/22
RULELIST "AdjustCom_ResDHWSys_ShwrDrnWtrHtRecovRpt"  0 0 0 0

   "Set DHWSys:ShwrDrnWtrHtRecovRpt - Hotel/Motel Shower drain water heat recovery (for report)" 
      DHWSys:ShwrDrnWtrHtRecovRpt  = {
         if ( (IsNew .OR. IsAltered) .AND. FloorAreaServed[1] > 0 .AND. 
              SumRevRef( Spc:ResDHWSysRef, Spc:NumGuestRmDWHRSysDevs ) > 0 )
         then  "Yes"  else  "NA"  endif  }

END
;******************************************************************************* SAC 02/26/22
RULELIST "AdjustCom_ResDHWSys_ConsumptionAndNumDUsServed"  0 0 0 0

   "Set DHWSys:DailyHWConsumption - Hotel/Motel" 
      DHWSys:DailyHWConsumption  = {
         if (FloorAreaServed[1] > 0)
         then  DailyHWConsumption + SumRevRef( Spc:ResDHWSysRef, Spc:ResSpcHtWtrTotGalPerDayXMult )
         else  UNCHANGED  endif  }
   "Set DHWSys:NumDUsServed - Hotel/Motel" 
      DHWSys:NumDUsServed  = {
         if (FloorAreaServed[1] > 0)
         then  NumDUsServed + SumRevRef( Spc:ResDHWSysRef, Spc:HotelMotelGuestRmCntWithMult )
         else  UNCHANGED  endif  }

END
;******************************************************************************* SAC 02/26/22
RULELIST "AdjustCom_ResDHWSys_NumAssignedDUFracs"  0 0 0 0
   "Set DHWSys:NumAssignedDUFracs - Hotel/Motel" 
      DHWSys:NumAssignedDUFracs  = {
         if (IfValidAnd( FloorAreaServed[1] > 0 ))
         then  NumAssignedDUFracs + SumRevRef( Spc:ResDHWSysRef, Spc:HotelMotelGuestRmCntWithMult )
         else  UNCHANGED  endif  }
END
RULELIST "AdjustCom_ResDHWSys_NumAssignedBRFracs"  0 0 0 0     ; SAC 03/01/22
   "Set DHWSys:NumAssignedBRFracs - Hotel/Motel" 
      DHWSys:NumAssignedBRFracs  = {
         if (IfValidAnd( FloorAreaServed[1] > 0 ))
         then  NumAssignedBRFracs + SumRevRef( Spc:ResDHWSysRef, Spc:HotelMotelGuestRmCntWithMult )
         else  UNCHANGED  endif  }
END
;*******************************************************************************


; sample Spc data
;   OccClass = RVal: "Residential"  (2)
;   Area = RVal: 351.026
;   FlrArea = RVal: 351.026
;   FlrZ = RVal: 0
;   FlrToCeilingHgt = RDef: 11
;   Vol = UVal: 3861.28
;   Mult = RVal: 1
;   CondFlrAreaWithMult = RVal: 351.026
;   Perim = RVal: 80.004
;   SpcFuncDefaultsRef = UVal: "Hotel Guest Room"
;   SpcFunc = RVal: "Hotel/Motel Guest Room"  (338)
;   SpcFuncIdx = RVal: 338
;   FuncSchGrp = RVal: "ResidentialLiving"  (8)
;   SpcCompleteBldgFunc = PDef: "Office Building"  (11)
;   OccDens = RVal: 5
;   OccFrac = RDef: 0.5
;   OccDensSim = RVal: 2.5
;   OccNumSim = RDef: 0.877565
;   OccSensHtRt = RVal: 245
;   OccLatHtRt = RVal: 155
;   FxdSeat = RDef: 0
;   OccNumFxdSeat = RDef: 1.75513
;   IsAtriumGT55Ft = RDef: 0
;   IsHlthCare = RVal: 0
;   InfMthd[1] = RVal: "FlowExteriorWallArea"  (4)
;   DsgnInfRt[1] = RVal: 0.1344
;   InfModelCoefA[1] = RVal: 0
;   InfModelCoefB[1] = RVal: 0
;   InfModelCoefC[1] = RVal: 0.10016
;   InfModelCoefD[1] = RVal: 0
;   EnvStatus = RDef: "New"  (1)
;   LtgStatus = RDef: "New"  (1)
;   OverallStatus = RVal: "New"  (1)
;   IntLtgSysChildren = RVal: 0
;   IntLtgSpecMthd = RDef: "AreaCategoryMethod"  (1)
;   IntLPDReg = RDef: 0
;   IntLPDNonReg = RDef: 0.5
;   IntLPDRegSim = RVal: 0
;   IntLPDNonRegSim = RVal: 1.26679
;   IntLtgRegEndUseCat = RVal: "ComplianceLtg"  (1)
;   IntLtgNonRegEndUseCat = RVal: "NonComplianceLtg"  (2)
;   IntLtgRegHtGnSpcFrac = RDef: 1
;   IntLtgRegHtGnRadFrac = RDef: 0.58
;   IntLtgNonRegHtGnSpcFrac = RDef: 1
;   IntLtgNonRegHtGnRadFrac = RDef: 0.2
;   IntLtgRegHtGnSpcFracSim = RVal: 1
;   IntLtgRegHtGnRadFracSim = RVal: 0.58
;   IntLtgNonRegHtGnSpcFracSim = RVal: 1
;   IntLtgNonRegHtGnRadFracSim = RVal: 0.2
;   TMWallDispAllowLen = RVal: 0
;   TMWallDispDsgn = RVal: 0
;   TMWallDispMax = RVal: 0
;   TMWallDispAllow = RVal: 0
;   TMCmbdFlrDispTaskAllowArea = RVal: 0
;   TMCmbdFlrDispTaskDsgn = RVal: 0
;   TMCmbdFlrDispTaskMax = RVal: 0
;   TMCmbdFlrDispTaskAllow = RVal: 0
;   TMOrnAndSpclEftAllowArea = RVal: 0
;   TMOrnAndSpclEftDsgn = RVal: 0
;   TMOrnAndSpclEftMax = RVal: 0
;   TMOrnAndSpclEftAllow = RVal: 0
;   TMVeryValDispAllowArea = RVal: 0
;   TMVeryValDispDsgn = RVal: 0
;   TMVeryValDispMax = RVal: 0
;   TMVeryValDispAllow = RVal: 0
;   ACMTotAllowPwr = RVal: 0
;   ACMTotAllowPwrWithMult = RVal: 0
;   CondACMTotAllowPwr = RVal: 0
;   CondACMTotAllowPwrWithMult = RVal: 0
;   UncondACMTotAllowPwr = RVal: 0
;   UncondACMTotAllowPwrWithMult = RVal: 0
;   TMTotAllowPwr = RVal: 0
;   CondTMTotAllowPwr = RVal: 0
;   CondTMTotAllowPwrWithMult = RVal: 0
;   UncondTMTotAllowPwr = RVal: 0
;   UncondTMTotAllowPwrWithMult = RVal: 0
;   RCR = RVal: 4.55829
;   TMGenlIlumRnd = RVal: 0
;   TMBaseGenlLPD = RVal: 0
;   TMBaseGenlPwr = RVal: 0
;   TaskHgt = RVal: 7.99998
;   PAFCtrlCred = RVal: 0
;   PAFCtrlCredWithMult = RVal: 0
;   CondPAFCtrlCred = RVal: 0
;   CondPAFCtrlCredWithMult = RVal: 0
;   UncondPAFCtrlCred = RVal: 0
;   UncondPAFCtrlCredWithMult = RVal: 0
;   RegLtgPwr = RVal: 0
;   CondRegInstLtgPwr = RVal: 0
;   CondRegInstLtgPwrWithMult = RVal: 0
;   UncondRegInstLtgPwr = RVal: 0
;   UncondRegInstLtgPwrWithMult = RVal: 0
;   DaylitArea = RVal: 182.438
;   SkylitDaylitArea = RVal: 0
;   PriSideDaylitArea = RVal: 91.2188
;   SecSideDaylitArea = RVal: 91.2188
;   SkylitDayltgInstalledLtgPwr = RDef: 0
;   PriSideDayltgInstalledLtgPwr = RDef: 0
;   SecSideDayltgInstalledLtgPwr = RDef: 0
;   Skylit100PctControlled = RVal: 0
;   PriSide100PctControlled = RVal: 0
;   SecSide100PctControlled = RVal: 0
;   SkylitDayltgCtrlLtgPwr = RDef: 0
;   SkylitDayltgCtrlLtgFrac = RVal: 0
;   SkylitDayltgIllumSetpt = RDef: 110
;   SkylitDayltgIllumSetptAdjFac = RVal: 1
;   SkylitDayltgAdjIllumSetpt = RVal: 110
;   PriSideDayltgRefPtCoord[1] = RVal: 152.659
;   PriSideDayltgRefPtCoord[2] = RVal: 8.02887
;   PriSideDayltgRefPtCoord[3] = RVal: 2.5
;   PriSideDayltgRefPtEffAp = RVal: 0.0815157
;   PriSideDayltgRefPtSrcOrient = RVal: 0.01
;   PriSideDayltgCtrlLtgPwr = RDef: 0
;   PriSideDayltgCtrlLtgFrac = RVal: 0
;   PriSideDayltgIllumSetpt = RDef: 110
;   PriSideDayltgIllumSetptAdjFac = RVal: 1.5
;   PriSideDayltgAdjIllumSetpt = RVal: 165
;   SecSideDayltgRefPtCoord[1] = RVal: 152.659
;   SecSideDayltgRefPtCoord[2] = RVal: 15.8976
;   SecSideDayltgRefPtCoord[3] = RVal: 2.5
;   SecSideDayltgRefPtEffAp = RVal: 0.0815157
;   SecSideDayltgRefPtSrcOrient = RVal: 0.01
;   SecSideDayltgCtrlLtgPwr = RDef: 0
;   SecSideDayltgCtrlLtgFrac = RVal: 0
;   SecSideDayltgIllumSetpt = RDef: 110
;   SecSideDayltgIllumSetptAdjFac = RVal: 2
;   SecSideDayltgAdjIllumSetpt = RVal: 220
;   DayltgCtrlType = PDef: "None"  (0)
;   SkylitRDP = RVal: -1e+06
;   PriSideRDP = RVal: 3653.13
;   SecSideRDP = RVal: 1741.16
;   SkylitRDPCoefs[1] = RVal: 3927
;   SkylitRDPCoefs[2] = RVal: 3051
;   PriSideRDPCoefs[1] = RVal: 1805
;   PriSideRDPCoefs[2] = RVal: -0.4
;   PriSideRDPCoefs[3] = RVal: 3506
;   SecSideRDPCoefs[1] = RVal: 7044
;   SecSideRDPCoefs[2] = RVal: -3.32
;   SecSideRDPCoefs[3] = RVal: 1167
;   MandMinDaylitArea = RVal: 0
;   SkyltReqExcpt = PDef: "- none -"  (0)
;   SkyltReqExcptArea = RVal: 0
;   SkyltReqExcptFrac = RDef: 0
;   RecptPwrDens = RDef: 10.4235
;   RecptRadFrac = RDef: 0.2
;   RecptLatFrac = RDef: 0
;   RecptLostFrac = RDef: 0
;   ProcElecPwrDens = RVal: 3.83221
;   ProcElecRadFrac = RVal: 0
;   ProcElecLatFrac = RVal: 0
;   ProcElecLostFrac = RVal: 0
;   ProcGasPwrDens = RVal: 0
;   CommRfrgEPD = RDef: 0
;   CommRfrgRadFrac = RDef: 0
;   CommRfrgLatFrac = RDef: 0
;   CommRfrgLostFrac = RDef: 1
;   ResDHWSysRef = UVal: "GuestRm DHW Sys"
;   BaseWtrHtrType = RVal: "Gas"  (1)
;   HotWtrHrlyUsePerPers = RVal: 4.48
;   HotWtrHrlyUse = RVal: 0
;   HotWtrHtgRtSim = RVal: 0
;   HotWtrHrlyUseResCombo = RVal: 0
;   HotWtrHrlyUseRes = RVal: 0
;   HotWtrSupTemp = RVal: 135
;   HotelMotelGuestRmCnt = RVal: 1
;   VentSpcFunc = RDef: "Lodging - Bedroom/living room"  (53)
;   VentPerPerson = RDef: 0
;   VentPerArea = RDef: 0.15
;   VentACH = RVal: 0
;   VentPerSpc = RVal: 30
;   CodeOtherVentPerPerson = RVal: 0
;   CodeOtherVentPerArea = RVal: 0.15
;   CodeOtherVentACH = RVal: 0
;   CodeOtherVentPerSpc = RVal: 30
;   VentFlow = RDef: 52.6539
;   MinVentFlow = RVal: 52.6539
;   CodeVentFlow = RVal: 52.6539
;   CodeMinVentFlow = RVal: 52.6539
;   CodeOtherVentFlow = RVal: 0
;   CodeOtherMinVentFlow = RDef: 52.6539
;   VentMult = RVal: 1
;   OccSensorCtrl = RVal: 0
;   BypassOccSensorCtrl = RVal: 0
;   ExhPerArea = RVal: 0
;   ExhACH = RVal: 0
;   ExhPerSpc = RVal: 0
;   ExhContPerFixture = RVal: 0
;   ExhNumFixtures = RVal: 0
;   ExhFlow = RDef: 0
;   KitExhHoodDuty[1] = PDef: "Light"  (1)
;   KitExhHoodDuty[2] = PDef: "Light"  (1)
;   KitExhHoodDuty[3] = PDef: "Light"  (1)
;   KitExhHoodDuty[4] = PDef: "Light"  (1)
;   KitExhHoodDuty[5] = PDef: "Light"  (1)
;   LabFumeHoodLen = RVal: 0
;   LabFumeHoodVertSashExhFlow = RVal: 0
;   LabFumeHoodVertAutoSashCtrlFrac = RVal: 0
;   LabOtherExhFlow = RVal: 0
;   HasProcExh = RDef: 0
;   ClgUMLHLimit = RVal: 150
;   HtgUMLHLimit = RVal: 150
;   DwellingUnitTypeCnt[1] = RVal: 0
;   DwellingUnitTypeCnt[2] = RVal: 1
;   DwellingUnitTypeCnt[3] = RVal: 0
;   DwellingUnitTypeCnt[4] = RVal: 0
;   DwellingUnitTypeCnt[5] = RVal: 0
;   DwellingUnitTypeCnt[6] = RVal: 0
;   DwellingUnitTypeArea[1] = RVal: 0
;   DwellingUnitTypeArea[2] = RVal: 351.026
;   DwellingUnitTypeArea[3] = RVal: 0
;   DwellingUnitTypeArea[4] = RVal: 0
;   DwellingUnitTypeArea[5] = RVal: 0
;   DwellingUnitTypeArea[6] = RVal: 0
;   DwellingUnitCookingFuel = RVal: "Electric"  (1)
;   DwellingUnitClothesWasher = RVal: 0
;   DwellingUnitClothesDryer = RVal: 0
;   DwellingUnitLtgEnergy[1] = RVal: 0
;   DwellingUnitLtgEnergy[2] = RVal: 0.444677
;   DwellingUnitLtgEnergy[3] = RVal: 0
;   DwellingUnitLtgEnergy[4] = RVal: 0
;   DwellingUnitLtgEnergy[5] = RVal: 0
;   DwellingUnitLtgEnergy[6] = RVal: 0
;   DwellingUnitMscEnergy[1] = RVal: 0
;   DwellingUnitMscEnergy[2] = RVal: 2.10658
;   DwellingUnitMscEnergy[3] = RVal: 0
;   DwellingUnitMscEnergy[4] = RVal: 0
;   DwellingUnitMscEnergy[5] = RVal: 0
;   DwellingUnitMscEnergy[6] = RVal: 0
;   DwellingUnitTVEnergy[1] = RVal: 0
;   DwellingUnitTVEnergy[2] = RVal: 0.813151
;   DwellingUnitTVEnergy[3] = RVal: 0
;   DwellingUnitTVEnergy[4] = RVal: 0
;   DwellingUnitTVEnergy[5] = RVal: 0
;   DwellingUnitTVEnergy[6] = RVal: 0
;   DwellingUnitSTBEnergy[1] = RVal: 0
;   DwellingUnitSTBEnergy[2] = RVal: 0.370959
;   DwellingUnitSTBEnergy[3] = RVal: 0
;   DwellingUnitSTBEnergy[4] = RVal: 0
;   DwellingUnitSTBEnergy[5] = RVal: 0
;   DwellingUnitSTBEnergy[6] = RVal: 0
;   DwellingUnitCmpEnergy[1] = RVal: 0
;   DwellingUnitCmpEnergy[2] = RVal: 0.368219
;   DwellingUnitCmpEnergy[3] = RVal: 0
;   DwellingUnitCmpEnergy[4] = RVal: 0
;   DwellingUnitCmpEnergy[5] = RVal: 0
;   DwellingUnitCmpEnergy[6] = RVal: 0
;   DwellingUnitDishElec[1] = RVal: 0
;   DwellingUnitDishElec[2] = RVal: 0.205452
;   DwellingUnitDishElec[3] = RVal: 0
;   DwellingUnitDishElec[4] = RVal: 0
;   DwellingUnitDishElec[5] = RVal: 0
;   DwellingUnitDishElec[6] = RVal: 0
;   DwellingUnitWashElec[1] = RVal: 0
;   DwellingUnitWashElec[2] = RVal: 0
;   DwellingUnitWashElec[3] = RVal: 0
;   DwellingUnitWashElec[4] = RVal: 0
;   DwellingUnitWashElec[5] = RVal: 0
;   DwellingUnitWashElec[6] = RVal: 0
;   DwellingUnitDryElec[1] = RVal: 0
;   DwellingUnitDryElec[2] = RVal: 0
;   DwellingUnitDryElec[3] = RVal: 0
;   DwellingUnitDryElec[4] = RVal: 0
;   DwellingUnitDryElec[5] = RVal: 0
;   DwellingUnitDryElec[6] = RVal: 0
;   DwellingUnitDryGas[1] = RVal: 0
;   DwellingUnitDryGas[2] = RVal: 0
;   DwellingUnitDryGas[3] = RVal: 0
;   DwellingUnitDryGas[4] = RVal: 0
;   DwellingUnitDryGas[5] = RVal: 0
;   DwellingUnitDryGas[6] = RVal: 0
;   DwellingUnitCookElec[1] = RVal: 0
;   DwellingUnitCookElec[2] = RVal: 0.655616
;   DwellingUnitCookElec[3] = RVal: 0
;   DwellingUnitCookElec[4] = RVal: 0
;   DwellingUnitCookElec[5] = RVal: 0
;   DwellingUnitCookElec[6] = RVal: 0
;   DwellingUnitCookGas[1] = RVal: 0
;   DwellingUnitCookGas[2] = RVal: 0
;   DwellingUnitCookGas[3] = RVal: 0
;   DwellingUnitCookGas[4] = RVal: 0
;   DwellingUnitCookGas[5] = RVal: 0
;   DwellingUnitCookGas[6] = RVal: 0
;   DwellingUnitRefrElec[1] = RVal: 0
;   DwellingUnitRefrElec[2] = RVal: 1.34521
;   DwellingUnitRefrElec[3] = RVal: 0
;   DwellingUnitRefrElec[4] = RVal: 0
;   DwellingUnitRefrElec[5] = RVal: 0
;   DwellingUnitRefrElec[6] = RVal: 0
;   HaveResSpcDHWFeatures[1] = RVal: 0
;   HaveResSpcDHWFeatures[2] = RVal: 0
;   HaveResSpcDHWFeatures[3] = RVal: 0
;   HaveResSpcDHWFeatures[4] = RVal: 0
;   HaveResSpcDHWFeatures[5] = RVal: 0
;   HaveResSpcDHWFeatures[6] = RVal: 0
;   NumResDWHRSysDevs = RVal: 0
;   GuestRmResSpcDHWFeaturesRef = UVal: "GuestRoom102 gstrm"
;   HaveGuestRmResSpcDHWFeatures = RVal: 1
;   NumGuestRmDWHRSysDevs = RVal: 0
;   NumUIDialogTabs = RVal: 8
;   AreaPolyLp = RVal: 351.026
;   PVBattSizeBldgType = RVal: "Other"
;   T24PVSize = RVal: 0.154451
;   T24BattEngyCap = RVal: 0.1512
;   T24BattPwrCap = RVal: 0.0355238
;   IsCond = RVal: 1
;   HasNoInternalLds = RVal: 0
;   IsRes = RVal: 1
;   IsNonRes = RVal: 0
;   IsHighRiseRes = RVal: 0
;   IsHotelMotelGuestRm = RVal: 1
;   HotelMotelGuestRmCntWithMult = RVal: 1
;   DwellingUnitSpcTotArea = RVal: 351.026
;   DefaultedDwellingUnitArea = RVal: 0
;   DwellingUnitSpcTotAreaWithMult = RVal: 351.026
;   DwellingUnitLtgEnergyTot = RVal: 0.444677
;   DwellingUnitMscEnergyTot = RVal: 2.10658
;   DwellingUnitTVEnergyTot = RVal: 0.813151
;   DwellingUnitSTBEnergyTot = RVal: 0.370959
;   DwellingUnitCmpEnergyTot = RVal: 0.368219
;   DwellingUnitMscTVSTBCmpEnergyTot = RVal: 3.6589
;   DwellingUnitMscTVSTBCmpRadFrac = RVal: 0.302022
;   DwellingUnitMscTVSTBCmpLatFrac = RVal: 0.0172722
;   DwellingUnitDishElecTot = RVal: 0
;   DwellingUnitWashElecTot = RVal: 0
;   DwellingUnitDryElecTot = RVal: 0
;   DwellingUnitDryGasTot = RVal: 0
;   DwellingUnitCookElecTot = RVal: 0
;   DwellingUnitCookGasTot = RVal: 0
;   DwellingUnitRefrElecTot = RVal: 1.34521
;   DwellingUnitProcElecTot = RVal: 1.34521
;   DwellingUnitProcElecRadFrac = RVal: 0
;   DwellingUnitProcElecLatFrac = RVal: 0
;   DwellingUnitProcElecLostFrac = RVal: 0
;   DwellingUnitProcGasTot = RVal: 0
;   IsPlenumSup = RVal: 0
;   IsPlenumRet = RVal: 0
;   IsExistingEnv = RVal: 0
;   IsAlteredEnv = RVal: 0
;   IsNewEnv = RVal: 1
;   DemResIntFlrArea = RVal: 0
;   DemResIntWallArea = RVal: 0
;   DemResCeilingArea = RVal: 0
;   DemNonResIntFlrArea = RVal: 0
;   DemNonResIntWallArea = RVal: 0
;   DemNonResCeilingArea = RVal: 0
;   NonDemResIntFlrArea = RVal: 351.026
;   NonDemResIntWallArea = RVal: 737.044
;   NonDemResCeilingArea = RVal: 0
;   NonDemNonResIntFlrArea = RVal: 0
;   NonDemNonResIntWallArea = RVal: 143
;   NonDemNonResCeilingArea = RVal: 0
;   DemResSurfArea = RVal: 0
;   DemNonResSurfArea = RVal: 0
;   NonDemResSurfArea = RVal: 1088.07
;   NonDemNonResSurfArea = RVal: 143
;   NumAdjacentIntWall = RVal: 2
;   NumAdjacentIntFloor = RVal: 1
;   NumAdjacentCeiling = RVal: 0
;   MaxZ = RVal: 11
;   FlrAreaWithMult = RVal: 351.026
;   VolWithMult = RVal: 3861.28
;   CondFlrArea = RVal: 351.026
;   HotelMotelGuestRmAveArea = RVal: 351.026
;   ResCondFlrArea = RVal: 351.026
;   ResCondFlrAreaWithMult = RVal: 351.026
;   HighRiseResCondFlrArea = RVal: 0
;   HighRiseResCondFlrAreaWithMult = RVal: 0
;   HotelMotelGuestRmCondFlrArea = RVal: 351.026
;   HotelMotelGuestRmCondFlrAreaWithMult = RVal: 351.026
;   NonResCondFlrArea = RVal: 0
;   NonResCondFlrAreaWithMult = RVal: 0
;   DirectCondArea = RVal: 351.026
;   IndirectCondArea = RVal: 0
;   UncondArea = RVal: 0
;   PlenumArea = RVal: 0
;   UnoccupiedArea = RVal: 0
;   CondVolWithMult = RVal: 3861.28
;   IsExtSpc = RVal: 1
;   ExtPerim = RVal: 13
;   ParentStoryRef = RVal: "Building Story 1"
;   HtgTstatSchMaxVal = RVal: 70
;   ClgTstatSchMinVal = RVal: 70
;   HtgFuelSrc = RVal: 1
;   AtriumGT55FtFlag = RVal: 0
;   HasUnknownHVAC = RVal: 0
;   IsProcExhSpc = RVal: 0
;   CompRmArea = RVal: 0
;   LabArea = RVal: 0
;   CommKitArea = RVal: 0
;   PrkgGarArea = RVal: 0
;   HlthCareEligible = RVal: 0
;   HlthCareArea = RVal: 0
;   ResCommonEligible = RVal: 0
;   ResCommonArea = RVal: 0
;   PrescribedFuncSchGrp = RVal: "ResidentialLiving"
;   FuncSchGrpIsEditable = RVal: 0
;   MinOccNum = RVal: 1.75513
;   MinOccDens = RVal: 5
;   MinOccNumSim = RVal: 0.877565
;   MinOccDensSim = RVal: 2.5
;   OccNum = RVal: 1.75513
;   OccNumSimWithMult = RVal: 0.877565
;   HaveResDHW = RVal: 1
;   VentSrc = RVal: "Forced"  (2)
;   HasVentSys = RVal: 1
;   HasExhSys = RVal: 0
;   PropVentSysIsExh = RVal: 3
;   VentIsRequired = RVal: 1
;   IncludeInBal = RVal: 0
;   VentOccDensSim = RVal: 0
;   DCVExceptionArea = RVal: 0
;   VentStd = RVal: "T24-2022"  (4)
;   VentAirDistEff = RVal: 1
;   VentSysEff = RVal: 1
;   VentSpecMthd = RVal: "Maximum"  (2)
;   VentCtrlMthd = RVal: "Fixed"  (1)
;   HasDCV = RVal: 0
;   CodeVentPerAreaForDCV = RVal: 0.15
;   CodeVentPerArea = RVal: 0.15
;   CodeOtherVentPerAreaForDCV = RVal: 0.15
;   CodeVentPerAreaForDCVFlow = RVal: 52.6539
;   CodeVentPerAreaFlow = RVal: 52.6539
;   CodeVentPerPerson = RVal: 0
;   CodeVentPerPersonFlow = RVal: 0
;   CodeVentACH = RVal: 0
;   CodeVentACHFlow = RVal: 0
;   CodeVentPerSpc = RVal: 0
;   CodeVentPerSpcFlow = RVal: 0
;   VentPerAreaFlow = RVal: 52.6539
;   VentPerPersonFlow = RVal: 0
;   VentACHFlow = RVal: 0
;   VentPerSpcFlow = RVal: 30
;   VentFlowForBal = RVal: 0
;   OtherVentFlowForBal = RVal: 0
;   CodeVentFlowForBal = RVal: 0
;   CodeOtherVentFlowForBal = RVal: 0
;   CodeVentFlowRat = RVal: 1
;   CodeVentMult = RVal: 1
;   ExhVentMult = RVal: 1
;   CodeVentFlowTarget = RVal: 52.6539
;   DsgnVentPerArea = RVal: 0.15
;   DsgnVentPerPerson = RVal: 60
;   DsgnVentACH = RVal: 0.818183
;   CodeDsgnVentPerArea = RVal: 0.15
;   CodeDsgnVentPerPerson = RVal: 60
;   CodeDsgnVentACH = RVal: 0.818183
;   OccSensorCtrlDisp = RVal: 0
;   OccSensorCtrlCnt = RVal: 0
;   LabFumeHoodVertAutoSashExhFlow = RVal: 0
;   MaxKitExhHoodFlow1 = RVal: 0
;   MaxKitExhHoodFlow2 = RVal: 0
;   MaxKitExhHoodFlow3 = RVal: 0
;   MaxKitExhHoodFlow4 = RVal: 0
;   MaxKitExhHoodFlow5 = RVal: 0
;   TotKitExhHoodFlow = RVal: 0
;   MaxTotKitExhHoodFlow = RVal: 0
;   ExhSpecMthd = RVal: "Maximum"  (1)
;   CodeExhPerArea = RVal: 0
;   CodeOtherExhPerArea = RVal: 0
;   CodeExhPerAreaFlow = RVal: 0
;   CodeExhACH = RVal: 0
;   CodeOtherExhACH = RVal: 0
;   CodeExhACHFlow = RVal: 0
;   CodeExhContPerFixture = RVal: 0
;   CodeExhPerSpc = RVal: 0
;   CodeOtherExhPerSpc = RVal: 0
;   CodeExhPerSpcFlow = RVal: 0
;   ExhPerAreaFlow = RVal: 0
;   ExhACHFlow = RVal: 0
;   ExhFlowWithMult = RVal: 0
;   CodeExhFlow = RVal: 0
;   CodeOtherExhFlow = RVal: 0
;   ExhFlowForBal = RVal: 0
;   OtherExhFlowForBal = RVal: 0
;   CodeExhFlowForBal = RVal: 0
;   CodeOtherExhFlowForBal = RVal: 0
;   VentExhBalFlow = RVal: 0
;   DsgnExhPerArea = RVal: 0
;   DsgnExhACH = RVal: 0
;   CodeDsgnExhPerArea = RVal: 0
;   CodeDsgnExhACH = RVal: 0
;   ResArea = RVal: 351.026
;   IsResAndCombo = RVal: 0
;   ResSpcHtWtrTotGalPerDay = RVal: 23.7835
;   HasResDHWSysRef = RVal: 1
;   ResDHWCentralSys = RVal: 0
;   DwellingUnit1GalPerDay = RVal: 0
;   DwellingUnit2GalPerDay = RVal: 23.7835
;   DwellingUnit3GalPerDay = RVal: 0
;   DwellingUnit4GalPerDay = RVal: 0
;   DwellingUnit5GalPerDay = RVal: 0
;   DwellingUnit6GalPerDay = RVal: 0
;   ResSpcHtWtrTotGalPerDayXMult = RVal: 23.7835
;   HotWtrHrlyUsePerPersExcpt = RVal: 0
;   HotWtrHtgCapRtd = RVal: 0




;*************************************************************************
;*************************************************************************

ENDFILE

