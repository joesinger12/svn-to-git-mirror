; -------------------------------------------------------------------------
; Rules pertaining to:   Populating CF1RPRF01E XML schema objects from project data
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2018, California Energy Commission
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
; STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------

ENUM_PROPERTIES_VALUE   ; ensures retrieval/logic/us of enum properties assume numeric value (alternative is ENUM_PROPERTIES_STRING)

;*************************************************************************
RULELIST "CF1RPRF01E_Proposed"  1 0 0 1
  ; ----------------------------------------------------------------------
  ; Rules to clear past CF1RPRF01E objects and create those objects populated w/ Proposed model info
   "Delete existing CF1RPRF01E objects"    cf1rComplianceDocumentPackage:Action  = {  DeleteComp()  }

   "Default ResProj:SoftwareVersionDetail to SoftwareVersion if undefined"    ResProj:SoftwareVersionDetail  =    ; SAC 2/13/20 (tic #1192)
      {  if (LocalStatus( SoftwareVersionDetail ) < 1 .AND. LocalStatus( SoftwareVersion ) > 0)
         then  SoftwareVersion  else  UNCHANGED  endif  }

   "Create & initialize new cf1rComplianceDocumentPackage object"
      ResProj:Action  = {  CreateComp( cf1rComplianceDocumentPackage, "CF1RCompDocPckg", "CF1RPRF01E_Init_cf1rComplianceDocumentPackage" )  }
   "Create & initialize new cf1rDocID object"
      cf1rComplianceDocumentPackage:Action  = {  CreateChildren( cf1rDocID,        1, "CF1RDocID",      "CF1RPRF01E_Init_cf1rDocID" )  }
   "Create & initialize new cf1rPayload object"
      cf1rComplianceDocumentPackage:Action  = {  CreateChildren( cf1rPayload,      1, "CF1RPayload",    "CF1RPRF01E_Init_cf1rPayload" )  }
   "Create & initialize new cf1rDocumentData object"
      cf1rComplianceDocumentPackage:Action  = {  CreateChildren( cf1rDocumentData, 1, "CF1RDocData" )  }     ; no init needed - "CF1RPRF01E_Init_cf1rDocumentData" )  }

   ; RJH 1/17/2020 - added new ProjectNotes element (tic #1184)
   "Set cf1rDocumentData:ProjectNotes"   cf1rDocumentData:ProjectNotes   =  { ResProj:Notes }

   "Set cf1rComplianceDocumentPackage:afterchildren_Report"   cf1rComplianceDocumentPackage:afterchildren_Report   = {  " "  }
   "Set cf1rComplianceDocumentPackage:afterchildren_Report2"  cf1rComplianceDocumentPackage:afterchildren_Report2  = {  " "  }
;   "Create & initialize new cf1rReport object"
;      cf1rComplianceDocumentPackage:Action  = {  CreateChildren( cf1rReport,  1, "CF1RReport"  )  }     ; no init needed - "CF1RPRF01E_Init_cf1rReport" )  }
;   "Create & initialize new cf1rReport2 object"
;      cf1rComplianceDocumentPackage:Action  = {  CreateChildren( cf1rReport2, 1, "CF1RReport2" )  }     ; no init needed - "CF1RPRF01E_Init_cf1rReport2" )  }
;   "Create & initialize new cf1rInputData object"
;      cf1rComplianceDocumentPackage:Action  = {  CreateChildren( cf1rInputData,     1, "CF1RInputData"     )  }     ; no init needed - "CF1RPRF01E_Init_cf1rInputData" )  }
;   "Create & initialize new cf1rProposedModel object"
;      cf1rComplianceDocumentPackage:Action  = {  CreateChildren( cf1rProposedModel, 1, "CF1RProposedModel" )  }     ; no init needed - "CF1RPRF01E_Init_cf1rProposedModel" )  }

   "Create & initialize new cf1rHeader object"
      cf1rDocumentData:Action  = {  CreateChildren( cf1rHeader,       1, "CF1RHeader",     "CF1RPRF01E_Init_cf1rHeader" )  }
; need to expand on ResProj:Owner and/or Designer fields to populate cf1rDocAuthor & cf1rRespPerson objects
;   "Create & initialize new cf1rDocAuthor object"
;      cf1rDocumentData:Action  = {  if ()
;                                    then  CreateChildren( cf1rDocAuthor,    1, "CF1RDocAuthor",  "CF1RPRF01E_Init_cf1rDocAuthor" )
;                                    else  UNCHANGED  endif  }
;   "Create & initialize new cf1rRespPerson object"
;      cf1rDocumentData:Action  = {  CreateChildren( cf1rRespPerson,   1, "CF1RRespPerson", "CF1RPRF01E_Init_cf1rRespPerson" )  }
; not source data (yet) to populate cf1rFooter data (01_RegistrationNumber, 02_RegistrationDateTime, 03_DataRegistryProvider, 04_DigitalSignatureLabel)
;   "Create & initialize new cf1rFooter object"
;      cf1rDocumentData:Action  = {  CreateChildren( cf1rFooter,       1, "CF1RFooter",     "CF1RPRF01E_Init_cf1rFooter" )  }
  ; ----------------------------------------------------------------------

   "Create & auto-populate new cf1rCF1RPRF01E object"
      cf1rDocumentData:Action  = {  CreateChildren( cf1rCF1RPRF01E,   1, "CF1R Main" )  }     ; no init needed

   "Create & auto-populate new cf1rSection_A object"
      cf1rCF1RPRF01E:Action    = {  CreateChildren( cf1rSection_A,    1, "CF1R SecA", "CF1RPRF01E_Auto_cf1rSection_A" )  }

  ; Rules to populate CF1R object properties requiring more detailed logic
   "Set cf1rSection_A:A10_ResidentialLowriseBuildingType"  cf1rSection_A:A10_ResidentialLowriseBuildingType  = {
         if (ResProj:IsMultiFamily > 0)
         then  "LowRiseMultiFamily"
         else  "SingleFamily"
         endif  }
   "Set cf1rSection_A:A09_Azimuth"  cf1rSection_A:A09_Azimuth  = {
         if (ResProj:AllOrientations == 0)
         then  atof( Format( "%.2f", ResProj:FrontOrientation ) )
         else  UNDEFINED
         endif  }
   "Set cf1rSection_A:A09_CardinalOrientation"  cf1rSection_A:A09_CardinalOrientation  = {
         if (ResProj:AllOrientations > 0)
         then  "AllOrientations"
         else  UNDEFINED
         endif  }
; note: further mods needed alone to communicate something like "NewConstructionAdditionAlone"
   "Set cf1rSection_A:A12_ProjectScopePerformance"         cf1rSection_A:A12_ProjectScopePerformance  = {
         if (ResProj:RunScope = 1 .AND. ResProj:IsAddAlone > 0)
		   then "AdditionOnly"
         else if (ResProj:RunScope = 1) then  "NewConstruction"
         else  "AdditionAlteration"
         endif endif  }

   ; SAC 7/3/19 - moved A14, A16 & A18 areas from Auto to here to enable logic related to RunScope (tic #1118)
   "Set cf1rSection_A:A14_NewConditionedFloorArea"         cf1rSection_A:A14_NewConditionedFloorArea         =
      {  if (ResProj:RunScope = 1 .AND. ResProj:IsAddAlone > 0)
         then  atof( Format( "%.2f", ResProj:AddAloneAddedArea ) )
         else  atof( Format( "%.2f", ResProj:CondAdditionSize ) )  endif  }

   "Set cf1rSection_A:A16_ExistingConditionedFloorArea"    cf1rSection_A:A16_ExistingConditionedFloorArea    =    ; SAC 7/24/19 - mods to set ExistArea based on project runscope (issue from CEC/MS)
      {  if (ResProj:RunScope == 2 .AND. IfValidAnd( ResProj:CondFloorArea >= ResProj:AdditionCFA ))
         then  atof( Format( "%.2f", (ResProj:CondFloorArea - ResProj:AdditionCFA) ) )
         else if (ResProj:RunScope == 1 .AND. ResProj:IsAddAlone == 1 .AND. IfValidAnd( ResProj:AddAloneExistArea >= 0 ))
         then  atof( Format( "%.2f", ResProj:AddAloneExistArea ) )
         else  UNDEFINED
         endif endif  }
   "Set cf1rSection_A:A16_NotApplicableMessage"             cf1rSection_A:A16_NotApplicableMessage   =      ; SAC 5/1/19
      {  if (LocalStatus( A16_ExistingConditionedFloorArea ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   "Set cf1rSection_A:A18_TotalConditionedFloorArea"       cf1rSection_A:A18_TotalConditionedFloorArea       =
      {  if (ResProj:RunScope = 1 .AND. ResProj:IsAddAlone > 0)
         then  atof( Format( "%.2f", ResProj:AddAloneTotalArea ) )
         else  atof( Format( "%.2f", ResProj:CondFloorArea ) )  endif  }

   "Set cf1rSection_A:A20_NaturalGasOnSite"                cf1rSection_A:A20_NaturalGasOnSite  =      ; replaced ResProj:GasType w/ GasTypeRpt - SAC 07/15/22
    ;  {  if (ResProj:NatGasAvailable)
      {  if (IfValidAnd( ResProj:GasTypeRpt = "Natural Gas"))
         then  "true"
         else  "false"
         endif  }

   "Set cf1rSection_A:A21_FirstFloorToHighestCeilingHeight"  cf1rSection_A:A21_FirstFloorToHighestCeilingHeight  =
      {  if (ResProj:IsMultiFamily .OR. IfValidAnd( ResProj:SFamMaxVertDist > 0 )==0) then  UNDEFINED
         else  ResProj:SFamMaxVertDist  endif  }

   "Set cf1rSection_A:A22_SingleFamilyDwellingAttached"     cf1rSection_A:A22_SingleFamilyDwellingAttached   = 
      {  if (IfValidAnd( ResProj:IAQDisabled > 0 ) .OR. ResProj:IsMultiFamily) then  UNDEFINED
         else if (IfValidAnd( ResProj:SFamDwellingAttached > 0 )) then  "true"  else  "false"  endif endif  }
   "Set cf1rSection_A:A22_NotApplicableMessage"             cf1rSection_A:A22_NotApplicableMessage           =
      {  if (LocalStatus( A22_SingleFamilyDwellingAttached ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   "Set cf1rSection_A:A23_AccessoryDwellingUnitIncluded"    cf1rSection_A:A23_AccessoryDwellingUnitIncluded  =
      {  if (ResProj:IsMultiFamily) then  UNDEFINED
         else  switch (ResProj:SFamADUType)
                  case  0 :  "None"
                  case  1 :  "Detached"
                  case  2 :  "Attached"
                  default :  UNDEFINED
               endswitch  endif  }
   "Set cf1rSection_A:A23_NotApplicableMessage"             cf1rSection_A:A23_NotApplicableMessage           =
      {  if (LocalStatus( A23_AccessoryDwellingUnitIncluded ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   "Set cf1rSection_A:A24_ADUBedroomCount"                  cf1rSection_A:A24_ADUBedroomCount  =
      {  if (ResProj:IsMultiFamily .OR. IfValidAnd( ResProj:SFamADUNumBedrooms >= 0 )==0) then  UNDEFINED
         else  ResProj:SFamADUNumBedrooms  endif  }
   "Set cf1rSection_A:A24_NotApplicableMessage"             cf1rSection_A:A24_NotApplicableMessage    =
      {  if (LocalStatus( A24_ADUBedroomCount ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   "Set cf1rSection_A:A25_ADUConditionedFloorArea"          cf1rSection_A:A25_ADUConditionedFloorArea  =
      {  if (ResProj:IsMultiFamily .OR. IfValidAnd( ResProj:SFamADUArea >= 0 )==0) then  UNDEFINED
         else  ResProj:SFamADUArea  endif  }
   "Set cf1rSection_A:A25_NotApplicableMessage"             cf1rSection_A:A25_NotApplicableMessage    =
      {  if (LocalStatus( A25_ADUConditionedFloorArea ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   "Set cf1rSection_A:A29_GasType"  cf1rSection_A:A29_GasType  =     ; replaced EnumString( ResProj:GasType ) w/ GasTypeRpt - SAC 07/15/22
      {  switch( ResProj:GasTypeRpt )
           case "Natural Gas" :  "NaturalGas"
           case "Propane"     :  "Propane"
           default  :  UNDEFINED    ; incl. "All Electric"
        endswitch  }

   "Create & auto-populate new cf1rSection_B object"
      cf1rCF1RPRF01E:Action    = {  
           if (ResProj:RunScope = 1 .AND. IfValidAnd( ResProj:IsAddAlone > 0 ))
           then  CreateChildren( cf1rSection_B,    1, "CF1R SecB", "CF1RPRF01E_Auto_cf1rSection_B" )
           else  UNCHANGED
           endif  }

   "Create & initialize new cf1rSection_C object"
      cf1rCF1RPRF01E:Action  = {  CreateChildren( cf1rSection_C, 1, "CF1R SecC" )  }     ; no init needed

  ; Section_EnergyDesignRatings 
   "Create & initialize new cf1rSection_EnergyDesignRatings object"
      cf1rCF1RPRF01E:Action  = {  
	      if (ResProj:RunScope = 1 .AND. IfValidAnd( ResProj:IsAddAlone > 0 )==0)
		   then CreateChildren( cf1rSection_EnergyDesignRatings, 1, "Section_EnergyDesignRatings" )
		   else UNCHANGED
		   endif  }


      ; SAC 4/12/18 - moved creation of cf1rSection_EnergyUseSummary up here from below (inside CF1RPRF01E_Final rulelist) to ensure final XML file in report section order
   "Create & initialize new cf1rSection_EnergyUseSummary object"
      cf1rCF1RPRF01E:Action  = {  CreateChildren( cf1rSection_EnergyUseSummary, 1, "Section_EnergyUseSummary" )  }

      ; SAC 5/1/19 - moved creation of Da & Db to here (from ...Final rules) to ensure proper output order
  ; Section_PV Energy Design Rating PV SYSTEM INPUTS - SIMPLIFIED (NOTE - should be created within RULELIST "CF1RPRF01E_Proposed" to be located correctly, then populated here)
      ; SAC 1/29/20 - added logic to create PV table regardless of PV system inputs if PV exception specified (tic #1193)
   "Create & initialize new cf1rSection_PV object"          ; removed for EAA & AddAlone run scopes - SAC 09/04/20
      cf1rCF1RPRF01E:Action  = { if ( ResProj:RunScope == 1 .AND. ResProj:IsAddAlone == 0 .AND.
                                      (IfValidAnd( ResProj:PVWDCSysSize[1] > 0 ) .OR. 
                                       (ResProj:ReducedPVReq > 0 .AND. ResProj:ReducedPVReqExcept > 0)) )
		                           then if (Proj:PVComp = "Performance") then CreateChildren( cf1rSection_PV, 1, "Section_PV" ) else UNCHANGED endif
		                           else UNCHANGED endif  }
      ; SAC 2/3/20 - moved eval of rulelist to populate initial PV table records up HERE from below (...Final rules) since some inputs get overridden for Std design analysis (tic #1012)
   "Call subordinate rulelist to populate Section_PV"       ; SAC 1/29/20 - added logic to populate PV table regardless of PV system inputs if PV exception specified (tic #1193)
      ResProj:Action   = {  if (ComponentCount( cf1rSection_PV ) > 0)
	                        then  EvalRulelist( "CF1RPRF01E_Section_PV" )
                            else  UNCHANGED  endif }

  ; Section_Bat Energy Design Rating BATTERY INPUTS (NOTE - should be created within RULELIST "CF1RPRF01E_Proposed" to be located correctly, then populated here)
   "Create & initialize new cf1rSection_Bat object"
      cf1rCF1RPRF01E:Action  = { if (IfValidAnd( Proj:SimulateBattery > 0 ))
		                           then if (Proj:BattComp = "Performance") then CreateChildren( cf1rSection_Bat, 1, "Section_Bat" ) else UNCHANGED endif
		                           else UNCHANGED endif  }

   "Create and setup cf1rSection_E (Special Features) via separate rulelist"     ; SAC 10/13/18
      cf1rCF1RPRF01E:Action  = {  EvalRulelist( "CF1RPRF01E_Proposed_SpecialFeatures" )  }

   "Create and setup cf1rSection_Ea (HERS Features) via separate rulelist"     ; SAC 10/15/18
      cf1rCF1RPRF01E:Action  = {  EvalRulelist( "CF1RPRF01E_Proposed_HERSFeatures" )  }

  ; Section_C Manual Field population
;     "Set cf1rSection_C:C03_ResidentialPerformanceSpecialFeatures"  cf1rSection_C:C03_ResidentialPerformanceSpecialFeatures  = {  
 ;        if (ChildCount( cf1rSpecialFeature ) < 1)
  ;         then  "false"
   ;        else  "true"
    ;       endif  }

   "Create & auto-populate new cf1rSection_F object"
      cf1rCF1RPRF01E:Action    = {  CreateChildren( cf1rSection_F,    1, "CF1R SecF", "CF1RPRF01E_Auto_cf1rSection_F" )  }

  ; Section_F Manual Field population
     "Set cf1rSection_F:F05_ResidentialBuildingZoneCount"    cf1rSection_F:F05_ResidentialBuildingZoneCount  = {  ComponentCount( Zone )  }
      ; SAC 7/8/19 - moved DOWN below creation/population of CF1R_VentRow objects
      ; "Set cf1rSection_F:F06_ResidentialVentilationCoolingSystemCount"    cf1rSection_F:F06_ResidentialVentilationCoolingSystemCount  = {  ComponentCount( ClVentFan )  }
     "Set cf1rSection_F:F07_ResidentialWaterHeatingSystemCount"    cf1rSection_F:F07_ResidentialWaterHeatingSystemCount  = {  SumAll( DHWSys:NumSystemsInBldg )  }
            ; SAC 6/14/20 - updated F07_ rule to reference new DHWSys:NumSystemsInBldg so that Centrl systems not over-counted (tic #1185)   was previously: ComponentCount( DHWSysRpt )

  ; ----------------------------------------------------------------------
  ; Section_G ZoneSF and ZoneMF tables
   "Create & initialize new cf1rSection_G object"
      cf1rCF1RPRF01E:Action  = {  CreateChildren( cf1rSection_G, 1, "Section_G" )  }     ; no init needed

   "Call subordinate rulelist to handle SingleFamily vs. MultiFamily results"
      ResProj:Action   = {  if (IsMultiFamily == 0) then  EvalRulelist( "CF1RPRF01E_cf1rSection_G_Proposed_SingleFamily" )
                            else  EvalRulelist( "CF1RPRF01E_cf1rSection_G_Proposed_MultiFamily" )  endif }

  ; ----------------------------------------------------------------------
; RJH 10/1/22 Moved to NRCCPRF-Rulelists.rule to handle NRCC/LMCC Section_DwellInfo
  ; Section_H Dwelling Units table only for MultiFamily projects
 ;  "Call subordinate rulelist to handle MultiFamily results"
 ;     ResProj:Action   = {  if (IsMultiFamily > 0) then  EvalRulelist( "CF1RPRF01E_cf1rSection_H_Proposed_MultiFamily" )
 ;                           else  UNCHANGED  endif }

  ; ----------------------------------------------------------------------
; RJH 10/1/22 Moved to NRCCPRF-Rulelists.rule to handle NRCC/LMCC Section_DwellType
  ; Section_I Dwelling Unit Type table only for MultiFamily projects
;   "Call subordinate rulelist to handle MultiFamily results"
;      ResProj:Action   = {  if (IsMultiFamily > 0) then  EvalRulelist( "CF1RPRF01E_cf1rSection_I_Proposed_MultiFamily" )
;                            else  UNCHANGED  endif }

  ; ----------------------------------------------------------------------
  ; Section_J Opaque Surfaces table
   "Create & initialize new cf1rSection_J object"
      cf1rCF1RPRF01E:Action  = {  CreateChildren( cf1rSection_J, 1, "Section_J" )  }     ; no init needed
   "Create & initialize new cf1rTableOpaqueSurfaces object"
      cf1rSection_J:Action   = {  CreateChildren( cf1rTableOpaqueSurfaces, 1, "TableOpaqueSurfaces" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual Opaque Surfaces table rows
   "Create cf1rtblRowOpaqueSurface for all relevant ExtWall - for ExtWalls of CONDITIONED ZONES"
      ResExtWall:CF1R_OpqSrfRow   = {  if (IfValidAnd( ParentType = 1 )==0) then  UNDEFINED
                                    else  CreateComp( cf1rtblRowOpaqueSurface, Name + " CZEW-OpqSrfRow" )  endif  }
   "Create cf1rtblRowOpaqueSurface for ALL IntWall objects"   ; RJH 20200609 remove exclusion of Demising walls per tic #1194
      ResIntWall:CF1R_OpqSrfRow   = {  CreateComp( cf1rtblRowOpaqueSurface, Name + " DIW-OpqSrfRow" ) }
   "Create cf1rtblRowOpaqueSurface for all CeilingBelowAttic"
      CeilingBelowAttic:CF1R_OpqSrfRow   = {  CreateComp( cf1rtblRowOpaqueSurface, Name + " CBA-OpqSrfRow" )  }
   "Create cf1rtblRowOpaqueSurface for all ExteriorFloor"
      ResExtFlr:CF1R_OpqSrfRow   = {  CreateComp( cf1rtblRowOpaqueSurface, Name + " EF-OpqSrfRow" )  }
   "Create cf1rtblRowOpaqueSurface for all FloorOverCrawl"
      FloorOverCrawl:CF1R_OpqSrfRow   = {  CreateComp( cf1rtblRowOpaqueSurface, Name + " FOC-OpqSrfRow" )  }
   "Create cf1rtblRowOpaqueSurface for all UndWall"
      UndWall:CF1R_OpqSrfRow   = {  CreateComp( cf1rtblRowOpaqueSurface, Name + " UGW-OpqSrfRow" )  }
   "Create cf1rtblRowOpaqueSurface for all InteriorCeiling"
      InteriorCeiling:CF1R_OpqSrfRow   = {  CreateComp( cf1rtblRowOpaqueSurface, Name + " IC-OpqSrfRow" )  }
   "Create cf1rtblRowOpaqueSurface for all InteriorFloor"
      ResIntFlr:CF1R_OpqSrfRow   = {  CreateComp( cf1rtblRowOpaqueSurface, Name + " IFpqSrfRow" )  }
   "Create cf1rtblRowOpaqueSurface for all relevant ExtWall - for ExtWalls of GARAGES & UNCOND ZONES"
      ResExtWall:CF1R_OpqSrfRow   = {  if (IfValidAnd( ParentType = 1 )) then  UNCHANGED
                                    else  CreateComp( cf1rtblRowOpaqueSurface, Name + " UZEW-OpqSrfRow" )  endif  }
     ; ----------------------------------------------------------------------
     ; Rules to populate Opaque Surfaces table rows for ALL ExtWalls (children of both conditioned & unconditioned zones/garages)
      "Set ResExtWall:CF1R_OpqSrfRow:J01_PartitionName"
         ResExtWall:CF1R_OpqSrfRow:J01_PartitionName  = {  Name  }
      "Set ResExtWall:CF1R_OpqSrfRow:J02_ThermalZoneName"
         ResExtWall:CF1R_OpqSrfRow:J02_ThermalZoneName  = {  Parent( Name )  }
      "Set ResExtWall:CF1R_OpqSrfRow:J03_ConstructionAssemblyNamePerformanceRes"
         ResExtWall:CF1R_OpqSrfRow:J03_ConstructionAssemblyNamePerformanceRes  = {  Construction:Name  }
      "Set ResExtWall:CF1R_OpqSrfRow:J04_Azimuth"
         ResExtWall:CF1R_OpqSrfRow:J04_Azimuth  = {
            if (LocalStatus( OrientationValue ) > 0)
	        then if ((ResProj:FrontOrientation + OrientationValue) < 360)
			     then Format( "%.0f", ResProj:FrontOrientation + OrientationValue ) 
				 else Format( "%.0f", ResProj:FrontOrientation + OrientationValue - 360 )
				 endif
            else  UNDEFINED  endif  }
      "Set ResExtWall:CF1R_OpqSrfRow:J04_NotApplicableMessage"
         ResExtWall:CF1R_OpqSrfRow:J04_NotApplicableMessage  = {
            if ( (LocalStatus( OrientationValue ) > 0) == 0 )
            then  "n/a"
            else  UNDEFINED  endif  }
      "Set ResExtWall:CF1R_OpqSrfRow:J05_RelativePosition"
         ResExtWall:CF1R_OpqSrfRow:J05_RelativePosition  = {
            if (Orientation > 10) then  UNDEFINED
            else  EnumString( Orientation )  endif  }
      "Set ResExtWall:CF1R_OpqSrfRow:J05_NotApplicableMessage"
         ResExtWall:CF1R_OpqSrfRow:J05_NotApplicableMessage  = {
            if (Orientation <= 10) then  UNDEFINED
            else  "n/a"  endif  }
      "Set ResExtWall:CF1R_OpqSrfRow:J06_PartitionGrossArea"
         ResExtWall:CF1R_OpqSrfRow:J06_PartitionGrossArea  = {  Area  }
      "Set ResExtWall:CF1R_OpqSrfRow:J07_PartitionWindowDoorArea"
         ResExtWall:CF1R_OpqSrfRow:J07_PartitionWindowDoorArea  = {
            Format( "%g", ValidOr( ChildAreaSum, 0 ) )  }
      "Set ResExtWall:CF1R_OpqSrfRow:J08_Tilt"
         ResExtWall:CF1R_OpqSrfRow:J08_Tilt  = {
            if (LocalStatus( Tilt ) < 1) then  UNDEFINED
            else  Format( "%.0f", Tilt )  endif  }
      "Set ResExtWall:CF1R_OpqSrfRow:J08_NotApplicableMessage"
         ResExtWall:CF1R_OpqSrfRow:J08_NotApplicableMessage  = {
            if ( (LocalStatus( Tilt ) < 1) == 0 ) then  UNDEFINED
            else  "n/a"  endif  }
      "Set ResExtWall:CF1R_OpqSrfRow:J09_StatusEAA"
         ResExtWall:CF1R_OpqSrfRow:J09_StatusEAA  =               ; SAC 7/30/19 - added logic to report J09_StatusEAA for AdditionAlone projects (tic #1118)
         {  if (ResProj:RunScope = 1 .AND. IfValidAnd( ResProj:IsAddAlone != 0 )==0)   ; new construction
            then  UNDEFINED
			else switch( Status )
                    case 1  : "Existing"
                    case 2  : "Altered"
                    case 3  : "New"
                    default : UNDEFINED
                 endswitch
            endif }

      ; RJH 1/16/2020 - added logic to report J09a_WallException for AdditionAlone projects (tic #1184)
      "Set ResExtWall:CF1R_OpqSrfRow:J09a_WallException"
         ResExtWall:CF1R_OpqSrfRow:J09a_WallException  =               
         {  if (ResProj:RunScope = 1 .AND. IfValidAnd( ResProj:IsAddAlone != 0 )==0)   ; new construction
            then  UNDEFINED
			else switch( Exception )
                    case 0  : "ExceptionNone"
                    case 1  : "WallExtension"
                    case 2  : "WallSiding"
                    default : "ExceptionNA"
                 endswitch
            endif }

      "Set ResExtWall:CF1R_OpqSrfRow:J10_VerifiedExistingCondition"
         ResExtWall:CF1R_OpqSrfRow:J10_VerifiedExistingCondition  = {
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  "NA"
            else if (IsAltered .AND. IsVerified)
            then  "Yes"
            else  "No"
            endif endif endif  }
      "Set ResExtWall:CF1R_OpqSrfRow:J11_ConstructionAssemblyNamePerformanceRes"
         ResExtWall:CF1R_OpqSrfRow:J11_ConstructionAssemblyNamePerformanceRes  = {  
		    if ( IfValidAnd( CF1R_OpqSrfRow:J10_VerifiedExistingCondition = "Yes" ) .AND.
		         LocalCompAssigned( exConstruction )  )
			then exConstruction:Name
			else UNDEFINED
			endif  }
     ; ----------------------------------------------------------------------
     ; Rules to populate Opaque Surfaces table rows for ALL CeilingBelowAttic
      "Set CeilingBelowAttic:CF1R_OpqSrfRow:J01_PartitionName"
         CeilingBelowAttic:CF1R_OpqSrfRow:J01_PartitionName  = {  Name  }
      "Set CeilingBelowAttic:CF1R_OpqSrfRow:J02_ThermalZoneName"
         CeilingBelowAttic:CF1R_OpqSrfRow:J02_ThermalZoneName  = {  Parent( Name )  }
      "Set CeilingBelowAttic:CF1R_OpqSrfRow:J03_ConstructionAssemblyNamePerformanceRes"
         CeilingBelowAttic:CF1R_OpqSrfRow:J03_ConstructionAssemblyNamePerformanceRes  = {  Construction:Name  }
      "Set CeilingBelowAttic:CF1R_OpqSrfRow:J04_NotApplicableMessage"
         CeilingBelowAttic:CF1R_OpqSrfRow:J04_NotApplicableMessage  = {  "n/a"  }
      "Set CeilingBelowAttic:CF1R_OpqSrfRow:J05_NotApplicableMessage"
         CeilingBelowAttic:CF1R_OpqSrfRow:J05_NotApplicableMessage  = {  "n/a"  }
      "Set CeilingBelowAttic:CF1R_OpqSrfRow:J06_PartitionGrossArea"
         CeilingBelowAttic:CF1R_OpqSrfRow:J06_PartitionGrossArea  = {  Area  }
      "Set CeilingBelowAttic:CF1R_OpqSrfRow:J07_NotApplicableMessage"
         CeilingBelowAttic:CF1R_OpqSrfRow:J07_NotApplicableMessage  = {  "n/a"  }
      "Set CeilingBelowAttic:CF1R_OpqSrfRow:J08_NotApplicableMessage"
         CeilingBelowAttic:CF1R_OpqSrfRow:J08_NotApplicableMessage  = {  "n/a"  }
      "Set CeilingBelowAttic:CF1R_OpqSrfRow:J09_StatusEAA"
         CeilingBelowAttic:CF1R_OpqSrfRow:J09_StatusEAA  =           ; SAC 7/30/19 - added logic to report J09_StatusEAA for AdditionAlone projects (tic #1118)
         {  if (ResProj:RunScope = 1 .AND. IfValidAnd( ResProj:IsAddAlone != 0 )==0)   ; new construction
            then  UNDEFINED
			else switch( Status )
                    case 1  : "Existing"
                    case 2  : "Altered"
                    case 3  : "New"
                    default : UNDEFINED
                 endswitch
            endif }
      "Set CeilingBelowAttic:CF1R_OpqSrfRow:J10_VerifiedExistingCondition"
         CeilingBelowAttic:CF1R_OpqSrfRow:J10_VerifiedExistingCondition  = {
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  "NA"
            else if (IsAltered .AND. IsVerified)
            then  "Yes"
            else  "No"
            endif endif endif  }
      "Set CeilingBelowAttic:CF1R_OpqSrfRow:J11_ConstructionAssemblyNamePerformanceRes"
         CeilingBelowAttic:CF1R_OpqSrfRow:J11_ConstructionAssemblyNamePerformanceRes  = {  
		    if ( IfValidAnd( CF1R_OpqSrfRow:J10_VerifiedExistingCondition = "Yes" ) .AND.
		         LocalCompAssigned( exConstruction )  )
			then exConstruction:Name
			else UNDEFINED
			endif  }
     ; ----------------------------------------------------------------------

     ; ----------------------------------------------------------------------
     ; Rules to populate Opaque Surfaces table rows for ALL ExteriorFloor
      "Set ResExtFlr:CF1R_OpqSrfRow:J01_PartitionName"
         ResExtFlr:CF1R_OpqSrfRow:J01_PartitionName  = {  Name  }
      "Set ResExtFlr:CF1R_OpqSrfRow:J02_ThermalZoneName"
         ResExtFlr:CF1R_OpqSrfRow:J02_ThermalZoneName  = {  Parent( Name )  }
      "Set ResExtFlr:CF1R_OpqSrfRow:J03_ConstructionAssemblyNamePerformanceRes"
         ResExtFlr:CF1R_OpqSrfRow:J03_ConstructionAssemblyNamePerformanceRes  = {  Construction:Name  }
      "Set ResExtFlr:CF1R_OpqSrfRow:J04_NotApplicableMessage"
         ResExtFlr:CF1R_OpqSrfRow:J04_NotApplicableMessage  = {  "n/a"  }
      "Set ResExtFlr:CF1R_OpqSrfRow:J05_NotApplicableMessage"
         ResExtFlr:CF1R_OpqSrfRow:J05_NotApplicableMessage  = {  "n/a"  }
      "Set ResExtFlr:CF1R_OpqSrfRow:J06_PartitionGrossArea"
         ResExtFlr:CF1R_OpqSrfRow:J06_PartitionGrossArea  = {  Area  }
      "Set ResExtFlr:CF1R_OpqSrfRow:J07_NotApplicableMessage"
         ResExtFlr:CF1R_OpqSrfRow:J07_NotApplicableMessage  = {  "n/a"  }
      "Set ResExtFlr:CF1R_OpqSrfRow:J08_NotApplicableMessage"
         ResExtFlr:CF1R_OpqSrfRow:J08_NotApplicableMessage  = {  "n/a"  }
      "Set ResExtFlr:CF1R_OpqSrfRow:J09_StatusEAA"
         ResExtFlr:CF1R_OpqSrfRow:J09_StatusEAA  =         ; SAC 7/30/19 - added logic to report J09_StatusEAA for AdditionAlone projects (tic #1118)
         {  if (ResProj:RunScope = 1 .AND. IfValidAnd( ResProj:IsAddAlone != 0 )==0)   ; new construction
            then  UNDEFINED
			else switch( Status )
                    case 1  : "Existing"
                    case 2  : "Altered"
                    case 3  : "New"
                    default : UNDEFINED
                 endswitch
            endif }
      "Set ResExtFlr:CF1R_OpqSrfRow:J10_VerifiedExistingCondition"
         ResExtFlr:CF1R_OpqSrfRow:J10_VerifiedExistingCondition  = {
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  "NA"
            else if (IsAltered .AND. IsVerified)
            then  "Yes"
            else  "No"
            endif endif endif  }
      "Set ResExtFlr:CF1R_OpqSrfRow:J11_ConstructionAssemblyNamePerformanceRes"
         ResExtFlr:CF1R_OpqSrfRow:J11_ConstructionAssemblyNamePerformanceRes  = {  
		    if ( IfValidAnd( CF1R_OpqSrfRow:J10_VerifiedExistingCondition = "Yes" ) .AND.
		         LocalCompAssigned( exConstruction )  )
			then exConstruction:Name
			else UNDEFINED
			endif  }
     ; ----------------------------------------------------------------------

     ; ----------------------------------------------------------------------
     ; Rules to populate Opaque Surfaces table rows for ALL FloorOverCrawl
      "Set FloorOverCrawl:CF1R_OpqSrfRow:J01_PartitionName"
         FloorOverCrawl:CF1R_OpqSrfRow:J01_PartitionName  = {  Name  }
      "Set FloorOverCrawl:CF1R_OpqSrfRow:J02_ThermalZoneName"
         FloorOverCrawl:CF1R_OpqSrfRow:J02_ThermalZoneName  = {  Parent( Name )  }
      "Set FloorOverCrawl:CF1R_OpqSrfRow:J03_ConstructionAssemblyNamePerformanceRes"
         FloorOverCrawl:CF1R_OpqSrfRow:J03_ConstructionAssemblyNamePerformanceRes  = {  Construction:Name  }
      "Set FloorOverCrawl:CF1R_OpqSrfRow:J04_NotApplicableMessage"
         FloorOverCrawl:CF1R_OpqSrfRow:J04_NotApplicableMessage  = {  "n/a"  }
      "Set FloorOverCrawl:CF1R_OpqSrfRow:J05_NotApplicableMessage"
         FloorOverCrawl:CF1R_OpqSrfRow:J05_NotApplicableMessage  = {  "n/a"  }
      "Set FloorOverCrawl:CF1R_OpqSrfRow:J06_PartitionGrossArea"
         FloorOverCrawl:CF1R_OpqSrfRow:J06_PartitionGrossArea  = {  Area  }
      "Set FloorOverCrawl:CF1R_OpqSrfRow:J07_NotApplicableMessage"
         FloorOverCrawl:CF1R_OpqSrfRow:J07_NotApplicableMessage  = {  "n/a"  }
      "Set FloorOverCrawl:CF1R_OpqSrfRow:J08_NotApplicableMessage"
         FloorOverCrawl:CF1R_OpqSrfRow:J08_NotApplicableMessage  = {  "n/a"  }
      "Set FloorOverCrawl:CF1R_OpqSrfRow:J09_StatusEAA"
         FloorOverCrawl:CF1R_OpqSrfRow:J09_StatusEAA  =           ; SAC 7/30/19 - added logic to report J09_StatusEAA for AdditionAlone projects (tic #1118)
         {  if (ResProj:RunScope = 1 .AND. IfValidAnd( ResProj:IsAddAlone != 0 )==0)   ; new construction
            then  UNDEFINED
			else switch( Status )
                    case 1  : "Existing"
                    case 2  : "Altered"
                    case 3  : "New"
                    default : UNDEFINED
                 endswitch
            endif }
      "Set FloorOverCrawl:CF1R_OpqSrfRow:J10_VerifiedExistingCondition"
         FloorOverCrawl:CF1R_OpqSrfRow:J10_VerifiedExistingCondition  = {
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  "NA"
            else if (IsAltered .AND. IsVerified)
            then  "Yes"
            else  "No"
            endif endif endif  }
      "Set FloorOverCrawl:CF1R_OpqSrfRow:J11_ConstructionAssemblyNamePerformanceRes"
         FloorOverCrawl:CF1R_OpqSrfRow:J11_ConstructionAssemblyNamePerformanceRes  = {  
		    if ( IfValidAnd( CF1R_OpqSrfRow:J10_VerifiedExistingCondition = "Yes" ) .AND.
		         LocalCompAssigned( exConstruction )  )
			then exConstruction:Name
			else UNDEFINED
			endif  }
     ; ----------------------------------------------------------------------

     ; ----------------------------------------------------------------------
     ; Rules to populate Opaque Surfaces table rows for ALL UndWall
      "Set UndWall:CF1R_OpqSrfRow:J01_PartitionName"
         UndWall:CF1R_OpqSrfRow:J01_PartitionName  = {  Name  }
      "Set UndWall:CF1R_OpqSrfRow:J02_ThermalZoneName"
         UndWall:CF1R_OpqSrfRow:J02_ThermalZoneName  = {  Parent( Name )  }
      "Set UndWall:CF1R_OpqSrfRow:J03_ConstructionAssemblyNamePerformanceRes"
         UndWall:CF1R_OpqSrfRow:J03_ConstructionAssemblyNamePerformanceRes  = {  Construction:Name  }
      "Set UndWall:CF1R_OpqSrfRow:J04_NotApplicableMessage"
         UndWall:CF1R_OpqSrfRow:J04_NotApplicableMessage  = {  "n/a"  }
      "Set UndWall:CF1R_OpqSrfRow:J05_NotApplicableMessage"
         UndWall:CF1R_OpqSrfRow:J05_NotApplicableMessage  = {  "n/a"  }
      "Set UndWall:CF1R_OpqSrfRow:J06_PartitionGrossArea"
         UndWall:CF1R_OpqSrfRow:J06_PartitionGrossArea  = {  Area  }
      "Set UndWall:CF1R_OpqSrfRow:J07_NotApplicableMessage"
         UndWall:CF1R_OpqSrfRow:J07_NotApplicableMessage  = {  "n/a"  }
      "Set UndWall:CF1R_OpqSrfRow:J08_NotApplicableMessage"
         UndWall:CF1R_OpqSrfRow:J08_NotApplicableMessage  = {  "n/a"  }
      "Set UndWall:CF1R_OpqSrfRow:J09_StatusEAA"
         UndWall:CF1R_OpqSrfRow:J09_StatusEAA  =                  ; SAC 7/30/19 - added logic to report J09_StatusEAA for AdditionAlone projects (tic #1118)
         {  if (ResProj:RunScope = 1 .AND. IfValidAnd( ResProj:IsAddAlone != 0 )==0)   ; new construction
            then  UNDEFINED
			else switch( Status )
                    case 1  : "Existing"
                    case 2  : "Altered"
                    case 3  : "New"
                    default : UNDEFINED
                 endswitch
            endif }
      "Set UndWall:CF1R_OpqSrfRow:J10_VerifiedExistingCondition"
         UndWall:CF1R_OpqSrfRow:J10_VerifiedExistingCondition  = {
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  "NA"
            else if (IsAltered .AND. IsVerified)
            then  "Yes"
            else  "No"
            endif endif endif  }
      "Set UndWall:CF1R_OpqSrfRow:J11_ConstructionAssemblyNamePerformanceRes"
         UndWall:CF1R_OpqSrfRow:J11_ConstructionAssemblyNamePerformanceRes  = {  
		    if ( IfValidAnd( CF1R_OpqSrfRow:J10_VerifiedExistingCondition = "Yes" ) .AND.
		         LocalCompAssigned( exConstruction )  )
			then exConstruction:Name
			else UNDEFINED
			endif  }
     ; ----------------------------------------------------------------------

     ; ----------------------------------------------------------------------
     ; Rules to populate Opaque Surfaces table rows for ALL InteriorCeiling
      "Set InteriorCeiling:CF1R_OpqSrfRow:J01_PartitionName"
         InteriorCeiling:CF1R_OpqSrfRow:J01_PartitionName  = {  Name  }
      "Set InteriorCeiling:CF1R_OpqSrfRow:J02_ThermalZoneName"
         InteriorCeiling:CF1R_OpqSrfRow:J02_ThermalZoneName  = {  Parent( Name )  }
      "Set InteriorCeiling:CF1R_OpqSrfRow:J03_ConstructionAssemblyNamePerformanceRes"
         InteriorCeiling:CF1R_OpqSrfRow:J03_ConstructionAssemblyNamePerformanceRes  = {  Construction:Name  }
      "Set InteriorCeiling:CF1R_OpqSrfRow:J04_NotApplicableMessage"
         InteriorCeiling:CF1R_OpqSrfRow:J04_NotApplicableMessage  = {  "n/a"  }
      "Set InteriorCeiling:CF1R_OpqSrfRow:J05_NotApplicableMessage"
         InteriorCeiling:CF1R_OpqSrfRow:J05_NotApplicableMessage  = {  "n/a"  }
      "Set InteriorCeiling:CF1R_OpqSrfRow:J06_PartitionGrossArea"
         InteriorCeiling:CF1R_OpqSrfRow:J06_PartitionGrossArea  = {  Area  }
      "Set InteriorCeiling:CF1R_OpqSrfRow:J07_NotApplicableMessage"
         InteriorCeiling:CF1R_OpqSrfRow:J07_NotApplicableMessage  = {  "n/a"  }
      "Set InteriorCeiling:CF1R_OpqSrfRow:J08_NotApplicableMessage"
         InteriorCeiling:CF1R_OpqSrfRow:J08_NotApplicableMessage  = {  "n/a"  }
      "Set InteriorCeiling:CF1R_OpqSrfRow:J09_StatusEAA"
         InteriorCeiling:CF1R_OpqSrfRow:J09_StatusEAA  =          ; SAC 7/30/19 - added logic to report J09_StatusEAA for AdditionAlone projects (tic #1118)
         {  if (ResProj:RunScope = 1 .AND. IfValidAnd( ResProj:IsAddAlone != 0 )==0)   ; new construction
            then  UNDEFINED
			else switch( Status )
                    case 1  : "Existing"
                    case 2  : "Altered"
                    case 3  : "New"
                    default : UNDEFINED
                 endswitch
            endif }
      "Set InteriorCeiling:CF1R_OpqSrfRow:J10_VerifiedExistingCondition"
         InteriorCeiling:CF1R_OpqSrfRow:J10_VerifiedExistingCondition  = {
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  "NA"
            else if (IsAltered .AND. IsVerified)
            then  "Yes"
            else  "No"
            endif endif endif  }
      "Set InteriorCeiling:CF1R_OpqSrfRow:J11_ConstructionAssemblyNamePerformanceRes"
         InteriorCeiling:CF1R_OpqSrfRow:J11_ConstructionAssemblyNamePerformanceRes  = {  
		    if ( IfValidAnd( CF1R_OpqSrfRow:J10_VerifiedExistingCondition = "Yes" ) .AND.
		         LocalCompAssigned( exConstruction )  )
			then exConstruction:Name
			else UNDEFINED
			endif  }
     ; ----------------------------------------------------------------------

     ; ----------------------------------------------------------------------
     ; Rules to populate Opaque Surfaces table rows for ALL InteriorFloor
      "Set ResIntFlr:CF1R_OpqSrfRow:J01_PartitionName"
         ResIntFlr:CF1R_OpqSrfRow:J01_PartitionName  = {  Name  }
      "Set ResIntFlr:CF1R_OpqSrfRow:J02_ThermalZoneName"
         ResIntFlr:CF1R_OpqSrfRow:J02_ThermalZoneName  = {  Parent( Name )  }
      "Set ResIntFlr:CF1R_OpqSrfRow:J03_ConstructionAssemblyNamePerformanceRes"
         ResIntFlr:CF1R_OpqSrfRow:J03_ConstructionAssemblyNamePerformanceRes  = {  Construction:Name  }
      "Set ResIntFlr:CF1R_OpqSrfRow:J04_NotApplicableMessage"
         ResIntFlr:CF1R_OpqSrfRow:J04_NotApplicableMessage  = {  "n/a"  }
      "Set ResIntFlr:CF1R_OpqSrfRow:J05_NotApplicableMessage"
         ResIntFlr:CF1R_OpqSrfRow:J05_NotApplicableMessage  = {  "n/a"  }
      "Set ResIntFlr:CF1R_OpqSrfRow:J06_PartitionGrossArea"
         ResIntFlr:CF1R_OpqSrfRow:J06_PartitionGrossArea  = {  Area  }
      "Set ResIntFlr:CF1R_OpqSrfRow:J07_NotApplicableMessage"
         ResIntFlr:CF1R_OpqSrfRow:J07_NotApplicableMessage  = {  "n/a"  }
      "Set ResIntFlr:CF1R_OpqSrfRow:J08_NotApplicableMessage"
         ResIntFlr:CF1R_OpqSrfRow:J08_NotApplicableMessage  = {  "n/a"  }
      "Set ResIntFlr:CF1R_OpqSrfRow:J09_StatusEAA"
         ResIntFlr:CF1R_OpqSrfRow:J09_StatusEAA  =            ; SAC 7/30/19 - added logic to report J09_StatusEAA for AdditionAlone projects (tic #1118)
         {  if (ResProj:RunScope = 1 .AND. IfValidAnd( ResProj:IsAddAlone != 0 )==0)   ; new construction
            then  UNDEFINED
			else switch( Status )
                    case 1  : "Existing"
                    case 2  : "Altered"
                    case 3  : "New"
                    default : UNDEFINED
                 endswitch
            endif }
      "Set ResIntFlr:CF1R_OpqSrfRow:J10_VerifiedExistingCondition"
         ResIntFlr:CF1R_OpqSrfRow:J10_VerifiedExistingCondition  = {
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  "NA"
            else if (IsAltered .AND. IsVerified)
            then  "Yes"
            else  "No"
            endif endif endif  }
      "Set ResIntFlr:CF1R_OpqSrfRow:J11_ConstructionAssemblyNamePerformanceRes"
         ResIntFlr:CF1R_OpqSrfRow:J11_ConstructionAssemblyNamePerformanceRes  = {  
		    if ( IfValidAnd( CF1R_OpqSrfRow:J10_VerifiedExistingCondition = "Yes" ) .AND.
		         LocalCompAssigned( exConstruction )  )
			then exConstruction:Name
			else UNDEFINED
			endif  }
     ; ----------------------------------------------------------------------

     ; ----------------------------------------------------------------------
     ; Rules to populate Opaque Surfaces table rows for ALL IntWalls
      "Set ResIntWall:CF1R_OpqSrfRow:J01_PartitionName"
         ResIntWall:CF1R_OpqSrfRow:J01_PartitionName  = {  Name  }
      "Set ResIntWall:CF1R_OpqSrfRow:J02_ThermalZoneName"
         ResIntWall:CF1R_OpqSrfRow:J02_ThermalZoneName  =      ; SAC 6/14/20 - check Outside assignment before referencing it
         {  if (LocalCompAssigned( Outside ))
            then  Parent( Name ) + ">>" + Outside:Name
            else  Parent( Name )  endif  }
      "Set ResIntWall:CF1R_OpqSrfRow:J03_ConstructionAssemblyNamePerformanceRes"
         ResIntWall:CF1R_OpqSrfRow:J03_ConstructionAssemblyNamePerformanceRes  = {  Construction:Name  }
      "Set ResIntWall:CF1R_OpqSrfRow:J04_NotApplicableMessage"
         ResIntWall:CF1R_OpqSrfRow:J04_NotApplicableMessage  = {  "n/a"  }
      "Set ResIntWall:CF1R_OpqSrfRow:J05_NotApplicableMessage"
         ResIntWall:CF1R_OpqSrfRow:J05_NotApplicableMessage  = {  "n/a"  }
      "Set ResIntWall:CF1R_OpqSrfRow:J06_PartitionGrossArea"
         ResIntWall:CF1R_OpqSrfRow:J06_PartitionGrossArea  = {  Area  }
      "Set ResIntWall:CF1R_OpqSrfRow:J07_PartitionWindowDoorArea"
         ResIntWall:CF1R_OpqSrfRow:J07_PartitionWindowDoorArea  = {
            Format( "%g", ValidOr( ChildAreaSum, 0 ) )  }
      "Set ResIntWall:CF1R_OpqSrfRow:J08_NotApplicableMessage"
         ResIntWall:CF1R_OpqSrfRow:J08_NotApplicableMessage  = {  "n/a"  }
      "Set ResIntWall:CF1R_OpqSrfRow:J09_StatusEAA"
         ResIntWall:CF1R_OpqSrfRow:J09_StatusEAA  =            ; SAC 7/30/19 - added logic to report J09_StatusEAA for AdditionAlone projects (tic #1118)
         {  if (ResProj:RunScope = 1 .AND. IfValidAnd( ResProj:IsAddAlone != 0 )==0)   ; new construction
            then  UNDEFINED
			else switch( Status )
                    case 1  : "Existing"
                    case 2  : "Altered"
                    case 3  : "New"
                    default : UNDEFINED
                 endswitch
            endif }
      "Set ResIntWall:CF1R_OpqSrfRow:J10_VerifiedExistingCondition"
         ResIntWall:CF1R_OpqSrfRow:J10_VerifiedExistingCondition  = {
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  "NA"
            else if (IsAltered .AND. IsVerified)
            then  "Yes"
            else  "No"
            endif endif endif  }
      "Set ResIntWall:CF1R_OpqSrfRow:J11_ConstructionAssemblyNamePerformanceRes"
         ResIntWall:CF1R_OpqSrfRow:J11_ConstructionAssemblyNamePerformanceRes  = {  
		    if ( IfValidAnd( CF1R_OpqSrfRow:J10_VerifiedExistingCondition = "Yes" ) .AND.
		         LocalCompAssigned( exConstruction )  )
			then exConstruction:Name
			else UNDEFINED
			endif  }
  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL Opaque Surface table rows
   "Set cf1rtblRowOpaqueSurface parent"   cf1rtblRowOpaqueSurface:Parent  = {
         cf1rTableOpaqueSurfaces:Name  }
  ; END of Opaque Surfaces table rules
  ; ----------------------------------------------------------------------

  ; ----------------------------------------------------------------------
  ; Section_K Cathedral Ceilings table only if Cathedral Ceilings exist in the project
   "Call subordinate rulelist to handle Cathedral Ceilings"
      ResProj:Action   = {  if ( ComponentCount( CathedralCeiling ) > 0 ) then  EvalRulelist( "CF1RPRF01E_cf1rSection_K_Proposed" )
                            else  UNCHANGED  endif }

  ; ----------------------------------------------------------------------
  ; Section_L Attic table table only if Attics exist in the project
   "Call subordinate rulelist to handle Section_L Attics"
      ResProj:Action   = {  if ( ComponentCount( Attic ) > 0 ) then  EvalRulelist( "CF1RPRF01E_cf1rSection_L_Proposed" )
                            else  UNCHANGED  endif }

; RJH 9/14/22 moved Section_M Glazing table to Rulelist CF1RPRF01E_cf1rSection_Fenmf_Proposed called from NRCCPRF-Rulelists.rule Section_Fenmf

  ; ----RJH 9/10/22 moved to NRCCPRF-Rulelists.rule Section_Doormf------------------------------------------------------------------
  ; Section_N Opaque Door table only if Doors exist in the project
  ; "Call subordinate rulelist to handle Section_N Doors"
  ;    ResProj:Action   = {  if ( ComponentCount( Door ) > 0 ) then  EvalRulelist( "CF1RPRF01E_cf1rSection_N_Proposed" ) RJH 9/10/22 renamed CF1RPRF01E_cf1rSection_Doormf_Proposed
  ;                          else  UNCHANGED  endif }

  ; ----------------------------------------------------------------------
  ; Section_O Overhangs and Fins table only if REQUIRED SPECIAL FEATURES includes Window overhangs and/or fins AND THEN only for Windows where ShowFinsOverhang == 1
   "Call subordinate rulelist to handle Section_O Overhangs and Fins"
      ResProj:Action   = {  if ( SpeclFeatrs:WinOVerHngFin == 1 ) then  EvalRulelist( "CF1RPRF01E_cf1rSection_O_Proposed" )
                            else  UNCHANGED  endif }

  ; ----------------------------------------------------------------------
  ; Section_Q Opaque Constructions table
   "Create & initialize new cf1rSection_Q object"
      cf1rCF1RPRF01E:Action  = {  CreateChildren( cf1rSection_Q, 1, "Section_Q" )  }     ; no init needed
   "Create & initialize new cf1rTableOpaqueConstructions object"
      cf1rSection_Q:Action   = {  CreateChildren( cf1rTableOpaqueConstructions, 1, "TableOpaqueConstructions" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual Opaque Constructions table rows
   "Create cf1rtblRowOpaqueCons for all assigned to ExtWall surface types"
      Cons:CF1R_OpqConsRow   = {  if ( ( AssignedSurfaceArea > 0 ) && ( CanAssignTo = 0 ) ) then  CreateComp( cf1rtblRowOpaqueCons, Name + " EW-OpqConsRow" )
                                    else  UNDEFINED  endif  }
   "Create cf1rtblRowOpaqueCons for all assigned to Cathedral Ceiling surface types"
      Cons:CF1R_OpqConsRow   = {  if ( ( AssignedSurfaceArea > 0 ) && ( CanAssignTo = 2 ) ) then  CreateComp( cf1rtblRowOpaqueCons, Name + " CC-OpqConsRow" )
                                    else  UNCHANGED  endif  }
   "Create cf1rtblRowOpaqueCons for all assigned to IntWall surface types"
      Cons:CF1R_OpqConsRow   = {  if ( ( AssignedSurfaceArea > 0 ) && ( CanAssignTo = 10 ) ) then  CreateComp( cf1rtblRowOpaqueCons, Name + " IW-OpqConsRow" )
                                    else  UNCHANGED  endif  }
   "Create cf1rtblRowOpaqueCons for all assigned to Attic Roofs surface types"
      Cons:CF1R_OpqConsRow   = {  if ( ( AssignedSurfaceArea > 0 ) && ( CanAssignTo = 1 ) ) then  CreateComp( cf1rtblRowOpaqueCons, Name + " AR-OpqConsRow" )
                                    else  UNCHANGED  endif  }
   "Create cf1rtblRowOpaqueCons for all assigned to Floors Over Crawlspace surface types"
      Cons:CF1R_OpqConsRow   = {  if ( ( AssignedSurfaceArea > 0 ) && ( CanAssignTo = 9 ) ) then  CreateComp( cf1rtblRowOpaqueCons, Name + " FoC-OpqConsRow" )
                                    else  UNCHANGED  endif  }
   "Create cf1rtblRowOpaqueCons for all assigned to Ceilings (below attic) surface types"
      Cons:CF1R_OpqConsRow   = {  if ( ( AssignedSurfaceArea > 0 ) && ( CanAssignTo = 3 ) ) then  CreateComp( cf1rtblRowOpaqueCons, Name + " CbA-OpqConsRow" )
                                    else  UNCHANGED  endif  }
   "Create cf1rtblRowOpaqueCons for all assigned to Exterior Floors surface types"
      Cons:CF1R_OpqConsRow   = {  if ( ( AssignedSurfaceArea > 0 ) && ( CanAssignTo = 5 ) ) then  CreateComp( cf1rtblRowOpaqueCons, Name + " EF-OpqConsRow" )
                                    else  UNCHANGED  endif  }
   "Create cf1rtblRowOpaqueCons for all assigned to Interior Floors surface types"
      Cons:CF1R_OpqConsRow   = {  if ( ( AssignedSurfaceArea > 0 ) && ( CanAssignTo = 4 ) ) then  CreateComp( cf1rtblRowOpaqueCons, Name + " IF-OpqConsRow" )
                                    else  UNCHANGED  endif  }
   "Create cf1rtblRowOpaqueCons for all assigned to Underground Walls surface types"
      Cons:CF1R_OpqConsRow   = {  if ( ( AssignedSurfaceArea > 0 ) && ( CanAssignTo = 20 ) ) then  CreateComp( cf1rtblRowOpaqueCons, Name + " UW-OpqConsRow" )
                                    else  UNCHANGED  endif  }
   "Create cf1rtblRowOpaqueCons for all assigned to Interior Ceilings surface types"
      Cons:CF1R_OpqConsRow   = {  if ( ( AssignedSurfaceArea > 0 ) && ( CanAssignTo = 6 ) ) then  CreateComp( cf1rtblRowOpaqueCons, Name + " IC-OpqConsRow" )
                                    else  UNCHANGED  endif  }
   ; ----------------------------------------------------------------------
   ; Rules to populate Opaque Constructions table rows for ALL Opaque Constructions
    "Set Cons:CF1R_OpqConsRow:Q01_ConstructionAssemblyNamePerformanceRes"
         Cons:CF1R_OpqConsRow:Q01_ConstructionAssemblyNamePerformanceRes  = {  Name  }
    "Set Cons:CF1R_OpqConsRow:Q02_OpaqueSurfaceType"
          Cons:CF1R_OpqConsRow:Q02_OpaqueSurfaceType  = {
               switch( EnumString( CanAssignTo ) )
                  case "Exterior Walls"         :  "ExteriorWall"
                  case "Interior Walls"         :  "InteriorWall"
                  case "Underground Walls"      :  "UndergroundWall"
                  case "Attic Roofs"            :  "AtticRoof"
                  case "Cathedral Ceilings"     :  "CeilingCathedral"
                  case "Ceilings (below attic)" :  "CeilingBelowAttic"
                  case "Interior Ceilings"      :  "CeilingInterior"
                  case "Interior Floors"        :  "InteriorFloor"
                  case "Exterior Floors"        :  "ExteriorFloor"
                  case "Floors Over Crawlspace" :  "FloorOverCrawlspace"
                  default  :  UNDEFINED
               endswitch  }
    "Set Cons:CF1R_OpqConsRow:Q02a_PartitionAboveGrade"
          Cons:CF1R_OpqConsRow:Q02a_PartitionAboveGrade  = {
               switch( EnumString( CanAssignTo ) )
                  case "Exterior Walls"         :  "true"
                  case "Interior Walls"         :  "true"
                  case "Underground Walls"      :  "false"
                  case "Attic Roofs"            :  "true"
                  case "Cathedral Ceilings"     :  "true"
                  case "Ceilings (below attic)" :  "true"
                  case "Interior Ceilings"      :  "true"
                  case "Interior Floors"        :  "true"
                  case "Exterior Floors"        :  "true"
                  case "Floors Over Crawlspace" :  "true"
                  case "Slab Floors"            :  "true"
                  case "Underground Floors"     :  "false"
                  default  :  UNDEFINED
               endswitch  }
   "Set Cons:CF1R_OpqConsRow:Q03_ConstructionAssemblyType"
          Cons:CF1R_OpqConsRow:Q03_ConstructionAssemblyType  = {
               switch( EnumString( Type ) )
                  case "Wood Framed Wall"         :  "WoodFramedWall"
                  case "Steel Framed Wall"        :  "SteelFramedWall"
                  case "Concrete / ICF / Brick"   :  "ConcreteBrickICF"
                  case "Hollow Unit Masonry"      :  "HollowUnitMasonry"
                  case "Adobe / Strawbale / Log"  :  "AdobeStrawbaleLog"
                  case "SIPS Wall"                :  "SIPS_Wall"
                  case "No Frame (concrete/CMU)"  :  "NoFrameConcreteCMU"
                  case "Wood Framed Ceiling"      :  "WoodFramedCeiling"
                  case "Built-up Roof"            :  "BuiltupRoof"
                  case "SIPS Ceiling"             :  "SIPS_Ceiling"
                  case "Wood Framed Floor"        :  "WoodFramedFloor"
                  case "SIPS Floor"               :  "SIPS_Floor"
                  default  :  UNDEFINED
               endswitch  }


   "Create new cf1rFramingProperties child object"
      Cons:CF1R_FramingProperties  = {   if (LocalCompAssigned( CF1R_OpqConsRow )) then CreateComp( cf1rFramingProperties, Name + " RowOpaqueConsFraming" ) else  UNCHANGED  endif  }

     "Set Cons:CF1R_FramingProperties:Q04a_FramingSize"  Cons:CF1R_FramingProperties:Q04a_FramingSize  = {  
               switch ( EnumString( FrameLayerAbr ) )
                  case  "2x4"            : "2x4"
                  case  "2x4 Btm Chrd"   : "2x4"
                  case  "2x4 Top Chrd"   : "2x4"
                  case  "2x4 AWF"        : "2x4"
                  case  "2x6"            : "2x6"
                  case  "2x6 AWF"        : "2x6"
                  case  "2x8"            : "2x8"
                  case  "2x10"           : "2x10"
                  case  "2x12"           : "2x12"
                  default  :  "Other"
               endswitch  } 
     "Set Cons:CF1R_FramingProperties:Q04b_FramingSizeOther"
          Cons:CF1R_FramingProperties:Q04b_FramingSizeOther  = {  
		       if (CF1R_FramingProperties:Q04a_FramingSize == "Other")
			   then EnumString( FrameLayerAbr )
			   else UNDEFINED
			   endif  }

     "Set Cons:CF1R_FramingProperties:Q04c_FramingLocation"
          Cons:CF1R_FramingProperties:Q04c_FramingLocation  = {  
            if (FrameLayer == 10424)   ; 2x4 Bottom Chord of Truss @ 24 in. O.C.
            then  "BottomChordTruss"
            else if (FrameLayer == 20424)   ; 2x4 Top Chord of Roof Truss @ 24 in. O.C.
            then  "TopChordRoofTruss"
            else  UNDEFINED
            endif endif  }

     "Set Cons:CF1R_FramingProperties:Q04d_FramingSpacing"  Cons:CF1R_FramingProperties:Q04d_FramingSpacing  = {  
               switch ( FrameSpacing )
                  case  16  : "16InchOC"
                  case  24  : "24InchOC"
                  case  48  : "48InchOC"
                  case  96  : "96InchOC"
                  default  :  "Other"
               endswitch  } 
     "Set Cons:CF1R_FramingProperties:Q04e_FramingSpacingOther"
          Cons:CF1R_FramingProperties:Q04e_FramingSpacingOther  = {  
		       if (CF1R_FramingProperties:Q04d_FramingSpacing == "Other")
			   then Format( "%.0f", FrameSpacing )
			   else UNDEFINED
			   endif  }

     "Set Cons:CF1R_FramingProperties:Q04f_RaisedHeelTruss"
          Cons:CF1R_FramingProperties:Q04f_RaisedHeelTruss  = {  
            if (RaisedHeelTruss > 0)   ; Construction is a RaisedHeelTruss
            then  FramingRpt
            else  UNDEFINED
            endif }

   ; Rule to set Parent for cf1rFramingProperties
    "Set Cons:CF1R_FramingProperties parent"   Cons:CF1R_FramingProperties:Parent  = {  CF1R_OpqConsRow:Name  }

    "Set Cons:CF1R_OpqConsRow:afterchildren_Q05_CavityInsulationRes"
         Cons:CF1R_OpqConsRow:afterchildren_Q05_CavityInsulationRes  =        ; SAC 8/6/19 - replaced use of 'NoInsulation' w/ 'R0' & added mappings for special compressed selections (tic #1118)
            {                   switch( CavityRRpt )
                                    case "R 11"  :  "R11"
                                    case "R 13"  :  "R13"
                                    case "R 15"  :  "R15"
                                    case "R 19"  :  "R19"
                                    case "R 21"  :  "R21"
                                    case "R 22"  :  "R22"
                                    case "R 23"  :  "R23"
                                    case "R 24"  :  "R24"
                                    case "R 25"  :  "R25"
                                    case "R 30"  :  "R30"
                                    case "R 38"  :  "R38"
									case "- no insulation (vertical) -"      :  "R0"
                           case "R 19 in 5-1/2 in. cavity (R-18)"   :  "R19"
                           case "R 30 in 7-1/4 in. cavity (R-25)"   :  "R30"
                           case "R 38 in 11-1/4 in. cavity (R-37)"  :  "R38"
                           case "R 38C in 9-1/4 in. cavity (R-35)"  :  "R38"
                                    case "none"  :  "R0"
                                    default      :  "Other"
                                endswitch  }
; Set optional afterchildren_Q05a_CavityInsulationOther if afterchildren_Q05_CavityInsulationRes is not a standard enumerated value
    "Set Cons:CF1R_OpqConsRow:afterchildren_Q05a_CavityInsulationOther"
      Cons:CF1R_OpqConsRow:afterchildren_Q05a_CavityInsulationOther  =        ; SAC 10/21/19 - added hyphenation to R-value reporting (tic #1121)
      {  switch (CavityRRpt)
            case  "R 19 in 5-1/2 in. cavity (R-18)"  :  "R-19 in 5-1/2 in. cavity (R-18)" 
            case  "R 30 in 7-1/4 in. cavity (R-25)"  :  "R-30 in 7-1/4 in. cavity (R-25)" 
            case  "R 38 in 11-1/4 in. cavity (R-37)" :  "R-38 in 11-1/4 in. cavity (R-37)"
            case  "R 38C in 9-1/4 in. cavity (R-35)" :  "R-38C in 9-1/4 in. cavity (R-35)"
            case  "R  1"  :  "R-1"
            case  "R  2"  :  "R-2"
            case  "R  3"  :  "R-3"
            case  "R  4"  :  "R-4"
            case  "R  5"  :  "R-5"
            case  "R  6"  :  "R-6"
            case  "R  7"  :  "R-7"
            case  "R  8"  :  "R-8"
            case  "R  9"  :  "R-9"
            case  "R 10"  :  "R-10"
            case  "R 11"  :  "R-11"
            case  "R 12"  :  "R-12"
            case  "R 13"  :  "R-13"
            case  "R 14"  :  "R-14"
            case  "R 15"  :  "R-15"
            case  "R 16"  :  "R-16"
            case  "R 17"  :  "R-17"
            case  "R 18"  :  "R-18"
            case  "R 19"  :  "R-19"
            case  "R 20"  :  "R-20"
            case  "R 21"  :  "R-21"
            case  "R 22"  :  "R-22"
            case  "R 23"  :  "R-23"
            case  "R 24"  :  "R-24"
            case  "R 25"  :  "R-25"
            case  "R 26"  :  "R-26"
            case  "R 27"  :  "R-27"
            case  "R 28"  :  "R-28"
            case  "R 29"  :  "R-29"
            case  "R 30"  :  "R-30"
            case  "R 31"  :  "R-31"
            case  "R 32"  :  "R-32"
            case  "R 33"  :  "R-33"
            case  "R 34"  :  "R-34"
            case  "R 35"  :  "R-35"
            case  "R 36"  :  "R-36"
            case  "R 37"  :  "R-37"
            case  "R 38"  :  "R-38"
            case  "R 39"  :  "R-39"
            case  "R 40"  :  "R-40"
            case  "R 41"  :  "R-41"
            case  "R 42"  :  "R-42"
            case  "R 43"  :  "R-43"
            case  "R 44"  :  "R-44"
            case  "R 45"  :  "R-45"
            case  "R 46"  :  "R-46"
            case  "R 47"  :  "R-47"
            case  "R 48"  :  "R-48"
            case  "R 49"  :  "R-49"
            case  "R 50"  :  "R-50"
            case  "R 51"  :  "R-51"
            case  "R 52"  :  "R-52"
            case  "R 53"  :  "R-53"
            case  "R 54"  :  "R-54"
            case  "R 55"  :  "R-55"
            case  "R 56"  :  "R-56"
            case  "R 57"  :  "R-57"
            case  "R 58"  :  "R-58"
            case  "R 59"  :  "R-59"
            case  "R 60"  :  "R-60"
            default       :  CavityRRpt
         endswitch  }

    "Set Cons:CF1R_OpqConsRow:afterchildren_Q05b_CavityInsulation"
         Cons:CF1R_OpqConsRow:afterchildren_Q05b_CavityInsulation  = {  CavityLayerRVal  }

      ; SAC 10/22/19 - removed check that was preventing logging int/ext furring insulation when furring was present (tic #1121) 
    "Set Cons:CF1R_OpqConsRow:afterchildren_Q06a_InteriorContinuousInsulation"      ; SAC 7/17/19 - tic #1116
      Cons:CF1R_OpqConsRow:afterchildren_Q06a_InteriorContinuousInsulation =
      {  if (CanAssignTo = 0 .OR. CanAssignTo = 10 .OR. CanAssignTo = 20)            ; Exterior Walls / Interior Walls / Underground Walls
         then  if (Type < 2 .OR. Type = 5)   ; Wood Framed Wall / Steel Framed Wall / SIPS Wall
               then  if (SheathInsul2Layer < 99000 .OR. SheathInsul2Layer > 100000)  ; none, Gypsum or Wood
                     then  0
                     else if (SheathInsul2Layer = 99000)
                     then  ValidOr( SheathInsul2LayerRVal, 0 )
                     else  SheathInsul2Layer - 99000
                     endif endif
               else                          ; Concrete / ICF / Brick -/- Hollow Unit Masonry -/- Adobe / Strawbale / Log
                     if (FurringInsul2Layer = 100401)     ; none or furring present
                     then  0
                     else if (FurringInsul2Layer = 900)
                     then  ValidOr( FurringInsul2LayerRVal, 0 )
                     else  FurringInsul2Layer
                     endif endif   endif
         else if (CanAssignTo = 1)                          ; Attic Roofs  
         then  0     ; only Exterior continuous
         else if (CanAssignTo = 2 .OR. CanAssignTo = 3 .OR. CanAssignTo = 6)     ; Cathedral Ceilings / Ceilings (below attic) / Interior Ceilings
         then        if (SheathInsulLayer < 99000 .OR. SheathInsulLayer > 100000)  ; none, Gypsum or Wood
                     then  0
                     else if (SheathInsulLayer = 99000)
                     then  ValidOr( SheathInsulLayerRVal, 0 )
                     else  SheathInsulLayer - 99000
                     endif endif
         else if (CanAssignTo = 4 .OR. CanAssignTo = 5 .OR. CanAssignTo = 9)     ; Interior Floors / Exterior Floors / Floors Over Crawlspace
         then  if (Type = 25)       ; Concrete / ICF / Brick
               then  if (FurringInsul2Layer = 100401)     ; none or furring present
                     then  0
                     else if (FurringInsul2Layer = 900)
                     then  ValidOr( FurringInsul2LayerRVal, 0 )
                     else  FurringInsul2Layer
                     endif endif
               else  0  endif
         else  0  endif endif endif endif  }
      ; SAC 10/22/19 - removed check that was preventing logging int/ext furring insulation when furring was present (tic #1121) 
    "Set Cons:CF1R_OpqConsRow:afterchildren_Q06b_ExteriorContinuousInsulation"      ; SAC 7/17/19 - tic #1116
      Cons:CF1R_OpqConsRow:afterchildren_Q06b_ExteriorContinuousInsulation =
      {  if (CanAssignTo = 0 .OR. CanAssignTo = 10 .OR. CanAssignTo = 20)            ; Exterior Walls / Interior Walls / Underground Walls
         then  if (Type < 2 .OR. Type = 5)   ; Wood Framed Wall / Steel Framed Wall / SIPS Wall
               then  if (SheathInsulLayer < 99000 .OR. SheathInsulLayer > 100000)  ; none, Gypsum or Wood
                     then  0
                     else if (SheathInsulLayer = 99000)
                     then  ValidOr( SheathInsulLayerRVal, 0 )
                     else  SheathInsulLayer - 99000
                     endif endif
               else                          ; Concrete / ICF / Brick -/- Hollow Unit Masonry -/- Adobe / Strawbale / Log
                     if (FurringInsulLayer = 100401)     ; none or furring present
                     then  0
                     else if (FurringInsulLayer = 900)
                     then  ValidOr( FurringInsulLayerRVal, 0 )
                     else  FurringInsulLayer
                     endif endif   endif
         else if (CanAssignTo = 1 .OR. CanAssignTo = 2)     ; Attic Roofs / Cathedral Ceilings
         then        if (AbvDeckInsulLayer < 99000)         ; none
                     then  0
                     else if (AbvDeckInsulLayer = 99000)
                     then  ValidOr( AbvDeckInsulLayerRVal, 0 )
                     else  AbvDeckInsulLayer - 99000
                     endif endif
         else if (CanAssignTo = 3 .OR. CanAssignTo = 6)     ; Ceilings (below attic) / Interior Ceilings
         then  0
         else if (CanAssignTo = 4 .OR. CanAssignTo = 5 .OR. CanAssignTo = 9)     ; Interior Floors / Exterior Floors / Floors Over Crawlspace
         then  if (Type = 25)       ; Concrete / ICF / Brick
               then  if (FurringInsulLayer = 100401)       ; none or furring present
                     then  0
                     else if (FurringInsulLayer = 900)
                     then  ValidOr( FurringInsulLayerRVal, 0 )
                     else  FurringInsulLayer
                     endif endif
               else  if (SheathInsulLayer < 99000 .OR. SheathInsulLayer > 100000)   ; Wood Framed Floor / SIPS Floor
                     then  0
                     else if (SheathInsulLayer = 99000)
                     then  ValidOr( SheathInsulLayerRVal, 0 )
                     else  SheathInsulLayer - 99000
                     endif endif   endif
         else  0  endif endif endif endif  }
      ; SAC 10/21/19 - replaced "No insulation" with "None" and also switched single "No insulation" (when both are 0) to "None / None" (tic #1121)
    "Set Cons:CF1R_OpqConsRow:afterchildren_Q06_ContinuousInsulationString"      ; SAC 7/18/19 - tic #1116
      Cons:CF1R_OpqConsRow:afterchildren_Q06_ContinuousInsulationString =
      {  if (CF1R_OpqConsRow:afterchildren_Q06a_InteriorContinuousInsulation < 0.01 .AND.
             CF1R_OpqConsRow:afterchildren_Q06b_ExteriorContinuousInsulation < 0.01)
         then  "None / None"
         else if (CF1R_OpqConsRow:afterchildren_Q06a_InteriorContinuousInsulation < 0.01)
         then  Format( "None / R-%g", CF1R_OpqConsRow:afterchildren_Q06b_ExteriorContinuousInsulation )
         else if (CF1R_OpqConsRow:afterchildren_Q06b_ExteriorContinuousInsulation < 0.01)
         then  Format( "R-%g / None", CF1R_OpqConsRow:afterchildren_Q06a_InteriorContinuousInsulation )
         else  Format( "R-%g / R-%g", CF1R_OpqConsRow:afterchildren_Q06a_InteriorContinuousInsulation,
                                      CF1R_OpqConsRow:afterchildren_Q06b_ExteriorContinuousInsulation )
         endif endif endif  }

    "Set Cons:CF1R_OpqConsRow:afterchildren_Q07_UFactor"
         Cons:CF1R_OpqConsRow:afterchildren_Q07_UFactor  = { atof( Format( "%.3f", WinterDesUValue ) ) }
    "Set Cons:CF1R_OpqConsRow:afterchildren_Q08a_Thickness"
         Cons:CF1R_OpqConsRow:afterchildren_Q08a_Thickness  = { atof( Format( "%.2f", OverallThickness ) ) }
;    "Set Cons:CF1R_OpqConsRow:afterchildren_Q08b_InsulationThickness"
;         Cons:CF1R_OpqConsRow:afterchildren_Q08b_InsulationThickness  = { atof( Format( "%.2f", ?? ) ) }

; RJH - 1/28/20 added afterchildren_Q08c_MassLayerThickness per ticket #1191
    "Set Cons:CF1R_OpqConsRow:afterchildren_Q08c_MassLayerThickness"
         Cons:CF1R_OpqConsRow:afterchildren_Q08c_MassLayerThickness  = 
		  {  switch (MassThickness)
				case  3 : 3
				case  4 : 4
				case  5 : 5
				case  6 : 6
				case  7 : 7
				case  8 : 8
				case  9 : 9
				case 10 : 10
				case 11 : 11
				case 12 : 12
				case 13 : 13
				case 14 : 14
				case 15 : 15
				case 16 : 16
				case 17 : 17
				case 18 : 18
				case 19 : 19
				case 20 : 20
				case 21 : 21
				case 22 : 22
				case 23 : 23
				case 24 : 24
				default : UNDEFINED
			 endswitch  }

    "Set Cons:CF1R_OpqConsRow:afterchildren_Q08_AssemblyLayers[1]"
         Cons:CF1R_OpqConsRow:afterchildren_Q08_AssemblyLayers[1]  = {  if (LocalStatus( AssemblyLayersRpt[1] ) > 0) then  AssemblyLayersRpt[1]  else  UNDEFINED  endif  }
    "Set Cons:CF1R_OpqConsRow:afterchildren_Q08_AssemblyLayers[2]"
         Cons:CF1R_OpqConsRow:afterchildren_Q08_AssemblyLayers[2]  = {  if (LocalStatus( AssemblyLayersRpt[2] ) > 0) then  AssemblyLayersRpt[2]  else  UNDEFINED  endif  }
    "Set Cons:CF1R_OpqConsRow:afterchildren_Q08_AssemblyLayers[3]"
         Cons:CF1R_OpqConsRow:afterchildren_Q08_AssemblyLayers[3]  = {  if (LocalStatus( AssemblyLayersRpt[3] ) > 0) then  AssemblyLayersRpt[3]  else  UNDEFINED  endif  }
    "Set Cons:CF1R_OpqConsRow:afterchildren_Q08_AssemblyLayers[4]"
         Cons:CF1R_OpqConsRow:afterchildren_Q08_AssemblyLayers[4]  = {  if (LocalStatus( AssemblyLayersRpt[4] ) > 0) then  AssemblyLayersRpt[4]  else  UNDEFINED  endif  }
    "Set Cons:CF1R_OpqConsRow:afterchildren_Q08_AssemblyLayers[5]"
         Cons:CF1R_OpqConsRow:afterchildren_Q08_AssemblyLayers[5]  = {  if (LocalStatus( AssemblyLayersRpt[5] ) > 0) then  AssemblyLayersRpt[5]  else  UNDEFINED  endif  }
    "Set Cons:CF1R_OpqConsRow:afterchildren_Q08_AssemblyLayers[6]"
         Cons:CF1R_OpqConsRow:afterchildren_Q08_AssemblyLayers[6]  = {  if (LocalStatus( AssemblyLayersRpt[6] ) > 0) then  AssemblyLayersRpt[6]  else  UNDEFINED  endif  }
    "Set Cons:CF1R_OpqConsRow:afterchildren_Q08_AssemblyLayers[7]"
         Cons:CF1R_OpqConsRow:afterchildren_Q08_AssemblyLayers[7]  = {  if (LocalStatus( AssemblyLayersRpt[7] ) > 0) then  AssemblyLayersRpt[7]  else  UNDEFINED  endif  }
    "Set Cons:CF1R_OpqConsRow:afterchildren_Q08_AssemblyLayers[8]"
         Cons:CF1R_OpqConsRow:afterchildren_Q08_AssemblyLayers[8]  = {  if (LocalStatus( AssemblyLayersRpt[8] ) > 0) then  AssemblyLayersRpt[8]  else  UNDEFINED  endif  }
    "Set Cons:CF1R_OpqConsRow:afterchildren_Q08_AssemblyLayers[9]"
         Cons:CF1R_OpqConsRow:afterchildren_Q08_AssemblyLayers[9]  = {  if (LocalStatus( AssemblyLayersRpt[9] ) > 0) then  AssemblyLayersRpt[9]  else  UNDEFINED  endif  }
    "Set Cons:CF1R_OpqConsRow:afterchildren_Q08_AssemblyLayers[10]"
         Cons:CF1R_OpqConsRow:afterchildren_Q08_AssemblyLayers[10] = {  if (LocalStatus( AssemblyLayersRpt[10]) > 0) then  AssemblyLayersRpt[10] else  UNDEFINED  endif  }

; RJH - 6/10/20 added afterchildren_Q09_NonStdSprayFoam per ticket #1204
    "Set Cons:CF1R_OpqConsRow:afterchildren_Q09_NonStdSprayFoam"
         Cons:CF1R_OpqConsRow:afterchildren_Q09_NonStdSprayFoam  = 
		  {  switch (NonStdSprayFoam)
				case  0 : "false"
				case  1 : "true"
				default : "false"
			 endswitch  }
  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL Opaque Constructions table rows
   "Set cf1rtblRowOpaqueCons parent"   cf1rtblRowOpaqueCons:Parent  = { cf1rTableOpaqueConstructions:Name  }
  ; END of Opaque Constructions table rules
  ; ----------------------------------------------------------------------

  ; ----------------------------------------------------------------------
  ; Section_P Slab Floors table
   "Create & initialize new cf1rSection_P object"
      cf1rCF1RPRF01E:Action  = {  CreateChildren( cf1rSection_P, 1, "Section_P" )  }     ; no init needed
   "Create & initialize new cf1rTableSlabFloor object"
      cf1rSection_P:Action   = {  CreateChildren( cf1rTableSlabFloor, 1, "TableSlabFloor" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual Slab Floor table rows
   "Create cf1rTableSlabFloor for all SlabFloor types"
      SlabFloor:CF1R_SlabFloorRow   = {  CreateComp( cf1rtblRowSlabFloor, Name + " SF-SlabFlRow" )  }
  ; Rule to create individual Underground Floor table rows - RJH 20200518 Ticket #1216
   "Create cf1rTableSlabFloor for all UndFloor types"
      UndFloor:CF1R_SlabFloorRow   = {  CreateComp( cf1rtblRowSlabFloor, Name + " UF-SlabFlRow" )  }
   ; ----------------------------------------------------------------------
   ; Rules to populate Slab Floor table rows for all SlabFloor instances
    "Set SlabFloor:CF1R_SlabFloorRow:P01_PartitionName" SlabFloor:CF1R_SlabFloorRow:P01_PartitionName  = {  Name  }
    "Set SlabFloor:CF1R_SlabFloorRow:P02_ThermalZoneName" SlabFloor:CF1R_SlabFloorRow:P02_ThermalZoneName  = {  Parent( Name )  }
    "Set SlabFloor:CF1R_SlabFloorRow:P03_FloorSlabArea" SlabFloor:CF1R_SlabFloorRow:P03_FloorSlabArea  = {  Area  }
    "Set SlabFloor:CF1R_SlabFloorRow:P04_SlabPerimeter" SlabFloor:CF1R_SlabFloorRow:P04_SlabPerimeter  = {  Perimeter  }
    "Set SlabFloor:CF1R_SlabFloorRow:P05a_SlabInsulationThermalResistance" 
	   SlabFloor:CF1R_SlabFloorRow:P05a_SlabInsulationThermalResistance  =        ; check for insul existence (checkbox) before mapping enum - SAC 08/24/20
      {  if (IfValidAnd( EdgeInsulation > 0 )==0) then  "R0"  else
         switch( EnumString( EdgeInsulOption ) )
				case "- none -"        :  "R0"
				case "R-5, 8 inches"   :  "R5"
				case "R-7, 8 inches"   :  "R7"
				case "R-10, 8 inches"  :  "R10"
				case "R-5, 16 inches"  :  "R5"
				case "R-7, 16 inches"  :  "R7"
				case "R-10, 16 inches" :  "R10"
				case "R-5, 2 feet"     :  "R5"
				case "R-7, 2 feet"     :  "R7"
				case "R-10, 2 feet"    :  "R10"
				case "R-15, 2 feet"    :  "R15"
				case "R-5, 4 feet"     :  "R5"
				case "R-7, 4 feet"     :  "R7"
				case "R-10, 4 feet"    :  "R10"
				case "R-15, 4 feet"    :  "R15"
				case "R-20, 4 feet"    :  "R20"
				default                :  UNDEFINED
			endswitch endif  }
    "Set SlabFloor:CF1R_SlabFloorRow:P05b_SlabInsulationOther" SlabFloor:CF1R_SlabFloorRow:P05b_SlabInsulationOther  = {  if ( LocalStatus ( CF1R_SlabFloorRow:P05a_SlabInsulationThermalResistance ) < 1 ) then Format( "%.2f", EdgeInsulRValue ) else UNDEFINED endif  }
    "Set SlabFloor:CF1R_SlabFloorRow:P05c_SlabInsulationVerticalILength" SlabFloor:CF1R_SlabFloorRow:P05c_SlabInsulationVerticalILength  = {  EdgeInsulDepth  }
    "Set SlabFloor:CF1R_SlabFloorRow:P06_SlabCarpetedFraction" SlabFloor:CF1R_SlabFloorRow:P06_SlabCarpetedFraction  = {  CarpetedFrac  }
    "Set SlabFloor:CF1R_SlabFloorRow:P07_FloorSlabHeated" SlabFloor:CF1R_SlabFloorRow:P07_FloorSlabHeated  = {  
         if (HeatedSlab)
         then  "true"
         else  "false"
         endif  }
      "Set SlabFloor:CF1R_SlabFloorRow:P08_StatusEAA"
         SlabFloor:CF1R_SlabFloorRow:P08_StatusEAA  =             ; SAC 7/30/19 - added logic to report P08_StatusEAA for AdditionAlone projects (tic #1118)
         {  if (ResProj:RunScope = 1 .AND. IfValidAnd( ResProj:IsAddAlone != 0 )==0)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  "New"  
            else if (IsExisting)
            then  "Existing"
            else if (IsAltered)
            then  "Altered"
            else  UNDEFINED   ; error?
            endif endif endif endif  }
      "Set SlabFloor:CF1R_SlabFloorRow:P09_VerifiedExistingCondition"
         SlabFloor:CF1R_SlabFloorRow:P09_VerifiedExistingCondition  = {
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  "NA"
            else if (IsAltered .AND. IsVerified)
            then  "Yes"
            else  "No"
            endif endif endif  }
      "Set SlabFloor:CF1R_SlabFloorRow:P10a_SlabInsulationThermalResistance"
         SlabFloor:CF1R_SlabFloorRow:P10a_SlabInsulationThermalResistance  =        ; check for insul existence (checkbox) before mapping enum - SAC 08/24/20
         {  if (IfValidAnd( exEdgeInsulation > 0 )==0) then  "R0"  else
            switch( EnumString( exEdgeInsulOption ) )
				case "- none -"        :  "R0"
				case "R-5, 8 inches"   :  "R5"
				case "R-7, 8 inches"   :  "R7"
				case "R-10, 8 inches"  :  "R10"
				case "R-5, 16 inches"  :  "R5"
				case "R-7, 16 inches"  :  "R7"
				case "R-10, 16 inches" :  "R10"
				case "R-5, 2 feet"     :  "R5"
				case "R-7, 2 feet"     :  "R7"
				case "R-10, 2 feet"    :  "R10"
				case "R-15, 2 feet"    :  "R15"
				case "R-5, 4 feet"     :  "R5"
				case "R-7, 4 feet"     :  "R7"
				case "R-10, 4 feet"    :  "R10"
				case "R-15, 4 feet"    :  "R15"
				case "R-20, 4 feet"    :  "R20"
				default                :  UNDEFINED
			   endswitch  endif  }
    "Set SlabFloor:CF1R_SlabFloorRow:P10b_SlabInsulationOther" SlabFloor:CF1R_SlabFloorRow:P10b_SlabInsulationOther  = {  if ( LocalStatus ( CF1R_SlabFloorRow:P10a_SlabInsulationThermalResistance ) < 1 ) then EnumString( exEdgeInsulOption ) else UNDEFINED endif  }
    "Set SlabFloor:CF1R_SlabFloorRow:P10c_SlabInsulationVerticalILength" 
	   SlabFloor:CF1R_SlabFloorRow:P10c_SlabInsulationVerticalILength  =          ; check for insul existence (checkbox) before mapping enum - SAC 08/24/20
      {  if (IfValidAnd( exEdgeInsulation > 0 )==0) then  0  else
         switch( EnumString( exEdgeInsulOption ) )
				case "- none -"        :  0
				case "R-5, 8 inches"   :  8
				case "R-7, 8 inches"   :  8
				case "R-10, 8 inches"  :  8
				case "R-5, 16 inches"  :  16
				case "R-7, 16 inches"  :  16
				case "R-10, 16 inches" :  16
				case "R-5, 2 feet"     :  24
				case "R-7, 2 feet"     :  24
				case "R-10, 2 feet"    :  24
				case "R-15, 2 feet"    :  24
				case "R-5, 4 feet"     :  48
				case "R-7, 4 feet"     :  48
				case "R-10, 4 feet"    :  48
				case "R-15, 4 feet"    :  48
				case "R-20, 4 feet"    :  48
				default                :  UNDEFINED
			endswitch  endif  }
    "Set SlabFloor:CF1R_SlabFloorRow:P10c_SlabInsulationVerticalILength" SlabFloor:CF1R_SlabFloorRow:P10c_SlabInsulationVerticalILength  = {  atof( Format( "%.2f", exEdgeInsulDepth ) )  }
;    "Set SlabFloor:CF1R_SlabFloorRow:P11_SlabCarpetedFraction" SlabFloor:CF1R_SlabFloorRow:P11_SlabCarpetedFraction  = {  ??  }

   ; ----------------------------------------------------------------------
   ; Rules to populate Underground Floor table rows for all UndFloor instances - RJH 20200518 Ticket #1216
    "Set UndFloor:CF1R_SlabFloorRow:P01_PartitionName" UndFloor:CF1R_SlabFloorRow:P01_PartitionName  = {  Name  }
    "Set UndFloor:CF1R_SlabFloorRow:P02_ThermalZoneName" UndFloor:CF1R_SlabFloorRow:P02_ThermalZoneName  = {  Parent( Name )  }
    "Set UndFloor:CF1R_SlabFloorRow:P03_FloorSlabArea" UndFloor:CF1R_SlabFloorRow:P03_FloorSlabArea  = {  Area  }

    "Set UndFloor:CF1R_SlabFloorRow:P04_NotApplicableMessage" UndFloor:CF1R_SlabFloorRow:P04_NotApplicableMessage  = {  "n/a"  }
    "Set UndFloor:CF1R_SlabFloorRow:P05_NotApplicableMessage" UndFloor:CF1R_SlabFloorRow:P05a_NotApplicableMessage  = {  "n/a"  }
    "Set UndFloor:CF1R_SlabFloorRow:P05_NotApplicableMessage" UndFloor:CF1R_SlabFloorRow:P05c_NotApplicableMessage  = {  "n/a"  }

    "Set UndFloor:CF1R_SlabFloorRow:P06_SlabCarpetedFraction" UndFloor:CF1R_SlabFloorRow:P06_SlabCarpetedFraction  = {  CarpetedFrac  }
    "Set UndFloor:CF1R_SlabFloorRow:P07_FloorSlabHeated" UndFloor:CF1R_SlabFloorRow:P07_FloorSlabHeated  = {  "false"  }

    "Set UndFloor:CF1R_SlabFloorRow:P08_StatusEAA"
         UndFloor:CF1R_SlabFloorRow:P08_StatusEAA  =  {        
          if (ResProj:RunScope = 1 .AND. IfValidAnd( ResProj:IsAddAlone != 0 )==0)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  "New"  
            else if (IsExisting)
            then  "Existing"
            else if (IsAltered)
            then  "Altered"
            else  UNDEFINED   ; error?
          endif endif endif endif  }
    "Set UndFloor:CF1R_SlabFloorRow:P09_VerifiedExistingCondition"
         UndFloor:CF1R_SlabFloorRow:P09_VerifiedExistingCondition  = {
          if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  "NA"
            else if (IsAltered .AND. IsVerified)
            then  "Yes"
            else  "No"
          endif endif endif  }

  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL Slab Floor and Underground Floor table rows
   "Set cf1rtblRowSlabFloor parent"   cf1rtblRowSlabFloor:Parent  = { cf1rTableSlabFloor:Name  }
  ; END of Slab Floor table rules
  ; ----------------------------------------------------------------------
   ; RJH 1/16/2020 - rule to DELETE cf1rTableSlabFloor if no rows exist per Ticket #1184
  ; Rule to Delete empty Slab Floor table
   "DELETE empty cf1rTableSlabFloor object"
      cf1rSection_P:Action   = {  if (ComponentCount( cf1rtblRowSlabFloor ) < 1) then  DeleteComp()  else  UNCHANGED  endif }
  ; ----------------------------------------------------------------------

  ; ----------------------------------------------------------------------
  ; Section_R
   "Create & initialize new cf1rSection_R object"
      cf1rCF1RPRF01E:Action  = {  CreateChildren( cf1rSection_R, 1, "CF1R SecR" )  }     ; no init needed

  ; Section_R Manual Field population
     "Set cf1rSection_R:R01_IsQII_HERSVerificationRequired"  cf1rSection_R:R01_IsQII_HERSVerificationRequired  = {
           if (ResProj:HERSProj:QII == 1)
           then  "true"
           else  "false"
           endif  }
     "Set cf1rSection_R:R02_IsSprayFoamInsulationHERSVerificationRequired"  cf1rSection_R:R02_IsSprayFoamInsulationHERSVerificationRequired  = {
           if (ResProj:HERSProj:SprayFoamHighR == 1)
           then  "true"
           else  "false"
           endif  }
     "Set cf1rSection_R:R03_IsEnvelopeAirLeakageHERSVerificationRequired"  cf1rSection_R:R03_IsEnvelopeAirLeakageHERSVerificationRequired  = {
           if (ResProj:HERSProj:LowBldgLkg == 1)
           then  "true"
           else  "false"
           endif  }
     "Set cf1rSection_R:R04_CFM50EnvelopeHERS"  cf1rSection_R:R04_CFM50EnvelopeHERS  = {
           if (ResProj:HERSProj:LowBldgLkg == 1)
           then  ResProj:HERSProj:LowBldgLkgRptMsg
           else  UNDEFINED
           endif  }
  ; END of Section_R rules
  ; ----------------------------------------------------------------------

  ; ----------------------------------------------------------------------
  ; Section_S SingleFamily and MultiFamily tables
   "Create & initialize new cf1rSection_S object"
      cf1rCF1RPRF01E:Action  = {  CreateChildren( cf1rSection_S, 1, "Section_S" )  }     ; no init needed

   "Call subordinate rulelist to handle SingleFamily vs. MultiFamily results"
      ResProj:Action   = {  if (IsMultiFamily == 0) then  EvalRulelist( "CF1RPRF01E_cf1rSection_S_Proposed_SingleFamily" )
                            else  EvalRulelist( "CF1RPRF01E_cf1rSection_S_Proposed_MultiFamily" )  endif }

   ; SAC 9/9/19 - rule to DELETE cf1rTableWaterHeatingMF if no rows exist
   "DELETE empty cf1rSection_S object"
      cf1rSection_S:Action   = {  if (ComponentCount( cf1rTableWaterHeatingSF ) < 1 .AND.
                                      ComponentCount( cf1rTableWaterHeatingMF ) < 1) then  DeleteComp()  else  UNCHANGED  endif }
  ; ----------------------------------------------------------------------


  ; ---------------------------------------------------------------------- RJH 8/18/20 update (tic #1241) SAC 2/4/20 (tic #1197)
  ; Section_Tchp CHPWH Water Heaters table
   "Create & initialize new cf1rSection_Tchp object"
      cf1rCF1RPRF01E:Action    = {  if (SumAll( DHWSys:ValidAnalysisCHPWH ) < 1) then  UNCHANGED
                                    else  CreateChildren( cf1rSection_Tchp, 1, "Section_Tchp" )  endif  } 
   "Create & initialize new cf1rTableWaterHeatersCHP object"
      cf1rSection_Tchp:Action  = {  CreateChildren( cf1rTableWaterHeatersCHP, 1, "TableWaterHeatersCHP" )  }  

   "Create DHWSys:CF1R_DHWSysCHPWHRow (if appropriate)"     DHWSys:CF1R_DHWSysCHPWHRow  =       ; SAC 2/4/20 (tic #1197)
      {  if (IfValidAnd( ValidAnalysisCHPWH > 0 )==0) then  UNDEFINED
         else  CreateComp( cf1rtblRowWaterHeatersCHP, Name + " WaterHeaterCHPRow" )  endif  }

   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp01_WaterHeatingSystemName"    DHWSys:CF1R_DHWSysCHPWHRow:Tchp01_WaterHeatingSystemName    = {  Name  }

   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp02_HeatPumpWaterHeaterBrandModel"  DHWSys:CF1R_DHWSysCHPWHRow:Tchp02_HeatPumpWaterHeaterBrandModel  =       ; SAC 02/20/21 (tic #1260)
      {  if (CHPWHSysDescrip == 1 .AND. CHPWHIntegPkgType == 1 .AND. CHPWHNEEABrand > 1 .AND. CHPWHNEEAModel > 1)
         then  EnumString( CHPWHNEEABrand ) + " / " + EnumString( CHPWHNEEAModel )
         else if (CHPWHSysDescrip == 1 .AND. CHPWHIntegPkgType == 2 .AND. CHPWHComModel > 2)
         then  EnumString( CHPWHComModel )
         else if (CHPWHSysDescrip == 2 .AND. CHPWHCompType > 0)
         then  EnumString( CHPWHCompType )
         else  "unknown"  endif endif endif  }

   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp02a_HeatPumpWaterHeaterBrand"  DHWSys:CF1R_DHWSysCHPWHRow:Tchp02a_HeatPumpWaterHeaterBrand  =         ; SAC 02/20/21 (tic #1260)   ; added 'generic' CHPWH brand - SAC 06/23/21
      {  if (CHPWHSysDescrip == 1 .AND. CHPWHIntegPkgType == 1 .AND. CHPWHNEEABrand > 1)
         then  switch ( CHPWHNEEABrand ) 
				 case 11 : "AOSmith"
				 case 12 : "American"
				 case 13 : "BradfordWhite"
             case 27 : "DirectEnergy"
				 case 14 : "EcoSense"
				 case 15 : "GE"
				 case 16 : "Kenmore"
				 case 17 : "Lochinvar"
				 case 18 : "Reliance"
				 case 19 : "Rheem"
             case 28 : "RheemCanada"
				 case 20 : "Richmond"
				 case 21 : "Ruud"
				 case 22 : "Sanden"
				 case 23 : "State"
				 case 24 : "Stiebel"
				 case 25 : "USCraftmaster"
				 case 26 : "Whirlpool"
				 case 99 : "Generic"       ; updated to 'Generic' - SAC 10/02/21
				 default : UNDEFINED
			   endswitch
         else if (CHPWHSysDescrip == 1 .AND. CHPWHIntegPkgType == 2 .AND. CHPWHComModel > 2)
         then  switch ( CHPWHComModel ) 
				 case 110172 : "AOSmith"
				 default : UNDEFINED
			   endswitch
         else if (CHPWHSysDescrip == 2 .AND. CHPWHCompType > 990)
			then  "generic"
         else if (CHPWHSysDescrip == 2 .AND. CHPWHCompType > 0)
         then  switch ( CHPWHCompType ) 
				 case 45 : "Colmac"
				 case 48 : "Colmac"
				 case 49 : "Colmac"
				 case 50 : "Colmac"
				 case 51 : "Colmac"
				 case 52 : "Colmac"
				 case 46 : "Nyle"
				 case 47 : "Nyle"
				 case 53 : "Nyle"
				 case 54 : "Nyle"
				 case 55 : "Nyle"
				 case 56 : "Nyle"
				 case 67 : "Nyle"
				 case 68 : "Nyle"
				 case 69 : "Nyle"
				 case 70 : "Nyle"
				 case 71 : "Nyle"
				 case 57 : "Sanden"
				 case 146 : "Lochinvar"
				 case 147 : "Lochinvar"
				 case 153 : "Lochinvar"
				 case 154 : "Lochinvar"
				 case 155 : "Lochinvar"
				 case 156 : "Lochinvar"
				 case 167 : "Lochinvar"
				 case 168 : "Lochinvar"
				 case 169 : "Lochinvar"
				 case 170 : "Lochinvar"
				 case 171 : "Lochinvar"
				 case 246 : "AOSmith"
				 case 247 : "AOSmith"
				 case 253 : "AOSmith"
				 case 254 : "AOSmith"
				 case 255 : "AOSmith"
				 case 256 : "AOSmith"
				 case 267 : "AOSmith"
				 case 268 : "AOSmith"
				 case 269 : "AOSmith"
				 case 270 : "AOSmith"
				 case 271 : "AOSmith"
				 case 346 : "State"
				 case 347 : "State"
				 case 353 : "State"
				 case 354 : "State"
				 case 355 : "State"
				 case 356 : "State"
				 case 367 : "State"
				 case 368 : "State"
				 case 369 : "State"
				 case 370 : "State"
				 case 371 : "State"
				 default : UNDEFINED
			   endswitch
         else  "unknown"  endif endif endif endif  }

   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp02b_HeatPumpWaterHeaterModel"  DHWSys:CF1R_DHWSysCHPWHRow:Tchp02b_HeatPumpWaterHeaterModel  = 
      {  if (CHPWHSysDescrip == 1 .AND. CHPWHIntegPkgType == 1 .AND. CHPWHNEEAModel > 1)
            then  switch ( CHPWHNEEAModel ) 
          case  110113   :   "AOSmithFPTU50"
          case  110214   :   "AOSmithFPTU66"
          case  110315   :   "AOSmithFPTU80"
          case  110412   :   "AOSmithHHPT80Res"
          case  110513   :   "AOSmithHP1050"
          case  110615   :   "AOSmithHP1080"
          case  111513   :   "AOSmithHP1050DR"
          case  111615   :   "AOSmithHP1080DR"
          case  110713   :   "AOSmithHPTU50"
          case  110813   :   "AOSmithHPTU50N"
          case  111713   :   "AOSmithHPTU50DR"
          case  110914   :   "AOSmithHPTU66"
          case  111014   :   "AOSmithHPTU66N"
          case  111814   :   "AOSmithHPTU66DR"
          case  111115   :   "AOSmithHPTU80"
          case  111215   :   "AOSmithHPTU80N"
          case  111915   :   "AOSmithHPTU80DR"
          case  111311   :   "AOSmithPHPT60"
          case  111412   :   "AOSmithPHPT80"
          case  120111   :   "AmericanHPE10260"
          case  120212   :   "AmericanHPE10280"
          case  120312   :   "AmericanHPE6280"
          case  120413   :   "AmericanHPHE10250"
          case  120513   :   "AmericanHPHE10250N"
          case  121413   :   "AmericanHPHE10250DR"
          case  120614   :   "AmericanHPHE10266Res"
          case  120714   :   "AmericanHPHE10266NRes"
          case  121514   :   "AmericanHPHE10266DR"
          case  120815   :   "AmericanHPHE10280Res"
          case  120915   :   "AmericanHPHE10280NRes"
          case  121615   :   "AmericanHPHE10280DR"
          case  121013   :   "AmericanHPHE6250"
          case  121114   :   "AmericanHPHE6266Res"
          case  121215   :   "AmericanHPHE6280Res"
          case  121313   :   "AmericanHPHE650Res"
          case  130119   :   "BradfordWhiteRE2H50"
          case  130358   :   "BradfordWhiteRE2H65T101NCWT"
          case  130223   :   "BradfordWhiteRE2H80"
          case  130419   :   "BradfordWhiteRE2H50S61NCWT"
          case  130558   :   "BradfordWhiteRE2H65T61NCWT"
          case  130623   :   "BradfordWhiteRE2H80T61NCWT"
          case  270159   :   "DirectEnergyECEPH4015"
          case  270260   :   "DirectEnergyECEPH5015"
          case  270361   :   "DirectEnergyECEPH6515"
          case  270462   :   "DirectEnergyECEPH8015"
          case  270559   :   "DirectEnergyECEPH4030"
          case  270660   :   "DirectEnergyECEPH5030"
          case  270761   :   "DirectEnergyECEPH6530"
          case  270862   :   "DirectEnergyECEPH8030"
          case  270959   :   "DirectEnergyECEPH40SO"
          case  271060   :   "DirectEnergyECEPH50SO"
          case  271161   :   "DirectEnergyECEPH65SO"
          case  271262   :   "DirectEnergyECEPH80SO"
          case  271363   :   "DirectEnergyECEH40"
          case  271464   :   "DirectEnergyECEH50"
          case  271565   :   "DirectEnergyECEH65"
          case  271666   :   "DirectEnergyECEH80"
          case  140121   :   "EcoSenseHB50ES"
          case  150119   :   "BEH50DCEJSB"
          case  150223   :   "BEH80DCEJSB"
          case  150319   :   "GEH50DEEJSC"
          case  150419   :   "GEH50DEEJXXX"
          case  150519   :   "GEH50DFEJSR"
          case  150619   :   "GEH50DHEKSC"
          case  150723   :   "GEH80DEEJSC"
          case  150823   :   "GEH80DFEJSR"
          case  150923   :   "GEH80DHEKSC"
          case  160111   :   "Kenmore153_32116"
          case  160212   :   "Kenmore153_32118"
          case  160313   :   "Kenmore153_5925"
          case  160414   :   "Kenmore153_5926"
          case  160515   :   "Kenmore153_5928"
          case  170113   :   "LochinvarHPA051"
          case  170213   :   "LochinvarHPA052"
          case  170314   :   "LochinvarHPA067"
          case  170414   :   "LochinvarHPA068"
          case  170515   :   "LochinvarHPA081"
          case  170615   :   "LochinvarHPA082"
          case  180113   :   "Reliance1050DHPHT"
          case  180213   :   "Reliance1050DHPHTNE"
          case  181313   :   "Reliance1050DHPHTDR"
          case  180311   :   "Reliance1060DHPTRes"
          case  180414   :   "Reliance1066DHPHT"
          case  180514   :   "Reliance1066DHPHTN"
          case  181414   :   "Reliance1066DHPHTDR"
          case  180615   :   "Reliance1080DHPHT"
          case  180715   :   "Reliance1080DHPHTNE"
          case  181515   :   "Reliance1080DHPHTDR"
          case  180812   :   "Reliance1080DHPTRes"
          case  180913   :   "Reliance650DHPHT"
          case  181014   :   "Reliance666DHPHT"
          case  181115   :   "Reliance680DHPHT"
          case  181215   :   "Reliance680DHPT"
          case  196059   :   "RheemHPLD401RH"
          case  196160   :   "RheemHPLD501RH"
          case  196261   :   "RheemHPLD651RH"
          case  196362   :   "RheemHPLD801RH"
          case  193259   :   "RheemPROPH40T2RH37515"
          case  193360   :   "RheemPROPH50T2RH37515"
          case  193461   :   "RheemPROPH65T2RH37515"
          case  193562   :   "RheemPROPH80T2RH37515"
          case  193659   :   "RheemPROPH40T2RH37530"
          case  193760   :   "RheemPROPH50T2RH37530"
          case  193861   :   "RheemPROPH65T2RH37530"
          case  193962   :   "RheemPROPH80T2RH37530"
          case  194059   :   "RheemPROPH40T2RH375SO"
          case  194160   :   "RheemPROPH50T2RH375SO"
          case  194261   :   "RheemPROPH65T2RH375SO"
          case  194362   :   "RheemPROPH80T2RH375SO"
          case  194459   :   "RheemXE40T10H22U0"
          case  194560   :   "RheemXE50T10H22U0"
          case  194661   :   "RheemXE65T10H22U0"
          case  194762   :   "RheemXE80T10H22U0"
          case  194859   :   "RheemXE40T10H45U0"
          case  194960   :   "RheemXE50T10H45U0"
          case  195061   :   "RheemXE65T10H45U0"
          case  195162   :   "RheemXE80T10H45U0"
          case  195259   :   "RheemXE40T10HS45U0"
          case  195360   :   "RheemXE50T10HS45U0"
          case  195461   :   "RheemXE65T10HS45U0"
          case  195562   :   "RheemXE80T10HS45U0"
          case  195663   :   "RheemPROH40T2RH310BM"
          case  195764   :   "RheemPROH50T2RH310BM"
          case  195865   :   "RheemPROH65T2RH310BM"
          case  195966   :   "RheemPROH80T2RH310BM"
          case  196463   :   "RheemPROH40T2RH310UM"
          case  196564   :   "RheemPROH50T2RH310UM"
          case  196665   :   "RheemPROH65T2RH310UM"
          case  196766   :   "RheemPROH80T2RH310UM"
          case  190121   :   "RheemHB50RH"
          case  190221   :   "RheemPROPH50RH245"
          case  190339   :   "RheemPROPH50RH350"
          case  190440   :   "RheemPROPH65RH350D"
          case  190534   :   "RheemPROPH80RH245"
          case  190641   :   "RheemPROPH80RH350"
          case  190739   :   "RheemXE50T10"
          case  190821   :   "RheemXE50T12"
          case  190921   :   "RheemXE50T12W"
          case  191040   :   "RheemXE65T10"
          case  191141   :   "RheemXE80T10"
          case  191234   :   "RheemXE80T12"
          case  191334   :   "RheemXE80T12W"
          case  191439   :   "RheemPROPH50RH350DC"
          case  191540   :   "RheemPROPH65RH350DC"
          case  191641   :   "RheemPROPH80RH350DC"
          case  191739   :   "RheemHPLD50"
          case  191840   :   "RheemHPLD65"
          case  191941   :   "RheemHPLD80"
          case  192042   :   "RheemXE50T10HD22U0"
          case  192139   :   "RheemXE50T10U1"
          case  192243   :   "RheemXE65T10HD22U0"
          case  192340   :   "RheemXE65T10U1"
          case  192444   :   "RheemXE80T10HD22U0"
          case  192541   :   "RheemXE80T10U1"
          case  192642   :   "RheemPROPH50T2RH350D15"
          case  192739   :   "RheemPROPH50RH350DCB"
          case  192843   :   "RheemPROPH65RH350D15"
          case  192940   :   "RheemPROPH65RH350DCB"
          case  193044   :   "RheemPROPH80RH350D15"
          case  193141   :   "RheemPROPH80RH350DCB"
          case  280159   :   "RheemCanCPROPH40T2RH37515"
          case  280260   :   "RheemCanCPROPH50T2RH37515"
          case  280361   :   "RheemCanCPROPH65T2RH37515"
          case  280462   :   "RheemCanCPROPH80T2RH37515"
          case  280559   :   "RheemCanCPROPH40T2RH37530"
          case  280660   :   "RheemCanCPROPH50T2RH37530"
          case  280761   :   "RheemCanCPROPH65T2RH37530"
          case  280862   :   "RheemCanCPROPH80T2RH37530"
          case  280959   :   "RheemCanCPROPH40T2RH375SO"
          case  281060   :   "RheemCanCPROPH50T2RH375SO"
          case  281161   :   "RheemCanCPROPH65T2RH375SO"
          case  281262   :   "RheemCanCPROPH80T2RH375SO"
          case  281359   :   "RheemCanCXE40T10H22UO"
          case  281460   :   "RheemCanCXE50T10H22UO"
          case  281561   :   "RheemCanCXE65T10H22UO"
          case  281662   :   "RheemCanCXE80T10H22UO"
          case  281759   :   "RheemCanCXE40T10H45UO"
          case  281860   :   "RheemCanCXE50T10H45UO"
          case  281961   :   "RheemCanCXE65T10H45UO"
          case  282062   :   "RheemCanCXE80T10H45UO"
          case  282159   :   "RheemCanCXE40T10HS45UO"
          case  282260   :   "RheemCanCXE50T10HS45UO"
          case  282361   :   "RheemCanCXE65T10HS45UO"
          case  282462   :   "RheemCanCXE80T10HS45UO"
          case  282563   :   "RheemCanCPROH40T2RH310BM"
          case  282664   :   "RheemCanCPROH50T2RH310BM"
          case  282765   :   "RheemCanCPROH65T2RH310BM"
          case  282866   :   "RheemCanCPROH80T2RH310BM"
          case  201059   :   "Richmond10E40HP515"
          case  201160   :   "Richmond10E50HP515"
          case  201261   :   "Richmond10E65HP515"
          case  201362   :   "Richmond10E80HP515"
          case  201459   :   "Richmond10E40HP530"
          case  201560   :   "Richmond10E50HP530"
          case  201661   :   "Richmond10E65HP530"
          case  201762   :   "Richmond10E80HP530"
          case  201859   :   "Richmond10E40HP5S30"
          case  201960   :   "Richmond10E50HP5S30"
		        default : UNDEFINED
	        endswitch
            else  UNDEFINED  endif  }

   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp02b_HeatPumpWaterHeaterModel - round 2"  DHWSys:CF1R_DHWSysCHPWHRow:Tchp02b_HeatPumpWaterHeaterModel  = 
      {  if ( LocalStatus ( CF1R_DHWSysCHPWHRow:Tchp02b_HeatPumpWaterHeaterModel ) < 1 .AND.
              CHPWHSysDescrip == 1 .AND. CHPWHIntegPkgType == 1 .AND. CHPWHNEEAModel > 1 )
            then switch ( CHPWHNEEAModel ) 
          case  202061   :   "Richmond10E65HP5S30"
          case  202162   :   "Richmond10E80HP5S30"
          case  200139   :   "Richmond10E50HP4D"
          case  200240   :   "Richmond10E65HP4D"
          case  200341   :   "Richmond10E80HP4D"
          case  200421   :   "Richmond12E50HP"
          case  200534   :   "Richmond12E80HP"
          case  200621   :   "RichmondHB50RM"
          case  200742   :   "Richmond10E50HP4D15"
          case  200843   :   "Richmond10E65HP4D15"
          case  200944   :   "Richmond10E80HP4D15"
          case  213359   :   "RuudHPLD401RU"
          case  213460   :   "RuudHPLD501RU"
          case  213561   :   "RuudHPLD651RU"
          case  213662   :   "RuudHPLD801RU"
          case  211359   :   "RuudPROUH40T2RU37515"
          case  211460   :   "RuudPROUH50T2RU37515"
          case  211561   :   "RuudPROUH65T2RU37515"
          case  211662   :   "RuudPROUH80T2RU37515"
          case  211759   :   "RuudPROUH40T2RU37530"
          case  211860   :   "RuudPROUH50T2RU37530"
          case  211961   :   "RuudPROUH65T2RU37530"
          case  212062   :   "RuudPROUH80T2RU37530"
          case  212159   :   "RuudPROUH40T2RU375SO"
          case  212260   :   "RuudPROUH50T2RU375SO"
          case  212361   :   "RuudPROUH65T2RU375SO"
          case  212462   :   "RuudPROUH80T2RU375SO"
          case  212563   :   "RuudPROH40T2RU310BM"
          case  212664   :   "RuudPROH50T2RU310BM"
          case  212765   :   "RuudPROH65T2RU310BM"
          case  212866   :   "RuudPROH80T2RU310BM"
          case  212963   :   "RuudPROH40T2RU310UM"
          case  213064   :   "RuudPROH50T2RU310UM"
          case  213165   :   "RuudPROH65T2RU310UM"
          case  213266   :   "RuudPROH80T2RU310UM"
          case  210121   :   "RuudHB50RU"
          case  210221   :   "RuudPROUH50RU245"
          case  210339   :   "RuudPROUH50RU350D"
          case  210440   :   "RuudPROUH65RU350D"
          case  210534   :   "RuudPROUH80RU245"
          case  210641   :   "RuudPROUH80RU350D"
          case  210742   :   "RuudPROUH50RU350D15"
          case  210839   :   "RuudPROUH50RU350DCB"
          case  210943   :   "RuudPROUH65RU350D15"
          case  211040   :   "RuudPROUH65RU350DCB"
          case  211144   :   "RuudPROUH80RU350D15"
          case  211241   :   "RuudPROUH80RU350DCB"
          case  220116   :   "SandenGS3_SAN43SSAQA"
          case  220216   :   "SandenGS3_GAUS160QTA"
          case  220317   :   "SandenGS3_SAN83SSAQA"
          case  220417   :   "SandenGS3_GAUS315EQTD"
          case  220517   :   "SandenGUS_SAN83SSAQA"
          case  220617   :   "SandenGUS_GAUS315EQTD"
          case  230112   :   "StateEP680DHPT"
          case  230211   :   "StateEPX60DHPT"
          case  230312   :   "StateEPX80DHPT"
          case  230413   :   "StateHP650DHPT"
          case  230514   :   "StateHP666DHPT"
          case  230615   :   "StateHP680DHPT"
          case  230713   :   "StateHPX50DHPT"
          case  230813   :   "StateHPX50DHPTNE"
          case  231313   :   "StateHPX50DHPTDR"
          case  230914   :   "StateHPX66DHPT"
          case  231014   :   "StateHPX66DHPTNE"
          case  231414   :   "StateHPX66DHPTDR"
          case  231115   :   "StateHPX80DHPT"
          case  231215   :   "StateHPX80DHPTNE"
          case  231515   :   "StateHPX80DHPTDR"
          case  240122   :   "Stiebel58A220E"
          case  240212   :   "Stiebel80A300"
          case  250112   :   "USCraftmasterHPE2F80U"
          case  250211   :   "USCraftmasterHPE2K60"
          case  250312   :   "USCraftmasterHPE2K80"
          case  250413   :   "USCraftmasterHPHE2F50U"
          case  250514   :   "USCraftmasterHPHE2F66U"
          case  250615   :   "USCraftmasterHPHE2F80U"
          case  250713   :   "USCraftmasterHPHE2K50UN"
          case  250814   :   "USCraftmasterHPHE2K66UN"
          case  250915   :   "USCraftmasterHPHE2K80UN"
          case  260111   :   "WhirlpoolHPE2K60"
          case  260212   :   "WhirlpoolHPE2K80"
          case  260313   :   "WhirlpoolHPHE2K50"
          case  260413   :   "WhirlpoolHPHE2K50C"
          case  260513   :   "WhirlpoolHPHE2K50N"
          case  260614   :   "WhirlpoolHPHE2K66"
          case  260714   :   "WhirlpoolHPHE2K66C"
          case  260815   :   "WhirlpoolHPHE2K80"
          case  260915   :   "WhirlpoolHPHE2K80C"
          case  261032   :   "WhirlpoolHPSE2K50"
          case  261132   :   "WhirlpoolHPSE2K50C"
          case  261212   :   "WhirlpoolHPSE2K80"
          case  261312   :   "WhirlpoolHPSE2K80C"
          case  990138   :   "WhirlpoolHPSE2K50"
          case  990273   :   "Tier3Generic40"     ; added new schema enums - SAC 10/02/21
          case  990374   :   "Tier3Generic50"
          case  990475   :   "Tier3Generic65"
          case  990576   :   "Tier3Generic80"
		            default : UNCHANGED
	            endswitch
            else  UNCHANGED  endif }

   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp02b_HeatPumpWaterHeaterModel - round 3 ComProduct"  DHWSys:CF1R_DHWSysCHPWHRow:Tchp02b_HeatPumpWaterHeaterModel  =      ; SAC 02/20/21 (tic #1260)
      {  if ( LocalStatus ( CF1R_DHWSysCHPWHRow:Tchp02b_HeatPumpWaterHeaterModel ) < 1 .AND.
              CHPWHSysDescrip == 1 .AND. CHPWHIntegPkgType == 2 .AND. CHPWHComModel > 1 )
         then  switch ( CHPWHComModel ) 
                  case  110172  :  "AOSmithCAHP120"
		            default : UNCHANGED
	            endswitch
         else  UNCHANGED  endif }

   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp02b_HeatPumpWaterHeaterModel - round 4 Lrg Comprsr"   DHWSys:CF1R_DHWSysCHPWHRow:Tchp02b_HeatPumpWaterHeaterModel  =      ; SAC 11/23/21
      {  if ( LocalStatus ( CF1R_DHWSysCHPWHRow:Tchp02b_HeatPumpWaterHeaterModel ) < 1 .AND.
              CHPWHSysDescrip == 2 .AND. CHPWHCompType > 1 )
         then  switch ( CHPWHCompType ) 
                  case    48 :   "ColmacCxV5"         ; "Colmac CxV-5  (10kW cap @ 40F)"
                  case    49 :   "ColmacCxA10"        ; "Colmac CxA-10  (21kW cap @ 40F)"
                  case    50 :   "ColmacCxA15"        ; "Colmac CxA-15  (29kW cap @ 40F)"
                  case    45 :   "ColmacCxA20"        ; "Colmac CxA-20  (41kW cap @ 40F)"
                  case    51 :   "ColmacCxA25"        ; "Colmac CxA-25  (49kW cap @ 40F)"
                  case    52 :   "ColmacCxA30"        ; "Colmac CxA-30  (57kW cap @ 40F)"
                  case    53 :   "NyleC25A"           ; "Nyle C25A  (5kW cap @ 40F)"
                  case    54 :   "NyleC60A"           ; "Nyle C60A  (11kW cap @ 40F)"
                  case    55 :   "NyleC90A"           ; "Nyle C90A  (20kW cap @ 40F)"
                  case    56 :   "NyleC125A"          ; "Nyle C125A  (26kW cap @ 40F)"
                  case    46 :   "NyleC185A"          ; "Nyle C185A  (40kW cap @ 40F)"
                  case    47 :   "NyleC250A"          ; "Nyle C250A  (45kW cap @ 40F)"
                  case    67 :   "NyleC60A_C"         ; "Nyle C60A-C  (11kW cap @ 40F)"
                  case    68 :   "NyleC90A_C"         ; "Nyle C90A-C  (20kW cap @ 40F)"
                  case    69 :   "NyleC125A_C"        ; "Nyle C125A-C  (26kW cap @ 40F)"
                  case    70 :   "NyleC185A_C"        ; "Nyle C185A-C  (40kW cap @ 40F)"
                  case    71 :   "NyleC250A_C"        ; "Nyle C250A-C  (45kW cap @ 40F)"
                  case    57 :   "SandenGS345HPAUS"   ; "Sanden GS3-45HPA-US  (4kW cap @ 40F)"
                  case   153 :   "LochinvarAHP025"    ; "Lochinvar AHP025-*-***N****  (5kW cap @ 40F)"
                  case   154 :   "LochinvarAHP060"    ; "Lochinvar AHP060-*-***N****  (11kW cap @ 40F)"
                  case   155 :   "LochinvarAHP090"    ; "Lochinvar AHP090-*-***N****  (20kW cap @ 40F)"
                  case   156 :   "LochinvarAHP125"    ; "Lochinvar AHP125-*-***N****  (26kW cap @ 40F)"
                  case   146 :   "LochinvarAHP185"    ; "Lochinvar AHP185-*-***N****  (40kW cap @ 40F)"
                  case   147 :   "LochinvarAHP250"    ; "Lochinvar AHP250-*-***N****  (45kW cap @ 40F)"
                  case   253 :   "AOSmithAHPA25"      ; "A. O. Smith AHPA-25-*-***N****  (5kW cap @ 40F)"
                  case   254 :   "AOSmithAHPA60"      ; "A. O. Smith AHPA-60-*-***N****  (11kW cap @ 40F)"
                  case   255 :   "AOSmithAHPA90"      ; "A. O. Smith AHPA-90-*-***N****  (20kW cap @ 40F)"
                  case   256 :   "AOSmithAHPA125"     ; "A. O. Smith AHPA-125-*-***N****  (26kW cap @ 40F)"
                  case   246 :   "AOSmithAHPA185"     ; "A. O. Smith AHPA-185-*-***N****  (40kW cap @ 40F)"
                  case   247 :   "AOSmithAHPA250"     ; "A. O. Smith AHPA-250-*-***N****  (45kW cap @ 40F)"
                  case   353 :   "StateSHPA25"        ; "State SHPA-25-*-***N****  (5kW cap @ 40F)"
                  case   354 :   "StateSHPA60"        ; "State SHPA-60-*-***N****  (11kW cap @ 40F)"
                  case   355 :   "StateSHPA90"        ; "State SHPA-90-*-***N****  (20kW cap @ 40F)"
                  case   356 :   "StateSHPA125"       ; "State SHPA-125-*-***N****  (26kW cap @ 40F)"
                  case   346 :   "StateSHPA185"       ; "State SHPA-185-*-***N****  (40kW cap @ 40F)"
                  case   347 :   "StateSHPA250"       ; "State SHPA-250-*-***N****  (45kW cap @ 40F)"
                  case   167 :   "LochinvarAHP060C"   ; "Lochinvar AHP060-*-***C****  (11kW cap @ 40F)"
                  case   168 :   "LochinvarAHP090C"   ; "Lochinvar AHP090-*-***C****  (20kW cap @ 40F)"
                  case   169 :   "LochinvarAHP125C"   ; "Lochinvar AHP125-*-***C****  (26kW cap @ 40F)"
                  case   170 :   "LochinvarAHP185C"   ; "Lochinvar AHP185-*-***C****  (40kW cap @ 40F)"
                  case   171 :   "LochinvarAHP250C"   ; "Lochinvar AHP250-*-***C****  (45kW cap @ 40F)"
                  case   267 :   "AOSmithAHPA60C"     ; "A. O. Smith AHPA-60-*-***C****  (11kW cap @ 40F)"
                  case   268 :   "AOSmithAHPA90C"     ; "A. O. Smith AHPA-90-*-***C****  (20kW cap @ 40F)"
                  case   269 :   "AOSmithAHPA125C"    ; "A. O. Smith AHPA-125-*-***C****  (26kW cap @ 40F)"
                  case   270 :   "AOSmithAHPA185C"    ; "A. O. Smith AHPA-185-*-***C****  (40kW cap @ 40F)"
                  case   271 :   "AOSmithAHPA250C"    ; "A. O. Smith AHPA-250-*-***C****  (45kW cap @ 40F)"
                  case   367 :   "StateSHPA60C"       ; "State SHPA-60-*-***C****  (11kW cap @ 40F)"
                  case   368 :   "StateSHPA90C"       ; "State SHPA-90-*-***C****  (20kW cap @ 40F)"
                  case   369 :   "StateSHPA125C"      ; "State SHPA-125-*-***C****  (26kW cap @ 40F)"
                  case   370 :   "StateSHPA185C"      ; "State SHPA-185-*-***C****  (40kW cap @ 40F)"
                  case   371 :   "StateSHPA250C"      ; "State SHPA-250-*-***C****  (45kW cap @ 40F)"
                  case   991 :   "Generic5kW"         ; "generic  (5kW cap @ 40F)"    
                  case   992 :   "Generic11kW"        ; "generic  (11kW cap @ 40F)"
                  case   993 :   "Generic20kW"        ; "generic  (20kW cap @ 40F)"
                  case   994 :   "Generic26kW"        ; "generic  (26kW cap @ 40F)"
                  case   995 :   "Generic40kW"        ; "generic  (40kW cap @ 40F)"
                  case   996 :   "Generic45kW"        ; "generic  (45kW cap @ 40F)"
		            default : UNCHANGED
	            endswitch
         else  UNCHANGED  endif }

   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp02b_HeatPumpWaterHeaterModelOther"  DHWSys:CF1R_DHWSysCHPWHRow:Tchp02b_HeatPumpWaterHeaterModelOther  =  
      {  if (CHPWHSysDescrip == 2 .AND. CHPWHCompType > 0)
         then  EnumString( CHPWHCompType )
         else  UNDEFINED  endif  }

   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp02c_HeatPumpWaterHeaterSimulationGroup"  DHWSys:CF1R_DHWSysCHPWHRow:Tchp02c_HeatPumpWaterHeaterSimulationGroup  =    ; SAC 11/02/21    ; incremented CHPWH ASHPType value by 100 to avoid conflict w/ new Rheem NEEA models - SAC 12/28/22
      {  if (CHPWHSysDescrip < 1 .OR. CHPWHASHPType < 1) then  UNDEFINED
         else  switch ( CHPWHASHPType ) 
                  case 11 :  "AOSmithPHPT60"    ; "AO Smith PHPT 60"
                  case 12 :  "AOSmithPHPT80"    ; "AO Smith PHPT 80"
                  case 13 :  "AOSmithHPTU50"    ; "AO Smith HPTU 50"
                  case 14 :  "AOSmithHPTU66"    ; "AO Smith HPTU 66"
                  case 15 :  "AOSmithHPTU80"    ; "AO Smith HPTU 80"
                  case 32 :  "AOSmithSHPT50"    ; "AO Smith SHPT 50"      ; AOSmithSHPT50
                  case 33 :  "AOSmithSHPT66"    ; "AO Smith SHPT 66"      ; AOSmithSHPT66
                  case 34 :  "AOSmithSHPT80"    ; "AO Smith SHPT 80"      ; AOSmithSHPT80
                  case 72 :  "AOSmithCAHP120"   ; "AO Smith CAHP-120"     ; SAC 01/30/21 (tic #1260)
                  case 19 :  "GE201450"         ; "GE2014 50"
                  case 23 :  "GE201480"         ; "GE2014 80"
                  case 36 :  "GE201480"         ; "GE2014 80 Eff DR"      ; GE2014_80DR          -- DR ???
                  case 21 :  "RheemHB50"        ; "Rheem HB 50"
                  case 16 :  "Sanden40"         ; "Sanden 40"
                  case 17 :  "Sanden80"         ; "Sanden 80"
                  case 22 :  "Stiebel220E"      ; "Stiebel 220E"
                  case 38 :  "GE201250"         ; "GE2012 50"
                  case 73 :  "Tier3Generic40"   ; "AWHSTier3Generic40"    ; NEEA generic tier 3 options - SAC 06/17/21
                  case 74 :  "Tier3Generic50"   ; "AWHSTier3Generic50"
                  case 75 :  "Tier3Generic65"   ; "AWHSTier3Generic65"
                  case 76 :  "Tier3Generic80"   ; "AWHSTier3Generic80"
                  case 39 :  "RheemHBDR4550"    ; "Rheem HBDR-45-50"
                  case 40 :  "RheemHBDR4565"    ; "Rheem HBDR-45-65"
                  case 41 :  "RheemHBDR4580"    ; "Rheem HBDR-45-80"
                  case 42 :  "RheemHBDR2250"    ; "Rheem HBDR-22-50"
                  case 43 :  "RheemHBDR2265"    ; "Rheem HBDR-22-65"
                  case 44 :  "RheemHBDR2280"    ; "Rheem HBDR-22-80"
                  case 148 :  "ColmacCxV5_SP"    ; "Colmac CxV-5"
                  case 149 :  "ColmacCxA10_SP"   ; "Colmac CxA-10"
                  case 150 :  "ColmacCxA15_SP"   ; "Colmac CxA-15"
                  case 145 :  "ColmacCxA20_SP"   ; "Colmac CxA-20"
                  case 151 :  "ColmacCxA25_SP"   ; "Colmac CxA-25"
                  case 152 :  "ColmacCxA30_SP"   ; "Colmac CxA-30"
                  case 153 :  "NyleC25A_SP"      ; "Nyle C25A"
                  case 154 :  "NyleC60A_SP"      ; "Nyle C60A"
                  case 155 :  "NyleC90A_SP"      ; "Nyle C90A"
                  case 156 :  "NyleC125A_SP"     ; "Nyle C125A"
                  case 146 :  "NyleC185A_SP"     ; "Nyle C185A"
                  case 147 :  "NyleC250A_SP"     ; "Nyle C250A"
                  case 167 :  "NyleC60A_CWP_SP"  ; "Nyle C60A-CWP"        ; SAC 6/23/20 - added cold wthr package presets
                  case 168 :  "NyleC90A_CWP_SP"  ; "Nyle C90A-CWP"
                  case 169 :  "NyleC125A_CWP_SP" ; "Nyle C125A-CWP"
                  case 170 :  "NyleC185A_CWP_SP" ; "Nyle C185A-CWP"
                  case 171 :  "NyleC250A_CWP_SP" ; "Nyle C250A-CWP"
                  case 157 :  "SandenGS3"        ; "Sanden GS3-45HPA-US"   ; used to map to 17 - Sanden 80
                  case 58 :  "BWC202065"        ; "Bradford White 2020 65"     ; SAC 6/16/20 - NEEA additions
                  case 59 :  "Rheem2020Prem40"  ; "Rheem 2020 Premium 40"
                  case 60 :  "Rheem2020Prem50"  ; "Rheem 2020 Premium 50"
                  case 61 :  "Rheem2020Prem65"  ; "Rheem 2020 Premium 65"
                  case 62 :  "Rheem2020Prem80"  ; "Rheem 2020 Premium 80"
                  case 63 :  "Rheem2020Build40" ; "Rheem 2020 Builder 40"
                  case 64 :  "Rheem2020Build50" ; "Rheem 2020 Builder 50"
                  case 65 :  "Rheem2020Build65" ; "Rheem 2020 Builder 65"
                  case 66 :  "Rheem2020Build80" ; "Rheem 2020 Builder 80"
                  case 191 :  "Generic5kW"       ; "generic 5kW"                ; SAC 06/22/21
                  case 192 :  "Generic11kW"      ; "generic 11kW"
                  case 193 :  "Generic20kW"      ; "generic 20kW"
                  case 194 :  "Generic26kW"      ; "generic 26kW"
                  case 195 :  "Generic40kW"      ; "generic 40kW"
                  case 196 :  "Generic45kW"      ; "generic 45kW"
                  default :  UNDEFINED
               endswitch  endif  }

   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp03_CompressorCountCHPWH"        DHWSys:CF1R_DHWSysCHPWHRow:Tchp03_CompressorCountCHPWH       = { int( ValidOr( CHPWHNumCompFlt, 0 ) + 0.5 )  }      ; RJH 8/18/20   ; CHPWHNumComp -> CHPWHNumCompFlt - SAC 03/16/21 (tic #1219)
   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp04_StorageCapacity"             DHWSys:CF1R_DHWSysCHPWHRow:Tchp04_StorageCapacity            = { if (CHPWHSysDescrip == 2) then atof( Format( "%.2f", CHPWHTotTankVol ) ) else UNDEFINED endif }
   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp04_NotApplicableMessage"        DHWSys:CF1R_DHWSysCHPWHRow:Tchp04_NotApplicableMessage       = { if ( LocalStatus ( CF1R_DHWSysCHPWHRow:Tchp04_StorageCapacity ) < 1 ) then "n/a" else UNDEFINED endif  }
   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp05_TankCountCHPWH"              DHWSys:CF1R_DHWSysCHPWHRow:Tchp05_TankCountCHPWH             = { if (CHPWHSysDescrip == 2) then CHPWHTankCount else UNDEFINED endif }
   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp05_NotApplicableMessage"        DHWSys:CF1R_DHWSysCHPWHRow:Tchp05_NotApplicableMessage       = { if ( LocalStatus ( CF1R_DHWSysCHPWHRow:Tchp05_TankCountCHPWH ) < 1 ) then "n/a" else UNDEFINED endif  }
   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp06_PrimaryTankTotalInsulation"  DHWSys:CF1R_DHWSysCHPWHRow:Tchp06_PrimaryTankTotalInsulation = { if (CHPWHSysDescrip == 2) then atof( Format( "%.2f", CHPWHTankRVal ) ) else UNDEFINED endif }
   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp06_NotApplicableMessage"        DHWSys:CF1R_DHWSysCHPWHRow:Tchp06_NotApplicableMessage       = { if ( LocalStatus ( CF1R_DHWSysCHPWHRow:Tchp06_PrimaryTankTotalInsulation ) < 1 ) then "n/a" else UNDEFINED endif  }
   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp07_TankLocationString"      DHWSys:CF1R_DHWSysCHPWHRow:Tchp07_TankLocationString = 
      { if (CHPWHTankLoc == 1) then "Outside"
        else if (CHPWHTankLoc == 2) then CHPWHTankZone 
        else UNDEFINED endif endif } 
   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp07_NotApplicableMessage"    DHWSys:CF1R_DHWSysCHPWHRow:Tchp07_NotApplicableMessage = { if ( LocalStatus ( CF1R_DHWSysCHPWHRow:Tchp07_TankLocationString ) < 1 ) then "n/a" else UNDEFINED endif  }
   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp07a_TankLocation"           DHWSys:CF1R_DHWSysCHPWHRow:Tchp07a_TankLocation = { if (CHPWHTankLoc == 1) then "Outside" else "TankZone" endif }              ; RJH 8/21/20 using generic "TankZone" rather than explicit CHPWHTankZone
   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp08_AirSourceString"         DHWSys:CF1R_DHWSysCHPWHRow:Tchp08_AirSourceString = 
      { if (CHPWHSrcAirLoc == 1) then "Outside"
        else if (CHPWHSrcAirLoc == 2) then CHPWHSrcAirZone 
        else UNDEFINED endif endif } 
   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp08_NotApplicableMessage"    DHWSys:CF1R_DHWSysCHPWHRow:Tchp08_NotApplicableMessage = { if ( LocalStatus ( CF1R_DHWSysCHPWHRow:Tchp08_AirSourceString ) < 1 ) then "n/a" else UNDEFINED endif  }
   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp08a_AirSource"              DHWSys:CF1R_DHWSysCHPWHRow:Tchp08a_AirSource = { if (CHPWHSrcAirLoc == 1) then "Outside" else "TankZone" endif }    ; RJH 8/21/20 using generic "TankZone" rather than explicit CHPWHSrcAirZone
   "Set DHWSys:CF1R_DHWSysCHPWHRow:Tchp08a_NotApplicableMessage"   DHWSys:CF1R_DHWSysCHPWHRow:Tchp08a_NotApplicableMessage = { if ( LocalStatus ( CF1R_DHWSysCHPWHRow:Tchp08a_AirSource ) < 1 ) then "n/a" else UNDEFINED endif  }

  ; Rule to set Parent for all TableWaterHeatersCHP rows
   "Set cf1rtblRowWaterHeatersCHP parent"   cf1rtblRowWaterHeatersCHP:Parent  = { cf1rTableWaterHeatersCHP:Name  }
  ; --------END of Section_Tchp TableWaterHeatersCHP rules---------------------------------

   ; RJH 8/18/20 new TableLoopTank (tic #1241)
   "Create & initialize new cf1rTableLoopTank object"
      cf1rSection_Tchp:Action  = {  CreateChildren( cf1rTableLoopTank, 1, "TableLoopTank" )  }  

   "Create DHWSys:CF1R_DHWSysLoopTankRow (if appropriate)"     DHWSys:CF1R_DHWSysLoopTankRow  = 
      {  if (IfValidAnd( ValidAnalysisCHPWH > 0 )==0) then  UNDEFINED
         else if (CHPWHLoopTankType < 1) then UNDEFINED
         else  CreateComp( cf1rtblRowLoopTank, Name + " LoopTankRow" )  endif endif }

   "Set DHWSys:CF1R_DHWSysLoopTankRow:Tchplt01_LoopTankType"    DHWSys:CF1R_DHWSysLoopTankRow:Tchplt01_LoopTankType    = 
		  {  switch (CHPWHLoopTankType)
				case  1 : "ElectricResistance"
				case  2 : "NEEA"
				case  3 : "ComProduct"     ; SAC 02/18/21 (tic #1260)
				case 10 : "LargeCompressor"
				default : UNDEFINED
			 endswitch  }

  ; Population of elements depends on CHPWHLoopTankType

   "Set DHWSys:CF1R_DHWSysLoopTankRow:Tchplt02_LoopTankBrandModel"  DHWSys:CF1R_DHWSysLoopTankRow:Tchplt02_LoopTankBrandModel  =  
      {  if (CHPWHLoopTankType == 1)
         then UNDEFINED
         else if (CHPWHLoopTankType == 2)
         then  EnumString( CHPWHLoopTankNEEABrand ) + " / " + EnumString( CHPWHLoopTankNEEAModel )
         else if (CHPWHLoopTankType == 3)
         then  EnumString( CHPWHLoopTankComModel )
         else if (CHPWHLoopTankType == 10)
         then  EnumString( CHPWHLoopTankCompType )
         else  "unknown"  endif endif endif endif }
   "Set DHWSys:CF1R_DHWSysLoopTankRow:Tchplt02_NotApplicableMessage" DHWSys:CF1R_DHWSysLoopTankRow:Tchplt02_NotApplicableMessage = { if ( LocalStatus ( CF1R_DHWSysLoopTankRow:Tchplt02_LoopTankBrandModel ) < 1 ) then "n/a" else UNDEFINED endif  }

   "Set DHWSys:CF1R_DHWSysLoopTankRow:Tchplt02b_HeatPumpWaterHeaterSimulationGroup"  DHWSys:CF1R_DHWSysLoopTankRow:Tchplt02b_HeatPumpWaterHeaterSimulationGroup  =    ; SAC 11/03/21   ; updated for CHPWHCompType IDS + 100 - SAC 12/28/22
      {  if (CHPWHSysDescrip < 1 .OR. CHPWHASHPType < 1 .OR. CHPWHLoopTankType < 2) then  UNDEFINED
         else  switch ( CHPWHLoopTankASHPType ) 
                  case 11 :  "AOSmithPHPT60"    ; "AO Smith PHPT 60"
                  case 12 :  "AOSmithPHPT80"    ; "AO Smith PHPT 80"
                  case 13 :  "AOSmithHPTU50"    ; "AO Smith HPTU 50"
                  case 14 :  "AOSmithHPTU66"    ; "AO Smith HPTU 66"
                  case 15 :  "AOSmithHPTU80"    ; "AO Smith HPTU 80"
                  case 32 :  "AOSmithSHPT50"    ; "AO Smith SHPT 50"      ; AOSmithSHPT50
                  case 33 :  "AOSmithSHPT66"    ; "AO Smith SHPT 66"      ; AOSmithSHPT66
                  case 34 :  "AOSmithSHPT80"    ; "AO Smith SHPT 80"      ; AOSmithSHPT80
                  case 72 :  "AOSmithCAHP120"   ; "AO Smith CAHP-120"     ; SAC 01/30/21 (tic #1260)
                  case 19 :  "GE201450"         ; "GE2014 50"
                  case 23 :  "GE201480"         ; "GE2014 80"
                  case 36 :  "GE201480"         ; "GE2014 80 Eff DR"      ; GE2014_80DR          -- DR ???
                  case 21 :  "RheemHB50"        ; "Rheem HB 50"
                  case 16 :  "Sanden40"         ; "Sanden 40"
                  case 17 :  "Sanden80"         ; "Sanden 80"
                  case 22 :  "Stiebel220E"      ; "Stiebel 220E"
                  case 38 :  "GE201250"         ; "GE2012 50"
                  case 73 :  "Tier3Generic40"   ; "AWHSTier3Generic40"    ; NEEA generic tier 3 options - SAC 06/17/21
                  case 74 :  "Tier3Generic50"   ; "AWHSTier3Generic50"
                  case 75 :  "Tier3Generic65"   ; "AWHSTier3Generic65"
                  case 76 :  "Tier3Generic80"   ; "AWHSTier3Generic80"
                  case 39 :  "RheemHBDR4550"    ; "Rheem HBDR-45-50"
                  case 40 :  "RheemHBDR4565"    ; "Rheem HBDR-45-65"
                  case 41 :  "RheemHBDR4580"    ; "Rheem HBDR-45-80"
                  case 42 :  "RheemHBDR2250"    ; "Rheem HBDR-22-50"
                  case 43 :  "RheemHBDR2265"    ; "Rheem HBDR-22-65"
                  case 44 :  "RheemHBDR2280"    ; "Rheem HBDR-22-80"
                  case 148 :  "ColmacCxV5_SP"    ; "Colmac CxV-5"
                  case 149 :  "ColmacCxA10_SP"   ; "Colmac CxA-10"
                  case 150 :  "ColmacCxA15_SP"   ; "Colmac CxA-15"
                  case 145 :  "ColmacCxA20_SP"   ; "Colmac CxA-20"
                  case 151 :  "ColmacCxA25_SP"   ; "Colmac CxA-25"
                  case 152 :  "ColmacCxA30_SP"   ; "Colmac CxA-30"
                  case 153 :  "NyleC25A_SP"      ; "Nyle C25A"
                  case 154 :  "NyleC60A_SP"      ; "Nyle C60A"
                  case 155 :  "NyleC90A_SP"      ; "Nyle C90A"
                  case 156 :  "NyleC125A_SP"     ; "Nyle C125A"
                  case 146 :  "NyleC185A_SP"     ; "Nyle C185A"
                  case 147 :  "NyleC250A_SP"     ; "Nyle C250A"
                  case 167 :  "NyleC60A_CWP_SP"  ; "Nyle C60A-CWP"        ; SAC 6/23/20 - added cold wthr package presets
                  case 168 :  "NyleC90A_CWP_SP"  ; "Nyle C90A-CWP"
                  case 169 :  "NyleC125A_CWP_SP" ; "Nyle C125A-CWP"
                  case 170 :  "NyleC185A_CWP_SP" ; "Nyle C185A-CWP"
                  case 171 :  "NyleC250A_CWP_SP" ; "Nyle C250A-CWP"
                  case 157 :  "SandenGS3"        ; "Sanden GS3-45HPA-US"   ; used to map to 17 - Sanden 80
                  case 58 :  "BWC202065"        ; "Bradford White 2020 65"     ; SAC 6/16/20 - NEEA additions
                  case 59 :  "Rheem2020Prem40"  ; "Rheem 2020 Premium 40"
                  case 60 :  "Rheem2020Prem50"  ; "Rheem 2020 Premium 50"
                  case 61 :  "Rheem2020Prem65"  ; "Rheem 2020 Premium 65"
                  case 62 :  "Rheem2020Prem80"  ; "Rheem 2020 Premium 80"
                  case 63 :  "Rheem2020Build40" ; "Rheem 2020 Builder 40"
                  case 64 :  "Rheem2020Build50" ; "Rheem 2020 Builder 50"
                  case 65 :  "Rheem2020Build65" ; "Rheem 2020 Builder 65"
                  case 66 :  "Rheem2020Build80" ; "Rheem 2020 Builder 80"
                  case 191 :  "Generic5kW"       ; "generic 5kW"                ; SAC 06/22/21
                  case 192 :  "Generic11kW"      ; "generic 11kW"
                  case 193 :  "Generic20kW"      ; "generic 20kW"
                  case 194 :  "Generic26kW"      ; "generic 26kW"
                  case 195 :  "Generic40kW"      ; "generic 40kW"
                  case 196 :  "Generic45kW"      ; "generic 45kW"
                  default :  UNDEFINED
               endswitch  endif  }

   "Set DHWSys:CF1R_DHWSysLoopTankRow:Tchplt03_CompressorCountCHPWH"   DHWSys:CF1R_DHWSysLoopTankRow:Tchplt03_CompressorCountCHPWH  = {  CHPWHLoopTankCompCnt  }  

   "Set DHWSys:CF1R_DHWSysLoopTankRow:Tchplt04a_LoopTankCapacity"  DHWSys:CF1R_DHWSysLoopTankRow:Tchplt04a_LoopTankCapacity  =  
      {  if (CHPWHLoopTankType == 1)
         then CHPWHLoopTankVol
         else if (CHPWHLoopTankType == 2 .OR. CHPWHLoopTankType == 3)
         then  UNDEFINED
         else if (CHPWHLoopTankType == 10)
         then CHPWHLoopTankVol
         else  UNDEFINED  endif endif endif }
   "Set DHWSys:CF1R_DHWSysLoopTankRow:Tchplt04a_NotApplicableMessage" DHWSys:CF1R_DHWSysLoopTankRow:Tchplt04a_NotApplicableMessage = { if ( LocalStatus ( CF1R_DHWSysLoopTankRow:Tchplt04a_LoopTankCapacity ) < 1 ) then "n/a" else UNDEFINED endif  }

   "Set DHWSys:CF1R_DHWSysLoopTankRow:Tchplt04b_TankCountCHPWH"  DHWSys:CF1R_DHWSysLoopTankRow:Tchplt04b_TankCountCHPWH  =  
      {  if (CHPWHLoopTankType == 1)
         then CHPWHLoopTankTankCnt
         else if (CHPWHLoopTankType == 2 .OR. CHPWHLoopTankType == 3)
         then  UNDEFINED
         else if (CHPWHLoopTankType == 10)
         then CHPWHLoopTankTankCnt
         else  UNDEFINED  endif endif endif }
   "Set DHWSys:CF1R_DHWSysLoopTankRow:Tchplt04b_NotApplicableMessage" DHWSys:CF1R_DHWSysLoopTankRow:Tchplt04b_NotApplicableMessage = { if ( LocalStatus ( CF1R_DHWSysLoopTankRow:Tchplt04b_TankCountCHPWH ) < 1 ) then "n/a" else UNDEFINED endif  }

   "Set DHWSys:CF1R_DHWSysLoopTankRow:Tchplt05_LoopTankTotalInsulation"  DHWSys:CF1R_DHWSysLoopTankRow:Tchplt05_LoopTankTotalInsulation  =  
      {  if (CHPWHLoopTankType == 1)
         then CHPWHLoopTankRVal
         else if (CHPWHLoopTankType == 2 .OR. CHPWHLoopTankType == 3)
         then  UNDEFINED
         else if (CHPWHLoopTankType == 10)
         then CHPWHLoopTankRVal
         else  UNDEFINED  endif endif endif }
   "Set DHWSys:CF1R_DHWSysLoopTankRow:Tchplt05_NotApplicableMessage" DHWSys:CF1R_DHWSysLoopTankRow:Tchplt05_NotApplicableMessage = { if ( LocalStatus ( CF1R_DHWSysLoopTankRow:Tchplt05_LoopTankTotalInsulation ) < 1 ) then "n/a" else UNDEFINED endif  }

   "Set DHWSys:CF1R_DHWSysLoopTankRow:Tchplt06_TankLocationString"    DHWSys:CF1R_DHWSysLoopTankRow:Tchplt06_TankLocationString = 
      { if (CHPWHLoopTankLoc == 1) then "Outside"
        else if (CHPWHLoopTankLoc == 2) then CHPWHLoopTankZone 
        else UNDEFINED endif endif } 
   "Set DHWSys:CF1R_DHWSysLoopTankRow:Tchplt06_NotApplicableMessage"  DHWSys:CF1R_DHWSysLoopTankRow:Tchplt06_NotApplicableMessage = { if ( LocalStatus ( CF1R_DHWSysLoopTankRow:Tchplt06_TankLocationString ) < 1 ) then "n/a" else UNDEFINED endif  }

   "Set DHWSys:CF1R_DHWSysLoopTankRow:Tchplt06a_TankLocation"         DHWSys:CF1R_DHWSysLoopTankRow:Tchplt06a_TankLocation = { if (CHPWHLoopTankLoc == 1) then "Outside" else "TankZone" endif }  ; RJH 8/21/20 using generic "TankZone" rather than explicit CHPWHTankZone

   "Set DHWSys:CF1R_DHWSysLoopTankRow:Tchplt07_AirSourceString"       DHWSys:CF1R_DHWSysLoopTankRow:Tchplt07_AirSourceString =  
      { if (CHPWHLoopTankType == 1) then  UNDEFINED
        else if (CHPWHLoopTankSrcAirLoc == 1) then "Outside"
        else if (CHPWHLoopTankSrcAirLoc == 2) then CHPWHLoopTankSrcAirZone 
        else UNDEFINED endif endif endif } 
   "Set DHWSys:CF1R_DHWSysLoopTankRow:Tchplt07_NotApplicableMessage"  DHWSys:CF1R_DHWSysLoopTankRow:Tchplt07_NotApplicableMessage  = { if ( LocalStatus ( CF1R_DHWSysLoopTankRow:Tchplt07_AirSourceString ) < 1 ) then "n/a" else UNDEFINED endif  }  ; SAC 09/05/20

   "Set DHWSys:CF1R_DHWSysLoopTankRow:Tchplt07a_AirSource"  DHWSys:CF1R_DHWSysLoopTankRow:Tchplt07a_AirSource  =  
      {  if (CHPWHLoopTankType == 1)
         then  UNDEFINED
         else if (CHPWHLoopTankType >= 2)
         then  if (CHPWHLoopTankSrcAirLoc == 1)
               then "Outside"
               else "TankZone"  endif
         else  UNDEFINED  endif endif }
   "Set DHWSys:CF1R_DHWSysLoopTankRow:Tchplt07a_NotApplicableMessage" DHWSys:CF1R_DHWSysLoopTankRow:Tchplt07a_NotApplicableMessage = { if ( LocalStatus ( CF1R_DHWSysLoopTankRow:Tchplt07a_AirSource ) < 1 ) then "n/a" else UNDEFINED endif  }

  ; Rule to set Parent for all TableLoopTank rows
   "Set cf1rtblRowLoopTank parent"   cf1rtblRowLoopTank:Parent  = { cf1rTableLoopTank:Name  }

   ; rule to DELETE cf1rTableLoopTank if no rows exist
   "DELETE empty cf1rTableLoopTank object"
      cf1rTableLoopTank:Action   = {  if (ComponentCount( cf1rtblRowLoopTank ) < 1) then  DeleteComp()  else  UNCHANGED  endif }
  ; --------END of Section_Tchp rules---------------------------------


  ; ---------------------------------------------------------------------- RJH 8/24/20 update (tic #1241)
  ; Section_Trlp Water Heaters Recirculation Loop table
   "Create & initialize new cf1rSection_Trlp object"        ; switched logic to create table from 'SumAll( DHWSys:ValidAnalysisCHPWH ) < 1' to rely on IsRecircSystem - SAC 09/05/20
      cf1rCF1RPRF01E:Action    = {  if (SumAcrossIf( DHWSys:FloorAreaServed[1], DHWSys:IsRecircSystem > 0 ) < 1) then  UNCHANGED
                                    else  CreateChildren( cf1rSection_Trlp, 1, "Section_Trlp" )  endif  } 
   "Create & initialize new cf1rTableRecirLoop object"
      cf1rSection_Trlp:Action  = {  CreateChildren( cf1rTableRecirLoop, 1, "TableRecirLoop" )  }  

   ; added logic to prevent cf1rtblRowRecirLoop creation when no cf1rTableRecirLoop exists (prevents error below setting cf1rtblRowRecirLoop:Parent) - SAC 08/29/20
   ; added checks for IsRecircSystem and FloorAreaServed[1] > 0 to avoid reporting un-assigned systems - SAC 03/04/21 (tic #1219)
   "Create DHWSys:CF1R_DHWSysRecircLoopRow (if appropriate)"     DHWSys:CF1R_DHWSysRecircLoopRow  = 
      {  if (IfValidAnd( IsRecircSystem > 0 )==0 .OR. IfValidAnd( FloorAreaServed[1] > 0 )==0 .OR.
             IfValidAnd( NRecircLoops > 0 )==0 .OR. ComponentCount( cf1rTableRecirLoop ) < 1) then  UNDEFINED
         else  CreateComp( cf1rtblRowRecirLoop, Name + " RecircLoopRow" )  endif  }

   "Set DHWSys:CF1R_DHWSysRecircLoopRow:Trlp01_WaterHeatingSystemName"    DHWSys:CF1R_DHWSysRecircLoopRow:Trlp01_WaterHeatingSystemName    = {  Name  }
   "Set DHWSys:CF1R_DHWSysRecircLoopRow:Trlp02_RecirculationLoopCount"    DHWSys:CF1R_DHWSysRecircLoopRow:Trlp02_RecirculationLoopCount    = {  NRecircLoops  } 
   "Set DHWSys:CF1R_DHWSysRecircLoopRow:Trlp03_PipeInsulationThickness"   DHWSys:CF1R_DHWSysRecircLoopRow:Trlp03_PipeInsulationThickness   = {  atof( Format( "%.2f", LoopPipeInsulThk[1] ) )  } 
   "Set DHWSys:CF1R_DHWSysRecircLoopRow:Trlp04_PipeLocation"              DHWSys:CF1R_DHWSysRecircLoopRow:Trlp04_PipeLocation              = 
		  {  switch (RecircPipeLoc[1])
				case  0 : "ConditionedSpace"
				case  1 : "SemiConditionedSpace"
				case  2 : "UnconditionedSpace"
				case  3 : "Underground"
				default : UNDEFINED
			 endswitch  }
   "Set DHWSys:CF1R_DHWSysRecircLoopRow:Trlp05_RecirculationPumpPower"    DHWSys:CF1R_DHWSysRecircLoopRow:Trlp05_RecirculationPumpPower    = {  atof( Format( "%.0f", ValidOr( RecircPumpPwr, 0 ) ) )  }   ; SAC 09/05/20

  ; Rule to set Parent for all TableRecirLoop rows
   "Set cf1rtblRowRecirLoop parent"   cf1rtblRowRecirLoop:Parent  = { cf1rTableRecirLoop:Name  }

  ; rule to DELETE cf1rTableRecirLoop if no rows exist
   "DELETE empty cf1rTableRecirLoop object"
      cf1rTableRecirLoop:Action   = {  if (ComponentCount( cf1rtblRowRecirLoop ) < 1) then  DeleteComp()  else  UNCHANGED  endif }
  ; --------END of Section_Trlp TableRecirLoop rules---------------------------------


  ; ----------------------------------------------------------------------
  ; Section_T Water Heaters table
   "Create & initialize new cf1rSection_T object"
      cf1rCF1RPRF01E:Action  = {  CreateChildren( cf1rSection_T, 1, "Section_T" )  }     ; no init needed
   "Create & initialize new cf1rTableWaterHeaters object"
      cf1rSection_T:Action   = {  CreateChildren( cf1rTableWaterHeaters, 1, "TableWaterHeaters" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual Water Heater table rows
   ; SAC 4/25/19 - revised to output only one record per DHWHeater (or combined hydronic HVACSys)
;   "Create cf1rtblRowWaterHeaters for all DHWSysRpt instances"
;      DHWSysRpt:DHWHeaterRef:CF1R_WaterHeatersRow   = {  if (LocalCompAssigned( DHWHeaterRef:CF1R_WaterHeatersRow )) then  UNDEFINED
;                                                         else  CreateComp( cf1rtblRowWaterHeaters, Name + "WaterHeaterRow" )  endif  }
   "Create cf1rtblRowWaterHeaters for all DHWSysRpt instances"
; RJH 1/25/20 - change filter to include all water heaters with FloorAreaServed > 0 per Ticket#1190
      DHWHeater:CF1R_WaterHeatersRow   = {   if ( IfValidAnd( FloorAreaServed > 0 ) )
                                             then  CreateComp( cf1rtblRowWaterHeaters, Name + "WaterHeaterRow" )
                                             else  UNDEFINED  endif  }

   ; ----------------------------------------------------------------------
   ; Rules to populate Water Heater table rows for all DHWSysRpt instances
    "Set DHWHeater:CF1R_WaterHeatersRow:T01_WaterHeaterName" DHWHeater:CF1R_WaterHeatersRow:T01_WaterHeaterName  = {  Name  }
    "Set DHWHeater:CF1R_WaterHeatersRow:T02_WaterHeaterFuelSource" DHWHeater:CF1R_WaterHeatersRow:T02_WaterHeaterFuelSource  = {  switch( EnumString( HeaterElementType ) )
																																	  case "Electric Resistance" :  "Electricity"
																																	  case "Gas"                 :  if (EnumString(ResProj:GasType) = "Natural Gas") 
																																	                                then "NaturalGas" 
																																									else "PropaneGas" endif
																																	  case "Heat Pump"           :  "WaterHeatingHP"         ; RJH 20200609 - tic #1056
																																	  default                    :  UNDEFINED
																																  endswitch  }

   ; SAC 5/26/19 - added logic to set T03_NotApplicableMessage rather than T03_ResidentialWaterHeaterType for NEEA HPWHs
    "Set DHWHeater:CF1R_WaterHeatersRow:T03_ResidentialWaterHeaterType" DHWHeater:CF1R_WaterHeatersRow:T03_ResidentialWaterHeaterType  =    ; SAC 5/27/19 - update for (tic #1096)   ; SAC 02/20/21 (tic #1260)
      {  if (IfValidAnd( HeaterElementType = 5 ) .AND. IfValidAnd( ASHPType > 0 ) .AND.
             (IfValidAnd( HPWH_NEEARated > 0.5 ) .OR. IfValidAnd( HPWH_ComProduct > 0.5 ))) then  UNDEFINED
         else  switch( EnumString( TankType ) )
					   case "Large Instantaneous"   :  "InstantaneousLarge"
					   case "Large Storage"         :  "StorageLarge"
					   case "Small Instantaneous"   :  "InstantaneousSmall"
					   case "Small Storage"         :  "StorageSmall"
					   case "Large Instantaneous (existing only)"   :  "InstantaneousLarge"
					   case "Large Storage (existing only)"         :  "StorageLarge"
					   case "Small Instantaneous (existing only)"   :  "InstantaneousSmall"
					   case "Small Storage (existing only)"         :  "StorageSmall"
					   case "Boiler"                :  "BoilerWaterHeater"
					   case "Indirect"              :  "IndirectWaterHeating"
					   case "Consumer Instantaneous (UEF)"  :  "InstantaneousConsumer"
					   case "Commercial Instantaneous (TE)" :  "InstantaneousCommercial"
					   case "Residential-Duty Commercial Storage (UEF)"       :  "StorageResDutyCommercial"
					   case "Residential-Duty Commercial Instantaneous (UEF)" :  "InstantaneousResDutyCommercial"
					   case "Commercial Storage (TE & SBL)"                   :  "StorageCommercial"
					   case "Consumer Storage (UEF)"                          :  "StorageConsumer"
					   default                       :  UNDEFINED
					endswitch  endif  }
    "Set DHWHeater:CF1R_WaterHeatersRow:T03_NotApplicableMessage" DHWHeater:CF1R_WaterHeatersRow:T03_NotApplicableMessage  = { if ( LocalStatus ( CF1R_WaterHeatersRow:T03_ResidentialWaterHeaterType ) < 1 ) then "n/a" else UNDEFINED endif  }

    "Set DHWHeater:CF1R_WaterHeatersRow:T04_WaterHeaterCount" DHWHeater:CF1R_WaterHeatersRow:T04_WaterHeaterCount  =
      {  SumRevRef( DHWSysRpt:DHWHeaterRef, DHWSysRpt:NonCntrlDHWHeaterCnt ) +
         SumRevRef( DHWSys:DHWHeater[1], DHWSys:CntrlHtrMultFlt[1] ) + SumRevRef( DHWSys:DHWHeater[2], DHWSys:CntrlHtrMultFlt[2] ) +
         SumRevRef( DHWSys:DHWHeater[3], DHWSys:CntrlHtrMultFlt[3] ) + SumRevRef( DHWSys:DHWHeater[4], DHWSys:CntrlHtrMultFlt[4] ) +
         SumRevRef( DHWSys:DHWHeater[5], DHWSys:CntrlHtrMultFlt[5] ) + SumRevRef( DHWSys:DHWHeater[6], DHWSys:CntrlHtrMultFlt[6] )  }
         ; SAC 6/14/20 - mods to prevent over-counting # heaters assigned to CENTRAL systems (tic #1185)   was previously: SumRevRef( DHWSysRpt:DHWHeaterRef, DHWSysRpt:DHWHeaterCnt )  }    ; SAC 10/28/19 - MaxRevRef() -> SumRevRef() to return building total

    "Set DHWHeater:CF1R_WaterHeatersRow:T05_StorageCapacity" DHWHeater:CF1R_WaterHeatersRow:T05_StorageCapacity  =      ; SAC 02/20/21 (tic #1260)
                     {  if ( IfValidAnd( IsNEEAHtPumpWtrHtr > 0 ) )
						      then  if (HPWHModel > 0)
						            then  atof( Format( "%.2f", HPWHData_NEEA:TankVolume( "ModelNum", HPWHModel ) ) )
						            else  UNDEFINED  endif
                        else if (IfValidAnd( HPWH_ComProduct > 0 ))
                        then  switch (HPWHComModel)
                                 case  110172 :  120
                                 default      :  UNDEFINED
                              endswitch
						      else  if ( LocalStatus(TankVolume) < 1 ) then UNDEFINED
						            else atof( Format( "%.2f", TankVolume ) )
						            endif  endif endif  }
    "Set DHWHeater:CF1R_WaterHeatersRow:T05_NotApplicableMessage" DHWHeater:CF1R_WaterHeatersRow:T05_NotApplicableMessage  = {
         if ( LocalStatus ( CF1R_WaterHeatersRow:T05_StorageCapacity ) < 1 ) then "n/a" else UNDEFINED endif  }

   ; SAC 5/26/19 - added logic to prevent setting T06a_* or T06_* for NEEA HPWHs
   ; SAC 7/3/19 - added "NEEA" option (just added to schema)
    "Set DHWHeater:CF1R_WaterHeatersRow:T06a_EfficiencyType" DHWHeater:CF1R_WaterHeatersRow:T06a_EfficiencyType  = {
                        if (LocalStatus(EfficiencyUnits) < 1)
                        then  UNDEFINED
                        else if (IfValidAnd( HeaterElementType = 5 ) .AND. IfValidAnd( HPWH_NEEARated > 0.5 ) .AND.
                                 IfValidAnd( ASHPType > 0 ))
                        then  "NEEA"
                        else if (IfValidAnd( HeaterElementType = 5 ) .AND. IfValidAnd( HPWH_ComProduct > 0.5 ) .AND.
                                 IfValidAnd( ASHPType > 0 ))
                        then  "ComProduct"
                        else  switch( EfficiencyUnits )
      								   case "EF"    :  "EnergyFactor"
	      							   case "UEF"   :  "UniformEnergyFactor"
		      						   case "TE"    :  "ThermalEfficiency"
			      					   case "AFUE"  :  "AFUE"
				      				   default  :  UNDEFINED
					      			endswitch  endif endif endif  }
   ; "Set DHWHeater:CF1R_WaterHeatersRow:T06_NEEA_Rated" DHWHeater:CF1R_WaterHeatersRow:T06_NEEA_Rated  =       ; SAC 5/26/19 - added per e-mail from RAS      ; SAC 10/29/19 - removed
   ;   {  if (IfValidAnd( HeaterElementType = 5 ) .AND. IfValidAnd( HPWH_NEEARated > 0.5 ) .AND.
   ;          IfValidAnd( ASHPType > 0 )) then  "NEEA"  else  UNDEFINED  endif  }
    "Set DHWHeater:CF1R_WaterHeatersRow:T06_WaterHeaterAFUE" DHWHeater:CF1R_WaterHeatersRow:T06_WaterHeaterAFUE  =
                     {  if (EfficiencyUnits == "AFUE")
								then  atof( Format( "%.3f", EnergyFactor ) )
								else  UNDEFINED  endif  }
    "Set DHWHeater:CF1R_WaterHeatersRow:T06_EnergyFactor" DHWHeater:CF1R_WaterHeatersRow:T06_EnergyFactor  =         ; SAC 02/20/21 (tic #1260)
                     {  if (IfValidAnd( HeaterElementType = 5 ) .AND. IfValidAnd( ASHPType > 0 ) .AND.
                            (IfValidAnd( HPWH_NEEARated > 0.5 ) .OR. IfValidAnd( HPWH_ComProduct > 0.5 ))) then  UNDEFINED
                        else if (EfficiencyUnits == "EF")
                        then  atof( Format( "%.2f", EnergyFactor ) )
                        else  UNDEFINED  endif endif  }
    "Set DHWHeater:CF1R_WaterHeatersRow:T06_UniformEnergyFactor" DHWHeater:CF1R_WaterHeatersRow:T06_UniformEnergyFactor  =       ; SAC 02/20/21 (tic #1260)
                     {  if (IfValidAnd( HeaterElementType = 5 ) .AND. IfValidAnd( ASHPType > 0 ) .AND.
                            (IfValidAnd( HPWH_NEEARated > 0.5 ) .OR. IfValidAnd( HPWH_ComProduct > 0.5 ))) then  UNDEFINED
                        else if (EfficiencyUnits == "UEF")
                        then  atof( Format( "%.2f", EnergyFactor ) )
                        else  UNDEFINED  endif endif  }
    "Set DHWHeater:CF1R_WaterHeatersRow:T06_EfficiencyType"    DHWHeater:CF1R_WaterHeatersRow:T06_EfficiencyType  =     ; SAC 7/3/19 - new schema element   ; SAC 02/20/21 (tic #1260)
      {                 if (IfValidAnd( CF1R_WaterHeatersRow:T06a_EfficiencyType = "NEEA" ) .OR.
                            IfValidAnd( CF1R_WaterHeatersRow:T06a_EfficiencyType = "ComProduct" ))
                        then  CF1R_WaterHeatersRow:T06a_EfficiencyType
                        else  UNDEFINED  endif  }
    "Set DHWHeater:CF1R_WaterHeatersRow:T06_ThermalEfficiency" DHWHeater:CF1R_WaterHeatersRow:T06_ThermalEfficiency  = {  if (EfficiencyUnits == "TE")
                                                                                                               then  atof( Format( "%.2f", EnergyFactor ) )
                                                                                                               else  UNDEFINED  endif  }

    "Set DHWHeater:CF1R_WaterHeatersRow:T07a_WaterHeaterRatedInputUnits" DHWHeater:CF1R_WaterHeatersRow:T07a_WaterHeaterRatedInputUnits  = {
          if (      EnumString( HeaterElementType ) == "Gas"                  .AND. IfValidAnd( InputRating > 0 )) then  "BtuHr"
          else if ( EnumString( HeaterElementType ) == "Electric Resistance"  .AND. IfValidAnd( InputRating > 0 )) then  "kW" 
          else  UNDEFINED  endif endif  }
    "Set DHWHeater:CF1R_WaterHeatersRow:T07_WaterHeaterElectricFiredRatedInput" DHWHeater:CF1R_WaterHeatersRow:T07_WaterHeaterElectricFiredRatedInput  = {  
          if ( EnumString( HeaterElementType ) == "Electric Resistance"  .AND. IfValidAnd( InputRating > 0 )) then  InputRating/1000   ; SAC 4/30/19 - convert output W->kW
                                                 else UNDEFINED 
                                                 endif }
    "Set DHWHeater:CF1R_WaterHeatersRow:T07_WaterHeaterGasFiredRatedInput" DHWHeater:CF1R_WaterHeatersRow:T07_WaterHeaterGasFiredRatedInput  = {  
          if ( EnumString( HeaterElementType ) == "Gas" .AND. IfValidAnd( InputRating > 0 )) then  InputRating   ; SAC 8/2/19 - convert output Btuh->kBtuh   ; SAC 10/15/19 - revert units to Btuh
                                                 else UNDEFINED 
                                                 endif }
    "Set DHWHeater:CF1R_WaterHeatersRow:T07_WaterHeaterRatedInputString" DHWHeater:CF1R_WaterHeatersRow:T07_WaterHeaterRatedInputString  =      ; SAC 8/2/19 - (tic #1118)
      {  switch (HeaterElementType)
            case  0 :            ; (watts)   "Electric Resistance" 
                     if (LocalStatus( CF1R_WaterHeatersRow:T07_WaterHeaterElectricFiredRatedInput ) < 1) then  UNDEFINED
                     else  switch (HeaterType)
                              case  2 :  Format(  "> %.0f kW", CF1R_WaterHeatersRow:T07_WaterHeaterElectricFiredRatedInput )   ; "Large Instantaneous" 
                              case  3 :  Format(  "> %.0f kW", CF1R_WaterHeatersRow:T07_WaterHeaterElectricFiredRatedInput )   ; "Large Storage" 
                              case 11 :  Format(  "> %.0f kW", CF1R_WaterHeatersRow:T07_WaterHeaterElectricFiredRatedInput )   ; "Commercial Instantaneous (TE)"            
                              case 13 :  Format(  "> %.0f kW", CF1R_WaterHeatersRow:T07_WaterHeaterElectricFiredRatedInput )   ; "Commercial Storage (TE & SBL)"            
                              default :  Format( "<= %.0f kW", CF1R_WaterHeatersRow:T07_WaterHeaterElectricFiredRatedInput )   ; "Small Instantaneous" / "Small Storage" / "Consumer Instantaneous (UEF)" / "Consumer Storage (UEF)" / "Residential-Duty Commercial Instantaneous (UEF)"
                           endswitch  endif
            case  1 :            ; (Btu/hr)  "Natural Gas"   
                     if (LocalStatus( CF1R_WaterHeatersRow:T07_WaterHeaterGasFiredRatedInput ) < 1) then  UNDEFINED
                     else  switch (HeaterType)
                              case  2 :  Format(  "> %.0f kBtu/hr", CF1R_WaterHeatersRow:T07_WaterHeaterGasFiredRatedInput/1000 )   ; "Large Instantaneous"  
                              case  3 :  Format(  "> %.0f kBtu/hr", CF1R_WaterHeatersRow:T07_WaterHeaterGasFiredRatedInput/1000 )   ; "Large Storage"  
                              case 11 :  Format(  "> %.0f kBtu/hr", CF1R_WaterHeatersRow:T07_WaterHeaterGasFiredRatedInput/1000 )   ; "Commercial Instantaneous (TE)"            
                              case 13 :  Format(  "> %.0f kBtu/hr", CF1R_WaterHeatersRow:T07_WaterHeaterGasFiredRatedInput/1000 )   ; "Commercial Storage (TE & SBL)"            
                              default :  Format( "<= %.0f kBtu/hr", CF1R_WaterHeatersRow:T07_WaterHeaterGasFiredRatedInput/1000 )   ; "Boiler" / "Indirect" / "UEF-rated Instantaneous" / "Small Tankless" / "Consumer Instantaneous (UEF)" / "Consumer Storage (UEF)" / "Residential-Duty Commercial Storage (UEF)" / "Small Storage"
                           endswitch  endif
            case  2 :            ; (Btu/hr)  "Propane"             
                     if (IfValidAnd( InputRating > 0 )==0) then  UNDEFINED
                     else  Format( "<= %.0f kBtu/hr", InputRating/1000 )  endif
            case  3 :            ; (watts)   "Heat Pump"           
                     if (IfValidAnd( InputRating > 0 )==0) then  UNDEFINED
                     else  Format( "<= %.0f kW", InputRating/1000 )  endif
            case  4 :            ; (Btu/hr)  "Oil"   
                     if (IfValidAnd( InputRating > 0 )==0) then  UNDEFINED
                     else  Format( "<= %.0f kBtu/hr", InputRating/1000 )  endif
            case  5 :            ; (watts)  "Heat Pump"              
                     if (IfValidAnd( InputRating > 0 )==0) then  UNDEFINED
                     else  Format( "<= %.0f kW", InputRating/1000 )  endif
            default :   UNCHANGED
         endswitch  }

    "Set DHWHeater:CF1R_WaterHeatersRow:T08_ExteriorTankInsulation" DHWHeater:CF1R_WaterHeatersRow:T08_ExteriorTankInsulation  = {
                  if (IfValidAnd( HeaterElementType = 5 ) .OR. LocalStatus( ExtInsulRVal ) < 1) then  UNDEFINED
                  else  ExtInsulRVal  endif  }
    "Set DHWHeater:CF1R_WaterHeatersRow:T08_NotApplicableMessage" DHWHeater:CF1R_WaterHeatersRow:T08_NotApplicableMessage  = { if ( LocalStatus ( CF1R_WaterHeatersRow:T08_ExteriorTankInsulation ) < 1 ) then "n/a" else UNDEFINED endif  }
    "Set DHWHeater:CF1R_WaterHeatersRow:T09_WaterHeaterStandbyLossFraction" DHWHeater:CF1R_WaterHeatersRow:T09_WaterHeaterStandbyLossFraction  = {
                  if (IfValidAnd( StandbyLossFrac > 0 ) .AND. (HeaterType = 3 .OR. HeaterType = 13))
                  then  FltToStr( StandbyLossFrac )
                  else if (IfValidAnd( RecovEff > 0 ) .AND. (DispUEFRecovEff > 0 .OR. (CanBeCHWHeater > 0 .AND. HeaterType != 8 .AND. HeaterType < 9 .AND. HeaterElementType != 5)))
                  then  FltToStr( RecovEff )
                  else  UNDEFINED  endif endif  }
    "Set DHWHeater:CF1R_WaterHeatersRow:T09_NotApplicableMessage" DHWHeater:CF1R_WaterHeatersRow:T09_NotApplicableMessage  = { if ( LocalStatus ( CF1R_WaterHeatersRow:T09_WaterHeaterStandbyLossFraction ) < 1 ) then "n/a" else UNDEFINED endif  }
    "Set DHWHeater:CF1R_WaterHeatersRow:T10_WaterHeaterFirstHourRating" DHWHeater:CF1R_WaterHeatersRow:T10_WaterHeaterFirstHourRating  = {
                  if (IfValidAnd( FirstHourRating > 0 ) .AND. (IsUEFHtPump = 1 .OR. HeaterType = 12 .OR. HeaterType = 14))
                  then  FltToStr( FirstHourRating )
                  else  UNDEFINED  endif  }
    "Set DHWHeater:CF1R_WaterHeatersRow:T10_WaterHeaterFlowRate" DHWHeater:CF1R_WaterHeatersRow:T10_WaterHeaterFlowRate  = {
                  if (IfValidAnd( RatedFlow > 0 ) .AND. (HeaterType = 10 .OR. HeaterType = 15))
                  then  FltToStr( RatedFlow )
                  else  UNDEFINED  endif  }
   ; SAC 5/28/19 - modified rules to report | Whirlpool / WhirlpoolHPSE2K50 / AOSmithSHPT50 | when user chooses (generic) / UEF 2  (50 gal)  - per e-mail from CEC/TF today @ 1:45p
    "Set DHWHeater:CF1R_WaterHeatersRow:T11_HeatPumpWaterHeaterBrand" DHWHeater:CF1R_WaterHeatersRow:T11_HeatPumpWaterHeaterBrand  =      ; SAC 02/20/21 (tic #1260)
			   {  if (IfValidAnd( HeaterElementType = 5 )==0) then  UNDEFINED
					else if ((IfValidAnd( HPWH_NEEARated < 0.5 ) .AND. IfValidAnd( HPWH_ComProduct < 0.5 )) .OR.
								IfValidAnd( ASHPType > 0 )==0) then  UNDEFINED
					else	if (IfValidAnd( HPWHBrand > 2 ))
					      then  
                                switch( EnumString( HPWHBrand ) )
                                    case "A. O. Smith"     :  "AOSmith"
                                    case "American"        :  "American"
                                    case "Bradford White"  :  "BradfordWhite"
                                    case "Direct Energy"   :  "DirectEnergy"
                                    case "EcoSense"        :  "EcoSense"
                                    case "GE"              :  "GE"
                                    case "Kenmore"         :  "Kenmore"
                                    case "Lochinvar"       :  "Lochinvar"
                                    case "Reliance"        :  "Reliance"
                                    case "Rheem"           :  "Rheem"
                                    case "Rheem Canada"    :  "RheemCanada"
                                    case "Richmond"        :  "Richmond"
                                    case "Ruud"            :  "Ruud"
                                    case "Sanden"          :  "Sanden"
                                    case "State"           :  "State"
                                    case "Stiebel Eltron"  :  "Stiebel"
                                    case "US Craftmaster"  :  "USCraftmaster"
                                    case "Whirlpool"       :  "Whirlpool"
                                    case "(generic)"       :  "Generic"     ; SAC 5/28/19    ; updated to 'Generic' - SAC 10/02/21
                                    default  :  UNDEFINED
                                endswitch
                     else if (IfValidAnd( HPWH_ComProduct > 0.5 ) .AND. HPWHComModel > 2)
                     then       switch( HPWHComModel )
                                    case  110172  :  "AOSmith"
                                    default       :  UNDEFINED
                                endswitch
					      else  UNDEFINED
					      endif endif
					endif endif  }
    "Set DHWHeater:CF1R_WaterHeatersRow:T11_HeatPumpWaterHeaterModel" DHWHeater:CF1R_WaterHeatersRow:T11_HeatPumpWaterHeaterModel  = {  
			      if (IfValidAnd( HeaterElementType = 5 )==0) then  UNDEFINED
					else if (IfValidAnd( HPWH_NEEARated < 0.5 ) .OR.
								IfValidAnd( ASHPType > 0 )==0) then  UNDEFINED
					else	if (IfValidAnd( HPWHModel > 1 ))
					      then  
      switch( HPWHModel )
          case  110113   :   "AOSmithFPTU50"
          case  110214   :   "AOSmithFPTU66"
          case  110315   :   "AOSmithFPTU80"
          case  110412   :   "AOSmithHHPT80Res"
          case  110513   :   "AOSmithHP1050"
          case  110615   :   "AOSmithHP1080"
          case  111513   :   "AOSmithHP1050DR"
          case  111615   :   "AOSmithHP1080DR"
          case  110713   :   "AOSmithHPTU50"
          case  110813   :   "AOSmithHPTU50N"
          case  111713   :   "AOSmithHPTU50DR"
          case  110914   :   "AOSmithHPTU66"
          case  111014   :   "AOSmithHPTU66N"
          case  111814   :   "AOSmithHPTU66DR"
          case  111115   :   "AOSmithHPTU80"
          case  111215   :   "AOSmithHPTU80N"
          case  111915   :   "AOSmithHPTU80DR"
          case  111311   :   "AOSmithPHPT60"
          case  111412   :   "AOSmithPHPT80"
          case  120111   :   "AmericanHPE10260"
          case  120212   :   "AmericanHPE10280"
          case  120312   :   "AmericanHPE6280"
          case  120413   :   "AmericanHPHE10250"
          case  120513   :   "AmericanHPHE10250N"
          case  121413   :   "AmericanHPHE10250DR"
          case  120614   :   "AmericanHPHE10266Res"
          case  120714   :   "AmericanHPHE10266NRes"
          case  121514   :   "AmericanHPHE10266DR"
          case  120815   :   "AmericanHPHE10280Res"
          case  120915   :   "AmericanHPHE10280NRes"
          case  121615   :   "AmericanHPHE10280DR"
          case  121013   :   "AmericanHPHE6250"
          case  121114   :   "AmericanHPHE6266Res"
          case  121215   :   "AmericanHPHE6280Res"
          case  121313   :   "AmericanHPHE650Res"
          case  130119   :   "BradfordWhiteRE2H50"
          case  130358   :   "BradfordWhiteRE2H65T101NCWT"
          case  130223   :   "BradfordWhiteRE2H80"
          case  130419   :   "BradfordWhiteRE2H50S61NCWT"
          case  130558   :   "BradfordWhiteRE2H65T61NCWT"
          case  130623   :   "BradfordWhiteRE2H80T61NCWT"
          case  270159   :   "DirectEnergyECEPH4015"
          case  270260   :   "DirectEnergyECEPH5015"
          case  270361   :   "DirectEnergyECEPH6515"
          case  270462   :   "DirectEnergyECEPH8015"
          case  270559   :   "DirectEnergyECEPH4030"
          case  270660   :   "DirectEnergyECEPH5030"
          case  270761   :   "DirectEnergyECEPH6530"
          case  270862   :   "DirectEnergyECEPH8030"
          case  270959   :   "DirectEnergyECEPH40SO"
          case  271060   :   "DirectEnergyECEPH50SO"
          case  271161   :   "DirectEnergyECEPH65SO"
          case  271262   :   "DirectEnergyECEPH80SO"
          case  271363   :   "DirectEnergyECEH40"
          case  271464   :   "DirectEnergyECEH50"
          case  271565   :   "DirectEnergyECEH65"
          case  271666   :   "DirectEnergyECEH80"
          case  140121   :   "EcoSenseHB50ES"
          case  150119   :   "BEH50DCEJSB"
          case  150223   :   "BEH80DCEJSB"
          case  150319   :   "GEH50DEEJSC"
          case  150419   :   "GEH50DEEJXXX"
          case  150519   :   "GEH50DFEJSR"
          case  150619   :   "GEH50DHEKSC"
          case  150723   :   "GEH80DEEJSC"
          case  150823   :   "GEH80DFEJSR"
          case  150923   :   "GEH80DHEKSC"
          case  160111   :   "Kenmore153_32116"
          case  160212   :   "Kenmore153_32118"
          case  160313   :   "Kenmore153_5925"
          case  160414   :   "Kenmore153_5926"
          case  160515   :   "Kenmore153_5928"
          case  170113   :   "LochinvarHPA051"
          case  170213   :   "LochinvarHPA052"
          case  170314   :   "LochinvarHPA067"
          case  170414   :   "LochinvarHPA068"
          case  170515   :   "LochinvarHPA081"
          case  170615   :   "LochinvarHPA082"
          case  180113   :   "Reliance1050DHPHT"
          case  180213   :   "Reliance1050DHPHTNE"
          case  181313   :   "Reliance1050DHPHTDR"
          case  180311   :   "Reliance1060DHPTRes"
          case  180414   :   "Reliance1066DHPHT"
          case  180514   :   "Reliance1066DHPHTN"
          case  181414   :   "Reliance1066DHPHTDR"
          case  180615   :   "Reliance1080DHPHT"
          case  180715   :   "Reliance1080DHPHTNE"
          case  181515   :   "Reliance1080DHPHTDR"
          case  180812   :   "Reliance1080DHPTRes"
          case  180913   :   "Reliance650DHPHT"
          case  181014   :   "Reliance666DHPHT"
          case  181115   :   "Reliance680DHPHT"
          case  181215   :   "Reliance680DHPT"
          case  196059   :   "RheemHPLD401RH"
          case  196160   :   "RheemHPLD501RH"
          case  196261   :   "RheemHPLD651RH"
          case  196362   :   "RheemHPLD801RH"
          case  193259   :   "RheemPROPH40T2RH37515"
          case  193360   :   "RheemPROPH50T2RH37515"
          case  193461   :   "RheemPROPH65T2RH37515"
          case  193562   :   "RheemPROPH80T2RH37515"
          case  193659   :   "RheemPROPH40T2RH37530"
          case  193760   :   "RheemPROPH50T2RH37530"
          case  193861   :   "RheemPROPH65T2RH37530"
          case  193962   :   "RheemPROPH80T2RH37530"
          case  194059   :   "RheemPROPH40T2RH375SO"
          case  194160   :   "RheemPROPH50T2RH375SO"
          case  194261   :   "RheemPROPH65T2RH375SO"
          case  194362   :   "RheemPROPH80T2RH375SO"
          case  194459   :   "RheemXE40T10H22U0"
          case  194560   :   "RheemXE50T10H22U0"
          case  194661   :   "RheemXE65T10H22U0"
          case  194762   :   "RheemXE80T10H22U0"
          case  194859   :   "RheemXE40T10H45U0"
          case  194960   :   "RheemXE50T10H45U0"
          case  195061   :   "RheemXE65T10H45U0"
          case  195162   :   "RheemXE80T10H45U0"
          case  195259   :   "RheemXE40T10HS45U0"
          case  195360   :   "RheemXE50T10HS45U0"
          case  195461   :   "RheemXE65T10HS45U0"
          case  195562   :   "RheemXE80T10HS45U0"
          case  195663   :   "RheemPROH40T2RH310BM"
          case  195764   :   "RheemPROH50T2RH310BM"
          case  195865   :   "RheemPROH65T2RH310BM"
          case  195966   :   "RheemPROH80T2RH310BM"
          case  196463   :   "RheemPROH40T2RH310UM"
          case  196564   :   "RheemPROH50T2RH310UM"
          case  196665   :   "RheemPROH65T2RH310UM"
          case  196766   :   "RheemPROH80T2RH310UM"
          case  190121   :   "RheemHB50RH"
          case  190221   :   "RheemPROPH50RH245"
          case  190339   :   "RheemPROPH50RH350"
          case  190440   :   "RheemPROPH65RH350D"
          case  190534   :   "RheemPROPH80RH245"
          case  190641   :   "RheemPROPH80RH350"
          case  190739   :   "RheemXE50T10"
          case  190821   :   "RheemXE50T12"
          case  190921   :   "RheemXE50T12W"
          case  191040   :   "RheemXE65T10"
          case  191141   :   "RheemXE80T10"
          case  191234   :   "RheemXE80T12"
          case  191334   :   "RheemXE80T12W"
          case  191439   :   "RheemPROPH50RH350DC"
          case  191540   :   "RheemPROPH65RH350DC"
          case  191641   :   "RheemPROPH80RH350DC"
          case  191739   :   "RheemHPLD50"
          case  191840   :   "RheemHPLD65"
          case  191941   :   "RheemHPLD80"
          case  192042   :   "RheemXE50T10HD22U0"
          case  192139   :   "RheemXE50T10U1"
          case  192243   :   "RheemXE65T10HD22U0"
          case  192340   :   "RheemXE65T10U1"
          case  192444   :   "RheemXE80T10HD22U0"
          case  192541   :   "RheemXE80T10U1"
          case  192642   :   "RheemPROPH50T2RH350D15"
          case  192739   :   "RheemPROPH50RH350DCB"
          case  192843   :   "RheemPROPH65RH350D15"
          case  192940   :   "RheemPROPH65RH350DCB"
          case  193044   :   "RheemPROPH80RH350D15"
          case  193141   :   "RheemPROPH80RH350DCB"
          case  280159   :   "RheemCanCPROPH40T2RH37515"
          case  280260   :   "RheemCanCPROPH50T2RH37515"
          case  280361   :   "RheemCanCPROPH65T2RH37515"
          case  280462   :   "RheemCanCPROPH80T2RH37515"
          case  280559   :   "RheemCanCPROPH40T2RH37530"
          case  280660   :   "RheemCanCPROPH50T2RH37530"
          case  280761   :   "RheemCanCPROPH65T2RH37530"
          case  280862   :   "RheemCanCPROPH80T2RH37530"
          case  280959   :   "RheemCanCPROPH40T2RH375SO"
          case  281060   :   "RheemCanCPROPH50T2RH375SO"
          case  281161   :   "RheemCanCPROPH65T2RH375SO"
          case  281262   :   "RheemCanCPROPH80T2RH375SO"
          default  :  UNDEFINED
      endswitch
					      else  UNDEFINED
					      endif
					endif endif  }
    "Set DHWHeater:CF1R_WaterHeatersRow:T11_HeatPumpWaterHeaterModel - round 2" DHWHeater:CF1R_WaterHeatersRow:T11_HeatPumpWaterHeaterModel  = {  
			      if (LocalStatus( CF1R_WaterHeatersRow:T11_HeatPumpWaterHeaterModel ) > 0) then  UNCHANGED
			      else if (IfValidAnd( HeaterElementType = 5 )==0) then  UNDEFINED
					else if (IfValidAnd( HPWH_NEEARated < 0.5 ) .OR.
								IfValidAnd( ASHPType > 0 )==0) then  UNDEFINED
					else	if (IfValidAnd( HPWHModel > 1 ))
					      then  
      switch( HPWHModel )
          case  281359   :   "RheemCanCXE40T10H22UO"
          case  281460   :   "RheemCanCXE50T10H22UO"
          case  281561   :   "RheemCanCXE65T10H22UO"
          case  281662   :   "RheemCanCXE80T10H22UO"
          case  281759   :   "RheemCanCXE40T10H45UO"
          case  281860   :   "RheemCanCXE50T10H45UO"
          case  281961   :   "RheemCanCXE65T10H45UO"
          case  282062   :   "RheemCanCXE80T10H45UO"
          case  282159   :   "RheemCanCXE40T10HS45UO"
          case  282260   :   "RheemCanCXE50T10HS45UO"
          case  282361   :   "RheemCanCXE65T10HS45UO"
          case  282462   :   "RheemCanCXE80T10HS45UO"
          case  282563   :   "RheemCanCPROH40T2RH310BM"
          case  282664   :   "RheemCanCPROH50T2RH310BM"
          case  282765   :   "RheemCanCPROH65T2RH310BM"
          case  282866   :   "RheemCanCPROH80T2RH310BM"
          case  201059   :   "Richmond10E40HP515"
          case  201160   :   "Richmond10E50HP515"
          case  201261   :   "Richmond10E65HP515"
          case  201362   :   "Richmond10E80HP515"
          case  201459   :   "Richmond10E40HP530"
          case  201560   :   "Richmond10E50HP530"
          case  201661   :   "Richmond10E65HP530"
          case  201762   :   "Richmond10E80HP530"
          case  201859   :   "Richmond10E40HP5S30"
          case  201960   :   "Richmond10E50HP5S30"
          case  202061   :   "Richmond10E65HP5S30"
          case  202162   :   "Richmond10E80HP5S30"
          case  200139   :   "Richmond10E50HP4D"
          case  200240   :   "Richmond10E65HP4D"
          case  200341   :   "Richmond10E80HP4D"
          case  200421   :   "Richmond12E50HP"
          case  200534   :   "Richmond12E80HP"
          case  200621   :   "RichmondHB50RM"
          case  200742   :   "Richmond10E50HP4D15"
          case  200843   :   "Richmond10E65HP4D15"
          case  200944   :   "Richmond10E80HP4D15"
          case  213359   :   "RuudHPLD401RU"
          case  213460   :   "RuudHPLD501RU"
          case  213561   :   "RuudHPLD651RU"
          case  213662   :   "RuudHPLD801RU"
          case  211359   :   "RuudPROUH40T2RU37515"
          case  211460   :   "RuudPROUH50T2RU37515"
          case  211561   :   "RuudPROUH65T2RU37515"
          case  211662   :   "RuudPROUH80T2RU37515"
          case  211759   :   "RuudPROUH40T2RU37530"
          case  211860   :   "RuudPROUH50T2RU37530"
          case  211961   :   "RuudPROUH65T2RU37530"
          case  212062   :   "RuudPROUH80T2RU37530"
          case  212159   :   "RuudPROUH40T2RU375SO"
          case  212260   :   "RuudPROUH50T2RU375SO"
          case  212361   :   "RuudPROUH65T2RU375SO"
          case  212462   :   "RuudPROUH80T2RU375SO"
          case  212563   :   "RuudPROH40T2RU310BM"
          case  212664   :   "RuudPROH50T2RU310BM"
          case  212765   :   "RuudPROH65T2RU310BM"
          case  212866   :   "RuudPROH80T2RU310BM"
          case  212963   :   "RuudPROH40T2RU310UM"
          case  213064   :   "RuudPROH50T2RU310UM"
          case  213165   :   "RuudPROH65T2RU310UM"
          case  213266   :   "RuudPROH80T2RU310UM"
          case  210121   :   "RuudHB50RU"
          case  210221   :   "RuudPROUH50RU245"
          case  210339   :   "RuudPROUH50RU350D"
          case  210440   :   "RuudPROUH65RU350D"
          case  210534   :   "RuudPROUH80RU245"
          case  210641   :   "RuudPROUH80RU350D"
          case  210742   :   "RuudPROUH50RU350D15"
          case  210839   :   "RuudPROUH50RU350DCB"
          case  210943   :   "RuudPROUH65RU350D15"
          case  211040   :   "RuudPROUH65RU350DCB"
          case  211144   :   "RuudPROUH80RU350D15"
          case  211241   :   "RuudPROUH80RU350DCB"
          case  220116   :   "SandenGS3_SAN43SSAQA"
          case  220216   :   "SandenGS3_GAUS160QTA"
          case  220317   :   "SandenGS3_SAN83SSAQA"
          case  220417   :   "SandenGS3_GAUS315EQTD"
          case  220517   :   "SandenGUS_SAN83SSAQA"
          case  220617   :   "SandenGUS_GAUS315EQTD"
          case  230112   :   "StateEP680DHPT"
          case  230211   :   "StateEPX60DHPT"
          case  230312   :   "StateEPX80DHPT"
          case  230413   :   "StateHP650DHPT"
          case  230514   :   "StateHP666DHPT"
          case  230615   :   "StateHP680DHPT"
          case  230713   :   "StateHPX50DHPT"
          case  230813   :   "StateHPX50DHPTNE"
          case  231313   :   "StateHPX50DHPTDR"
          case  230914   :   "StateHPX66DHPT"
          case  231014   :   "StateHPX66DHPTNE"
          case  231414   :   "StateHPX66DHPTDR"
          case  231115   :   "StateHPX80DHPT"
          case  231215   :   "StateHPX80DHPTNE"
          case  231515   :   "StateHPX80DHPTDR"
          case  240122   :   "Stiebel58A220E"
          case  240212   :   "Stiebel80A300"
          case  250112   :   "USCraftmasterHPE2F80U"
          case  250211   :   "USCraftmasterHPE2K60"
          case  250312   :   "USCraftmasterHPE2K80"
          case  250413   :   "USCraftmasterHPHE2F50U"
          case  250514   :   "USCraftmasterHPHE2F66U"
          case  250615   :   "USCraftmasterHPHE2F80U"
          case  250713   :   "USCraftmasterHPHE2K50UN"
          case  250814   :   "USCraftmasterHPHE2K66UN"
          case  250915   :   "USCraftmasterHPHE2K80UN"
          case  260111   :   "WhirlpoolHPE2K60"
          case  260212   :   "WhirlpoolHPE2K80"
          case  260313   :   "WhirlpoolHPHE2K50"
          case  260413   :   "WhirlpoolHPHE2K50C"
          case  260513   :   "WhirlpoolHPHE2K50N"
          case  260614   :   "WhirlpoolHPHE2K66"
          case  260714   :   "WhirlpoolHPHE2K66C"
          case  260815   :   "WhirlpoolHPHE2K80"
          case  260915   :   "WhirlpoolHPHE2K80C"
          case  261032   :   "WhirlpoolHPSE2K50"
          case  261132   :   "WhirlpoolHPSE2K50C"
          case  261212   :   "WhirlpoolHPSE2K80"
          case  261312   :   "WhirlpoolHPSE2K80C"
          case  990138   :   "WhirlpoolHPSE2K50"
          case  990273   :   "Tier3Generic40"     ; SAC 06/17/21    ; updated to new schema enums - SAC 10/02/21
          case  990374   :   "Tier3Generic50"
          case  990475   :   "Tier3Generic65"
          case  990576   :   "Tier3Generic80"
          default  :  UNDEFINED
      endswitch
					      else  UNDEFINED
					      endif
					endif endif endif  }
    "Set DHWHeater:CF1R_WaterHeatersRow:T11_HeatPumpWaterHeaterModel - round 3 ComProduct" DHWHeater:CF1R_WaterHeatersRow:T11_HeatPumpWaterHeaterModel  =      ; SAC 02/20/21 (tic #1260)
			   {  if (LocalStatus( CF1R_WaterHeatersRow:T11_HeatPumpWaterHeaterModel ) > 0) then  UNCHANGED
			      else if (IfValidAnd( HeaterElementType = 5 )==0) then  UNCHANGED
					else if (IfValidAnd( HPWH_ComProduct > 0.5 )==0 .OR. HPWHComModel < 3 .OR.
								IfValidAnd( ASHPType > 0 )==0) then  UNCHANGED
					else	switch( HPWHComModel )
                        case  110172  :  "AOSmithCAHP120"
                        default       :  UNCHANGED
                     endswitch  endif endif endif  }

    "Set DHWHeater:CF1R_WaterHeatersRow:T11a_HeatPumpWaterHeaterSimulationGroup" DHWHeater:CF1R_WaterHeatersRow:T11a_HeatPumpWaterHeaterSimulationGroup  =     ; SAC 02/20/21 (tic #1260)
			   {  if (IfValidAnd( HeaterElementType = 5 )==0) then  UNDEFINED
					else if ((IfValidAnd( HPWH_NEEARated > 0.5 )==0 .AND. IfValidAnd( HPWH_ComProduct > 0.5 )==0) .OR.
								IfValidAnd( ASHPType > 0 )==0) then  UNDEFINED
                    else  
                                switch( EnumString( ASHPType ) )
                                    case "AO Smith PHPT 60" :  "AOSmithPHPT60"
                                    case "AO Smith PHPT 80" :  "AOSmithPHPT80"
                                    case "AO Smith HPTU 50" :  "AOSmithHPTU50"
                                    case "AO Smith HPTU 66" :  "AOSmithHPTU66"
                                    case "AO Smith HPTU 80" :  "AOSmithHPTU80"
                                    case "AO Smith SHPT 50" :  "AOSmithSHPT50"
                                    case "AO Smith SHPT 66" :  "AOSmithSHPT66"
                                    case "AO Smith SHPT 80" :  "AOSmithSHPT80"
                                    case "GE2014 50"        :  "GE201450"
                                    case "GE2014 80"        :  "GE201480"
                                    case "GE2014 80 Eff DR" :  "GE201480EffDR"
                                    case "Sanden 40"        :  "Sanden40"
                                    case "Sanden 80"        :  "Sanden80"
                                    case "Stiebel 220E"     :  "Stiebel220E"
                                 ;   case "GE2012 50"        :  "GE201250"
                                    case "GE2012 50"        :  "AOSmithSHPT50"     ; SAC 5/28/19
                                    case "AWHSTier3Generic40" :  "AWHSTier3Generic40"  ; SAC 06/17/21
                                    case "AWHSTier3Generic50" :  "AWHSTier3Generic50"
                                    case "AWHSTier3Generic65" :  "AWHSTier3Generic65"
                                    case "AWHSTier3Generic80" :  "AWHSTier3Generic80"
                                    case "Rheem HB 50"      :  "RheemHB50"          ; added missing mapping to 'RheemHB50' - SAC 06/04/21
                                    case "Rheem HBDR-45-50" :  "RheemHBDR4550"
                                    case "Rheem HBDR-45-65" :  "RheemHBDR4565"
                                    case "Rheem HBDR-45-80" :  "RheemHBDR4580"
                                    case "Rheem HBDR-22-50" :  "RheemHBDR2250"
                                    case "Rheem HBDR-22-65" :  "RheemHBDR2265"      ; fixed errant mapping - SAC 06/04/21
                                    case "Rheem HBDR-22-80" :  "RheemHBDR2280"      ; fixed errant mapping - SAC 06/04/21
                                    case "Colmac CxV-5"     :  "ColmacCxV5_SP"         ; SAC 6/16/20 - large central HPWH additions
                                    case "Colmac CxA-10"    :  "ColmacCxA10_SP"  
                                    case "Colmac CxA-15"    :  "ColmacCxA15_SP"  
                                    case "Colmac CxA-20"    :  "ColmacCxA20_SP"  
                                    case "Colmac CxA-25"    :  "ColmacCxA25_SP"  
                                    case "Colmac CxA-30"    :  "ColmacCxA30_SP"  
                                    case "Nyle C25A"        :  "NyleC25A_SP"   
                                    case "Nyle C60A"        :  "NyleC60A_SP"   
                                    case "Nyle C90A"        :  "NyleC90A_SP"   
                                    case "Nyle C125A"       :  "NyleC125A_SP"  
                                    case "Nyle C185A"       :  "NyleC185A_SP"  
                                    case "Nyle C250A"       :  "NyleC250A_SP"  
                                    case "Nyle C60A-CWP"    :  "NyleC60A_CWP_SP"       ; SAC 6/23/20 - added cold wthr package presets
                                    case "Nyle C90A-CWP"    :  "NyleC90A_CWP_SP" 
                                    case "Nyle C125A-CWP"   :  "NyleC125A_CWP_SP"
                                    case "Nyle C185A-CWP"   :  "NyleC185A_CWP_SP"
                                    case "Nyle C250A-CWP"   :  "NyleC250A_CWP_SP"
                                    case "Sanden GS3-45HPA-US"     :  "SandenGS3"
                                    case "Bradford White 2020 65"  :  "BWC202065"         ; SAC 6/16/20 - NEEA additions
                                    case "Rheem 2020 Premium 40"   :  "Rheem2020Prem40" 
                                    case "Rheem 2020 Premium 50"   :  "Rheem2020Prem50" 
                                    case "Rheem 2020 Premium 65"   :  "Rheem2020Prem65" 
                                    case "Rheem 2020 Premium 80"   :  "Rheem2020Prem80" 
                                    case "Rheem 2020 Builder 40"   :  "Rheem2020Build40"
                                    case "Rheem 2020 Builder 50"   :  "Rheem2020Build50"
                                    case "Rheem 2020 Builder 65"   :  "Rheem2020Build65"
                                    case "Rheem 2020 Builder 80"   :  "Rheem2020Build80"
                                    case "AO Smith CAHP-120"       :  "AOSmithCAHP120"    ; SAC 02/20/21 (tic #1260)
                                    default  :  UNDEFINED
                                endswitch
                    endif endif  }
    ; SAC 10/29/19 - added mappings for Attic and cases where AmbientCond is collected but not TankLocation (tic #1134)
    "Set DHWHeater:CF1R_WaterHeatersRow:T12_TankLocation" DHWHeater:CF1R_WaterHeatersRow:T12_TankLocation  =   ; SAC 9/10/19 - OtherZone (MFamProto)   ; SAC 02/20/21
	   {  if (IfValidAnd( ShowTankLocation > 0 )==0)
	      then  if (IfValidAnd( HeaterType = 7 ) .OR. IfValidAnd( HeaterType = 1 ))
	            then  switch (AmbientCond)
                        case  1  :  "Unconditioned"  ; "Unconditioned"
                        default  :  "Conditioned"  
	                  endswitch
	            else  UNDEFINED  endif
	      else if (IfValidAnd( TankOutside > 0.5 )) then  "Outside"
			else if (LocalCompAssigned( TankZone ) == ComponentType( "Garage"    )) then  "Garage"
			else if (LocalCompAssigned( TankZone ) == ComponentType( "Zone"      )) then  "Conditioned"
			else if (LocalCompAssigned( TankZone ) == ComponentType( "OtherZone" ))
         then  if (IfValidAnd( TankZone:Type >= 10 ))
               then  "Unconditioned"
               else  "Conditioned"  endif
			else if (LocalCompAssigned( TankZone ) == ComponentType( "Attic" ))
			then  if (IfValidAnd( TankZone:Type >= 0 ))
			      then  switch (TankZone:Type)
			               case  1 :  "Conditioned"   ; "Unventilated"
			               default :  "Unconditioned"
			            endswitch
			      else  "Unconditioned"  endif
			else  UNDEFINED  endif endif endif endif endif endif  }

    "Set DHWHeater:CF1R_WaterHeatersRow:T13_StatusEAA" DHWHeater:CF1R_WaterHeatersRow:T13_StatusEAA  =         ; SAC 8/5/19 - tic #1118
      {  if (ResProj:RunScope = 1 .AND. IfValidAnd( ResProj:IsAddAlone != 0 )==0)   ; new construction
         then  UNDEFINED
         else if (IsNew)
         then  "New"  
         else if (IsExisting)
         then  "Existing"
         else if (IsAltered)
         then  "Altered"
         else  UNDEFINED   ; error?
         endif endif endif endif  }
    "Set DHWHeater:CF1R_WaterHeatersRow:T14_VerifiedExistingCondition" DHWHeater:CF1R_WaterHeatersRow:T14_VerifiedExistingCondition  =    ; SAC 8/5/19 - tic #1118
      {  if (ResProj:RunScope = 1)   ; new construction
         then  UNDEFINED
         else if (IsNew)
         then  "n/a"
         else if (SumRevRef( DHWSys:DHWHeater, DHWSys:IsAltVerif ) > 0)
         then  "Yes"
         else  "No"
         endif endif endif  }

  ; ----------------------------------------------------------------------
  ; Rules to create individual Water Heater table rows based on HVACSys-defined heaters  - SAC 10/29/19 (tic #1134)
; RJH 20200123 - remove filter to include all water heaters with FloorAreaServed > 0 per Ticket#1190
   "Create cf1rtblRowWaterHeaters for applicable HVACSys instances"
      HVACSys:CF1R_WaterHeatersRow   = {   if (IfValidAnd( TypeOK > 0 ) .AND. IfValidAnd( HtEqpCanBeDHWHtr > 0 ) .AND. IfValidAnd( ServesAsDHWHtr > 0 ) .AND.
                                               IfValidAnd( DHWFloorAreaServed > 0 ) )
                                             then  CreateComp( cf1rtblRowWaterHeaters, Name + "WaterHeaterRow" )
                                             else  UNDEFINED  endif  }

   ; ----------------------------------------------------------------------
   ; Rules to populate Water Heater table rows for all applicable HVACSys instances
    "Set HVACSys:CF1R_WaterHeatersRow:T01_WaterHeaterName" HVACSys:CF1R_WaterHeatersRow:T01_WaterHeaterName  = {  Name  }
    ; switched reporting of Air-Source and Ground-Source HPs from "HeatPumpWaterHeater" to "WaterHeatingHP" (for consistency w/ other HPWHs) (tic #1256)
	 "Set HVACSys:CF1R_WaterHeatersRow:T02_WaterHeaterFuelSource" HVACSys:CF1R_WaterHeatersRow:T02_WaterHeaterFuelSource  =
      {  switch (DHWHeaterElementType)
            case  0 :  "Electricity"   ; "Electric Resistance" 
            case  1 :  ; "Natural Gas"   
                        if (EnumString(ResProj:GasType) = "Natural Gas") 
                        then "NaturalGas" 
                        else "PropaneGas" endif
            case  3 :  "WaterHeatingHP"   ; "Air-Source Heat Pump"           
            case  6 :  "WaterHeatingHP"   ; "Ground-Source Heat Pump"           
            default :  UNDEFINED
         endswitch  }

    "Set HVACSys:CF1R_WaterHeatersRow:T03_ResidentialWaterHeaterType" HVACSys:CF1R_WaterHeatersRow:T03_ResidentialWaterHeaterType  =    ; SAC 5/27/19 - update for (tic #1096)
      {  switch( EnumString( DHWTankType ) )
			   case "Boiler"                :  "BoilerWaterHeater"
			   case "Indirect"              :  "IndirectWaterHeating"
			   case "Large Instantaneous"   :  "InstantaneousLarge"
			   case "Large Storage"         :  "StorageLarge"
			   case "Small Instantaneous"   :  "InstantaneousSmall"
			   case "Small Storage"         :  "StorageSmall"
			   default                      :  UNDEFINED
			endswitch  }
    "Set HVACSys:CF1R_WaterHeatersRow:T03_NotApplicableMessage" HVACSys:CF1R_WaterHeatersRow:T03_NotApplicableMessage  = { if ( LocalStatus ( CF1R_WaterHeatersRow:T03_ResidentialWaterHeaterType ) < 1 ) then "n/a" else UNDEFINED endif  }

    "Set HVACSys:CF1R_WaterHeatersRow:T04_WaterHeaterCount" HVACSys:CF1R_WaterHeatersRow:T04_WaterHeaterCount  = {  SumRevRef( DHWSysRpt:DHWHeaterRef, DHWSysRpt:DHWHeaterCnt )  }
    "Set HVACSys:CF1R_WaterHeatersRow:T05_StorageCapacity" HVACSys:CF1R_WaterHeatersRow:T05_StorageCapacity  = {  
                        if ( LocalStatus(DHWTankVolume) < 1 ) then UNDEFINED
						      else atof( Format( "%.2f", DHWTankVolume ) )
						      endif  }
    "Set HVACSys:CF1R_WaterHeatersRow:T05_NotApplicableMessage" HVACSys:CF1R_WaterHeatersRow:T05_NotApplicableMessage  = {
         if ( LocalStatus ( CF1R_WaterHeatersRow:T05_StorageCapacity ) < 1 ) then "n/a" else UNDEFINED endif  }

    "Set HVACSys:CF1R_WaterHeatersRow:T06a_EfficiencyType" HVACSys:CF1R_WaterHeatersRow:T06a_EfficiencyType  =
      {  switch (DHWHeaterElementType)
            case  0 :  "EnergyFactor"   ; "Electric Resistance" 
            case  1 :  "AFUE"           ; "Natural Gas"   
            case  3 :  "EnergyFactor"   ; "Air-Source Heat Pump"           
            case  6 :  "EnergyFactor"   ; "Ground-Source Heat Pump"           
            default :  UNDEFINED
         endswitch  }
   ; "Set HVACSys:CF1R_WaterHeatersRow:" HVACSys:CF1R_WaterHeatersRow:T06_NEEA_Rated  =       ; SAC 5/26/19 - added per e-mail from RAS
   ;   {  if (IfValidAnd( HeaterElementType = 5 ) .AND. IfValidAnd( HPWH_NEEARated > 0.5 ) .AND.
   ;          IfValidAnd( ASHPType > 0 )) then  "NEEA"  else  UNDEFINED  endif  }

    "Set HVACSys:CF1R_WaterHeatersRow:T06_WaterHeaterAFUE" HVACSys:CF1R_WaterHeatersRow:T06_WaterHeaterAFUE  = {
                        if (IfValidAnd( CF1R_WaterHeatersRow:T06a_EfficiencyType = "AFUE" ) .AND.
                            IfValidAnd( DHWEnergyFactor > 0 ))
								then  atof( Format( "%.3f", DHWEnergyFactor ) )
								else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_WaterHeatersRow:T06_EnergyFactor" HVACSys:CF1R_WaterHeatersRow:T06_EnergyFactor  = {
                        if (IfValidAnd( CF1R_WaterHeatersRow:T06a_EfficiencyType = "EnergyFactor" ) .AND.
                            IfValidAnd( DHWEnergyFactor > 0 ))
                        then  atof( Format( "%.2f", DHWEnergyFactor ) )
                        else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_WaterHeatersRow:T06_UniformEnergyFactor" HVACSys:CF1R_WaterHeatersRow:T06_UniformEnergyFactor  = {
                        if (IfValidAnd( CF1R_WaterHeatersRow:T06a_EfficiencyType = "UniformEnergyFactor" ) .AND.
                            IfValidAnd( DHWEnergyFactor > 0 ))
                        then  atof( Format( "%.2f", DHWEnergyFactor ) )
                        else  UNDEFINED  endif  }
   ; "Set HVACSys:CF1R_WaterHeatersRow:T06_EfficiencyType"    HVACSys:CF1R_WaterHeatersRow:T06_EfficiencyType  = 
   ;   {                 if (IfValidAnd( T06a_EfficiencyType = "NEEA" ))
   ;                     then  "NEEA"
   ;                     else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_WaterHeatersRow:T06_ThermalEfficiency" HVACSys:CF1R_WaterHeatersRow:T06_ThermalEfficiency  = {
                        if (IfValidAnd( CF1R_WaterHeatersRow:T06a_EfficiencyType = "ThermalEfficiency" ) .AND.
                            IfValidAnd( DHWEnergyFactor > 0 ))
                        then  atof( Format( "%.2f", DHWEnergyFactor ) )
                        else  UNDEFINED  endif  }

    "Set HVACSys:CF1R_WaterHeatersRow:T07a_WaterHeaterRatedInputUnits" HVACSys:CF1R_WaterHeatersRow:T07a_WaterHeaterRatedInputUnits  =
      {  switch (DHWHeaterElementType)
            case  0 :  "kW"     ; "Electric Resistance" 
            case  1 :  "BtuHr"  ; "Natural Gas"   
            case  3 :  UNDEFINED   ; "Air-Source Heat Pump"           
            case  6 :  UNDEFINED   ; "Ground-Source Heat Pump"           
            default :  UNDEFINED
         endswitch  }
    "Set HVACSys:CF1R_WaterHeatersRow:T07_WaterHeaterElectricFiredRatedInput" HVACSys:CF1R_WaterHeatersRow:T07_WaterHeaterElectricFiredRatedInput  =
      {  switch (DHWHeaterElementType)
            case  0 :  ; "Electric Resistance" 
                        if (IfValidAnd( DHWInputRating > 0 )) then  DHWInputRating/1000
                        else  UNDEFINED  endif
            default :  UNDEFINED
         endswitch  }
    "Set HVACSys:CF1R_WaterHeatersRow:T07_WaterHeaterGasFiredRatedInput" HVACSys:CF1R_WaterHeatersRow:T07_WaterHeaterGasFiredRatedInput  =
      {  switch (DHWHeaterElementType)
            case  1 :  ; "Natural Gas"   
                        if (IfValidAnd( DHWInputRating > 0 )) then  DHWInputRating
                        else  UNDEFINED  endif
            default :  UNDEFINED
         endswitch  }
    "Set HVACSys:CF1R_WaterHeatersRow:T07_WaterHeaterRatedInputString" HVACSys:CF1R_WaterHeatersRow:T07_WaterHeaterRatedInputString  =  
      {  switch (DHWHeaterElementType)
            case  0 :            ; (watts)   "Electric Resistance" 
                     if (LocalStatus( CF1R_WaterHeatersRow:T07_WaterHeaterElectricFiredRatedInput ) < 1) then  UNDEFINED
                     else  switch (EnumString( DHWTankType ))
                              case  "Large Instantaneous" :  Format(  "> %.0f kW", CF1R_WaterHeatersRow:T07_WaterHeaterElectricFiredRatedInput ) 
                              case  "Large Storage"       :  Format(  "> %.0f kW", CF1R_WaterHeatersRow:T07_WaterHeaterElectricFiredRatedInput ) 
                              default                     :  Format( "<= %.0f kW", CF1R_WaterHeatersRow:T07_WaterHeaterElectricFiredRatedInput )   ; "Small Instantaneous" / "Small Storage" 
                           endswitch  endif
            case  1 :            ; (Btu/hr)  "Natural Gas"   
                     if (LocalStatus( CF1R_WaterHeatersRow:T07_WaterHeaterGasFiredRatedInput ) < 1) then  UNDEFINED
                     else  switch (EnumString( DHWTankType ))
                              case  "Large Instantaneous" :  Format(  "> %.0f kBtu/hr", CF1R_WaterHeatersRow:T07_WaterHeaterGasFiredRatedInput/1000 ) 
                              case  "Large Storage"       :  Format(  "> %.0f kBtu/hr", CF1R_WaterHeatersRow:T07_WaterHeaterGasFiredRatedInput/1000 ) 
                              default                     :  Format( "<= %.0f kBtu/hr", CF1R_WaterHeatersRow:T07_WaterHeaterGasFiredRatedInput/1000 )   ; "Boiler" / "Indirect" / "Small Instantaneous" / "Small Storage"
                           endswitch  endif
            case  3 :            ; "Air-Source Heat Pump"  
                     "<= 12 kW"
                     ;if (IfValidAnd( DHWInputRating > 0 )==0) then  UNDEFINED
                     ;else  Format( "<= %.0f kW", DHWInputRating/1000 )  endif
            case  6 :            ; "Ground-Source Heat Pump"           
                     "<= 12 kW"
                     ;if (IfValidAnd( DHWInputRating > 0 )==0) then  UNDEFINED
                     ;else  Format( "<= %.0f kW", DHWInputRating/1000 )  endif
            default :   UNCHANGED
         endswitch  }

    "Set HVACSys:CF1R_WaterHeatersRow:T08_ExteriorTankInsulation" HVACSys:CF1R_WaterHeatersRow:T08_ExteriorTankInsulation  = {
                  if (IfValidAnd( DHWExtInsulRVal >= 0 )==0) then  UNDEFINED
                  else  DHWExtInsulRVal  endif  }
    "Set HVACSys:CF1R_WaterHeatersRow:T08_NotApplicableMessage" HVACSys:CF1R_WaterHeatersRow:T08_NotApplicableMessage  = { if ( LocalStatus ( CF1R_WaterHeatersRow:T08_ExteriorTankInsulation ) < 1 ) then "n/a" else UNDEFINED endif  }
    "Set HVACSys:CF1R_WaterHeatersRow:T09_WaterHeaterStandbyLossFraction" HVACSys:CF1R_WaterHeatersRow:T09_WaterHeaterStandbyLossFraction  = {
                  UNDEFINED  }
             ;     if (IfValidAnd( StandbyLossFrac > 0 ) .AND. (HeaterType = 3 .OR. HeaterType = 13))
             ;     then  FltToStr( StandbyLossFrac )
             ;     else if (IfValidAnd( RecovEff > 0 ) .AND. (DispUEFRecovEff > 0 .OR. (CanBeCHWHeater > 0 .AND. HeaterType != 8 .AND. HeaterType < 9 .AND. HeaterElementType != 5)))
             ;     then  FltToStr( RecovEff )
             ;     else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_WaterHeatersRow:T09_NotApplicableMessage" HVACSys:CF1R_WaterHeatersRow:T09_NotApplicableMessage  = { if ( LocalStatus ( CF1R_WaterHeatersRow:T09_WaterHeaterStandbyLossFraction ) < 1 ) then "n/a" else UNDEFINED endif  }

    "Set HVACSys:CF1R_WaterHeatersRow:T10_WaterHeaterFirstHourRating" HVACSys:CF1R_WaterHeatersRow:T10_WaterHeaterFirstHourRating  = {
                  UNDEFINED  }
             ;     if (IfValidAnd( FirstHourRating > 0 ) .AND. (IsUEFHtPump = 1 .OR. HeaterType = 12 .OR. HeaterType = 14))
             ;     then  FltToStr( FirstHourRating )
             ;     else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_WaterHeatersRow:T10_WaterHeaterFlowRate" HVACSys:CF1R_WaterHeatersRow:T10_WaterHeaterFlowRate  = {
                  UNDEFINED  }
             ;     if (IfValidAnd( RatedFlow > 0 ) .AND. (HeaterType = 10 .OR. HeaterType = 15))
             ;     then  FltToStr( RatedFlow )
             ;     else  UNDEFINED  endif  }

    "Set HVACSys:CF1R_WaterHeatersRow:T11_HeatPumpWaterHeaterBrand" HVACSys:CF1R_WaterHeatersRow:T11_HeatPumpWaterHeaterBrand  = {  UNDEFINED  }
    "Set HVACSys:CF1R_WaterHeatersRow:T11_HeatPumpWaterHeaterModel" HVACSys:CF1R_WaterHeatersRow:T11_HeatPumpWaterHeaterModel  = {  UNDEFINED  }
    "Set HVACSys:CF1R_WaterHeatersRow:T11a_HeatPumpWaterHeaterSimulationGroup" HVACSys:CF1R_WaterHeatersRow:T11a_HeatPumpWaterHeaterSimulationGroup  = {  UNDEFINED  }

    ; SAC 10/29/19 (tic #1134)
    "Set HVACSys:CF1R_WaterHeatersRow:T12_TankLocation" HVACSys:CF1R_WaterHeatersRow:T12_TankLocation  =
	   {  switch (DHWAmbientCond)
            case  1  :  "Unconditioned"  ; "Unconditioned"
            default  :  "Conditioned"  
	      endswitch  }

    "Set HVACSys:CF1R_WaterHeatersRow:T13_StatusEAA" HVACSys:CF1R_WaterHeatersRow:T13_StatusEAA  =         ; SAC 8/5/19 - tic #1118
      {  if (ResProj:RunScope = 1 .AND. IfValidAnd( ResProj:IsAddAlone != 0 )==0)   ; new construction
         then  UNDEFINED
         else if (IsNew)
         then  "New"  
         else if (IsExisting)
         then  "Existing"
         else if (IsAltered)
         then  "Altered"
         else  UNDEFINED   ; error?
         endif endif endif endif  }
    "Set HVACSys:CF1R_WaterHeatersRow:T14_VerifiedExistingCondition" HVACSys:CF1R_WaterHeatersRow:T14_VerifiedExistingCondition  =    ; SAC 8/5/19 - tic #1118
      {  if (ResProj:RunScope = 1)   ; new construction
         then  UNDEFINED
         else if (IsNew)
         then  "n/a"
         else if (SumRevRef( DHWSys:DHWHeater, DHWSys:IsAltVerif ) > 0)
         then  "Yes"
         else  "No"
         endif endif endif  }

  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL Water Heater table rows
   "Set cf1rtblRowWaterHeaters parent"   cf1rtblRowWaterHeaters:Parent  = { cf1rTableWaterHeaters:Name  }
  ; END of Water Heater table rules
  ; ----------------------------------------------------------------------
  ; Rule to Delete empty Section_T table
   "DELETE empty cf1rTableWaterHeaters object"
      cf1rSection_T:Action   = {  if (ComponentCount( cf1rtblRowWaterHeaters ) < 1) then  DeleteComp()  else  UNCHANGED  endif }
  ; ----------------------------------------------------------------------


  ; RJH 10/5/22 Moved Section_Tcd creation and population to NRCCPRF-Rulelists.rule to handle NRCC/LMCC Section_WaterCompact

  ; RJH 10/5/22 Moved Section_Tdw creation and population to NRCCPRF-Rulelists.rule to handle NRCC/LMCC Section_WaterDWHR


  ; ----------------------------------------------------------------------
  ; Section_Tsh Solar Water Heating Systems table
   "Create & initialize cf1rSection_Tsh object"       ; SAC 2/4/20 (tic #1198)
      cf1rCF1RPRF01E:Action  = {  if ( SumAll( DHWSolarSys:DHWSysAssigned ) > 0 )
                                  then  CreateChildren( cf1rSection_Tsh, 1, "Section_Tsh" )
                                  else  UNCHANGED
                                  endif  }
   "Create & initialize cf1rTableWaterHeatingSolar object"
      cf1rSection_Tsh:Action   = {  CreateChildren( cf1rTableWaterHeatingSolar, 1, "TableWaterHeatingSolar" )  }

   "Create & populate all WaterHeatingSolar table rows"
      cf1rSection_Tsh:Action   = {  EvalRulelist( "CF1RPRF01E_TableWaterHeatingSolar" )  }
   "Set cf1rtblRowSolarWtrHtg parent"   cf1rtblRowSolarWtrHtg:Parent  = { cf1rTableWaterHeatingSolar:Name  }
  ; END of Water Heating - Solar Water Heating Systems table rules
  ; ----------------------------------------------------------------------


  ; ----------------------------------------------------------------------
  ; Section_U WATER HEATING - HERS VERIFICATION table
   "Create & initialize new cf1rSection_U object"
      cf1rCF1RPRF01E:Action  = {  CreateChildren( cf1rSection_U, 1, "Section_U" )  }     ; no init needed
   "Create & initialize new cf1rTableWaterHeatingHERS object"
      cf1rSection_U:Action   = {  CreateChildren( cf1rTableWaterHeatingHERS, 1, "TableWaterHeatingHERS" )  }     ; no init needed
  ; ----------------------------------------------------------------------
    ; Rules to create individual WATER HEATING - HERS VERIFICATION table rows
   "Create cf1rtblRowWHtgHERS for all DHWSysRpt instances"
      DHWSysRpt:CF1R_WHtgHERSRow   = {  CreateComp( cf1rtblRowWHtgHERS, Name + "WHtgHERSRow" )  }
   ; ----------------------------------------------------------------------
   ; Rules to populate WATER HEATING - HERS VERIFICATION table rows for all DHWSysRpt instances
    "Set DHWSysRpt:CF1R_WHtgHERSRow:U01_WaterHeatingSystemName" DHWSysRpt:CF1R_WHtgHERSRow:U01_WaterHeatingSystemName  = {
         if (ResProj:IsMultiFamily < 0.5)
         then  DHWSysName
         else  Name  endif  }
    "Set DHWSysRpt:CF1R_WHtgHERSRow:U02_PipeInsulationVerificationRequired" DHWSysRpt:CF1R_WHtgHERSRow:U02_PipeInsulationVerificationRequired  = {  
         if ( HERSAllPipesIns > 0 )
         then "true"
         else "false" endif }
    "Set DHWSysRpt:CF1R_WHtgHERSRow:U03_ParallelPipingVerificationRequired" DHWSysRpt:CF1R_WHtgHERSRow:U03_ParallelPipingVerificationRequired  = {  
         if ( HERSParallelPipe > 0 )
         then "true"
         else "false" endif }
    "Set DHWSysRpt:CF1R_WHtgHERSRow:U04_CompactDistributionVerificationRequired" DHWSysRpt:CF1R_WHtgHERSRow:U04_CompactDistributionVerificationRequired  = {  
         if ( HERSCompact > 0 )
         then "true"
         else "false" endif }

    "Set DHWSysRpt:CF1R_WHtgHERSRow:U04a_CompactDistributionType" DHWSysRpt:CF1R_WHtgHERSRow:U04a_CompactDistributionType  = {
         if (LocalStatus( CompactDistribDescrip ) < 1) then  "NotCompact"
         else  switch (CompactDistribDescrip)
                  case  "Basic"    :  "BasicType"
                  case  "Expanded" :  "Expanded"
                  default          :  "NotCompact"
               endswitch  endif  }

    "Set DHWSysRpt:CF1R_WHtgHERSRow:U05_RecirculationControlVerificationRequired" DHWSysRpt:CF1R_WHtgHERSRow:U05_RecirculationControlVerificationRequired  = {  
         if ( HERSPointOfUse > 0 )
         then "true"
         else "false" endif }
    "Set DHWSysRpt:CF1R_WHtgHERSRow:U06_CentralDHW_DistributionVerificationRequired" DHWSysRpt:CF1R_WHtgHERSRow:U06_CentralDHW_DistributionVerificationRequired  = {  
         if ( HERSPushBtnRecirc > 0 .OR. HERSOccRecirc > 0 )
         then "true"
         else "false" endif }
    "Set DHWSysRpt:CF1R_WHtgHERSRow:U07_DWHR_VerificationRequired" DHWSysRpt:CF1R_WHtgHERSRow:U07_DWHR_VerificationRequired  =      ; SAC 5/2/19 - added  
      {  if ( IfValidAnd( ShwrDrnWtrHtRecovRpt = "Yes" ) )
         then "true"
         else "false" endif }
   "Set DHWSysRpt:CF1R_WHtgHERSRow:U08_ResidentialDwellingUnitName" DHWSysRpt:CF1R_WHtgHERSRow:U08_ResidentialDwellingUnitName  =      ; SAC 10/23/19 (tic #1159)    ; SAC 11/7/19 (tic #1167)
      {  if (ResProj:IsMultiFamily < 0.5 .OR. LocalCompAssigned( DwellUnitRef ) < 1) then  UNDEFINED
         else if (LocalStatus( DwellUnitRptName ) > 0)
         then  DwellUnitRptName
         else  DwellUnitRef:Name
         endif endif  }
   "Set DHWSysRpt:CF1R_WHtgHERSRow:U09_ResidentialDwellingUnitDescriptor" DHWSysRpt:CF1R_WHtgHERSRow:U09_ResidentialDwellingUnitDescriptor  =      ; SAC 10/23/19 (tic #1159)
      {  if (ResProj:IsMultiFamily < 0.5 .OR. LocalCompAssigned( DwellUnitRef ) < 1) then  UNDEFINED
         else if (IfValidAnd( DwellUnitRef:DwellUnitTypeRef:CondFlrArea > 0 )==0) then  UNDEFINED
         else  DwellUnitRef:DwellUnitTypeRef:Name  endif endif  }
   "Set DHWSysRpt:CF1R_WHtgHERSRow:U10_DomesticHotWaterSystemName" DHWSysRpt:CF1R_WHtgHERSRow:U10_DomesticHotWaterSystemName  =      ; SAC 10/23/19 (tic #1159)
      {  if (LocalCompAssigned( DHWSysRef ) < 1) then  UNDEFINED
         else  DHWSysRef:Name  endif  }

;1,           "U03_ParallelPipingVerificationRequired",         BEMP_Str,  1,  0,  1, "",                 0,  0,               555, "map from: DHWSysRpt:HERSParaPipeRptMsg"
;1,           "U04_CompactDistributionVerificationRequired",    BEMP_Str,  1,  0,  1, "",                 0,  0,               555, "map from: DHWSysRpt:HERSCompactRptMsg"
;1,           "U04a_CompactDistributionType",                   BEMP_Str,  1,  0,  1, "",                 0,  0,               555, "map from: DHWSysRpt:...  options: BasicType, Expanded, NotCompact"
;1,           "U05_RecirculationControlVerificationRequired",   BEMP_Str,  1,  0,  1, "",                 0,  0,               555, "map from: DHWSysRpt:HERSPOURptMsg"
;1,           "U06_CentralDHW_DistributionVerificationRequired",  BEMP_Str,  1,  0,  1, "",                 0,  0,               555, "map from: DHWSysRpt:HERSPushBtnRptMsg and HERSOccRptMsg"
;1,           "U07_DWHR_VerificationRequired",                  BEMP_Str,  1,  0,  1, "",                 0,  0,               555, "map from: DHWSysRpt:HERSMFNoCtrlRptMsg, HERSMFDCRptMsg, HERSMFTmpModRptMsg, HERSMFTmpModMonRptMsg "


  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL WATER HEATING - HERS VERIFICATION table rows
   "Set cf1rtblRowSpcCond parent"   cf1rtblRowWHtgHERS:Parent  = { cf1rTableWaterHeatingHERS:Name  }
  ; END of WATER HEATING - HERS VERIFICATION table rules
  ; ----------------------------------------------------------------------


  ; ----------------------------------------------------------------------
  ; Section_V Space Conditioning System table
   "Create & initialize new cf1rSection_V object"
      cf1rCF1RPRF01E:Action  = {  CreateChildren( cf1rSection_V, 1, "Section_V" )  }     ; no init needed
   "Create & initialize new cf1rTableWaterHeaters object"
      cf1rSection_V:Action   = {  CreateChildren( cf1rTableSpaceConditioning, 1, "TableSpaceConditioning" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual Space Conditioning System table rows
      ; SAC 3/7/19 - revised to only report systems that are being simulated
   "Create cf1rtblRowSpcCond for all relevant HVACSys instances (single family models only)"
      HVACSys:CF1R_SCSysRow   = {  if (ResProj:IsMultiFamily > 0 .OR. IfValidAnd( FloorAreaServed[1] > 0 )==0) then  UNDEFINED
                                   else  CreateComp( cf1rtblRowSpcCond, Name + "HVACSysRow" )  endif  }
      ; SAC 3/7/19 - added new set of rules to create cf1rtblRowSpcCond by SCSysRpt objects for MFam models
   "Create cf1rtblRowSpcCond for all relevant SCSysRpt instances (multifamily models only)"
      SCSysRpt:CF1R_SCSysRow  = {  if (ResProj:IsMultiFamily = 0) then  UNDEFINED
                                   else  CreateComp( cf1rtblRowSpcCond, Name + "SCSysRptRow" )  endif  }
   ; ----------------------------------------------------------------------
   ; Rules to populate Space Conditioning System table rows for all relevant HVACSys instances
    "Set HVACSys:CF1R_SCSysRow:V01_ResidentialSpaceConditioningSystemName" HVACSys:CF1R_SCSysRow:V01_ResidentialSpaceConditioningSystemName  = {  Name  }
    "Set HVACSys:CF1R_SCSysRow:V02_ResidentialSpaceConditioningSystemType" HVACSys:CF1R_SCSysRow:V02_ResidentialSpaceConditioningSystemType  = {
               switch( EnumString( Type ) )
                  case "Other Heating and Cooling System"                          : "HeatingCoolingSystemOther"
                  case "Heat Pump Heating and Cooling System"                      : "HeatPumpHeatingCooling"
                  case "Variable Outdoor Air Ventilation Central Heat/Cool System" : "VariableOA_VentilationCentralHeatingCooling"
                  default  :  UNDEFINED
               endswitch  }

    "Set HVACSys:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[1]" HVACSys:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[1]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 1 ) .AND. LocalCompAssigned( HtPumpSystem[1] ))
               then  HtPumpSystem[1]:Name  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumHeatSystemTypes >= 1 ) .AND. LocalCompAssigned( HeatSystem[1] ))
               then  HeatSystem[1]:Name    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[2]" HVACSys:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[2]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 2 ) .AND. LocalCompAssigned( HtPumpSystem[2] ))
               then  HtPumpSystem[2]:Name  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumHeatSystemTypes >= 2 ) .AND. LocalCompAssigned( HeatSystem[2] ))
               then  HeatSystem[2]:Name    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[3]" HVACSys:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[3]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 3 ) .AND. LocalCompAssigned( HtPumpSystem[3] ))
               then  HtPumpSystem[3]:Name  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumHeatSystemTypes >= 3 ) .AND. LocalCompAssigned( HeatSystem[3] ))
               then  HeatSystem[3]:Name    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[4]" HVACSys:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[4]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 4 ) .AND. LocalCompAssigned( HtPumpSystem[4] ))
               then  HtPumpSystem[4]:Name  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumHeatSystemTypes >= 4 ) .AND. LocalCompAssigned( HeatSystem[4] ))
               then  HeatSystem[4]:Name    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[5]" HVACSys:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[5]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 5 ) .AND. LocalCompAssigned( HtPumpSystem[5] ))
               then  HtPumpSystem[5]:Name  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumHeatSystemTypes >= 5 ) .AND. LocalCompAssigned( HeatSystem[5] ))
               then  HeatSystem[5]:Name    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[6]" HVACSys:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[6]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 6 ) .AND. LocalCompAssigned( HtPumpSystem[6] ))
               then  HtPumpSystem[6]:Name  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumHeatSystemTypes >= 6 ) .AND. LocalCompAssigned( HeatSystem[6] ))
               then  HeatSystem[6]:Name    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[7]" HVACSys:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[7]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 7 ) .AND. LocalCompAssigned( HtPumpSystem[7] ))
               then  HtPumpSystem[7]:Name  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumHeatSystemTypes >= 7 ) .AND. LocalCompAssigned( HeatSystem[7] ))
               then  HeatSystem[7]:Name    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[8]" HVACSys:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[8]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 8 ) .AND. LocalCompAssigned( HtPumpSystem[8] ))
               then  HtPumpSystem[8]:Name  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumHeatSystemTypes >= 8 ) .AND. LocalCompAssigned( HeatSystem[8] ))
               then  HeatSystem[8]:Name    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[9]" HVACSys:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[9]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 9 ) .AND. LocalCompAssigned( HtPumpSystem[9] ))
               then  HtPumpSystem[9]:Name  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumHeatSystemTypes >= 9 ) .AND. LocalCompAssigned( HeatSystem[9] ))
               then  HeatSystem[9]:Name    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[10]" HVACSys:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[10]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 10 ) .AND. LocalCompAssigned( HtPumpSystem[10] ))
               then  HtPumpSystem[10]:Name  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumHeatSystemTypes >= 10 ) .AND. LocalCompAssigned( HeatSystem[10] ))
               then  HeatSystem[10]:Name    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }

    "Set HVACSys:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[1]" HVACSys:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[1]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (LocalStatus( CF1R_SCSysRow:V03_ResidentialHeatingSystemName[1] ) > 0)
               then  CF1R_SCSysRow:V03_ResidentialHeatingSystemName[1]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumCoolSystemTypes >= 1 ) .AND. LocalCompAssigned( CoolSystem[1] ))
               then  CoolSystem[1]:Name  else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[2]" HVACSys:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[2]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (LocalStatus( CF1R_SCSysRow:V03_ResidentialHeatingSystemName[2] ) > 0)
               then  CF1R_SCSysRow:V03_ResidentialHeatingSystemName[2]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumCoolSystemTypes >= 2 ) .AND. LocalCompAssigned( CoolSystem[2] ))
               then  CoolSystem[2]:Name  else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[3]" HVACSys:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[3]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (LocalStatus( CF1R_SCSysRow:V03_ResidentialHeatingSystemName[3] ) > 0)
               then  CF1R_SCSysRow:V03_ResidentialHeatingSystemName[3]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumCoolSystemTypes >= 3 ) .AND. LocalCompAssigned( CoolSystem[3] ))
               then  CoolSystem[3]:Name  else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[4]" HVACSys:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[4]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (LocalStatus( CF1R_SCSysRow:V03_ResidentialHeatingSystemName[4] ) > 0)
               then  CF1R_SCSysRow:V03_ResidentialHeatingSystemName[4]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumCoolSystemTypes >= 4 ) .AND. LocalCompAssigned( CoolSystem[4] ))
               then  CoolSystem[4]:Name  else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[5]" HVACSys:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[5]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (LocalStatus( CF1R_SCSysRow:V03_ResidentialHeatingSystemName[5] ) > 0)
               then  CF1R_SCSysRow:V03_ResidentialHeatingSystemName[5]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumCoolSystemTypes >= 5 ) .AND. LocalCompAssigned( CoolSystem[5] ))
               then  CoolSystem[5]:Name  else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[6]" HVACSys:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[6]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (LocalStatus( CF1R_SCSysRow:V03_ResidentialHeatingSystemName[6] ) > 0)
               then  CF1R_SCSysRow:V03_ResidentialHeatingSystemName[6]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumCoolSystemTypes >= 6 ) .AND. LocalCompAssigned( CoolSystem[6] ))
               then  CoolSystem[6]:Name  else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[7]" HVACSys:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[7]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (LocalStatus( CF1R_SCSysRow:V03_ResidentialHeatingSystemName[7] ) > 0)
               then  CF1R_SCSysRow:V03_ResidentialHeatingSystemName[7]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumCoolSystemTypes >= 7 ) .AND. LocalCompAssigned( CoolSystem[7] ))
               then  CoolSystem[7]:Name  else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[8]" HVACSys:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[8]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (LocalStatus( CF1R_SCSysRow:V03_ResidentialHeatingSystemName[8] ) > 0)
               then  CF1R_SCSysRow:V03_ResidentialHeatingSystemName[8]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumCoolSystemTypes >= 8 ) .AND. LocalCompAssigned( CoolSystem[8] ))
               then  CoolSystem[8]:Name  else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[9]" HVACSys:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[9]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (LocalStatus( CF1R_SCSysRow:V03_ResidentialHeatingSystemName[9] ) > 0)
               then  CF1R_SCSysRow:V03_ResidentialHeatingSystemName[9]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumCoolSystemTypes >= 9 ) .AND. LocalCompAssigned( CoolSystem[9] ))
               then  CoolSystem[9]:Name  else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[10]" HVACSys:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[10]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (LocalStatus( CF1R_SCSysRow:V03_ResidentialHeatingSystemName[10] ) > 0)
               then  CF1R_SCSysRow:V03_ResidentialHeatingSystemName[10]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumCoolSystemTypes >= 10 ) .AND. LocalCompAssigned( CoolSystem[10] ))
               then  CoolSystem[10]:Name  else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }

    "Set HVACSys:CF1R_SCSysRow:V05_FanName" HVACSys:CF1R_SCSysRow:V05_FanName  = {
         if (IfValidAnd( TypeOK > 0 ) .AND. Type > 0 .AND. IfValidAnd( HtPumpSysType = 22 )==0 .AND.
             LocalCompAssigned( Fan ))    ; Fan input shown in UI
         then  Fan:Name
         else  UNDEFINED  endif  }
    ; RJH - 1/6/2020 Modified logic to populate NotApplicableMessage rather than set Fan.Name = "None"
    "Set HVACSys:CF1R_SCSysRow:V05_NotApplicableMessage" HVACSys:CF1R_SCSysRow:V05_NotApplicableMessage  = {
         if ( LocalStatus ( CF1R_SCSysRow:V05_FanName ) < 1 ) then "n/a" else UNDEFINED endif  }

    "Set HVACSys:CF1R_SCSysRow:V06_SpaceConditioningDistributionSystemName" HVACSys:CF1R_SCSysRow:V06_SpaceConditioningDistributionSystemName  = {
         if (IfValidAnd( TypeOK > 0 ) .AND. IfValidAnd( HtPumpSysType = 22 )==0 .AND.
             LocalCompAssigned( DistribSystem ))    ; DistribSystem input shown in UI
         then  DistribSystem:Name
         else  UNDEFINED  endif  }
    ; RJH - 1/6/2020 Modified logic to populate NotApplicableMessage rather than set DistribSystem.Name = "None"
    "Set HVACSys:CF1R_SCSysRow:V06_NotApplicableMessage" HVACSys:CF1R_SCSysRow:V06_NotApplicableMessage  = {
         if ( LocalStatus ( CF1R_SCSysRow:V06_SpaceConditioningDistributionSystemName ) < 1 ) then "n/a" else UNDEFINED endif  }

    ; replaced ResProj:StandardsVersion w/ ResProj:StdsVersionYr throughout this rule module (invalid for Com ruleset) - SAC 12/20/22
    "Set HVACSys:CF1R_SCSysRow:V07_ThermostatType" HVACSys:CF1R_SCSysRow:V07_ThermostatType  =     ; SAC 8/2/19 - added logic to set to 'n/a' for Existing systems (tic #1118)   ; SAC 8/8/19 - checks for SetbackTstatReqd (tic #1118)
      {  if ((ResProj:RunScope != 1 .OR. IfValidAnd( ResProj:IsAddAlone != 0 )) .AND. Status = 1) then  "n/a"
         else if (IfValidAnd( Type = 2 ))
         then  if (LocalCompAssigned( HtPumpSystem[1] ) < 1)
               then  "NonSetbackThermostat"  ; error
               else if (T24RHeatingEquipment:SetbackTstatReqd( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", HtPumpSystem[1]:TypeAbbrevStr ) > 0)
               then  "SetbackThermostat"
               else  "NonSetbackThermostat"  endif endif
         else if (IfValidAnd( Type != 2 ))
         then  if (LocalStatus( HeatSysTypeAbbrev ) < 1 .OR. (NumCoolSystemTypes > 0 .AND. LocalStatus( CoolSysTypeAbbrev ) < 1))
               then  "NonSetbackThermostat"  ; error
               else if (T24RHeatingEquipment:SetbackTstatReqd( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", HeatSysTypeAbbrev ) > 0)
               then  "SetbackThermostat"
               else if (NumCoolSystemTypes < 1 .OR. LocalStatus( CoolSysTypeAbbrev ) < 1)
               then  "NonSetbackThermostat"
               else if (T24RCoolingEquipment:SetbackTstatReqd( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", CoolSysTypeAbbrev ) > 0)
               then  "SetbackThermostat"
               else  "NonSetbackThermostat"  endif endif endif endif
         else  "NonSetbackThermostat"  endif endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V08_StatusEAA" HVACSys:CF1R_SCSysRow:V08_StatusEAA  =      ; SAC 4/24/19  ; SAC 5/20/19 - revised again adding ExistingPlusNew RJH 20190716 removed ExistingPlusNew
      {  if (ResProj:RunScope == 1 .AND. IfValidAnd( ResProj:IsAddAlone != 0 )==0) then  "New"  ; RJH 20190707 - added logic to test IsAddAlone
         else if (IfValidAnd( TypeOK > 0 ) .AND. HtPumpSysType != 22 .AND.
                  Status = 1 .AND. IfValidAnd( DistribSystem:Status = 4 ))
         then  "Existing"   ; RJH 20190716 - modified to restrict options to Existing, Altered, and New based on Tickets 1124 and 1136
         else  switch ( Status )
                  case  1 :  "Existing"
                  case  2 :  "Altered"
                  case  3 :  "New"
                  default :  UNDEFINED
               endswitch  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V09_VerifiedExistingCondition" HVACSys:CF1R_SCSysRow:V09_VerifiedExistingCondition  =      ; SAC 4/24/19
      {  if (ResProj:RunScope == 1) then  "NA"
         else if (ResProj:RunScope == 2 .AND. Status == 2 .AND. IsVerified > 0) then  "Yes"
         else  "No"  endif endif  }

    ; RJH 10/24/19 - Need implementation for V10_ResidentialSpaceConditioningSystemName

      ; RJH 10/24/19 - V11_ResidentialHeatingSystemCount added for Ticket #1152
    "Set HVACSys:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[1]" HVACSys:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[1]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 1 ))
               then  HtPumpSystemCount[1]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumHeatSystemTypes >= 1 ))
               then  HeatSystemCount[1]    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[2]" HVACSys:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[2]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 2 ))
               then  HtPumpSystemCount[2]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumHeatSystemTypes >= 2 ))
               then  HeatSystemCount[2]    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[3]" HVACSys:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[3]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 3 ))
               then  HtPumpSystemCount[3]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumHeatSystemTypes >= 3 ))
               then  HeatSystemCount[3]    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[4]" HVACSys:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[4]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 4 ))
               then  HtPumpSystemCount[4]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumHeatSystemTypes >= 4 ))
               then  HeatSystemCount[4]    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[5]" HVACSys:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[5]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 5 ))
               then  HtPumpSystemCount[5]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumHeatSystemTypes >= 5 ))
               then  HeatSystemCount[5]    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[6]" HVACSys:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[6]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 6 ))
               then  HtPumpSystemCount[6]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumHeatSystemTypes >= 6 ))
               then  HeatSystemCount[6]    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[7]" HVACSys:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[7]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 7 ))
               then  HtPumpSystemCount[7]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumHeatSystemTypes >= 7 ))
               then  HeatSystemCount[7]    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[8]" HVACSys:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[8]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 8 ))
               then  HtPumpSystemCount[8]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumHeatSystemTypes >= 8 ))
               then  HeatSystemCount[8]    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[9]" HVACSys:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[9]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 9 ))
               then  HtPumpSystemCount[9]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumHeatSystemTypes >= 9 ))
               then  HeatSystemCount[9]    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[10]" HVACSys:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[10]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 10 ))
               then  HtPumpSystemCount[10]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumHeatSystemTypes >= 10 ))
               then  HeatSystemCount[10]    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }

      ; RJH 10/24/19 - V12_ResidentialCoolingSystemCount added for Ticket #1152
    "Set HVACSys:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[1]" HVACSys:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[1]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 1 ))
               then  HtPumpSystemCount[1]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumCoolSystemTypes >= 1 ))
               then  CoolSystemCount[1]    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[2]" HVACSys:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[2]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 2 ))
               then  HtPumpSystemCount[2]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumCoolSystemTypes >= 2 ))
               then  CoolSystemCount[2]    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[3]" HVACSys:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[3]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 3 ))
               then  HtPumpSystemCount[3]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumCoolSystemTypes >= 3 ))
               then  CoolSystemCount[3]    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[4]" HVACSys:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[4]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 4 ))
               then  HtPumpSystemCount[4]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumCoolSystemTypes >= 4 ))
               then  CoolSystemCount[4]    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[5]" HVACSys:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[5]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 5 ))
               then  HtPumpSystemCount[5]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumCoolSystemTypes >= 5 ))
               then  CoolSystemCount[5]    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[6]" HVACSys:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[6]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 6 ))
               then  HtPumpSystemCount[6]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumCoolSystemTypes >= 6 ))
               then  CoolSystemCount[6]    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[7]" HVACSys:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[7]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 7 ))
               then  HtPumpSystemCount[7]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumCoolSystemTypes >= 7 ))
               then  CoolSystemCount[7]    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[8]" HVACSys:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[8]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 8 ))
               then  HtPumpSystemCount[8]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumCoolSystemTypes >= 8 ))
               then  CoolSystemCount[8]    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[9]" HVACSys:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[9]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 9 ))
               then  HtPumpSystemCount[9]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumCoolSystemTypes >= 9 ))
               then  CoolSystemCount[9]    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set HVACSys:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[10]" HVACSys:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[10]  = {
         if (Type == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( NumHtPumpSystemTypes >= 10 ))
               then  HtPumpSystemCount[10]  else  UNDEFINED  endif
         else if (Type > 0)
         then  if (IfValidAnd( NumCoolSystemTypes >= 10 ))
               then  CoolSystemCount[10]    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }

   ; ----------------------------------------------------------------------
   ; Rules to populate Space Conditioning System table rows for all relevant SCSysRpt instances
    "Set SCSysRpt:CF1R_SCSysRow:V01_ResidentialSpaceConditioningSystemName" SCSysRpt:CF1R_SCSysRow:V01_ResidentialSpaceConditioningSystemName  = {  Name  }
    "Set SCSysRpt:CF1R_SCSysRow:V02_ResidentialSpaceConditioningSystemType" SCSysRpt:CF1R_SCSysRow:V02_ResidentialSpaceConditioningSystemType  = {
               switch( ValidOr( SCSysTypeVal, 0 ) )
                  case 1  : "HeatingCoolingSystemOther"
                  case 2  : "HeatPumpHeatingCooling"
                  case 3  : "VariableOA_VentilationCentralHeatingCooling"
                  default  :  UNDEFINED
               endswitch  }
    "Set SCSysRpt:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[1]" SCSysRpt:CF1R_SCSysRow:V03_ResidentialHeatingSystemName[1]  = {
         if (SCSysTypeVal == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (LocalCompAssigned( HtPumpSystem ))
               then  HtPumpSystem:Name  else  UNDEFINED  endif
         else if (SCSysTypeVal > 0)
         then  if (LocalCompAssigned( HeatSystem ))
               then  HeatSystem:Name    else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
   "Set SCSysRpt:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[1]" SCSysRpt:CF1R_SCSysRow:V04_ResidentialCoolingSystemName[1]  = {
         if (SCSysTypeVal == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (LocalStatus( CF1R_SCSysRow:V03_ResidentialHeatingSystemName[1] ) > 0)
               then  CF1R_SCSysRow:V03_ResidentialHeatingSystemName[1]  else  UNDEFINED  endif
         else if (SCSysTypeVal > 0)
         then  if (LocalCompAssigned( CoolSystem ))
               then  CoolSystem:Name  else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }
    "Set SCSysRpt:CF1R_SCSysRow:V05_FanName" SCSysRpt:CF1R_SCSysRow:V05_FanName  = {
         if (SCSysTypeVal > 0 .AND. LocalCompAssigned( HVACFanRef ))
         then  HVACFanRef:Name
         else  UNDEFINED  endif  }
    ; RJH - 1/6/2020 Modified logic to populate NotApplicableMessage rather than set Fan.Name = "None"
    "Set SCSysRpt:CF1R_SCSysRow:V05_NotApplicableMessage" SCSysRpt:CF1R_SCSysRow:V05_NotApplicableMessage  = {
         if ( LocalStatus ( CF1R_SCSysRow:V05_FanName ) < 1 ) then "n/a" else UNDEFINED endif  }
    "Set SCSysRpt:CF1R_SCSysRow:V06_SpaceConditioningDistributionSystemName" SCSysRpt:CF1R_SCSysRow:V06_SpaceConditioningDistributionSystemName  = {
         if (SCSysTypeVal > 0 .AND. LocalCompAssigned( HVACDistRef ))
         then  HVACDistRef:Name
         else  UNDEFINED  endif  }
    ; RJH - 1/6/2020 Modified logic to populate NotApplicableMessage rather than set DistribSystem.Name = "None"
    "Set SCSysRpt:CF1R_SCSysRow:V06_NotApplicableMessage" SCSysRpt:CF1R_SCSysRow:V06_NotApplicableMessage  = {
         if ( LocalStatus ( CF1R_SCSysRow:V06_SpaceConditioningDistributionSystemName ) < 1 ) then "n/a" else UNDEFINED endif  }
    "Set SCSysRpt:CF1R_SCSysRow:V07_ThermostatType" SCSysRpt:CF1R_SCSysRow:V07_ThermostatType  =      ; SAC 8/2/19 - added logic to set to 'n/a' for Existing systems (tic #1118)   ; SAC 8/8/19 - checks for SetbackTstatReqd (tic #1118)
      {  if ((ResProj:RunScope != 1 .OR. IfValidAnd( ResProj:IsAddAlone != 0 )) .AND. Status = 1) then  "n/a"
         else if (IfValidAnd( SCSysTypeVal = 2 ))
         then  if (LocalStatus( HeatingType ) < 1)
               then  "NonSetbackThermostat"  ; error
               else if (T24RHeatingEquipment:SetbackTstatReqd( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", HeatingType ) > 0)
               then  "SetbackThermostat"
               else  "NonSetbackThermostat"  endif endif
         else if (IfValidAnd( SCSysTypeVal != 2 ))
         then  if (LocalStatus( HeatingType ) < 1 .OR. LocalStatus( CoolingType ) < 1)
               then  "NonSetbackThermostat"  ; error
               else if (T24RHeatingEquipment:SetbackTstatReqd( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", HeatingType ) > 0 .OR.
                        T24RCoolingEquipment:SetbackTstatReqd( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", CoolingType ) > 0)
               then  "SetbackThermostat"
               else  "NonSetbackThermostat"  endif endif
         else  "NonSetbackThermostat"  endif endif endif  }
    "Set SCSysRpt:CF1R_SCSysRow:V08_StatusEAA" SCSysRpt:CF1R_SCSysRow:V08_StatusEAA  =      ; RJH 5/6/19
      {  if (ResProj:RunScope == 1 .AND. IfValidAnd( ResProj:IsAddAlone != 0 )==0) then  "New"    ; RJH 20190707 - added logic to test IsAddAlone
         else  switch ( Status )
                  case  1 :  "Existing"
                  case  2 :  "Altered"
                  case  3 :  "New"
                  case  4 :  "Existing"   ; RJH 20190716 - modified to restrict options to Existing, Altered, and New based on Tickets 1124 and 1136
                  default :  UNDEFINED
               endswitch  endif  }

    "Set SCSysRpt:CF1R_SCSysRow:V09_VerifiedExistingCondition" SCSysRpt:CF1R_SCSysRow:V09_VerifiedExistingCondition  =      ; RJH 10/24/19
      {  if (ResProj:RunScope == 1) then  "NA"
         else  "No"  endif  }

    ; RJH 10/24/19 - Need implementation for V10_ResidentialSpaceConditioningSystemName

      ; RJH 10/24/19 - V11_ResidentialHeatingSystemCount added for Ticket #1152
    "Set SCSysRpt:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[1]" SCSysRpt:CF1R_SCSysRow:V11_ResidentialHeatingSystemCount[1]  = {
         if (SCSysTypeVal == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( RefCountByType[3] >= 1 ))
               then  RefCountByType[3]  else  UNDEFINED  endif
         else if (SCSysTypeVal > 0)
         then  if (IfValidAnd( RefCountByType[1] >= 1 ))
               then  RefCountByType[1]  else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }

      ; RJH 10/24/19 - V12_ResidentialCoolingSystemCount added for Ticket #1152
    "Set SCSysRpt:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[1]" SCSysRpt:CF1R_SCSysRow:V12_ResidentialCoolingSystemCount[1]  = {
         if (SCSysTypeVal == 2)    ; "Heat Pump Heating and Cooling System"
         then  if (IfValidAnd( RefCountByType[3] >= 1 ))
               then  RefCountByType[3]  else  UNDEFINED  endif
         else if (SCSysTypeVal > 0)
         then  if (IfValidAnd( RefCountByType[2] >= 1 ))
               then  RefCountByType[2]  else  UNDEFINED  endif
         else  UNDEFINED  endif endif  }

  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL Space Conditioning System table rows
   "Set cf1rtblRowSpcCond parent"   cf1rtblRowSpcCond:Parent  = { cf1rTableSpaceConditioning:Name  }
  ; END of Space Conditioning System table rules
  ; ----------------------------------------------------------------------

  ; ----------------------------------------------------------------------
  ; Section_W Heating Units table
      ; SAC 3/7/19 - added logic to prevent creation of Section_W if no heating units exist
   "Create & initialize new cf1rSection_W object"
      cf1rCF1RPRF01E:Action  = {  if ( SumAll( SCSysRpt:RefCountByType[1] ) > 0 ) then  CreateChildren( cf1rSection_W, 1, "Section_W" )
                                  else UNDEFINED endif }
   "Create & initialize new cf1rTableHeatingUnits object"
      cf1rSection_W:Action   = {  if ( ComponentCount( cf1rSection_W ) > 0 ) then  CreateChildren( cf1rTableHeatingUnits, 1, "TableHeatingUnits" )
                                  else UNDEFINED endif }
  ; ----------------------------------------------------------------------
  ; Rules to create individual Heating Unit table rows for SCSysRpt instances with RefCountByType[1] > 0
      ; SAC 3/7/19 - added logic to create cf1rtblRowHtgUnit by SCSysRpt only for single family models
   "Create cf1rtblRowHtgUnit for all SCSysRpt instances with non-HP Heating Units (for SFam models)"
      SCSysRpt:CF1R_HeatingUnitRow   = {  if ( ResProj:IsMultiFamily > 0 .OR. IfValidAnd( RefCountByType[1] > 0 )==0 ) then UNDEFINED
                                          else CreateComp( cf1rtblRowHtgUnit, Name + "HtgUnitRow" ) endif }
      ; SAC 3/7/19 - added rule to create cf1rtblRowHtgUnit by SCSysRpt only for multifamily models
   "Create cf1rtblRowHtgUnit for all HVACHeat instances (for MFam models)"
      HVACHeat:CF1R_HeatingUnitRow   = {  if ( ResProj:IsMultiFamily = 0 .OR. SumRevRef( SCSysRpt:HeatSystem, SCSysRpt:ReferenceCount ) < 1 ) then UNDEFINED
                                          else CreateComp( cf1rtblRowHtgUnit, Name + "HtgUnitRow" ) endif }
   ; ----------------------------------------------------------------------
   ; Rules to populate Heating Unit table rows for all SCSysRpt instances
    "Set SCSysRpt:CF1R_HeatingUnitRow:W01_ResidentialHeatingSystemName" SCSysRpt:CF1R_HeatingUnitRow:W01_ResidentialHeatingSystemName  = { 
           if ( RefCountByType[1] > 0 )
           then  HeatSystem:Name
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_HeatingUnitRow:W02_ResidentialHeatingSystemType" SCSysRpt:CF1R_HeatingUnitRow:W02_ResidentialHeatingSystemType  =     ; SAC 10/30/19 - added mappings for WallFurnaceFan & RoomHeater (tic #1150)
      {    if ( RefCountByType[1] > 0 )
           then  switch(HeatSystem:Type)
                    case 1  : "CentralGasFurnace"  ; CBECC "CntrlFurnace - Fuel-fired central furnace"
                    case 2  : "GasWallFurnace"     ; CBECC "WallFurnaceFan - Ductless fan forced wall furnace"
                    case 3  : "Boiler"             ; CBECC "Boiler - Gas or oil boiler"
                    case 8  : "Electric"           ; CBECC "Electric - All electric heating systems other than heat pump"
                    case 9  : "CombinedHydronic"   ; CBECC "CombHydro - Combined hydronic space and water heating"
                    case 14 : "GasWallFurnace"     ; CBECC "WallFurnaceGravity - Ductless gravity flowed wall furnace"
                    case 15 : "FloorFurnace"       ; CBECC "FloorFurnace - Ductless floor heating system"
                    case 16 : "GasSpaceHeater"     ; CBECC "RoomHeater - Ductless non-central space heater"
                    case 17 : "WoodHeat"           ; CBECC "WoodHeat - Wood heat meeting exceptional method criteria"
                    case 18 : "GasPackagedFurnace" ; CBECC "PkgGasFurnace"        ; RJH 7/9/20 (tic #1227)
                    default : UNDEFINED
                 endswitch
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_HeatingUnitRow:W03_HeatingUnitCount" SCSysRpt:CF1R_HeatingUnitRow:W03_HeatingUnitCount  = {  RefCountByType[1]  }
    "Set SCSysRpt:CF1R_HeatingUnitRow:W04_EfficiencyType" SCSysRpt:CF1R_HeatingUnitRow:W04_EfficiencyType  =            ; added HSPF & COP reporting - SAC 06/23/21 (tic #1273)
         { if ( RefCountByType[1] > 0 )
           then  if (     HeatEfficType == "AFUE") then  "AFUE"
                 else if (HeatEfficType == "HSPF") then  "HSPF"
                 else if (HeatEfficType == "COP" ) then  "COP"
                 else  UNDEFINED   ; no other enums...
                 endif endif endif
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_HeatingUnitRow:W04a_EfficiencyType" SCSysRpt:CF1R_HeatingUnitRow:W04a_EfficiencyType  =    ; SAC 02/10/21 (tic #1258)
      {  if (LocalStatus( CF1R_HeatingUnitRow:W04_EfficiencyType ) > 0) then  CF1R_HeatingUnitRow:W04_EfficiencyType  else  UNDEFINED  endif  }
    "Set SCSysRpt:CF1R_HeatingUnitRow:W04_EfficiencyAFUE" SCSysRpt:CF1R_HeatingUnitRow:W04_EfficiencyAFUE  = {  
           if ( RefCountByType[1] > 0 )
           then  atof( Format( "%.2f", MinHeatEffic ) )
;           then  Format( "%.2f", MinHeatEffic )
           else  UNCHANGED
           endif  }

      ; SAC 3/7/19 - added rules to populate cf1rtblRowHtgUnit by SCSysRpt only for single family models
    "Set HVACHeat:CF1R_HeatingUnitRow:W01_ResidentialHeatingSystemName" HVACHeat:CF1R_HeatingUnitRow:W01_ResidentialHeatingSystemName  = {  Name  }
    "Set HVACHeat:CF1R_HeatingUnitRow:W02_ResidentialHeatingSystemType" HVACHeat:CF1R_HeatingUnitRow:W02_ResidentialHeatingSystemType  =    ; SAC 10/30/19 - added mappings for WallFurnaceFan & RoomHeater (tic #1150)
      {          switch(Type)
                    case 1  : "CentralGasFurnace"  ; CBECC "CntrlFurnace - Fuel-fired central furnace"
                    case 2  : "GasWallFurnace"     ; CBECC "WallFurnaceFan - Ductless fan forced wall furnace"
                    case 3  : "Boiler"             ; CBECC "Boiler - Gas or oil boiler"
                    case 8  : "Electric"           ; CBECC "Electric - All electric heating systems other than heat pump"
                    case 9  : "CombinedHydronic"   ; CBECC "CombHydro - Combined hydronic space and water heating"
                    case 14 : "GasWallFurnace"     ; CBECC "WallFurnaceGravity - Ductless gravity flowed wall furnace"
                    case 15 : "FloorFurnace"       ; CBECC "FloorFurnace - Ductless floor heating system"
                    case 16 : "GasSpaceHeater"     ; CBECC "RoomHeater - Ductless non-central space heater"
                    case 17 : "WoodHeat"           ; CBECC "WoodHeat - Wood heat meeting exceptional method criteria"
                    case 18 : "GasPackagedFurnace" ; CBECC "PkgGasFurnace"        ; RJH 7/9/20 (tic #1227)
                    default : UNDEFINED
                 endswitch  }
    "Set HVACHeat:CF1R_HeatingUnitRow:W03_HeatingUnitCount" HVACHeat:CF1R_HeatingUnitRow:W03_HeatingUnitCount  = {
            SumRevRef( SCSysRpt:HeatSystem, SCSysRpt:ReferenceCount )  }
    "Set HVACHeat:CF1R_HeatingUnitRow:W04_EfficiencyType" HVACHeat:CF1R_HeatingUnitRow:W04_EfficiencyType  =      ; added HSPF & COP reporting - SAC 06/23/21 (tic #1273)
	   {  if (T24RHeatingEquipment:AFUEValid( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", TypeAbbrevStr ) > 0)
	      then  "AFUE"
	      else if (T24RHeatingEquipment:HSPFValid( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", TypeAbbrevStr ) > 0)
	      then  "HSPF"
	      else if (T24RHeatingEquipment:COP47Valid( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", TypeAbbrevStr ) > 0)
	      then  "COP"
	      else  UNDEFINED  ; no other applicable enums...
	      endif endif endif  }
    "Set HVACHeat:CF1R_HeatingUnitRow:W04a_EfficiencyType" HVACHeat:CF1R_HeatingUnitRow:W04a_EfficiencyType  =    ; SAC 02/10/21 (tic #1258)
      {  if (LocalStatus( CF1R_HeatingUnitRow:W04_EfficiencyType ) > 0) then  CF1R_HeatingUnitRow:W04_EfficiencyType  else  UNDEFINED  endif  }
    "Set HVACHeat:CF1R_HeatingUnitRow:W04_EfficiencyAFUE" HVACHeat:CF1R_HeatingUnitRow:W04_EfficiencyAFUE  = {
            atof( Format( "%.2f", MinRevRef( SCSysRpt:HeatSystem, SCSysRpt:MinHeatEffic ) ) )  }

  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL Heating Unit table rows
   "Set cf1rtblRowHtgUnit parent"   cf1rtblRowHtgUnit:Parent  = { cf1rTableHeatingUnits:Name  }
  ; END of Heating Unit table rules
  ; ----------------------------------------------------------------------

; SAC 3/8/19 - swapped Section_X & Section_Y to retain old PDF output order
  ; ----------------------------------------------------------------------
  ; Section_Y HP Units table
      ; SAC 3/7/19 - added logic to prevent creation of Section_Y if no heating units exist
   "Create & initialize new cf1rSection_Y object"
      cf1rCF1RPRF01E:Action  = {  if ( SumAll( SCSysRpt:RefCountByType[3] ) > 0 ) then  CreateChildren( cf1rSection_Y, 1, "Section_Y" )
                                  else UNDEFINED endif }
   "Create & initialize new cf1rTableHeatPumps object"
      cf1rSection_Y:Action   = {  if ( ComponentCount( cf1rSection_Y ) > 0 ) then  CreateChildren( cf1rTableHeatPumps, 1, "TableHeatPumps" )
                                  else UNDEFINED endif }
  ; ----------------------------------------------------------------------
  ; Rules to create individual HP table rows for SCSysRpt instances with RefCountByType[3] > 0
      ; SAC 3/7/19 - added logic to create cf1rtblRowHP by SCSysRpt only for single family models
   "Create cf1rtblRowHP for SCSysRpt instances with RefCountByType[3] > 0 (for single family models only)"
      SCSysRpt:CF1R_HeatPumpRow   = {  if ( ResProj:IsMultiFamily > 0 .OR. IfValidAnd( RefCountByType[3] > 0 )==0 ) then UNDEFINED
                                       else CreateComp( cf1rtblRowHP, Name + "HPRow" ) endif }
      ; SAC 3/7/19 - added rule to create cf1rtblRowHP by HVACHtPump only for multifamily models
   "Create cf1rtblRowHP for HVACHtPump instances for multifamily models"
      HVACHtPump:CF1R_HeatPumpRow = {  if ( ResProj:IsMultiFamily = 0 .OR. SumRevRef( SCSysRpt:HtPumpSystem, SCSysRpt:ReferenceCount ) < 1 ) then UNDEFINED
                                       else CreateComp( cf1rtblRowHP, Name + "HPRow" ) endif }
   ; ----------------------------------------------------------------------
   ; Rules to populate HP table rows for all SCSysRpt instances with RefCountByType[3] > 0
    "Set SCSysRpt:CF1R_HeatPumpRow:Y01_ResidentialHeatingSystemName" SCSysRpt:CF1R_HeatPumpRow:Y01_ResidentialHeatingSystemName  = { 
           if ( RefCountByType[3] > 0 )
           then  HtPumpSystem:Name
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_HeatPumpRow:Y02_ResidentialHeatingSystemType" SCSysRpt:CF1R_HeatPumpRow:Y02_ResidentialHeatingSystemType  =          ; SAC 8/6/19 - updated values for current schema enums (tic #1118)
      {    if ( RefCountByType[3] > 0 )
           then  switch(HeatingType)  ; RJH 3/23/19 - appears to use abbreviation string similar to HVACHtPump
                    case "SplitHeatPump"              : "CentralSplitHP"
                    case "SDHVSplitHeatPump"          : "SmallDuctHighVelocityHP" 
                    case "DuctlessMiniSplitHeatPump"  : "DuctlessMiniSplitHP"
                    case "DuctlessMultiSplitHeatPump" : "DuctlessMultiSplitHP"
                    case "DuctlessVRFHeatPump"        : "DuctlessVRF_HP" 
                    case "PkgHeatPump"                : "CentralPackagedHP" 
                    case "LrgPkgHeatPump"             : "CentralLargePackagedHP"
                    case "RoomHeatPump"               : "RoomHP"
                    case "AirToWaterHeatPump"         : "AirToWaterHeatPump"
                    case "GroundSourceHeatPump"       : "GroundSourceHeatPump"
					case "VCHP"                       : ( switch( EnumString( HtPumpSystem:VCHPDucts ) )                        ; RJH 4/20/2020 - updated enums for VCHP ducting differentiation (tic #1212)
																case "Unducted"          : "VCHP_IndoorUnitDuctless"
																case "Ducted"            : "VCHP_IndoorUnitDucted"
																case "Partially Ducted"  : "VCHP_IndoorUnitDuctedAndDuctless"
																default                  : "VCHP"
															endswitch  )
                    case "SglPkgVertHeatPump"         : "SPVHP"                  ; RJH 7/9/20 (tic #1226)
                    case "PkgTermHeatPump"            : "PTHP"                   ; RJH 7/9/20 (tic #1225)
                    case "DuctedMiniSplitHeatPump"    : "DuctedMiniSplitHP"      ; RJH 7/9/20 (tic #1229)
                    case "DuctedMultiSplitHeatPump"   : "DuctedMultiSplitHP"     ; RJH 7/9/20 (tic #1229)
                    case "Ducted+DuctlessMultiSplitHeatPump"   : "DuctedDuctlessMultiSplitHP"     ; RJH 7/9/20 (tic #1229)
                    default : UNDEFINED
                 endswitch
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_HeatPumpRow:Y03_HeatPumpCount" SCSysRpt:CF1R_HeatPumpRow:Y03_HeatPumpCount  = {  RefCountByType[3]  }
    "Set SCSysRpt:CF1R_HeatPumpRow:Y04a_EfficiencyType" SCSysRpt:CF1R_HeatPumpRow:Y04a_EfficiencyType  = {  
           if ( RefCountByType[3] > 0 )
           then if (HtPumpSystem:ShowHSPF > 0 .OR. HtPumpSystem:Show4717COPs > 0) 
                then  HeatEfficType
                else  UNDEFINED endif
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_HeatPumpRow:Y04a_NotApplicableMessage" SCSysRpt:CF1R_HeatPumpRow:Y04a_NotApplicableMessage  = { if ( LocalStatus ( CF1R_HeatPumpRow:Y04a_EfficiencyType ) < 1 ) then "n/a" else UNDEFINED endif  }
    "Set SCSysRpt:CF1R_HeatPumpRow:Y04_EfficiencyCOP" SCSysRpt:CF1R_HeatPumpRow:Y04_EfficiencyCOP  = {  
           if ( RefCountByType[3] > 0 )
           then  if (HeatEfficType == "COP" .AND. HtPumpSystem:Show4717COPs > 0) then  atof( Format( "%.2f", MinHeatEffic ) )
                 else  UNDEFINED  endif
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_HeatPumpRow:Y04_EfficiencyHSPF" SCSysRpt:CF1R_HeatPumpRow:Y04_EfficiencyHSPF  = {  
           if ( RefCountByType[3] > 0 )
           then  if (HeatEfficType == "HSPF" .AND. HtPumpSystem:ShowHSPF > 0) then  atof( Format( "%.2f", MinHeatEffic ) )
                 else  UNDEFINED  endif
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_HeatPumpRow:Y04_NotApplicableMessage" SCSysRpt:CF1R_HeatPumpRow:Y04_NotApplicableMessage  = { if ( LocalStatus ( CF1R_HeatPumpRow:Y04_EfficiencyCOP ) < 1 .AND. LocalStatus ( CF1R_HeatPumpRow:Y04_EfficiencyHSPF ) < 1 ) then "n/a" else UNDEFINED endif  }
    "Set SCSysRpt:CF1R_HeatPumpRow:Y05_HeatPumpHeatCapacity47F" SCSysRpt:CF1R_HeatPumpRow:Y05_HeatPumpHeatCapacity47F  = {  
           if ( RefCountByType[3] > 0 )
           then  atof( Format( "%.2f", HtPumpCap47 ) )
           else  UNCHANGED
           endif  }
    ; added logic to ensure all properties valid and > 0 before reporting (HtPumpSystem:CAP47 invalid when autosizing) - SAC 09/02/20   ; fixed COP units - SAC 09/04/20
    "Set SCSysRpt:CF1R_HeatPumpRow:Y05a_EfficiencyCOP" SCSysRpt:CF1R_HeatPumpRow:Y05a_EfficiencyCOP  = {  
           if ( RefCountByType[3] > 0 )
           then  switch(HeatingType)  ; RJH 3/23/19 - appears to use abbreviation string similar to HVACHtPump:TypeAbbrevStr
                    case "SplitHeatPump"              : UNDEFINED
                    case "SDHVSplitHeatPump"          : UNDEFINED 
                    case "DuctlessMiniSplitHeatPump"  : UNDEFINED
                    case "DuctlessMultiSplitHeatPump" : UNDEFINED
                    case "DuctlessVRFHeatPump"        : UNDEFINED 
                    case "PkgHeatPump"                : UNDEFINED 
                    case "LrgPkgHeatPump"             : UNDEFINED
                    case "RoomHeatPump"               : if (IfValidAnd( HtPumpSystem:CAP47 > 0 ) .AND. IfValidAnd( HtPumpSystem:HeatPower > 0 ))
                                                        then  atof( Format( "%.2f", HtPumpSystem:CAP47 / (HtPumpSystem:HeatPower * 3.412) ) )
                                                        else  UNDEFINED  endif
                    case "AirToWaterHeatPump"         : if (IfValidAnd( HtPumpSystem:COP47 > 0 ))
                                                        then  atof( Format( "%.2f", HtPumpSystem:COP47 ) )
                                                        else  UNDEFINED  endif
                    case "GroundSourceHeatPump"       : if (IfValidAnd( HtPumpSystem:COP47 > 0 ))
                                                        then  atof( Format( "%.2f", HtPumpSystem:COP47 ) )
                                                        else  UNDEFINED  endif
					case "VCHP"                       : UNDEFINED
                    case "SglPkgVertHeatPump"         : if (IfValidAnd( HtPumpSystem:COP47 > 0 ))
                                                        then  atof( Format( "%.2f", HtPumpSystem:COP47 ) )
                                                        else  UNDEFINED  endif
                    case "PkgTermHeatPump"            : if (IfValidAnd( HtPumpSystem:COP47 > 0 ))
                                                        then  atof( Format( "%.2f", HtPumpSystem:COP47 ) )
                                                        else  UNDEFINED  endif
                    case "DuctedMiniSplitHeatPump"    : UNDEFINED
                    case "DuctedMultiSplitHeatPump"   : UNDEFINED
                    case "Ducted+DuctlessMultiSplitHeatPump"   : UNDEFINED
                    default : UNDEFINED
                 endswitch
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_HeatPumpRow:Y06_HeatPumpHeatCapacity17F" SCSysRpt:CF1R_HeatPumpRow:Y06_HeatPumpHeatCapacity17F  = {  
           if ( RefCountByType[3] > 0 )
           then  switch(HeatingType)  ; RJH 3/23/19 - appears to use abbreviation string similar to HVACHtPump
                    case "SplitHeatPump"              : atof( Format( "%.2f", HtPumpCap17 ) )
                    case "SDHVSplitHeatPump"          : atof( Format( "%.2f", HtPumpCap17 ) ) 
                    case "DuctlessMiniSplitHeatPump"  : atof( Format( "%.2f", HtPumpCap17 ) )
                    case "DuctlessMultiSplitHeatPump" : atof( Format( "%.2f", HtPumpCap17 ) )
                    case "DuctlessVRFHeatPump"        : atof( Format( "%.2f", HtPumpCap17 ) ) 
                    case "PkgHeatPump"                : atof( Format( "%.2f", HtPumpCap17 ) ) 
                    case "LrgPkgHeatPump"             : UNDEFINED
                    case "RoomHeatPump"               : UNDEFINED   
                    case "AirToWaterHeatPump"         : atof( Format( "%.2f", HtPumpCap17 ) )
                    case "GroundSourceHeatPump"       : UNDEFINED
					case "VCHP"                       : atof( Format( "%.2f", HtPumpCap17 ) )
                    case "SglPkgVertHeatPump"         : UNDEFINED
                    case "PkgTermHeatPump"            : UNDEFINED
                    case "DuctedMiniSplitHeatPump"    : atof( Format( "%.2f", HtPumpCap17 ) )
                    case "DuctedMultiSplitHeatPump"   : atof( Format( "%.2f", HtPumpCap17 ) )
                    case "Ducted+DuctlessMultiSplitHeatPump"   : atof( Format( "%.2f", HtPumpCap17 ) )
                    default : UNDEFINED
                 endswitch
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_HeatPumpRow:Y06_NotApplicableMessage" SCSysRpt:CF1R_HeatPumpRow:Y06_NotApplicableMessage  = { if ( LocalStatus ( CF1R_HeatPumpRow:Y06_HeatPumpHeatCapacity17F ) < 1 ) then "n/a" else UNDEFINED endif  }
    "Set SCSysRpt:CF1R_HeatPumpRow:Y06a_EfficiencyCOP" SCSysRpt:CF1R_HeatPumpRow:Y06a_EfficiencyCOP  = {  
           if ( RefCountByType[3] > 0 )
           then  if (HeatingType ==  "AirToWaterHeatPump") then  atof( Format( "%.2f", HtPumpSystem:COP17 ) )
                 else  UNDEFINED  endif
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_HeatPumpRow:Y06a_NotApplicableMessage" SCSysRpt:CF1R_HeatPumpRow:Y06a_NotApplicableMessage  = { if ( LocalStatus ( CF1R_HeatPumpRow:Y06a_EfficiencyCOP ) < 1 ) then "n/a" else UNDEFINED endif  }
    "Set SCSysRpt:CF1R_HeatPumpRow:Y07_EfficiencySEER" SCSysRpt:CF1R_HeatPumpRow:Y07_EfficiencySEER  = {  
           if ( RefCountByType[3] > 0 )
           then  switch(HeatingType)  ; RJH 3/23/19 - appears to use abbreviation string similar to HVACHtPump
                    case "SplitHeatPump"              : atof( Format( "%.2f", MinCoolSEER ) )
                    case "SDHVSplitHeatPump"          : atof( Format( "%.2f", MinCoolSEER ) ) 
                    case "DuctlessMiniSplitHeatPump"  : atof( Format( "%.2f", MinCoolSEER ) )
                    case "DuctlessMultiSplitHeatPump" : atof( Format( "%.2f", MinCoolSEER ) )
                    case "DuctlessVRFHeatPump"        : atof( Format( "%.2f", MinCoolSEER ) ) 
                    case "PkgHeatPump"                : atof( Format( "%.2f", MinCoolSEER ) ) 
                    case "LrgPkgHeatPump"             : UNDEFINED
                    case "RoomHeatPump"               : UNDEFINED   
                    case "AirToWaterHeatPump"         : UNDEFINED
                    case "GroundSourceHeatPump"       : UNDEFINED
					case "VCHP"                       : atof( Format( "%.2f", MinCoolSEER ) )
                    case "SglPkgVertHeatPump"         : UNDEFINED
                    case "PkgTermHeatPump"            : UNDEFINED
                    case "DuctedMiniSplitHeatPump"    : atof( Format( "%.2f", MinCoolSEER ) )
                    case "DuctedMultiSplitHeatPump"   : atof( Format( "%.2f", MinCoolSEER ) )
                    case "Ducted+DuctlessMultiSplitHeatPump"   : atof( Format( "%.2f", MinCoolSEER ) )
                    default : UNDEFINED
                 endswitch
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_HeatPumpRow:Y07_NotApplicableMessage" SCSysRpt:CF1R_HeatPumpRow:Y07_NotApplicableMessage  = { if ( LocalStatus ( CF1R_HeatPumpRow:Y07_EfficiencySEER ) < 1 ) then "n/a" else UNDEFINED endif  }
    "Set SCSysRpt:CF1R_HeatPumpRow:Y08_EfficiencyEER" SCSysRpt:CF1R_HeatPumpRow:Y08_EfficiencyEER  = {  
           if ( RefCountByType[3] > 0 )
           then  switch(HeatingType)  ; RJH 3/23/19 - appears to use abbreviation string similar to HVACHtPump
                    case "SplitHeatPump"              : atof( Format( "%.2f", MinCoolEER ) )
                    case "SDHVSplitHeatPump"          : atof( Format( "%.2f", MinCoolEER ) ) 
                    case "DuctlessMiniSplitHeatPump"  : atof( Format( "%.2f", MinCoolEER ) )
                    case "DuctlessMultiSplitHeatPump" : atof( Format( "%.2f", MinCoolEER ) )
                    case "DuctlessVRFHeatPump"        : atof( Format( "%.2f", MinCoolEER ) ) 
                    case "PkgHeatPump"                : atof( Format( "%.2f", MinCoolEER ) ) 
                    case "LrgPkgHeatPump"             : UNDEFINED
                    case "RoomHeatPump"               : atof( Format( "%.2f", HtPumpSystem:CEER ) )   
                    case "AirToWaterHeatPump"         : atof( Format( "%.2f", MinCoolEER ) )
                    case "GroundSourceHeatPump"       : atof( Format( "%.2f", MinCoolEER ) )
					case "VCHP"                       : atof( Format( "%.2f", MinCoolEER ) )
                    case "SglPkgVertHeatPump"         : atof( Format( "%.2f", MinCoolEER ) )
                    case "PkgTermHeatPump"            : atof( Format( "%.2f", MinCoolEER ) )
                    case "DuctedMiniSplitHeatPump"    : atof( Format( "%.2f", MinCoolEER ) )
                    case "DuctedMultiSplitHeatPump"   : atof( Format( "%.2f", MinCoolEER ) )
                    case "Ducted+DuctlessMultiSplitHeatPump"   : atof( Format( "%.2f", MinCoolEER ) )
                    default : UNDEFINED
                 endswitch
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_HeatPumpRow:Y09_ResidentialCoolingZoneType" SCSysRpt:CF1R_HeatPumpRow:Y09_ResidentialCoolingZoneType  = {  
           if ( RefCountByType[3] > 0 )
           then  if (ZonalCoolingType == "Not Zonal") then "NotZoneControlled" else "ZoneControlled" endif
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_HeatPumpRow:Y10_CondenserSpeedType" SCSysRpt:CF1R_HeatPumpRow:Y10_CondenserSpeedType  = {  
           if ( RefCountByType[3] > 0 )
           then  if (CoolCompType == "Single Speed") then "SingleSpeed" else "MultiSpeed" endif
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_HeatPumpRow:Y11_HeatPumpSystemHERS_VerificationName" SCSysRpt:CF1R_HeatPumpRow:Y11_HeatPumpSystemHERS_VerificationName  = {
           if ( RefCountByType[3] > 0 )
           then  if (LocalCompAssigned( HtPumpSystem:HERSHtPumpRef ) < 1) then  UNDEFINED
                 else  HtPumpSystem:HERSHtPumpRef:Name  endif
           else  UNCHANGED  endif  }
    "Set SCSysRpt:CF1R_HeatPumpRow:Y11_NotApplicableMessage" SCSysRpt:CF1R_HeatPumpRow:Y11_NotApplicableMessage  = { if ( LocalStatus ( CF1R_HeatPumpRow:Y11_HeatPumpSystemHERS_VerificationName ) < 1 ) then "n/a" else UNDEFINED endif  }

      ; RJH 1/6/2020 - New element added for VCHP reporting
    "Set SCSysRpt:CF1R_HeatPumpRow:Y12_IsFanCertifiedNonContinuous" SCSysRpt:CF1R_HeatPumpRow:Y12_IsFanCertifiedNonContinuous  = { 
           if ( RefCountByType[3] > 0 .AND. HeatingType == "VCHP" )
           then ( switch( EnumString( HtPumpSystem:VCHPDucts ) )
                     case "Unducted"          : "false"
                     case "Ducted"            : if ( HtPumpSystem:VCHPCertAutoFan > 0 )
					                            then "true"
												else "false" endif
                     case "Partially Ducted"  : if ( HtPumpSystem:VCHPCertAutoFan > 0 )
					                            then "true"
												else "false" endif
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }

      ; SAC 3/7/19 - added rules to populate cf1rtblRowHP by HVACHtPump (for multifamily models)
	  ; RJH 3/18/19 - modified rules for Y04 elements to match XSD
    "Set HVACHtPump:CF1R_HeatPumpRow:Y01_ResidentialHeatingSystemName" HVACHtPump:CF1R_HeatPumpRow:Y01_ResidentialHeatingSystemName  = {  Name  }
    "Set HVACHtPump:CF1R_HeatPumpRow:Y02_ResidentialHeatingSystemType" HVACHtPump:CF1R_HeatPumpRow:Y02_ResidentialHeatingSystemType  =          ; SAC 8/6/19 - updated values for current schema enums (tic #1118)
         {  switch(TypeAbbrevStr)  
				case "SplitHeatPump"              : "CentralSplitHP"
				case "SDHVSplitHeatPump"          : "SmallDuctHighVelocityHP" 
				case "DuctlessMiniSplitHeatPump"  : "DuctlessMiniSplitHP"
				case "DuctlessMultiSplitHeatPump" : "DuctlessMultiSplitHP"
				case "DuctlessVRFHeatPump"        : "DuctlessVRF_HP" 
				case "PkgHeatPump"                : "CentralPackagedHP" 
				case "LrgPkgHeatPump"             : "CentralLargePackagedHP"
				case "RoomHeatPump"               : "RoomHP"
				case "AirToWaterHeatPump"         : "AirToWaterHeatPump"
				case "GroundSourceHeatPump"       : "GroundSourceHeatPump"
				case "VCHP"                       : ( switch( EnumString( VCHPDucts ) )                                  ; RJH 4/20/2020 - updated enums for VCHP ducting differentiation (tic #1212)
				                                         case "Unducted"          : "VCHP_IndoorUnitDuctless"
														 case "Ducted"            : "VCHP_IndoorUnitDucted"
														 case "Partially Ducted"  : "VCHP_IndoorUnitDuctedAndDuctless"
														 default                  : "VCHP"
												      endswitch  )
                case "SglPkgVertHeatPump"         : "SPVHP"                  ; RJH 7/9/20 (tic #1226)
                case "PkgTermHeatPump"            : "PTHP"                   ; RJH 7/9/20 (tic #1225)
                case "DuctedMiniSplitHeatPump"    : "DuctedMiniSplitHP"      ; RJH 7/9/20 (tic #1229)
                case "DuctedMultiSplitHeatPump"   : "DuctedMultiSplitHP"     ; RJH 7/9/20 (tic #1229)
                case "Ducted+DuctlessMultiSplitHeatPump"   : "DuctedDuctlessMultiSplitHP"     ; RJH 7/9/20 (tic #1229)
				default : UNDEFINED
            endswitch  }
    "Set HVACHtPump:CF1R_HeatPumpRow:Y03_HeatPumpCount" HVACHtPump:CF1R_HeatPumpRow:Y03_HeatPumpCount  = {
            SumRevRef( SCSysRpt:HtPumpSystem, SCSysRpt:ReferenceCount )  }
    "Set HVACHtPump:CF1R_HeatPumpRow:Y04a_EfficiencyType" HVACHtPump:CF1R_HeatPumpRow:Y04a_EfficiencyType  = {  
           if ( IfValidAnd( IsAvailable > 0 )==0 ) then  UNDEFINED
           else if ( IfValidAnd( ShowHSPF > 0 ) ) then  "HSPF"
           else if ( IfValidAnd( Show4717COPs > 0 ) ) then  "COP"
           else  UNDEFINED   ; no other enums...
           endif endif endif  }
    "Set HVACHtPump:CF1R_HeatPumpRow:Y04a_NotApplicableMessage" HVACHtPump:CF1R_HeatPumpRow:Y04a_NotApplicableMessage  = { if ( LocalStatus ( CF1R_HeatPumpRow:Y04a_EfficiencyType ) < 1 ) then "n/a" else UNDEFINED endif  }
    "Set HVACHtPump:CF1R_HeatPumpRow:Y04_EfficiencyCOP" HVACHtPump:CF1R_HeatPumpRow:Y04_EfficiencyCOP  = {  
           if ( IfValidAnd( IsAvailable > 0 ) .AND. IfValidAnd( Show4717COPs > 0 ) .AND. IfValidAnd( ShowHSPF < 1 ) )
           then  if ( LocalStatus(COP47) < 1 ) then  UNDEFINED
                 else  COP47  endif
           else  UNCHANGED
           endif  }
    "Set HVACHtPump:CF1R_HeatPumpRow:Y04_EfficiencyHSPF" HVACHtPump:CF1R_HeatPumpRow:Y04_EfficiencyHSPF  = {  
           if ( IfValidAnd( IsAvailable > 0 ) .AND. IfValidAnd( ShowHSPF > 0 ) )
           then  if ( LocalStatus(HSPF) < 1 ) then  UNDEFINED
                 else  HSPF  endif
           else  UNCHANGED
           endif  }
    "Set HVACHtPump:CF1R_HeatPumpRow:Y04_NotApplicableMessage" HVACHtPump:CF1R_HeatPumpRow:Y04_NotApplicableMessage  = { if ( LocalStatus ( CF1R_HeatPumpRow:Y04_EfficiencyCOP ) < 1 .AND. LocalStatus ( CF1R_HeatPumpRow:Y04_EfficiencyHSPF ) < 1 ) then "n/a" else UNDEFINED endif  }
    "Set HVACHtPump:CF1R_HeatPumpRow:Y05_HeatPumpHeatCapacity47F" HVACHtPump:CF1R_HeatPumpRow:Y05_HeatPumpHeatCapacity47F  = {  
           if ( LocalStatus(Cap47) < 1 ) then UNDEFINED else atof( Format( "%.2f", Cap47 ) ) endif  }
    "Set HVACHtPump:CF1R_HeatPumpRow:Y05a_EfficiencyCOP" HVACHtPump:CF1R_HeatPumpRow:Y05a_EfficiencyCOP  =     ; added checks for valid data & COP unit fix - SAC 09/04/20
         { if ( LocalStatus(COP47) < 1 ) then UNDEFINED
           else  switch(TypeAbbrevStr) 
                    case "SplitHeatPump"              : UNDEFINED
                    case "SDHVSplitHeatPump"          : UNDEFINED 
                    case "DuctlessMiniSplitHeatPump"  : UNDEFINED
                    case "DuctlessMultiSplitHeatPump" : UNDEFINED
                    case "DuctlessVRFHeatPump"        : UNDEFINED 
                    case "PkgHeatPump"                : UNDEFINED 
                    case "LrgPkgHeatPump"             : UNDEFINED
                    case "RoomHeatPump"               : if (IfValidAnd( CAP47 > 0 ) .AND. IfValidAnd( HeatPower > 0 ))
                                                        then  atof( Format( "%.2f", CAP47 / (HeatPower * 3.412) ) )   
                                                        else  UNDEFINED  endif
                    case "AirToWaterHeatPump"         : if (IfValidAnd( COP47 > 0 ))
                                                        then  atof( Format( "%.2f", COP47 ) )
                                                        else  UNDEFINED  endif
                    case "GroundSourceHeatPump"       : if (IfValidAnd( COP47 > 0 ))
                                                        then  atof( Format( "%.2f", COP47 ) )
                                                        else  UNDEFINED  endif
      				  case "VCHP"                       : UNDEFINED
                    case "SglPkgVertHeatPump"         : if (IfValidAnd( COP47 > 0 ))
                                                        then  atof( Format( "%.2f", COP47 ) )
                                                        else  UNDEFINED  endif
                    case "PkgTermHeatPump"            : if (IfValidAnd( COP47 > 0 ))
                                                        then  atof( Format( "%.2f", COP47 ) )
                                                        else  UNDEFINED  endif
                    case "DuctedMiniSplitHeatPump"    : UNDEFINED
                    case "DuctedMultiSplitHeatPump"   : UNDEFINED
                    case "Ducted+DuctlessMultiSplitHeatPump"   : UNDEFINED
                    default : UNDEFINED
                 endswitch
           endif  }
    "Set HVACHtPump:CF1R_HeatPumpRow:Y06_HeatPumpHeatCapacity17F" HVACHtPump:CF1R_HeatPumpRow:Y06_HeatPumpHeatCapacity17F  = {  
           if ( LocalStatus(Cap17) < 1 ) then UNDEFINED
           else  switch(TypeAbbrevStr) 
                    case "SplitHeatPump"              : atof( Format( "%.2f", Cap17 ) )
                    case "SDHVSplitHeatPump"          : atof( Format( "%.2f", Cap17 ) ) 
                    case "DuctlessMiniSplitHeatPump"  : atof( Format( "%.2f", Cap17 ) )
                    case "DuctlessMultiSplitHeatPump" : atof( Format( "%.2f", Cap17 ) )
                    case "DuctlessVRFHeatPump"        : atof( Format( "%.2f", Cap17 ) ) 
                    case "PkgHeatPump"                : atof( Format( "%.2f", Cap17 ) ) 
                    case "LrgPkgHeatPump"             : UNDEFINED
                    case "RoomHeatPump"               : UNDEFINED   
                    case "AirToWaterHeatPump"         : atof( Format( "%.2f", Cap17 ) )
                    case "GroundSourceHeatPump"       : UNDEFINED
					case "VCHP"                       : atof( Format( "%.2f", Cap17 ) )
                    case "SglPkgVertHeatPump"         : UNDEFINED
                    case "PkgTermHeatPump"            : UNDEFINED
                    case "DuctedMiniSplitHeatPump"    : atof( Format( "%.2f", Cap17 ) )
                    case "DuctedMultiSplitHeatPump"   : atof( Format( "%.2f", Cap17 ) )
                    case "Ducted+DuctlessMultiSplitHeatPump"   : atof( Format( "%.2f", Cap17 ) )
                    default : UNDEFINED
                 endswitch
           endif  }
    "Set HVACHtPump:CF1R_HeatPumpRow:Y06_NotApplicableMessage" HVACHtPump:CF1R_HeatPumpRow:Y06_NotApplicableMessage  = { if ( LocalStatus ( CF1R_HeatPumpRow:Y06_HeatPumpHeatCapacity17F ) < 1 ) then "n/a" else UNDEFINED endif  }
    "Set HVACHtPump:CF1R_HeatPumpRow:Y06a_EfficiencyCOP" HVACHtPump:CF1R_HeatPumpRow:Y06a_EfficiencyCOP  = {  
           if ( LocalStatus(COP17) < 1 ) then UNDEFINED 
           else if (TypeAbbrevStr ==  "AirToWaterHeatPump") then atof( Format( "%.2f", COP17 ) )
           else UNDEFINED 
           endif endif }
    "Set HVACHtPump:CF1R_HeatPumpRow:Y06a_NotApplicableMessage" HVACHtPump:CF1R_HeatPumpRow:Y06a_NotApplicableMessage  = { if ( LocalStatus ( CF1R_HeatPumpRow:Y06a_EfficiencyCOP ) < 1 ) then "n/a" else UNDEFINED endif  }
    "Set HVACHtPump:CF1R_HeatPumpRow:Y07_EfficiencySEER" HVACHtPump:CF1R_HeatPumpRow:Y07_EfficiencySEER  = {  
           if ( LocalStatus(SEER) < 1 ) then UNDEFINED
           else  switch(TypeAbbrevStr)
                    case "SplitHeatPump"              : atof( Format( "%.2f", SEER ) )
                    case "SDHVSplitHeatPump"          : atof( Format( "%.2f", SEER ) ) 
                    case "DuctlessMiniSplitHeatPump"  : atof( Format( "%.2f", SEER ) )
                    case "DuctlessMultiSplitHeatPump" : atof( Format( "%.2f", SEER ) )
                    case "DuctlessVRFHeatPump"        : atof( Format( "%.2f", SEER ) ) 
                    case "PkgHeatPump"                : atof( Format( "%.2f", SEER ) ) 
                    case "LrgPkgHeatPump"             : UNDEFINED
                    case "RoomHeatPump"               : UNDEFINED   
                    case "AirToWaterHeatPump"         : UNDEFINED
                    case "GroundSourceHeatPump"       : UNDEFINED
					case "VCHP"                       : atof( Format( "%.2f", SEER ) )
                    case "SglPkgVertHeatPump"         : UNDEFINED
                    case "PkgTermHeatPump"            : UNDEFINED
                    case "DuctedMiniSplitHeatPump"    : atof( Format( "%.2f", SEER ) )
                    case "DuctedMultiSplitHeatPump"   : atof( Format( "%.2f", SEER ) )
                    case "Ducted+DuctlessMultiSplitHeatPump"   : atof( Format( "%.2f", SEER ) )
                    default : UNDEFINED
                 endswitch
           endif  }
    "Set HVACHtPump:CF1R_HeatPumpRow:Y07_NotApplicableMessage" HVACHtPump:CF1R_HeatPumpRow:Y07_NotApplicableMessage  = { if ( LocalStatus ( CF1R_HeatPumpRow:Y07_EfficiencySEER ) < 1 ) then "n/a" else UNDEFINED endif  }

    ; RJH 8/27/20 tic #1003
    "Set HVACHtPump:CF1R_HeatPumpRow:Y08_EfficiencyEER" HVACHtPump:CF1R_HeatPumpRow:Y08_EfficiencyEER  = {  
           if ( LocalStatus(EER) < 1 .AND. LocalStatus(CEER) < 1 ) then UNDEFINED 
           else if (TypeAbbrevStr == "RoomHeatPump") then atof( Format( "%.2f", CEER ) )
           else atof( Format( "%.2f", EER ) ) 
           endif endif }

    "Set HVACHtPump:CF1R_HeatPumpRow:Y09_ResidentialCoolingZoneType" HVACHtPump:CF1R_HeatPumpRow:Y09_ResidentialCoolingZoneType  = {  
           if (IfValidAnd( IsZonal > 0.5 )) then "ZoneControlled" else "NotZoneControlled" endif  }
    "Set HVACHtPump:CF1R_HeatPumpRow:Y10_CondenserSpeedType" HVACHtPump:CF1R_HeatPumpRow:Y10_CondenserSpeedType  = {  
           if (IfValidAnd( IsMultiSpeed > 0.5 )) then "MultiSpeed" else "SingleSpeed" endif   }
    "Set HVACHtPump:CF1R_HeatPumpRow:Y11_HeatPumpSystemHERS_VerificationName" HVACHtPump:CF1R_HeatPumpRow:Y11_HeatPumpSystemHERS_VerificationName  = {
            if (LocalCompAssigned( HERSHtPumpRef ) < 1) then  UNDEFINED
            else  HERSHtPumpRef:Name  endif  }
    "Set HVACHtPump:CF1R_HeatPumpRow:Y11_NotApplicableMessage" HVACHtPump:CF1R_HeatPumpRow:Y11_NotApplicableMessage  = { if ( LocalStatus ( CF1R_HeatPumpRow:Y11_HeatPumpSystemHERS_VerificationName ) < 1 ) then "n/a" else UNDEFINED endif  }

      ; RJH 1/6/2020 - New element added for VCHP reporting
    "Set HVACHtPump:CF1R_HeatPumpRow:Y12_IsFanCertifiedNonContinuous" HVACHtPump:CF1R_HeatPumpRow:Y12_IsFanCertifiedNonContinuous  = { 
           if ( TypeAbbrevStr == "VCHP" )
           then ( switch( EnumString( VCHPDucts ) )
                     case "Unducted"          : "false"
                     case "Ducted"            : if ( VCHPCertAutoFan > 0 )
					                            then "true"
												else "false" endif
                     case "Partially Ducted"  : if ( VCHPCertAutoFan > 0 )
					                            then "true"
												else "false" endif
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }

  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL HP table rows
   "Set cf1rtblRowHP parent"   cf1rtblRowHP:Parent  = { cf1rTableHeatPumps:Name  }
  ; END of HP table rules
  ; ----------------------------------------------------------------------

  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL HP table rows
   "Set cf1rtblRowHP parent"   cf1rtblRowHP:Parent  = { cf1rTableHeatPumps:Name  }
  ; END of HP table rules
  ; ----------------------------------------------------------------------

; RJH 1/6/2020 - New section for VARIABLE CAPACITY HEAT PUMP COMPLIANCE OPTION  - HERS VERIFICATION reporting
  ; ----------------------------------------------------------------------
  ; Section_Yvchp VCHP table
      ; logic to prevent creation of Section_Yvchp if no heating units exist
   "Create & initialize new cf1rSection_Yvchp object"
      cf1rCF1RPRF01E:Action  = {  if ( SumAll( SCSysRpt:RefCountByType[3] ) > 0 ) then  CreateChildren( cf1rSection_Yvchp, 1, "Section_Yvchp" )
                                  else UNDEFINED endif }
   "Create & initialize new cf1rTableVCHP object"
      cf1rSection_Yvchp:Action   = {  if ( ComponentCount( cf1rSection_Yvchp ) > 0 ) then  CreateChildren( cf1rTableVCHP, 1, "TableVCHP" )
                                      else UNDEFINED endif }
  ; ----------------------------------------------------------------------
  ; Rules to create individual VCHP table rows for SCSysRpt instances with RefCountByType[3] > 0 AND HeatingType = "VCHP"
      ; logic to create cf1rtblRowVCHP by SCSysRpt only for single family models
   "Create cf1rtblRowVCHP for SCSysRpt instances with RefCountByType[3] > 0 (for single family models only)"
      SCSysRpt:CF1R_VCHPRow   = {  if ( ResProj:IsMultiFamily > 0 .OR. IfValidAnd( RefCountByType[3] > 0 )==0 ) then UNDEFINED
	                               else if (HeatingType != "VCHP") then UNDEFINED
                                   else CreateComp( cf1rtblRowVCHP, Name + "VCHPRow" ) endif endif }
      ; logic to create cf1rtblRowVCHP by HVACHtPump only for multifamily models
   "Create cf1rtblRowVCHP for HVACHtPump instances for multifamily models"
      HVACHtPump:CF1R_VCHPRow = {  if ( ResProj:IsMultiFamily = 0 .OR. SumRevRef( SCSysRpt:HtPumpSystem, SCSysRpt:ReferenceCount ) < 1 ) then UNDEFINED
	                               else if (TypeAbbrevStr != "VCHP") then UNDEFINED
                                   else CreateComp( cf1rtblRowVCHP, Name + "VCHPRow" ) endif endif }
   ; ----------------------------------------------------------------------
   ; Rules to populate VCHP table rows for all SCSysRpt instances with RefCountByType[3] > 0 AND HeatingType = "VCHP"
    "Set SCSysRpt:CF1R_VCHPRow:Yvchp01_HeatPumpSystemHERS_VerificationName" SCSysRpt:CF1R_VCHPRow:Yvchp01_HeatPumpSystemHERS_VerificationName  = { 
           if ( RefCountByType[3] > 0 .AND. HeatingType == "VCHP" )
           then  HtPumpSystem:Name
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_VCHPRow:Yvchp02_VerifyLowStaticVCHP" SCSysRpt:CF1R_VCHPRow:Yvchp02_VerifyLowStaticVCHP  = { 
           if ( RefCountByType[3] > 0 .AND. HeatingType == "VCHP" )
           then ( switch( EnumString( HtPumpSystem:VCHPDucts ) )
                     case "Unducted"          : "false"
                     case "Ducted"            : "true"
                     case "Partially Ducted"  : "true"
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_VCHPRow:Yvchp03_VerifyAirToHabitableRoomsVCHP" SCSysRpt:CF1R_VCHPRow:Yvchp03_VerifyAirToHabitableRoomsVCHP  = { 
           if ( RefCountByType[3] > 0 .AND. HeatingType == "VCHP" )
           then ( switch( EnumString( HtPumpSystem:VCHPDucts ) )
                     case "Unducted"          : "true"
                     case "Ducted"            : "true"
                     case "Partially Ducted"  : "true"
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_VCHPRow:Yvchp04_VerifyDuctlessInConditionedSpaceVCHP" SCSysRpt:CF1R_VCHPRow:Yvchp04_VerifyDuctlessInConditionedSpaceVCHP  = { 
           if ( RefCountByType[3] > 0 .AND. HeatingType == "VCHP" )
           then ( switch( EnumString( HtPumpSystem:VCHPDucts ) )
                     case "Unducted"          : "true"
                     case "Ducted"            : "false"
                     case "Partially Ducted"  : "false"
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_VCHPRow:Yvchp05_VerifyWallThermostatVCHP" SCSysRpt:CF1R_VCHPRow:Yvchp05_VerifyWallThermostatVCHP  = { 
           if ( RefCountByType[3] > 0 .AND. HeatingType == "VCHP" )
           then ( switch( EnumString( HtPumpSystem:VCHPDucts ) )
                     case "Unducted"          : "true"
                     case "Ducted"            : "true"
                     case "Partially Ducted"  : "true"
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_VCHPRow:Yvchp06_VerifyFilterSizePressureDropVCHP" SCSysRpt:CF1R_VCHPRow:Yvchp06_VerifyFilterSizePressureDropVCHP  = { 
           if ( RefCountByType[3] > 0 .AND. HeatingType == "VCHP" )
           then ( switch( EnumString( HtPumpSystem:VCHPDucts ) )
                     case "Unducted"          : "false"
                     case "Ducted"            : "true"
                     case "Partially Ducted"  : "true"
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_VCHPRow:Yvchp07_VerifyLowLeakDuctsConditionedSpaceVCHP" SCSysRpt:CF1R_VCHPRow:Yvchp07_VerifyLowLeakDuctsConditionedSpaceVCHP  = { 
           if ( RefCountByType[3] > 0 .AND. HeatingType == "VCHP" )
           then ( switch( EnumString( HtPumpSystem:VCHPDucts ) )
                     case "Unducted"          : "false"
                     case "Ducted"            : "true"
                     case "Partially Ducted"  : "true"
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_VCHPRow:Yvchp08_VerifyRequiredMinimumAirflowVCHP" SCSysRpt:CF1R_VCHPRow:Yvchp08_VerifyRequiredMinimumAirflowVCHP  = { 
           if ( RefCountByType[3] > 0 .AND. HeatingType == "VCHP" )
           then ( switch( EnumString( HtPumpSystem:VCHPDucts ) )
                     case "Unducted"          : "false"
                     case "Ducted"            : "true"
                     case "Partially Ducted"  : "true"
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_VCHPRow:Yvchp09_VerifyCertifiedNonContinuousFanVCHP" SCSysRpt:CF1R_VCHPRow:Yvchp09_VerifyCertifiedNonContinuousFanVCHP  = { 
           if ( RefCountByType[3] > 0 .AND. HeatingType == "VCHP" )
           then ( switch( EnumString( HtPumpSystem:VCHPDucts ) )
                     case "Unducted"          : "false"
                     case "Ducted"            : if ( HtPumpSystem:VCHPCertAutoFan > 0 )
					                            then "true"
												else "false" endif
                     case "Partially Ducted"  : if ( HtPumpSystem:VCHPCertAutoFan > 0 )
					                            then "true"
												else "false" endif
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_VCHPRow:Yvchp10_VerifyIndoorFanNonContinousVCHP" SCSysRpt:CF1R_VCHPRow:Yvchp10_VerifyIndoorFanNonContinousVCHP  = { 
           if ( RefCountByType[3] > 0 .AND. HeatingType == "VCHP" )
           then ( switch( EnumString( HtPumpSystem:VCHPDucts ) )
                     case "Unducted"          : "false"
                     case "Ducted"            : if ( HtPumpSystem:VCHPCertAutoFan > 0 )
					                            then "true"
												else "false" endif
                     case "Partially Ducted"  : if ( HtPumpSystem:VCHPCertAutoFan > 0 )
					                            then "true"
												else "false" endif
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }

   ; Rules to populate VCHP table rows by HVACHtPump (for multifamily models) for all HVACHtPump instances with TypeAbbrevStr = "VCHP"
    "Set HVACHtPump:CF1R_VCHPRow:Yvchp01_HeatPumpSystemHERS_VerificationName" HVACHtPump:CF1R_VCHPRow:Yvchp01_HeatPumpSystemHERS_VerificationName  = { 
           if ( TypeAbbrevStr == "VCHP" )
           then  Name
           else  UNCHANGED
           endif  }
    "Set HVACHtPump:CF1R_VCHPRow:Yvchp02_VerifyLowStaticVCHP" HVACHtPump:CF1R_VCHPRow:Yvchp02_VerifyLowStaticVCHP  = { 
           if ( TypeAbbrevStr == "VCHP" )
           then ( switch( EnumString( VCHPDucts ) )
                     case "Unducted"          : "false"
                     case "Ducted"            : "true"
                     case "Partially Ducted"  : "true"
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }
    "Set HVACHtPump:CF1R_VCHPRow:Yvchp03_VerifyAirToHabitableRoomsVCHP" HVACHtPump:CF1R_VCHPRow:Yvchp03_VerifyAirToHabitableRoomsVCHP  = { 
           if ( TypeAbbrevStr == "VCHP" )
           then ( switch( EnumString( VCHPDucts ) )
                     case "Unducted"          : "true"
                     case "Ducted"            : "true"
                     case "Partially Ducted"  : "true"
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }
    "Set HVACHtPump:CF1R_VCHPRow:Yvchp04_VerifyDuctlessInConditionedSpaceVCHP" HVACHtPump:CF1R_VCHPRow:Yvchp04_VerifyDuctlessInConditionedSpaceVCHP  = { 
           if ( TypeAbbrevStr == "VCHP" )
           then ( switch( EnumString( VCHPDucts ) )
                     case "Unducted"          : "true"
                     case "Ducted"            : "false"
                     case "Partially Ducted"  : "false"
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }
    "Set HVACHtPump:CF1R_VCHPRow:Yvchp05_VerifyWallThermostatVCHP" HVACHtPump:CF1R_VCHPRow:Yvchp05_VerifyWallThermostatVCHP  = { 
           if ( TypeAbbrevStr == "VCHP" )
           then ( switch( EnumString( VCHPDucts ) )
                     case "Unducted"          : "true"
                     case "Ducted"            : "true"
                     case "Partially Ducted"  : "true"
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }
    "Set HVACHtPump:CF1R_VCHPRow:Yvchp06_VerifyFilterSizePressureDropVCHP" HVACHtPump:CF1R_VCHPRow:Yvchp06_VerifyFilterSizePressureDropVCHP  = { 
           if ( TypeAbbrevStr == "VCHP" )
           then ( switch( EnumString( VCHPDucts ) )
                     case "Unducted"          : "false"
                     case "Ducted"            : "true"
                     case "Partially Ducted"  : "true"
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }
    "Set HVACHtPump:CF1R_VCHPRow:Yvchp07_VerifyLowLeakDuctsConditionedSpaceVCHP" HVACHtPump:CF1R_VCHPRow:Yvchp07_VerifyLowLeakDuctsConditionedSpaceVCHP  = { 
           if ( TypeAbbrevStr == "VCHP" )
           then ( switch( EnumString( VCHPDucts ) )
                     case "Unducted"          : "false"
                     case "Ducted"            : "true"
                     case "Partially Ducted"  : "true"
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }
    "Set HVACHtPump:CF1R_VCHPRow:Yvchp08_VerifyRequiredMinimumAirflowVCHP" HVACHtPump:CF1R_VCHPRow:Yvchp08_VerifyRequiredMinimumAirflowVCHP  = { 
           if ( TypeAbbrevStr == "VCHP" )
           then ( switch( EnumString( VCHPDucts ) )
                     case "Unducted"          : "false"
                     case "Ducted"            : "true"
                     case "Partially Ducted"  : "true"
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }
    "Set HVACHtPump:CF1R_VCHPRow:Yvchp09_VerifyCertifiedNonContinuousFanVCHP" HVACHtPump:CF1R_VCHPRow:Yvchp09_VerifyCertifiedNonContinuousFanVCHP  = { 
           if ( TypeAbbrevStr == "VCHP" )
           then ( switch( EnumString( VCHPDucts ) )
                     case "Unducted"          : "false"
                     case "Ducted"            : if ( VCHPCertAutoFan > 0 )
					                            then "true"
												else "false" endif
                     case "Partially Ducted"  : if ( VCHPCertAutoFan > 0 )
					                            then "true"
												else "false" endif
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }
    "Set HVACHtPump:CF1R_VCHPRow:Yvchp10_VerifyIndoorFanNonContinousVCHP" HVACHtPump:CF1R_VCHPRow:Yvchp10_VerifyIndoorFanNonContinousVCHP  = { 
           if ( TypeAbbrevStr == "VCHP" )
           then ( switch( EnumString( VCHPDucts ) )
                     case "Unducted"          : "false"
                     case "Ducted"            : if ( VCHPCertAutoFan > 0 )
					                            then "true"
												else "false" endif
                     case "Partially Ducted"  : if ( VCHPCertAutoFan > 0 )
					                            then "true"
												else "false" endif
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }



  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL VCHP table rows
   "Set cf1rtblRowVCHP parent"   cf1rtblRowVCHP:Parent  = { cf1rTableVCHP:Name  }
  ; END of VCHP table rules
  ; ----------------------------------------------------------------------
  ; Rule to Delete empty VCHP table
   "DELETE empty cf1rTableVCHP object"
      cf1rSection_Yvchp:Action   = {  if (ComponentCount( cf1rtblRowVCHP ) < 1) then  DeleteComp()  else  UNCHANGED  endif }
  ; ----------------------------------------------------------------------

  ; ----------------------------------------------------------------------  SAC 5/10/19
  ; Section_Yhers HVAC HEAT PUMP HERS table
   "Create & initialize new cf1rSection_Yhers object - if HERSHtPump objects exist"
      cf1rCF1RPRF01E:Action  = {  if (ComponentCount( HERSHtPump ) < 1) then  UNCHANGED
                                  else  CreateChildren( cf1rSection_Yhers, 1, "Section_Yhers" )
                                  endif  }
   "Call subordinate rulelist to populate TableHeatPumpHERS rows"
      ResProj:Action   = { if (ComponentCount( cf1rSection_Yhers ) < 1) then  UNCHANGED
                           else  EvalRulelist( "CF1RPRF01E_cf1rSection_Yhers" )
                           endif  }
  ; ----------------------------------------------------------------------


  ; ----------------------------------------------------------------------
  ; Section_X Cooling Units table
      ; SAC 3/7/19 - added logic to prevent creation of Section_X if no cooling units exist
      ; SAC 5/25/19 - added logic to prevent creation of Section_X if only "No Cooling" systems exist
      ; RJH 10/18/19 - removed logic to prevent creation of Section_X for "No Cooling" equipment per Ticket #1147
   "Create & initialize new cf1rSection_X object"
      cf1rCF1RPRF01E:Action  = {  if ( SumAll( SCSysRpt:RefCountByType[2] ) > 0 )
                                  then  CreateChildren( cf1rSection_X, 1, "Section_X" )
                                  else UNDEFINED endif }
   "Create & initialize new cf1rTableCoolingUnits object"
      cf1rSection_X:Action   = {  if ( ComponentCount( cf1rSection_X ) > 0 ) then  CreateChildren( cf1rTableCoolingUnits, 1, "TableCoolingUnits" )
                                  else UNDEFINED endif }
  ; ----------------------------------------------------------------------
  ; Rules to create individual Cooling Unit table rows for SCSysRpt instances with RefCountByType[2] > 0
      ; SAC 3/7/19 - added logic to create cf1rtblRowClgUnit by SCSysRpt only for single family models
      ; SAC 5/25/19 - added logic to prevent creation of cf1rtblRowClgUnit for "No Cooling" equipment
      ; RJH 10/18/19 - removed logic to prevent creation of cf1rtblRowClgUnit for "No Cooling" equipment per Ticket #1147
   "Create cf1rtblRowClgUnit for SCSysRpt instances instances with RefCountByType[2] > 0"
      SCSysRpt:CF1R_CoolingUnitRow   = {  if ( ResProj:IsMultiFamily > 0 .OR. IfValidAnd( RefCountByType[2] > 0 )==0 ) then UNDEFINED
                                          else CreateComp( cf1rtblRowClgUnit, Name + "ClgUnitRow" ) endif }
      ; SAC 3/7/19 - added rule to create cf1rtblRowClgUnit by HVACCool only for multifamily models
      ; SAC 5/25/19 - added logic to prevent creation of cf1rtblRowClgUnit for "No Cooling" equipment
      ; RJH 10/18/19 - removed logic to prevent creation of cf1rtblRowClgUnit for "No Cooling" equipment per Ticket #1147
   "Create cf1rtblRowClgUnit for all relevant HVACCool instances (for MFam models)"
      HVACCool:CF1R_CoolingUnitRow   = {  if ( ResProj:IsMultiFamily = 0 .OR. SumRevRef( SCSysRpt:CoolSystem, SCSysRpt:ReferenceCount ) < 1 ) then UNDEFINED
                                          else CreateComp( cf1rtblRowClgUnit, Name + "ClgUnitRow" ) endif }
   ; ----------------------------------------------------------------------
   ; Rules to populate Cooling Unit table rows for all SCSysRpt instances with RefCountByType[2] > 0
    "Set SCSysRpt:CF1R_CoolingUnitRow:X01_ResidentialCoolingSystemName" SCSysRpt:CF1R_CoolingUnitRow:X01_ResidentialCoolingSystemName  = { 
           if ( RefCountByType[2] > 0 )
           then  CoolSystem:Name
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_CoolingUnitRow:X02_ResidentialCoolingSystemType" SCSysRpt:CF1R_CoolingUnitRow:X02_ResidentialCoolingSystemType  = {  
           if ( RefCountByType[2] > 0 )
           then  switch(CoolSystem:Type)
                    case 1  : "NoCooling"                      ; CBECC "NoCooling"
                    case 2  : "CentralSplitAC"                 ; CBECC "SplitAirCond"
                    case 3  : "CentralPackagedAC"              ; CBECC "PkgAirCond"
                    case 4  : "CentralLargePackagedAC"         ; CBECC "LrgPkgAirCond"
                    case 5  : "RoomAC"                         ; CBECC "RoomAirCond"         ; SAC 10/9/19 - tic #1150
                    case 11 : "EvaporativeDirect"              ; CBECC "EvapDirect"
                    case 12 : "EvaporativeIndirectDirect"      ; CBECC "EvapIndirDirect"
                    case 13 : "EvaporativeIndirect"            ; CBECC "EvapIndirect"
                    case 14 : "EvaporativelyCooledCondenser"   ; CBECC "EvapCondenser"
                    case 16 : "DuctlessSplitAC"                ; CBECC "DuctlessMiniSplitAirCond"
                    case 18 : "SmallDuctHighVelocityAC"        ; CBECC "SDHVSplitAirCond"
                    case 20 : "DuctlessMultiSplitAC"           ; CBECC "DuctlessMultiSplitAirCond"
                    case 21 : "DuctlessVRF_AC"                 ; CBECC "DuctlessVRFAirCond"
					case 23 : "SPVAC"                          ; CBECC "SglPkgVertAirCond"                 ; RJH 7/9/20 - tic #1226
					case 25 : "PTAC"                           ; CBECC "PkgTermAirCond"                    ; RJH 7/9/20 - tic #1225
                    case 27 : "DuctedMiniSplitAC"              ; CBECC "DuctedMiniSplitAirCond"            ; RJH 7/9/20 - tic #1229
                    case 29 : "DuctedMultiSplitAC"             ; CBECC "DuctedMultiSplitAirCond"           ; RJH 7/9/20 - tic #1229
                    case 31 : "DuctedDuctlessMultiSplitAC"     ; CBECC "Ducted+DuctlessMultiSplitAirCond"  ; RJH 7/9/20 - tic #1229
                    default : UNDEFINED
                 endswitch
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_CoolingUnitRow:X03_CoolingUnitCount" SCSysRpt:CF1R_CoolingUnitRow:X03_CoolingUnitCount  = {  RefCountByType[2]  }
    "Set SCSysRpt:CF1R_CoolingUnitRow:X04_EfficiencyEER" SCSysRpt:CF1R_CoolingUnitRow:X04_EfficiencyEER  = {  
           if ( RefCountByType[2] > 0 )
           then  switch(CoolSystem:Type)   ; RJH 8/27/20 - tic #1003
                    case 1  : UNDEFINED                              ; CBECC "NoCooling"
                    case 2  : atof( Format( "%.2f", MinCoolEER ) )   ; CBECC "SplitAirCond"
                    case 3  : atof( Format( "%.2f", MinCoolEER ) )   ; CBECC "PkgAirCond"
                    case 4  : UNDEFINED                              ; CBECC "LrgPkgAirCond"
                    case 5  : atof( Format( "%.2f", CoolSystem:CEER ) )   ; CBECC "RoomAirCond"
                    case 11 : UNDEFINED                              ; CBECC "EvapDirect"
                    case 12 : UNDEFINED                              ; CBECC "EvapIndirDirect"
                    case 13 : UNDEFINED                              ; CBECC "EvapIndirect"
                    case 14 : atof( Format( "%.2f", CoolSystem:EERb ) )   ; CBECC "EvapCondenser"
                    case 16 : atof( Format( "%.2f", MinCoolEER ) )   ; CBECC "DuctlessMiniSplitAirCond"
                    case 18 : atof( Format( "%.2f", MinCoolEER ) )   ; CBECC "SDHVSplitAirCond"
                    case 20 : atof( Format( "%.2f", MinCoolEER ) )   ; CBECC "DuctlessMultiSplitAirCond"
                    case 21 : atof( Format( "%.2f", MinCoolEER ) )   ; CBECC "DuctlessVRFAirCond"
					case 23 : atof( Format( "%.2f", MinCoolEER ) )   ; CBECC "SglPkgVertAirCond"                
					case 25 : atof( Format( "%.2f", MinCoolEER ) )   ; CBECC "PkgTermAirCond"                  
                    case 27 : atof( Format( "%.2f", MinCoolEER ) )   ; CBECC "DuctedMiniSplitAirCond"          
                    case 29 : atof( Format( "%.2f", MinCoolEER ) )   ; CBECC "DuctedMultiSplitAirCond"          
                    case 31 : atof( Format( "%.2f", MinCoolEER ) )   ; CBECC "Ducted+DuctlessMultiSplitAirCond" 
                    default : UNDEFINED
                 endswitch
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_CoolingUnitRow:X04_NotApplicableMessage" SCSysRpt:CF1R_CoolingUnitRow:X04_NotApplicableMessage  = { 
	       if ( LocalStatus ( CF1R_CoolingUnitRow:X04_EfficiencyEER ) < 1 ) then "n/a" else UNDEFINED endif  }               ; RJH 7/9/20

    "Set SCSysRpt:CF1R_CoolingUnitRow:X05_EfficiencySEER" SCSysRpt:CF1R_CoolingUnitRow:X05_EfficiencySEER  = {  
           if ( RefCountByType[2] > 0 )
           then  switch(CoolSystem:Type)   ; RJH 8/27/20 - tic #1003
                    case 1  : UNDEFINED                              ; CBECC "NoCooling"
                    case 2  : atof( Format( "%.2f", MinCoolSEER ) )  ; CBECC "SplitAirCond"
                    case 3  : atof( Format( "%.2f", MinCoolSEER ) )  ; CBECC "PkgAirCond"
                    case 4  : UNDEFINED                              ; CBECC "LrgPkgAirCond"
                    case 5  : UNDEFINED                              ; CBECC "RoomAirCond"
                    case 11 : UNDEFINED                              ; CBECC "EvapDirect"
                    case 12 : UNDEFINED                              ; CBECC "EvapIndirDirect"
                    case 13 : UNDEFINED                              ; CBECC "EvapIndirect"
                    case 14 : atof( Format( "%.2f", MinCoolSEER ) )  ; CBECC "EvapCondenser"
                    case 16 : atof( Format( "%.2f", MinCoolSEER ) )  ; CBECC "DuctlessMiniSplitAirCond"
                    case 18 : atof( Format( "%.2f", MinCoolSEER ) )  ; CBECC "SDHVSplitAirCond"
                    case 20 : atof( Format( "%.2f", MinCoolSEER ) )  ; CBECC "DuctlessMultiSplitAirCond"
                    case 21 : atof( Format( "%.2f", MinCoolSEER ) )  ; CBECC "DuctlessVRFAirCond"
					case 23 : UNDEFINED                              ; CBECC "SglPkgVertAirCond"                
					case 25 : UNDEFINED                              ; CBECC "PkgTermAirCond"                  
                    case 27 : atof( Format( "%.2f", MinCoolSEER ) )  ; CBECC "DuctedMiniSplitAirCond"          
                    case 29 : atof( Format( "%.2f", MinCoolSEER ) )  ; CBECC "DuctedMultiSplitAirCond"          
                    case 31 : atof( Format( "%.2f", MinCoolSEER ) )  ; CBECC "Ducted+DuctlessMultiSplitAirCond" 
                    default : UNDEFINED
                 endswitch
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_CoolingUnitRow:X05_NotApplicableMessage" SCSysRpt:CF1R_CoolingUnitRow:X05_NotApplicableMessage  = { 
	       if ( LocalStatus ( CF1R_CoolingUnitRow:X05_EfficiencySEER ) < 1 ) then "n/a" else UNDEFINED endif  }               ; RJH 7/9/20

    "Set SCSysRpt:CF1R_CoolingUnitRow:X06_ResidentialCoolingZoneType" SCSysRpt:CF1R_CoolingUnitRow:X06_ResidentialCoolingZoneType  = {  
           if ( RefCountByType[2] > 0 )
           then ( switch( ZonalCoolingType )
                     case "Not Zonal"           : "NotZoneControlled"
                     case "Zonally Controlled"  : "ZoneControlled"
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_CoolingUnitRow:X07_CondenserSpeedType" SCSysRpt:CF1R_CoolingUnitRow:X07_CondenserSpeedType  = {  
           if ( RefCountByType[2] > 0 )
           then ( switch( EnumString( CoolCompType ) )
                     case "Single Speed" : "SingleSpeed"
                     case "Multi-speed"  : "MultiSpeed"
                     default  :  UNDEFINED
                  endswitch  )
           else  UNCHANGED
           endif  }
    "Set SCSysRpt:CF1R_CoolingUnitRow:X08_CoolingSystemHERS_VerificationName" SCSysRpt:CF1R_CoolingUnitRow:X08_CoolingSystemHERS_VerificationName  = {
           if ( RefCountByType[2] > 0 )
           then  if (LocalCompAssigned( CoolSystem:HERSCheck ) < 1) then  UNDEFINED
                 else  CoolSystem:HERSCheck:Name  endif
           else  UNCHANGED  endif  }
    "Set SCSysRpt:CF1R_CoolingUnitRow:X08_NotApplicableMessage" SCSysRpt:CF1R_CoolingUnitRow:X08_NotApplicableMessage  = { if ( LocalStatus ( CF1R_CoolingUnitRow:X08_CoolingSystemHERS_VerificationName ) < 1 ) then "n/a" else UNDEFINED endif  }

      ; SAC 3/7/19 - added rules to populate cf1rtblRowClgUnit by HVACCool only for multifamily models
    "Set HVACCool:CF1R_CoolingUnitRow:X01_ResidentialCoolingSystemName" HVACCool:CF1R_CoolingUnitRow:X01_ResidentialCoolingSystemName  = {  Name  }
    "Set HVACCool:CF1R_CoolingUnitRow:X02_ResidentialCoolingSystemType" HVACCool:CF1R_CoolingUnitRow:X02_ResidentialCoolingSystemType  = {  
                 switch(Type)
                    case 1  : "NoCooling"                      ; CBECC "NoCooling"
                    case 2  : "CentralSplitAC"                 ; CBECC "SplitAirCond"
                    case 3  : "CentralPackagedAC"              ; CBECC "PkgAirCond"
                    case 4  : "CentralLargePackagedAC"         ; CBECC "LrgPkgAirCond"
                    case 5  : "RoomAC"                         ; CBECC "RoomAirCond"         ; SAC 10/9/19 - tic #1150
                    case 11 : "EvaporativeDirect"              ; CBECC "EvapDirect"
                    case 12 : "EvaporativeIndirectDirect"      ; CBECC "EvapIndirDirect"
                    case 13 : "EvaporativeIndirect"            ; CBECC "EvapIndirect"
                    case 14 : "EvaporativelyCooledCondenser"   ; CBECC "EvapCondenser"
                    case 16 : "DuctlessSplitAC"                ; CBECC "DuctlessMiniSplitAirCond"
                    case 18 : "SmallDuctHighVelocityAC"        ; CBECC "SDHVSplitAirCond"
                    case 20 : "DuctlessMultiSplitAC"           ; CBECC "DuctlessMultiSplitAirCond"
                    case 21 : "DuctlessVRF_AC"                 ; CBECC "DuctlessVRFAirCond"
					case 23 : "SPVAC"                          ; CBECC "SglPkgVertAirCond"                 ; RJH 7/9/20 - tic #1226
					case 25 : "PTAC"                           ; CBECC "PkgTermAirCond"                    ; RJH 7/9/20 - tic #1225
                    case 27 : "DuctedMiniSplitAC"              ; CBECC "DuctedMiniSplitAirCond"            ; RJH 7/9/20 - tic #1229
                    case 29 : "DuctedMultiSplitAC"             ; CBECC "DuctedMultiSplitAirCond"           ; RJH 7/9/20 - tic #1229
                    case 31 : "DuctedDuctlessMultiSplitAC"     ; CBECC "Ducted+DuctlessMultiSplitAirCond"  ; RJH 7/9/20 - tic #1229
                    default : UNDEFINED
                 endswitch  }
    "Set HVACCool:CF1R_CoolingUnitRow:X03_CoolingUnitCount" HVACCool:CF1R_CoolingUnitRow:X03_CoolingUnitCount  = {
            SumRevRef( SCSysRpt:CoolSystem, SCSysRpt:ReferenceCount )  }

    "Set HVACCool:CF1R_CoolingUnitRow:X04_EfficiencyEER" HVACCool:CF1R_CoolingUnitRow:X04_EfficiencyEER  = {
                 switch(Type)   ; RJH 8/27/20 - tic #1003
                    case 1  : UNDEFINED                              ; CBECC "NoCooling"
                    case 2  : atof( Format( "%.2f", MinRevRef( SCSysRpt:CoolSystem, SCSysRpt:MinCoolEER ) ) )   ; CBECC "SplitAirCond"
                    case 3  : atof( Format( "%.2f", MinRevRef( SCSysRpt:CoolSystem, SCSysRpt:MinCoolEER ) ) )   ; CBECC "PkgAirCond"
                    case 4  : UNDEFINED                              ; CBECC "LrgPkgAirCond"
                    case 5  : atof( Format( "%.2f", CEER ) )   ; CBECC "RoomAirCond"
                    case 11 : UNDEFINED                              ; CBECC "EvapDirect"
                    case 12 : UNDEFINED                              ; CBECC "EvapIndirDirect"
                    case 13 : UNDEFINED                              ; CBECC "EvapIndirect"
                    case 14 : atof( Format( "%.2f", EERb ) )   ; CBECC "EvapCondenser"
                    case 16 : atof( Format( "%.2f", MinRevRef( SCSysRpt:CoolSystem, SCSysRpt:MinCoolEER ) ) )   ; CBECC "DuctlessMiniSplitAirCond"
                    case 18 : atof( Format( "%.2f", MinRevRef( SCSysRpt:CoolSystem, SCSysRpt:MinCoolEER ) ) )   ; CBECC "SDHVSplitAirCond"
                    case 20 : atof( Format( "%.2f", MinRevRef( SCSysRpt:CoolSystem, SCSysRpt:MinCoolEER ) ) )   ; CBECC "DuctlessMultiSplitAirCond"
                    case 21 : atof( Format( "%.2f", MinRevRef( SCSysRpt:CoolSystem, SCSysRpt:MinCoolEER ) ) )   ; CBECC "DuctlessVRFAirCond"
					case 23 : atof( Format( "%.2f", MinRevRef( SCSysRpt:CoolSystem, SCSysRpt:MinCoolEER ) ) )   ; CBECC "SglPkgVertAirCond"                
					case 25 : atof( Format( "%.2f", MinRevRef( SCSysRpt:CoolSystem, SCSysRpt:MinCoolEER ) ) )   ; CBECC "PkgTermAirCond"                  
                    case 27 : atof( Format( "%.2f", MinRevRef( SCSysRpt:CoolSystem, SCSysRpt:MinCoolEER ) ) )   ; CBECC "DuctedMiniSplitAirCond"          
                    case 29 : atof( Format( "%.2f", MinRevRef( SCSysRpt:CoolSystem, SCSysRpt:MinCoolEER ) ) )   ; CBECC "DuctedMultiSplitAirCond"          
                    case 31 : atof( Format( "%.2f", MinRevRef( SCSysRpt:CoolSystem, SCSysRpt:MinCoolEER ) ) )   ; CBECC "Ducted+DuctlessMultiSplitAirCond" 
                    default : UNDEFINED
                 endswitch  }
    "Set HVACCool:CF1R_CoolingUnitRow:X04_NotApplicableMessage" HVACCool:CF1R_CoolingUnitRow:X04_NotApplicableMessage  = { 
	        if ( LocalStatus ( CF1R_CoolingUnitRow:X04_EfficiencyEER ) < 1 ) then "n/a" else UNDEFINED endif  }           ; RJH 7/9/20

    "Set HVACCool:CF1R_CoolingUnitRow:X05_EfficiencySEER" HVACCool:CF1R_CoolingUnitRow:X05_EfficiencySEER  = {
                 switch(Type)   ; RJH 8/27/20 - tic #1003
                    case 1  : UNDEFINED                              ; CBECC "NoCooling"
                    case 2  : atof( Format( "%.2f", MinRevRef( SCSysRpt:CoolSystem, SCSysRpt:MinCoolSEER ) ) )  ; CBECC "SplitAirCond"
                    case 3  : atof( Format( "%.2f", MinRevRef( SCSysRpt:CoolSystem, SCSysRpt:MinCoolSEER ) ) )  ; CBECC "PkgAirCond"
                    case 4  : UNDEFINED                              ; CBECC "LrgPkgAirCond"
                    case 5  : UNDEFINED                              ; CBECC "RoomAirCond"
                    case 11 : UNDEFINED                              ; CBECC "EvapDirect"
                    case 12 : UNDEFINED                              ; CBECC "EvapIndirDirect"
                    case 13 : UNDEFINED                              ; CBECC "EvapIndirect"
                    case 14 : atof( Format( "%.2f", MinRevRef( SCSysRpt:CoolSystem, SCSysRpt:MinCoolSEER ) ) )  ; CBECC "EvapCondenser"
                    case 16 : atof( Format( "%.2f", MinRevRef( SCSysRpt:CoolSystem, SCSysRpt:MinCoolSEER ) ) )  ; CBECC "DuctlessMiniSplitAirCond"
                    case 18 : atof( Format( "%.2f", MinRevRef( SCSysRpt:CoolSystem, SCSysRpt:MinCoolSEER ) ) )  ; CBECC "SDHVSplitAirCond"
                    case 20 : atof( Format( "%.2f", MinRevRef( SCSysRpt:CoolSystem, SCSysRpt:MinCoolSEER ) ) )  ; CBECC "DuctlessMultiSplitAirCond"
                    case 21 : atof( Format( "%.2f", MinRevRef( SCSysRpt:CoolSystem, SCSysRpt:MinCoolSEER ) ) )  ; CBECC "DuctlessVRFAirCond"
					case 23 : UNDEFINED                              ; CBECC "SglPkgVertAirCond"                
					case 25 : UNDEFINED                              ; CBECC "PkgTermAirCond"                  
                    case 27 : atof( Format( "%.2f", MinRevRef( SCSysRpt:CoolSystem, SCSysRpt:MinCoolSEER ) ) )  ; CBECC "DuctedMiniSplitAirCond"          
                    case 29 : atof( Format( "%.2f", MinRevRef( SCSysRpt:CoolSystem, SCSysRpt:MinCoolSEER ) ) )  ; CBECC "DuctedMultiSplitAirCond"          
                    case 31 : atof( Format( "%.2f", MinRevRef( SCSysRpt:CoolSystem, SCSysRpt:MinCoolSEER ) ) )  ; CBECC "Ducted+DuctlessMultiSplitAirCond" 
                    default : UNDEFINED
                 endswitch  }
    "Set HVACCool:CF1R_CoolingUnitRow:X05_NotApplicableMessage" HVACCool:CF1R_CoolingUnitRow:X05_NotApplicableMessage  = { 
	        if ( LocalStatus ( CF1R_CoolingUnitRow:X05_EfficiencySEER ) < 1 ) then "n/a" else UNDEFINED endif  }           ; RJH 7/9/20

    "Set HVACCool:CF1R_CoolingUnitRow:X06_ResidentialCoolingZoneType" HVACCool:CF1R_CoolingUnitRow:X06_ResidentialCoolingZoneType  = {
            if (IfValidAnd( IsZonal > 0 ))
            then "ZoneControlled"
            else "NotZoneControlled"
            endif  }
    "Set HVACCool:CF1R_CoolingUnitRow:X07_CondenserSpeedType" HVACCool:CF1R_CoolingUnitRow:X07_CondenserSpeedType  = {
            if (IfValidAnd( IsMultiSpeed > 0 ))
            then "MultiSpeed"
            else "SingleSpeed"
            endif  }
    "Set HVACCool:CF1R_CoolingUnitRow:X08_CoolingSystemHERS_VerificationName" HVACCool:CF1R_CoolingUnitRow:X08_CoolingSystemHERS_VerificationName  = {
            if (LocalCompAssigned( HERSCheck ) < 1) then  UNDEFINED
            else  HERSCheck:Name  endif  }
    "Set HVACCool:CF1R_CoolingUnitRow:X08_NotApplicableMessage" HVACCool:CF1R_CoolingUnitRow:X08_NotApplicableMessage  = { if ( LocalStatus ( CF1R_CoolingUnitRow:X08_CoolingSystemHERS_VerificationName ) < 1 ) then "n/a" else UNDEFINED endif  }
  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL Cooling Unit table rows
   "Set cf1rtblRowClgUnit parent"   cf1rtblRowClgUnit:Parent  = { cf1rTableCoolingUnits:Name  }
  ; END of Cooling Unit table rules
  ; ----------------------------------------------------------------------
   "Delete cf1rSection_X if no cooling objects created"     ; SAC 8/17/19 - rule to delete ClgUnit table if no rows created (can happen when only HP cooling present) (tic #880)
      cf1rSection_X:Action  = {  if (ComponentCount( cf1rtblRowClgUnit ) < 1) then  DeleteComp()  else  UNCHANGED  endif  }

  ; ----------------------------------------------------------------------
  ; Section_Z HVAC Cool HERS table
   "Create & initialize new cf1rSection_Z object - if HERSCool objects exist"
      cf1rCF1RPRF01E:Action  = {  if (ComponentCount( HERSCool ) < 2) then  UNCHANGED
                                  else  CreateChildren( cf1rSection_Z, 1, "Section_Z" )
                                  endif  }
   "Call subordinate rulelist to populate table rows"
      ResProj:Action   = { if (ComponentCount( cf1rSection_Z ) < 1) then  UNCHANGED
                           else  EvalRulelist( "CF1RPRF01E_cf1rSection_Z" )
                           endif  }
  ; ----------------------------------------------------------------------


  ; ----------------------------------------------------------------------
  ; Section_Aa New and EAA tables
;   "Create & initialize new cf1rSection_Aa object"
;      cf1rCF1RPRF01E:Action  = {  CreateChildren( cf1rSection_Aa, 1, "Section_Aa" )  }     ; no init needed;

;   "Call subordinate rulelist to handle New vs. EAA results"
;      ResProj:Action   = { if (RunScope = 1 .AND. IsAddAlone = 0)
;                           then  EvalRulelist( "CF1RPRF01E_cf1rSection_Aa_Proposed_New" )
;                           else  EvalRulelist( "CF1RPRF01E_cf1rSection_Aa_Proposed_EAA" )
;                           endif  }
; ----------------------------------------------------------------------

; RJH 10/1/22 Moved to NRCCPRF-Rulelists.rule to handle NRCC/LMCC Section_Distmf
  ; ----------------------------------------------------------------------
  ; Section_Aa HVAC - Distribution Systems Table
;   "Create & initialize new cf1rSection_Aa object"    ; SAC 5/25/19 - added logic to prevent cf1rSection_Aa creation when no HVACDist objects serve Zones
;      cf1rCF1RPRF01E:Action  = {  if (SumAll( HVACDist:FloorAreaServed ) < 1) then  UNCHANGED
;                                  else  CreateChildren( cf1rSection_Aa, 1, "Section_Aa" )  endif  }     ; no init needed
;   "Call subordinate rulelist to populate HVACDist table"
;      ResProj:Action  = {  if (ComponentCount( cf1rSection_Aa ) < 1) then  UNCHANGED
;                           else  EvalRulelist( "CF1RPRF01E_cf1rSection_Aa_Proposed" )  endif  }

  ; ----------------------------------------------------------------------  SAC 4/13/19
  ; Section_Ii HVAC Distribution - Verified Duct Design Table
   "Create & initialize new Section_Ii object"
      cf1rCF1RPRF01E:Action  = {  if (SumAll( HVACDist:ReportDuctDesign ) > 0)
                                  then  CreateChildren( cf1rSection_Ii, 1, "Section_Ii" )
                                  else  UNCHANGED  endif  }     ; no init needed
   "Create & initialize new cf1rTableDuctDesign object"
      cf1rSection_Ii:Action  = {  CreateChildren( cf1rTableDuctDesign, 1, "TableDuctDesign" )  }
; ----------------------------------------------------------------------
   "Create cf1rtblRowDuctDesign for all valid DuctSeg objects"
      DuctSeg:CF1R_DuctDesignRow  = {  if (IfValidAnd( HVACDist:ReportDuctDesign > 0 ) .AND. IfValidAnd( ErrorID = 0 ))
                                       then CreateComp( cf1rtblRowDuctDesign, Name + "DuctDesignRow" )
                                       else  UNDEFINED  endif  }

   "Set DuctSeg:CF1R_DuctDesignRow:Ii01_SpaceConditioningDistributionSystemName"      DuctSeg:CF1R_DuctDesignRow:Ii01_SpaceConditioningDistributionSystemName  =  {  Parent( Name )  }
   "Set DuctSeg:CF1R_DuctDesignRow:Ii02_AirSegmentName                         "      DuctSeg:CF1R_DuctDesignRow:Ii02_AirSegmentName                           = 
      {  Format( "%g-%s", ChildIndex(1), Name )  }   ; using Name now instead, to require input and ensure uniqueness - SAC 4/18/19
   ;   {  if (LocalStatus( SegmentID ) < 1) then  Format( "seg %g", ChildIndex(1) )
   ;      else  Format( "%g-%s", ChildIndex(1), SegmentID )  endif  }
   "Set DuctSeg:CF1R_DuctDesignRow:Ii03_AirSegmentType                         "      DuctSeg:CF1R_DuctDesignRow:Ii03_AirSegmentType                           = {  EnumString( Type )  }
   "Set DuctSeg:CF1R_DuctDesignRow:Ii04_DuctNominalDiameter                    "      DuctSeg:CF1R_DuctDesignRow:Ii04_DuctNominalDiameter                      = {  Diameter/10  }
   "Set DuctSeg:CF1R_DuctDesignRow:Ii05_DuctLength                             "      DuctSeg:CF1R_DuctDesignRow:Ii05_DuctLength                               = {  Length  }
   "Set DuctSeg:CF1R_DuctDesignRow:Ii06_DuctRValue                             "      DuctSeg:CF1R_DuctDesignRow:Ii06_DuctRValue                               = 
      {  switch (InsulRValue)
            case    0 :  "R0.0"
            case  100 :  "R10"
            case  120 :  "R12"
            case   21 :  "R2.1"
            case   42 :  "R4.2"
            case   60 :  "R6"
            case   80 :  "R8"
            default   :  UNDEFINED
         endswitch  }
   "Set DuctSeg:CF1R_DuctDesignRow:Ii07_InsulationRValue                       "      DuctSeg:CF1R_DuctDesignRow:Ii07_InsulationRValue                         = {  AtticInsulRValue/10  }
   "Set DuctSeg:CF1R_DuctDesignRow:Ii08_InsulationThickness                    "      DuctSeg:CF1R_DuctDesignRow:Ii08_InsulationThickness                      = {  atof( Format( "%.2f", AtticInsulDepth ) )  }
   "Set DuctSeg:CF1R_DuctDesignRow:Ii09_InsulationType                         "      DuctSeg:CF1R_DuctDesignRow:Ii09_InsulationType                           = {  EnumString( AtticInsulType )  }
   "Set DuctSeg:CF1R_DuctDesignRow:Ii10_DuctBuriedLevel                        "      DuctSeg:CF1R_DuctDesignRow:Ii10_DuctBuriedLevel                          = 
      {  if (BuriedPerACM < 1) then  UNDEFINED
         else  switch (BuriedLevel)
                  case  2 :  "AllBuried"
                  case  3 :  "DeeplyBuried"
                  case  0 :  "NotBuried"
                  case  1 :  "PartiallyBuried"
                  default :  UNDEFINED
               endswitch  endif  }
   "Set DuctSeg:CF1R_DuctDesignRow:Ii10_NotApplicableMessage                   "      DuctSeg:CF1R_DuctDesignRow:Ii10_NotApplicableMessage                     = 
      {  if (LocalStatus( CF1R_DuctDesignRow:Ii10_DuctBuriedLevel ) < 1) then  "n/a"
         else  UNDEFINED  endif  }
   ; SAC 7/1/19 - mods to ensure 'Fully' buried segments report as Ii11_BuriedDuctInsulationDevice = "NoContainer" (tic #1128)
   ; SAC 10/30/19 - expand use of Ii11_BuriedDuctInsulationDevice = "NoContainer" to include Partially buried ducts (tic #1128)
   "Set DuctSeg:CF1R_DuctDesignRow:Ii11_BuriedDuctInsulationDevice             "      DuctSeg:CF1R_DuctDesignRow:Ii11_BuriedDuctInsulationDevice               = 
      {  if (BuriedPerACM < 1 .OR. BuriedLevel < 1) then  UNDEFINED
         else if (BuriedLevel == 1) then  "NoContainer"  ; Partially buried
         else if (BuriedLevel == 2) then  "NoContainer"  ; Fully buried
         else  switch (ContainmentSystem)                ; Deeply buried
                  case  2 :  "Container"    
                  case  3 :  "LoweredChase" 
                  case  1 :  "NoContainer"  
                  default :  UNDEFINED
               endswitch  endif endif endif  }

   "Set DuctSeg:CF1R_DuctDesignRow:Ii12_StatusEAA                              "      DuctSeg:CF1R_DuctDesignRow:Ii12_StatusEAA                                = 
      {  if (ResProj:RunScope != 2) then  UNDEFINED
         else  switch (Status)
                  case  1 :  "ExistingUnchanged"    
                  case  3 :  "New" 
                  default :  UNDEFINED
               endswitch  endif  }

   "Set cf1rtblRowDuctDesign parent"   cf1rtblRowDuctDesign:Parent  = { cf1rTableDuctDesign:Name  }
  ; END of Section_Ii HVAC Distribution - Verified Duct Design table rules
  ; ----------------------------------------------------------------------


  ; ----------------------------------------------------------------------
  ; Section_Bb HVACDist HERS table
   "Create & initialize new cf1rSection_Bb object - iff HERSDist flags require reporting"
      cf1rCF1RPRF01E:Action  = {  if (ComponentCount( HERSDist ) < 1) then  UNCHANGED
                                  else if (SumAll( HERSDist:Report ) < 1) then  UNCHANGED
                                  else  CreateChildren( cf1rSection_Bb, 1, "Section_Bb" )
                                  endif endif  }
   "Call subordinate rulelist to populate table rows"
      ResProj:Action   = { if (ComponentCount( cf1rSection_Bb ) < 1) then  UNCHANGED
                           else  EvalRulelist( "CF1RPRF01E_cf1rSection_Bb" )
                           endif  }
; ----------------------------------------------------------------------


  ; ----------------------------------------------------------------------
  ; Section_Cc HVAC - FAN SYSTEMS table
   ; removed logic from following rules to force ALL assigned fans to be documented in this table (not just those where IsExisting = 0) (per e-mail w/ CEC/MS 7/29/21) - SAC 07/30/21
   "Create & initialize new cf1rSection_Cc object"
     ; cf1rCF1RPRF01E:Action  = {  if (SumAcrossIf( HVACFan:FloorAreaServed, HVACFan:IsExisting = 0 ) == 0) then UNCHANGED
      cf1rCF1RPRF01E:Action  = {  if (SumAll( HVACFan:FloorAreaServed ) < 1) then UNCHANGED
                                  else  CreateChildren( cf1rSection_Cc, 1, "Section_Cc" )  endif  }     ; no init needed
      "Create & initialize new cf1rTableFanSystems object"
      cf1rSection_Cc:Action   = {  if (ComponentCount( cf1rSection_Cc ) < 1) then  UNCHANGED
                                   else CreateChildren( cf1rTableFanSystems, 1, "TableFanSystems" ) endif  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual FAN SYSTEM table rows
   "Create cf1rtblRowFanSys for all HVACFan instances"
     ; HVACFan:CF1R_FanSystemsRow   = {  if (FloorAreaServed = 0 .OR. IfValidAnd( IsExisting > 0 )) then  UNCHANGED
      HVACFan:CF1R_FanSystemsRow   = {  if (FloorAreaServed = 0) then  UNCHANGED
                                        else  CreateComp( cf1rtblRowFanSys, Name + "FanSystemRow" ) endif  }
   ; ----------------------------------------------------------------------
   ; Rules to populate FAN SYSTEM table rows for all HVACFan instances
    "Set HVACFan:CF1R_FanSystemsRow:Cc01_FanName" HVACFan:CF1R_FanSystemsRow:Cc01_FanName  = {  Name  }
    "Set HVACFan:CF1R_FanSystemsRow:Cc02_ResidentialFanType" 
	      HVACFan:CF1R_FanSystemsRow:Cc02_ResidentialFanType  = { 
		       switch( EnumString( Type ) )
                  case "Single Speed PSC Furnace Fan"      :  "HvacFan"
                  case "Whole House Fan"                   :  "WholeHouseFan"
                  case "Single Speed Stand Alone IAQ Fan"  :  "IAQStandAloneFan"
                  default  :  UNDEFINED
               endswitch  }
    "Set HVACFan:CF1R_FanSystemsRow:Cc03_FanPowerPerFlow" HVACFan:CF1R_FanSystemsRow:Cc03_FanPowerPerFlow  = {  WperCFMCool  }
    "Set HVACFan:CF1R_FanSystemsRow:Cc04_FanSystemHERS_VerificationName" HVACFan:CF1R_FanSystemsRow:Cc04_FanSystemHERS_VerificationName  = {  
            if (LocalCompAssigned( HERSCheck ) < 1) then  UNDEFINED
            else  HERSCheck:Name  endif  }
    "Set HVACFan:CF1R_FanSystemsRow:Cc04_NotApplicableMessage" HVACFan:CF1R_FanSystemsRow:Cc04_NotApplicableMessage  = { if ( LocalStatus ( CF1R_FanSystemsRow:Cc04_FanSystemHERS_VerificationName ) < 1 ) then "n/a" else UNDEFINED endif  }
  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL FAN SYSTEM table rows
   "Set cf1rtblRowFanSys parent"   cf1rtblRowFanSys:Parent  = { cf1rTableFanSystems:Name  }
  ; END of FAN SYSTEM table rules
  ; ----------------------------------------------------------------------

  ; ----------------------------------------------------------------------
  ; Section_Dd HVAC Fan Systems HERS table
   "Create & initialize new cf1rSection_Dd object - if HERSFan objects exist"
      cf1rCF1RPRF01E:Action  = {  if (ComponentCount( HERSFan ) < 2) then  UNCHANGED
                                  else  CreateChildren( cf1rSection_Dd, 1, "Section_Dd" )
                                  endif  }
   "Call subordinate rulelist to populate table rows"
      ResProj:Action   = { if (ComponentCount( cf1rSection_Dd ) < 1) then  UNCHANGED
                           else  EvalRulelist( "CF1RPRF01E_cf1rSection_Dd" )
                           endif  }
  ; ----------------------------------------------------------------------

  ; ----------------------------------------------------------------------
  ; Section_Ee IAQ (Indoor Air Quality) FANS table
         ; SAC 4/30/19 - added logic to exclude entire section if no IAQ fans exist w/ IAQCFM > 0 - and to not create any individual rows where IAQCFM = 0
   "Create & initialize new cf1rSection_Ee object"
      cf1rCF1RPRF01E:Action   = {  if (SumAll( IAQVentRpt:IAQCFM ) < 0.1) then  UNCHANGED
                                   else  CreateChildren( cf1rSection_Ee, 1, "Section_Ee" )  endif  }     ; no init needed
   "Create & initialize new cf1rTableFanIAQ object"
      cf1rSection_Ee:Action   = {  CreateChildren( cf1rTableFanIAQ, 1, "TableFanIAQ" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual IAQ FANS table rows
   "Create cf1rtblRowFanIAQ for all IAQVentRpt instances"
      IAQVentRpt:CF1R_FanIAQRow   = {  if (IfValidAnd( IAQCFM > 0 )==0) then  UNDEFINED
                                       else  CreateComp( cf1rtblRowFanIAQ, Name + "FanIAQRow" )  endif  }
   ; ----------------------------------------------------------------------
   ; Rules to populate FANS IAQ table rows for all IAQVentRpt instances
    "Set IAQVentRpt:CF1R_FanIAQRow:Ee01_ResidentialDwellingUnitName" IAQVentRpt:CF1R_FanIAQRow:Ee01_ResidentialDwellingUnitName  = {  Name  }
    "Set IAQVentRpt:CF1R_FanIAQRow:Ee02_FanFlowCapacity" IAQVentRpt:CF1R_FanIAQRow:Ee02_FanFlowCapacity  = {  IAQCFM  }
    "Set IAQVentRpt:CF1R_FanIAQRow:Ee03_FanPowerPerFlow" IAQVentRpt:CF1R_FanIAQRow:Ee03_FanPowerPerFlow  = {  WperCFMIAQ  }
    "Set IAQVentRpt:CF1R_FanIAQRow:Ee04_VentilationSystemType" IAQVentRpt:CF1R_FanIAQRow:Ee04_VentilationSystemType  =     ; SAC 5/2/19 - updated enums
            {  switch( IAQFanType )
                  case "Exhaust"  : "ExhaustVent"     ; SAC 7/16/19 - revised per tic #1137 - was: "ExhaustCentralVent"
                  case "Supply"   : "SupplyVent"
                  case "Balanced" : if (IfValidAnd( IAQRecovEffect > 0 ))
                                    then  "BalancedHRV"
                                    else  "Balanced"  endif
                  case "Default"  : "ExhaustVent"
                  default  :  UNDEFINED
               endswitch  }         ; other options: BalancedCentralVent / BalancedERV / CentralFanIntegrated / SupplyCentralVent
    "Set IAQVentRpt:CF1R_FanIAQRow:Ee05_RecoveryEfficiency" IAQVentRpt:CF1R_FanIAQRow:Ee05_RecoveryEfficiency  =
      {  if (IfValidAnd( ResProj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( IAQRecovEffect >= 0 )) then  atof( Format( "%.2f", IAQRecovEffect ) )  else  UNDEFINED  endif  }
;    "Set IAQVentRpt:CF1R_FanIAQRow:Ee06_IAQ_VentilationVerificationRequired" IAQVentRpt:CF1R_FanIAQRow:Ee06_IAQ_VentilationVerificationRequired  = {  
;           if ( ResProj:HERSOther:IAQFan > 0 )
;           then ResProj:HERSOther:IAQFanRptMsg
;           then if ( ResProj:HERSOther:IAQFanRptMsg == "IAQ mechanical ventilation" ) then "true" else "false" endif
;           else UNDEFINED endif }

   "Set IAQVentRpt:CF1R_FanIAQRow:Ee05a_SensibleRecoveryEfficiency"           IAQVentRpt:CF1R_FanIAQRow:Ee05a_SensibleRecoveryEfficiency  =     ; SAC 2/10/20 (tic #1174)
      {  if (IfValidAnd( ResProj:AnalysisVersion >= 190200 ) .AND. IfValidAnd( SensRecovEff > 0 )) then  int( SensRecovEff + 0.5 )  else  UNDEFINED  endif  }
   "Set IAQVentRpt:CF1R_FanIAQRow:Ee05a_NotApplicableMessage"                 IAQVentRpt:CF1R_FanIAQRow:Ee05a_NotApplicableMessage  =  
      {  if (LocalStatus( CF1R_FanIAQRow:Ee05a_SensibleRecoveryEfficiency ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   "Set IAQVentRpt:CF1R_FanIAQRow:Ee05b_AdjustedSensibleRecoveryEfficiency"   IAQVentRpt:CF1R_FanIAQRow:Ee05b_AdjustedSensibleRecoveryEfficiency  =
      {  if (IfValidAnd( ResProj:AnalysisVersion >= 190200 ) .AND. IfValidAnd( AdjSensRecovEff > 0 )) then  int( AdjSensRecovEff + 0.5 )  else  UNDEFINED  endif  }
   "Set IAQVentRpt:CF1R_FanIAQRow:Ee05b_NotApplicableMessage"                 IAQVentRpt:CF1R_FanIAQRow:Ee05b_NotApplicableMessage  =  
      {  if (LocalStatus( CF1R_FanIAQRow:Ee05b_AdjustedSensibleRecoveryEfficiency ) < 1) then  "n/a"  else  UNDEFINED  endif  }

    "Set IAQVentRpt:CF1R_FanIAQRow:Ee06_IAQ_VentilationVerificationRequired" IAQVentRpt:CF1R_FanIAQRow:Ee06_IAQ_VentilationVerificationRequired  = {  
           if ( ResProj:HERSProj:IAQFan > 0 )
           then "true"   ; ResProj:HERSProj:IAQFanRptMsg
           else "false" endif }

    ; RJH 20190410 Added Ee07 always populated with "Continuous" as per CEC direction
    "Set IAQVentRpt:CF1R_FanIAQRow:Ee07_VentilationOperationSchedule" IAQVentRpt:CF1R_FanIAQRow:Ee07_VentilationOperationSchedule  = { "Continuous" }

    "Set IAQVentRpt:CF1R_FanIAQRow:Ee08_WeatherStationName"       IAQVentRpt:CF1R_FanIAQRow:Ee08_WeatherStationName  =        ; SAC 4/30/19
      {  T24RClimateZoneCodeBase:wsfStationName( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:CompCodeBase, "BldgType", ResProj:BldgTypeTblStr )  }
    "Set IAQVentRpt:CF1R_FanIAQRow:Ee09_WeatherShieldingFactor"   IAQVentRpt:CF1R_FanIAQRow:Ee09_WeatherShieldingFactor  =
      {  T24RClimateZoneCodeBase:wsfQinf(        "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:CompCodeBase, "BldgType", ResProj:BldgTypeTblStr )  }

    "Set IAQVentRpt:CF1R_FanIAQRow:Ee10_ExteriorEnvelopeAreaTotal"   IAQVentRpt:CF1R_FanIAQRow:Ee10_ExteriorEnvelopeAreaTotal  =
      {  if (ResProj:EnergyCodeYearNum < 2019 .OR. ResProj:IsMultiFamily > 0 .OR. IfValidAnd( ResProj:SFamDwellingAttached > 0 )==0 .OR.
             IfValidAnd( ResProj:SFamIAQExtArea > 0 )==0 .OR. IfValidAnd( ResProj:SFamIAQIntArea >= 0 )==0) then  UNDEFINED
         else  ResProj:SFamIAQExtArea + ResProj:SFamIAQIntArea  endif  }
    "Set IAQVentRpt:CF1R_FanIAQRow:Ee11_ExteriorEnvelopeAreaNotShared"   IAQVentRpt:CF1R_FanIAQRow:Ee11_ExteriorEnvelopeAreaNotShared  =
      {  if (LocalStatus( CF1R_FanIAQRow:Ee10_ExteriorEnvelopeAreaTotal ) < 1) then  UNDEFINED
         else  ResProj:SFamIAQExtArea  endif  }

   "Set IAQVentRpt:CF1R_FanIAQRow:Ee12_LowRatedFanFlowCapacity"   IAQVentRpt:CF1R_FanIAQRow:Ee12_LowRatedFanFlowCapacity  =             ; SAC 2/10/20 (tic #1174)
      {  if (IfValidAnd( ResProj:AnalysisVersion >= 190200 ) .AND. IfValidAnd( HVIListedInterpCFM[1]  > 0 )) then  atof( Format( "%.2f", HVIListedInterpCFM[1] ) )  else  UNDEFINED  endif  }
   "Set IAQVentRpt:CF1R_FanIAQRow:Ee12_NotApplicableMessage"      IAQVentRpt:CF1R_FanIAQRow:Ee12_NotApplicableMessage  =  
      {  if (LocalStatus( CF1R_FanIAQRow:Ee12_LowRatedFanFlowCapacity ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   "Set IAQVentRpt:CF1R_FanIAQRow:Ee13_LowRatedCFM_SRE"           IAQVentRpt:CF1R_FanIAQRow:Ee13_LowRatedCFM_SRE  =  
      {  if (IfValidAnd( ResProj:AnalysisVersion >= 190200 ) .AND. IfValidAnd( HVIListedInterpSRE[1]  > 0 )) then  int( HVIListedInterpSRE[1]  + 0.5 )  else  UNDEFINED  endif  }
   "Set IAQVentRpt:CF1R_FanIAQRow:Ee13_NotApplicableMessage"      IAQVentRpt:CF1R_FanIAQRow:Ee13_NotApplicableMessage  =  
      {  if (LocalStatus( CF1R_FanIAQRow:Ee13_LowRatedCFM_SRE ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   "Set IAQVentRpt:CF1R_FanIAQRow:Ee14_LowRatedCFM_ASRE"          IAQVentRpt:CF1R_FanIAQRow:Ee14_LowRatedCFM_ASRE  =  
      {  if (IfValidAnd( ResProj:AnalysisVersion >= 190200 ) .AND. IfValidAnd( HVIListedInterpASRE[1] > 0 )) then  int( HVIListedInterpASRE[1] + 0.5 )  else  UNDEFINED  endif  }
   "Set IAQVentRpt:CF1R_FanIAQRow:Ee14_NotApplicableMessage"      IAQVentRpt:CF1R_FanIAQRow:Ee14_NotApplicableMessage  =  
      {  if (LocalStatus( CF1R_FanIAQRow:Ee14_LowRatedCFM_ASRE ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   "Set IAQVentRpt:CF1R_FanIAQRow:Ee15_HighRatedFanFlowCapacity"  IAQVentRpt:CF1R_FanIAQRow:Ee15_HighRatedFanFlowCapacity  =  
      {  if (IfValidAnd( ResProj:AnalysisVersion >= 190200 ) .AND. IfValidAnd( HVIListedInterpCFM[1]  > 0 )) then  atof( Format( "%.2f", HVIListedInterpCFM[2] ) )  else  UNDEFINED  endif  }
   "Set IAQVentRpt:CF1R_FanIAQRow:Ee15_NotApplicableMessage"      IAQVentRpt:CF1R_FanIAQRow:Ee15_NotApplicableMessage  =  
      {  if (LocalStatus( CF1R_FanIAQRow:Ee15_HighRatedFanFlowCapacity ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   "Set IAQVentRpt:CF1R_FanIAQRow:Ee16_HighRatedCFM_SRE"          IAQVentRpt:CF1R_FanIAQRow:Ee16_HighRatedCFM_SRE  =  
      {  if (IfValidAnd( ResProj:AnalysisVersion >= 190200 ) .AND. IfValidAnd( HVIListedInterpSRE[2]  > 0 )) then  int( HVIListedInterpSRE[2]  + 0.5 )  else  UNDEFINED  endif  }
   "Set IAQVentRpt:CF1R_FanIAQRow:Ee16_NotApplicableMessage"      IAQVentRpt:CF1R_FanIAQRow:Ee16_NotApplicableMessage  =  
      {  if (LocalStatus( CF1R_FanIAQRow:Ee16_HighRatedCFM_SRE ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   "Set IAQVentRpt:CF1R_FanIAQRow:Ee17_HighRatedCFM_ASRE"         IAQVentRpt:CF1R_FanIAQRow:Ee17_HighRatedCFM_ASRE  =  
      {  if (IfValidAnd( ResProj:AnalysisVersion >= 190200 ) .AND. IfValidAnd( HVIListedInterpASRE[2] > 0 )) then  int( HVIListedInterpASRE[2] + 0.5 )  else  UNDEFINED  endif  }
   "Set IAQVentRpt:CF1R_FanIAQRow:Ee17_NotApplicableMessage"      IAQVentRpt:CF1R_FanIAQRow:Ee17_NotApplicableMessage  =  
      {  if (LocalStatus( CF1R_FanIAQRow:Ee17_HighRatedCFM_ASRE ) < 1) then  "n/a"  else  UNDEFINED  endif  }


  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL IAQ FANS table rows
   "Set cf1rtblRowFanIAQ parent"   cf1rtblRowFanIAQ:Parent  = { cf1rTableFanIAQ:Name  }
  ; END of IAQ FANS table rules
  ; ----------------------------------------------------------------------

  ; ----------------------------------------------------------------------
  ; Section_Ff COOLING VENTILATION table
   "Create & initialize new cf1rSection_Ff object"
      cf1rCF1RPRF01E:Action  = {  if (SumAll( ClVentFan:NumAssignments ) < 1) then  UNCHANGED
                                  else  CreateChildren( cf1rSection_Ff, 1, "Section_Ff" )  endif  }     ; no init needed
   "Create & initialize new cf1rTableVentilation object"
      cf1rSection_Ff:Action   = {  CreateChildren( cf1rTableVentilation, 1, "TableVentilation" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual COOLING VENTILATION table rows
   "Create cf1rtblRowVent for all ClVentFan instances"
      ClVentFan:CF1R_VentRow   = {  if (IfValidAnd( NumAssignments > 0 )==0) then  UNDEFINED
                                    else  CreateComp( cf1rtblRowVent, Name + "VentRow" )  endif  }
   ; ----------------------------------------------------------------------
   ; Rules to populate COOLING VENTILATION table rows for all ClVentFan instances
    "Set ClVentFan:CF1R_VentRow:Ff01_VentilationSystemCoolingName" ClVentFan:CF1R_VentRow:Ff01_VentilationSystemCoolingName  = {  Name  }

    "Set ClVentFan:CF1R_VentRow:Ff02_AirFlowPerSquareFoot" ClVentFan:CF1R_VentRow:Ff02_AirFlowPerSquareFoot  =       ; SAC 5/1/19 - revised to calc CFM/ft2 based on assigned area, not entire model area
      {  if (IfValidAnd( AssignedArea > 0 )) then  CoolingVent / AssignedArea
         else  CoolingVent / ResProj:CondFloorArea  endif  }
    "Round ClVentFan:CF1R_VentRow:Ff02_AirFlowPerSquareFoot" ClVentFan:CF1R_VentRow:Ff02_AirFlowPerSquareFoot  =     ; SAC 5/1/19 - added rule to round to the nearest .01
      {  int( (CF1R_VentRow:Ff02_AirFlowPerSquareFoot * 100) + 0.5 ) / 100  }

    "Set ClVentFan:CF1R_VentRow:Ff03_ContinuousVentilationAirflow" ClVentFan:CF1R_VentRow:Ff03_ContinuousVentilationAirflow  = {  atof( Format( "%.2f", CoolingVent ) )  }
    "Set ClVentFan:CF1R_VentRow:Ff04_MaximumCoolingWperCFM" ClVentFan:CF1R_VentRow:Ff04_MaximumCoolingWperCFM  = {  atof( Format( "%.4f", WperCFMCool ) )  }     ; RJH 20191015 Changed formatting for Ticket #1020
    "Set ClVentFan:CF1R_VentRow:Ff05_CoolingVentilationPower" ClVentFan:CF1R_VentRow:Ff05_CoolingVentilationPower  = {  atof( Format( "%.2f", CoolingVent * WperCFMCool ) )  }
    "Set ClVentFan:CF1R_VentRow:Ff06_FanCount" ClVentFan:CF1R_VentRow:Ff06_FanCount  = {  NumAssignments  }

    "Set ClVentFan:CF1R_VentRow:Ff07_CFVCS_Type" ClVentFan:CF1R_VentRow:Ff07_CFVCS_Type  =     ; RJH 20190707 Added for Ticket 1133
      {  if (     SumAll( HVACSys:IsVariableCFIClVent ) > 0) then  "VariableCFVCS"
         else if (SumAll( HVACSys:IsFixedCFIClVent    ) > 0) then  "FixedCFVCS"
         else  "NotCFVCS"  endif endif  }    ; SAC 7/8/19 - added logic from rules specifying CFIClVent special feature msgs (tic #1133)

    "Set ClVentFan:CF1R_VentRow:Ff08_ExhaustLocation" ClVentFan:CF1R_VentRow:Ff08_ExhaustLocation  = {  #LSS(ExhaustsTo)  } ; JP 7/30/19 - added ExhaustsTo column (tic #1091)

    "Set ClVentFan:CF1R_VentRow:Ff09_CoolingVent_VerificationRequired" ClVentFan:CF1R_VentRow:Ff09_CoolingVent_VerificationRequired  = {  if ( HERSVerification > 0) 
	                                                                                                                                      then "true" 
																																		  else "false" endif  }

      ; SAC 7/8/19 - moved DOWN here from above, following creation/population of CF1R_VentRow objects
     "Set cf1rSection_F:F06_ResidentialVentilationCoolingSystemCount"    cf1rSection_F:F06_ResidentialVentilationCoolingSystemCount  = {  ComponentCount( cf1rtblRowVent )  }  ; was: ClVentFan )  }

  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL COOLING VENTILATION table rows
   "Set cf1rtblRowVent parent"   cf1rtblRowVent:Parent  = { cf1rTableVentilation:Name  }
  ; END of COOLING VENTILATION table rules
  ; ----------------------------------------------------------------------


  ; ----------------------------------------------------------------------
  ; Section_Jj OPAQUE SURFACES - VERIFIED & ALTERED table
   "Create & initialize new cf1rSection_Jj object"
      cf1rCF1RPRF01E:Action  = {  if (ResProj:RunScope != 2) then  UNCHANGED
                                  else  CreateChildren( cf1rSection_Jj, 1, "Section_Jj" )  endif  }     ; no init needed
   "Create & initialize new cf1rTableOpaqueSurfacesExisting object"
      cf1rSection_Jj:Action   = {  CreateChildren( cf1rTableOpaqueSurfacesExisting, 1, "TableOpaqueSurfacesExisting" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual Existing Opaque Surfaces table rows
   "Create cf1rtblRowOpaqueSurfaceExisting for all relevant ExtWall"
      ResExtWall:CF1R_OpqSrfExistingRow   = {  
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  UNDEFINED
            else if (IsAltered .AND. IsVerified)
            then  CreateComp( cf1rtblRowOpaqueSurfaceExisting, Name + " EW-OpqSrfExistRow" )
            else  UNDEFINED
            endif endif endif  }
   "Create cf1rtblRowOpaqueSurfaceExisting for all relevant IntWall objects"
      ResIntWall:CF1R_OpqSrfExistingRow   = {  
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  UNDEFINED
            else if (IsAltered .AND. IsVerified)
            then  CreateComp( cf1rtblRowOpaqueSurfaceExisting, Name + " IW-OpqSrfExistRow" )
            else  UNDEFINED
            endif endif endif  }
   "Create cf1rtblRowOpaqueSurfaceExisting for all relevant CeilingBelowAttic"
      CeilingBelowAttic:CF1R_OpqSrfExistingRow   = { 
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  UNDEFINED
            else if (IsAltered .AND. IsVerified)
            then  CreateComp( cf1rtblRowOpaqueSurfaceExisting, Name + " CBA-OpqSrfExistRow" )
            else  UNDEFINED
            endif endif endif  }
   "Create cf1rtblRowOpaqueSurfaceExisting for all relevant ExteriorFloor"
      ResExtFlr:CF1R_OpqSrfExistingRow   = {  
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  UNDEFINED
            else if (IsAltered .AND. IsVerified)
            then  CreateComp( cf1rtblRowOpaqueSurfaceExisting, Name + " EF-OpqSrfExistRow" )
            else  UNDEFINED
            endif endif endif  }
   "Create cf1rtblRowOpaqueSurfaceExisting for all relevant FloorOverCrawl"
      FloorOverCrawl:CF1R_OpqSrfExistingRow   = { 
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  UNDEFINED
            else if (IsAltered .AND. IsVerified)
            then  CreateComp( cf1rtblRowOpaqueSurfaceExisting, Name + " FOC-OpqSrfExistRow" )
            else  UNDEFINED
            endif endif endif  }
   "Create cf1rtblRowOpaqueSurfaceExisting for all relevant UndWall"
      UndWall:CF1R_OpqSrfExistingRow   = { 
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  UNDEFINED
            else if (IsAltered .AND. IsVerified)
            then  CreateComp( cf1rtblRowOpaqueSurfaceExisting, Name + " UGW-OpqSrfExistRow" )
            else  UNDEFINED
            endif endif endif  }
   "Create cf1rtblRowOpaqueSurfaceExisting for all relevant InteriorCeiling"
      InteriorCeiling:CF1R_OpqSrfExistingRow   = {  
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  UNDEFINED
            else if (IsAltered .AND. IsVerified)
            then  CreateComp( cf1rtblRowOpaqueSurfaceExisting, Name + " IC-OpqSrfExistRow" )
            else  UNDEFINED
            endif endif endif  }
   "Create cf1rtblRowOpaqueSurfaceExisting for all relevant InteriorFloor"
      ResIntFlr:CF1R_OpqSrfExistingRow   = { 
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  UNDEFINED
            else if (IsAltered .AND. IsVerified)
            then  CreateComp( cf1rtblRowOpaqueSurfaceExisting, Name + " IF-OpqSrfExistRow" )
            else  UNDEFINED
            endif endif endif  }
     ; ----------------------------------------------------------------------
     ; Rules to populate Existing Opaque Surfaces table rows for ALL Existing ExtWalls
      "Set ResExtWall:CF1R_OpqSrfExistingRow:Jj01_PartitionName"
         ResExtWall:CF1R_OpqSrfExistingRow:Jj01_PartitionName  = {  Name  }
      "Set ResExtWall:CF1R_OpqSrfExistingRow:Jj02_ThermalZoneName"
         ResExtWall:CF1R_OpqSrfExistingRow:Jj02_ThermalZoneName  = {  Parent( Name )  }
      "Set ResExtWall:CF1R_OpqSrfExistingRow:Jj03_ConstructionAssemblyNamePerformanceRes"
         ResExtWall:CF1R_OpqSrfExistingRow:Jj03_ConstructionAssemblyNamePerformanceRes  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then exConstruction:Name
			else UNDEFINED
			endif  }
      "Set ResExtWall:CF1R_OpqSrfExistingRow:Jj04_ConstructionAssemblyType"
         ResExtWall:CF1R_OpqSrfExistingRow:Jj04_ConstructionAssemblyType  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then switch( EnumString( exConstruction:Type ) )
					  case "Wood Framed Wall"         :  "WoodFramedWall"
					  case "Steel Framed Wall"        :  "SteelFramedWall"
					  case "Concrete / ICF / Brick"   :  "ConcreteBrickICF"
					  case "Hollow Unit Masonry"      :  "HollowUnitMasonry"
					  case "Adobe / Strawbale / Log"  :  "AdobeStrawbaleLog"
					  case "SIPS Wall"                :  "SIPS_Wall"
					  case "No Frame (concrete/CMU)"  :  "NoFrameConcreteCMU"
					  case "Wood Framed Ceiling"      :  "WoodFramedCeiling"
					  case "Built-up Roof"            :  "BuiltupRoof"
					  case "SIPS Ceiling"             :  "SIPS_Ceiling"
					  case "Wood Framed Floor"        :  "WoodFramedFloor"
					  case "SIPS Floor"               :  "SIPS_Floor"
					  default  :  UNDEFINED
				 endswitch
			else UNDEFINED
			endif  }
      "Set ResExtWall:CF1R_OpqSrfExistingRow:Jj05_CavityInsulationRes"
         ResExtWall:CF1R_OpqSrfExistingRow:Jj05_CavityInsulationRes  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then switch( exConstruction:CavityRRpt )
                    case "R 11"  :  "R11"
                    case "R 13"  :  "R13"
                    case "R 15"  :  "R15"
                    case "R 19"  :  "R19"
                    case "R 21"  :  "R21"
                    case "R 22"  :  "R22"
                    case "R 23"  :  "R23"
                    case "R 24"  :  "R24"
                    case "R 25"  :  "R25"
                    case "R 30"  :  "R30"
                    case "R 38"  :  "R38"
                    case "- no insulation (vertical) -"  :  "NoInsulation"
                    case "none"  :  "NoInsulation"
                    default      :  "Other"
                 endswitch
			else UNDEFINED
			endif  }
      "Set ResExtWall:CF1R_OpqSrfExistingRow:Jj06_Azimuth"
         ResExtWall:CF1R_OpqSrfExistingRow:Jj06_Azimuth  = {
            if (LocalStatus( OrientationValue ) > 0)
            then  Format( "%.0f", OrientationValue )
            else  UNDEFINED  endif  }
      "Set ResExtWall:CF1R_OpqSrfExistingRow:Jj06_NotApplicableMessage"
         ResExtWall:CF1R_OpqSrfExistingRow:Jj06_NotApplicableMessage  = {
            if ( (LocalStatus( OrientationValue ) > 0) == 0 )
            then  "n/a"
            else  UNDEFINED  endif  }
      "Set ResExtWall:CF1R_OpqSrfExistingRow:Jj07_RelativePosition"
         ResExtWall:CF1R_OpqSrfExistingRow:Jj07_RelativePosition  = {
            if (Orientation > 10) then  UNDEFINED
            else  EnumString( Orientation )  endif  }
      "Set ResExtWall:CF1R_OpqSrfExistingRow:Jj07_NotApplicableMessage"
         ResExtWall:CF1R_OpqSrfExistingRow:Jj07_NotApplicableMessage  = {
            if (Orientation <= 10) then  UNDEFINED
            else  "n/a"  endif  }
     ; ----------------------------------------------------------------------
     ; Rules to populate Existing Opaque Surfaces table rows for ALL Existing IntWalls
      "Set ResIntWall:CF1R_OpqSrfExistingRow:Jj01_PartitionName"
         ResIntWall:CF1R_OpqSrfExistingRow:Jj01_PartitionName  = {  Name  }
      "Set ResIntWall:CF1R_OpqSrfExistingRow:Jj02_ThermalZoneName"
         ResIntWall:CF1R_OpqSrfExistingRow:Jj02_ThermalZoneName  = {  Parent( Name )  }
      "Set ResIntWall:CF1R_OpqSrfExistingRow:Jj03_ConstructionAssemblyNamePerformanceRes"
         ResIntWall:CF1R_OpqSrfExistingRow:Jj03_ConstructionAssemblyNamePerformanceRes  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then exConstruction:Name
			else UNDEFINED
			endif  }
      "Set ResIntWall:CF1R_OpqSrfExistingRow:Jj04_ConstructionAssemblyType"
         ResIntWall:CF1R_OpqSrfExistingRow:Jj04_ConstructionAssemblyType  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then switch( EnumString( exConstruction:Type ) )
					  case "Wood Framed Wall"         :  "WoodFramedWall"
					  case "Steel Framed Wall"        :  "SteelFramedWall"
					  case "Concrete / ICF / Brick"   :  "ConcreteBrickICF"
					  case "Hollow Unit Masonry"      :  "HollowUnitMasonry"
					  case "Adobe / Strawbale / Log"  :  "AdobeStrawbaleLog"
					  case "SIPS Wall"                :  "SIPS_Wall"
					  case "No Frame (concrete/CMU)"  :  "NoFrameConcreteCMU"
					  case "Wood Framed Ceiling"      :  "WoodFramedCeiling"
					  case "Built-up Roof"            :  "BuiltupRoof"
					  case "SIPS Ceiling"             :  "SIPS_Ceiling"
					  case "Wood Framed Floor"        :  "WoodFramedFloor"
					  case "SIPS Floor"               :  "SIPS_Floor"
					  default  :  UNDEFINED
				 endswitch
			else UNDEFINED
			endif  }
      "Set ResIntWall:CF1R_OpqSrfExistingRow:Jj05_CavityInsulationRes"
         ResIntWall:CF1R_OpqSrfExistingRow:Jj05_CavityInsulationRes  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then switch( exConstruction:CavityRRpt )
                    case "R 11"  :  "R11"
                    case "R 13"  :  "R13"
                    case "R 15"  :  "R15"
                    case "R 19"  :  "R19"
                    case "R 21"  :  "R21"
                    case "R 22"  :  "R22"
                    case "R 23"  :  "R23"
                    case "R 24"  :  "R24"
                    case "R 25"  :  "R25"
                    case "R 30"  :  "R30"
                    case "R 38"  :  "R38"
                    case "- no insulation (vertical) -"  :  "NoInsulation"
                    case "none"  :  "NoInsulation"
                    default      :  "Other"
                 endswitch
			else UNDEFINED
			endif  }
      "Set ResIntWall:CF1R_OpqSrfExistingRow:Jj06_NotApplicableMessage"
         ResIntWall:CF1R_OpqSrfExistingRow:Jj06_NotApplicableMessage  = { "n/a" }
      "Set ResIntWall:CF1R_OpqSrfExistingRow:Jj07_NotApplicableMessage"
         ResIntWall:CF1R_OpqSrfExistingRow:Jj07_NotApplicableMessage  = { "n/a" }
     ; ----------------------------------------------------------------------
     ; Rules to populate Existing Opaque Surfaces table rows for ALL Existing CeilingBelowAttic
      "Set CeilingBelowAttic:CF1R_OpqSrfExistingRow:Jj01_PartitionName"
         CeilingBelowAttic:CF1R_OpqSrfExistingRow:Jj01_PartitionName  = {  Name  }
      "Set CeilingBelowAttic:CF1R_OpqSrfExistingRow:Jj02_ThermalZoneName"
         CeilingBelowAttic:CF1R_OpqSrfExistingRow:Jj02_ThermalZoneName  = {  Parent( Name )  }
      "Set CeilingBelowAttic:CF1R_OpqSrfExistingRow:Jj03_ConstructionAssemblyNamePerformanceRes"
         CeilingBelowAttic:CF1R_OpqSrfExistingRow:Jj03_ConstructionAssemblyNamePerformanceRes  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then exConstruction:Name
			else UNDEFINED
			endif  }
      "Set CeilingBelowAttic:CF1R_OpqSrfExistingRow:Jj04_ConstructionAssemblyType"
         CeilingBelowAttic:CF1R_OpqSrfExistingRow:Jj04_ConstructionAssemblyType  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then switch( EnumString( exConstruction:Type ) )
					  case "Wood Framed Wall"         :  "WoodFramedWall"
					  case "Steel Framed Wall"        :  "SteelFramedWall"
					  case "Concrete / ICF / Brick"   :  "ConcreteBrickICF"
					  case "Hollow Unit Masonry"      :  "HollowUnitMasonry"
					  case "Adobe / Strawbale / Log"  :  "AdobeStrawbaleLog"
					  case "SIPS Wall"                :  "SIPS_Wall"
					  case "No Frame (concrete/CMU)"  :  "NoFrameConcreteCMU"
					  case "Wood Framed Ceiling"      :  "WoodFramedCeiling"
					  case "Built-up Roof"            :  "BuiltupRoof"
					  case "SIPS Ceiling"             :  "SIPS_Ceiling"
					  case "Wood Framed Floor"        :  "WoodFramedFloor"
					  case "SIPS Floor"               :  "SIPS_Floor"
					  default  :  UNDEFINED
				 endswitch
			else UNDEFINED
			endif  }
      "Set CeilingBelowAttic:CF1R_OpqSrfExistingRow:Jj05_CavityInsulationRes"
         CeilingBelowAttic:CF1R_OpqSrfExistingRow:Jj05_CavityInsulationRes  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then switch( exConstruction:CavityRRpt )
                    case "R 11"  :  "R11"
                    case "R 13"  :  "R13"
                    case "R 15"  :  "R15"
                    case "R 19"  :  "R19"
                    case "R 21"  :  "R21"
                    case "R 22"  :  "R22"
                    case "R 23"  :  "R23"
                    case "R 24"  :  "R24"
                    case "R 25"  :  "R25"
                    case "R 30"  :  "R30"
                    case "R 38"  :  "R38"
                    case "- no insulation (vertical) -"  :  "NoInsulation"
                    case "none"  :  "NoInsulation"
                    default      :  "Other"
                 endswitch
			else UNDEFINED
			endif  }
      "Set CeilingBelowAttic:CF1R_OpqSrfExistingRow:Jj06_NotApplicableMessage"
         CeilingBelowAttic:CF1R_OpqSrfExistingRow:Jj06_NotApplicableMessage  = { "n/a" }
      "Set CeilingBelowAttic:CF1R_OpqSrfExistingRow:Jj07_NotApplicableMessage"
         CeilingBelowAttic:CF1R_OpqSrfExistingRow:Jj07_NotApplicableMessage  = { "n/a" }
     ; ----------------------------------------------------------------------
     ; Rules to populate Existing Opaque Surfaces table rows for ALL Existing ExteriorFloor
      "Set ResExtFlr:CF1R_OpqSrfExistingRow:Jj01_PartitionName"
         ResExtFlr:CF1R_OpqSrfExistingRow:Jj01_PartitionName  = {  Name  }
      "Set ResExtFlr:CF1R_OpqSrfExistingRow:Jj02_ThermalZoneName"
         ResExtFlr:CF1R_OpqSrfExistingRow:Jj02_ThermalZoneName  = {  Parent( Name )  }
      "Set ResExtFlr:CF1R_OpqSrfExistingRow:Jj03_ConstructionAssemblyNamePerformanceRes"
         ResExtFlr:CF1R_OpqSrfExistingRow:Jj03_ConstructionAssemblyNamePerformanceRes  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then exConstruction:Name
			else UNDEFINED
			endif  }
      "Set ResExtFlr:CF1R_OpqSrfExistingRow:Jj04_ConstructionAssemblyType"
         ResExtFlr:CF1R_OpqSrfExistingRow:Jj04_ConstructionAssemblyType  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then switch( EnumString( exConstruction:Type ) )
					  case "Wood Framed Wall"         :  "WoodFramedWall"
					  case "Steel Framed Wall"        :  "SteelFramedWall"
					  case "Concrete / ICF / Brick"   :  "ConcreteBrickICF"
					  case "Hollow Unit Masonry"      :  "HollowUnitMasonry"
					  case "Adobe / Strawbale / Log"  :  "AdobeStrawbaleLog"
					  case "SIPS Wall"                :  "SIPS_Wall"
					  case "No Frame (concrete/CMU)"  :  "NoFrameConcreteCMU"
					  case "Wood Framed Ceiling"      :  "WoodFramedCeiling"
					  case "Built-up Roof"            :  "BuiltupRoof"
					  case "SIPS Ceiling"             :  "SIPS_Ceiling"
					  case "Wood Framed Floor"        :  "WoodFramedFloor"
					  case "SIPS Floor"               :  "SIPS_Floor"
					  default  :  UNDEFINED
				 endswitch
			else UNDEFINED
			endif  }
      "Set ResExtFlr:CF1R_OpqSrfExistingRow:Jj05_CavityInsulationRes"
         ResExtFlr:CF1R_OpqSrfExistingRow:Jj05_CavityInsulationRes  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then switch( exConstruction:CavityRRpt )
                    case "R 11"  :  "R11"
                    case "R 13"  :  "R13"
                    case "R 15"  :  "R15"
                    case "R 19"  :  "R19"
                    case "R 21"  :  "R21"
                    case "R 22"  :  "R22"
                    case "R 23"  :  "R23"
                    case "R 24"  :  "R24"
                    case "R 25"  :  "R25"
                    case "R 30"  :  "R30"
                    case "R 38"  :  "R38"
                    case "- no insulation (vertical) -"  :  "NoInsulation"
                    case "none"  :  "NoInsulation"
                    default      :  "Other"
                 endswitch
			else UNDEFINED
			endif  }
      "Set ResExtFlr:CF1R_OpqSrfExistingRow:Jj06_NotApplicableMessage"
         ResExtFlr:CF1R_OpqSrfExistingRow:Jj06_NotApplicableMessage  = { "n/a" }
      "Set ResExtFlr:CF1R_OpqSrfExistingRow:Jj07_NotApplicableMessage"
         ResExtFlr:CF1R_OpqSrfExistingRow:Jj07_NotApplicableMessage  = { "n/a" }
     ; ----------------------------------------------------------------------
     ; Rules to populate Existing Opaque Surfaces table rows for ALL Existing FloorOverCrawl
      "Set FloorOverCrawl:CF1R_OpqSrfExistingRow:Jj01_PartitionName"
         FloorOverCrawl:CF1R_OpqSrfExistingRow:Jj01_PartitionName  = {  Name  }
      "Set FloorOverCrawl:CF1R_OpqSrfExistingRow:Jj02_ThermalZoneName"
         FloorOverCrawl:CF1R_OpqSrfExistingRow:Jj02_ThermalZoneName  = {  Parent( Name )  }
      "Set FloorOverCrawl:CF1R_OpqSrfExistingRow:Jj03_ConstructionAssemblyNamePerformanceRes"
         FloorOverCrawl:CF1R_OpqSrfExistingRow:Jj03_ConstructionAssemblyNamePerformanceRes  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then exConstruction:Name
			else UNDEFINED
			endif  }
      "Set FloorOverCrawl:CF1R_OpqSrfExistingRow:Jj04_ConstructionAssemblyType"
         FloorOverCrawl:CF1R_OpqSrfExistingRow:Jj04_ConstructionAssemblyType  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then switch( EnumString( exConstruction:Type ) )
					  case "Wood Framed Wall"         :  "WoodFramedWall"
					  case "Steel Framed Wall"        :  "SteelFramedWall"
					  case "Concrete / ICF / Brick"   :  "ConcreteBrickICF"
					  case "Hollow Unit Masonry"      :  "HollowUnitMasonry"
					  case "Adobe / Strawbale / Log"  :  "AdobeStrawbaleLog"
					  case "SIPS Wall"                :  "SIPS_Wall"
					  case "No Frame (concrete/CMU)"  :  "NoFrameConcreteCMU"
					  case "Wood Framed Ceiling"      :  "WoodFramedCeiling"
					  case "Built-up Roof"            :  "BuiltupRoof"
					  case "SIPS Ceiling"             :  "SIPS_Ceiling"
					  case "Wood Framed Floor"        :  "WoodFramedFloor"
					  case "SIPS Floor"               :  "SIPS_Floor"
					  default  :  UNDEFINED
				 endswitch
			else UNDEFINED
			endif  }
      "Set FloorOverCrawl:CF1R_OpqSrfExistingRow:Jj05_CavityInsulationRes"
         FloorOverCrawl:CF1R_OpqSrfExistingRow:Jj05_CavityInsulationRes  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then switch( exConstruction:CavityRRpt )
                    case "R 11"  :  "R11"
                    case "R 13"  :  "R13"
                    case "R 15"  :  "R15"
                    case "R 19"  :  "R19"
                    case "R 21"  :  "R21"
                    case "R 22"  :  "R22"
                    case "R 23"  :  "R23"
                    case "R 24"  :  "R24"
                    case "R 25"  :  "R25"
                    case "R 30"  :  "R30"
                    case "R 38"  :  "R38"
                    case "- no insulation (vertical) -"  :  "NoInsulation"
                    case "none"  :  "NoInsulation"
                    default      :  "Other"
                 endswitch
			else UNDEFINED
			endif  }
      "Set FloorOverCrawl:CF1R_OpqSrfExistingRow:Jj06_NotApplicableMessage"
         FloorOverCrawl:CF1R_OpqSrfExistingRow:Jj06_NotApplicableMessage  = { "n/a" }
      "Set FloorOverCrawl:CF1R_OpqSrfExistingRow:Jj07_NotApplicableMessage"
         FloorOverCrawl:CF1R_OpqSrfExistingRow:Jj07_NotApplicableMessage  = { "n/a" }
     ; ----------------------------------------------------------------------
     ; Rules to populate Existing Opaque Surfaces table rows for ALL Existing UndergroundWall
      "Set UndWall:CF1R_OpqSrfExistingRow:Jj01_PartitionName"
         UndWall:CF1R_OpqSrfExistingRow:Jj01_PartitionName  = {  Name  }
      "Set UndWall:CF1R_OpqSrfExistingRow:Jj02_ThermalZoneName"
         UndWall:CF1R_OpqSrfExistingRow:Jj02_ThermalZoneName  = {  Parent( Name )  }
      "Set UndWall:CF1R_OpqSrfExistingRow:Jj03_ConstructionAssemblyNamePerformanceRes"
         UndWall:CF1R_OpqSrfExistingRow:Jj03_ConstructionAssemblyNamePerformanceRes  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then exConstruction:Name
			else UNDEFINED
			endif  }
      "Set UndWall:CF1R_OpqSrfExistingRow:Jj04_ConstructionAssemblyType"
         UndWall:CF1R_OpqSrfExistingRow:Jj04_ConstructionAssemblyType  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then switch( EnumString( exConstruction:Type ) )
					  case "Wood Framed Wall"         :  "WoodFramedWall"
					  case "Steel Framed Wall"        :  "SteelFramedWall"
					  case "Concrete / ICF / Brick"   :  "ConcreteBrickICF"
					  case "Hollow Unit Masonry"      :  "HollowUnitMasonry"
					  case "Adobe / Strawbale / Log"  :  "AdobeStrawbaleLog"
					  case "SIPS Wall"                :  "SIPS_Wall"
					  case "No Frame (concrete/CMU)"  :  "NoFrameConcreteCMU"
					  case "Wood Framed Ceiling"      :  "WoodFramedCeiling"
					  case "Built-up Roof"            :  "BuiltupRoof"
					  case "SIPS Ceiling"             :  "SIPS_Ceiling"
					  case "Wood Framed Floor"        :  "WoodFramedFloor"
					  case "SIPS Floor"               :  "SIPS_Floor"
					  default  :  UNDEFINED
				 endswitch
			else UNDEFINED
			endif  }
      "Set UndWall:CF1R_OpqSrfExistingRow:Jj05_CavityInsulationRes"
         UndWall:CF1R_OpqSrfExistingRow:Jj05_CavityInsulationRes  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then switch( exConstruction:CavityRRpt )
                    case "R 11"  :  "R11"
                    case "R 13"  :  "R13"
                    case "R 15"  :  "R15"
                    case "R 19"  :  "R19"
                    case "R 21"  :  "R21"
                    case "R 22"  :  "R22"
                    case "R 23"  :  "R23"
                    case "R 24"  :  "R24"
                    case "R 25"  :  "R25"
                    case "R 30"  :  "R30"
                    case "R 38"  :  "R38"
                    case "- no insulation (vertical) -"  :  "NoInsulation"
                    case "none"  :  "NoInsulation"
                    default      :  "Other"
                 endswitch
			else UNDEFINED
			endif  }
      "Set UndWall:CF1R_OpqSrfExistingRow:Jj06_NotApplicableMessage"
         UndWall:CF1R_OpqSrfExistingRow:Jj06_NotApplicableMessage  = { "n/a" }
      "Set UndWall:CF1R_OpqSrfExistingRow:Jj07_NotApplicableMessage"
         UndWall:CF1R_OpqSrfExistingRow:Jj07_NotApplicableMessage  = { "n/a" }
     ; ----------------------------------------------------------------------
     ; Rules to populate Existing Opaque Surfaces table rows for ALL Existing InteriorCeiling
      "Set InteriorCeiling:CF1R_OpqSrfExistingRow:Jj01_PartitionName"
         InteriorCeiling:CF1R_OpqSrfExistingRow:Jj01_PartitionName  = {  Name  }
      "Set InteriorCeiling:CF1R_OpqSrfExistingRow:Jj02_ThermalZoneName"
         InteriorCeiling:CF1R_OpqSrfExistingRow:Jj02_ThermalZoneName  = {  Parent( Name )  }
      "Set InteriorCeiling:CF1R_OpqSrfExistingRow:Jj03_ConstructionAssemblyNamePerformanceRes"
         InteriorCeiling:CF1R_OpqSrfExistingRow:Jj03_ConstructionAssemblyNamePerformanceRes  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then exConstruction:Name
			else UNDEFINED
			endif  }
      "Set InteriorCeiling:CF1R_OpqSrfExistingRow:Jj04_ConstructionAssemblyType"
         InteriorCeiling:CF1R_OpqSrfExistingRow:Jj04_ConstructionAssemblyType  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then switch( EnumString( exConstruction:Type ) )
					  case "Wood Framed Wall"         :  "WoodFramedWall"
					  case "Steel Framed Wall"        :  "SteelFramedWall"
					  case "Concrete / ICF / Brick"   :  "ConcreteBrickICF"
					  case "Hollow Unit Masonry"      :  "HollowUnitMasonry"
					  case "Adobe / Strawbale / Log"  :  "AdobeStrawbaleLog"
					  case "SIPS Wall"                :  "SIPS_Wall"
					  case "No Frame (concrete/CMU)"  :  "NoFrameConcreteCMU"
					  case "Wood Framed Ceiling"      :  "WoodFramedCeiling"
					  case "Built-up Roof"            :  "BuiltupRoof"
					  case "SIPS Ceiling"             :  "SIPS_Ceiling"
					  case "Wood Framed Floor"        :  "WoodFramedFloor"
					  case "SIPS Floor"               :  "SIPS_Floor"
					  default  :  UNDEFINED
				 endswitch
			else UNDEFINED
			endif  }
      "Set InteriorCeiling:CF1R_OpqSrfExistingRow:Jj05_CavityInsulationRes"
         InteriorCeiling:CF1R_OpqSrfExistingRow:Jj05_CavityInsulationRes  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then switch( exConstruction:CavityRRpt )
                    case "R 11"  :  "R11"
                    case "R 13"  :  "R13"
                    case "R 15"  :  "R15"
                    case "R 19"  :  "R19"
                    case "R 21"  :  "R21"
                    case "R 22"  :  "R22"
                    case "R 23"  :  "R23"
                    case "R 24"  :  "R24"
                    case "R 25"  :  "R25"
                    case "R 30"  :  "R30"
                    case "R 38"  :  "R38"
                    case "- no insulation (vertical) -"  :  "NoInsulation"
                    case "none"  :  "NoInsulation"
                    default      :  "Other"
                 endswitch
			else UNDEFINED
			endif  }
      "Set InteriorCeiling:CF1R_OpqSrfExistingRow:Jj06_NotApplicableMessage"
         InteriorCeiling:CF1R_OpqSrfExistingRow:Jj06_NotApplicableMessage  = { "n/a" }
      "Set InteriorCeiling:CF1R_OpqSrfExistingRow:Jj07_NotApplicableMessage"
         InteriorCeiling:CF1R_OpqSrfExistingRow:Jj07_NotApplicableMessage  = { "n/a" }
     ; ----------------------------------------------------------------------
     ; Rules to populate Existing Opaque Surfaces table rows for ALL Existing InteriorFloor
      "Set ResIntFlr:CF1R_OpqSrfExistingRow:Jj01_PartitionName"
         ResIntFlr:CF1R_OpqSrfExistingRow:Jj01_PartitionName  = {  Name  }
      "Set ResIntFlr:CF1R_OpqSrfExistingRow:Jj02_ThermalZoneName"
         ResIntFlr:CF1R_OpqSrfExistingRow:Jj02_ThermalZoneName  = {  Parent( Name )  }
      "Set ResIntFlr:CF1R_OpqSrfExistingRow:Jj03_ConstructionAssemblyNamePerformanceRes"
         ResIntFlr:CF1R_OpqSrfExistingRow:Jj03_ConstructionAssemblyNamePerformanceRes  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then exConstruction:Name
			else UNDEFINED
			endif  }
      "Set ResIntFlr:CF1R_OpqSrfExistingRow:Jj04_ConstructionAssemblyType"
         ResIntFlr:CF1R_OpqSrfExistingRow:Jj04_ConstructionAssemblyType  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then switch( EnumString( exConstruction:Type ) )
					  case "Wood Framed Wall"         :  "WoodFramedWall"
					  case "Steel Framed Wall"        :  "SteelFramedWall"
					  case "Concrete / ICF / Brick"   :  "ConcreteBrickICF"
					  case "Hollow Unit Masonry"      :  "HollowUnitMasonry"
					  case "Adobe / Strawbale / Log"  :  "AdobeStrawbaleLog"
					  case "SIPS Wall"                :  "SIPS_Wall"
					  case "No Frame (concrete/CMU)"  :  "NoFrameConcreteCMU"
					  case "Wood Framed Ceiling"      :  "WoodFramedCeiling"
					  case "Built-up Roof"            :  "BuiltupRoof"
					  case "SIPS Ceiling"             :  "SIPS_Ceiling"
					  case "Wood Framed Floor"        :  "WoodFramedFloor"
					  case "SIPS Floor"               :  "SIPS_Floor"
					  default  :  UNDEFINED
				 endswitch
			else UNDEFINED
			endif  }
      "Set ResIntFlr:CF1R_OpqSrfExistingRow:Jj05_CavityInsulationRes"
         ResIntFlr:CF1R_OpqSrfExistingRow:Jj05_CavityInsulationRes  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then switch( exConstruction:CavityRRpt )
                    case "R 11"  :  "R11"
                    case "R 13"  :  "R13"
                    case "R 15"  :  "R15"
                    case "R 19"  :  "R19"
                    case "R 21"  :  "R21"
                    case "R 22"  :  "R22"
                    case "R 23"  :  "R23"
                    case "R 24"  :  "R24"
                    case "R 25"  :  "R25"
                    case "R 30"  :  "R30"
                    case "R 38"  :  "R38"
                    case "- no insulation (vertical) -"  :  "NoInsulation"
                    case "none"  :  "NoInsulation"
                    default      :  "Other"
                 endswitch
			else UNDEFINED
			endif  }
      "Set ResIntFlr:CF1R_OpqSrfExistingRow:Jj06_NotApplicableMessage"
         ResIntFlr:CF1R_OpqSrfExistingRow:Jj06_NotApplicableMessage  = { "n/a" }
      "Set ResIntFlr:CF1R_OpqSrfExistingRow:Jj07_NotApplicableMessage"
         ResIntFlr:CF1R_OpqSrfExistingRow:Jj07_NotApplicableMessage  = { "n/a" }

  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL Existing Opaque Surface table rows
   "Set cf1rtblRowOpaqueSurfaceExisting parent"   cf1rtblRowOpaqueSurfaceExisting:Parent  = {
         cf1rTableOpaqueSurfacesExisting:Name  }
  ; END of Existing Opaque Surfaces table rules
  ; ----------------------------------------------------------------------
  ; Rule to Delete empty Existing Opaque Surface table
   "DELETE empty cf1rTableOpaqueSurfacesExisting object"
      cf1rSection_Jj:Action   = {  if (ComponentCount( cf1rtblRowOpaqueSurfaceExisting ) < 1) then  DeleteComp()  else  UNCHANGED  endif }
  ; ----------------------------------------------------------------------


  ; ----------------------------------------------------------------------
  ; Section_CCeilingVA CATHEDRAL CEILING - VERIFIED AND ALTERED table only if Cathedral Ceilings exist in the project
   "Call subordinate rulelist to handle Section_CCeilingVA Cathedral Ceilings"
      ResProj:Action   = {  if ( ComponentCount( CathedralCeiling ) > 0 ) then  EvalRulelist( "CF1RPRF01E_Section_CCeilingVA" )
                            else  UNCHANGED  endif }


  ; ----------------------------------------------------------------------
  ; Section_AtticVA ATTIC - VERIFIED & ALTERED table only if Attics exist in the project
   "Call subordinate rulelist to handle Section_AtticVA Attics"
      ResProj:Action   = {  if ( ComponentCount( Attic ) > 0 ) then  EvalRulelist( "CF1RPRF01E_cf1rSection_AtticVA_Proposed" )
                            else  UNCHANGED  endif }

  ; ----------------------------------------------------------------------
  ; Section_Kk FENESTRATION/ GLAZING - VERIFIED & ALTERED table
   "Create & initialize new cf1rSection_Kk object"
      cf1rCF1RPRF01E:Action  = {  if (ResProj:RunScope != 2) then  UNCHANGED
                                  else  CreateChildren( cf1rSection_Kk, 1, "Section_Kk" )  endif  }     ; no init needed
   "Create & initialize new cf1rTableGlazingExisting object"
      cf1rSection_Kk:Action   = {  CreateChildren( cf1rTableGlazingExisting, 1, "TableGlazingExisting" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual Existing Glazing table rows
;   "Create cf1rtblRowGlazingExisting for all altered and verified Windows"
 ;     ResWin:CF1R_GlazingRowExisting   = {  CreateComp( cf1rtblRowGlazingExisting, Name + "exWindowRow" )  }
   "Create cf1rtblRowGlazingExisting for all altered and verified Windows"
      ResWin:CF1R_GlazingRowExisting   = {  
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  UNDEFINED
            else if (IsAltered .AND. IsVerified)
            then  CreateComp( cf1rtblRowGlazingExisting, Name + "exWindowRow" )
            else  UNDEFINED
            endif endif endif  }
  ; Rules to populate Glazing table rows for ALL Existing Windows
      "Set ResWin:CF1R_GlazingRowExisting:Kk01_FenestrationName" ResWin:CF1R_GlazingRowExisting:Kk01_FenestrationName  = {  Name  }
      "Set ResWin:CF1R_GlazingRowExisting:Kk02_PartitionName" ResWin:CF1R_GlazingRowExisting:Kk02_PartitionName  = {  Parent( Name )  }
      "Set ResWin:CF1R_GlazingRowExisting:Kk03_Width" ResWin:CF1R_GlazingRowExisting:Kk03_Width  = {  exWidth  }
      "Set ResWin:CF1R_GlazingRowExisting:Kk03_NotApplicableMessage" ResWin:CF1R_GlazingRowExisting:Kk03_NotApplicableMessage  = { if ( LocalStatus ( CF1R_GlazingRowExisting:Kk03_Width ) < 1 ) then "n/a" else UNDEFINED endif  }
      "Set ResWin:CF1R_GlazingRowExisting:Kk04_Height" ResWin:CF1R_GlazingRowExisting:Kk04_Height  = {  exHeight  }
      "Set ResWin:CF1R_GlazingRowExisting:Kk04_NotApplicableMessage" ResWin:CF1R_GlazingRowExisting:Kk04_NotApplicableMessage  = { if ( LocalStatus ( CF1R_GlazingRowExisting:Kk04_Height ) < 1 ) then "n/a" else UNDEFINED endif  }
      "Set ResWin:CF1R_GlazingRowExisting:Kk05_FenestrationIdenticalCount" ResWin:CF1R_GlazingRowExisting:Kk05_FenestrationIdenticalCount  = {  exMultiplier  }
      "Set ResWin:CF1R_GlazingRowExisting:Kk06_WindowArea" ResWin:CF1R_GlazingRowExisting:Kk06_WindowArea  = {  exArea  }
      "Set ResWin:CF1R_GlazingRowExisting:Kk07_UFactor" ResWin:CF1R_GlazingRowExisting:Kk07_UFactor  = {  exNFRCUfactor  }
      "Set ResWin:CF1R_GlazingRowExisting:Kk08_SHGC" ResWin:CF1R_GlazingRowExisting:Kk08_SHGC  = {  exNFRCSHGC  }
      "Set ResWin:CF1R_GlazingRowExisting:Kk09_ExternalShadingObjectType" ResWin:CF1R_GlazingRowExisting:Kk09_ExternalShadingObjectType  = { 
                                                                                                                           switch( EnumString( exExteriorShade ) )
                                                                                                                              case "None"                    :  "NoExternalShadingDevice"
                                                                                                                              case "Insect Screen (default)" :  "StandardBugScreen"
                                                                                                                              default  :  UNDEFINED
                                                                                                                           endswitch  }
      "Set ResWin:CF1R_GlazingRowExisting:Kk09_NotApplicableMessage" ResWin:CF1R_GlazingRowExisting:Kk09_NotApplicableMessage  = { if ( LocalStatus ( CF1R_GlazingRowExisting:Kk09_ExternalShadingObjectType ) < 1 ) then "n/a" else UNDEFINED endif  }
      "Set ResWin:CF1R_GlazingRowExisting:Kk10_Azimuth" ResWin:CF1R_GlazingRowExisting:Kk10_Azimuth  = {  atof( Format( "%.2f", Azimuth ) )  }

;   "Create cf1rtblRowGlazingExisting for all Skylights"
;      ResSkylt:CF1R_GlazingRowExisting   = {  CreateComp( cf1rtblRowGlazingExisting, Name + "exSkylightRow" )  }
   "Create cf1rtblRowGlazingExisting for all Skylights"
      ResSkylt:CF1R_GlazingRowExisting   = {  
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  UNDEFINED
            else if (IsAltered .AND. IsVerified)
            then  CreateComp( cf1rtblRowGlazingExisting, Name + "exSkylightRow" )
            else  UNDEFINED
            endif endif endif  }
  ; Rules to populate Glazing table rows for ALL Windows
      "Set ResSkylt:CF1R_GlazingRowExisting:Kk01_FenestrationName" ResSkylt:CF1R_GlazingRowExisting:Kk01_FenestrationName  = {  Name  }
      "Set ResSkylt:CF1R_GlazingRowExisting:Kk02_PartitionName" ResSkylt:CF1R_GlazingRowExisting:Kk02_PartitionName  = {  Parent( Name )  }

      "Set ResSkylt:CF1R_GlazingRowExisting:Kk03_NotApplicableMessage" ResSkylt:CF1R_GlazingRowExisting:Kk03_NotApplicableMessage  = { if ( LocalStatus ( CF1R_GlazingRowExisting:Kk03_Width ) < 1 ) then "n/a" else UNDEFINED endif  }

      "Set ResSkylt:CF1R_GlazingRowExisting:Kk04_NotApplicableMessage" ResSkylt:CF1R_GlazingRowExisting:Kk04_NotApplicableMessage  = { if ( LocalStatus ( CF1R_GlazingRowExisting:Kk04_Height ) < 1 ) then "n/a" else UNDEFINED endif  }
     ; RJH 4/20/2020 added output of Skylt:Multiplier for EAA assuming all skylights of a given type are altered since exMultiplier is not output for Skylt (tic #1207)
      "Set ResSkylt:CF1R_GlazingRowExisting:Kk05_FenestrationIdenticalCount" ResSkylt:CF1R_GlazingRowExisting:Kk05_FenestrationIdenticalCount  = {  Multiplier  }
      "Set ResSkylt:CF1R_GlazingRowExisting:Kk06_WindowArea" ResSkylt:CF1R_GlazingRowExisting:Kk06_WindowArea  = {  exArea  }
      "Set ResSkylt:CF1R_GlazingRowExisting:Kk07_UFactor" ResSkylt:CF1R_GlazingRowExisting:Kk07_UFactor  = {  exNFRCUfactor  }
      "Set ResSkylt:CF1R_GlazingRowExisting:Kk08_SHGC" ResSkylt:CF1R_GlazingRowExisting:Kk08_SHGC  = {  exNFRCSHGC  }

      "Set ResSkylt:CF1R_GlazingRowExisting:Kk09_NotApplicableMessage" ResSkylt:CF1R_GlazingRowExisting:Kk09_NotApplicableMessage  = { if ( LocalStatus ( CF1R_GlazingRowExisting:Kk09_ExternalShadingObjectType ) < 1 ) then "n/a" else UNDEFINED endif  }
      "Set ResSkylt:CF1R_GlazingRowExisting:Kk10_Azimuth" ResSkylt:CF1R_GlazingRowExisting:Kk10_Azimuth  = {  atof( Format( "%.2f", Azimuth ) )  }

  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL existing Glazing table rows
   "Set cf1rtblRowGlazingExisting parent"   cf1rtblRowGlazingExisting:Parent  = { cf1rTableGlazingExisting:Name  }
  ; END of existing Glazing table rules
  ; ----------------------------------------------------------------------
  ; Rule to Delete empty Existing Glazing table
   "DELETE empty cf1rTableGlazingExisting object"
      cf1rSection_Kk:Action   = {  if (ComponentCount( cf1rtblRowGlazingExisting ) < 1) then  DeleteComp()  else  UNCHANGED  endif }
  ; ----------------------------------------------------------------------


  ; ----------------------------------------------------------------------
  ; Section_Ll Existing Opaque Door table only if Doors exist in the project
   "Call subordinate rulelist to handle Section_Ll Doors"
      ResProj:Action   = {  if ( ComponentCount( Door ) > 0 ) then  EvalRulelist( "CF1RPRF01E_cf1rSection_Ll_Proposed" )
                            else  UNCHANGED  endif }


  ; ----------------------------------------------------------------------
  ; Section_OverhangVA Existing Overhangs and Fins table only if REQUIRED SPECIAL FEATURES includes Window overhangs and/or fins AND THEN only for Windows where ShowFinsOverhang == 1
   "Call subordinate rulelist to handle Section_OverhangVA Overhangs and Fins"
      ResProj:Action   = {  if ( SpeclFeatrs:WinOVerHngFin == 1 ) then  EvalRulelist( "CF1RPRF01E_cf1rSection_OverhangVA_Proposed" )
                            else  UNCHANGED  endif }


  ; ----------------------------------------------------------------------
  ; Section_Mm SLAB FLOORS  - VERIFIED & ALTERED table
   "Create & initialize new cf1rSection_Mm object"
      cf1rCF1RPRF01E:Action  = {  if (ResProj:RunScope != 2) then  UNCHANGED
                                  else  CreateChildren( cf1rSection_Mm, 1, "Section_Mm" )  endif  }     ; no init needed
   "Create & initialize new cf1rTableSlabFloorExisting object"
      cf1rSection_Mm:Action   = {  CreateChildren( cf1rTableSlabFloorExisting, 1, "TableSlabFloorExisting" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual existing Slab Floor table rows
   "Create cf1rtblRowSlabFloorExisting for all existing SlabFloor types"
      SlabFloor:CF1R_SlabFloorRowExisting   = {  
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  UNDEFINED
            else if (IsAltered .AND. IsVerified)
            then  CreateComp( cf1rtblRowSlabFloorExisting, Name + " SF-SlabFlRow" )
            else  UNDEFINED
            endif endif endif  }
   ; ----------------------------------------------------------------------
   ; Rules to populate Slab Floor table rows for all relevant SlabFloor instances
    "Set SlabFloor:CF1R_SlabFloorRowExisting:Mm01_PartitionName" SlabFloor:CF1R_SlabFloorRowExisting:Mm01_PartitionName  = {  Name  }
    "Set SlabFloor:CF1R_SlabFloorRowExisting:Mm02_ThermalZoneName" SlabFloor:CF1R_SlabFloorRowExisting:Mm02_ThermalZoneName  = {  Parent( Name )  }
    "Set SlabFloor:CF1R_SlabFloorRowExisting:Mm03a_SlabInsulationThermalResistance" 
	   SlabFloor:CF1R_SlabFloorRowExisting:Mm03a_SlabInsulationThermalResistance  =        ; check for insul existence (checkbox) before mapping enum - SAC 08/24/20
      {  if (IfValidAnd( exEdgeInsulation > 0 )==0) then  "R0"  else
         switch( EnumString( exEdgeInsulOption ) )
				case "- none -"        :  "R0"
				case "R-5, 8 inches"   :  "R5"
				case "R-7, 8 inches"   :  "R7"
				case "R-10, 8 inches"  :  "R10"
				case "R-5, 16 inches"  :  "R5"
				case "R-7, 16 inches"  :  "R7"
				case "R-10, 16 inches" :  "R10"
				case "R-5, 2 feet"     :  "R5"
				case "R-7, 2 feet"     :  "R7"
				case "R-10, 2 feet"    :  "R10"
				case "R-15, 2 feet"    :  "R15"
				case "R-5, 4 feet"     :  "R5"
				case "R-7, 4 feet"     :  "R7"
				case "R-10, 4 feet"    :  "R10"
				case "R-15, 4 feet"    :  "R15"
				case "R-20, 4 feet"    :  "R20"
				default                :  UNDEFINED
			endswitch  endif  }
    "Set SlabFloor:CF1R_SlabFloorRowExisting:Mm03b_SlabInsulationVerticalILength" 
	   SlabFloor:CF1R_SlabFloorRowExisting:Mm03b_SlabInsulationVerticalILength  =       ; check for insul existence (checkbox) before mapping enum - SAC 08/24/20
      {  if (IfValidAnd( exEdgeInsulation > 0 )==0) then  0  else
         switch( EnumString( exEdgeInsulOption ) )
				case "- none -"        :  0
				case "R-5, 8 inches"   :  8
				case "R-7, 8 inches"   :  8
				case "R-10, 8 inches"  :  8
				case "R-5, 16 inches"  :  16
				case "R-7, 16 inches"  :  16
				case "R-10, 16 inches" :  16
				case "R-5, 2 feet"     :  24
				case "R-7, 2 feet"     :  24
				case "R-10, 2 feet"    :  24
				case "R-15, 2 feet"    :  24
				case "R-5, 4 feet"     :  48
				case "R-7, 4 feet"     :  48
				case "R-10, 4 feet"    :  48
				case "R-15, 4 feet"    :  48
				case "R-20, 4 feet"    :  48
				default                :  UNDEFINED
			endswitch  endif  }
    "Set SlabFloor:CF1R_SlabFloorRowExisting:Mm04_SlabSurface"
       SlabFloor:CF1R_SlabFloorRowExisting:Mm04_SlabSurface  = {  
		    switch( EnumString( exSurface ) )
                case "Default (80% carpeted/covered, 20% exposed)"  :  "DefaultCoverage"
                case "Carpeted"                                     :  "Carpeted"
                case "Exposed"                                      :  "Exposed"
                default                                             :  UNDEFINED
            endswitch  }
     "Set SlabFloor:CF1R_SlabFloorRowExisting:Mm04_NotApplicableMessage" SlabFloor:CF1R_SlabFloorRowExisting:Mm04_NotApplicableMessage  = { if ( LocalStatus ( CF1R_SlabFloorRowExisting:Mm04_SlabSurface ) < 1 ) then "n/a" else UNDEFINED endif  }
  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL Existing Slab Floor table rows
   "Set cf1rtblRowSlabFloorExisting parent"   cf1rtblRowSlabFloorExisting:Parent  = {
         cf1rTableSlabFloorExisting:Name  }
  ; END of Existing Slab Floor table rules
  ; ----------------------------------------------------------------------
  ; Rule to Delete empty Existing Slab Floor table
   "DELETE empty cf1rTableSlabFloorExisting object"
      cf1rSection_Mm:Action   = {  if (ComponentCount( cf1rtblRowSlabFloorExisting ) < 1) then  DeleteComp()  else  UNCHANGED  endif }
  ; ----------------------------------------------------------------------


  ; ----------------------------------------------------------------------
  ; Section_Nn BUILDING ENVELOPE LEAKAGE  - VERIFIED & ALTERED table
   "Create & initialize new cf1rSection_Nn object"
      cf1rCF1RPRF01E:Action  = {  if (ResProj:RunScope != 2) then  UNCHANGED
                                  else  CreateChildren( cf1rSection_Nn, 1, "Section_Nn" )  endif  }     ; no init needed
   "Create & initialize new cf1rTableEnvelopeLeakageExisting object"
      cf1rSection_Nn:Action   = {  CreateChildren( cf1rTableEnvelopeLeakageExisting, 1, "TableEnvelopeLeakageExisting" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual TableEnvelopeLeakageExisting table rows (although since this is a Project level property there should only be one row)
   "Create cf1rtblRowEnvelopeLeakageExisting for the one Project"
      ResProj:CF1R_RowEnvelopeLeakageExisting   = {  
            if (RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (Status = 2 .AND. IsVerified)
            then  CreateComp( cf1rtblRowEnvelopeLeakageExisting, Name + " EnvelopeLeakageExisting" )
            else  UNDEFINED
            endif endif  }
   ; ----------------------------------------------------------------------
   ; Rules to populate TableEnvelopeLeakageExisting table rows for all relevant SlabFloor instances
    "Set ResProj:CF1R_RowEnvelopeLeakageExisting:Nn01_ACH50Existing"    ResProj:CF1R_RowEnvelopeLeakageExisting:Nn01_ACH50Existing  = { atof( Format( "%.2f", exACH50 ) ) }
    "Set ResProj:CF1R_RowEnvelopeLeakageExisting:Nn02_ACH50Altered"    ResProj:CF1R_RowEnvelopeLeakageExisting:Nn02_ACH50Altered  = { atof( Format( "%.2f", ACH50 ) ) }
  ; ----------------------------------------------------------------------
  ; Rule to set Parent for TableEnvelopeLeakageExisting table rows
   "Set cf1rtblRowEnvelopeLeakageExisting parent"   cf1rtblRowEnvelopeLeakageExisting:Parent  = {
         cf1rTableEnvelopeLeakageExisting:Name  }
  ; END of TableEnvelopeLeakageExisting table rules
  ; ----------------------------------------------------------------------
  ; Rule to Delete empty TableEnvelopeLeakageExisting table
   "DELETE empty cf1rTableEnvelopeLeakageExisting object"
      cf1rSection_Nn:Action   = {  if (ComponentCount( cf1rtblRowEnvelopeLeakageExisting ) < 1) then  DeleteComp()  else  UNCHANGED  endif }
  ; ----------------------------------------------------------------------

  ; ----------------------------------------------------------------------
  ; Section_Pp HVAC DISTRIBUTION SYSTEMS  - VERIFIED & ALTERED Table
   "Create & initialize new cf1rSection_Pp object"
      cf1rCF1RPRF01E:Action  = {  if (ResProj:RunScope != 2) then  UNCHANGED
                                  else  CreateChildren( cf1rSection_Pp, 1, "Section_Pp" )  endif  }     ; no init needed

   "Call subordinate rulelist to populate table"
      ResProj:Action   = { EvalRulelist( "CF1RPRF01E_cf1rSection_Pp_Proposed" )  }
  ; ----------------------------------------------------------------------

  ; ----------------------------------------------------------------------
  ; Section_Oo HVAC SYSTEMS  - VERIFIED & ALTERED Table
   "Create & initialize new cf1rSection_Oo object"
      cf1rCF1RPRF01E:Action = {  if (ResProj:RunScope != 2) then  UNCHANGED
                                 else  CreateChildren( cf1rSection_Oo, 1, "Section_Oo" )  endif  }

   "Create & initialize new cf1rTableSpaceConditioningExisting object"
      cf1rSection_Oo:Action = {  CreateChildren( cf1rTableSpaceConditioningExisting, 1, "TableSpaceConditioningExisting" )  } 

  ; ----------------------------------------------------------------------
  ; Rules to create individual existing HVAC SYSTEMS table rows
   "Create cf1rtblRowSpcCondEx for all IsAltered and IsVerified HVAC SYSTEMS"    ; SAC 5/2/19 - mod to report Existing, not Altered, systems
      HVACSys:CF1R_RowSpcCondEx = { 
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
        ;    else if (IsAltered .AND. IsVerified)
        ;    else if (IsExisting .AND. IfValidAnd( FloorAreaSrvdInclV > 0 ))
            else if (IsExisting .AND. IfValidAnd( FloorAreaSrvdInclV > 0 ) .AND. IfValidAnd( FloorAreaServed[1] = 0 ))  ; RJH 6/15/20 tic #1205
            then  CreateComp( cf1rtblRowSpcCondEx, Name + " RowSpcCondEx" )
            else  UNDEFINED
            endif endif  }

   ; ----------------------------------------------------------------------
   ; Rules to populate TableSpaceConditioningExisting table rows for all relevant HVAC SYSTEMS instances
    "Set HVACSys:CF1R_RowSpcCondEx:Oo01_ResidentialSpaceConditioningSystemName"    HVACSys:CF1R_RowSpcCondEx:Oo01_ResidentialSpaceConditioningSystemName  = { Name }
    "Set HVACSys:CF1R_RowSpcCondEx:Oo02_ResidentialSpaceConditioningSystemType"    HVACSys:CF1R_RowSpcCondEx:Oo02_ResidentialSpaceConditioningSystemType  = { 
            switch (EnumString( Type ))
               case "Heat Pump Heating and Cooling System"                       :  "HeatPumpHeatingCooling"
               case "Variable Outdoor Air Ventilation Central Heat/Cool System"  :  "VariableOA_VentilationCentralHeatingCooling"
               case "Other Heating and Cooling System"                           :  "HeatingCoolingSystemOther"
               default :  UNDEFINED
            endswitch  }

   "Create new cf1rOoHeating child object"
;      HVACSys:CF1R_OoHeating  = {   if (IsAltered .AND. IsVerified .AND. NumHeatSystemTypes >= 1 .AND. LocalCompAssigned( HeatSystem[1] ))
   ;   HVACSys:CF1R_OoHeating  = {   if (IsAltered .AND. IsVerified)
      HVACSys:CF1R_OoHeating  = {   if (ResProj:RunScope == 2 .AND. IsExisting .AND. IfValidAnd( FloorAreaSrvdInclV > 0 ) .AND. IfValidAnd( FloorAreaServed[1] = 0 ))  ; RJH 6/15/20 tic #1205
                                    then  CreateComp( cf1rOoHeating, Name + " RowSpcCondExHtg" )
                                    else  UNDEFINED  endif  }

    "Set HVACSys:CF1R_OoHeating:Oo03_NotApplicableMessage" HVACSys:CF1R_OoHeating:Oo03_NotApplicableMessage  =
      {  if ( LocalCompAssigned( CF1R_OoHeating ) .AND. 
               ( (Type == 2 .AND. NumHtPumpSystemTypes < 1) .OR.
                 (Type != 2 .AND. NumHeatSystemTypes   < 1) ) )
         then  "n/a"  else  UNDEFINED  endif  }

   ; Rule to set Parent for cf1rOoHeating
    "Set HVACSys:CF1R_OoHeating parent"   HVACSys:CF1R_OoHeating:Parent  = {  CF1R_RowSpcCondEx:Name  }

   "Create and setup cf1rOo03 rows based on either HeatSystem[*] or HtPumpSystem[*]"      HVACSys:Action  =    ; SAC 5/20/19
      {  if (Type == 2)
         then  EvalRulelist( "CF1RPRF01E_VerifiedAltered_HVACHeating_HeatPump", 1 )
         else  EvalRulelist( "CF1RPRF01E_VerifiedAltered_HVACHeating_Other", 1 )
         endif  }

   "Create new cf1rOoCooling child object"
;      HVACSys:CF1R_OoCooling  = {   if (IsAltered .AND. IsVerified .AND. NumCoolSystemTypes >= 1 .AND. LocalCompAssigned( CoolSystem[1] ))
   ;   HVACSys:CF1R_OoCooling  = {   if (IsAltered .AND. IsVerified)
      HVACSys:CF1R_OoCooling  = {   if (ResProj:RunScope == 2 .AND. IsExisting .AND. IfValidAnd( FloorAreaSrvdInclV > 0 ) .AND. IfValidAnd( FloorAreaServed[1] = 0 ))  ; RJH 6/15/20 tic #1205
                                    then  CreateComp( cf1rOoCooling, Name + " RowSpcCondExClg" )
                                    else  UNDEFINED  endif  }

    "Set HVACSys:CF1R_OoCooling:Oo04_NotApplicableMessage" HVACSys:CF1R_OoCooling:Oo04_NotApplicableMessage  =
      {  if ( LocalCompAssigned( CF1R_OoCooling ) .AND.
               ( (Type == 2 .AND. NumHtPumpSystemTypes < 1) .OR.
                 (Type != 2 .AND. NumCoolSystemTypes   < 1) ) )
         then  "n/a"  else  UNDEFINED  endif  }

   ; Rule to set Parent for cf1rOoCooling
    "Set HVACSys:CF1R_OoCooling parent"   HVACSys:CF1R_OoCooling:Parent  = {  CF1R_RowSpcCondEx:Name  }

   "Create and setup cf1rOo04 rows based on either CoolSystem[*] or HtPumpSystem[*]"      HVACSys:Action  =    ; SAC 5/20/19
      {  if (Type == 2)
         then  EvalRulelist( "CF1RPRF01E_VerifiedAltered_HVACCooling_HeatPump", 1 )
         else  EvalRulelist( "CF1RPRF01E_VerifiedAltered_HVACCooling_Other", 1 )
         endif  }

   ; Rules to populate remaining TableSpaceConditioningExisting table rows for all relevant HVAC SYSTEMS instances
    "Set HVACSys:CF1R_RowSpcCondEx:Oo05_DuctRValueExisting"    HVACSys:CF1R_RowSpcCondEx:Oo05_DuctRValueExisting  = { 
	        if ( LocalCompAssigned( DistribSystem ))
	     ;   then if (DistribSystem:IsAltered .AND. DistribSystem:IsVerified)
	        then if (IfValidAnd( DistribSystem:exFloorAreaServed > 0 ))
			     then atof( Format( "%.4f", DistribSystem:exDuctInsRvalue ) ) 
				 else UNDEFINED
				 endif
			else UNDEFINED 
			endif }
    "Set HVACSys:CF1R_RowSpcCondEx:Oo05_NotApplicableMessage" HVACSys:CF1R_RowSpcCondEx:Oo05_NotApplicableMessage  = { if ( LocalStatus ( CF1R_RowSpcCondEx:Oo05_DuctRValueExisting ) < 1 ) then "n/a" else UNDEFINED endif  }
    "Set HVACSys:CF1R_RowSpcCondEx:Oo06_FanPowerPerFlow"    HVACSys:CF1R_RowSpcCondEx:Oo06_FanPowerPerFlow  = { 
	        if ( LocalCompAssigned( Fan ))
	     ;   then if (Fan:IsAltered .AND. Fan:IsVerified)
	        then if (Fan:IsExisting)
			     then atof( Format( "%.2f", Fan:exWperCFMCool ) ) 
				 else UNDEFINED
				 endif
			else UNDEFINED 
			endif }
    "Set HVACSys:CF1R_RowSpcCondEx:Oo06_NotApplicableMessage" HVACSys:CF1R_RowSpcCondEx:Oo06_NotApplicableMessage  = { if ( LocalStatus ( CF1R_RowSpcCondEx:Oo06_FanPowerPerFlow ) < 1 ) then "n/a" else UNDEFINED endif  }
;    "Set HVACSys:CF1R_RowSpcCondEx:Oo07_AirflowRequiredMinimumTarget"    HVACSys:CF1R_RowSpcCondEx:Oo07_AirflowRequiredMinimumTarget  = { 
;	        if ( LocalCompAssigned( Fan ))
;	        then atof( Format( "%.2f", Fan:MinIAQCFM ) ) 
;			else UNDEFINED 
;			endif }
    "Set HVACSys:CF1R_RowSpcCondEx:Oo07_NotApplicableMessage" HVACSys:CF1R_RowSpcCondEx:Oo07_NotApplicableMessage  = { if ( LocalStatus ( CF1R_RowSpcCondEx:Oo07_AirflowRequiredMinimumTarget ) < 1 ) then "n/a" else UNDEFINED endif  }

  ; ----------------------------------------------------------------------
  ; Rule to set Parent for TableSpaceConditioningExisting table rows
   "Set cf1rtblRowSpcCondEx parent"   cf1rtblRowSpcCondEx:Parent  = {
         cf1rTableSpaceConditioningExisting:Name  }
  ; END of TableSpaceConditioningExisting table rules
  ; ----------------------------------------------------------------------
  ; Rule to Delete empty TableSpaceConditioningExisting table
   "DELETE empty cf1rTableSpaceConditioningExisting object"
      cf1rSection_Oo:Action   = {  if (ComponentCount( cf1rtblRowSpcCondEx ) < 1) then  DeleteComp()  else  UNCHANGED  endif }
  ; ----------------------------------------------------------------------

  ; ----------------------------------------------------------------------
  ; Section_Qq WATER HEATING SYSTEMS  - VERIFIED & ALTERED table
   "Create & initialize new cf1rSection_Qq object"
      cf1rCF1RPRF01E:Action = {  if (ResProj:RunScope != 2) then  UNCHANGED
                                 else  CreateChildren( cf1rSection_Qq, 1, "Section_Qq" )  endif  }

   "Create & initialize new cf1rTableWaterHeatingExisting object"
      cf1rSection_Qq:Action = {  CreateChildren( cf1rTableWaterHeatingExisting, 1, "TableWaterHeatingExisting" )  } 
  ; ----------------------------------------------------------------------
  ; Rules to create individual TableWaterHeatingExisting table rows for Altered and Verified systems
   "Create cf1rtblRowDHWSysExisting"
      DHWSys:CF1R_DHWSysRowExisting   = {  
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
;            else if (IsAltered .AND. IsVerified)
            else if (IsExVerif)
            then  CreateComp( cf1rtblRowDHWSysExisting, Name + " WaterHeatingExisting" )
            else  UNDEFINED
            endif endif  }
   ; ----------------------------------------------------------------------
   ; Rules to populate TableWaterHeatingExisting table rows for all relevant DHWSys instances
      "Set DHWSys:CF1R_DHWSysRowExisting:Qq01_WaterHeatingSystemName" DHWSys:CF1R_DHWSysRowExisting:Qq01_WaterHeatingSystemName  = {  Name  }
         ; SAC 5/2/19 - revised following to output EITHER (but never both) Qq02_ResidentialDHWDwellingUnitDistributionType & Qq02_ResidentialDHWCentralDistributionType
      "Set DHWSys:CF1R_DHWSysRowExisting:Qq02_ResidentialDHWDwellingUnitDistributionType" DHWSys:CF1R_DHWSysRowExisting:Qq02_ResidentialDHWDwellingUnitDistributionType  = {  
               if (IfValidAnd( CentralDHW > 0 )) then  UNDEFINED
               else  switch (EnumString( SystemType ))
                        case  "Standard"                                                    : "StandardDistribution"
                        case  "Central Parallel Piping"                                     : "StandardDistributionCentralParallelPiping"
                        case  "Point of use"                                                : "PointOfUse"
                        case  "Recirculation with demand control, push button"              : "DemandRecirculationManualControl"
                        case  "Recirculation with demand control, occupancy/motion sensor"  : "DemandRecirculationSensorControls"
                        case  "Recirculation with non-demand control (continuous pumping)"  : "RecirculationNonDemand"
                        case  "(HERS req'd) Pipe Insulation, All Lines"                     : "StandardDistributionInsulatedPipesHERS"
                        case  "(HERS req'd) Central Parallel Piping"                        : "StandardDistributionCentralParallelPipingHERS"
                        case  "(HERS req'd) Recirculation with demand control, push button" : "DemandRecirculationManualControlHERS"
                        case  "(HERS req'd) Recirculation with demand control, occupancy/motion sensor" : "DemandRecirculationSensorControlsHERS"
                        default  :  UNDEFINED
                     endswitch  endif  }
      "Set DHWSys:CF1R_DHWSysRowExisting:Qq02_ResidentialDHWCentralDistributionType" DHWSys:CF1R_DHWSysRowExisting:Qq02_ResidentialDHWCentralDistributionType  = { 
               if (IfValidAnd( CentralDHW > 0 )==0) then  UNDEFINED
               else  switch (EnumString( MFamDistType ))
                        case  "Multi-family: No loops or recirc pump"							             :  "NoRecirculationPumpNoLoopsMF"
                        case  "Multi-family: Recirculating with no control (continuous pumping)"       :  "RecirculatingNonDemandContinuousPumpingMF"
                        case  "Multi-family: Recirculation demand control"                             :  "RecirculatingDemandControlMF"
                        case  "Multi-family: Recirculating with temperature modulation"	             :  "RecirculatingTemperatureModulationMF"
                        case  "Multi-family: Recirculating with temperature modulation and monitoring" :  "RecirculatingContinuousTemperatureModulationMonitoringMF"
                        default  :  "Other"
                     endswitch  endif  }
      "Set DHWSys:CF1R_DHWSysRowExisting:Qq03_WaterHeaterCount" DHWSys:CF1R_DHWSysRowExisting:Qq03_WaterHeaterCount  = {  TotNumDHWHeaters  }
      "Set DHWSys:CF1R_DHWSysRowExisting:Qq04_WaterHeatingSolarFraction" DHWSys:CF1R_DHWSysRowExisting:Qq04_WaterHeatingSolarFraction  = { atof( Format( "%.2f", SolFracAnnRpt ) ) }
      "Set DHWSys:CF1R_DHWSysRowExisting:Qq04_NotApplicableMessage" DHWSys:CF1R_DHWSysRowExisting:Qq04_NotApplicableMessage  = { if ( LocalStatus ( CF1R_DHWSysRowExisting:Qq04_WaterHeatingSolarFraction ) < 1 ) then "n/a" else UNDEFINED endif  }

  ; ----------------------------------------------------------------------
  ; Rule to set Parent for TableWaterHeatingExisting table rows
   "Set cf1rtblRowDHWSysExisting parent"   cf1rtblRowDHWSysExisting:Parent  = {
         cf1rTableWaterHeatingExisting:Name  }
  ; END of TableWaterHeatingExisting table rules
  ; ----------------------------------------------------------------------
  ; Rule to Delete empty TableWaterHeatingExisting table
   "DELETE empty cf1rTableWaterHeatingExisting object"
      cf1rSection_Qq:Action   = {  if (ComponentCount( cf1rtblRowDHWSysExisting ) < 1) then  DeleteComp()  else  UNCHANGED  endif }
  ; ----------------------------------------------------------------------

  ; ----------------------------------------------------------------------
  ; Section_Rr WATER HEATERS  - VERIFIED & ALTERED table
   "Create & initialize new cf1rSection_Rr object"
      cf1rCF1RPRF01E:Action  = {  if (ResProj:RunScope != 2) then  UNCHANGED
                                  else  CreateChildren( cf1rSection_Rr, 1, "Section_Rr" )  endif  }     ; no init needed
   "Create & initialize new cf1rTableWaterHeaterExisting object"
      cf1rSection_Rr:Action   = {  CreateChildren( cf1rTableWaterHeaterExisting, 1, "TableWaterHeaterExisting" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual Altered Water Heater table rows
   ; SAC 4/25/19 - revised to output only one record per DHWHeater 
   "Create cf1rtblRowWaterHeatersExisting for all Altered DHWHeater instances"      ; SAC 5/2/19 - switched to reporting IsExisting heaters RJH 1/25/20 - switched to reporting IsExVerif heaters
      DHWHeater:CF1R_WaterHeatersRowExisting   = {   if (ResProj:RunScope == 2 .AND. ( SumRevRef( DHWSys:DHWHeater[1], DHWSys:IsExVerif ) +
																					SumRevRef( DHWSys:DHWHeater[2], DHWSys:IsExVerif ) +
																					SumRevRef( DHWSys:DHWHeater[3], DHWSys:IsExVerif ) +
																					SumRevRef( DHWSys:DHWHeater[4], DHWSys:IsExVerif ) +
																					SumRevRef( DHWSys:DHWHeater[5], DHWSys:IsExVerif ) +
																					SumRevRef( DHWSys:DHWHeater[6], DHWSys:IsExVerif ) > 0) )
                                                     then  CreateComp( cf1rtblRowWaterHeatersExisting, Name + "WaterHeaterExistingRow" )
                                                     else  UNDEFINED  endif  }

   ; ----------------------------------------------------------------------
   ; Rules to populate TableWaterHeatingExisting table rows for all relevant DHWHeater instances
    "Set DHWHeater:CF1R_WaterHeatersRowExisting:Rr01_WaterHeaterName" DHWHeater:CF1R_WaterHeatersRowExisting:Rr01_WaterHeaterName  = {  Name  }
    "Set DHWHeater:CF1R_WaterHeatersRowExisting:Rr02_WaterHeaterFuelSource" DHWHeater:CF1R_WaterHeatersRowExisting:Rr02_WaterHeaterFuelSource  = {  switch( EnumString( HeaterElementType ) )
																																	  case "Electric Resistance" :  "Electricity"
																																	  case "Gas"                 :  "NaturalGas"
																																	  case "Heat Pump"           :  "HeatPumpWaterHeater"
																																	  default                    :  UNDEFINED
																																  endswitch  }
    "Set DHWHeater:CF1R_WaterHeatersRowExisting:Rr03_ResidentialWaterHeaterType" DHWHeater:CF1R_WaterHeatersRowExisting:Rr03_ResidentialWaterHeaterType  =  ; SAC 5/27/19 - update for (tic #1096)
      {  switch( EnumString( TankType ) )
			    case "Large Instantaneous"   :  "InstantaneousLarge"
			    case "Large Storage"         :  "StorageLarge"
			    case "Small Instantaneous"   :  "InstantaneousSmall"
			    case "Small Storage"         :  "StorageSmall"
			    case "Large Instantaneous (existing only)"   :  "InstantaneousLarge"
			    case "Large Storage (existing only)"         :  "StorageLarge"
			    case "Small Instantaneous (existing only)"   :  "InstantaneousSmall"
			    case "Small Storage (existing only)"         :  "StorageSmall"
			    case "Boiler"                :  "BoilerWaterHeater"
			    case "Indirect"              :  "IndirectWaterHeating"
			    case "Consumer Instantaneous (UEF)"  :  "InstantaneousConsumer"
			    case "Commercial Instantaneous (TE)" :  "InstantaneousCommercial"
			    case "Residential-Duty Commercial Storage (UEF)"       :  "StorageResDutyCommercial"
			    case "Residential-Duty Commercial Instantaneous (UEF)" :  "InstantaneousResDutyCommercial"
			    case "Commercial Storage (TE & SBL)"                   :  "StorageCommercial"
			    case "Consumer Storage (UEF)"                          :  "StorageConsumer"
			   default                       :  UNDEFINED
			endswitch  }
     "Set DHWHeater:CF1R_WaterHeatersRowExisting:Rr04_StorageCapacity" DHWHeater:CF1R_WaterHeatersRowExisting:Rr04_StorageCapacity  = { 
                        if ( IfValidAnd( IsNEEAHtPumpWtrHtr > 0 ) )
						      then  if (HPWHModel > 0)
						            then  atof( Format( "%.2f", HPWHData_NEEA:TankVolume( "ModelNum", HPWHModel ) ) )
						            else  UNDEFINED  endif
						      else  if ( LocalStatus(TankVolume) < 1 ) then UNDEFINED
						            else atof( Format( "%.2f", TankVolume ) )
						            endif  endif  }
    "Set DHWHeater:CF1R_WaterHeatersRowExisting:Rr04_NotApplicableMessage" DHWHeater:CF1R_WaterHeatersRowExisting:Rr04_NotApplicableMessage  = { if ( LocalStatus ( CF1R_WaterHeatersRowExisting:Rr04_StorageCapacity ) < 1 ) then "n/a" else UNDEFINED endif  }

    "Set DHWHeater:CF1R_WaterHeatersRowExisting:Rr05_WaterHeaterAFUE" DHWHeater:CF1R_WaterHeatersRowExisting:Rr05_WaterHeaterAFUE  = { 
	                    if (EfficiencyUnits == "AFUE")
						then  atof( Format( "%.3f", EnergyFactor ) )
						else  UNDEFINED  endif  }
    "Set DHWHeater:CF1R_WaterHeatersRowExisting:Rr05_UniformEnergyFactor" DHWHeater:CF1R_WaterHeatersRowExisting:Rr05_UniformEnergyFactor  = { 
	                    if (EfficiencyUnits == "UEF")
						then  atof( Format( "%.2f", EnergyFactor ) )
						else  UNDEFINED  endif  }
    "Set DHWHeater:CF1R_WaterHeatersRowExisting:Rr05_EnergyFactor" DHWHeater:CF1R_WaterHeatersRowExisting:Rr05_EnergyFactor  = { 
	                    if (EfficiencyUnits == "EF")
						then  atof( Format( "%.2f", EnergyFactor ) )
						else  UNDEFINED  endif  }
    "Set DHWHeater:CF1R_WaterHeatersRowExisting:Rr05_ThermalEfficiency" DHWHeater:CF1R_WaterHeatersRowExisting:Rr05_ThermalEfficiency  = { 
	                    if (EfficiencyUnits == "TE")
						then  atof( Format( "%.2f", EnergyFactor ) )
						else  UNDEFINED  endif  }
    "Set DHWHeater:CF1R_WaterHeatersRowExisting:Rr06_WaterHeaterGasFiredRatedInput" DHWHeater:CF1R_WaterHeatersRowExisting:Rr06_WaterHeaterGasFiredRatedInput  = {  
          if ( EnumString( HeaterElementType ) == "Gas" .AND. IfValidAnd( InputRating > 0 )) then InputRating
                                                 else UNDEFINED 
                                                 endif }
    "Set DHWHeater:CF1R_WaterHeatersRowExisting:Rr06_WaterHeaterElectricFiredRatedInput" DHWHeater:CF1R_WaterHeatersRowExisting:Rr06_WaterHeaterElectricFiredRatedInput  = {  
          if ( EnumString( HeaterElementType ) == "Electric Resistance"  .AND. IfValidAnd( InputRating > 0 )) then InputRating 
                                                 else UNDEFINED 
                                                 endif }
    "Set DHWHeater:CF1R_WaterHeatersRowExisting:Rr07_ExteriorTankInsulation" DHWHeater:CF1R_WaterHeatersRowExisting:Rr07_ExteriorTankInsulation  = {
                  if (IfValidAnd( HeaterElementType = 5 ) .OR. LocalStatus( ExtInsulRVal ) < 1) then  UNDEFINED
                  else  ExtInsulRVal  endif  }
    "Set DHWHeater:CF1R_WaterHeatersRowExisting:Rr07_NotApplicableMessage" DHWHeater:CF1R_WaterHeatersRowExisting:Rr07_NotApplicableMessage  = { if ( LocalStatus ( CF1R_WaterHeatersRowExisting:Rr07_ExteriorTankInsulation ) < 1 ) then "n/a" else UNDEFINED endif  }
    "Set DHWHeater:CF1R_WaterHeatersRowExisting:Rr08_WaterHeaterStandbyLossFraction" DHWHeater:CF1R_WaterHeatersRowExisting:Rr08_WaterHeaterStandbyLossFraction  = {
                  if (IfValidAnd( StandbyLossFrac > 0 ) .AND. (HeaterType = 3 .OR. HeaterType = 13))
                  then  FltToStr( StandbyLossFrac )
            ; SAC 5/2/19 - should not ever report RecovEff as StandbyLossFraction (?)
            ;      else if (IfValidAnd( RecovEff > 0 ) .AND. (DispUEFRecovEff > 0 .OR. (CanBeCHWHeater > 0 .AND. HeaterType != 8 .AND. HeaterType < 9 .AND. HeaterElementType != 5)))
            ;      then  FltToStr( RecovEff )
                  else  UNDEFINED  endif  }
    "Set DHWHeater:CF1R_WaterHeatersRowExisting:Rr08_NotApplicableMessage" DHWHeater:CF1R_WaterHeatersRowExisting:Rr08_NotApplicableMessage  = { if ( LocalStatus ( CF1R_WaterHeatersRowExisting:Rr08_WaterHeaterStandbyLossFraction ) < 1 ) then "n/a" else UNDEFINED endif  }

  ; ----------------------------------------------------------------------
  ; Rule to set Parent for Altered Water Heater table rows
   "Set cf1rtblRowWaterHeatersExisting parent"   cf1rtblRowWaterHeatersExisting:Parent  = { cf1rTableWaterHeaterExisting:Name  }
  ; END of Altered Water Heater table rules
  ; ----------------------------------------------------------------------
  ; Rule to Delete empty TableWaterHeaterExisting table
   "DELETE empty cf1rTableWaterHeaterExisting object"
      cf1rSection_Rr:Action   = {  if (ComponentCount( cf1rtblRowWaterHeatersExisting ) < 1) then  DeleteComp()  else  UNCHANGED  endif }
  ; ----------------------------------------------------------------------






END ; RULELIST "CF1RPRF01E_Proposed"
;*************************************************************************


; rulelists moved to separate (SFam-only) CF1RPRF01E_Master-SFam.rule module - SAC 07/18/22
;     RULELIST "CF1RPRF01E_Final"  1 0 0 1
;     RULELIST "CF1RPRF01E_Section_EnergyDesignRatings_SingleOrientation_Create"  1 0 0 1
;     RULELIST "CF1RPRF01E_Section_EnergyDesignRatings_SingleOrientation_Populate"  1 0 0 1
;     RULELIST "CF1RPRF01E_Section_EnergyDesignRatings_MultipleOrientations_Create"  1 0 0 1
;     RULELIST "CF1RPRF01E_Section_EnergyDesignRatings_MultipleOrientations_Populate"  1 0 0 1
;     RULELIST "CF1RPRF01E_First_cf1rProposedDesign"  1 0 0 1
;     RULELIST "CF1RPRF01E_Second_cf1rProposedDesign"  1 0 0 1
;     RULELIST "CF1RPRF01E_Third_cf1rProposedDesign"  1 0 0 1
;     RULELIST "CF1RPRF01E_Fourth_cf1rProposedDesign"  1 0 0 1
;     RULELIST "CF1RPRF01E_Section_Da"  1 0 0 1
;     RULELIST "CF1RPRF01E_Section_Da_Row1_CommunitySolar"  1 0 0 1
;     RULELIST "CF1RPRF01E_Set_Da02_PhotoVoltaicExceptionRes"  1 0 0 1
;     RULELIST "CF1RPRF01E_Section_Da_Row1_0ReqPVException"  1 0 0 1
;     RULELIST "CF1RPRF01E_Section_Da_Row1"  1 0 0 1
;     RULELIST "CF1RPRF01E_Section_Da_Row2"  1 0 0 1
;     RULELIST "CF1RPRF01E_Section_Da_Row3"  1 0 0 1
;     RULELIST "CF1RPRF01E_Section_Da_Row4"  1 0 0 1
;     RULELIST "CF1RPRF01E_Section_Da_Row5"  1 0 0 1
;     RULELIST "CF1RPRF01E_Section_Da_FinalUpdate"  1 0 0 1
;     RULELIST "CF1RPRF01E_Section_Db"  1 0 0 1
;     RULELIST "CF1RPRF01E_cf1rSection_G_Proposed_SingleFamily"  1 0 0 1


;*************************************************************************
RULELIST "CF1RPRF01E_cf1rSection_G_Proposed_MultiFamily"  1 0 0 1

   "Create & initialize new cf1rTableZoneMF object"
      cf1rSection_G:Action   = {  CreateChildren( cf1rTableZoneMF, 1, "ZoneMF" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual ZoneMF table rows
   "Create cf1rtblRowZoneMF for all MultiFamily Zone instances"
      Zone:CF1R_ZoneMFRow   = {  CreateComp( cf1rtblRowZoneMF, Name + "ZoneMFRow" )  }
  ; Rules to populate MultiFamily Zone table rows for ALL Zone instances
      "Set Zone:CF1R_ZoneMFRow:G01_ThermalZoneName" Zone:CF1R_ZoneMFRow:G01_ThermalZoneName  = {  Name  }
      "Set Zone:CF1R_ZoneMFRow:G02_ZoneConditioningType" Zone:CF1R_ZoneMFRow:G02_ZoneConditioningType  = {  EnumString( Type )  }
      "Set Zone:CF1R_ZoneMFRow:G03_ThermalZoneFloorArea" Zone:CF1R_ZoneMFRow:G03_ThermalZoneFloorArea  = {  FloorArea  }
      "Set Zone:CF1R_ZoneMFRow:G04_FloorToCeilingHeight" Zone:CF1R_ZoneMFRow:G04_FloorToCeilingHeight  = {  CeilingHeight  }
      "Set Zone:CF1R_ZoneMFRow:G05_DwellingUnitCount" Zone:CF1R_ZoneMFRow:G05_DwellingUnitCount  = {  NumDwellingUnits  }
  ; Rule to add MultiFamily Zone table rows to the cf1rTableZoneMF
      "Set Zone:CF1R_ZoneMFRow:Parent"
         Zone:CF1R_ZoneMFRow:Parent  = {  cf1rTableZoneMF:Name  }
END
;*************************************************************************

;*************************************************************************
; RULELIST "CF1RPRF01E_cf1rSection_H_Proposed_MultiFamily"  1 0 0 1 RJH 10/1/22 Changed name to handle NRCC/LMCC Section_DwellInfo
RULELIST "CF1RPRF01E_cf1rSection_DwellInfo_Proposed_MultiFamily"  1 0 0 1
   "Create & initialize new Section_DwellInfo object"
      nrccNRCCPRF:Action  = {  CreateChildren( cf1rSection_DwellInfo, 1, "Section_DwellInfo" )  }

   "Create & initialize new cf1rTableDwellingUnits object"
      cf1rSection_DwellInfo:Action   = {  CreateChildren( cf1rTableDwellingUnits, 1, "TableDwellingUnits" )  }     ; no init needed

  ; ----------------------------------------------------------------------
  ; Rules to create individual Dwelling Unit table rows
   "Create cf1rtblRowDwellingUnit for all DwellUnitRpt instances"
      DwellUnitRpt:CF1R_DwellUnitRow   = {  CreateComp( cf1rtblRowDwellingUnit, Name + " DwellUnitRow" )  }
  ; Rules to populate MultiFamily Dwelling Unit table rows for ALL DwellUnitRpt instances
      "Set DwellUnitRpt:CF1R_DwellUnitRow:DwellInfo01_ResidentialDwellingUnitName" DwellUnitRpt:CF1R_DwellUnitRow:DwellInfo01_ResidentialDwellingUnitName  = {  DwellUnitRpt:Name  }
      "Set DwellUnitRpt:CF1R_DwellUnitRow:DwellInfo02_ResidentialDwellingUnitDescriptor" DwellUnitRpt:CF1R_DwellUnitRow:DwellInfo02_ResidentialDwellingUnitDescriptor  = {  DwellUnitRpt:DwellUnitTypeRef  }
      "Set DwellUnitRpt:CF1R_DwellUnitRow:DwellInfo03_ThermalZoneName" DwellUnitRpt:CF1R_DwellUnitRow:DwellInfo03_ThermalZoneName  = {  DwellUnitRpt:ZoneRef  }
  ; Rule to add Dwelling Unit Report table rows to the cf1rTableDwellingUnits
      "Set DwellUnitRpt:CF1R_DwellUnitRow:Parent"
         DwellUnitRpt:CF1R_DwellUnitRow:Parent  = {  cf1rTableDwellingUnits:Name  }
END
;*************************************************************************

;*************************************************************************
; RULELIST "CF1RPRF01E_cf1rSection_I_Proposed_MultiFamily"  1 0 0 1 RJH 10/1/22 Changed name to handle NRCC/LMCC Section_DwellType
RULELIST "CF1RPRF01E_cf1rSection_DwellType_Proposed_MultiFamily"  1 0 0 1
   "Create & initialize new Section_DwellType object"
      nrccNRCCPRF:Action  = {  CreateChildren( cf1rSection_DwellType, 1, "Section_DwellType" )  }

   "Create & initialize new cf1rTableDwellingUnitType object"
      cf1rSection_DwellType:Action   = {  CreateChildren( cf1rTableDwellingUnitType, 1, "TableDwellingUnitType" )  }     ; no init needed

  ; ----------------------------------------------------------------------
  ; Rules to create individual Dwelling Unit Type table rows
   "Create cf1rtblRowDwellingUnitType for all DwellUnitType instances"
      DwellUnitType:CF1R_DwellUnitTypeRow   = {  if (CondFlrArea > 0) then CreateComp( cf1rtblRowDwellingUnitType, Name + " DwellUnitTypeRow" ) else UNCHANGED endif  }
  ; Rules to populate MultiFamily Dwelling Unit Type table rows for ALL DwellUnitType instances
      "Set DwellUnitType:CF1R_DwellUnitTypeRow:DwellType01_ResidentialDwellingUnitDescriptor" DwellUnitType:CF1R_DwellUnitTypeRow:DwellType01_ResidentialDwellingUnitDescriptor  = {  DwellUnitType:Name  }
      "Set DwellUnitType:CF1R_DwellUnitTypeRow:DwellType02_DwellingUnitConditionedFloorArea" DwellUnitType:CF1R_DwellUnitTypeRow:DwellType02_DwellingUnitConditionedFloorArea  = {  DwellUnitType:CondFlrArea  }
      "Set DwellUnitType:CF1R_DwellUnitTypeRow:DwellType03_BedroomCount" DwellUnitType:CF1R_DwellUnitTypeRow:DwellType03_BedroomCount  = {  DwellUnitType:NumBedrooms  }
      "Set DwellUnitType:CF1R_DwellUnitTypeRow:DwellType04_DwellingUnitsIdenticalCount" DwellUnitType:CF1R_DwellUnitTypeRow:DwellType04_DwellingUnitsIdenticalCount  = {  DwellUnitType:NumAssigningDUs  }
    "Set DwellUnitType:CF1R_DwellUnitTypeRow:DwellType05_DwellingUnitSpaceConditioningSystemName[1]"
         DwellUnitType:CF1R_DwellUnitTypeRow:DwellType05_DwellingUnitSpaceConditioningSystemName[1]  = {  if (LocalStatus( SCSysRptRef[1] ) > 0) then  EnumString(SCSysRptRef[1])  else  UNDEFINED  endif  }
    "Set DwellUnitType:CF1R_DwellUnitTypeRow:DwellType05_DwellingUnitSpaceConditioningSystemName[2]"
         DwellUnitType:CF1R_DwellUnitTypeRow:DwellType05_DwellingUnitSpaceConditioningSystemName[2]  = {  if (LocalStatus( SCSysRptRef[2] ) > 0) then  EnumString(SCSysRptRef[2])  else  UNDEFINED  endif  }
    "Set DwellUnitType:CF1R_DwellUnitTypeRow:DwellType05_DwellingUnitSpaceConditioningSystemName[3]"
         DwellUnitType:CF1R_DwellUnitTypeRow:DwellType05_DwellingUnitSpaceConditioningSystemName[3]  = {  if (LocalStatus( SCSysRptRef[3] ) > 0) then  EnumString(SCSysRptRef[3])  else  UNDEFINED  endif  }
    "Set DwellUnitType:CF1R_DwellUnitTypeRow:DwellType05_DwellingUnitSpaceConditioningSystemName[4]"
         DwellUnitType:CF1R_DwellUnitTypeRow:DwellType05_DwellingUnitSpaceConditioningSystemName[4]  = {  if (LocalStatus( SCSysRptRef[4] ) > 0) then  EnumString(SCSysRptRef[4])  else  UNDEFINED  endif  }
    "Set DwellUnitType:CF1R_DwellUnitTypeRow:DwellType05_DwellingUnitSpaceConditioningSystemName[5]"
         DwellUnitType:CF1R_DwellUnitTypeRow:DwellType05_DwellingUnitSpaceConditioningSystemName[5]  = {  if (LocalStatus( SCSysRptRef[5] ) > 0) then  EnumString(SCSysRptRef[5])  else  UNDEFINED  endif  }
    "Set DwellUnitType:CF1R_DwellUnitTypeRow:DwellType05_DwellingUnitSpaceConditioningSystemName[6]"
         DwellUnitType:CF1R_DwellUnitTypeRow:DwellType05_DwellingUnitSpaceConditioningSystemName[6]  = {  if (LocalStatus( SCSysRptRef[6] ) > 0) then  EnumString(SCSysRptRef[6])  else  UNDEFINED  endif  }
    "Set DwellUnitType:CF1R_DwellUnitTypeRow:DwellType05_DwellingUnitSpaceConditioningSystemName[7]"
         DwellUnitType:CF1R_DwellUnitTypeRow:DwellType05_DwellingUnitSpaceConditioningSystemName[7]  = {  if (LocalStatus( SCSysRptRef[7] ) > 0) then  EnumString(SCSysRptRef[7])  else  UNDEFINED  endif  }
    "Set DwellUnitType:CF1R_DwellUnitTypeRow:DwellType05_DwellingUnitSpaceConditioningSystemName[8]"
         DwellUnitType:CF1R_DwellUnitTypeRow:DwellType05_DwellingUnitSpaceConditioningSystemName[8]  = {  if (LocalStatus( SCSysRptRef[8] ) > 0) then  EnumString(SCSysRptRef[8])  else  UNDEFINED  endif  }
    "Set DwellUnitType:CF1R_DwellUnitTypeRow:DwellType05_DwellingUnitSpaceConditioningSystemName[9]"
         DwellUnitType:CF1R_DwellUnitTypeRow:DwellType05_DwellingUnitSpaceConditioningSystemName[9]  = {  if (LocalStatus( SCSysRptRef[9] ) > 0) then  EnumString(SCSysRptRef[9])  else  UNDEFINED  endif  }
    "Set DwellUnitType:CF1R_DwellUnitTypeRow:DwellType05_DwellingUnitSpaceConditioningSystemName[10]"
         DwellUnitType:CF1R_DwellUnitTypeRow:DwellType05_DwellingUnitSpaceConditioningSystemName[10] = {  if (LocalStatus( SCSysRptRef[10]) > 0) then  EnumString(SCSysRptRef[10]) else  UNDEFINED  endif  }
      "Set DwellUnitType:CF1R_DwellUnitTypeRow:DwellType06_DomesticHotWaterSystemName" DwellUnitType:CF1R_DwellUnitTypeRow:DwellType06_DomesticHotWaterSystemName  = {  DwellUnitType:DHWSysRef  }
      "Set DwellUnitType:CF1R_DwellUnitTypeRow:DwellType07_IAQ_VentilationFanName" DwellUnitType:CF1R_DwellUnitTypeRow:DwellType07_IAQ_VentilationFanName  = {  EnumString( DwellUnitType:IAQOption )  }


  ; Rule to add Dwelling Unit Type table rows to the cf1rtblRowDwellingUnitType
      "Set DwellUnitType:CF1R_DwellUnitTypeRow:Parent"
         DwellUnitType:CF1R_DwellUnitTypeRow:Parent  = {  cf1rTableDwellingUnitType:Name  }
END
;*************************************************************************


; rulelists moved to separate (SFam-only) CF1RPRF01E_Master-SFam.rule module - SAC 07/18/22
;     RULELIST "CF1RPRF01E_Final_SingleOrientation"  1 0 0 1
;     RULELIST "CF1RPRF01E_Single_cf1rSpaceHeating"  1 0 0 1
;     RULELIST "CF1RPRF01E_Single_cf1rSpaceCooling"  1 0 0 1
;     RULELIST "CF1RPRF01E_Single_cf1rVentilation"  1 0 0 1
;     RULELIST "CF1RPRF01E_Single_cf1rWaterHeating"  1 0 0 1
;     RULELIST "CF1RPRF01E_Single_cf1rSelfUtilCredit"  1 0 0 1
;     RULELIST "CF1RPRF01E_Single_cf1rTotals"  1 0 0 1
;     RULELIST "CF1RPRF01E_Final_MultipleOrientations"  1 0 0 1
;     RULELIST "CF1RPRF01E_North_cf1rSpaceHeating"  1 0 0 1
;     RULELIST "CF1RPRF01E_East_cf1rSpaceHeating"  1 0 0 1
;     RULELIST "CF1RPRF01E_South_cf1rSpaceHeating"  1 0 0 1
;     RULELIST "CF1RPRF01E_West_cf1rSpaceHeating"  1 0 0 1
;     RULELIST "CF1RPRF01E_North_cf1rSpaceCooling"  1 0 0 1
;     RULELIST "CF1RPRF01E_East_cf1rSpaceCooling"  1 0 0 1
;     RULELIST "CF1RPRF01E_South_cf1rSpaceCooling"  1 0 0 1
;     RULELIST "CF1RPRF01E_West_cf1rSpaceCooling"  1 0 0 1
;     RULELIST "CF1RPRF01E_North_cf1rVentilation"  1 0 0 1
;     RULELIST "CF1RPRF01E_East_cf1rVentilation"  1 0 0 1
;     RULELIST "CF1RPRF01E_South_cf1rVentilation"  1 0 0 1
;     RULELIST "CF1RPRF01E_West_cf1rVentilation"  1 0 0 1
;     RULELIST "CF1RPRF01E_North_cf1rWaterHeating"  1 0 0 1
;     RULELIST "CF1RPRF01E_East_cf1rWaterHeating"  1 0 0 1
;     RULELIST "CF1RPRF01E_South_cf1rWaterHeating"  1 0 0 1
;     RULELIST "CF1RPRF01E_West_cf1rWaterHeating"  1 0 0 1
;     RULELIST "CF1RPRF01E_North_cf1rSelfUtilCredit"  1 0 0 1
;     RULELIST "CF1RPRF01E_East_cf1rSelfUtilCredit"  1 0 0 1
;     RULELIST "CF1RPRF01E_South_cf1rSelfUtilCredit"  1 0 0 1
;     RULELIST "CF1RPRF01E_West_cf1rSelfUtilCredit"  1 0 0 1
;     RULELIST "CF1RPRF01E_North_cf1rTotals"  1 0 0 1
;     RULELIST "CF1RPRF01E_East_cf1rTotals"  1 0 0 1
;     RULELIST "CF1RPRF01E_South_cf1rTotals"  1 0 0 1
;     RULELIST "CF1RPRF01E_West_cf1rTotals"  1 0 0 1


;*************************************************************************
RULELIST "CF1RPRF01E_cf1rSection_K_Proposed"  1 0 0 1
   "Create & initialize new cf1rSection_K object"
      cf1rCF1RPRF01E:Action  = {  CreateChildren( cf1rSection_K, 1, "Section_K" )  }     ; no init needed
   "Create & initialize new cf1rTableCathedralCeiling object"
      cf1rSection_K:Action   = {  CreateChildren( cf1rTableCathedralCeiling, 1, "TableCathedralCeiling" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual Cathedral Ceiling table rows ordered by 1.ZONE 2.GARAGE
   "Create cf1rtblRowCathedralCeiling for all Cathedral Ceilings - for children of Zones"
      CathedralCeiling:CF1R_CathedralCeilingRow   = {  if (ParentComponentType() == "Zone") then  CreateComp( cf1rtblRowCathedralCeiling, Name + "CONDZONECathedralCeilingRow" )
                                                       else  UNCHANGED  endif  }
   "Create cf1rtblRowCathedralCeiling for all Cathedral Ceilings - for children of Garages"
      CathedralCeiling:CF1R_CathedralCeilingRow   = {  if (ParentComponentType() == "Garage") then  CreateComp( cf1rtblRowCathedralCeiling, Name + "GARAGECathedralCeilingRow" )
                                                       else  UNCHANGED  endif  }

  ; Rules to populate Cathedral Ceiling table rows for ALL CathedralCeiling
      "Set CathedralCeiling:CF1R_CathedralCeilingRow:K01_PartitionName" CathedralCeiling:CF1R_CathedralCeilingRow:K01_PartitionName  = {  Name  }
      "Set CathedralCeiling:CF1R_CathedralCeilingRow:K02_ThermalZoneName" CathedralCeiling:CF1R_CathedralCeilingRow:K02_ThermalZoneName  = {  Parent( Name )  }
      "Set CathedralCeiling:CF1R_CathedralCeilingRow:K03_ConstructionAssemblyNamePerformanceRes" CathedralCeiling:CF1R_CathedralCeilingRow:K03_ConstructionAssemblyNamePerformanceRes  = {  Construction:Name  }
      ; SAC 7/18/19 - several mods (tic #1135)
      "Set CathedralCeiling:CF1R_CathedralCeilingRow:K04_Azimuth"
         CathedralCeiling:CF1R_CathedralCeilingRow:K04_Azimuth  = {
            if (LocalStatus( OrientationValue ) > 0)
	        then if ((ResProj:FrontOrientation + OrientationValue) < 360)                 ; RJH 4/20/2020 correct Azimuth for ResProj:FrontOrientation
			     then Format( "%.0f", ResProj:FrontOrientation + OrientationValue ) 
				 else Format( "%.0f", ResProj:FrontOrientation + OrientationValue - 360 )
				 endif
            else  UNDEFINED  endif  }
      "Set CathedralCeiling:CF1R_CathedralCeilingRow:K04_NotApplicableMessage"
         CathedralCeiling:CF1R_CathedralCeilingRow:K04_NotApplicableMessage  = {
            if ( (LocalStatus( OrientationValue ) > 0) == 0 )
            then  "n/a"
            else  UNDEFINED  endif  }
      "Set CathedralCeiling:CF1R_CathedralCeilingRow:K05_RelativePosition"
         CathedralCeiling:CF1R_CathedralCeilingRow:K05_RelativePosition  = {
            if (Orientation > 10) then  UNDEFINED
            else  EnumString( Orientation )  endif  }
      "Set CathedralCeiling:CF1R_CathedralCeilingRow:K05_NotApplicableMessage"
         CathedralCeiling:CF1R_CathedralCeilingRow:K05_NotApplicableMessage  = {
            if (Orientation <= 10) then  UNDEFINED
            else  "n/a"  endif  }
      "Set CathedralCeiling:CF1R_CathedralCeilingRow:K06_PartitionGrossArea" CathedralCeiling:CF1R_CathedralCeilingRow:K06_PartitionGrossArea  = {  atof( Format( "%.2f", Area ) )  }
      "Set CathedralCeiling:CF1R_CathedralCeilingRow:K07_SkylightArea" CathedralCeiling:CF1R_CathedralCeilingRow:K07_SkylightArea  = {  atof( Format( "%.2f", ChildAreaSum ) )  }
      "Set CathedralCeiling:CF1R_CathedralCeilingRow:K08_RoofRise" CathedralCeiling:CF1R_CathedralCeilingRow:K08_RoofRise  = {  atof( Format( "%.2f", RoofRise ) )  }
;      "Set CathedralCeiling:CF1R_CathedralCeilingRow:K08_RoofPitch" CathedralCeiling:CF1R_CathedralCeilingRow:K08_RoofPitch  = {  atof( Format( "%.2f", RoofPitch ) )  }
;      "Set CathedralCeiling:CF1R_CathedralCeilingRow:K09_Tilt" CathedralCeiling:CF1R_CathedralCeilingRow:K09_Tilt  = {  atof( Format( "%.2f", RoofTilt ) )  }
      "Set CathedralCeiling:CF1R_CathedralCeilingRow:K09_RoofReflectance" CathedralCeiling:CF1R_CathedralCeilingRow:K09_RoofReflectance  = {  atof( Format( "%.2f", RoofSolReflect ) )  }
      "Set CathedralCeiling:CF1R_CathedralCeilingRow:K10_RoofEmittance" CathedralCeiling:CF1R_CathedralCeilingRow:K10_RoofEmittance  = {  atof( Format( "%.2f", RoofEmiss ) )  }
      "Set CathedralCeiling:CF1R_CathedralCeilingRow:K11_CoolRoofToBeInstalled" CathedralCeiling:CF1R_CathedralCeilingRow:K11_CoolRoofToBeInstalled  =      ; SAC 7/15/19 - tic #1135
         {  if (SolReflSpclFtrs = 2) then "true" else "false" endif }
;      "Set CathedralCeiling:CF1R_CathedralCeilingRow:K12_FramingFactor" CathedralCeiling:CF1R_CathedralCeilingRow:K12_FramingFactor  = {  atof( Format( "%.2f", FramingFactor ) )  }
      "Set CathedralCeiling:CF1R_CathedralCeilingRow:K12_StatusEAA"
         CathedralCeiling:CF1R_CathedralCeilingRow:K12_StatusEAA  =                 ; SAC 7/30/19 - added logic to report K12_StatusEAA for AdditionAlone projects (tic #1118)
         {  if (ResProj:RunScope = 1 .AND. IfValidAnd( ResProj:IsAddAlone != 0 )==0)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  "New"  
            else if (IsExisting)
            then  "Existing"
            else if (IsAltered)
            then  "Altered"
            else  UNDEFINED   ; error?
            endif endif endif endif  }
      "Set CathedralCeiling:CF1R_CathedralCeilingRow:K13_VerifiedExistingCondition"
         CathedralCeiling:CF1R_CathedralCeilingRow:K13_VerifiedExistingCondition  = {
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  "NA"
            else if (IsAltered .AND. IsVerified)
            then  "Yes"
            else  "No"
            endif endif endif  }
      "Set CathedralCeiling:CF1R_CathedralCeilingRow:K14_ConstructionAssemblyNamePerformanceRes"
         CathedralCeiling:CF1R_CathedralCeilingRow:K14_ConstructionAssemblyNamePerformanceRes  = {  
		    if ( IfValidAnd( CF1R_CathedralCeilingRow:K13_VerifiedExistingCondition = "Yes" ) .AND.
		         LocalCompAssigned( exConstruction )  )
			then exConstruction:Name
			else UNDEFINED
			endif  }
  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL Cathedral Ceiling table rows
   "Set cf1rtblRowCathedralCeiling parent"   cf1rtblRowCathedralCeiling:Parent  = { cf1rTableCathedralCeiling:Name  }
  ; END of Cathedral Ceiling table rules
  ; ----------------------------------------------------------------------
END
;*************************************************************************

;*************************************************************************
RULELIST "CF1RPRF01E_Section_CCeilingVA"  1 0 0 1
   "Create & initialize new cf1rSection_CCeilingVA object"
      cf1rCF1RPRF01E:Action  = {  CreateChildren( cf1rSection_CCeilingVA, 1, "Section_CCeilingVA" )  }     ; no init needed
   "Create & initialize new cf1rTableCCeilingExisting object"
      cf1rSection_CCeilingVA:Action   = {  CreateChildren( cf1rTableCCeilingExisting, 1, "TableCCeilingExisting" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual Existing Cathedral Ceiling table rows
   "Create cf1rtblRowCCeilingExisting for all existing Cathedral Ceilings"
      CathedralCeiling:CF1R_CCeilingExistingRow   = {  
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  UNDEFINED
            else if (IsAltered .AND. IsVerified)
            then  CreateComp( cf1rtblRowCCeilingExisting, Name + "CCeilingExistingRow" )
            else  UNDEFINED
            endif endif endif  }

  ; Rules to populate Existing Cathedral Ceiling table rows for Existing CathedralCeiling
      "Set CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA01_PartitionName" CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA01_PartitionName  = {  Name  }
      "Set CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA02_ThermalZoneName" CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA02_ThermalZoneName  = {  Parent( Name )  }
      "Set CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA03_ConstructionAssemblyNamePerformanceRes" CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA03_ConstructionAssemblyNamePerformanceRes  = {  exConstruction:Name  }
      "Set CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA04_ConstructionAssemblyType" CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA04_ConstructionAssemblyType  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then switch( EnumString( exConstruction:Type ) )
					  case "Wood Framed Wall"         :  "WoodFramedWall"
					  case "Steel Framed Wall"        :  "SteelFramedWall"
					  case "Concrete / ICF / Brick"   :  "ConcreteBrickICF"
					  case "Hollow Unit Masonry"      :  "HollowUnitMasonry"
					  case "Adobe / Strawbale / Log"  :  "AdobeStrawbaleLog"
					  case "SIPS Wall"                :  "SIPS_Wall"
					  case "No Frame (concrete/CMU)"  :  "NoFrameConcreteCMU"
					  case "Wood Framed Ceiling"      :  "WoodFramedCeiling"
					  case "Built-up Roof"            :  "BuiltupRoof"
					  case "SIPS Ceiling"             :  "SIPS_Ceiling"
					  case "Wood Framed Floor"        :  "WoodFramedFloor"
					  case "SIPS Floor"               :  "SIPS_Floor"
					  default  :  UNDEFINED
				 endswitch
			else UNDEFINED
			endif  }
      "Set CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA05_Azimuth"
         CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA05_Azimuth  = {
            if (LocalStatus( OrientationValue ) > 0)
	        then if ((ResProj:FrontOrientation + OrientationValue) < 360)
			     then Format( "%.0f", ResProj:FrontOrientation + OrientationValue ) 
				 else Format( "%.0f", ResProj:FrontOrientation + OrientationValue - 360 )
				 endif
            else  UNDEFINED  endif  }
      "Set CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA05_NotApplicableMessage"
         CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA05_NotApplicableMessage  = {
            if ( (LocalStatus( OrientationValue ) > 0) == 0 )
            then  "n/a"
            else  UNDEFINED  endif  }
      "Set CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA06_RelativePosition"
         CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA06_RelativePosition  = {
            if (Orientation > 10) then  UNDEFINED
            else  EnumString( Orientation )  endif  }
      "Set CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA06_NotApplicableMessage"
         CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA06_NotApplicableMessage  = {
            if (Orientation <= 10) then  UNDEFINED
            else  "n/a"  endif  }
      "Set CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA07_CavityInsulationRes"
         CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA07_CavityInsulationRes  = {  
		    if ( LocalCompAssigned( exConstruction )  )
			then switch( exConstruction:CavityRRpt )
                    case "R 11"  :  "R11"
                    case "R 13"  :  "R13"
                    case "R 15"  :  "R15"
                    case "R 19"  :  "R19"
                    case "R 21"  :  "R21"
                    case "R 22"  :  "R22"
                    case "R 23"  :  "R23"
                    case "R 24"  :  "R24"
                    case "R 25"  :  "R25"
                    case "R 30"  :  "R30"
                    case "R 38"  :  "R38"
                    case "- no insulation (vertical) -"  :  "NoInsulation"
                    case "none"  :  "NoInsulation"
                    default      :  "Other"
                 endswitch
			else UNDEFINED
			endif  }
      "Set CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA08_RoofRise" CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA08_RoofRise  = {  atof( Format( "%.2f", RoofRise ) )  }
      "Set CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA09_RoofReflectance" CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA09_RoofReflectance  = {  atof( Format( "%.2f", exSolReflect ) )  }
      "Set CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA10_RoofEmittance" CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA10_RoofEmittance  = {  atof( Format( "%.2f", exSolEmiss ) )  }
      "Set CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA11_RadiantBarrierToBeInstalled" CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA11_RadiantBarrierToBeInstalled  = 
         {  if (exConstruction:RadiantBarrier > 0) then "true" else "false" endif }
      "Set CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA12_CoolRoofToBeInstalled" CathedralCeiling:CF1R_CCeilingExistingRow:CCeilingVA12_CoolRoofToBeInstalled  = 
         {  if (SolReflSpclFtrs = 2) then "true" else "false" endif }
  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL Existing Cathedral Ceiling table rows
   "Set cf1rtblRowCCeilingExisting parent"   cf1rtblRowCCeilingExisting:Parent  = { cf1rTableCCeilingExisting:Name  }
  ; END of Existing Cathedral Ceiling table rules
  ; ----------------------------------------------------------------------
END
;*************************************************************************



;*************************************************************************
RULELIST "CF1RPRF01E_cf1rSection_Attic_Proposed"  1 0 0 1
   "Create & initialize new Section_Attic object"
      nrccNRCCPRF:Action = {  CreateChildren( cf1rSection_Attic, 1, "Section_Attic" )  }     ; no init needed
   "Create & initialize new cf1rTableAttic object"
      cf1rSection_Attic:Action = {  CreateChildren( cf1rTableAttic, 1, "TableAttic" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual ResAttic table rows
   "Create cf1rtblRowAttic for all ResAttics"
      ResAttic:CF1R_AtticRow   = {  CreateComp( cf1rtblRowAttic, Name + "AtticRow" )  }
  ; Rules to populate Attic table rows for ALL ResAttic
      "Set ResAttic:CF1R_AtticRow:Attic01_AtticName" ResAttic:CF1R_AtticRow:Attic01_AtticName  = {  Name  }
      "Set ResAttic:CF1R_AtticRow:Attic02_ConstructionAssemblyNamePerformanceRes" ResAttic:CF1R_AtticRow:Attic02_ConstructionAssemblyNamePerformanceRes  = {  Construction:Name  }
      "Set ResAttic:CF1R_AtticRow:Attic03_IsAtticVented" ResAttic:CF1R_AtticRow:Attic03_IsAtticVented  = { if( EnumString( Type ) == "Ventilated") then "true" else "false" endif }
      "Set ResAttic:CF1R_AtticRow:Attic07_RadiantBarrierToBeInstalled" ResAttic:CF1R_AtticRow:Attic07_RadiantBarrierToBeInstalled  = {  if (Construction:RadiantBarrier > 0) then "true" else "false" endif }
  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL Attic table rows
   "Set cf1rtblRowAttic parent"   cf1rtblRowAttic:Parent  = { cf1rTableAttic:Name  }
  ; END of Attic table rules
  ; ----------------------------------------------------------------------
END
;*************************************************************************

; RJH 9/9/22 replaced with RULELIST "CF1RPRF01E_cf1rSection_Attic_Proposed" for NRCC/LMCC
;*************************************************************************
;RULELIST "CF1RPRF01E_cf1rSection_L_Proposed"  1 0 0 1
;   "Create & initialize new cf1rSection_L object"
;      cf1rCF1RPRF01E:Action  = {  CreateChildren( cf1rSection_L, 1, "Section_L" )  }     ; no init needed
;   "Create & initialize new cf1rTableAttic object"
;      cf1rSection_L:Action   = {  CreateChildren( cf1rTableAttic, 1, "TableAttic" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual Attic table rows
;   "Create cf1rtblRowAttic for all Attics"
;      Attic:CF1R_AtticRow   = {  CreateComp( cf1rtblRowAttic, Name + "AtticRow" )  }
  ; Rules to populate Attic table rows for ALL Attic
;      "Set Attic:CF1R_AtticRow:L01_AtticName" Attic:CF1R_AtticRow:L01_AtticName  = {  Name  }
;      "Set Attic:CF1R_AtticRow:L02_ConstructionAssemblyNamePerformanceRes" Attic:CF1R_AtticRow:L02_ConstructionAssemblyNamePerformanceRes  = {  Construction:Name  }
;      "Set Attic:CF1R_AtticRow:L03_IsAtticVented" Attic:CF1R_AtticRow:L03_IsAtticVented  = { if( EnumString( Type ) == "Ventilated") then "true" else "false" endif }
;      "Set Attic:CF1R_AtticRow:L04_RoofRise" Attic:CF1R_AtticRow:L04_RoofRise  = {  RoofRise  }
;      "Set Attic:CF1R_AtticRow:L05_RoofReflectance" Attic:CF1R_AtticRow:L05_RoofReflectance  = {  RoofSolReflect  }
;      "Set Attic:CF1R_AtticRow:L06_RoofEmittance" Attic:CF1R_AtticRow:L06_RoofEmittance  = {  RoofEmiss  }
;      "Set Attic:CF1R_AtticRow:L07_RadiantBarrierToBeInstalled" Attic:CF1R_AtticRow:L07_RadiantBarrierToBeInstalled  = {  if (Construction:RadiantBarrier > 0) then "true" else "false" endif }
;      "Set Attic:CF1R_AtticRow:L08_CoolRoofToBeInstalled" Attic:CF1R_AtticRow:L08_CoolRoofToBeInstalled  = { if (SolReflSpclFtrs = 2) then "true" else "false" endif }
;      "Set Attic:CF1R_AtticRow:L09_StatusEAA"
;         Attic:CF1R_AtticRow:L09_StatusEAA  =                     ; SAC 7/30/19 - added logic to report L09_StatusEAA for AdditionAlone projects (tic #1118)
;         {  if (ResProj:RunScope = 1 .AND. IfValidAnd( ResProj:IsAddAlone != 0 )==0)   ; new construction
;            then  UNDEFINED
;            else if (IsNew)
;            then  "New"  
;            else if (IsExisting)
;            then  "Existing"
;            else if (IsAltered .OR. IsAlteredSurface)
;            then  "Altered"
;            else  UNDEFINED   ; error?
;            endif endif endif endif  }
;      "Set Attic:CF1R_AtticRow:L10_VerifiedExistingCondition"
;         Attic:CF1R_AtticRow:L10_VerifiedExistingCondition  = {
;            if (ResProj:RunScope = 1)   ; new construction
;            then  UNDEFINED
;            else if (IsNew)
;            then  "NA"
;            else if ((IsAltered .OR. IsAlteredSurface) .AND. IsVerified)
;            then  "Yes"
;            else  "No"
;            endif endif endif  }
;      "Set Attic:CF1R_AtticRow:L11_ConstructionAssemblyNamePerformanceRes"
;         Attic:CF1R_AtticRow:L11_ConstructionAssemblyNamePerformanceRes  = {  
;		    if ( IfValidAnd( CF1R_AtticRow:L10_VerifiedExistingCondition = "Yes" ) .AND.
;		         LocalCompAssigned( exConstruction )  )
;			then exConstruction:Name
;			else UNDEFINED
;			endif  }
  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL Attic table rows
;   "Set cf1rtblRowAttic parent"   cf1rtblRowAttic:Parent  = { cf1rTableAttic:Name  }
  ; END of Attic table rules
  ; ----------------------------------------------------------------------
;END
;*************************************************************************

;*************************************************************************
RULELIST "CF1RPRF01E_cf1rSection_AtticVA_Proposed"  1 0 0 1
   "Create & initialize new cf1rSection_AtticVA object"
      cf1rCF1RPRF01E:Action  = {  CreateChildren( cf1rSection_AtticVA, 1, "Section_AtticVA" )  }     ; no init needed
   "Create & initialize new cf1rTableAtticExisting object"
      cf1rSection_AtticVA:Action   = {  CreateChildren( cf1rTableAtticExisting, 1, "TableAtticExisting" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual existing Attic table rows
   "Create cf1rtblRowAtticExisting for all existing Attics"
      Attic:CF1R_AtticRowExisting   = {  
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  UNDEFINED
            else if (IsAltered .AND. IsVerified)
            then  CreateComp( cf1rtblRowAtticExisting, Name + "ExistingAtticRow" )
            else  UNDEFINED
            endif endif endif  }
  ; Rules to populate existing Attic table rows for existing Attic
      "Set Attic:CF1R_AtticRowExisting:AtticVA01_PartitionName" Attic:CF1R_AtticRowExisting:AtticVA01_PartitionName  = {  Name  }
      "Set Attic:CF1R_AtticRowExisting:AtticVA02_ConstructionAssemblyNamePerformanceRes" Attic:CF1R_AtticRowExisting:AtticVA02_ConstructionAssemblyNamePerformanceRes  = {  exConstruction:Name  }
      "Set Attic:CF1R_AtticRowExisting:AtticVA03_RoofRise" Attic:CF1R_AtticRowExisting:AtticVA03_RoofRise  = {  RoofRise  }
      "Set Attic:CF1R_AtticRowExisting:AtticVA04_SolarReflectanceAged" Attic:CF1R_AtticRowExisting:AtticVA04_SolarReflectanceAged  = {  exSolReflect  }
      "Set Attic:CF1R_AtticRowExisting:AtticVA05_ThermalEmittance" Attic:CF1R_AtticRowExisting:AtticVA05_ThermalEmittance  = {  exSolEmiss  }
      "Set Attic:CF1R_AtticRowExisting:AtticVA06_RadiantBarrierToBeInstalled" Attic:CF1R_AtticRowExisting:AtticVA06_RadiantBarrierToBeInstalled  = {  if (exConstruction:RadiantBarrier > 0) then "true" else "false" endif }
      "Set Attic:CF1R_AtticRowExisting:AtticVA07_CoolRoofToBeInstalled" Attic:CF1R_AtticRowExisting:AtticVA07_CoolRoofToBeInstalled  = { if (SolReflSpclFtrs = 2) then "true" else "false" endif }

  ; ----------------------------------------------------------------------
  ; Rule to set Parent for existing Attic table rows
   "Set cf1rtblRowAtticExisting parent"   cf1rtblRowAtticExisting:Parent  = { cf1rTableAtticExisting:Name  }
  ; END of existing Attic table rules
  ; ----------------------------------------------------------------------
  ; Rule to Delete empty Existing Attic table
   "DELETE empty cf1rTableAtticExisting object"
      cf1rSection_AtticVA:Action   = {  if (ComponentCount( cf1rtblRowAtticExisting ) < 1) then  DeleteComp()  else  UNCHANGED  endif }
  ; ----------------------------------------------------------------------
END
;*************************************************************************

;************************************************************************* RJH 9/10/22 renamed for NRCC/LMCC
RULELIST "CF1RPRF01E_cf1rSection_Doormf_Proposed"  1 0 0 1
   "Create & initialize new cf1rSection_Doormf object"
      nrccNRCCPRF:Action  = {  CreateChildren( cf1rSection_Doormf, 1, "Section_Doormf" )  }     ; no init needed
   "Create & initialize new cf1rTableDoormf object"
      cf1rSection_Doormf:Action   = {  CreateChildren( cf1rTableDoormf, 1, "TableDoormf" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual Door table rows
   "Create cf1rtblRowDoormf for all ExtWall Doors of Zone children"    ; SAC 9/5/19 - revised logic in following 3 rules to use new Parent2ComponentType() function (MFamProto)
      ResDr:CF1R_DoormfRow   = {  if ((Parent2ComponentType() == "Zone" .OR. Parent2ComponentType() == "OtherZone") && IfValidAnd( ParentValid( IsDemising ) > 0 )==0 )
                               then  CreateComp( cf1rtblRowDoormf, Name + "ZEWDoormfRow" )
                               else  UNCHANGED  endif  }
   "Create cf1rtblRowDoormf for all Demising IntWall Doors of Zone children"
      ResDr:CF1R_DoormfRow   = {  if ((Parent2ComponentType() == "Zone" .OR. Parent2ComponentType() == "OtherZone") && IfValidAnd( ParentValid( IsDemising ) > 0 ) )
                               then  CreateComp( cf1rtblRowDoormf, Name + "ZIWDoormfRow" )
                               else  UNCHANGED  endif  }
   "Create cf1rtblRowDoormf for all Doors of non-Zone children"
      ResDr:CF1R_DoormfRow   = {  if (Parent2ComponentType() != "Zone" .AND. Parent2ComponentType() != "OtherZone")
                               then  CreateComp( cf1rtblRowDoormf, Name + "GDoormfRow" )
                               else  UNCHANGED  endif  }
  ; Rules to populate Doormf table rows for ALL ResDoors
      "Set ResDr:CF1R_DoormfRow:Door01mf_DoorName" ResDr:CF1R_DoormfRow:Door01mf_DoorName  = {  Name  }
      "Set ResDr:CF1R_DoormfRow:Door02mf_DoorArea" ResDr:CF1R_DoormfRow:Door02mf_DoorArea  = {  atof( Format( "%.2f", Area ) ) }
      "Set ResDr:CF1R_DoormfRow:Door03mf_UFactor" ResDr:CF1R_DoormfRow:Door03mf_UFactor  = {  atof( Format( "%.4f", Ufactor ) )  }
      "Set ResDr:CF1R_DoormfRow:Door04mf_Status"
         ResDr:CF1R_DoormfRow:Door04mf_Status  =  {
                if (Status == 3) then "New"
                else if (Status == 1) then "ExistingUnchanged"
                else if (Status == 2) then "ExistingAlteration"
                else UNDEFINED
                endif endif endif }
  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL Doormf table rows
   "Set cf1rtblRowDoormf parent"   cf1rtblRowDoormf:Parent  = { cf1rTableDoormf:Name  }
  ; END of Opaque Doormf table rules
  ; ----------------------------------------------------------------------
END
;*************************************************************************







;************************************************************************* RJH 9/14/22 for NRCC/LMCC
RULELIST "CF1RPRF01E_cf1rSection_Fenmf_Proposed"  1 0 0 1
  ; Section_Fenmf table
   "Create & initialize new cf1rSection_Fenmf object"
      nrccNRCCPRF:Action  = {  CreateChildren( cf1rSection_Fenmf, 1, "Section_Fenmf" )  }     ; no init needed
   "Create & initialize new cf1rTableFenmf object"
      cf1rSection_Fenmf:Action   = {  CreateChildren( cf1rTableFenmf, 1, "TableFenmf" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual Fenmf table rows
   "Create cf1rtblRowFenmf for all Windows"
      ResWin:CF1R_FenmfRow   = {  CreateComp( cf1rtblRowFenmf, Name + "WindowRow" )  }
  ; Rules to populate Glazing table rows for ALL Windows
      "Set ResWin:CF1R_FenmfRow:Fen01mf_FenestrationName" ResWin:CF1R_FenmfRow:Fen01mf_FenestrationName  = {  Name  }
      "Set ResWin:CF1R_FenmfRow:Fen02amf_FenestrationType" ResWin:CF1R_FenmfRow:Fen02amf_FenestrationType  = {  "VerticalFenestration"  }
      "Set ResWin:CF1R_FenmfRow:Fen02a1mf_DynamicGlazing" ResWin:CF1R_FenmfRow:Fen02a1mf_DynamicGlazing  = {  "false"  }
      "Set ResWin:CF1R_FenmfRow:Fen02bmf_FenestrationProductType" ResWin:CF1R_FenmfRow:Fen02bmf_FenestrationProductType  = {  
         if (IfValidAnd(VentArea > 0))
         then "OperableWindowMF"
         else "FixedWindowMF"
         endif }
      "Set ResWin:CF1R_FenmfRow:Fen02cmf_NotApplicableMessage" ResWin:CF1R_FenmfRow:Fen02cmf_NotApplicableMessage  = {  "NotApplicable"  }
      "Set ResWin:CF1R_FenmfRow:Fen03mf_PartitionName" ResWin:CF1R_FenmfRow:Fen03mf_PartitionName  = {  Parent( Name )  }
      "Set ResWin:CF1R_FenmfRow:Fen03mf_NotApplicableMessage" ResWin:CF1R_FenmfRow:Fen03mf_NotApplicableMessage  =
         {  if (LocalStatus( CF1R_FenmfRow:Fen03mf_PartitionName ) < 1) then  "NotApplicable"  else  UNDEFINED  endif  }
      "Set ResWin:CF1R_FenmfRow:Fen04mf_Azimuth" ResWin:CF1R_FenmfRow:Fen04mf_Azimuth  = {  atof( Format( "%.2f", Azimuth ) )  }
      "Set ResWin:CF1R_FenmfRow:Fen05mf_NotApplicableMessage" ResWin:CF1R_FenmfRow:Fen05mf_NotApplicableMessage  = {  "NotApplicable"  }
      "Set ResWin:CF1R_FenmfRow:Fen06mf_NotApplicableMessage" ResWin:CF1R_FenmfRow:Fen06mf_NotApplicableMessage  = {  "NotApplicable"  }
      "Set ResWin:CF1R_FenmfRow:Fen07mf_FenestrationIdenticalMultiplier" ResWin:CF1R_FenmfRow:Fen07mf_FenestrationIdenticalMultiplier  = {  atof( Format( "%.2f", Multiplier ) )  }
      "Set ResWin:CF1R_FenmfRow:Fen07mf_NotApplicableMessage" ResWin:CF1R_FenmfRow:Fen07mf_NotApplicableMessage  =
         {  if (LocalStatus( CF1R_FenmfRow:Fen07mf_FenestrationIdenticalMultiplier ) < 1) then  "NotApplicable"  else  UNDEFINED  endif  }
      "Set ResWin:CF1R_FenmfRow:Fen08mf_FenestrationAssemblyArea" ResWin:CF1R_FenmfRow:Fen08mf_FenestrationAssemblyArea  = {  atof( Format( "%.2f", Area * Multiplier ) )  }
      "Set ResWin:CF1R_FenmfRow:Fen09mf_FenestrationAssemblyUFactor" ResWin:CF1R_FenmfRow:Fen09mf_FenestrationAssemblyUFactor  = {  atof( Format( "%.2f", NFRCUfactor ) )  }
      "Set ResWin:CF1R_FenmfRow:Fen10mf_FenestrationCertificationMethod" ResWin:CF1R_FenmfRow:Fen10mf_FenestrationCertificationMethod  = { 
                                                                                                                           switch( EnumString( UfactorSHGCSource ) )
                                                                                                                              case "NFRC"    :  "NFRCRated"
                                                                                                                              case "default" :  "CECDefaultPerformance"
                                                                                                                              case "ADFP"    :  "NA6Equations"
                                                                                                                              default  :  UNDEFINED
                                                                                                                           endswitch  }
      "Set ResWin:CF1R_FenmfRow:Fen11mf_FenestrationAssemblySHGC" ResWin:CF1R_FenmfRow:Fen11mf_FenestrationAssemblySHGC  = {  atof( Format( "%.2f", NFRCSHGC ) )  }
      "Set ResWin:CF1R_FenmfRow:Fen12mf_FenestrationCertificationMethod" ResWin:CF1R_FenmfRow:Fen12mf_FenestrationCertificationMethod  = { 
                                                                                                                           switch( EnumString( UfactorSHGCSource ) )
                                                                                                                              case "NFRC"    :  "NFRCRated"
                                                                                                                              case "default" :  "CECDefaultPerformance"
                                                                                                                              case "ADFP"    :  "NA6Equations"
                                                                                                                              default  :  UNDEFINED
                                                                                                                           endswitch  }
      "Set ResWin:CF1R_FenmfRow:Fen12mf_NotApplicableMessage" ResWin:CF1R_FenmfRow:Fen12mf_NotApplicableMessage  =
         {  if (LocalStatus( CF1R_FenmfRow:Fen12mf_FenestrationCertificationMethod ) < 1) then  "NotApplicable"  else  UNDEFINED  endif  }

      "Set ResWin:CF1R_FenmfRow:Fen13mf_NotApplicableMessage" ResWin:CF1R_FenmfRow:Fen13mf_NotApplicableMessage  =
         {  "NotApplicable"  }

      "Set ResWin:CF1R_FenmfRow:Fen14mf_ExternalShadingObjectType" ResWin:CF1R_FenmfRow:Fen14mf_ExternalShadingObjectType  = { 
                                                                                                                           switch( EnumString( ExteriorShade ) )
                                                                                                                              case "None"                    :  "NoExternalShadingDevice"
                                                                                                                              case "Insect Screen (default)" :  "StandardBugScreen"
                                                                                                                              default  :  UNDEFINED
                                                                                                                           endswitch  }
      "Set ResWin:CF1R_FenmfRow:Fen14mf_NotApplicableMessage" ResWin:CF1R_FenmfRow:Fen14mf_NotApplicableMessage  =
         {  if (LocalStatus( CF1R_FenmfRow:Fen14mf_ExternalShadingObjectType ) < 1) then  "NotApplicable"  else  UNDEFINED  endif  }
      "Set ResWin:CF1R_FenmfRow:Fen15mf_Status"
         ResWin:CF1R_FenmfRow:Fen15mf_Status  =  {
                if (Status == 3) then "New"
                else if (Status == 1) then "ExistingUnchanged"
                else if (Status == 2) then "ExistingAlteration"
                else UNDEFINED
                endif endif endif }


   "Create cf1rtblRowFenmf for all Skylights"
      ResSkylt:CF1R_FenmfRow   = {  CreateComp( cf1rtblRowFenmf, Name + "SkylightRow" )  }
  ; Rules to populate Glazing table rows for ALL Skylights
      "Set ResSkylt:CF1R_FenmfRow:Fen01mf_FenestrationName" ResSkylt:CF1R_FenmfRow:Fen01mf_FenestrationName  = {  Name  }
      "Set ResSkylt:CF1R_FenmfRow:Fen02amf_FenestrationType" ResSkylt:CF1R_FenmfRow:Fen02amf_FenestrationType  = {  "Skylight"  }
      "Set ResSkylt:CF1R_FenmfRow:Fen02a1mf_DynamicGlazing" ResSkylt:CF1R_FenmfRow:Fen02a1mf_DynamicGlazing  = {  "false"  }
      "Set ResSkylt:CF1R_FenmfRow:Fen02bmf_FenestrationProductType" ResSkylt:CF1R_FenmfRow:Fen02bmf_FenestrationProductType  = {  
         "Skylight" }
      "Set ResSkylt:CF1R_FenmfRow:Fen02cmf_NotApplicableMessage" ResSkylt:CF1R_FenmfRow:Fen02cmf_NotApplicableMessage  = {  "NotApplicable"  }
      "Set ResSkylt:CF1R_FenmfRow:Fen03mf_PartitionName" ResSkylt:CF1R_FenmfRow:Fen03mf_PartitionName  = {  Parent( Name )  }
      "Set ResSkylt:CF1R_FenmfRow:Fen03mf_NotApplicableMessage" ResSkylt:CF1R_FenmfRow:Fen03mf_NotApplicableMessage  =
         {  if (LocalStatus( CF1R_FenmfRow:Fen03mf_PartitionName ) < 1) then  "NotApplicable"  else  UNDEFINED  endif  }
      "Set ResSkylt:CF1R_FenmfRow:Fen04mf_Azimuth" ResSkylt:CF1R_FenmfRow:Fen04mf_Azimuth  = {  atof( Format( "%.2f", Azimuth ) )  }
      "Set ResSkylt:CF1R_FenmfRow:Fen05mf_FenestrationCertificationMethod" ResSkylt:CF1R_FenmfRow:Fen05mf_FenestrationCertificationMethod  = { 
                                                                                                                           switch( EnumString( UfactorSHGCSource ) )
                                                                                                                              case "NFRC"    :  "NFRCRated"
                                                                                                                              case "default" :  "CECDefaultPerformance"
                                                                                                                              case "ADFP"    :  "ADFP"
                                                                                                                              default  :  UNDEFINED
                                                                                                                           endswitch  }
      "Set ResSkylt:CF1R_FenmfRow:Fen06mf_AssemblyContext" ResSkylt:CF1R_FenmfRow:Fen06mf_AssemblyContext  = {  "unknown"  }
      "Set ResSkylt:CF1R_FenmfRow:Fen07mf_FenestrationIdenticalMultiplier" ResSkylt:CF1R_FenmfRow:Fen07mf_FenestrationIdenticalMultiplier  = {  atof( Format( "%.2f", Multiplier ) )  }
      "Set ResSkylt:CF1R_FenmfRow:Fen07mf_NotApplicableMessage" ResSkylt:CF1R_FenmfRow:Fen07mf_NotApplicableMessage  =
         {  if (LocalStatus( CF1R_FenmfRow:Fen07mf_FenestrationIdenticalMultiplier ) < 1) then  "NotApplicable"  else  UNDEFINED  endif  }
      "Set ResSkylt:CF1R_FenmfRow:Fen08mf_FenestrationAssemblyArea" ResSkylt:CF1R_FenmfRow:Fen08mf_FenestrationAssemblyArea  = {  atof( Format( "%.2f", Area * Multiplier ) )  }
      "Set ResSkylt:CF1R_FenmfRow:Fen09mf_FenestrationAssemblyUFactor" ResSkylt:CF1R_FenmfRow:Fen09mf_FenestrationAssemblyUFactor  = {  atof( Format( "%.2f", NFRCUfactor ) )  }
      "Set ResSkylt:CF1R_FenmfRow:Fen10mf_FenestrationCertificationMethod" ResSkylt:CF1R_FenmfRow:Fen10mf_FenestrationCertificationMethod  = { 
                                                                                                                           switch( EnumString( UfactorSHGCSource ) )
                                                                                                                              case "NFRC"    :  "NFRCRated"
                                                                                                                              case "default" :  "CECDefaultPerformance"
                                                                                                                              case "ADFP"    :  "NA6Equations"
                                                                                                                              default  :  UNDEFINED
                                                                                                                           endswitch  }
      "Set ResSkylt:CF1R_FenmfRow:Fen11mf_FenestrationAssemblySHGC" ResSkylt:CF1R_FenmfRow:Fen11mf_FenestrationAssemblySHGC  = {  atof( Format( "%.2f", NFRCSHGC ) )  }
      "Set ResSkylt:CF1R_FenmfRow:Fen12mf_FenestrationCertificationMethod" ResSkylt:CF1R_FenmfRow:Fen12mf_FenestrationCertificationMethod  = { 
                                                                                                                           switch( EnumString( UfactorSHGCSource ) )
                                                                                                                              case "NFRC"    :  "NFRCRated"
                                                                                                                              case "default" :  "CECDefaultPerformance"
                                                                                                                              case "ADFP"    :  "ADFP"
                                                                                                                              default  :  UNDEFINED
                                                                                                                           endswitch  }

      "Set ResSkylt:CF1R_FenmfRow:Fen13mf_NotApplicableMessage" ResSkylt:CF1R_FenmfRow:Fen13mf_NotApplicableMessage  =
         {  "NotApplicable"  }

      "Set ResSkylt:CF1R_FenmfRow:Fen14mf_ExternalShadingObjectType" ResSkylt:CF1R_FenmfRow:Fen14mf_ExternalShadingObjectType  = { "NoExternalShadingDevice" }
      "Set ResSkylt:CF1R_FenmfRow:Fen14mf_NotApplicableMessage" ResSkylt:CF1R_FenmfRow:Fen14mf_NotApplicableMessage  =
         {  if (LocalStatus( CF1R_FenmfRow:Fen14mf_ExternalShadingObjectType ) < 1) then  "NotApplicable"  else  UNDEFINED  endif  }
      "Set ResSkylt:CF1R_FenmfRow:Fen15mf_Status"
         ResSkylt:CF1R_FenmfRow:Fen15mf_Status  =  {
                if (Status == 3) then "New"
                else if (Status == 1) then "ExistingUnchanged"
                else if (Status == 2) then "ExistingAlteration"
                else UNDEFINED
                endif endif endif }

  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL Fenmf table rows
   "Set cf1rtblRowFenmf parent"   cf1rtblRowFenmf:Parent  = { cf1rTableFenmf:Name  }
  ; END of Fenmf table rules
  ; ----------------------------------------------------------------------
END
;*************************************************************************











;*************************************************************************
RULELIST "CF1RPRF01E_cf1rSection_Ll_Proposed"  1 0 0 1
   "Create & initialize new cf1rSection_Ll object"
      cf1rCF1RPRF01E:Action  = {  CreateChildren( cf1rSection_Ll, 1, "Section_Ll" )  }     ; no init needed
   "Create & initialize new cf1rTableOpaqueDoorsExisting object"
      cf1rSection_Ll:Action   = {  CreateChildren( cf1rTableOpaqueDoorsExisting, 1, "TableOpaqueDoorsExisting" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual Door table rows
   "Create cf1rtblRowDoorExisting for all existing Doors"
      ResDr:CF1R_DoorRowExisting   = {  
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  UNDEFINED
            else if (IsAltered .AND. IsVerified)
            then  CreateComp( cf1rtblRowDoorExisting, Name + " ExDoorRow" )
            else  UNDEFINED
            endif endif endif  }
  ; Rules to populate Existing Door table rows for ALL existing Doors
      "Set ResDr:CF1R_DoorRowExisting:Ll01_DoorName" ResDr:CF1R_DoorRowExisting:Ll01_DoorName  = {  Name  }
      "Set ResDr:CF1R_DoorRowExisting:Ll02_PartitionName" ResDr:CF1R_DoorRowExisting:Ll02_PartitionName  = {  Parent( Name )  }
      "Set ResDr:CF1R_DoorRowExisting:Ll03_DoorArea" ResDr:CF1R_DoorRowExisting:Ll03_DoorArea  = {  atof( Format( "%.2f", Area ) ) }
      "Set ResDr:CF1R_DoorRowExisting:Ll04_UFactor" ResDr:CF1R_DoorRowExisting:Ll04_UFactor  = {  atof( Format( "%.3f", exUfactor ) )  }
  ; ----------------------------------------------------------------------
  ; Rule to set Parent for Existing Door table rows
   "Set cf1rtblRowDoorExisting parent"   cf1rtblRowDoorExisting:Parent  = { cf1rTableOpaqueDoorsExisting:Name  }
  ; END of Existing Opaque Door table rules
  ; ----------------------------------------------------------------------
  ; Rule to Delete empty Existing Opaque Door table
   "DELETE empty cf1rTableOpaqueDoorsExisting object"
      cf1rSection_Ll:Action   = {  if (ComponentCount( cf1rtblRowDoorExisting ) < 1) then  DeleteComp()  else  UNCHANGED  endif }
  ; ----------------------------------------------------------------------
END
;*************************************************************************

;*************************************************************************
RULELIST "CF1RPRF01E_cf1rSection_O_Proposed"  1 0 0 1
   "Create & initialize new cf1rSection_O object"
      cf1rCF1RPRF01E:Action  = {  CreateChildren( cf1rSection_O, 1, "Section_O" )  }     ; no init needed
   "Create & initialize new cf1rTableOverhang object"
      cf1rSection_O:Action   = {  CreateChildren( cf1rTableOverhang, 1, "TableOverhang" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual OverhangFins table rows
   "Create cf1rtblRowOverhang for all relevant Windows with OverhangFins"
      ResWin:CF1R_OverhangRow   = {  if ( ShowFinsOverhang != 1 ) then UNDEFINED
                                     else if ( OverhangDepth <= 0 .AND. LeftFinDepth <= 0 .AND. RightFinDepth <= 0 )
									 then UNDEFINED
									 else CreateComp( cf1rtblRowOverhang, Name + " OverhangRow" )  
									 endif endif  }
  ; ----------------------------------------------------------------------
    ; Rules to populate Overhang table row for this Window
      "Set ResWin:CF1R_OverhangRow:O01_FenestrationVerticalName" ResWin:CF1R_OverhangRow:O01_FenestrationVerticalName  = {  Name  }
      "Set ResWin:CF1R_OverhangRow:O02_OverhangDepth" ResWin:CF1R_OverhangRow:O02_OverhangDepth  = {  OverhangDepth  }
      "Set ResWin:CF1R_OverhangRow:O03_OverhangDistanceUp" ResWin:CF1R_OverhangRow:O03_OverhangDistanceUp  = {  OverhangDistUp  }
      "Set ResWin:CF1R_OverhangRow:O04_OverhangLeftExtent" ResWin:CF1R_OverhangRow:O04_OverhangLeftExtent  = {  OverhangExL  }
      "Set ResWin:CF1R_OverhangRow:O05_OverhangRightExtent" ResWin:CF1R_OverhangRow:O05_OverhangRightExtent  = {  OverhangExR  }
      "Set ResWin:CF1R_OverhangRow:O06_OverhangFlapHeight" ResWin:CF1R_OverhangRow:O06_OverhangFlapHeight  = {  OverhangFlap  }
      "Set ResWin:CF1R_OverhangRow:O07_FinDepth" ResWin:CF1R_OverhangRow:O07_FinDepth  = {  LeftFinDepth  }
      "Set ResWin:CF1R_OverhangRow:O08_FinTopUp" ResWin:CF1R_OverhangRow:O08_FinTopUp  = {  LeftFinTopUp  }
      "Set ResWin:CF1R_OverhangRow:O09_FinDistanceLeft" ResWin:CF1R_OverhangRow:O09_FinDistanceLeft  = {  LeftFinDistL  }
      "Set ResWin:CF1R_OverhangRow:O10_FinBottomUp" ResWin:CF1R_OverhangRow:O10_FinBottomUp  = {  LeftFinBotUp  }
      "Set ResWin:CF1R_OverhangRow:O11_FinDepth" ResWin:CF1R_OverhangRow:O11_FinDepth  = {  RightFinDepth  }
      "Set ResWin:CF1R_OverhangRow:O12_FinTopUp" ResWin:CF1R_OverhangRow:O12_FinTopUp  = {  RightFinTopUp  }
      "Set ResWin:CF1R_OverhangRow:O13_FinDistanceRight" ResWin:CF1R_OverhangRow:O13_FinDistanceRight  = {  RightFinDistR  }
      "Set ResWin:CF1R_OverhangRow:O14_FinBottomUp" ResWin:CF1R_OverhangRow:O14_FinBottomUp  = {  RightFinBotUp  }
      "Set ResWin:CF1R_OverhangRow:O15_StatusEAA"
         ResWin:CF1R_OverhangRow:O15_StatusEAA  =                    ; SAC 7/30/19 - added logic to report O15_StatusEAA for AdditionAlone projects (tic #1118)
         {  if (ResProj:RunScope = 1 .AND. IfValidAnd( ResProj:IsAddAlone != 0 )==0)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  "New"  
            else if (IsExisting)
            then  "Existing"
            else if (IsAltered)
            then  "Altered"
            else  UNDEFINED   ; error?
            endif endif endif endif  }
      "Set ResWin:CF1R_OverhangRow:O16_VerifiedExistingCondition"
         ResWin:CF1R_OverhangRow:O16_VerifiedExistingCondition  = {
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  "NA"
            else if (IsAltered .AND. IsVerified)
            then  "Yes"
            else  "No"
            endif endif endif  }
  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL OverhangFins table rows
   "Set cf1rtblRowOverhang parent"   cf1rtblRowOverhang:Parent  = { cf1rTableOverhang:Name  }
  ; END of OverhangFins table rules
  ; ----------------------------------------------------------------------
  ; Rule to Delete empty OverhangFins table
   "DELETE empty cf1rTableOverhang object"
      cf1rSection_O:Action   = {  if (ComponentCount( cf1rtblRowOverhang ) < 1) then  DeleteComp()  else  UNCHANGED  endif }
  ; ----------------------------------------------------------------------
END
;*************************************************************************



;*************************************************************************
RULELIST "CF1RPRF01E_cf1rSection_OverhangVA_Proposed"  1 0 0 1
   "Create & initialize new cf1rSection_OverhangVA object"
      cf1rCF1RPRF01E:Action  = {  CreateChildren( cf1rSection_OverhangVA, 1, "Section_OverhangVA" )  }     ; no init needed
   "Create & initialize new cf1rTableOverhang object"
      cf1rSection_OverhangVA:Action   = {  CreateChildren( cf1rTableOverhangsExisting, 1, "TableOverhangsExisting" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Rules to create individual existing OverhangFins table rows
   "Create cf1rtblRowSlabFloorExisting for all existing SlabFloor types"
      ResWin:CF1R_OverhangRowExisting   = {  
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  UNDEFINED
            else if (IsAltered .AND. IsVerified .AND. ModelFinsOverhang)
            then  CreateComp( cf1rtblRowOverhangExisting, Name + " ExistingOverhangRow" )
            else  UNDEFINED
            endif endif endif }
  ; ----------------------------------------------------------------------
    ; Rules to populate Overhang table row for this Window
      "Set ResWin:CF1R_OverhangRowExisting:OverhangVA01_FenestrationVerticalName" ResWin:CF1R_OverhangRowExisting:OverhangVA01_FenestrationVerticalName  = {  Name  }
      "Set ResWin:CF1R_OverhangRowExisting:OverhangVA02_OverhangDepth" ResWin:CF1R_OverhangRowExisting:OverhangVA02_OverhangDepth  = {  exOverhangDepth  }
      "Set ResWin:CF1R_OverhangRowExisting:OverhangVA03_OverhangDistanceUp" ResWin:CF1R_OverhangRowExisting:OverhangVA03_OverhangDistanceUp  = {  exOverhangDistUp  }
      "Set ResWin:CF1R_OverhangRowExisting:OverhangVA04_OverhangLeftExtent" ResWin:CF1R_OverhangRowExisting:OverhangVA04_OverhangLeftExtent  = {  exOverhangExL  }
      "Set ResWin:CF1R_OverhangRowExisting:OverhangVA05_OverhangRightExtent" ResWin:CF1R_OverhangRowExisting:OverhangVA05_OverhangRightExtent  = {  exOverhangExR  }
      "Set ResWin:CF1R_OverhangRowExisting:OverhangVA06_OverhangFlapHeight" ResWin:CF1R_OverhangRowExisting:OverhangVA06_OverhangFlapHeight  = {  exOverhangFlap  }
      "Set ResWin:CF1R_OverhangRowExisting:OverhangVA07_FinDepth" ResWin:CF1R_OverhangRowExisting:OverhangVA07_FinDepth  = {  exLeftFinDepth  }
      "Set ResWin:CF1R_OverhangRowExisting:OverhangVA08_FinTopUp" ResWin:CF1R_OverhangRowExisting:OverhangVA08_FinTopUp  = {  exLeftFinTopUp  }
      "Set ResWin:CF1R_OverhangRowExisting:OverhangVA09_FinDistanceLeft" ResWin:CF1R_OverhangRowExisting:OverhangVA09_FinDistanceLeft  = {  exLeftFinDistL  }
      "Set ResWin:CF1R_OverhangRowExisting:OverhangVA10_FinBottomUp" ResWin:CF1R_OverhangRowExisting:OverhangVA10_FinBottomUp  = {  exLeftFinBotUp  }
      "Set ResWin:CF1R_OverhangRowExisting:OverhangVA11_FinDepth" ResWin:CF1R_OverhangRowExisting:OverhangVA11_FinDepth  = {  exRightFinDepth  }
      "Set ResWin:CF1R_OverhangRowExisting:OverhangVA12_FinTopUp" ResWin:CF1R_OverhangRowExisting:OverhangVA12_FinTopUp  = {  exRightFinTopUp  }
      "Set ResWin:CF1R_OverhangRowExisting:OverhangVA13_FinDistanceRight" ResWin:CF1R_OverhangRowExisting:OverhangVA13_FinDistanceRight  = {  exRightFinDistR  }
      "Set ResWin:CF1R_OverhangRowExisting:OverhangVA14_FinBottomUp" ResWin:CF1R_OverhangRowExisting:OverhangVA14_FinBottomUp  = {  exRightFinBotUp  }

  ; ----------------------------------------------------------------------
  ; Rule to set Parent for ALL existing OverhangFins table rows
   "Set cf1rtblRowOverhangExisting parent"   cf1rtblRowOverhangExisting:Parent  = { cf1rTableOverhangsExisting:Name  }
  ; END of existing OverhangFins table rules
  ; ----------------------------------------------------------------------
  ; Rule to Delete empty Existing OverhangFins table
   "DELETE empty cf1rTableOverhangsExisting object"
      cf1rSection_OverhangVA:Action   = {  if (ComponentCount( cf1rtblRowOverhangExisting ) < 1) then  DeleteComp()  else  UNCHANGED  endif }
  ; ----------------------------------------------------------------------
END
;*************************************************************************


;*************************************************************************
RULELIST "CF1RPRF01E_cf1rSection_S_Proposed_SingleFamily"  1 0 0 1

   "Create & initialize new cf1rTableWaterHeatingSF object"
      cf1rSection_S:Action   = {  CreateChildren( cf1rTableWaterHeatingSF, 1, "WaterHeatingSF" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Section_S rules to create individual WaterHeatingSF table rows
   "Create cf1rtblRowDHWSysSF for all Single Family WaterHeating instances"
      DHWSys:CF1R_DHWSysSFRow   = {  if (FloorAreaServed[1] > 0)
                                     then  CreateComp( cf1rtblRowDHWSysSF, Name + "DHWSysSFRow" )
                                     else  UNCHANGED  endif  }
  ; Rules to populate Single Family WaterHeating table rows for ALL DHWSys instances
      "Set DHWSys:CF1R_DHWSysSFRow:S01_WaterHeatingSystemName" DHWSys:CF1R_DHWSysSFRow:S01_WaterHeatingSystemName  = {  Name  }
      ;"Set DHWSys:CF1R_DHWSysSFRow:S02_ResidentialWaterHeatingSystemType" DHWSys:CF1R_DHWSysSFRow:S02_ResidentialWaterHeatingSystemType  = {  EnumString( SystemType )  }
      "Set DHWSys:CF1R_DHWSysSFRow:S02_ResidentialWaterHeatingSystemType" DHWSys:CF1R_DHWSysSFRow:S02_ResidentialWaterHeatingSystemType  = {
               if (IfValidAnd( IsHydronic > 0.5 )) then "Combined Hydronic" else "DHW" endif  }    ; SAC 4/27/19

      "Set DHWSys:CF1R_DHWSysSFRow:S03_ResidentialDHWDwellingUnitDistributionType" DHWSys:CF1R_DHWSysSFRow:S03_ResidentialDHWDwellingUnitDistributionType  = {  
               switch (EnumString( SystemType ))
                  case  "Standard"                                                    : "StandardDistribution"
                  case  "Central Parallel Piping"                                     : "StandardDistributionCentralParallelPiping"
                  case  "Point of use"                                                : "PointOfUse"
                  case  "Recirculation with demand control, push button"              : "DemandRecirculationManualControl"
                  case  "Recirculation with demand control, occupancy/motion sensor"  : "DemandRecirculationSensorControls"
                  case  "Recirculation with non-demand control (continuous pumping)"  : "RecirculationNonDemand"
                  case  "(HERS req'd) Pipe Insulation, All Lines"                     : "StandardDistributionInsulatedPipesHERS"
                  case  "(HERS req'd) Central Parallel Piping"                        : "StandardDistributionCentralParallelPipingHERS"
                  case  "(HERS req'd) Recirculation with demand control, push button" : "DemandRecirculationManualControlHERS"
                  case  "(HERS req'd) Recirculation with demand control, occupancy/motion sensor" : "DemandRecirculationSensorControlsHERS"
                  default  :  UNDEFINED
               endswitch  }      ; SAC 4/27/19
;      "Set DHWSys:CF1R_DHWSysSFRow:S03_ResidentialDHWDwellingUnitDistributionTypeOther" DHWSys:CF1R_DHWSysSFRow:S03_ResidentialDHWDwellingUnitDistributionTypeOther  = {  EnumString( MFamDistType )  }

    ; RJH 10/28/2019 Changed S04, S05 and S12 output for Ticket #1160
      "Set DHWSys:CF1R_DHWSysSFRow:S04_WaterHeaterName[1]" DHWSys:CF1R_DHWSysSFRow:S04_WaterHeaterName[1]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 1))
		   then DHWHeater[1]
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysSFRow:S04_WaterHeaterName[2]" DHWSys:CF1R_DHWSysSFRow:S04_WaterHeaterName[2]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 2))
		   then DHWHeater[2]
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysSFRow:S04_WaterHeaterName[3]" DHWSys:CF1R_DHWSysSFRow:S04_WaterHeaterName[3]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 3))
		   then DHWHeater[3]
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysSFRow:S04_WaterHeaterName[4]" DHWSys:CF1R_DHWSysSFRow:S04_WaterHeaterName[4]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 4))
		   then DHWHeater[4]
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysSFRow:S04_WaterHeaterName[5]" DHWSys:CF1R_DHWSysSFRow:S04_WaterHeaterName[5]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 5))
		   then DHWHeater[5]
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysSFRow:S04_WaterHeaterName[6]" DHWSys:CF1R_DHWSysSFRow:S04_WaterHeaterName[6]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 6))
		   then DHWHeater[6]
		   else UNDEFINED
		   endif }

      "Set DHWSys:CF1R_DHWSysSFRow:S05_WaterHeaterCount[1]" DHWSys:CF1R_DHWSysSFRow:S05_WaterHeaterCount[1]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 1))
		   then HeaterMult[1]
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysSFRow:S05_WaterHeaterCount[2]" DHWSys:CF1R_DHWSysSFRow:S05_WaterHeaterCount[2]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 2))
		   then HeaterMult[2]
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysSFRow:S05_WaterHeaterCount[3]" DHWSys:CF1R_DHWSysSFRow:S05_WaterHeaterCount[3]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 3))
		   then HeaterMult[3]
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysSFRow:S05_WaterHeaterCount[4]" DHWSys:CF1R_DHWSysSFRow:S05_WaterHeaterCount[4]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 4))
		   then HeaterMult[4]
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysSFRow:S05_WaterHeaterCount[5]" DHWSys:CF1R_DHWSysSFRow:S05_WaterHeaterCount[5]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 5))
		   then HeaterMult[5]
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysSFRow:S05_WaterHeaterCount[6]" DHWSys:CF1R_DHWSysSFRow:S05_WaterHeaterCount[6]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 6))
		   then HeaterMult[6]
		   else UNDEFINED
		   endif }

      "Set DHWSys:CF1R_DHWSysSFRow:S12_WaterHeaterNameCount[1]" DHWSys:CF1R_DHWSysSFRow:S12_WaterHeaterNameCount[1]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 1))
		   then Format( "%s (%.0f)", DHWHeater[1], HeaterMult[1] )
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysSFRow:S12_WaterHeaterNameCount[2]" DHWSys:CF1R_DHWSysSFRow:S12_WaterHeaterNameCount[2]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 2))
		   then Format( "%s (%.0f)", DHWHeater[2], HeaterMult[2] )
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysSFRow:S12_WaterHeaterNameCount[3]" DHWSys:CF1R_DHWSysSFRow:S12_WaterHeaterNameCount[3]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 3))
		   then Format( "%s (%.0f)", DHWHeater[3], HeaterMult[3] )
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysSFRow:S12_WaterHeaterNameCount[4]" DHWSys:CF1R_DHWSysSFRow:S12_WaterHeaterNameCount[4]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 4))
		   then Format( "%s (%.0f)", DHWHeater[4], HeaterMult[4] )
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysSFRow:S12_WaterHeaterNameCount[5]" DHWSys:CF1R_DHWSysSFRow:S12_WaterHeaterNameCount[5]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 5))
		   then Format( "%s (%.0f)", DHWHeater[5], HeaterMult[5] )
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysSFRow:S12_WaterHeaterNameCount[6]" DHWSys:CF1R_DHWSysSFRow:S12_WaterHeaterNameCount[6]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 6))
		   then Format( "%s (%.0f)", DHWHeater[6], HeaterMult[6] )
		   else UNDEFINED
		   endif }

;      "Set DHWSys:CF1R_DHWSysSFRow:S06_WaterHeatingSolarFraction" DHWSys:CF1R_DHWSysSFRow:S06_WaterHeatingSolarFraction  = {  SolFracAnnRpt  }
;      "Set DHWSys:CF1R_DHWSysSFRow:S06_NotApplicableMessage" DHWSys:CF1R_DHWSysSFRow:S06_NotApplicableMessage  = { if ( LocalStatus ( CF1R_DHWSysSFRow:S06_WaterHeatingSolarFraction ) < 1 ) then "n/a" else UNDEFINED endif  }
         ; SAC 2/18/20 - added S06_WaterHeatingSolarSystemName for DHWSystems w/ assigned DHWSolarSys (tic #1198)
      "Set DHWSys:CF1R_DHWSysSFRow:S06_WaterHeatingSolarSystemName" DHWSys:CF1R_DHWSysSFRow:S06_WaterHeatingSolarSystemName  =
         {  if (IfValidAnd( DHWSolarSysRef:ErrID = 0 )) then  DHWSolarSysRef:Name
            else  UNDEFINED  endif  }
      "Set DHWSys:CF1R_DHWSysSFRow:S06_NotApplicableMessage" DHWSys:CF1R_DHWSysSFRow:S06_NotApplicableMessage  =
         {  if (LocalStatus( CF1R_DHWSysSFRow:S06_WaterHeatingSolarSystemName ) < 1) then  "n/a"  else  UNDEFINED  endif  }

      ; SAC 4/12/19 - revised for project-wide CD selection 
      "Set DHWSys:CF1R_DHWSysSFRow:S07_CompactDistributionType" DHWSys:CF1R_DHWSysSFRow:S07_CompactDistributionType  =     ; removed reference to SFamUserSpecCmpctDist - SAC 09/29/21 (tic #1277)
         {  if (ResProj:SFamCompactDistrib < 1) then  "NotCompact"
            else  switch (EnumString( ResProj:SFamCompactDistrib ))
                     case "Basic Credit"                  : "BasicType"
                     case "Expanded Credit (HERS req'd)"  : "Expanded"
                     default : UNDEFINED
                  endswitch  endif  }

      "Set DHWSys:CF1R_DHWSysSFRow:S08_WaterHeatingSystemHERS_VerificationName" DHWSys:CF1R_DHWSysSFRow:S08_WaterHeatingSystemHERS_VerificationName  =   ; SAC 5/23/19 - added checks for Compact & ShwrDrnWtrHtRecov
         {  if (LocalCompAssigned( HERSCheck ) < 1) then  UNDEFINED
            else if (IfValidAnd( HERSCheck:ParallelPipe > 0 ) .OR. IfValidAnd( HERSCheck:AllPipesIns > 0 ) .OR.
                     IfValidAnd( HERSCheck:PointOfUse > 0 ) .OR. IfValidAnd( HERSCheck:OccRecirc > 0 ) .OR.
                     IfValidAnd( HERSCheck:PushBtnRecirc > 0 ) .OR. IfValidAnd( HERSCheck:Compact > 0 ) .OR.
                     IfValidAnd( HERSCheck:ShwrDrnWtrHtRecov > 0 )) then  HERSCheck:Name
            else  UNDEFINED  endif endif  }
      "Set DHWSys:CF1R_DHWSysSFRow:S08_NotApplicableMessage" DHWSys:CF1R_DHWSysSFRow:S08_NotApplicableMessage  = {
            if (LocalStatus( CF1R_DHWSysSFRow:S08_WaterHeatingSystemHERS_VerificationName ) < 1) then  "n/a"  else  UNDEFINED  endif  }

      "Set DHWSys:CF1R_DHWSysSFRow:S09_StatusEAA" DHWSys:CF1R_DHWSysSFRow:S09_StatusEAA  =            ; SAC 7/30/19 - added logic to report S09_StatusEAA for AdditionAlone projects (tic #1118)
         {  if (ResProj:RunScope = 1 .AND. IfValidAnd( ResProj:IsAddAlone != 0 )==0)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  "New"  
            else if (IsExisting)
            then  "Existing"
            else if (IsAltered)
            then  "Altered"
            else  UNDEFINED   ; error?
            endif endif endif endif  }
      "Set DHWSys:CF1R_DHWSysSFRow:S10_VerifiedExistingCondition"
         DHWSys:CF1R_DHWSysSFRow:S10_VerifiedExistingCondition  = {
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  "NA"
            else if (IsAltered .AND. IsVerified)
            then  "Yes"
            else  "No"
            endif endif endif  }

; TO DO
;           "S11_WaterHeatingSystemName",                     BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, "Existing system name when Altered & Verified"

  ; Rule to add Single Family WaterHeating table rows to the cf1rTableWaterHeatingSF
      "Set DHWSys:CF1R_DHWSysSFRow:Parent"
         DHWSys:CF1R_DHWSysSFRow:Parent  = {  cf1rTableWaterHeatingSF:Name  }
END
;*************************************************************************

;*************************************************************************
RULELIST "CF1RPRF01E_cf1rSection_S_Proposed_MultiFamily"  1 0 0 1

   "Create & initialize new cf1rTableWaterHeatingMF object"
      cf1rSection_S:Action   = {  CreateChildren( cf1rTableWaterHeatingMF, 1, "WaterHeatingMF" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Section_S rules to create individual WaterHeatingMF table rows
   "Create cf1rtblRowDHWSysMF for all Multi Family WaterHeating instances"       ; SAC 9/9/19 - added logic to prevent row creation when NumDUsServed < 1 (CEC/LF)
      DHWSys:CF1R_DHWSysMFRow   = {  if (IfValidAnd( NumDUsServed > 0 )==0) then  UNDEFINED
                                     else  CreateComp( cf1rtblRowDHWSysMF, Name + "DHWSysMFRow" )  endif  }
  ; Rules to populate Multi Family WaterHeating table rows for ALL DHWSys instances
      "Set DHWSys:CF1R_DHWSysMFRow:S01_WaterHeatingSystemName" DHWSys:CF1R_DHWSysMFRow:S01_WaterHeatingSystemName  = {  Name  }
      ;"Set DHWSys:CF1R_DHWSysMFRow:S02_ResidentialWaterHeatingSystemType" DHWSys:CF1R_DHWSysMFRow:S02_ResidentialWaterHeatingSystemType  = {  EnumString( SystemType )  }
      "Set DHWSys:CF1R_DHWSysMFRow:S02_ResidentialWaterHeatingSystemType" DHWSys:CF1R_DHWSysMFRow:S02_ResidentialWaterHeatingSystemType  = {
               if (IfValidAnd( IsHydronic > 0.5 )) then "Combined Hydronic" else "DHW" endif  }    ; SAC 4/27/19
      "Set DHWSys:CF1R_DHWSysMFRow:S03_ResidentialWaterHeatingSystemCount" DHWSys:CF1R_DHWSysMFRow:S03_ResidentialWaterHeatingSystemCount  =    ; SAC 9/9/19 - added logic to report Central systems as single system (CEC/LF)
         {  if (IfValidAnd( CentralDHW > 0 )) then  1
            else  NumDUsServed  endif  }
      "Set DHWSys:CF1R_DHWSysMFRow:S04a_ResidentialDHWCentralDistributionType" DHWSys:CF1R_DHWSysMFRow:S04a_ResidentialDHWCentralDistributionType  = { 
            if (IfValidAnd( CentralDHW > 0 )) then   ; RJH 10/26/2019 Added logic for Ticket 1149
               switch (EnumString( MFamDistType ))
                  case  "Multi-family: No loops or recirc pump"							             :  "NoRecirculationPumpNoLoopsMF"
                  case  "Multi-family: Recirculating with no control (continuous pumping)"       :  "RecirculatingNonDemandContinuousPumpingMF"
                  case  "Multi-family: Recirculation demand control"                             :  "RecirculatingDemandControlMF"
                  case  "Multi-family: Recirculating with temperature modulation"	             :  "RecirculatingTemperatureModulationMF"
                  case  "Multi-family: Recirculating with temperature modulation and monitoring" :  "RecirculatingContinuousTemperatureModulationMonitoringMF"
                  default  :  "Other"
               endswitch        ; SAC 4/27/19
            else  UNDEFINED  endif  }
      ; RJH 10/26/2019 Added S04_NotApplicableMessage for Ticket 1149
      "Set DHWSys:CF1R_DHWSysMFRow:S04_NotApplicableMessage" DHWSys:CF1R_DHWSysMFRow:S04_NotApplicableMessage  = {
               if (LocalStatus( CF1R_DHWSysMFRow:S04a_ResidentialDHWCentralDistributionType ) < 1) then  "n/a"  else  UNDEFINED  endif  }
     ; "Set DHWSys:CF1R_DHWSysMFRow:S04b_ResidentialDHWCentralDistributionTypeOther" DHWSys:CF1R_DHWSysMFRow:S04b_ResidentialDHWCentralDistributionTypeOther  = {  
      "Set DHWSys:CF1R_DHWSysMFRow:S05_ResidentialDHWDwellingUnitDistributionType" DHWSys:CF1R_DHWSysMFRow:S05_ResidentialDHWDwellingUnitDistributionType  = { 
               switch (EnumString( SystemType ))
                  case  "Standard"                                                    : "StandardDistribution"
                  case  "Central Parallel Piping"                                     : "StandardDistributionCentralParallelPiping"
                  case  "Point of use"                                                : "PointOfUse"
                  case  "Recirculation with demand control, push button"              : "DemandRecirculationManualControl"
                  case  "Recirculation with demand control, occupancy/motion sensor"  : "DemandRecirculationSensorControls"
                  case  "Recirculation with non-demand control (continuous pumping)"  : "RecirculationNonDemand"
                  case  "(HERS req'd) Pipe Insulation, All Lines"                     : "StandardDistributionInsulatedPipesHERS"
                  case  "(HERS req'd) Central Parallel Piping"                        : "StandardDistributionCentralParallelPipingHERS"
                  case  "(HERS req'd) Recirculation with demand control, push button" : "DemandRecirculationManualControlHERS"
                  case  "(HERS req'd) Recirculation with demand control, occupancy/motion sensor" : "DemandRecirculationSensorControlsHERS"
                  default  :  UNDEFINED
               endswitch  }      ; SAC 4/27/19

    ; RJH 10/28/2019 Changed S06, S07 and S07a output for Ticket #1160   ; SAC 2/11/20 - added logic to set WHName based on system name for central HPWH (where heater not explicitly assigned) (tic #1197)
      "Set DHWSys:CF1R_DHWSysMFRow:S06_WaterHeaterName[1]" DHWSys:CF1R_DHWSysMFRow:S06_WaterHeaterName[1]  = {  
	      if (CentralDHW > 0 .AND. CentralDHWType == 2)
	      then  Name + "-heater"
	      else if (IfValidAnd(NumDHWHeaters >= 1))
		   then DHWHeater[1]
		   else UNDEFINED
		   endif endif }
      "Set DHWSys:CF1R_DHWSysMFRow:S06_WaterHeaterName[2]" DHWSys:CF1R_DHWSysMFRow:S06_WaterHeaterName[2]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 2))
		   then DHWHeater[2]
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysMFRow:S06_WaterHeaterName[3]" DHWSys:CF1R_DHWSysMFRow:S06_WaterHeaterName[3]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 3))
		   then DHWHeater[3]
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysMFRow:S06_WaterHeaterName[4]" DHWSys:CF1R_DHWSysMFRow:S06_WaterHeaterName[4]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 4))
		   then DHWHeater[4]
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysMFRow:S06_WaterHeaterName[5]" DHWSys:CF1R_DHWSysMFRow:S06_WaterHeaterName[5]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 5))
		   then DHWHeater[5]
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysMFRow:S06_WaterHeaterName[6]" DHWSys:CF1R_DHWSysMFRow:S06_WaterHeaterName[6]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 6))
		   then DHWHeater[6]
		   else UNDEFINED
		   endif }

         ; SAC 2/11/20 - added logic to set S07_WaterHeaterCount to '1' for central HPWH (where heater not explicitly assigned) (tic #1197)
      "Set DHWSys:CF1R_DHWSysMFRow:S07_WaterHeaterCount[1]" DHWSys:CF1R_DHWSysMFRow:S07_WaterHeaterCount[1]  = {  
	      if (CentralDHW > 0 .AND. CentralDHWType == 2)
	      then  1
         else if (IfValidAnd(NumDHWHeaters >= 1))
		   then HeaterMult[1]
		   else UNDEFINED
		   endif endif }
      "Set DHWSys:CF1R_DHWSysMFRow:S07_WaterHeaterCount[2]" DHWSys:CF1R_DHWSysMFRow:S07_WaterHeaterCount[2]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 2))
		   then HeaterMult[2]
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysMFRow:S07_WaterHeaterCount[3]" DHWSys:CF1R_DHWSysMFRow:S07_WaterHeaterCount[3]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 3))
		   then HeaterMult[3]
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysMFRow:S07_WaterHeaterCount[4]" DHWSys:CF1R_DHWSysMFRow:S07_WaterHeaterCount[4]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 4))
		   then HeaterMult[4]
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysMFRow:S07_WaterHeaterCount[5]" DHWSys:CF1R_DHWSysMFRow:S07_WaterHeaterCount[5]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 5))
		   then HeaterMult[5]
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysMFRow:S07_WaterHeaterCount[6]" DHWSys:CF1R_DHWSysMFRow:S07_WaterHeaterCount[6]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 6))
		   then HeaterMult[6]
		   else UNDEFINED
		   endif }

         ; SAC 2/11/20 - added S08_WaterHeatingSolarSystemName for DHWSystems w/ assigned DHWSolarSys (tic #1198)
      "Set DHWSys:CF1R_DHWSysMFRow:S08_WaterHeatingSolarSystemName" DHWSys:CF1R_DHWSysMFRow:S08_WaterHeatingSolarSystemName  =
         {  if (IfValidAnd( DHWSolarSysRef:ErrID = 0 )) then  DHWSolarSysRef:Name
            else  UNDEFINED  endif  }
      "Set DHWSys:CF1R_DHWSysMFRow:S08_NotApplicableMessage" DHWSys:CF1R_DHWSysMFRow:S08_NotApplicableMessage  =
         {  if (LocalStatus( CF1R_DHWSysMFRow:S08_WaterHeatingSolarSystemName ) < 1) then  "n/a"  else  UNDEFINED  endif  }

         ; SAC 2/11/20 - added logic to set S14_WaterHeaterNameCount for central HPWH (where heater not explicitly assigned) (tic #1197)
      "Set DHWSys:CF1R_DHWSysMFRow:S14_WaterHeaterNameCount[1]" DHWSys:CF1R_DHWSysMFRow:S14_WaterHeaterNameCount[1]  = {  
	      if (CentralDHW > 0 .AND. CentralDHWType == 2)
	      then Format( "%s (%.0f)", CF1R_DHWSysMFRow:S06_WaterHeaterName[1], CF1R_DHWSysMFRow:S07_WaterHeaterCount[1] )
         else if (IfValidAnd(NumDHWHeaters >= 1))
		   then Format( "%s (%.0f)", DHWHeater[1], HeaterMult[1] )
		   else UNDEFINED
		   endif endif }
      "Set DHWSys:CF1R_DHWSysMFRow:S14_WaterHeaterNameCount[2]" DHWSys:CF1R_DHWSysMFRow:S14_WaterHeaterNameCount[2]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 2))
		   then Format( "%s (%.0f)", DHWHeater[2], HeaterMult[2] )
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysMFRow:S14_WaterHeaterNameCount[3]" DHWSys:CF1R_DHWSysMFRow:S14_WaterHeaterNameCount[3]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 3))
		   then Format( "%s (%.0f)", DHWHeater[3], HeaterMult[3] )
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysMFRow:S14_WaterHeaterNameCount[4]" DHWSys:CF1R_DHWSysMFRow:S14_WaterHeaterNameCount[4]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 4))
		   then Format( "%s (%.0f)", DHWHeater[4], HeaterMult[4] )
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysMFRow:S14_WaterHeaterNameCount[5]" DHWSys:CF1R_DHWSysMFRow:S14_WaterHeaterNameCount[5]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 5))
		   then Format( "%s (%.0f)", DHWHeater[5], HeaterMult[5] )
		   else UNDEFINED
		   endif }
      "Set DHWSys:CF1R_DHWSysMFRow:S14_WaterHeaterNameCount[6]" DHWSys:CF1R_DHWSysMFRow:S14_WaterHeaterNameCount[6]  = {  
	       if (IfValidAnd(NumDHWHeaters >= 6))
		   then Format( "%s (%.0f)", DHWHeater[6], HeaterMult[6] )
		   else UNDEFINED
		   endif }

;      "Set DHWSys:CF1R_DHWSysMFRow:S08_WaterHeatingSolarFraction" DHWSys:CF1R_DHWSysMFRow:S08_WaterHeatingSolarFraction  = {
;               if (IfValidAnd( SolFracAnnRpt >= 0 )) then  SolFracAnnRpt  else  UNDEFINED  endif  }
;      "Set DHWSys:CF1R_DHWSysMFRow:S08_NotApplicableMessage" DHWSys:CF1R_DHWSysMFRow:S08_NotApplicableMessage  = {  
;               if (IfValidAnd( SolFracAnnRpt >= 0 )) then  UNDEFINED  else  "n/a"  endif  }

   ;   "Set DHWSys:CF1R_DHWSysMFRow:S09_CompactDistributionType" DHWSys:CF1R_DHWSysMFRow:S09_CompactDistributionType  = {  
	;						switch( EnumString( CompactDistrib ) )
	;							case "not compact"                   : "NotCompact"
	;							case "Basic Credit"                  : "BasicType"
	;							case "Expanded Credit (HERS req'd)"  : "Expanded"
	;							default : UNDEFINED
	;						endswitch  }
   ;         S09_CompactDistributionType / TypeCategory: Simple
   ;                     CompactDistributionType / Type Definition / TypeCategory: Simple / Base: EnumerationConstant ->  Whitespace: collapse Enumeration:
   ;                              BasicType
   ;                              Expanded
   ;                              NotCompact

      "Set DHWSys:CF1R_DHWSysMFRow:S10_WaterHeatingSystemHERS_VerificationName" DHWSys:CF1R_DHWSysMFRow:S10_WaterHeatingSystemHERS_VerificationName  =   ; SAC 5/23/19 - added checks for Compact, ShwrDrnWtrHtRecov & MFCtrlRecircDualLp
         {  if (LocalCompAssigned( HERSCheck ) < 1) then  UNDEFINED
            else if (IfValidAnd( HERSCheck:ParallelPipe > 0 ) .OR. IfValidAnd( HERSCheck:AllPipesIns > 0 ) .OR.
                     IfValidAnd( HERSCheck:PointOfUse > 0 ) .OR. IfValidAnd( HERSCheck:OccRecirc > 0 ) .OR.
                     IfValidAnd( HERSCheck:PushBtnRecirc > 0 ) .OR. IfValidAnd( HERSCheck:Compact > 0 ) .OR.
                     IfValidAnd( HERSCheck:ShwrDrnWtrHtRecov > 0 ) .OR. IfValidAnd( HERSCheck:MFCtrlRecircDualLp > 0 ))
            then  HERSCheck:Name
            else  UNDEFINED  endif endif  }
      "Set DHWSys:CF1R_DHWSysMFRow:S10_NotApplicableMessage" DHWSys:CF1R_DHWSysMFRow:S10_NotApplicableMessage  = {
               if (LocalStatus( CF1R_DHWSysMFRow:S10_WaterHeatingSystemHERS_VerificationName ) < 1) then  "n/a"  else  UNDEFINED  endif  }

      "Set DHWSys:CF1R_DHWSysMFRow:S11_StatusEAA" DHWSys:CF1R_DHWSysMFRow:S11_StatusEAA  =            ; SAC 7/30/19 - added logic to report S11_StatusEAA for AdditionAlone projects (tic #1118)
         {  if (ResProj:RunScope = 1 .AND. IfValidAnd( ResProj:IsAddAlone != 0 )==0)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  "New"  
            else if (IsExisting)
            then  "Existing"
            else if (IsAltered)
            then  "Altered"
            else  UNDEFINED   ; error?
            endif endif endif endif  }
      "Set DHWSys:CF1R_DHWSysMFRow:S12_VerifiedExistingCondition"
         DHWSys:CF1R_DHWSysMFRow:S12_VerifiedExistingCondition  = {
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  "n/a"
            else if (IsAltered .AND. IsVerified)
            then  "Yes"
            else  "No"
            endif endif endif  }

; TO DO
   ;         S13_WaterHeatingSystemName / TypeCategory: Simple
   ;                     WaterHeatingSystemName / Type Definition / TypeCategory: Simple / Base: token ->  Whitespace: collapse

  ; Rule to add Multi Family WaterHeating table rows to the cf1rTableWaterHeatingMF
      "Set DHWSys:CF1R_DHWSysMFRow:Parent"
         DHWSys:CF1R_DHWSysMFRow:Parent  = {  cf1rTableWaterHeatingMF:Name  }
END
;*************************************************************************


;*************************************************************************
RULELIST "CF1RPRF01E_cf1rSection_Z"  1 0 0 1

   "Create & initialize new cf1rTableCoolingHERS object"
      cf1rSection_Z:Action   = {  CreateChildren( cf1rTableCoolingHERS, 1, "CoolHERStable" )  }
  ; ----------------------------------------------------------------------
  ; Section_Z rules to create individual ClgHERStable table rows for instances of HERSCheck:HERSCool in HVACCool and HVACHtPump instances
   "Create cf1rTableCoolingHERS for all HERSCool instances assigned to HVACCool objects"
      HVACCool:HERSCheck:CF1R_ClgHERSRow   =                                     ; SAC 8/6/19 - added check to include ClgHERS row only for new or altered equipment (tic #1118)
         {  if (IfValidAnd( IsNew > 0 ) .OR. IfValidAnd( IsAltered > 0 ))
            then  CreateComp( cf1rtblRowClgHERS, Name + "-row" )
            else  UNCHANGED  endif  }
   "Create cf1rTableCoolingHERS for all HERSCool instances assigned to HVACHtPump objects"
      HVACHtPump:HERSCheck:CF1R_ClgHERSRow   =                                   ; SAC 8/6/19 - added check to include ClgHERS row only for new or altered equipment (tic #1118)
         {  if (IfValidAnd( IsNew > 0 ) .OR. IfValidAnd( IsAltered > 0 ))
            then  CreateComp( cf1rtblRowClgHERS, Name + "-row" )
            else  UNCHANGED  endif  }

  ; Rules to populate New ClgHERStable table rows
      "Set HERSCool:CF1R_ClgHERSRow:Z01_CoolingSystemHERS_VerificationName" HERSCool:CF1R_ClgHERSRow:Z01_CoolingSystemHERS_VerificationName  = {  Name  }
      "Set HERSCool:CF1R_ClgHERSRow:Z02_IsAirflowVerificationRequired" HERSCool:CF1R_ClgHERSRow:Z02_IsAirflowVerificationRequired  = {  if (AHUAirFlow) then "true" else "false" endif  }
      "Set HERSCool:CF1R_ClgHERSRow:Z03_AirflowRequiredMinimumTarget" HERSCool:CF1R_ClgHERSRow:Z03_AirflowRequiredMinimumTarget  = { atof( AirFlowRptMsg ) }
      "Set HERSCool:CF1R_ClgHERSRow:Z04_EER_VerificationRequired" HERSCool:CF1R_ClgHERSRow:Z04_EER_VerificationRequired  = {  if (EER) then "true" else "false" endif  }
      "Set HERSCool:CF1R_ClgHERSRow:Z05_SEER_VerificationRequired" HERSCool:CF1R_ClgHERSRow:Z05_SEER_VerificationRequired  = {  if (SEER) then "true" else "false" endif  }
      "Set HERSCool:CF1R_ClgHERSRow:Z06_RefrigerantChargeVerificationRequired" HERSCool:CF1R_ClgHERSRow:Z06_RefrigerantChargeVerificationRequired  = {  if (ACCharg) then "true" else "false" endif  }

  ; Rule to add ClgHERSRow table rows to the cf1rTableCoolingHERS
      "Set HERSCool:CF1R_ClgHERSRow:Parent"   HERSCool:CF1R_ClgHERSRow:Parent  = {  cf1rTableCoolingHERS:Name  }
END
;*************************************************************************

;*************************************************************************
RULELIST "CF1RPRF01E_cf1rSection_Yhers"  1 0 0 1

   "Create & initialize new cf1rTableHeatPumpHERS object"
      cf1rSection_Yhers:Action   = {  CreateChildren( cf1rTableHeatPumpHERS, 1, "HtPumpHERStable" )  }
  ; ----------------------------------------------------------------------
  ; Section_Yhers rules to create individual ClgHERStable table rows for instances of HVACHtPump:HERSHtPumpRef
   "Create cf1rtblRowHERSHP for all HERSHtPump instances assigned to HVACHtPump objects"
      HVACHtPump:HERSHtPumpRef:CF1R_HERSHPRow   =                                ; SAC 8/6/19 - added check to include ClgHERS row only for new or altered equipment (tic #1118)
         {  if (IfValidAnd( IsNew > 0 ) .OR. IfValidAnd( IsAltered > 0 ))
            then  CreateComp( cf1rtblRowHERSHP, Name + "-row" )
            else  UNCHANGED  endif  }

  ; Rules to populate New cf1rTableHeatPumpHERS table rows
      "Set HERSHtPump:CF1R_HERSHPRow:Yhers01_HeatPumpSystemHERS_VerificationName" HERSHtPump:CF1R_HERSHPRow:Yhers01_HeatPumpSystemHERS_VerificationName  = {  Name  }
      "Set HERSHtPump:CF1R_HERSHPRow:Yhers02_IsAirflowVerificationRequired" HERSHtPump:CF1R_HERSHPRow:Yhers02_IsAirflowVerificationRequired  = {  if (AHUAirFlow) then "true" else "false" endif  }
      "Set HERSHtPump:CF1R_HERSHPRow:Yhers03_AirflowRequiredMinimumTarget" HERSHtPump:CF1R_HERSHPRow:Yhers03_AirflowRequiredMinimumTarget  = { atof( AirFlowRptMsg ) }
      "Set HERSHtPump:CF1R_HERSHPRow:Yhers04_EER_VerificationRequired" HERSHtPump:CF1R_HERSHPRow:Yhers04_EER_VerificationRequired  = {  if (EER) then "true" else "false" endif  }
      "Set HERSHtPump:CF1R_HERSHPRow:Yhers05_SEER_VerificationRequired" HERSHtPump:CF1R_HERSHPRow:Yhers05_SEER_VerificationRequired  = {  if (SEER) then "true" else "false" endif  }
      "Set HERSHtPump:CF1R_HERSHPRow:Yhers06_RefrigerantChargeVerificationRequired" HERSHtPump:CF1R_HERSHPRow:Yhers06_RefrigerantChargeVerificationRequired  = {  if (ACCharg) then "true" else "false" endif  }

      "Set HERSHtPump:CF1R_HERSHPRow:Yhers07_VerificationRequiredHSPF" HERSHtPump:CF1R_HERSHPRow:Yhers07_VerificationRequiredHSPF  = {  if (HSPF) then "true" else "false" endif  }
      "Set HERSHtPump:CF1R_HERSHPRow:Yhers08_VerificationRequiredCapacity47F" HERSHtPump:CF1R_HERSHPRow:Yhers08_VerificationRequiredCapacity47F  = {  if (Capacity) then "true" else "false" endif  }
      "Set HERSHtPump:CF1R_HERSHPRow:Yhers09_VerificationRequiredCapacity17F" HERSHtPump:CF1R_HERSHPRow:Yhers09_VerificationRequiredCapacity17F  = {  if (Capacity17) then "true" else "false" endif  }  ; SAC 09/04/20 (tic #1003)

  ; Rule to add CF1R_HERSHPRow table rows to the cf1rTableHeatPumpHERS
      "Set HERSHtPump:CF1R_HERSHPRow:Parent"   HERSHtPump:CF1R_HERSHPRow:Parent  = {  cf1rTableHeatPumpHERS:Name  }
END
;*************************************************************************


; RJH 10/1/22 Renamed from Section_Aa to handle NRCC/LMCC Section_Distmf
;*************************************************************************
;RULELIST "CF1RPRF01E_cf1rSection_Aa_Proposed"  1 0 0 1
RULELIST "CF1RPRF01E_cf1rSection_Distmf_Proposed"  1 0 0 1

   "Create & initialize new cf1rTableDistributionMF object"
      cf1rSection_Distmf:Action   = {  CreateChildren( cf1rTableDistributionMF, 1, "DistributionMF" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Section_Distmf rules to create individual DistributionMF table rows
         ; SAC 8/6/19 - prevent writing rows for AlteredVerified Existing equipment (that is documented below) (tic #1118)
   "Create cf1rtblRowDistMF for all HVACDist instances"                         ; fixed logic implemented above (8/6/19 - tic #1118) that was preventing NonAlt-NonVerif-Existing duct systems from being reported here - SAC 04/12/21
      HVACDist:CF1R_DistRow   = {   if (IfValidAnd( FloorAreaServed > 0 )==0) then  UNCHANGED
                                    else if (IsAltered .AND. IsVerified .AND. IsExisting .AND.
                                             IfValidAnd( exFloorAreaServed > FloorAreaServed )) then  UNCHANGED
                                    else  CreateComp( cf1rtblRowDistMF, Name + "DistributionMFRow" )  endif endif  }

  ; Rules to populate New DistributionMF table rows for ALL HVACDist instances
      "Set HVACDist:CF1R_DistRow:Distmf01_SpaceConditioningDistributionSystemName" HVACDist:CF1R_DistRow:Distmf01_SpaceConditioningDistributionSystemName  = {  Name  }
      "Set HVACDist:CF1R_DistRow:Distmf02_DuctLocation" HVACDist:CF1R_DistRow:Distmf02_DuctLocation  = {  
																				switch(TypeAbbrevStr)  
																					case "DuctsAttic"    : "UnconditionedAttic"
																					case "DuctsCrawl"    : "UnconditionedCrawlSpace" 
																					case "DuctsGarage"   : "UnconditionedGarage"
																					case "DuctsInEx12"   : "ConditionedSpaceExcept12ft"
																					case "DuctsInAll"    : "ConditionedSpace" 
																					case "DuctsNone"     : "Ductless" 
																					case "DuctsOutdoor"  : "Outdoors"
																					case "LowLlCod"      : "ConditionedSpaceDuctsVLL"
																					case "DuctsMult"     : "DuctsInMultipleLocations"
																					default : UNDEFINED
																				endswitch  }
      "Set HVACDist:CF1R_DistRow:Distmf02_DuctDesignType" HVACDist:CF1R_DistRow:Distmf02_DuctDesignType  =    ; SAC 5/23/19 - switched logic from IsVerified -> DuctDesign
         {  if (IfValidAnd( DuctDesign > 0 )) then "true" else "false" endif  }

;      "Set HVACDist:CF1R_DistRow:Distmf02_SpaceConditioningDistributionSystemType" HVACDist:CF1R_DistRow:Distmf02_SpaceConditioningDistributionSystemType  = {
;																				switch(Type)  ;
;																					case "Ducts located in attic (Ventilated and Unventilated)"                 : "UnconditionedAttic"
;																					case "Ducts located in a crawl space"                                       : "UnconditionedCrawlS;pace" 
;																					case "Ducts located in a garage"                                            : "UnconditionedGarage"
;																					case "Ducts located within the conditioned space (except < 12 lineal ft)"   : "ConditionedSpaceExcept12ft"
;																					case "Ducts located entirely in conditioned space"                          : "ConditionedSpace" 
;																					case "Distribution systems without ducts"                                   : "Ductless" 
;																					case "Ducts located in outdoor locations"                                   : "Outdoors"
;																					case "Verified low-leakage ducts entirely in conditioned space"             : "ConditionedSpaceDuctsVLL"
;																					case "Ducts located in multiple places"                                     : "DuctsInMultipleLocations"
;																					default : UNDEFINED
;																				endswitch  }

      ; SAC 4/24/19 - modified to set enums rather than numeric      ; SAC 2/12/20 - added logic to handle reporting of Existing+New where DuctInsRvalue is already converted to weighted avg of New & Existing R-value (tic #1200)
      "Set HVACDist:CF1R_DistRow:Distmf03Supply_DuctRValue" HVACDist:CF1R_DistRow:Distmf03Supply_DuctRValue  =    ; {  atof( Format( "%.2f", DuctInsRvalue ) )  }
         {  if (IfValidAnd( DuctsPresent > 0 ) .AND. IfValidAnd( DuctDesign > 0 )) then  "RvalueVerifiedDuctSystem"
            else if (IfValidAnd( DuctInsRvalue >= 0 )==0) then  UNDEFINED
            else  switch (DuctInsRvalue)
                     case   0 :  "R0.0"
                     case 2.1 :  "R2.1"
                     case 4.2 :  "R4.2"
                     case   6 :  "R6"
                     case   8 :  "R8"
                     case  10 :  "R10"
                     case  12 :  "R12"
                     default  :  if ((ResProj:RunScope == 2 .OR. ResProj:IsAddAlone > 0.5) .AND. Status == 4 .AND. LocalStatus( exDuctInsRvalue ) > 0 .AND. FloorAreaServed > 0 )
                                 then  switch (DuctInsRvalOpt)
                                          case    0 :  "R0.0"
                                          case  210 :  "R2.1"
                                          case  420 :  "R4.2"
                                          case  600 :  "R6"
                                          case  800 :  "R8"
	     	                                 case 1000 :  "R10"
	     	                                 case 1200 :  "R12"
	     	                                 default   :  UNDEFINED
                                       endswitch
                                 else  UNDEFINED  endif
                  endswitch  endif endif  }
      ; RJH 1/16/2020 - added NotApplicableMessage per ticket #1184
      "Set HVACDist:CF1R_DistRow:Distmf03Supply_NotApplicableMessage" HVACDist:CF1R_DistRow:Distmf03Supply_NotApplicableMessage  =
         {  if ( LocalStatus ( CF1R_DistRow:Distmf03Supply_DuctRValue ) < 1 ) then "n/a" else UNDEFINED endif  }
      "Set HVACDist:CF1R_DistRow:Distmf03bSupply_DuctRValueNum" HVACDist:CF1R_DistRow:Distmf03bSupply_DuctRValueNum  =    ; SAC 5/23/19 - added numeric version of supply duct R-value to handle DuctDesign runs
         {  if (IfValidAnd( DuctsPresent > 0 ) .AND. IfValidAnd( DuctDesign > 0 )) then  atof( Format( "%.2f", DuctInsRvalue ) )
            else if (IfValidAnd( DuctInsRvalue >= 0 )==0) then  UNDEFINED
            else  atof( Format( "%.2f", DuctInsRvalue ) )  endif endif  }
      ; RJH 1/16/2020 - added NotApplicableMessage per ticket #1184
      "Set HVACDist:CF1R_DistRow:Distmf03bSupply_NotApplicableMessage" HVACDist:CF1R_DistRow:Distmf03bSupply_NotApplicableMessage  =
         {  if ( LocalStatus ( CF1R_DistRow:Distmf03bSupply_DuctRValueNum ) < 1 ) then "n/a" else UNDEFINED endif  }

      "Set HVACDist:CF1R_DistRow:Distmf04Return_DuctRValue" HVACDist:CF1R_DistRow:Distmf04Return_DuctRValue  =    ; {  atof( Format( "%.2f", RetDuctInsRvalue ) )  }     ; SAC 4/18/19 - DuctInsRvalue -> RetDuctInsRvalue
         {  if (IfValidAnd( DuctsPresent > 0 ) .AND. IfValidAnd( DuctDesign > 0 )) then  "RvalueVerifiedDuctSystem"
            else if (IfValidAnd( RetDuctInsRvalue >= 0 )==0) then  UNDEFINED
            else  switch (RetDuctInsRvalue)
                     case   0 :  "R0.0"
                     case 2.1 :  "R2.1"
                     case 4.2 :  "R4.2"
                     case   6 :  "R6"
                     case   8 :  "R8"
                     case  10 :  "R10"
                     case  12 :  "R12"
                     default  :  UNDEFINED
                  endswitch  endif endif  }

      ; RJH 1/16/2020 - added NotApplicableMessage per ticket #1184
      "Set HVACDist:CF1R_DistRow:Distmf04Return_NotApplicableMessage" HVACDist:CF1R_DistRow:Distmf04Return_NotApplicableMessage  =
         {  if ( LocalStatus ( CF1R_DistRow:Distmf04Return_DuctRValue ) < 1 ) then "n/a" else UNDEFINED endif  }
      "Set HVACDist:CF1R_DistRow:Distmf04bReturn_DuctRValueNum" HVACDist:CF1R_DistRow:Distmf04bReturn_DuctRValueNum  =    ; SAC 5/23/19 - added numeric version of supply duct R-value to handle DuctDesign runs
         {  if (IfValidAnd( DuctsPresent > 0 ) .AND. IfValidAnd( DuctDesign > 0 )) then  atof( Format( "%.2f", RetDuctInsRvalue ) )
            else if (IfValidAnd( RetDuctInsRvalue >= 0 )==0) then  UNDEFINED
            else  atof( Format( "%.2f", RetDuctInsRvalue ) )  endif endif  }
      ; RJH 1/16/2020 - added NotApplicableMessage per ticket #1184
      "Set HVACDist:CF1R_DistRow:Distmf04bReturn_NotApplicableMessage" HVACDist:CF1R_DistRow:Distmf04bReturn_NotApplicableMessage  =
         {  if ( LocalStatus ( CF1R_DistRow:Distmf04bReturn_DuctRValueNum ) < 1 ) then "n/a" else UNDEFINED endif  }

      "Set HVACDist:CF1R_DistRow:Distmf05Supply_DuctSpaceType" HVACDist:CF1R_DistRow:Distmf05Supply_DuctSpaceType  = { 
																											switch(EnumString( SupplyRptLocation ))  
																												case "Attic"    : "Attic"
																												case "Garage"    : "Garage" 
																												case "Conditioned Zone"   : "ConditionedZone"
																												case "Unconditioned Zone"   : "UnconditionedZone"
																												case "Crawl Space"    : "CrawlSpace" 
																												case "Outside"     : "Outside" 
																												case "Multiple"  : "Multiple"
																												default : UNDEFINED
																											endswitch  }
      "Set HVACDist:CF1R_DistRow:Distmf06Return_DuctSpaceType" HVACDist:CF1R_DistRow:Distmf06Return_DuctSpaceType  = { 
																											switch(EnumString( ReturnRptLocation ))  
																												case "Attic"    : "Attic"
																												case "Garage"    : "Garage" 
																												case "Conditioned Zone"   : "ConditionedZone"
																												case "Unconditioned Zone"   : "UnconditionedZone"
																												case "Crawl Space"    : "CrawlSpace" 
																												case "Outside"     : "Outside" 
																												case "Multiple"  : "Multiple"
																												default : UNDEFINED
																											endswitch  }

      ; SAC 4/30/20 - switched references HVACDist:SupDuctSurfaceArea and RetDuctSurfaceArea to SupplyDuctArea and ReturnDuctArea
      "Set HVACDist:CF1R_DistRow:Distmf07Supply_DuctSurfaceArea" HVACDist:CF1R_DistRow:Distmf07Supply_DuctSurfaceArea  =        ; SAC 8/2/19 - added logic to leave undefined (& set new N/A proeprty) if not a DuctDesign scenario (tic #1118)
         {  if (IfValidAnd( DuctsPresent > 0 ) .AND. IfValidAnd( DuctDesign > 0 )) then  atof( Format( "%.2f", ValidOr( SupplyDuctArea, 0 ) ) )
            else  UNDEFINED  endif  }
      "Set HVACDist:CF1R_DistRow:Distmf07Supply_NotApplicableMessage" HVACDist:CF1R_DistRow:Distmf07Supply_NotApplicableMessage  =
         {  if ( LocalStatus ( CF1R_DistRow:Distmf07Supply_DuctSurfaceArea ) < 1 ) then "n/a" else UNDEFINED endif  }

      "Set HVACDist:CF1R_DistRow:Distmf08Return_DuctSurfaceArea" HVACDist:CF1R_DistRow:Distmf08Return_DuctSurfaceArea  =        ; SAC 8/2/19 - added logic to leave undefined (& set new N/A proeprty) if not a DuctDesign scenario (tic #1118)
         {  if (IfValidAnd( DuctsPresent > 0 ) .AND. IfValidAnd( DuctDesign > 0 )) then  atof( Format( "%.2f", ValidOr( ReturnDuctArea, 0 ) ) )
            else  UNDEFINED  endif  }
      "Set HVACDist:CF1R_DistRow:Distmf08Return_NotApplicableMessage" HVACDist:CF1R_DistRow:Distmf08Return_NotApplicableMessage  =
         {  if ( LocalStatus ( CF1R_DistRow:Distmf08Return_DuctSurfaceArea ) < 1 ) then "n/a" else UNDEFINED endif  }


  ; Rules to populate LMCC Not Reported HERSDist properties
      "Set HVACDist:CF1R_DistRow:Distmf09_DuctLeakageTestRequired" HVACDist:CF1R_DistRow:Distmf09_DuctLeakageTestRequired  = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ))
            then if (IfValidAnd( HERSCheck:DuctLeakage > 0 ))
                 then  "true"
                 else  "false"  
                 endif 
            else UNDEFINED
            endif  }
      "Set HVACDist:CF1R_DistRow:Distmf10_DuctSystemLeakageTarget" HVACDist:CF1R_DistRow:Distmf10_DuctSystemLeakageTarget  = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ))
            then if (IfValidAnd( DuctLeakageValRpt > 0 ))
                 then  atof( Format( "%.2f", DuctLeakageValRpt ) )
                 else  UNDEFINED  
                 endif 
            else UNDEFINED
            endif  }
      "Set HVACDist:CF1R_DistRow:Distmf10_NotApplicableMessage" HVACDist:CF1R_DistRow:Distmf10_NotApplicableMessage  =
         {  if (IfValidAnd(Proj:IsLowRiseMFam > 0 )) 
            then if (LocalStatus ( CF1R_DistRow:Distmf10_DuctSystemLeakageTarget ) < 1 ) 
                 then "n/a" 
                 else UNDEFINED 
                 endif
            else UNDEFINED
            endif  }
      "Set HVACDist:CF1R_DistRow:Distmf11_DuctSystemLeakageTargetMessage" HVACDist:CF1R_DistRow:Distmf11_DuctSystemLeakageTargetMessage  = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ))
            then if (LocalStatus( HERSCheck:DuctLkgRptMsg ) > 0)
                 then  HERSCheck:DuctLkgRptMsg
                 else if (IfValidAnd( DuctLeakageValRpt > 0 ))
                 then  FltToStr( DuctLeakageValRpt, 2 )
                 else  UNDEFINED  endif endif 
            else UNDEFINED
            endif  }
      "Set HVACDist:CF1R_DistRow:Distmf11_NotApplicableMessage" HVACDist:CF1R_DistRow:Distmf11_NotApplicableMessage  =
         {  if (IfValidAnd(Proj:IsLowRiseMFam > 0 )) 
            then if (LocalStatus ( CF1R_DistRow:Distmf11_DuctSystemLeakageTargetMessage ) < 1 ) 
                 then "n/a" 
                 else UNDEFINED 
                 endif
            else UNDEFINED
            endif  }
      "Set HVACDist:CF1R_DistRow:Distmf12_IsDuctLocationVerificationRequired" HVACDist:CF1R_DistRow:Distmf12_IsDuctLocationVerificationRequired  = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ))
            then if (IfValidAnd( HERSCheck:DuctLocation > 0 ))
                 then  "true"
                 else  "false"  
                 endif 
            else UNDEFINED
            endif  }
      "Set HVACDist:CF1R_DistRow:Distmf13_DuctsInCondExcept12CreditTaken" HVACDist:CF1R_DistRow:Distmf13_DuctsInCondExcept12CreditTaken  = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ))
            then if (EnumString( HERSCheck:DuctLocRptMsg ) == "Ducts located within the conditioned space (except < 12 lineal ft)")
                 then  "true"
                 else  "false"  
                 endif 
            else UNDEFINED
            endif  }
      "Set HVACDist:CF1R_DistRow:Distmf14_DuctDesignVerificationRequired" HVACDist:CF1R_DistRow:Distmf14_DuctDesignVerificationRequired  = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ))
            then if (IfValidAnd( HERSCheck:RetDuctDesign > 0 ) .OR. IfValidAnd( HERSCheck:SupDuctDesign > 0 ))
                 then  "true"
                 else  "false"  
                 endif 
            else UNDEFINED
            endif  }
      "Set HVACDist:CF1R_DistRow:Distmf15_DuctsBuriedVerificationRequired" HVACDist:CF1R_DistRow:Distmf15_DuctsBuriedVerificationRequired  = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ))
            then if (IfValidAnd( HERSCheck:BuriedDucts > 0 ))
                 then  "true"
                 else  "false"  
                 endif 
            else UNDEFINED
            endif  }
      "Set HVACDist:CF1R_DistRow:Distmf16_DuctsDeeplyBuriedComplianceCreditTaken" HVACDist:CF1R_DistRow:Distmf16_DuctsDeeplyBuriedComplianceCreditTaken  = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ))
            then if (IfValidAnd( HERSCheck:DeeplyBuriedDucts > 0 ))
                 then  "true"
                 else  "false"  
                 endif 
            else UNDEFINED
            endif  }
         ; SAC 7/1/19 - revised following rule to flag Bb08_LowLeakageAirHandlingUnitVerificationRequired true iff user specifies "Low Leakage Air Handler" (tic #1127)
      "Set HVACDist:CF1R_DistRow:Distmf17_LowLeakageAirHandlingUnitVerificationRequired" HVACDist:CF1R_DistRow:Distmf17_LowLeakageAirHandlingUnitVerificationRequired  = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ))
            then if (IfValidAnd( HERSCheck:cf1rLowLeakageAH > 0 ))
                 then  "true"
                 else  "false"  
                 endif 
            else UNDEFINED
            endif  }
         ; SAC 4/30/19 - fixed bug in following rule, replacing left side HERSDist:... w/ HVACDist:HERSCheck:... to have access to HVACDist properties
      "Set HVACDist:CF1R_DistRow:Distmf18_LowLeakDuctsConditionedVerificationRequired" HVACDist:CF1R_DistRow:Distmf18_LowLeakDuctsConditionedVerificationRequired  = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ))
            then if (EnumString( Type ) == "Verified low-leakage ducts entirely in conditioned space")
                 then  "true"
                 else  "false"  
                 endif 
            else UNDEFINED
            endif  }
      "Set HVACDist:CF1R_DistRow:Distmf19_DuctsInCondSpc" HVACDist:CF1R_DistRow:Distmf19_DuctsInCondSpc  = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ))
            then if (EnumString( HERSCheck:DuctLocRptMsg ) == "Ducts located entirely in conditioned space confirmed by duct leakage testing")
                 then  "true"
                 else  "false"  
                 endif 
            else UNDEFINED
            endif  }
      "Set HVACDist:CF1R_DistRow:Distmf20_HasBypassDuct" HVACDist:CF1R_DistRow:Distmf20_HasBypassDuct  = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ))
            then if (IfValidAnd(DuctsPresent > 0) .AND. IfValidAnd(HasBypassDuct > 0))
                 then  "true"
                 else  "false"  
                 endif 
            else UNDEFINED
            endif  }
      "Set HVACDist:CF1R_DistRow:Distmf20_NotApplicableMessage" HVACDist:CF1R_DistRow:Distmf20_NotApplicableMessage = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ))
            then if (LocalStatus( CF1R_DistRow:Distmf20_HasBypassDuct ) < 1) then  "n/a"  else  UNDEFINED  endif
            else UNDEFINED
            endif }


  ; Rule to add DistributionMF table rows to the cf1rTableDistributionMF
      "Set HVACDist:CF1R_DistRow:Parent"
         HVACDist:CF1R_DistRow:Parent  = {  cf1rTableDistributionMF:Name  }
END
;*************************************************************************

;*************************************************************************
RULELIST "CF1RPRF01E_cf1rSection_Bb"  1 0 0 1

   "Create & initialize new cf1rTableDistributionHERS object"
      cf1rSection_Bb:Action   = {  CreateChildren( cf1rTableDistributionHERS, 1, "DistHERStable" )  }
  ; ----------------------------------------------------------------------
  ; Section_Bb rules to create individual DistHERStable table rows
   "Create cf1rtblRowDistHERS for all HERSDist instances (that require reporting)"
      HERSDist:CF1R_DistHERSRow   = {  if (IfValidAnd( Report > 0 )==0) then  UNCHANGED
                                       else  CreateComp( cf1rtblRowDistHERS, Name + "-row" )  endif  }
      "Set HERSDist:CF1R_DistHERSRow:Parent"    HERSDist:CF1R_DistHERSRow:Parent  = {  cf1rTableDistributionHERS:Name  }

  ; Rules to populate HERSDist table rows for each relevant HERSDist object
      "Set HERSDist:CF1R_DistHERSRow:Bb01_DistributionHERS_VerificationName" HERSDist:CF1R_DistHERSRow:Bb01_DistributionHERS_VerificationName  = {  Name  }
      "Set HERSDist:CF1R_DistHERSRow:Bb02_DuctLeakageTestRequired" HERSDist:CF1R_DistHERSRow:Bb02_DuctLeakageTestRequired  = {
            if (IfValidAnd( DuctLeakage > 0 ))
            then  "true"
            else  "false"  endif  }

      "Set HERSDist:CF1R_DistHERSRow:Bb03_DuctSystemLeakageTarget" HVACDist:HERSCheck:CF1R_DistHERSRow:Bb03_DuctSystemLeakageTarget  = {
            if (IfValidAnd( DuctLeakageValRpt > 0 ))
            then  atof( Format( "%.2f", DuctLeakageValRpt ) )
            else  UNDEFINED  endif  }
      "Set HERSDist:CF1R_DistHERSRow:Bb03b_DuctSystemLeakageTargetMessage" HVACDist:HERSCheck:CF1R_DistHERSRow:Bb03b_DuctSystemLeakageTargetMessage  = {
            if (LocalStatus( HERSCheck:DuctLkgRptMsg ) > 0)
            then  HERSCheck:DuctLkgRptMsg
            else if (IfValidAnd( DuctLeakageValRpt > 0 ))
            then  FltToStr( DuctLeakageValRpt, 2 )
            else  UNDEFINED  endif endif  }
; ABOVE likely needs work - far more detail contained in what actually gets reported to CF1R - as shown below
	;"Write Duct Leakage Msg" 						HVACDist:HERSCheck:DuctLkgRptMsg = { if ( HERSCheck:DuctLeakage > 0.5 ) then 
	;																										   if (Type == 12)
	;																										   then  "See RA3.1.4.3.8"
	;																											else if ( DefaultSystem > 0.5 .OR. LowLkgAH < 0.5 ) then 
	;																												if ( ResProj:IsMultiFamily > 0.5 .AND. ResProj:IsMFamDupOrTownhm < 0.5 )
	;																												then	Format( "total leakage <= 12.0 or leakage to outdoors <= %s", FltToStr( DuctLeakageValRpt, 1, 0, 3 ) )
	;																												else	Format( "%s", FltToStr( DuctLeakageValRpt, 1, 0, 3 ) )  endif
	;																											else if ( LowLkgAH > 0.5 .AND. DuctLeakage > 100 ) then 
	;																												if ( ResProj:IsMultiFamily > 0.5 .AND. ResProj:IsMFamDupOrTownhm < 0.5 )
	;																												then	Format( "total leakage <= 12.0 or leakage to outdoors <= %s", FltToStr( DuctLeakageValRpt, 1, 0, 3 ) )
	;																												else	Format( "%s", FltToStr( DuctLeakageValRpt, 1, 0, 3 ) )  endif	
	;																											else FltToStr( DuctLeakageValRpt, 1, 0, 3 ) endif endif endif												
	;																										 else UNDEFINED endif }

      "Set HERSDist:CF1R_DistHERSRow:Bb04_IsDuctLocationVerificationRequired" HERSDist:CF1R_DistHERSRow:Bb04_IsDuctLocationVerificationRequired  = {
            if (IfValidAnd( DuctLocation > 0 ))
            then  "true"
            else  "false"  endif  }
      "Set HERSDist:CF1R_DistHERSRow:Bb04a_DuctsInCondExcept12CreditTaken" HVACDist:HERSCheck:CF1R_DistHERSRow:Bb04a_DuctsInCondExcept12CreditTaken  = {
            if (EnumString( DuctLocRptMsg ) == "Ducts located within the conditioned space (except < 12 lineal ft)")
            then  "true"
            else  "false"  endif  }
      "Set HERSDist:CF1R_DistHERSRow:Bb05_DuctDesignVerificationRequired" HERSDist:CF1R_DistHERSRow:Bb05_DuctDesignVerificationRequired  = {
            if (IfValidAnd( RetDuctDesign > 0 ) .OR. IfValidAnd( SupDuctDesign > 0 ))
            then  "true"
            else  "false"  endif  }
      "Set HERSDist:CF1R_DistHERSRow:Bb06_DuctsBuriedVerificationRequired" HERSDist:CF1R_DistHERSRow:Bb06_DuctsBuriedVerificationRequired  = {
            if (IfValidAnd( BuriedDucts > 0 ))
            then  "true"
            else  "false"  endif  }
      "Set HERSDist:CF1R_DistHERSRow:Bb07_DuctsDeeplyBuriedComplianceCreditTaken" HERSDist:CF1R_DistHERSRow:Bb07_DuctsDeeplyBuriedComplianceCreditTaken  = {
            if (IfValidAnd( DeeplyBuriedDucts > 0 ))
            then  "true"
            else  "false"  endif  }
         ; SAC 7/1/19 - revised following rule to flag Bb08_LowLeakageAirHandlingUnitVerificationRequired true iff user specifies "Low Leakage Air Handler" (tic #1127)
      "Set HERSDist:CF1R_DistHERSRow:Bb08_LowLeakageAirHandlingUnitVerificationRequired" HERSDist:CF1R_DistHERSRow:Bb08_LowLeakageAirHandlingUnitVerificationRequired  = {
            if (IfValidAnd( cf1rLowLeakageAH > 0 ))
            then  "true"
            else  "false"  endif  }
         ; SAC 4/30/19 - fixed bug in following rule, replacing left side HERSDist:... w/ HVACDist:HERSCheck:... to have access to HVACDist properties
      "Set HERSDist:CF1R_DistHERSRow:Bb09_LowLeakDuctsConditionedVerificationRequired" HVACDist:HERSCheck:CF1R_DistHERSRow:Bb09_LowLeakDuctsConditionedVerificationRequired  = {
            if (EnumString( Type ) == "Verified low-leakage ducts entirely in conditioned space")
            then  "true"
            else  "false"  endif  }
END
;*************************************************************************

;*************************************************************************
RULELIST "CF1RPRF01E_cf1rSection_Dd"  1 0 0 1

   "Create & initialize new cf1rTableFanSystemsHERS object"
      cf1rSection_Dd:Action   = {  CreateChildren( cf1rTableFanSystemsHERS, 1, "FanHERStable" )  }
  ; ----------------------------------------------------------------------
  ; Section_Dd rules to create individual FanSystemHERStable table rows for instances of HERSFan
   "Create cf1rtblRowFanSysHERS for all HERSFan instances assigned to HVACFan objects"
      HVACFan:HERSCheck:CF1R_FanHERSRow   = {  CreateComp( cf1rtblRowFanSysHERS, Name + "-row" )  }

  ; Rules to populate New FanSystemHERStable table rows
      "Set HERSFan:CF1R_FanHERSRow:Dd01_FanSystemHERS_VerificationName" HERSFan:CF1R_FanHERSRow:Dd01_FanSystemHERS_VerificationName  = {  Name  }
      "Set HERSFan:CF1R_FanHERSRow:Dd02_FanVerifiedWattDrawRequired" HERSFan:CF1R_FanHERSRow:Dd02_FanVerifiedWattDrawRequired  = {  if (AHUFanEff) then "true" else "false" endif  }
      "Set HERSFan:CF1R_FanHERSRow:Dd03_FanEfficacyRequired" HERSFan:CF1R_FanHERSRow:Dd03_FanEfficacyRequired  = { atof( FanEffRptMsg )  }

  ; Rule to add FanHERSRow table rows to the cf1rTableFanSystemsHERS
      "Set HERSFan:CF1R_FanHERSRow:Parent"   HERSFan:CF1R_FanHERSRow:Parent  = {  cf1rTableFanSystemsHERS:Name  }
END
;*************************************************************************


;*************************************************************************  SAC 4/13/19 RJH 10/4/22 modified to handle NRCC/LMCC 2022 Section_WaterCompact
RULELIST "Setup_DwellUnitType_CF1R_CompactMFRow_1"  1 0 0 1
   "Set DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact01_ResidentialDwellingUnitDescriptor       "   DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact01_ResidentialDwellingUnitDescriptor          = {  Name  }
   "Set DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact02_DwellingUnitType       "   DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact02_DwellingUnitType          = {  Name  }
   "Set DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact03_WaterHeatingSystemName                  "   DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact03_WaterHeatingSystemName                     = {  Format( "1 - %s", DHWSysRef[1]:Name )  }
   "Set DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact04_WaterHeaterToBath                       "   DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact04_WaterHeaterToBath                          = {
            if (IfValidAnd( CDServesMBathFix[1] > 0 ) .AND. IfValidAnd( CDMBathFixDist[1] > 0 ) .AND. IfValidAnd( CDSpecFixDists > 0 )) then  CDMBathFixDist[1]
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact04_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact04_NotApplicableMessage                       = {
            if (LocalStatus( CF1R_CompactMFRow[1]:WaterCompact04_WaterHeaterToBath ) < 1) then  "n/a"  else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact05_WaterHeaterToKitchen                    "   DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact05_WaterHeaterToKitchen                       = {
            if (IfValidAnd( CDServesKitFix[1] > 0 ) .AND. IfValidAnd( CDKitFixDist[1] > 0 ) .AND. IfValidAnd( CDSpecFixDists > 0 )) then  CDKitFixDist[1]
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact05_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact05_NotApplicableMessage                       = {
            if (LocalStatus( CF1R_CompactMFRow[1]:WaterCompact05_WaterHeaterToKitchen ) < 1) then  "n/a"  else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact06_WaterHeaterToFurthest3rdFixture         "   DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact06_WaterHeaterToFurthest3rdFixture            = {
            if (IfValidAnd( CDServesThirdFix[1] > 0 ) .AND. IfValidAnd( CDThirdFixDist[1] > 0 ) .AND. IfValidAnd( CDSpecFixDists > 0 )) then  CDThirdFixDist[1]
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact06_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact06_NotApplicableMessage                       = {
            if (LocalStatus( CF1R_CompactMFRow[1]:WaterCompact06_WaterHeaterToFurthest3rdFixture ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   "Set DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact07_CompactFactor"   DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact07_CompactFactor   =      ; SAC 09/30/21 (tic #1277)
         {  if (IfValidAnd( CompactFactor > 0 )) then  int( (CompactFactor * 100) + 0.5 ) / 100
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact07_NotApplicableMessage                   "   DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact07_NotApplicableMessage                      = {
            if (LocalStatus( CF1R_CompactMFRow[1]:WaterCompact07_CompactFactor ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   ; HERS Verif object only by DHWSys but need one by DwellUnitType assignment as well, so simply list HERS verif type needed ... ?
   ; RJH 11/2/22 changed WaterCompact08_CompactDistributionVerificationRequired to true/false and added WaterCompact08a_CompactDistributionType
   "Set DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact08_CompactDistributionVerificationRequired"   DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact08_CompactDistributionVerificationRequired   = {
            if (CompactDistrib > 0) then  "true"  else  "false"  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact08_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact08_NotApplicableMessage                       = {
            if (LocalStatus( CF1R_CompactMFRow[1]:WaterCompact08_CompactDistributionVerificationRequired ) < 1) then  "n/a"  else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact08a_CompactDistributionType"   DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact08a_CompactDistributionType   = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ) .AND. CompactDistrib >= 0) 
            then switch(CompactDistrib)
                    case  0 :  "NotCompact"
                    case  1 :  "BasicType"
                    case  2 :  "Expanded"
                    default : UNDEFINED
                 endswitch  
            else UNDEFINED
            endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact08a_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact08a_NotApplicableMessage                       = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ) .AND. LocalStatus( CF1R_CompactMFRow[1]:WaterCompact08a_CompactDistributionType ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   "Set DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact09_WaterHeaterWeightedDistance"   DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact09_WaterHeaterWeightedDistance   =     
         {  if (IfValidAnd( CDWeightedDist > 0 )) then atof( Format( "%.4f", CDWeightedDist ) )
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact09_NotApplicableMessage                   "   DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact09_NotApplicableMessage                      = {
            if (LocalStatus( CF1R_CompactMFRow[1]:WaterCompact09_WaterHeaterWeightedDistance ) < 1) then  "n/a"  else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact10_WaterHeaterQualificationDistance"   DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact10_WaterHeaterQualificationDistance   =     
         {  if (IfValidAnd( CDQualifyDist > 0 )) then atof( Format( "%.4f", CDQualifyDist ) )
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact10_NotApplicableMessage                   "   DwellUnitType:CF1R_CompactMFRow[1]:WaterCompact10_NotApplicableMessage                      = {
            if (LocalStatus( CF1R_CompactMFRow[1]:WaterCompact10_WaterHeaterQualificationDistance ) < 1) then  "n/a"  else  UNDEFINED  endif  }
END
;*************************************************************************  SAC 4/13/19
RULELIST "Setup_DwellUnitType_CF1R_CompactMFRow_2"  1 0 0 1
   "Set DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact01_ResidentialDwellingUnitDescriptor       "   DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact01_ResidentialDwellingUnitDescriptor          = {  Name  }
   "Set DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact02_DwellingUnitType       "   DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact02_DwellingUnitType          = {  Name  }
   "Set DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact03_WaterHeatingSystemName                  "   DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact03_WaterHeatingSystemName                     = {  Format( "2 - %s", DHWSysRef[2]:Name )  }
   "Set DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact04_WaterHeaterToBath                       "   DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact04_WaterHeaterToBath                          = {
            if (IfValidAnd( CDServesMBathFix[2] > 0 ) .AND. IfValidAnd( CDMBathFixDist[2] > 0 ) .AND. IfValidAnd( CDSpecFixDists > 0 )) then  CDMBathFixDist[2]
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact04_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact04_NotApplicableMessage                       = {
            if (LocalStatus( CF1R_CompactMFRow[2]:WaterCompact04_WaterHeaterToBath ) < 1) then  "n/a"  else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact05_WaterHeaterToKitchen                    "   DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact05_WaterHeaterToKitchen                       = {
            if (IfValidAnd( CDServesKitFix[2] > 0 ) .AND. IfValidAnd( CDKitFixDist[2] > 0 ) .AND. IfValidAnd( CDSpecFixDists > 0 )) then  CDKitFixDist[2]
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact05_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact05_NotApplicableMessage                       = {
            if (LocalStatus( CF1R_CompactMFRow[2]:WaterCompact05_WaterHeaterToKitchen ) < 1) then  "n/a"  else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact06_WaterHeaterToFurthest3rdFixture         "   DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact06_WaterHeaterToFurthest3rdFixture            = {
            if (IfValidAnd( CDServesThirdFix[2] > 0 ) .AND. IfValidAnd( CDThirdFixDist[2] > 0 ) .AND. IfValidAnd( CDSpecFixDists > 0 )) then  CDThirdFixDist[2]
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact06_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact06_NotApplicableMessage                       = {
            if (LocalStatus( CF1R_CompactMFRow[2]:WaterCompact06_WaterHeaterToFurthest3rdFixture ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   "Set DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact07_CompactFactor"   DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact07_CompactFactor   =      ; SAC 09/30/21 (tic #1277)
         {  if (IfValidAnd( CompactFactor > 0 )) then  int( (CompactFactor * 100) + 0.5 ) / 100
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact07_NotApplicableMessage                   "   DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact07_NotApplicableMessage                      = {
            if (LocalStatus( CF1R_CompactMFRow[2]:WaterCompact07_CompactFactor ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   ; HERS Verif object only by DHWSys but need one by DwellUnitType assignment as well, so simply list HERS verif type needed ... ?
   ; RJH 11/2/22 changed WaterCompact08_CompactDistributionVerificationRequired to true/false and added WaterCompact08a_CompactDistributionType
   "Set DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact08_CompactDistributionVerificationRequired"   DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact08_CompactDistributionVerificationRequired   = {
            if (CompactDistrib > 0) then  "true"  else  "false"  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact08_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact08_NotApplicableMessage                       = {
            if (LocalStatus( CF1R_CompactMFRow[2]:WaterCompact08_CompactDistributionVerificationRequired ) < 1) then  "n/a"  else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact08a_CompactDistributionType"   DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact08a_CompactDistributionType   = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ) .AND. CompactDistrib >= 0) 
            then switch(CompactDistrib)
                    case  0 :  "NotCompact"
                    case  1 :  "BasicType"
                    case  2 :  "Expanded"
                    default : UNDEFINED
                 endswitch  
            else UNDEFINED
            endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact08a_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact08a_NotApplicableMessage                       = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ) .AND. LocalStatus( CF1R_CompactMFRow[2]:WaterCompact08a_CompactDistributionType ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   "Set DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact09_WaterHeaterWeightedDistance"   DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact09_WaterHeaterWeightedDistance   =     
         {  if (IfValidAnd( CDWeightedDist > 0 )) then atof( Format( "%.4f", CDWeightedDist ) )
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact09_NotApplicableMessage                   "   DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact09_NotApplicableMessage                      = {
            if (LocalStatus( CF1R_CompactMFRow[2]:WaterCompact09_WaterHeaterWeightedDistance ) < 1) then  "n/a"  else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact10_WaterHeaterQualificationDistance"   DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact10_WaterHeaterQualificationDistance   =     
         {  if (IfValidAnd( CDQualifyDist > 0 )) then atof( Format( "%.4f", CDQualifyDist ) )
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact10_NotApplicableMessage                   "   DwellUnitType:CF1R_CompactMFRow[2]:WaterCompact10_NotApplicableMessage                      = {
            if (LocalStatus( CF1R_CompactMFRow[2]:WaterCompact10_WaterHeaterQualificationDistance ) < 1) then  "n/a"  else  UNDEFINED  endif  }
END
;*************************************************************************  SAC 4/13/19
RULELIST "Setup_DwellUnitType_CF1R_CompactMFRow_3"  1 0 0 1
   "Set DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact01_ResidentialDwellingUnitDescriptor       "   DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact01_ResidentialDwellingUnitDescriptor          = {  Name  }
   "Set DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact02_DwellingUnitType       "   DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact02_DwellingUnitType          = {  Name  }
   "Set DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact03_WaterHeatingSystemName                  "   DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact03_WaterHeatingSystemName                     = {  Format( "3 - %s", DHWSysRef[3]:Name )  }
   "Set DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact04_WaterHeaterToBath                       "   DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact04_WaterHeaterToBath                          = {
            if (IfValidAnd( CDServesMBathFix[3] > 0 ) .AND. IfValidAnd( CDMBathFixDist[3] > 0 ) .AND. IfValidAnd( CDSpecFixDists > 0 )) then  CDMBathFixDist[3]
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact04_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact04_NotApplicableMessage                       = {
            if (LocalStatus( CF1R_CompactMFRow[3]:WaterCompact04_WaterHeaterToBath ) < 1) then  "n/a"  else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact05_WaterHeaterToKitchen                    "   DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact05_WaterHeaterToKitchen                       = {
            if (IfValidAnd( CDServesKitFix[3] > 0 ) .AND. IfValidAnd( CDKitFixDist[3] > 0 ) .AND. IfValidAnd( CDSpecFixDists > 0 )) then  CDKitFixDist[3]
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact05_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact05_NotApplicableMessage                       = {
            if (LocalStatus( CF1R_CompactMFRow[3]:WaterCompact05_WaterHeaterToKitchen ) < 1) then  "n/a"  else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact06_WaterHeaterToFurthest3rdFixture         "   DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact06_WaterHeaterToFurthest3rdFixture            = {
            if (IfValidAnd( CDServesThirdFix[3] > 0 ) .AND. IfValidAnd( CDThirdFixDist[3] > 0 ) .AND. IfValidAnd( CDSpecFixDists > 0 )) then  CDThirdFixDist[3]
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact06_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact06_NotApplicableMessage                       = {
            if (LocalStatus( CF1R_CompactMFRow[3]:WaterCompact06_WaterHeaterToFurthest3rdFixture ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   "Set DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact07_CompactFactor"   DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact07_CompactFactor   =      ; SAC 09/30/21 (tic #1277)
         {  if (IfValidAnd( CompactFactor > 0 )) then  int( (CompactFactor * 100) + 0.5 ) / 100
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact07_NotApplicableMessage                   "   DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact07_NotApplicableMessage                      = {
            if (LocalStatus( CF1R_CompactMFRow[3]:WaterCompact07_CompactFactor ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   ; HERS Verif object only by DHWSys but need one by DwellUnitType assignment as well, so simply list HERS verif type needed ... ?
   ; RJH 11/2/22 changed WaterCompact08_CompactDistributionVerificationRequired to true/false and added WaterCompact08a_CompactDistributionType
   "Set DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact08_CompactDistributionVerificationRequired"   DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact08_CompactDistributionVerificationRequired   = {
            if (CompactDistrib > 0) then  "true"  else  "false"  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact08_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact08_NotApplicableMessage                       = {
            if (LocalStatus( CF1R_CompactMFRow[3]:WaterCompact08_CompactDistributionVerificationRequired ) < 1) then  "n/a"  else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact08a_CompactDistributionType"   DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact08a_CompactDistributionType   = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ) .AND. CompactDistrib >= 0) 
            then switch(CompactDistrib)
                    case  0 :  "NotCompact"
                    case  1 :  "BasicType"
                    case  2 :  "Expanded"
                    default : UNDEFINED
                 endswitch  
            else UNDEFINED
            endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact08a_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact08a_NotApplicableMessage                       = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ) .AND. LocalStatus( CF1R_CompactMFRow[3]:WaterCompact08a_CompactDistributionType ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   "Set DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact09_WaterHeaterWeightedDistance"   DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact09_WaterHeaterWeightedDistance   =     
         {  if (IfValidAnd( CDWeightedDist > 0 )) then atof( Format( "%.4f", CDWeightedDist ) )
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact09_NotApplicableMessage                   "   DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact09_NotApplicableMessage                      = {
            if (LocalStatus( CF1R_CompactMFRow[3]:WaterCompact09_WaterHeaterWeightedDistance ) < 1) then  "n/a"  else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact10_WaterHeaterQualificationDistance"   DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact10_WaterHeaterQualificationDistance   =     
         {  if (IfValidAnd( CDQualifyDist > 0 )) then atof( Format( "%.4f", CDQualifyDist ) )
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact10_NotApplicableMessage                   "   DwellUnitType:CF1R_CompactMFRow[3]:WaterCompact10_NotApplicableMessage                      = {
            if (LocalStatus( CF1R_CompactMFRow[3]:WaterCompact10_WaterHeaterQualificationDistance ) < 1) then  "n/a"  else  UNDEFINED  endif  }
END
;*************************************************************************  SAC 4/13/19
RULELIST "Setup_DwellUnitType_CF1R_CompactMFRow_4"  1 0 0 1
   "Set DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact01_ResidentialDwellingUnitDescriptor       "   DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact01_ResidentialDwellingUnitDescriptor          = {  Name  }
   "Set DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact02_DwellingUnitType       "   DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact02_DwellingUnitType          = {  Name  }
   "Set DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact03_WaterHeatingSystemName                  "   DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact03_WaterHeatingSystemName                     = {  Format( "4 - %s", DHWSysRef[4]:Name )  }
   "Set DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact04_WaterHeaterToBath                       "   DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact04_WaterHeaterToBath                          = {
            if (IfValidAnd( CDServesMBathFix[4] > 0 ) .AND. IfValidAnd( CDMBathFixDist[4] > 0 ) .AND. IfValidAnd( CDSpecFixDists > 0 )) then  CDMBathFixDist[4]
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact04_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact04_NotApplicableMessage                       = {
            if (LocalStatus( CF1R_CompactMFRow[4]:WaterCompact04_WaterHeaterToBath ) < 1) then  "n/a"  else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact05_WaterHeaterToKitchen                    "   DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact05_WaterHeaterToKitchen                       = {
            if (IfValidAnd( CDServesKitFix[4] > 0 ) .AND. IfValidAnd( CDKitFixDist[4] > 0 ) .AND. IfValidAnd( CDSpecFixDists > 0 )) then  CDKitFixDist[4]
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact05_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact05_NotApplicableMessage                       = {
            if (LocalStatus( CF1R_CompactMFRow[4]:WaterCompact05_WaterHeaterToKitchen ) < 1) then  "n/a"  else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact06_WaterHeaterToFurthest3rdFixture         "   DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact06_WaterHeaterToFurthest3rdFixture            = {
            if (IfValidAnd( CDServesThirdFix[4] > 0 ) .AND. IfValidAnd( CDThirdFixDist[4] > 0 ) .AND. IfValidAnd( CDSpecFixDists > 0 )) then  CDThirdFixDist[4]
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact06_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact06_NotApplicableMessage                       = {
            if (LocalStatus( CF1R_CompactMFRow[4]:WaterCompact06_WaterHeaterToFurthest3rdFixture ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   "Set DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact07_CompactFactor"   DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact07_CompactFactor   =      ; SAC 09/30/21 (tic #1277)
         {  if (IfValidAnd( CompactFactor > 0 )) then  int( (CompactFactor * 100) + 0.5 ) / 100
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact07_NotApplicableMessage                   "   DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact07_NotApplicableMessage                      = {
            if (LocalStatus( CF1R_CompactMFRow[4]:WaterCompact07_CompactFactor ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   ; HERS Verif object only by DHWSys but need one by DwellUnitType assignment as well, so simply list HERS verif type needed ... ?
   ; RJH 11/2/22 changed WaterCompact08_CompactDistributionVerificationRequired to true/false and added WaterCompact08a_CompactDistributionType
   "Set DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact08_CompactDistributionVerificationRequired"   DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact08_CompactDistributionVerificationRequired   = {
            if (CompactDistrib > 0) then  "true"  else  "false"  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact08_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact08_NotApplicableMessage                       = {
            if (LocalStatus( CF1R_CompactMFRow[4]:WaterCompact08_CompactDistributionVerificationRequired ) < 1) then  "n/a"  else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact08a_CompactDistributionType"   DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact08a_CompactDistributionType   = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ) .AND. CompactDistrib >= 0) 
            then switch(CompactDistrib)
                    case  0 :  "NotCompact"
                    case  1 :  "BasicType"
                    case  2 :  "Expanded"
                    default : UNDEFINED
                 endswitch  
            else UNDEFINED
            endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact08a_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact08a_NotApplicableMessage                       = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ) .AND. LocalStatus( CF1R_CompactMFRow[4]:WaterCompact08a_CompactDistributionType ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   "Set DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact09_WaterHeaterWeightedDistance"   DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact09_WaterHeaterWeightedDistance   =     
         {  if (IfValidAnd( CDWeightedDist > 0 )) then atof( Format( "%.4f", CDWeightedDist ) )
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact09_NotApplicableMessage                   "   DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact09_NotApplicableMessage                      = {
            if (LocalStatus( CF1R_CompactMFRow[4]:WaterCompact09_WaterHeaterWeightedDistance ) < 1) then  "n/a"  else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact10_WaterHeaterQualificationDistance"   DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact10_WaterHeaterQualificationDistance   =     
         {  if (IfValidAnd( CDQualifyDist > 0 )) then atof( Format( "%.4f", CDQualifyDist ) )
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact10_NotApplicableMessage                   "   DwellUnitType:CF1R_CompactMFRow[4]:WaterCompact10_NotApplicableMessage                      = {
            if (LocalStatus( CF1R_CompactMFRow[4]:WaterCompact10_WaterHeaterQualificationDistance ) < 1) then  "n/a"  else  UNDEFINED  endif  }
END
;*************************************************************************  SAC 4/13/19
RULELIST "Setup_DwellUnitType_CF1R_CompactMFRow_5"  1 0 0 1
   "Set DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact01_ResidentialDwellingUnitDescriptor       "   DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact01_ResidentialDwellingUnitDescriptor          = {  Name  }
   "Set DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact02_DwellingUnitType       "   DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact02_DwellingUnitType          = {  Name  }
   "Set DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact03_WaterHeatingSystemName                  "   DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact03_WaterHeatingSystemName                     = {  Format( "5 - %s", DHWSysRef[5]:Name )  }
   "Set DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact04_WaterHeaterToBath                       "   DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact04_WaterHeaterToBath                          = {
            if (IfValidAnd( CDServesMBathFix[5] > 0 ) .AND. IfValidAnd( CDMBathFixDist[5] > 0 ) .AND. IfValidAnd( CDSpecFixDists > 0 )) then  CDMBathFixDist[5]
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact04_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact04_NotApplicableMessage                       = {
            if (LocalStatus( CF1R_CompactMFRow[5]:WaterCompact04_WaterHeaterToBath ) < 1) then  "n/a"  else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact05_WaterHeaterToKitchen                    "   DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact05_WaterHeaterToKitchen                       = {
            if (IfValidAnd( CDServesKitFix[5] > 0 ) .AND. IfValidAnd( CDKitFixDist[5] > 0 ) .AND. IfValidAnd( CDSpecFixDists > 0 )) then  CDKitFixDist[5]
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact05_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact05_NotApplicableMessage                       = {
            if (LocalStatus( CF1R_CompactMFRow[5]:WaterCompact05_WaterHeaterToKitchen ) < 1) then  "n/a"  else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact06_WaterHeaterToFurthest3rdFixture         "   DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact06_WaterHeaterToFurthest3rdFixture            = {
            if (IfValidAnd( CDServesThirdFix[5] > 0 ) .AND. IfValidAnd( CDThirdFixDist[5] > 0 ) .AND. IfValidAnd( CDSpecFixDists > 0 )) then  CDThirdFixDist[5]
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact06_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact06_NotApplicableMessage                       = {
            if (LocalStatus( CF1R_CompactMFRow[5]:WaterCompact06_WaterHeaterToFurthest3rdFixture ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   "Set DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact07_CompactFactor"   DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact07_CompactFactor   =      ; SAC 09/30/21 (tic #1277)
         {  if (IfValidAnd( CompactFactor > 0 )) then  int( (CompactFactor * 100) + 0.5 ) / 100
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact07_NotApplicableMessage                   "   DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact07_NotApplicableMessage                      = {
            if (LocalStatus( CF1R_CompactMFRow[5]:WaterCompact07_CompactFactor ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   ; HERS Verif object only by DHWSys but need one by DwellUnitType assignment as well, so simply list HERS verif type needed ... ?
   ; RJH 11/2/22 changed WaterCompact08_CompactDistributionVerificationRequired to true/false and added WaterCompact08a_CompactDistributionType
   "Set DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact08_CompactDistributionVerificationRequired"   DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact08_CompactDistributionVerificationRequired   = {
            if (CompactDistrib > 0) then  "true"  else  "false"  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact08_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact08_NotApplicableMessage                       = {
            if (LocalStatus( CF1R_CompactMFRow[5]:WaterCompact08_CompactDistributionVerificationRequired ) < 1) then  "n/a"  else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact08a_CompactDistributionType"   DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact08a_CompactDistributionType   = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ) .AND. CompactDistrib >= 0) 
            then switch(CompactDistrib)
                    case  0 :  "NotCompact"
                    case  1 :  "BasicType"
                    case  2 :  "Expanded"
                    default : UNDEFINED
                 endswitch  
            else UNDEFINED
            endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact08a_NotApplicableMessage                    "   DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact08a_NotApplicableMessage                       = {
            if (IfValidAnd(Proj:IsLowRiseMFam > 0 ) .AND. LocalStatus( CF1R_CompactMFRow[5]:WaterCompact08a_CompactDistributionType ) < 1) then  "n/a"  else  UNDEFINED  endif  }

   "Set DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact09_WaterHeaterWeightedDistance"   DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact09_WaterHeaterWeightedDistance   =     
         {  if (IfValidAnd( CDWeightedDist > 0 )) then atof( Format( "%.4f", CDWeightedDist ) )
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact09_NotApplicableMessage                   "   DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact09_NotApplicableMessage                      = {
            if (LocalStatus( CF1R_CompactMFRow[5]:WaterCompact09_WaterHeaterWeightedDistance ) < 1) then  "n/a"  else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact10_WaterHeaterQualificationDistance"   DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact10_WaterHeaterQualificationDistance   =     
         {  if (IfValidAnd( CDQualifyDist > 0 )) then atof( Format( "%.4f", CDQualifyDist ) )
            else  UNDEFINED  endif  }
   "Set DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact10_NotApplicableMessage                   "   DwellUnitType:CF1R_CompactMFRow[5]:WaterCompact10_NotApplicableMessage                      = {
            if (LocalStatus( CF1R_CompactMFRow[5]:WaterCompact10_WaterHeaterQualificationDistance ) < 1) then  "n/a"  else  UNDEFINED  endif  }
END
;*************************************************************************



;************************************************************************* ; SAC 7/16/19 - rules to setup MFam DWHR table records (tic #1139)
RULELIST "CF1RPRF01E_TableDWHR_MFam"  1 0 0 1
  ; MFam DHWSys-1 --
   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-1 & DWHR-1"    DwellUnitType:CF1R_DWHRMFRow_DWHR1[1]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 1 ) .AND. LocalCompAssigned( DHWSysRef[1] ) .AND.
             IfValidAnd( DWHRSysShowers1[1] > 0 ) .AND. LocalCompAssigned( DWHRSysRef1[1] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-1-1" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-1 & DWHR-1"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR1[1] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys1_DWHR1", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-1 & DWHR-2"    DwellUnitType:CF1R_DWHRMFRow_DWHR2[1]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 1 ) .AND. LocalCompAssigned( DHWSysRef[1] ) .AND.
             IfValidAnd( DWHRSysShowers2[1] > 0 ) .AND. LocalCompAssigned( DWHRSysRef2[1] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-1-2" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-1 & DWHR-2"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR2[1] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys1_DWHR2", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-1 & DWHR-3"    DwellUnitType:CF1R_DWHRMFRow_DWHR3[1]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 1 ) .AND. LocalCompAssigned( DHWSysRef[1] ) .AND.
             IfValidAnd( DWHRSysShowers3[1] > 0 ) .AND. LocalCompAssigned( DWHRSysRef3[1] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-1-3" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-1 & DWHR-3"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR3[1] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys1_DWHR3", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-1 & DWHR-4"    DwellUnitType:CF1R_DWHRMFRow_DWHR4[1]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 1 ) .AND. LocalCompAssigned( DHWSysRef[1] ) .AND.
             IfValidAnd( DWHRSysShowers4[1] > 0 ) .AND. LocalCompAssigned( DWHRSysRef4[1] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-1-4" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-1 & DWHR-4"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR4[1] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys1_DWHR4", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-1 & DWHR-5"    DwellUnitType:CF1R_DWHRMFRow_DWHR5[1]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 1 ) .AND. LocalCompAssigned( DHWSysRef[1] ) .AND.
             IfValidAnd( DWHRSysShowers5[1] > 0 ) .AND. LocalCompAssigned( DWHRSysRef5[1] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-1-5" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-1 & DWHR-5"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR5[1] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys1_DWHR5", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-1 & DWHR-6"    DwellUnitType:CF1R_DWHRMFRow_DWHR6[1]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 1 ) .AND. LocalCompAssigned( DHWSysRef[1] ) .AND.
             IfValidAnd( DWHRSysShowers6[1] > 0 ) .AND. LocalCompAssigned( DWHRSysRef6[1] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-1-6" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-1 & DWHR-6"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR6[1] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys1_DWHR6", 1 )  endif  }

  ; MFam DHWSys-2 --
   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-2 & DWHR-1"    DwellUnitType:CF1R_DWHRMFRow_DWHR1[2]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 2 ) .AND. LocalCompAssigned( DHWSysRef[2] ) .AND.
             IfValidAnd( DWHRSysShowers1[2] > 0 ) .AND. LocalCompAssigned( DWHRSysRef1[2] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-2-1" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-2 & DWHR-1"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR1[2] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys2_DWHR1", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-2 & DWHR-2"    DwellUnitType:CF1R_DWHRMFRow_DWHR2[2]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 2 ) .AND. LocalCompAssigned( DHWSysRef[2] ) .AND.
             IfValidAnd( DWHRSysShowers2[2] > 0 ) .AND. LocalCompAssigned( DWHRSysRef2[2] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-2-2" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-2 & DWHR-2"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR2[2] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys2_DWHR2", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-2 & DWHR-3"    DwellUnitType:CF1R_DWHRMFRow_DWHR3[2]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 2 ) .AND. LocalCompAssigned( DHWSysRef[2] ) .AND.
             IfValidAnd( DWHRSysShowers3[2] > 0 ) .AND. LocalCompAssigned( DWHRSysRef3[2] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-2-3" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-2 & DWHR-3"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR3[2] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys2_DWHR3", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-2 & DWHR-4"    DwellUnitType:CF1R_DWHRMFRow_DWHR4[2]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 2 ) .AND. LocalCompAssigned( DHWSysRef[2] ) .AND.
             IfValidAnd( DWHRSysShowers4[2] > 0 ) .AND. LocalCompAssigned( DWHRSysRef4[2] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-2-4" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-2 & DWHR-4"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR4[2] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys2_DWHR4", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-2 & DWHR-5"    DwellUnitType:CF1R_DWHRMFRow_DWHR5[2]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 2 ) .AND. LocalCompAssigned( DHWSysRef[2] ) .AND.
             IfValidAnd( DWHRSysShowers5[2] > 0 ) .AND. LocalCompAssigned( DWHRSysRef5[2] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-2-5" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-2 & DWHR-5"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR5[2] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys2_DWHR5", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-2 & DWHR-6"    DwellUnitType:CF1R_DWHRMFRow_DWHR6[2]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 2 ) .AND. LocalCompAssigned( DHWSysRef[2] ) .AND.
             IfValidAnd( DWHRSysShowers6[2] > 0 ) .AND. LocalCompAssigned( DWHRSysRef6[2] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-2-6" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-2 & DWHR-6"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR6[2] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys2_DWHR6", 1 )  endif  }

  ; MFam DHWSys-3 --
   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-3 & DWHR-1"    DwellUnitType:CF1R_DWHRMFRow_DWHR1[3]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 3 ) .AND. LocalCompAssigned( DHWSysRef[3] ) .AND.
             IfValidAnd( DWHRSysShowers1[3] > 0 ) .AND. LocalCompAssigned( DWHRSysRef1[3] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-3-1" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-3 & DWHR-1"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR1[3] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys3_DWHR1", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-3 & DWHR-2"    DwellUnitType:CF1R_DWHRMFRow_DWHR2[3]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 3 ) .AND. LocalCompAssigned( DHWSysRef[3] ) .AND.
             IfValidAnd( DWHRSysShowers2[3] > 0 ) .AND. LocalCompAssigned( DWHRSysRef2[3] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-3-2" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-3 & DWHR-2"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR2[3] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys3_DWHR2", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-3 & DWHR-3"    DwellUnitType:CF1R_DWHRMFRow_DWHR3[3]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 3 ) .AND. LocalCompAssigned( DHWSysRef[3] ) .AND.
             IfValidAnd( DWHRSysShowers3[3] > 0 ) .AND. LocalCompAssigned( DWHRSysRef3[3] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-3-3" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-3 & DWHR-3"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR3[3] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys3_DWHR3", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-3 & DWHR-4"    DwellUnitType:CF1R_DWHRMFRow_DWHR4[3]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 3 ) .AND. LocalCompAssigned( DHWSysRef[3] ) .AND.
             IfValidAnd( DWHRSysShowers4[3] > 0 ) .AND. LocalCompAssigned( DWHRSysRef4[3] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-3-4" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-3 & DWHR-4"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR4[3] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys3_DWHR4", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-3 & DWHR-5"    DwellUnitType:CF1R_DWHRMFRow_DWHR5[3]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 3 ) .AND. LocalCompAssigned( DHWSysRef[3] ) .AND.
             IfValidAnd( DWHRSysShowers5[3] > 0 ) .AND. LocalCompAssigned( DWHRSysRef5[3] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-3-5" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-3 & DWHR-5"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR5[3] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys3_DWHR5", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-3 & DWHR-6"    DwellUnitType:CF1R_DWHRMFRow_DWHR6[3]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 3 ) .AND. LocalCompAssigned( DHWSysRef[3] ) .AND.
             IfValidAnd( DWHRSysShowers6[3] > 0 ) .AND. LocalCompAssigned( DWHRSysRef6[3] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-3-6" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-3 & DWHR-6"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR6[3] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys3_DWHR6", 1 )  endif  }

  ; MFam DHWSys-4 --
   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-4 & DWHR-1"    DwellUnitType:CF1R_DWHRMFRow_DWHR1[4]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 4 ) .AND. LocalCompAssigned( DHWSysRef[4] ) .AND.
             IfValidAnd( DWHRSysShowers1[4] > 0 ) .AND. LocalCompAssigned( DWHRSysRef1[4] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-4-1" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-4 & DWHR-1"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR1[4] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys4_DWHR1", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-4 & DWHR-2"    DwellUnitType:CF1R_DWHRMFRow_DWHR2[4]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 4 ) .AND. LocalCompAssigned( DHWSysRef[4] ) .AND.
             IfValidAnd( DWHRSysShowers2[4] > 0 ) .AND. LocalCompAssigned( DWHRSysRef2[4] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-4-2" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-4 & DWHR-2"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR2[4] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys4_DWHR2", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-4 & DWHR-3"    DwellUnitType:CF1R_DWHRMFRow_DWHR3[4]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 4 ) .AND. LocalCompAssigned( DHWSysRef[4] ) .AND.
             IfValidAnd( DWHRSysShowers3[4] > 0 ) .AND. LocalCompAssigned( DWHRSysRef3[4] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-4-3" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-4 & DWHR-3"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR3[4] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys4_DWHR3", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-4 & DWHR-4"    DwellUnitType:CF1R_DWHRMFRow_DWHR4[4]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 4 ) .AND. LocalCompAssigned( DHWSysRef[4] ) .AND.
             IfValidAnd( DWHRSysShowers4[4] > 0 ) .AND. LocalCompAssigned( DWHRSysRef4[4] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-4-4" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-4 & DWHR-4"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR4[4] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys4_DWHR4", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-4 & DWHR-5"    DwellUnitType:CF1R_DWHRMFRow_DWHR5[4]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 4 ) .AND. LocalCompAssigned( DHWSysRef[4] ) .AND.
             IfValidAnd( DWHRSysShowers5[4] > 0 ) .AND. LocalCompAssigned( DWHRSysRef5[4] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-4-5" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-4 & DWHR-5"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR5[4] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys4_DWHR5", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-4 & DWHR-6"    DwellUnitType:CF1R_DWHRMFRow_DWHR6[4]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 4 ) .AND. LocalCompAssigned( DHWSysRef[4] ) .AND.
             IfValidAnd( DWHRSysShowers6[4] > 0 ) .AND. LocalCompAssigned( DWHRSysRef6[4] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-4-6" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-4 & DWHR-6"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR6[4] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys4_DWHR6", 1 )  endif  }

  ; MFam DHWSys-5 --
   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-5 & DWHR-1"    DwellUnitType:CF1R_DWHRMFRow_DWHR1[5]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 5 ) .AND. LocalCompAssigned( DHWSysRef[5] ) .AND.
             IfValidAnd( DWHRSysShowers1[5] > 0 ) .AND. LocalCompAssigned( DWHRSysRef1[5] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-5-1" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-5 & DWHR-1"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR1[5] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys5_DWHR1", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-5 & DWHR-2"    DwellUnitType:CF1R_DWHRMFRow_DWHR2[5]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 5 ) .AND. LocalCompAssigned( DHWSysRef[5] ) .AND.
             IfValidAnd( DWHRSysShowers2[5] > 0 ) .AND. LocalCompAssigned( DWHRSysRef2[5] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-5-2" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-5 & DWHR-2"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR2[5] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys5_DWHR2", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-5 & DWHR-3"    DwellUnitType:CF1R_DWHRMFRow_DWHR3[5]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 5 ) .AND. LocalCompAssigned( DHWSysRef[5] ) .AND.
             IfValidAnd( DWHRSysShowers3[5] > 0 ) .AND. LocalCompAssigned( DWHRSysRef3[5] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-5-3" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-5 & DWHR-3"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR3[5] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys5_DWHR3", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-5 & DWHR-4"    DwellUnitType:CF1R_DWHRMFRow_DWHR4[5]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 5 ) .AND. LocalCompAssigned( DHWSysRef[5] ) .AND.
             IfValidAnd( DWHRSysShowers4[5] > 0 ) .AND. LocalCompAssigned( DWHRSysRef4[5] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-5-4" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-5 & DWHR-4"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR4[5] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys5_DWHR4", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-5 & DWHR-5"    DwellUnitType:CF1R_DWHRMFRow_DWHR5[5]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 5 ) .AND. LocalCompAssigned( DHWSysRef[5] ) .AND.
             IfValidAnd( DWHRSysShowers5[5] > 0 ) .AND. LocalCompAssigned( DWHRSysRef5[5] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-5-5" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-5 & DWHR-5"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR5[5] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys5_DWHR5", 1 )  endif  }

   "Create cf1rtblRowDWHR for MFam DwellUnitType DHWSys-5 & DWHR-6"    DwellUnitType:CF1R_DWHRMFRow_DWHR6[5]  =
      {  if (IfValidAnd( AssignedDUFlrArea > 0.9 ) .AND. IfValidAnd( NumDHWSysTypes >= 5 ) .AND. LocalCompAssigned( DHWSysRef[5] ) .AND.
             IfValidAnd( DWHRSysShowers6[5] > 0 ) .AND. LocalCompAssigned( DWHRSysRef6[5] ))
         then  CreateComp( cf1rtblRowDWHR, Name + "TableDWHRRow-5-6" )
         else  UNDEFINED  endif  }
   "Populate DWHR table row for MFam DwellUnitType DHWSys-5 & DWHR-6"   DwellUnitType:Action  = 
      {  if (LocalCompAssigned( CF1R_DWHRMFRow_DWHR6[5] ) < 1) then  UNCHANGED
         else  EvalRulelist( "CF1RPRF01E_TableDWHR_MFam_DHWSys5_DWHR6", 1 )  endif  }
END
; KEY for populating following rulelists --  DHWSys - #  DWHR   - @
;   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR@[#]:Tdw01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR@[#]:Tdw01_ResidentialDwellingUnitDescriptor  = {  Name  }
;   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR@[#]:Tdw02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR@[#]:Tdw02_DWHR_Name                          = {  Format( "%s - @ - %s", DHWSysRef[#]:Name, DWHRSysRef@[#]:Name )  }
;   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR@[#]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR@[#]:WaterDWHR03_DWHR_Configuration                 = {  
;         if (     IfValidAnd( DWHRSysTakeCold@[#] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater@[#] > 0 )   ) then  "UnequalFlowWaterHeater"
;         else if (IfValidAnd( DWHRSysTakeCold@[#] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater@[#] > 0 )==0) then  "UnequalFlowShower"
;         else  "EqualFlow"  endif endif  }
;   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR@[#]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR@[#]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers@[#]  }
;   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR@[#]:Tdw05_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR@[#]:Tdw05_DWHR_RatedEffectiveness            = {  DWHRSysRef@[#]:CSARatedEff  }
;   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR@[#]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR@[#]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
;   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR@[#]:Tdw07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR@[#]:Tdw07_DWHR_PercentShowerServed           = {  
;         if (     IfValidAnd( DWHRSysTakeCold@[#] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater@[#] > 0 )==0)
;         then  100 * DWHRSysTakeCold@[#] / TotShowersServed[#]
;         else  100 * DWHRSysShowers@[#]  / TotShowersServed[#]  endif  }
;************************************************************************* ; SAC 7/16/19 - rules to setup MFam DWHR table records (tic #1139)
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys1_DWHR1"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[1]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR1[1]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[1]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR1[1]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[1]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR1[1]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 1 - %s", DHWSysRef[1]:Name, DWHRSysRef1[1]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[1]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR1[1]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold1[1] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater1[1] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold1[1] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater1[1] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[1]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR1[1]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers1[1]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[1]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR1[1]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[1]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR1[1]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef1[1]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[1]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR1[1]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold1[1] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater1[1] > 0 )==0)
         then  100 * DWHRSysTakeCold1[1] / TotShowersServed[1]
         else  100 * DWHRSysShowers1[1]  / TotShowersServed[1]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys1_DWHR2"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[1]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR2[1]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[1]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR2[1]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[1]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR2[1]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 2 - %s", DHWSysRef[1]:Name, DWHRSysRef2[1]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[1]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR2[1]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold2[1] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater2[1] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold2[1] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater2[1] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[1]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR2[1]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers2[1]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[1]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR2[1]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[1]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR2[1]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef2[1]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[1]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR2[1]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold2[1] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater2[1] > 0 )==0)
         then  100 * DWHRSysTakeCold2[1] / TotShowersServed[1]
         else  100 * DWHRSysShowers2[1]  / TotShowersServed[1]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys1_DWHR3"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[1]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR3[1]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[1]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR3[1]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[1]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR3[1]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 3 - %s", DHWSysRef[1]:Name, DWHRSysRef3[1]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[1]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR3[1]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold3[1] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater3[1] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold3[1] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater3[1] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[1]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR3[1]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers3[1]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[1]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR3[1]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[1]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR3[1]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef3[1]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[1]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR3[1]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold3[1] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater3[1] > 0 )==0)
         then  100 * DWHRSysTakeCold3[1] / TotShowersServed[1]
         else  100 * DWHRSysShowers3[1]  / TotShowersServed[1]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys1_DWHR4"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[1]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR4[1]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[1]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR4[1]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[1]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR4[1]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 4 - %s", DHWSysRef[1]:Name, DWHRSysRef4[1]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[1]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR4[1]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold4[1] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater4[1] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold4[1] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater4[1] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[1]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR4[1]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers4[1]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[1]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR4[1]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[1]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR4[1]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef4[1]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[1]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR4[1]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold4[1] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater4[1] > 0 )==0)
         then  100 * DWHRSysTakeCold4[1] / TotShowersServed[1]
         else  100 * DWHRSysShowers4[1]  / TotShowersServed[1]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys1_DWHR5"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[1]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR5[1]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[1]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR5[1]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[1]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR5[1]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 5 - %s", DHWSysRef[1]:Name, DWHRSysRef5[1]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[1]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR5[1]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold5[1] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater5[1] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold5[1] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater5[1] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[1]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR5[1]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers5[1]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[1]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR5[1]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[1]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR5[1]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef5[1]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[1]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR5[1]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold5[1] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater5[1] > 0 )==0)
         then  100 * DWHRSysTakeCold5[1] / TotShowersServed[1]
         else  100 * DWHRSysShowers5[1]  / TotShowersServed[1]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys1_DWHR6"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[1]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR6[1]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[1]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR6[1]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[1]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR6[1]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 6 - %s", DHWSysRef[1]:Name, DWHRSysRef6[1]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[1]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR6[1]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold6[1] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater6[1] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold6[1] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater6[1] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[1]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR6[1]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers6[1]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[1]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR6[1]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[1]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR6[1]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef6[1]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[1]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR6[1]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold6[1] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater6[1] > 0 )==0)
         then  100 * DWHRSysTakeCold6[1] / TotShowersServed[1]
         else  100 * DWHRSysShowers6[1]  / TotShowersServed[1]  endif  }
END
; MFam DHWSys-2 --
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys2_DWHR1"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[2]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR1[2]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[2]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR1[2]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[2]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR1[2]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 1 - %s", DHWSysRef[2]:Name, DWHRSysRef1[2]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[2]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR1[2]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold1[2] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater1[2] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold1[2] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater1[2] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[2]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR1[2]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers1[2]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[2]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR1[2]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[2]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR1[2]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef1[2]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[2]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR1[2]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold1[2] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater1[2] > 0 )==0)
         then  100 * DWHRSysTakeCold1[2] / TotShowersServed[2]
         else  100 * DWHRSysShowers1[2]  / TotShowersServed[2]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys2_DWHR2"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[2]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR2[2]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[2]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR2[2]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[2]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR2[2]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 2 - %s", DHWSysRef[2]:Name, DWHRSysRef2[2]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[2]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR2[2]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold2[2] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater2[2] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold2[2] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater2[2] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[2]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR2[2]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers2[2]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[2]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR2[2]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[2]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR2[2]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef2[2]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[2]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR2[2]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold2[2] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater2[2] > 0 )==0)
         then  100 * DWHRSysTakeCold2[2] / TotShowersServed[2]
         else  100 * DWHRSysShowers2[2]  / TotShowersServed[2]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys2_DWHR3"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[2]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR3[2]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[2]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR3[2]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[2]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR3[2]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 3 - %s", DHWSysRef[2]:Name, DWHRSysRef3[2]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[2]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR3[2]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold3[2] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater3[2] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold3[2] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater3[2] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[2]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR3[2]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers3[2]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[2]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR3[2]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[2]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR3[2]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef3[2]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[2]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR3[2]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold3[2] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater3[2] > 0 )==0)
         then  100 * DWHRSysTakeCold3[2] / TotShowersServed[2]
         else  100 * DWHRSysShowers3[2]  / TotShowersServed[2]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys2_DWHR4"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[2]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR4[2]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[2]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR4[2]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[2]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR4[2]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 4 - %s", DHWSysRef[2]:Name, DWHRSysRef4[2]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[2]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR4[2]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold4[2] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater4[2] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold4[2] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater4[2] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[2]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR4[2]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers4[2]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[2]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR4[2]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[2]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR4[2]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef4[2]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[2]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR4[2]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold4[2] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater4[2] > 0 )==0)
         then  100 * DWHRSysTakeCold4[2] / TotShowersServed[2]
         else  100 * DWHRSysShowers4[2]  / TotShowersServed[2]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys2_DWHR5"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[2]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR5[2]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[2]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR5[2]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[2]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR5[2]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 5 - %s", DHWSysRef[2]:Name, DWHRSysRef5[2]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[2]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR5[2]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold5[2] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater5[2] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold5[2] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater5[2] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[2]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR5[2]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers5[2]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[2]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR5[2]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[2]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR5[2]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef5[2]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[2]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR5[2]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold5[2] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater5[2] > 0 )==0)
         then  100 * DWHRSysTakeCold5[2] / TotShowersServed[2]
         else  100 * DWHRSysShowers5[2]  / TotShowersServed[2]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys2_DWHR6"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[2]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR6[2]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[2]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR6[2]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[2]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR6[2]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 6 - %s", DHWSysRef[2]:Name, DWHRSysRef6[2]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[2]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR6[2]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold6[2] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater6[2] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold6[2] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater6[2] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[2]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR6[2]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers6[2]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[2]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR6[2]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[2]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR6[2]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef6[2]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[2]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR6[2]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold6[2] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater6[2] > 0 )==0)
         then  100 * DWHRSysTakeCold6[2] / TotShowersServed[2]
         else  100 * DWHRSysShowers6[2]  / TotShowersServed[2]  endif  }
END
; MFam DHWSys-3 --
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys3_DWHR1"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[3]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR1[3]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[3]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR1[3]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[3]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR1[3]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 1 - %s", DHWSysRef[3]:Name, DWHRSysRef1[3]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[3]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR1[3]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold1[3] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater1[3] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold1[3] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater1[3] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[3]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR1[3]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers1[3]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[3]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR1[3]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[3]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR1[3]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef1[3]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[3]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR1[3]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold1[3] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater1[3] > 0 )==0)
         then  100 * DWHRSysTakeCold1[3] / TotShowersServed[3]
         else  100 * DWHRSysShowers1[3]  / TotShowersServed[3]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys3_DWHR2"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[3]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR2[3]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[3]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR2[3]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[3]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR2[3]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 2 - %s", DHWSysRef[3]:Name, DWHRSysRef2[3]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[3]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR2[3]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold2[3] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater2[3] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold2[3] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater2[3] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[3]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR2[3]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers2[3]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[3]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR2[3]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[3]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR2[3]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef2[3]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[3]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR2[3]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold2[3] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater2[3] > 0 )==0)
         then  100 * DWHRSysTakeCold2[3] / TotShowersServed[3]
         else  100 * DWHRSysShowers2[3]  / TotShowersServed[3]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys3_DWHR3"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[3]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR3[3]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[3]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR3[3]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[3]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR3[3]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 3 - %s", DHWSysRef[3]:Name, DWHRSysRef3[3]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[3]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR3[3]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold3[3] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater3[3] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold3[3] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater3[3] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[3]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR3[3]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers3[3]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[3]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR3[3]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[3]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR3[3]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef3[3]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[3]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR3[3]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold3[3] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater3[3] > 0 )==0)
         then  100 * DWHRSysTakeCold3[3] / TotShowersServed[3]
         else  100 * DWHRSysShowers3[3]  / TotShowersServed[3]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys3_DWHR4"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[3]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR4[3]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[3]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR4[3]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[3]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR4[3]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 4 - %s", DHWSysRef[3]:Name, DWHRSysRef4[3]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[3]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR4[3]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold4[3] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater4[3] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold4[3] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater4[3] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[3]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR4[3]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers4[3]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[3]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR4[3]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[3]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR4[3]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef4[3]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[3]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR4[3]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold4[3] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater4[3] > 0 )==0)
         then  100 * DWHRSysTakeCold4[3] / TotShowersServed[3]
         else  100 * DWHRSysShowers4[3]  / TotShowersServed[3]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys3_DWHR5"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[3]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR5[3]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[3]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR5[3]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[3]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR5[3]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 5 - %s", DHWSysRef[3]:Name, DWHRSysRef5[3]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[3]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR5[3]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold5[3] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater5[3] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold5[3] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater5[3] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[3]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR5[3]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers5[3]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[3]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR5[3]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[3]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR5[3]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef5[3]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[3]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR5[3]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold5[3] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater5[3] > 0 )==0)
         then  100 * DWHRSysTakeCold5[3] / TotShowersServed[3]
         else  100 * DWHRSysShowers5[3]  / TotShowersServed[3]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys3_DWHR6"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[3]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR6[3]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[3]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR6[3]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[3]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR6[3]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 6 - %s", DHWSysRef[3]:Name, DWHRSysRef6[3]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[3]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR6[3]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold6[3] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater6[3] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold6[3] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater6[3] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[3]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR6[3]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers6[3]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[3]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR6[3]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[3]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR6[3]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef6[3]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[3]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR6[3]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold6[3] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater6[3] > 0 )==0)
         then  100 * DWHRSysTakeCold6[3] / TotShowersServed[3]
         else  100 * DWHRSysShowers6[3]  / TotShowersServed[3]  endif  }
END
; MFam DHWSys-4 --
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys4_DWHR1"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[4]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR1[4]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[4]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR1[4]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[4]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR1[4]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 1 - %s", DHWSysRef[4]:Name, DWHRSysRef1[4]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[4]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR1[4]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold1[4] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater1[4] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold1[4] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater1[4] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[4]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR1[4]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers1[4]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[4]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR1[4]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[4]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR1[4]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef1[4]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[4]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR1[4]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold1[4] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater1[4] > 0 )==0)
         then  100 * DWHRSysTakeCold1[4] / TotShowersServed[4]
         else  100 * DWHRSysShowers1[4]  / TotShowersServed[4]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys4_DWHR2"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[4]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR2[4]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[4]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR2[4]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[4]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR2[4]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 2 - %s", DHWSysRef[4]:Name, DWHRSysRef2[4]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[4]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR2[4]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold2[4] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater2[4] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold2[4] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater2[4] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[4]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR2[4]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers2[4]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[4]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR2[4]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[4]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR2[4]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef2[4]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[4]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR2[4]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold2[4] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater2[4] > 0 )==0)
         then  100 * DWHRSysTakeCold2[4] / TotShowersServed[4]
         else  100 * DWHRSysShowers2[4]  / TotShowersServed[4]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys4_DWHR3"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[4]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR3[4]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[4]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR3[4]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[4]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR3[4]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 3 - %s", DHWSysRef[4]:Name, DWHRSysRef3[4]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[4]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR3[4]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold3[4] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater3[4] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold3[4] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater3[4] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[4]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR3[4]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers3[4]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[4]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR3[4]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[4]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR3[4]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef3[4]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[4]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR3[4]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold3[4] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater3[4] > 0 )==0)
         then  100 * DWHRSysTakeCold3[4] / TotShowersServed[4]
         else  100 * DWHRSysShowers3[4]  / TotShowersServed[4]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys4_DWHR4"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[4]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR4[4]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[4]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR4[4]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[4]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR4[4]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 4 - %s", DHWSysRef[4]:Name, DWHRSysRef4[4]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[4]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR4[4]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold4[4] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater4[4] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold4[4] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater4[4] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[4]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR4[4]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers4[4]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[4]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR4[4]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[4]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR4[4]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef4[4]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[4]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR4[4]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold4[4] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater4[4] > 0 )==0)
         then  100 * DWHRSysTakeCold4[4] / TotShowersServed[4]
         else  100 * DWHRSysShowers4[4]  / TotShowersServed[4]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys4_DWHR5"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[4]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR5[4]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[4]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR5[4]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[4]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR5[4]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 5 - %s", DHWSysRef[4]:Name, DWHRSysRef5[4]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[4]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR5[4]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold5[4] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater5[4] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold5[4] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater5[4] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[4]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR5[4]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers5[4]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[4]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR5[4]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[4]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR5[4]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef5[4]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[4]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR5[4]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold5[4] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater5[4] > 0 )==0)
         then  100 * DWHRSysTakeCold5[4] / TotShowersServed[4]
         else  100 * DWHRSysShowers5[4]  / TotShowersServed[4]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys4_DWHR6"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[4]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR6[4]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[4]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR6[4]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[4]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR6[4]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 6 - %s", DHWSysRef[4]:Name, DWHRSysRef6[4]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[4]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR6[4]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold6[4] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater6[4] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold6[4] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater6[4] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[4]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR6[4]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers6[4]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[4]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR6[4]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[4]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR6[4]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef6[4]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[4]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR6[4]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold6[4] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater6[4] > 0 )==0)
         then  100 * DWHRSysTakeCold6[4] / TotShowersServed[4]
         else  100 * DWHRSysShowers6[4]  / TotShowersServed[4]  endif  }
END
; MFam DHWSys-5 --
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys5_DWHR1"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[5]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR1[5]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[5]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR1[5]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[5]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR1[5]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 1 - %s", DHWSysRef[5]:Name, DWHRSysRef1[5]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[5]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR1[5]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold1[5] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater1[5] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold1[5] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater1[5] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[5]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR1[5]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers1[5]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[5]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR1[5]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[5]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR1[5]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef1[5]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR1[5]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR1[5]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold1[5] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater1[5] > 0 )==0)
         then  100 * DWHRSysTakeCold1[5] / TotShowersServed[5]
         else  100 * DWHRSysShowers1[5]  / TotShowersServed[5]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys5_DWHR2"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[5]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR2[5]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[5]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR2[5]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[5]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR2[5]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 2 - %s", DHWSysRef[5]:Name, DWHRSysRef2[5]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[5]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR2[5]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold2[5] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater2[5] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold2[5] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater2[5] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[5]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR2[5]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers2[5]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[5]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR2[5]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[5]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR2[5]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef2[5]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR2[5]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR2[5]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold2[5] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater2[5] > 0 )==0)
         then  100 * DWHRSysTakeCold2[5] / TotShowersServed[5]
         else  100 * DWHRSysShowers2[5]  / TotShowersServed[5]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys5_DWHR3"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[5]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR3[5]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[5]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR3[5]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[5]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR3[5]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 3 - %s", DHWSysRef[5]:Name, DWHRSysRef3[5]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[5]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR3[5]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold3[5] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater3[5] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold3[5] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater3[5] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[5]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR3[5]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers3[5]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[5]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR3[5]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[5]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR3[5]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef3[5]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR3[5]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR3[5]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold3[5] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater3[5] > 0 )==0)
         then  100 * DWHRSysTakeCold3[5] / TotShowersServed[5]
         else  100 * DWHRSysShowers3[5]  / TotShowersServed[5]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys5_DWHR4"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[5]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR4[5]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[5]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR4[5]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[5]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR4[5]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 4 - %s", DHWSysRef[5]:Name, DWHRSysRef4[5]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[5]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR4[5]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold4[5] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater4[5] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold4[5] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater4[5] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[5]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR4[5]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers4[5]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[5]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR4[5]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[5]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR4[5]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef4[5]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR4[5]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR4[5]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold4[5] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater4[5] > 0 )==0)
         then  100 * DWHRSysTakeCold4[5] / TotShowersServed[5]
         else  100 * DWHRSysShowers4[5]  / TotShowersServed[5]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys5_DWHR5"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[5]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR5[5]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[5]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR5[5]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[5]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR5[5]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 5 - %s", DHWSysRef[5]:Name, DWHRSysRef5[5]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[5]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR5[5]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold5[5] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater5[5] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold5[5] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater5[5] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[5]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR5[5]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers5[5]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[5]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR5[5]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[5]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR5[5]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef5[5]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR5[5]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR5[5]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold5[5] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater5[5] > 0 )==0)
         then  100 * DWHRSysTakeCold5[5] / TotShowersServed[5]
         else  100 * DWHRSysShowers5[5]  / TotShowersServed[5]  endif  }
END
RULELIST "CF1RPRF01E_TableDWHR_MFam_DHWSys5_DWHR6"  1 0 0 1
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[5]:WaterDWHR01_ResidentialDwellingUnitDescriptor"   DwellUnitType:CF1R_DWHRMFRow_DWHR6[5]:WaterDWHR01_ResidentialDwellingUnitDescriptor  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[5]:WaterDWHR01a_DwellingUnitType"   DwellUnitType:CF1R_DWHRMFRow_DWHR6[5]:WaterDWHR01a_DwellingUnitType  = {  Name  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[5]:WaterDWHR02_DWHR_Name"                           DwellUnitType:CF1R_DWHRMFRow_DWHR6[5]:WaterDWHR02_DWHR_Name                          = {  Format( "%s - 6 - %s", DHWSysRef[5]:Name, DWHRSysRef6[5]:Name )  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[5]:WaterDWHR03_DWHR_Configuration"                  DwellUnitType:CF1R_DWHRMFRow_DWHR6[5]:WaterDWHR03_DWHR_Configuration                 = {  
         if (     IfValidAnd( DWHRSysTakeCold6[5] > 0 )==0 .AND. IfValidAnd( DWHRSysFeedHeater6[5] > 0 )   ) then  "UnequalFlowWaterHeater"
         else if (IfValidAnd( DWHRSysTakeCold6[5] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater6[5] > 0 )==0) then  "UnequalFlowShower"
         else  "EqualFlow"  endif endif  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[5]:WaterDWHR04_DWHR_DrainCount"                     DwellUnitType:CF1R_DWHRMFRow_DWHR6[5]:WaterDWHR04_DWHR_DrainCount                    = {  DWHRSysShowers6[5]  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[5]:WaterDWHR05_DWHR_HERS_VerificationRequired"      DwellUnitType:CF1R_DWHRMFRow_DWHR6[5]:WaterDWHR05_DWHR_HERS_VerificationRequired     = {  "true"  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[5]:WaterDWHR06_DWHR_RatedEffectiveness"             DwellUnitType:CF1R_DWHRMFRow_DWHR6[5]:WaterDWHR06_DWHR_RatedEffectiveness            = {  DWHRSysRef6[5]:CSARatedEff  }
   "Set DwellUnitType:CF1R_DWHRMFRow_DWHR6[5]:WaterDWHR07_DWHR_PercentShowerServed"            DwellUnitType:CF1R_DWHRMFRow_DWHR6[5]:WaterDWHR07_DWHR_PercentShowerServed           = {  
         if (     IfValidAnd( DWHRSysTakeCold6[5] > 0 )    .AND. IfValidAnd( DWHRSysFeedHeater6[5] > 0 )==0)
         then  100 * DWHRSysTakeCold6[5] / TotShowersServed[5]
         else  100 * DWHRSysShowers6[5]  / TotShowersServed[5]  endif  }
END
;************************************************************************* ; SAC 7/16/19 - END OF rules to setup MFam DWHR table records (tic #1139)

;************************************************************************* ; SAC 2/4/20 (tic #1198)
RULELIST "CF1RPRF01E_TableWaterHeatingSolar"  1 0 0 1
   "Create DHWSolarSys:CF1R_SolarWtrHtgRow"     DHWSolarSys:CF1R_SolarWtrHtgRow  =
      {  if (IfValidAnd( DHWSysAssigned > 0 )==0) then  UNDEFINED
         else  CreateComp( cf1rtblRowSolarWtrHtg, Name + " cf1rRow" )  endif  }

   "Populate remaining table elements via subordinate rulelist"   DHWSolarSys:Action =
      {  if (LocalCompAssigned( CF1R_SolarWtrHtgRow ) < 1) then  UNCHANGED
         else if (RatingProgram == 3)
         then  EvalRulelist( "CF1RPRF01E_TableWaterHeatingSolar_OG300", 1 )
         else  EvalRulelist( "CF1RPRF01E_TableWaterHeatingSolar_OG100", 1 )  endif endif  }

   "Set DHWSys:PropDHWSolarSysRef - for later reporting of SSF"      DHWSys:PropDHWSolarSysRef  =
      {  if (IfValidAnd( DHWSolarSysRef:DHWSysAssigned > 0 )) then  DHWSolarSysRef  else  UNDEFINED  endif  }
END
;************************************************************************* ; SAC 6/23/20 (tic #1210)
RULELIST "CF1RPRF01E_TableWaterHeatingSolar_OG100"  1 0 0 1
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh01_WaterHeatingSystemName"                    DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh01_WaterHeatingSystemName  = {  Name  }
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh02_SolarWaterHeatingCollectorManufacturer"    DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh02_SolarWaterHeatingCollectorManufacturer   = {  EnumString( Manufacturer )  }
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh03_SolarWaterHeatingCollectorBrand"           DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh03_SolarWaterHeatingCollectorBrand          = {  EnumString( Brand )  }
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh04_SolarWaterHeatingCollectorModelNumber"     DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh04_SolarWaterHeatingCollectorModelNumber    = {  EnumString( Model )  }
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh05_SolarWaterHeatingCollectorCount"           DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh05_SolarWaterHeatingCollectorCount          = {  int( CountFlt+0.5 )  }     ; updated to report CountFlt - SAC 4/3/20
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh06_SolarWaterHeatingCollectorAngleFromNorth"  DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh06_SolarWaterHeatingCollectorAngleFromNorth = {  int( (Azimuth    * 100)+0.5 ) / 100  }
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh07_SolarWaterHeatingCollectorSlope"           DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh07_SolarWaterHeatingCollectorSlope          = {  int( (Tilt       * 100)+0.5 ) / 100  }
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh08_VolumeCapacity"                            DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh08_VolumeCapacity                           = {  int( (TankVolume * 100)+0.5 ) / 100  }
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh09_SolarWaterSystemSRCC_CertificationNumber"  DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh09_SolarWaterSystemSRCC_CertificationNumber = {  CertID  }
;   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh09_SolarWaterSystemIAPMO_FileNumber"          DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh09_SolarWaterSystemIAPMO_FileNumber  =   CertID
; can't set Tsh10_SolarWaterHeatingSavingsFraction until after Prop simulation
;   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh10_SolarWaterHeatingSavingsFraction"          DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh10_SolarWaterHeatingSavingsFraction  =   CalculatedSSF
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh11_SolarWaterHeatingCertificationType"  DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh11_SolarWaterHeatingCertificationType = {  "OG100"  }  ; RJH 8/6/20 tic #1242
END
;************************************************************************* ; SAC 6/23/20 (tic #1210)
RULELIST "CF1RPRF01E_TableWaterHeatingSolar_OG300"  1 0 0 1
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh01_WaterHeatingSystemName"                    DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh01_WaterHeatingSystemName  = {  Name  }
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh02_SolarWaterHeatingCollectorManufacturer"    DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh02_SolarWaterHeatingCollectorManufacturer   = {  "(OG-300 rated system)"  }
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh03_NotApplicableMessage"                      DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh03_NotApplicableMessage  = {  "n/a"  }  ; RJH 8/6/20 tic #1210
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh04_SolarWaterHeatingCollectorModelNumber"     DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh04_SolarWaterHeatingCollectorModelNumber    = {  SystemName  }
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh05_NotApplicableMessage"                      DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh05_NotApplicableMessage  = {  "n/a"  }  ; RJH 8/6/20 tic #1210
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh06_NotApplicableMessage"                      DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh06_NotApplicableMessage  = {  "n/a"  }  ; RJH 8/6/20 tic #1210
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh07_NotApplicableMessage"                      DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh07_NotApplicableMessage  = {  "n/a"  }  ; RJH 8/6/20 tic #1210
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh08_NotApplicableMessage"                      DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh08_NotApplicableMessage  = {  "n/a"  }  ; RJH 8/6/20 tic #1210
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh09_NotApplicableMessage"                      DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh09_NotApplicableMessage  = {  "n/a"  }  ; RJH 8/6/20 tic #1210
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh10_SolarWaterHeatingSavingsFraction"          DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh10_SolarWaterHeatingSavingsFraction  =
      {  int( (ValidOr( RatedSSF, 0 ) * 100)+0.5 ) / 100  }
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh11_SolarWaterHeatingCertificationType"  DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh11_SolarWaterHeatingCertificationType = {  "OG300"  }  ; RJH 8/6/20 tic #1242
END

;************************************************************************* ; SAC 2/4/20 (tic #1198)
RULELIST "CF1RPRF01E_TableWaterHeatingSolar_SSF"  1 0 0 1
   "Set DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh10_SolarWaterHeatingSavingsFraction"     DHWSolarSys:CF1R_SolarWtrHtgRow:Tsh10_SolarWaterHeatingSavingsFraction  =     ; SAC 6/23/20 - revisd for OG-300 solar systems (tic #1210)
      {  if (IfValidAnd( ErrID > 0 )==0 .AND. RatingProgram == 3 .AND. IfValidAnd( RatedSSF > 0 )) then  int( (RatedSSF  * 100)+0.5 ) / 100
         else if (IfValidAnd( ResProj:ResultSummary[1]:PropDHWNames_SSF[1]  = Name )) then  int( (ResProj:ResultSummary[1]:PropDHW_SSF[1]  * 100)+0.5 ) / 100
         else if (IfValidAnd( ResProj:ResultSummary[1]:PropDHWNames_SSF[2]  = Name )) then  int( (ResProj:ResultSummary[1]:PropDHW_SSF[2]  * 100)+0.5 ) / 100
         else if (IfValidAnd( ResProj:ResultSummary[1]:PropDHWNames_SSF[3]  = Name )) then  int( (ResProj:ResultSummary[1]:PropDHW_SSF[3]  * 100)+0.5 ) / 100
         else if (IfValidAnd( ResProj:ResultSummary[1]:PropDHWNames_SSF[4]  = Name )) then  int( (ResProj:ResultSummary[1]:PropDHW_SSF[4]  * 100)+0.5 ) / 100
         else if (IfValidAnd( ResProj:ResultSummary[1]:PropDHWNames_SSF[5]  = Name )) then  int( (ResProj:ResultSummary[1]:PropDHW_SSF[5]  * 100)+0.5 ) / 100
         else if (IfValidAnd( ResProj:ResultSummary[1]:PropDHWNames_SSF[6]  = Name )) then  int( (ResProj:ResultSummary[1]:PropDHW_SSF[6]  * 100)+0.5 ) / 100
         else if (IfValidAnd( ResProj:ResultSummary[1]:PropDHWNames_SSF[7]  = Name )) then  int( (ResProj:ResultSummary[1]:PropDHW_SSF[7]  * 100)+0.5 ) / 100
         else if (IfValidAnd( ResProj:ResultSummary[1]:PropDHWNames_SSF[8]  = Name )) then  int( (ResProj:ResultSummary[1]:PropDHW_SSF[8]  * 100)+0.5 ) / 100
         else if (IfValidAnd( ResProj:ResultSummary[1]:PropDHWNames_SSF[9]  = Name )) then  int( (ResProj:ResultSummary[1]:PropDHW_SSF[9]  * 100)+0.5 ) / 100
         else if (IfValidAnd( ResProj:ResultSummary[1]:PropDHWNames_SSF[10] = Name )) then  int( (ResProj:ResultSummary[1]:PropDHW_SSF[10] * 100)+0.5 ) / 100
         else  UNDEFINED  endif endif endif endif endif endif endif endif endif endif endif  }

   "Set DHWSys:CF1R_DHWSysSFRow:S06_WaterHeatingSolarFraction"    DHWSys:CF1R_DHWSysSFRow:S06_WaterHeatingSolarFraction  =
      {  if (LocalCompAssigned( PropDHWSolarSysRef ) < 1) then  UNDEFINED
         else if (LocalCompAssigned( PropDHWSolarSysRef:CF1R_SolarWtrHtgRow ) < 1) then  UNDEFINED
         else if (IfValidAnd( PropDHWSolarSysRef:CF1R_SolarWtrHtgRow:Tsh10_SolarWaterHeatingSavingsFraction > 0 )==0) then  UNDEFINED
         else  PropDHWSolarSysRef:CF1R_SolarWtrHtgRow:Tsh10_SolarWaterHeatingSavingsFraction  endif endif endif  }
; similar thing for?? ->      "Set DHWSys:CF1R_DHWSysSFRow:S06_NotApplicableMessage" DHWSys:CF1R_DHWSysSFRow:S06_NotApplicableMessage  = { if ( LocalStatus ( CF1R_DHWSysSFRow:S06_WaterHeatingSolarFraction ) < 1 ) then "n/a" else UNDEFINED endif  }

   "Set DHWSys:CF1R_DHWSysMFRow:S08_WaterHeatingSolarFraction"    DHWSys:CF1R_DHWSysMFRow:S08_WaterHeatingSolarFraction  =
      {  if (LocalCompAssigned( PropDHWSolarSysRef ) < 1) then  UNDEFINED
         else if (LocalCompAssigned( PropDHWSolarSysRef:CF1R_SolarWtrHtgRow ) < 1) then  UNDEFINED
         else if (IfValidAnd( PropDHWSolarSysRef:CF1R_SolarWtrHtgRow:Tsh10_SolarWaterHeatingSavingsFraction > 0 )==0) then  UNDEFINED
         else  PropDHWSolarSysRef:CF1R_SolarWtrHtgRow:Tsh10_SolarWaterHeatingSavingsFraction  endif endif endif  }
; similar thing for?? ->      "Set DHWSys:CF1R_DHWSysMFRow:S08_NotApplicableMessage" DHWSys:CF1R_DHWSysMFRow:S08_NotApplicableMessage  = { 

END
;************************************************************************* 

;*************************************************************************
RULELIST "CF1RPRF01E_VerifiedAltered_HVACHeating_HeatPump"  1 0 0 1
   "Create cf1rOo03 1"
      HVACSys:CF1R_OoHeatingRow[1]  = {
            if (LocalCompAssigned( CF1R_OoHeating ) .AND. NumHtPumpSystemTypes >= 1 .AND. LocalCompAssigned( HtPumpSystem[1] ))
            then  CreateComp( cf1rOo03, Name + " RowSpcCondEx-Ht1" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoHeatingRow[1]:Oo03a_ResidentialHeatingSystemName"    HVACSys:CF1R_OoHeatingRow[1]:Oo03a_ResidentialHeatingSystemName  = {  HtPumpSystem[1]:Name  }
    "Set HVACSys:CF1R_OoHeatingRow[1]:Oo03b_ResidentialHeatingSystemType" HVACSys:CF1R_OoHeatingRow[1]:Oo03b_ResidentialHeatingSystemType  = { 
                 switch(HtPumpSystem[1]:Type)
                    case  4 :  "CentralSplitHP"           ; CBECC "SplitHeatPump - Central split heat pump"                         or DuctlessSplitHP
                    case 19 :  "SmallDuctHighVelocityHP"  ; CBECC "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump" 	
                    case 10 :  "DuctlessMiniSplitHP"      ; CBECC "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump"                 
                    case 20 :  "DuctlessMultiSplitHP"     ; CBECC "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump"     or DuctedDuctlessMultiSplitHP / DuctedMultiSplitHP
                    case 21 :  "DuctlessVRF_HP"           ; CBECC "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump" 	
                    case  5 :  "CentralPackagedHP"        ; CBECC "PkgHeatPump - Central packaged heat pump"
                    case  6 :  "CentralLargePackagedHP"   ; CBECC "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
                    case  7 :  "RoomHP"                   ; CBECC "RoomHeatPump - Non-central room A/C system"
                    case 11 :  "AirToWaterHeatPump"       ; CBECC "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
                    case 12 :  "GroundSourceHeatPump"     ; CBECC "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"
                    case 22 :  "VCHP"                     ; CBECC "VCHP - Meets requirements of the VCHP compliance option"     or VCHP_IndoorUnitDucted / VCHP_IndoorUnitDuctedAndDuctless / VCHP_IndoorUnitDuctless
                    default : UNDEFINED
                 endswitch  }
    ; RJH 1/29/20 added Oo03e_EfficiencyCOP per tic#1178 and changed logic to filter out non-user input values
    "Set HVACSys:CF1R_OoHeatingRow[1]:Oo03d_EfficiencyHSPF"    HVACSys:CF1R_OoHeatingRow[1]:Oo03d_EfficiencyHSPF  = { if ( ifValidAnd( HtPumpSystem[1]:ShowHSPF > 0 ) ) then HtPumpSystem[1]:HSPF else UNDEFINED endif }
    "Set HVACSys:CF1R_OoHeatingRow[1]:Oo03e_EfficiencyCOP"    HVACSys:CF1R_OoHeatingRow[1]:Oo03e_EfficiencyCOP  = { if ( ifValidAnd( HtPumpSystem[1]:Show4717COPs > 0 ) ) then HtPumpSystem[1]:COP47 else UNDEFINED endif }
   ; Rule to set Parent for cf1rOo03
    "Set HVACSys:CF1R_OoHeatingRow[1] parent"   HVACSys:CF1R_OoHeatingRow[1]:Parent  = {  CF1R_OoHeating:Name  }

   "Create cf1rOo03 2"
      HVACSys:CF1R_OoHeatingRow[2]  = {
            if (LocalCompAssigned( CF1R_OoHeating ) .AND. NumHtPumpSystemTypes >= 1 .AND. LocalCompAssigned( HtPumpSystem[2] ))
            then  CreateComp( cf1rOo03, Name + " RowSpcCondEx-Ht2" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoHeatingRow[2]:Oo03a_ResidentialHeatingSystemName"    HVACSys:CF1R_OoHeatingRow[2]:Oo03a_ResidentialHeatingSystemName  = {  HtPumpSystem[2]:Name  }
    "Set HVACSys:CF1R_OoHeatingRow[2]:Oo03b_ResidentialHeatingSystemType" HVACSys:CF1R_OoHeatingRow[2]:Oo03b_ResidentialHeatingSystemType  = { 
                 switch(HtPumpSystem[2]:Type)
                    case  4 :  "CentralSplitHP"           ; CBECC "SplitHeatPump - Central split heat pump"                         or DuctlessSplitHP
                    case 19 :  "SmallDuctHighVelocityHP"  ; CBECC "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump" 	
                    case 10 :  "DuctlessMiniSplitHP"      ; CBECC "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump"                 
                    case 20 :  "DuctlessMultiSplitHP"     ; CBECC "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump"     or DuctedDuctlessMultiSplitHP / DuctedMultiSplitHP
                    case 21 :  "DuctlessVRF_HP"           ; CBECC "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump" 	
                    case  5 :  "CentralPackagedHP"        ; CBECC "PkgHeatPump - Central packaged heat pump"
                    case  6 :  "CentralLargePackagedHP"   ; CBECC "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
                    case  7 :  "RoomHP"                   ; CBECC "RoomHeatPump - Non-central room A/C system"
                    case 11 :  "AirToWaterHeatPump"       ; CBECC "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
                    case 12 :  "GroundSourceHeatPump"     ; CBECC "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"
                    case 22 :  "VCHP"                     ; CBECC "VCHP - Meets requirements of the VCHP compliance option"     or VCHP_IndoorUnitDucted / VCHP_IndoorUnitDuctedAndDuctless / VCHP_IndoorUnitDuctless
                    default : UNDEFINED
                 endswitch  }
    ; RJH 1/29/20 added Oo03e_EfficiencyCOP per tic#1178 and changed logic to filter out non-user input values
    "Set HVACSys:CF1R_OoHeatingRow[2]:Oo03d_EfficiencyHSPF"    HVACSys:CF1R_OoHeatingRow[2]:Oo03d_EfficiencyHSPF  = { if ( ifValidAnd( HtPumpSystem[2]:ShowHSPF > 0 ) ) then HtPumpSystem[2]:HSPF else UNDEFINED endif }
    "Set HVACSys:CF1R_OoHeatingRow[2]:Oo03e_EfficiencyCOP"    HVACSys:CF1R_OoHeatingRow[2]:Oo03e_EfficiencyCOP  = { if ( ifValidAnd( HtPumpSystem[2]:Show4717COPs > 0 ) ) then HtPumpSystem[2]:COP47 else UNDEFINED endif }
   ; Rule to set Parent for cf1rOo03
    "Set HVACSys:CF1R_OoHeatingRow[2] parent"   HVACSys:CF1R_OoHeatingRow[2]:Parent  = {  CF1R_OoHeating:Name  }

   "Create cf1rOo03 3"
      HVACSys:CF1R_OoHeatingRow[3]  = {
            if (LocalCompAssigned( CF1R_OoHeating ) .AND. NumHtPumpSystemTypes >= 1 .AND. LocalCompAssigned( HtPumpSystem[3] ))
            then  CreateComp( cf1rOo03, Name + " RowSpcCondEx-Ht3" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoHeatingRow[3]:Oo03a_ResidentialHeatingSystemName"    HVACSys:CF1R_OoHeatingRow[3]:Oo03a_ResidentialHeatingSystemName  = {  HtPumpSystem[3]:Name  }
    "Set HVACSys:CF1R_OoHeatingRow[3]:Oo03b_ResidentialHeatingSystemType" HVACSys:CF1R_OoHeatingRow[3]:Oo03b_ResidentialHeatingSystemType  = { 
                 switch(HtPumpSystem[3]:Type)
                    case  4 :  "CentralSplitHP"           ; CBECC "SplitHeatPump - Central split heat pump"                         or DuctlessSplitHP
                    case 19 :  "SmallDuctHighVelocityHP"  ; CBECC "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump" 	
                    case 10 :  "DuctlessMiniSplitHP"      ; CBECC "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump"                 
                    case 20 :  "DuctlessMultiSplitHP"     ; CBECC "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump"     or DuctedDuctlessMultiSplitHP / DuctedMultiSplitHP
                    case 21 :  "DuctlessVRF_HP"           ; CBECC "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump" 	
                    case  5 :  "CentralPackagedHP"        ; CBECC "PkgHeatPump - Central packaged heat pump"
                    case  6 :  "CentralLargePackagedHP"   ; CBECC "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
                    case  7 :  "RoomHP"                   ; CBECC "RoomHeatPump - Non-central room A/C system"
                    case 11 :  "AirToWaterHeatPump"       ; CBECC "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
                    case 12 :  "GroundSourceHeatPump"     ; CBECC "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"
                    case 22 :  "VCHP"                     ; CBECC "VCHP - Meets requirements of the VCHP compliance option"     or VCHP_IndoorUnitDucted / VCHP_IndoorUnitDuctedAndDuctless / VCHP_IndoorUnitDuctless
                    default : UNDEFINED
                 endswitch  }
    ; RJH 1/29/20 added Oo03e_EfficiencyCOP per tic#1178 and changed logic to filter out non-user input values
    "Set HVACSys:CF1R_OoHeatingRow[3]:Oo03d_EfficiencyHSPF"    HVACSys:CF1R_OoHeatingRow[3]:Oo03d_EfficiencyHSPF  = { if ( ifValidAnd( HtPumpSystem[3]:ShowHSPF > 0 ) ) then HtPumpSystem[3]:HSPF else UNDEFINED endif }
    "Set HVACSys:CF1R_OoHeatingRow[3]:Oo03e_EfficiencyCOP"    HVACSys:CF1R_OoHeatingRow[3]:Oo03e_EfficiencyCOP  = { if ( ifValidAnd( HtPumpSystem[3]:Show4717COPs > 0 ) ) then HtPumpSystem[3]:COP47 else UNDEFINED endif }
   ; Rule to set Parent for cf1rOo03
    "Set HVACSys:CF1R_OoHeatingRow[3] parent"   HVACSys:CF1R_OoHeatingRow[3]:Parent  = {  CF1R_OoHeating:Name  }

   "Create cf1rOo03 4"
      HVACSys:CF1R_OoHeatingRow[4]  = {
            if (LocalCompAssigned( CF1R_OoHeating ) .AND. NumHtPumpSystemTypes >= 1 .AND. LocalCompAssigned( HtPumpSystem[4] ))
            then  CreateComp( cf1rOo03, Name + " RowSpcCondEx-Ht4" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoHeatingRow[4]:Oo03a_ResidentialHeatingSystemName"    HVACSys:CF1R_OoHeatingRow[4]:Oo03a_ResidentialHeatingSystemName  = {  HtPumpSystem[4]:Name  }
    "Set HVACSys:CF1R_OoHeatingRow[4]:Oo03b_ResidentialHeatingSystemType" HVACSys:CF1R_OoHeatingRow[4]:Oo03b_ResidentialHeatingSystemType  = { 
                 switch(HtPumpSystem[4]:Type)
                    case  4 :  "CentralSplitHP"           ; CBECC "SplitHeatPump - Central split heat pump"                         or DuctlessSplitHP
                    case 19 :  "SmallDuctHighVelocityHP"  ; CBECC "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump" 	
                    case 10 :  "DuctlessMiniSplitHP"      ; CBECC "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump"                 
                    case 20 :  "DuctlessMultiSplitHP"     ; CBECC "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump"     or DuctedDuctlessMultiSplitHP / DuctedMultiSplitHP
                    case 21 :  "DuctlessVRF_HP"           ; CBECC "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump" 	
                    case  5 :  "CentralPackagedHP"        ; CBECC "PkgHeatPump - Central packaged heat pump"
                    case  6 :  "CentralLargePackagedHP"   ; CBECC "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
                    case  7 :  "RoomHP"                   ; CBECC "RoomHeatPump - Non-central room A/C system"
                    case 11 :  "AirToWaterHeatPump"       ; CBECC "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
                    case 12 :  "GroundSourceHeatPump"     ; CBECC "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"
                    case 22 :  "VCHP"                     ; CBECC "VCHP - Meets requirements of the VCHP compliance option"     or VCHP_IndoorUnitDucted / VCHP_IndoorUnitDuctedAndDuctless / VCHP_IndoorUnitDuctless
                    default : UNDEFINED
                 endswitch  }
    ; RJH 1/29/20 added Oo03e_EfficiencyCOP per tic#1178 and changed logic to filter out non-user input values
    "Set HVACSys:CF1R_OoHeatingRow[4]:Oo03d_EfficiencyHSPF"    HVACSys:CF1R_OoHeatingRow[4]:Oo03d_EfficiencyHSPF  = { if ( ifValidAnd( HtPumpSystem[4]:ShowHSPF > 0 ) ) then HtPumpSystem[4]:HSPF else UNDEFINED endif }
    "Set HVACSys:CF1R_OoHeatingRow[4]:Oo03e_EfficiencyCOP"    HVACSys:CF1R_OoHeatingRow[4]:Oo03e_EfficiencyCOP  = { if ( ifValidAnd( HtPumpSystem[4]:Show4717COPs > 0 ) ) then HtPumpSystem[4]:COP47 else UNDEFINED endif }
   ; Rule to set Parent for cf1rOo03
    "Set HVACSys:CF1R_OoHeatingRow[4] parent"   HVACSys:CF1R_OoHeatingRow[4]:Parent  = {  CF1R_OoHeating:Name  }

   "Create cf1rOo03 5"
      HVACSys:CF1R_OoHeatingRow[5]  = {
            if (LocalCompAssigned( CF1R_OoHeating ) .AND. NumHtPumpSystemTypes >= 1 .AND. LocalCompAssigned( HtPumpSystem[5] ))
            then  CreateComp( cf1rOo03, Name + " RowSpcCondEx-Ht5" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoHeatingRow[5]:Oo03a_ResidentialHeatingSystemName"    HVACSys:CF1R_OoHeatingRow[5]:Oo03a_ResidentialHeatingSystemName  = {  HtPumpSystem[5]:Name  }
    "Set HVACSys:CF1R_OoHeatingRow[5]:Oo03b_ResidentialHeatingSystemType" HVACSys:CF1R_OoHeatingRow[5]:Oo03b_ResidentialHeatingSystemType  = { 
                 switch(HtPumpSystem[5]:Type)
                    case  4 :  "CentralSplitHP"           ; CBECC "SplitHeatPump - Central split heat pump"                         or DuctlessSplitHP
                    case 19 :  "SmallDuctHighVelocityHP"  ; CBECC "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump" 	
                    case 10 :  "DuctlessMiniSplitHP"      ; CBECC "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump"                 
                    case 20 :  "DuctlessMultiSplitHP"     ; CBECC "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump"     or DuctedDuctlessMultiSplitHP / DuctedMultiSplitHP
                    case 21 :  "DuctlessVRF_HP"           ; CBECC "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump" 	
                    case  5 :  "CentralPackagedHP"        ; CBECC "PkgHeatPump - Central packaged heat pump"
                    case  6 :  "CentralLargePackagedHP"   ; CBECC "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
                    case  7 :  "RoomHP"                   ; CBECC "RoomHeatPump - Non-central room A/C system"
                    case 11 :  "AirToWaterHeatPump"       ; CBECC "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
                    case 12 :  "GroundSourceHeatPump"     ; CBECC "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"
                    case 22 :  "VCHP"                     ; CBECC "VCHP - Meets requirements of the VCHP compliance option"     or VCHP_IndoorUnitDucted / VCHP_IndoorUnitDuctedAndDuctless / VCHP_IndoorUnitDuctless
                    default : UNDEFINED
                 endswitch  }
    ; RJH 1/29/20 added Oo03e_EfficiencyCOP per tic#1178 and changed logic to filter out non-user input values
    "Set HVACSys:CF1R_OoHeatingRow[5]:Oo03d_EfficiencyHSPF"    HVACSys:CF1R_OoHeatingRow[5]:Oo03d_EfficiencyHSPF  = { if ( ifValidAnd( HtPumpSystem[5]:ShowHSPF > 0 ) ) then HtPumpSystem[5]:HSPF else UNDEFINED endif }
    "Set HVACSys:CF1R_OoHeatingRow[5]:Oo03e_EfficiencyCOP"    HVACSys:CF1R_OoHeatingRow[5]:Oo03e_EfficiencyCOP  = { if ( ifValidAnd( HtPumpSystem[5]:Show4717COPs > 0 ) ) then HtPumpSystem[5]:COP47 else UNDEFINED endif }
   ; Rule to set Parent for cf1rOo03
    "Set HVACSys:CF1R_OoHeatingRow[5] parent"   HVACSys:CF1R_OoHeatingRow[5]:Parent  = {  CF1R_OoHeating:Name  }

   "Create cf1rOo03 6"
      HVACSys:CF1R_OoHeatingRow[6]  = {
            if (LocalCompAssigned( CF1R_OoHeating ) .AND. NumHtPumpSystemTypes >= 1 .AND. LocalCompAssigned( HtPumpSystem[6] ))
            then  CreateComp( cf1rOo03, Name + " RowSpcCondEx-Ht6" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoHeatingRow[6]:Oo03a_ResidentialHeatingSystemName"    HVACSys:CF1R_OoHeatingRow[6]:Oo03a_ResidentialHeatingSystemName  = {  HtPumpSystem[6]:Name  }
    "Set HVACSys:CF1R_OoHeatingRow[6]:Oo03b_ResidentialHeatingSystemType" HVACSys:CF1R_OoHeatingRow[6]:Oo03b_ResidentialHeatingSystemType  = { 
                 switch(HtPumpSystem[6]:Type)
                    case  4 :  "CentralSplitHP"           ; CBECC "SplitHeatPump - Central split heat pump"                         or DuctlessSplitHP
                    case 19 :  "SmallDuctHighVelocityHP"  ; CBECC "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump" 	
                    case 10 :  "DuctlessMiniSplitHP"      ; CBECC "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump"                 
                    case 20 :  "DuctlessMultiSplitHP"     ; CBECC "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump"     or DuctedDuctlessMultiSplitHP / DuctedMultiSplitHP
                    case 21 :  "DuctlessVRF_HP"           ; CBECC "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump" 	
                    case  5 :  "CentralPackagedHP"        ; CBECC "PkgHeatPump - Central packaged heat pump"
                    case  6 :  "CentralLargePackagedHP"   ; CBECC "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
                    case  7 :  "RoomHP"                   ; CBECC "RoomHeatPump - Non-central room A/C system"
                    case 11 :  "AirToWaterHeatPump"       ; CBECC "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
                    case 12 :  "GroundSourceHeatPump"     ; CBECC "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"
                    case 22 :  "VCHP"                     ; CBECC "VCHP - Meets requirements of the VCHP compliance option"     or VCHP_IndoorUnitDucted / VCHP_IndoorUnitDuctedAndDuctless / VCHP_IndoorUnitDuctless
                    default : UNDEFINED
                 endswitch  }
    ; RJH 1/29/20 added Oo03e_EfficiencyCOP per tic#1178 and changed logic to filter out non-user input values
    "Set HVACSys:CF1R_OoHeatingRow[6]:Oo03d_EfficiencyHSPF"    HVACSys:CF1R_OoHeatingRow[6]:Oo03d_EfficiencyHSPF  = { if ( ifValidAnd( HtPumpSystem[6]:ShowHSPF > 0 ) ) then HtPumpSystem[6]:HSPF else UNDEFINED endif }
    "Set HVACSys:CF1R_OoHeatingRow[6]:Oo03e_EfficiencyCOP"    HVACSys:CF1R_OoHeatingRow[6]:Oo03e_EfficiencyCOP  = { if ( ifValidAnd( HtPumpSystem[6]:Show4717COPs > 0 ) ) then HtPumpSystem[6]:COP47 else UNDEFINED endif }
   ; Rule to set Parent for cf1rOo03
    "Set HVACSys:CF1R_OoHeatingRow[6] parent"   HVACSys:CF1R_OoHeatingRow[6]:Parent  = {  CF1R_OoHeating:Name  }

   "Create cf1rOo03 7"
      HVACSys:CF1R_OoHeatingRow[7]  = {
            if (LocalCompAssigned( CF1R_OoHeating ) .AND. NumHtPumpSystemTypes >= 1 .AND. LocalCompAssigned( HtPumpSystem[7] ))
            then  CreateComp( cf1rOo03, Name + " RowSpcCondEx-Ht7" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoHeatingRow[7]:Oo03a_ResidentialHeatingSystemName"    HVACSys:CF1R_OoHeatingRow[7]:Oo03a_ResidentialHeatingSystemName  = {  HtPumpSystem[7]:Name  }
    "Set HVACSys:CF1R_OoHeatingRow[7]:Oo03b_ResidentialHeatingSystemType" HVACSys:CF1R_OoHeatingRow[7]:Oo03b_ResidentialHeatingSystemType  = { 
                 switch(HtPumpSystem[7]:Type)
                    case  4 :  "CentralSplitHP"           ; CBECC "SplitHeatPump - Central split heat pump"                         or DuctlessSplitHP
                    case 19 :  "SmallDuctHighVelocityHP"  ; CBECC "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump" 	
                    case 10 :  "DuctlessMiniSplitHP"      ; CBECC "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump"                 
                    case 20 :  "DuctlessMultiSplitHP"     ; CBECC "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump"     or DuctedDuctlessMultiSplitHP / DuctedMultiSplitHP
                    case 21 :  "DuctlessVRF_HP"           ; CBECC "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump" 	
                    case  5 :  "CentralPackagedHP"        ; CBECC "PkgHeatPump - Central packaged heat pump"
                    case  6 :  "CentralLargePackagedHP"   ; CBECC "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
                    case  7 :  "RoomHP"                   ; CBECC "RoomHeatPump - Non-central room A/C system"
                    case 11 :  "AirToWaterHeatPump"       ; CBECC "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
                    case 12 :  "GroundSourceHeatPump"     ; CBECC "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"
                    case 22 :  "VCHP"                     ; CBECC "VCHP - Meets requirements of the VCHP compliance option"     or VCHP_IndoorUnitDucted / VCHP_IndoorUnitDuctedAndDuctless / VCHP_IndoorUnitDuctless
                    default : UNDEFINED
                 endswitch  }
    ; RJH 1/29/20 added Oo03e_EfficiencyCOP per tic#1178 and changed logic to filter out non-user input values
    "Set HVACSys:CF1R_OoHeatingRow[7]:Oo03d_EfficiencyHSPF"    HVACSys:CF1R_OoHeatingRow[7]:Oo03d_EfficiencyHSPF  = { if ( ifValidAnd( HtPumpSystem[7]:ShowHSPF > 0 ) ) then HtPumpSystem[7]:HSPF else UNDEFINED endif }
    "Set HVACSys:CF1R_OoHeatingRow[7]:Oo03e_EfficiencyCOP"    HVACSys:CF1R_OoHeatingRow[7]:Oo03e_EfficiencyCOP  = { if ( ifValidAnd( HtPumpSystem[7]:Show4717COPs > 0 ) ) then HtPumpSystem[7]:COP47 else UNDEFINED endif }
   ; Rule to set Parent for cf1rOo03
    "Set HVACSys:CF1R_OoHeatingRow[7] parent"   HVACSys:CF1R_OoHeatingRow[7]:Parent  = {  CF1R_OoHeating:Name  }

   "Create cf1rOo03 8"
      HVACSys:CF1R_OoHeatingRow[8]  = {
            if (LocalCompAssigned( CF1R_OoHeating ) .AND. NumHtPumpSystemTypes >= 1 .AND. LocalCompAssigned( HtPumpSystem[8] ))
            then  CreateComp( cf1rOo03, Name + " RowSpcCondEx-Ht8" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoHeatingRow[8]:Oo03a_ResidentialHeatingSystemName"    HVACSys:CF1R_OoHeatingRow[8]:Oo03a_ResidentialHeatingSystemName  = {  HtPumpSystem[8]:Name  }
    "Set HVACSys:CF1R_OoHeatingRow[8]:Oo03b_ResidentialHeatingSystemType" HVACSys:CF1R_OoHeatingRow[8]:Oo03b_ResidentialHeatingSystemType  = { 
                 switch(HtPumpSystem[8]:Type)
                    case  4 :  "CentralSplitHP"           ; CBECC "SplitHeatPump - Central split heat pump"                         or DuctlessSplitHP
                    case 19 :  "SmallDuctHighVelocityHP"  ; CBECC "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump" 	
                    case 10 :  "DuctlessMiniSplitHP"      ; CBECC "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump"                 
                    case 20 :  "DuctlessMultiSplitHP"     ; CBECC "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump"     or DuctedDuctlessMultiSplitHP / DuctedMultiSplitHP
                    case 21 :  "DuctlessVRF_HP"           ; CBECC "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump" 	
                    case  5 :  "CentralPackagedHP"        ; CBECC "PkgHeatPump - Central packaged heat pump"
                    case  6 :  "CentralLargePackagedHP"   ; CBECC "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
                    case  7 :  "RoomHP"                   ; CBECC "RoomHeatPump - Non-central room A/C system"
                    case 11 :  "AirToWaterHeatPump"       ; CBECC "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
                    case 12 :  "GroundSourceHeatPump"     ; CBECC "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"
                    case 22 :  "VCHP"                     ; CBECC "VCHP - Meets requirements of the VCHP compliance option"     or VCHP_IndoorUnitDucted / VCHP_IndoorUnitDuctedAndDuctless / VCHP_IndoorUnitDuctless
                    default : UNDEFINED
                 endswitch  }
    ; RJH 1/29/20 added Oo03e_EfficiencyCOP per tic#1178 and changed logic to filter out non-user input values
    "Set HVACSys:CF1R_OoHeatingRow[8]:Oo03d_EfficiencyHSPF"    HVACSys:CF1R_OoHeatingRow[8]:Oo03d_EfficiencyHSPF  = { if ( ifValidAnd( HtPumpSystem[8]:ShowHSPF > 0 ) ) then HtPumpSystem[8]:HSPF else UNDEFINED endif }
    "Set HVACSys:CF1R_OoHeatingRow[8]:Oo03e_EfficiencyCOP"    HVACSys:CF1R_OoHeatingRow[8]:Oo03e_EfficiencyCOP  = { if ( ifValidAnd( HtPumpSystem[8]:Show4717COPs > 0 ) ) then HtPumpSystem[8]:COP47 else UNDEFINED endif }
   ; Rule to set Parent for cf1rOo03
    "Set HVACSys:CF1R_OoHeatingRow[8] parent"   HVACSys:CF1R_OoHeatingRow[8]:Parent  = {  CF1R_OoHeating:Name  }

   "Create cf1rOo03 9"
      HVACSys:CF1R_OoHeatingRow[9]  = {
            if (LocalCompAssigned( CF1R_OoHeating ) .AND. NumHtPumpSystemTypes >= 1 .AND. LocalCompAssigned( HtPumpSystem[9] ))
            then  CreateComp( cf1rOo03, Name + " RowSpcCondEx-Ht9" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoHeatingRow[9]:Oo03a_ResidentialHeatingSystemName"    HVACSys:CF1R_OoHeatingRow[9]:Oo03a_ResidentialHeatingSystemName  = {  HtPumpSystem[9]:Name  }
    "Set HVACSys:CF1R_OoHeatingRow[9]:Oo03b_ResidentialHeatingSystemType" HVACSys:CF1R_OoHeatingRow[9]:Oo03b_ResidentialHeatingSystemType  = { 
                 switch(HtPumpSystem[9]:Type)
                    case  4 :  "CentralSplitHP"           ; CBECC "SplitHeatPump - Central split heat pump"                         or DuctlessSplitHP
                    case 19 :  "SmallDuctHighVelocityHP"  ; CBECC "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump" 	
                    case 10 :  "DuctlessMiniSplitHP"      ; CBECC "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump"                 
                    case 20 :  "DuctlessMultiSplitHP"     ; CBECC "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump"     or DuctedDuctlessMultiSplitHP / DuctedMultiSplitHP
                    case 21 :  "DuctlessVRF_HP"           ; CBECC "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump" 	
                    case  5 :  "CentralPackagedHP"        ; CBECC "PkgHeatPump - Central packaged heat pump"
                    case  6 :  "CentralLargePackagedHP"   ; CBECC "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
                    case  7 :  "RoomHP"                   ; CBECC "RoomHeatPump - Non-central room A/C system"
                    case 11 :  "AirToWaterHeatPump"       ; CBECC "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
                    case 12 :  "GroundSourceHeatPump"     ; CBECC "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"
                    case 22 :  "VCHP"                     ; CBECC "VCHP - Meets requirements of the VCHP compliance option"     or VCHP_IndoorUnitDucted / VCHP_IndoorUnitDuctedAndDuctless / VCHP_IndoorUnitDuctless
                    default : UNDEFINED
                 endswitch  }
    ; RJH 1/29/20 added Oo03e_EfficiencyCOP per tic#1178 and changed logic to filter out non-user input values
    "Set HVACSys:CF1R_OoHeatingRow[9]:Oo03d_EfficiencyHSPF"    HVACSys:CF1R_OoHeatingRow[9]:Oo03d_EfficiencyHSPF  = { if ( ifValidAnd( HtPumpSystem[9]:ShowHSPF > 0 ) ) then HtPumpSystem[9]:HSPF else UNDEFINED endif }
    "Set HVACSys:CF1R_OoHeatingRow[9]:Oo03e_EfficiencyCOP"    HVACSys:CF1R_OoHeatingRow[9]:Oo03e_EfficiencyCOP  = { if ( ifValidAnd( HtPumpSystem[9]:Show4717COPs > 0 ) ) then HtPumpSystem[9]:COP47 else UNDEFINED endif }
   ; Rule to set Parent for cf1rOo03
    "Set HVACSys:CF1R_OoHeatingRow[9] parent"   HVACSys:CF1R_OoHeatingRow[9]:Parent  = {  CF1R_OoHeating:Name  }

   "Create cf1rOo03 10"
      HVACSys:CF1R_OoHeatingRow[10]  = {
            if (LocalCompAssigned( CF1R_OoHeating ) .AND. NumHtPumpSystemTypes >= 1 .AND. LocalCompAssigned( HtPumpSystem[10] ))
            then  CreateComp( cf1rOo03, Name + " RowSpcCondEx-Ht10" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoHeatingRow[10]:Oo03a_ResidentialHeatingSystemName"    HVACSys:CF1R_OoHeatingRow[10]:Oo03a_ResidentialHeatingSystemName  = {  HtPumpSystem[10]:Name  }
    "Set HVACSys:CF1R_OoHeatingRow[10]:Oo03b_ResidentialHeatingSystemType" HVACSys:CF1R_OoHeatingRow[10]:Oo03b_ResidentialHeatingSystemType  = { 
                 switch(HtPumpSystem[10]:Type)
                    case  4 :  "CentralSplitHP"           ; CBECC "SplitHeatPump - Central split heat pump"                         or DuctlessSplitHP
                    case 19 :  "SmallDuctHighVelocityHP"  ; CBECC "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump" 	
                    case 10 :  "DuctlessMiniSplitHP"      ; CBECC "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump"                 
                    case 20 :  "DuctlessMultiSplitHP"     ; CBECC "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump"     or DuctedDuctlessMultiSplitHP / DuctedMultiSplitHP
                    case 21 :  "DuctlessVRF_HP"           ; CBECC "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump" 	
                    case  5 :  "CentralPackagedHP"        ; CBECC "PkgHeatPump - Central packaged heat pump"
                    case  6 :  "CentralLargePackagedHP"   ; CBECC "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
                    case  7 :  "RoomHP"                   ; CBECC "RoomHeatPump - Non-central room A/C system"
                    case 11 :  "AirToWaterHeatPump"       ; CBECC "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
                    case 12 :  "GroundSourceHeatPump"     ; CBECC "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"
                    case 22 :  "VCHP"                     ; CBECC "VCHP - Meets requirements of the VCHP compliance option"     or VCHP_IndoorUnitDucted / VCHP_IndoorUnitDuctedAndDuctless / VCHP_IndoorUnitDuctless
                    default : UNDEFINED
                 endswitch  }
    ; RJH 1/29/20 added Oo03e_EfficiencyCOP per tic#1178 and changed logic to filter out non-user input values
    "Set HVACSys:CF1R_OoHeatingRow[10]:Oo03d_EfficiencyHSPF"    HVACSys:CF1R_OoHeatingRow[10]:Oo03d_EfficiencyHSPF  = { if ( ifValidAnd( HtPumpSystem[10]:ShowHSPF > 0 ) ) then HtPumpSystem[10]:HSPF else UNDEFINED endif }
    "Set HVACSys:CF1R_OoHeatingRow[10]:Oo03e_EfficiencyCOP"    HVACSys:CF1R_OoHeatingRow[10]:Oo03e_EfficiencyCOP  = { if ( ifValidAnd( HtPumpSystem[10]:Show4717COPs > 0 ) ) then HtPumpSystem[10]:COP47 else UNDEFINED endif }
   ; Rule to set Parent for cf1rOo03
    "Set HVACSys:CF1R_OoHeatingRow[10] parent"   HVACSys:CF1R_OoHeatingRow[10]:Parent  = {  CF1R_OoHeating:Name  }
END

;*************************************************************************
RULELIST "CF1RPRF01E_VerifiedAltered_HVACHeating_Other"  1 0 0 1
   "Create cf1rOo03 1"
      HVACSys:CF1R_OoHeatingRow[1]  = {
            if (LocalCompAssigned( CF1R_OoHeating ) .AND. NumHeatSystemTypes >= 1 .AND. LocalCompAssigned( HeatSystem[1] ))
            then  CreateComp( cf1rOo03, Name + " RowSpcCondEx-Ht1" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoHeatingRow[1]:Oo03a_ResidentialHeatingSystemName"    HVACSys:CF1R_OoHeatingRow[1]:Oo03a_ResidentialHeatingSystemName  = {  HeatSystem[1]:Name  }
    "Set HVACSys:CF1R_OoHeatingRow[1]:Oo03b_ResidentialHeatingSystemType" HVACSys:CF1R_OoHeatingRow[1]:Oo03b_ResidentialHeatingSystemType  = { 
                 switch(HeatSystem[1]:Type)
                    case 1  : "CentralGasFurnace"  ; CBECC "CntrlFurnace - Fuel-fired central furnace"
                    case 2  : ""                   ; CBECC "WallFurnaceFan - Ductless fan forced wall furnace"
                    case 3  : "Boiler"             ; CBECC "Boiler - Gas or oil boiler"
                    case 8  : "Electric"           ; CBECC "Electric - All electric heating systems other than heat pump"
                    case 9  : "CombinedHydronic"   ; CBECC "CombHydro - Combined hydronic space and water heating"
                    case 14 : "GasWallFurnace"     ; CBECC "WallFurnaceGravity - Ductless gravity flowed wall furnace"
                    case 15 : "FloorFurnace"       ; CBECC "FloorFurnace - Ductless floor heating system"
                    case 16 : ""                   ; CBECC "RoomHeater - Ductless non-central space heater"
                    case 17 : "WoodHeat"           ; CBECC "WoodHeat - Wood heat meeting exceptional method criteria"
                    case 29 : ""                   ; CBECC "ElecCombHydro"
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoHeatingRow[1]:Oo03c_EfficiencyAFUE"    HVACSys:CF1R_OoHeatingRow[1]:Oo03c_EfficiencyAFUE  = {  HeatSystem[1]:AFUE  }
   ; Rule to set Parent for cf1rOo03
    "Set HVACSys:CF1R_OoHeatingRow[1] parent"   HVACSys:CF1R_OoHeatingRow[1]:Parent  = {  CF1R_OoHeating:Name  }

   "Create cf1rOo03 2"
      HVACSys:CF1R_OoHeatingRow[2]  = {
            if (LocalCompAssigned( CF1R_OoHeating ) .AND. NumHeatSystemTypes >= 1 .AND. LocalCompAssigned( HeatSystem[2] ))
            then  CreateComp( cf1rOo03, Name + " RowSpcCondEx-Ht2" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoHeatingRow[2]:Oo03a_ResidentialHeatingSystemName"    HVACSys:CF1R_OoHeatingRow[2]:Oo03a_ResidentialHeatingSystemName  = {  HeatSystem[2]:Name  }
    "Set HVACSys:CF1R_OoHeatingRow[2]:Oo03b_ResidentialHeatingSystemType" HVACSys:CF1R_OoHeatingRow[2]:Oo03b_ResidentialHeatingSystemType  = { 
                 switch(HeatSystem[2]:Type)
                    case 1  : "CentralGasFurnace"  ; CBECC "CntrlFurnace - Fuel-fired central furnace"
                    case 2  : ""                   ; CBECC "WallFurnaceFan - Ductless fan forced wall furnace"
                    case 3  : "Boiler"             ; CBECC "Boiler - Gas or oil boiler"
                    case 8  : "Electric"           ; CBECC "Electric - All electric heating systems other than heat pump"
                    case 9  : "CombinedHydronic"   ; CBECC "CombHydro - Combined hydronic space and water heating"
                    case 14 : "GasWallFurnace"     ; CBECC "WallFurnaceGravity - Ductless gravity flowed wall furnace"
                    case 15 : "FloorFurnace"       ; CBECC "FloorFurnace - Ductless floor heating system"
                    case 16 : ""                   ; CBECC "RoomHeater - Ductless non-central space heater"
                    case 17 : "WoodHeat"           ; CBECC "WoodHeat - Wood heat meeting exceptional method criteria"
                    case 29 : ""                   ; CBECC "ElecCombHydro"
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoHeatingRow[2]:Oo03c_EfficiencyAFUE"    HVACSys:CF1R_OoHeatingRow[2]:Oo03c_EfficiencyAFUE  = {  HeatSystem[2]:AFUE  }
   ; Rule to set Parent for cf1rOo03
    "Set HVACSys:CF1R_OoHeatingRow[2] parent"   HVACSys:CF1R_OoHeatingRow[2]:Parent  = {  CF1R_OoHeating:Name  }

   "Create cf1rOo03 3"
      HVACSys:CF1R_OoHeatingRow[3]  = {
            if (LocalCompAssigned( CF1R_OoHeating ) .AND. NumHeatSystemTypes >= 1 .AND. LocalCompAssigned( HeatSystem[3] ))
            then  CreateComp( cf1rOo03, Name + " RowSpcCondEx-Ht3" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoHeatingRow[3]:Oo03a_ResidentialHeatingSystemName"    HVACSys:CF1R_OoHeatingRow[3]:Oo03a_ResidentialHeatingSystemName  = {  HeatSystem[3]:Name  }
    "Set HVACSys:CF1R_OoHeatingRow[3]:Oo03b_ResidentialHeatingSystemType" HVACSys:CF1R_OoHeatingRow[3]:Oo03b_ResidentialHeatingSystemType  = { 
                 switch(HeatSystem[3]:Type)
                    case 1  : "CentralGasFurnace"  ; CBECC "CntrlFurnace - Fuel-fired central furnace"
                    case 2  : ""                   ; CBECC "WallFurnaceFan - Ductless fan forced wall furnace"
                    case 3  : "Boiler"             ; CBECC "Boiler - Gas or oil boiler"
                    case 8  : "Electric"           ; CBECC "Electric - All electric heating systems other than heat pump"
                    case 9  : "CombinedHydronic"   ; CBECC "CombHydro - Combined hydronic space and water heating"
                    case 14 : "GasWallFurnace"     ; CBECC "WallFurnaceGravity - Ductless gravity flowed wall furnace"
                    case 15 : "FloorFurnace"       ; CBECC "FloorFurnace - Ductless floor heating system"
                    case 16 : ""                   ; CBECC "RoomHeater - Ductless non-central space heater"
                    case 17 : "WoodHeat"           ; CBECC "WoodHeat - Wood heat meeting exceptional method criteria"
                    case 29 : ""                   ; CBECC "ElecCombHydro"
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoHeatingRow[3]:Oo03c_EfficiencyAFUE"    HVACSys:CF1R_OoHeatingRow[3]:Oo03c_EfficiencyAFUE  = {  HeatSystem[3]:AFUE  }
   ; Rule to set Parent for cf1rOo03
    "Set HVACSys:CF1R_OoHeatingRow[3] parent"   HVACSys:CF1R_OoHeatingRow[3]:Parent  = {  CF1R_OoHeating:Name  }

   "Create cf1rOo03 4"
      HVACSys:CF1R_OoHeatingRow[4]  = {
            if (LocalCompAssigned( CF1R_OoHeating ) .AND. NumHeatSystemTypes >= 1 .AND. LocalCompAssigned( HeatSystem[4] ))
            then  CreateComp( cf1rOo03, Name + " RowSpcCondEx-Ht4" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoHeatingRow[4]:Oo03a_ResidentialHeatingSystemName"    HVACSys:CF1R_OoHeatingRow[4]:Oo03a_ResidentialHeatingSystemName  = {  HeatSystem[4]:Name  }
    "Set HVACSys:CF1R_OoHeatingRow[4]:Oo03b_ResidentialHeatingSystemType" HVACSys:CF1R_OoHeatingRow[4]:Oo03b_ResidentialHeatingSystemType  = { 
                 switch(HeatSystem[4]:Type)
                    case 1  : "CentralGasFurnace"  ; CBECC "CntrlFurnace - Fuel-fired central furnace"
                    case 2  : ""                   ; CBECC "WallFurnaceFan - Ductless fan forced wall furnace"
                    case 3  : "Boiler"             ; CBECC "Boiler - Gas or oil boiler"
                    case 8  : "Electric"           ; CBECC "Electric - All electric heating systems other than heat pump"
                    case 9  : "CombinedHydronic"   ; CBECC "CombHydro - Combined hydronic space and water heating"
                    case 14 : "GasWallFurnace"     ; CBECC "WallFurnaceGravity - Ductless gravity flowed wall furnace"
                    case 15 : "FloorFurnace"       ; CBECC "FloorFurnace - Ductless floor heating system"
                    case 16 : ""                   ; CBECC "RoomHeater - Ductless non-central space heater"
                    case 17 : "WoodHeat"           ; CBECC "WoodHeat - Wood heat meeting exceptional method criteria"
                    case 29 : ""                   ; CBECC "ElecCombHydro"
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoHeatingRow[4]:Oo03c_EfficiencyAFUE"    HVACSys:CF1R_OoHeatingRow[4]:Oo03c_EfficiencyAFUE  = {  HeatSystem[4]:AFUE  }
   ; Rule to set Parent for cf1rOo03
    "Set HVACSys:CF1R_OoHeatingRow[4] parent"   HVACSys:CF1R_OoHeatingRow[4]:Parent  = {  CF1R_OoHeating:Name  }

   "Create cf1rOo03 5"
      HVACSys:CF1R_OoHeatingRow[5]  = {
            if (LocalCompAssigned( CF1R_OoHeating ) .AND. NumHeatSystemTypes >= 1 .AND. LocalCompAssigned( HeatSystem[5] ))
            then  CreateComp( cf1rOo03, Name + " RowSpcCondEx-Ht5" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoHeatingRow[5]:Oo03a_ResidentialHeatingSystemName"    HVACSys:CF1R_OoHeatingRow[5]:Oo03a_ResidentialHeatingSystemName  = {  HeatSystem[5]:Name  }
    "Set HVACSys:CF1R_OoHeatingRow[5]:Oo03b_ResidentialHeatingSystemType" HVACSys:CF1R_OoHeatingRow[5]:Oo03b_ResidentialHeatingSystemType  = { 
                 switch(HeatSystem[5]:Type)
                    case 1  : "CentralGasFurnace"  ; CBECC "CntrlFurnace - Fuel-fired central furnace"
                    case 2  : ""                   ; CBECC "WallFurnaceFan - Ductless fan forced wall furnace"
                    case 3  : "Boiler"             ; CBECC "Boiler - Gas or oil boiler"
                    case 8  : "Electric"           ; CBECC "Electric - All electric heating systems other than heat pump"
                    case 9  : "CombinedHydronic"   ; CBECC "CombHydro - Combined hydronic space and water heating"
                    case 14 : "GasWallFurnace"     ; CBECC "WallFurnaceGravity - Ductless gravity flowed wall furnace"
                    case 15 : "FloorFurnace"       ; CBECC "FloorFurnace - Ductless floor heating system"
                    case 16 : ""                   ; CBECC "RoomHeater - Ductless non-central space heater"
                    case 17 : "WoodHeat"           ; CBECC "WoodHeat - Wood heat meeting exceptional method criteria"
                    case 29 : ""                   ; CBECC "ElecCombHydro"
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoHeatingRow[5]:Oo03c_EfficiencyAFUE"    HVACSys:CF1R_OoHeatingRow[5]:Oo03c_EfficiencyAFUE  = {  HeatSystem[5]:AFUE  }
   ; Rule to set Parent for cf1rOo03
    "Set HVACSys:CF1R_OoHeatingRow[5] parent"   HVACSys:CF1R_OoHeatingRow[5]:Parent  = {  CF1R_OoHeating:Name  }

   "Create cf1rOo03 6"
      HVACSys:CF1R_OoHeatingRow[6]  = {
            if (LocalCompAssigned( CF1R_OoHeating ) .AND. NumHeatSystemTypes >= 1 .AND. LocalCompAssigned( HeatSystem[6] ))
            then  CreateComp( cf1rOo03, Name + " RowSpcCondEx-Ht6" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoHeatingRow[6]:Oo03a_ResidentialHeatingSystemName"    HVACSys:CF1R_OoHeatingRow[6]:Oo03a_ResidentialHeatingSystemName  = {  HeatSystem[6]:Name  }
    "Set HVACSys:CF1R_OoHeatingRow[6]:Oo03b_ResidentialHeatingSystemType" HVACSys:CF1R_OoHeatingRow[6]:Oo03b_ResidentialHeatingSystemType  = { 
                 switch(HeatSystem[6]:Type)
                    case 1  : "CentralGasFurnace"  ; CBECC "CntrlFurnace - Fuel-fired central furnace"
                    case 2  : ""                   ; CBECC "WallFurnaceFan - Ductless fan forced wall furnace"
                    case 3  : "Boiler"             ; CBECC "Boiler - Gas or oil boiler"
                    case 8  : "Electric"           ; CBECC "Electric - All electric heating systems other than heat pump"
                    case 9  : "CombinedHydronic"   ; CBECC "CombHydro - Combined hydronic space and water heating"
                    case 14 : "GasWallFurnace"     ; CBECC "WallFurnaceGravity - Ductless gravity flowed wall furnace"
                    case 15 : "FloorFurnace"       ; CBECC "FloorFurnace - Ductless floor heating system"
                    case 16 : ""                   ; CBECC "RoomHeater - Ductless non-central space heater"
                    case 17 : "WoodHeat"           ; CBECC "WoodHeat - Wood heat meeting exceptional method criteria"
                    case 29 : ""                   ; CBECC "ElecCombHydro"
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoHeatingRow[6]:Oo03c_EfficiencyAFUE"    HVACSys:CF1R_OoHeatingRow[6]:Oo03c_EfficiencyAFUE  = {  HeatSystem[6]:AFUE  }
   ; Rule to set Parent for cf1rOo03
    "Set HVACSys:CF1R_OoHeatingRow[6] parent"   HVACSys:CF1R_OoHeatingRow[6]:Parent  = {  CF1R_OoHeating:Name  }

   "Create cf1rOo03 7"
      HVACSys:CF1R_OoHeatingRow[7]  = {
            if (LocalCompAssigned( CF1R_OoHeating ) .AND. NumHeatSystemTypes >= 1 .AND. LocalCompAssigned( HeatSystem[7] ))
            then  CreateComp( cf1rOo03, Name + " RowSpcCondEx-Ht7" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoHeatingRow[7]:Oo03a_ResidentialHeatingSystemName"    HVACSys:CF1R_OoHeatingRow[7]:Oo03a_ResidentialHeatingSystemName  = {  HeatSystem[7]:Name  }
    "Set HVACSys:CF1R_OoHeatingRow[7]:Oo03b_ResidentialHeatingSystemType" HVACSys:CF1R_OoHeatingRow[7]:Oo03b_ResidentialHeatingSystemType  = { 
                 switch(HeatSystem[7]:Type)
                    case 1  : "CentralGasFurnace"  ; CBECC "CntrlFurnace - Fuel-fired central furnace"
                    case 2  : ""                   ; CBECC "WallFurnaceFan - Ductless fan forced wall furnace"
                    case 3  : "Boiler"             ; CBECC "Boiler - Gas or oil boiler"
                    case 8  : "Electric"           ; CBECC "Electric - All electric heating systems other than heat pump"
                    case 9  : "CombinedHydronic"   ; CBECC "CombHydro - Combined hydronic space and water heating"
                    case 14 : "GasWallFurnace"     ; CBECC "WallFurnaceGravity - Ductless gravity flowed wall furnace"
                    case 15 : "FloorFurnace"       ; CBECC "FloorFurnace - Ductless floor heating system"
                    case 16 : ""                   ; CBECC "RoomHeater - Ductless non-central space heater"
                    case 17 : "WoodHeat"           ; CBECC "WoodHeat - Wood heat meeting exceptional method criteria"
                    case 29 : ""                   ; CBECC "ElecCombHydro"
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoHeatingRow[7]:Oo03c_EfficiencyAFUE"    HVACSys:CF1R_OoHeatingRow[7]:Oo03c_EfficiencyAFUE  = {  HeatSystem[7]:AFUE  }
   ; Rule to set Parent for cf1rOo03
    "Set HVACSys:CF1R_OoHeatingRow[7] parent"   HVACSys:CF1R_OoHeatingRow[7]:Parent  = {  CF1R_OoHeating:Name  }

   "Create cf1rOo03 8"
      HVACSys:CF1R_OoHeatingRow[8]  = {
            if (LocalCompAssigned( CF1R_OoHeating ) .AND. NumHeatSystemTypes >= 1 .AND. LocalCompAssigned( HeatSystem[8] ))
            then  CreateComp( cf1rOo03, Name + " RowSpcCondEx-Ht8" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoHeatingRow[8]:Oo03a_ResidentialHeatingSystemName"    HVACSys:CF1R_OoHeatingRow[8]:Oo03a_ResidentialHeatingSystemName  = {  HeatSystem[8]:Name  }
    "Set HVACSys:CF1R_OoHeatingRow[8]:Oo03b_ResidentialHeatingSystemType" HVACSys:CF1R_OoHeatingRow[8]:Oo03b_ResidentialHeatingSystemType  = { 
                 switch(HeatSystem[8]:Type)
                    case 1  : "CentralGasFurnace"  ; CBECC "CntrlFurnace - Fuel-fired central furnace"
                    case 2  : ""                   ; CBECC "WallFurnaceFan - Ductless fan forced wall furnace"
                    case 3  : "Boiler"             ; CBECC "Boiler - Gas or oil boiler"
                    case 8  : "Electric"           ; CBECC "Electric - All electric heating systems other than heat pump"
                    case 9  : "CombinedHydronic"   ; CBECC "CombHydro - Combined hydronic space and water heating"
                    case 14 : "GasWallFurnace"     ; CBECC "WallFurnaceGravity - Ductless gravity flowed wall furnace"
                    case 15 : "FloorFurnace"       ; CBECC "FloorFurnace - Ductless floor heating system"
                    case 16 : ""                   ; CBECC "RoomHeater - Ductless non-central space heater"
                    case 17 : "WoodHeat"           ; CBECC "WoodHeat - Wood heat meeting exceptional method criteria"
                    case 29 : ""                   ; CBECC "ElecCombHydro"
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoHeatingRow[8]:Oo03c_EfficiencyAFUE"    HVACSys:CF1R_OoHeatingRow[8]:Oo03c_EfficiencyAFUE  = {  HeatSystem[8]:AFUE  }
   ; Rule to set Parent for cf1rOo03
    "Set HVACSys:CF1R_OoHeatingRow[8] parent"   HVACSys:CF1R_OoHeatingRow[8]:Parent  = {  CF1R_OoHeating:Name  }

   "Create cf1rOo03 9"
      HVACSys:CF1R_OoHeatingRow[9]  = {
            if (LocalCompAssigned( CF1R_OoHeating ) .AND. NumHeatSystemTypes >= 1 .AND. LocalCompAssigned( HeatSystem[9] ))
            then  CreateComp( cf1rOo03, Name + " RowSpcCondEx-Ht9" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoHeatingRow[9]:Oo03a_ResidentialHeatingSystemName"    HVACSys:CF1R_OoHeatingRow[9]:Oo03a_ResidentialHeatingSystemName  = {  HeatSystem[9]:Name  }
    "Set HVACSys:CF1R_OoHeatingRow[9]:Oo03b_ResidentialHeatingSystemType" HVACSys:CF1R_OoHeatingRow[9]:Oo03b_ResidentialHeatingSystemType  = { 
                 switch(HeatSystem[9]:Type)
                    case 1  : "CentralGasFurnace"  ; CBECC "CntrlFurnace - Fuel-fired central furnace"
                    case 2  : ""                   ; CBECC "WallFurnaceFan - Ductless fan forced wall furnace"
                    case 3  : "Boiler"             ; CBECC "Boiler - Gas or oil boiler"
                    case 8  : "Electric"           ; CBECC "Electric - All electric heating systems other than heat pump"
                    case 9  : "CombinedHydronic"   ; CBECC "CombHydro - Combined hydronic space and water heating"
                    case 14 : "GasWallFurnace"     ; CBECC "WallFurnaceGravity - Ductless gravity flowed wall furnace"
                    case 15 : "FloorFurnace"       ; CBECC "FloorFurnace - Ductless floor heating system"
                    case 16 : ""                   ; CBECC "RoomHeater - Ductless non-central space heater"
                    case 17 : "WoodHeat"           ; CBECC "WoodHeat - Wood heat meeting exceptional method criteria"
                    case 29 : ""                   ; CBECC "ElecCombHydro"
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoHeatingRow[9]:Oo03c_EfficiencyAFUE"    HVACSys:CF1R_OoHeatingRow[9]:Oo03c_EfficiencyAFUE  = {  HeatSystem[9]:AFUE  }
   ; Rule to set Parent for cf1rOo03
    "Set HVACSys:CF1R_OoHeatingRow[9] parent"   HVACSys:CF1R_OoHeatingRow[9]:Parent  = {  CF1R_OoHeating:Name  }

   "Create cf1rOo03 10"
      HVACSys:CF1R_OoHeatingRow[10]  = {
            if (LocalCompAssigned( CF1R_OoHeating ) .AND. NumHeatSystemTypes >= 1 .AND. LocalCompAssigned( HeatSystem[10] ))
            then  CreateComp( cf1rOo03, Name + " RowSpcCondEx-Ht10" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoHeatingRow[10]:Oo03a_ResidentialHeatingSystemName"    HVACSys:CF1R_OoHeatingRow[10]:Oo03a_ResidentialHeatingSystemName  = {  HeatSystem[10]:Name  }
    "Set HVACSys:CF1R_OoHeatingRow[10]:Oo03b_ResidentialHeatingSystemType" HVACSys:CF1R_OoHeatingRow[10]:Oo03b_ResidentialHeatingSystemType  = { 
                 switch(HeatSystem[10]:Type)
                    case 1  : "CentralGasFurnace"  ; CBECC "CntrlFurnace - Fuel-fired central furnace"
                    case 2  : ""                   ; CBECC "WallFurnaceFan - Ductless fan forced wall furnace"
                    case 3  : "Boiler"             ; CBECC "Boiler - Gas or oil boiler"
                    case 8  : "Electric"           ; CBECC "Electric - All electric heating systems other than heat pump"
                    case 9  : "CombinedHydronic"   ; CBECC "CombHydro - Combined hydronic space and water heating"
                    case 14 : "GasWallFurnace"     ; CBECC "WallFurnaceGravity - Ductless gravity flowed wall furnace"
                    case 15 : "FloorFurnace"       ; CBECC "FloorFurnace - Ductless floor heating system"
                    case 16 : ""                   ; CBECC "RoomHeater - Ductless non-central space heater"
                    case 17 : "WoodHeat"           ; CBECC "WoodHeat - Wood heat meeting exceptional method criteria"
                    case 29 : ""                   ; CBECC "ElecCombHydro"
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoHeatingRow[10]:Oo03c_EfficiencyAFUE"    HVACSys:CF1R_OoHeatingRow[10]:Oo03c_EfficiencyAFUE  = {  HeatSystem[10]:AFUE  }
   ; Rule to set Parent for cf1rOo03
    "Set HVACSys:CF1R_OoHeatingRow[10] parent"   HVACSys:CF1R_OoHeatingRow[10]:Parent  = {  CF1R_OoHeating:Name  }
END
;*************************************************************************


;*************************************************************************
RULELIST "CF1RPRF01E_VerifiedAltered_HVACCooling_HeatPump"  1 0 0 1
   "Create cf1rOo04 1"
      HVACSys:CF1R_OoCoolingRow[1]  = {
            if (LocalCompAssigned( CF1R_OoCooling ) .AND. NumHtPumpSystemTypes >= 1 .AND. LocalCompAssigned( HtPumpSystem[1] ))
            then  CreateComp( cf1rOo04, Name + " RowSpcCondEx-Cl1" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[1]:Oo04a_ResidentialCoolingSystemName"    HVACSys:CF1R_OoCoolingRow[1]:Oo04a_ResidentialCoolingSystemName  = {  HtPumpSystem[1]:Name  }
    "Set HVACSys:CF1R_OoCoolingRow[1]:Oo04b_ResidentialCoolingSystemType"    HVACSys:CF1R_OoCoolingRow[1]:Oo04b_ResidentialCoolingSystemType  = {  
                 switch(HtPumpSystem[1]:Type)
                    case  4 :  "CentralSplitHP"           ; CBECC "SplitHeatPump - Central split heat pump"                         or DuctlessSplitHP
                    case 19 :  "SmallDuctHighVelocityHP"  ; CBECC "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump" 	
                    case 10 :  "DuctlessMiniSplitHP"      ; CBECC "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump"                 
                    case 20 :  "DuctlessMultiSplitHP"     ; CBECC "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump"     or DuctedDuctlessMultiSplitHP / DuctedMultiSplitHP
                    case 21 :  "DuctlessVRF_HP"           ; CBECC "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump" 	
                    case  5 :  "CentralPackagedHP"        ; CBECC "PkgHeatPump - Central packaged heat pump"
                    case  6 :  "CentralLargePackagedHP"   ; CBECC "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
                    case  7 :  "RoomHP"                   ; CBECC "RoomHeatPump - Non-central room A/C system"
                    case 11 :  "AirToWaterHeatPump"       ; CBECC "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
                    case 12 :  "GroundSourceHeatPump"     ; CBECC "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"
                    case 22 :  "VCHP"                     ; CBECC "VCHP - Meets requirements of the VCHP compliance option"     or VCHP_IndoorUnitDucted / VCHP_IndoorUnitDuctedAndDuctless / VCHP_IndoorUnitDuctless
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoCoolingRow[1]:Oo04c_EfficiencyEER"    HVACSys:CF1R_OoCoolingRow[1]:Oo04c_EfficiencyEER  = {  
            if (IfValidAnd( HtPumpSystem[1]:EER  > 0 )) then  HtPumpSystem[1]:EER   else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[1]:Oo04d_EfficiencySEER"    HVACSys:CF1R_OoCoolingRow[1]:Oo04d_EfficiencySEER  = {  
            if (IfValidAnd( HtPumpSystem[1]:SEER  > 0 )) then  HtPumpSystem[1]:SEER   else  UNDEFINED  endif  }
   ; Rule to set Parent for cf1rOo04
    "Set HVACSys:CF1R_OoCoolingRow[1] parent"   HVACSys:CF1R_OoCoolingRow[1]:Parent  = {  CF1R_OoCooling:Name  }

   "Create cf1rOo04 2"
      HVACSys:CF1R_OoCoolingRow[2]  = {
            if (LocalCompAssigned( CF1R_OoCooling ) .AND. NumHtPumpSystemTypes >= 1 .AND. LocalCompAssigned( HtPumpSystem[2] ))
            then  CreateComp( cf1rOo04, Name + " RowSpcCondEx-Cl2" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[2]:Oo04a_ResidentialCoolingSystemName"    HVACSys:CF1R_OoCoolingRow[2]:Oo04a_ResidentialCoolingSystemName  = {  HtPumpSystem[2]:Name  }
    "Set HVACSys:CF1R_OoCoolingRow[2]:Oo04b_ResidentialCoolingSystemType"    HVACSys:CF1R_OoCoolingRow[2]:Oo04b_ResidentialCoolingSystemType  = {  
                 switch(HtPumpSystem[2]:Type)
                    case  4 :  "CentralSplitHP"           ; CBECC "SplitHeatPump - Central split heat pump"                         or DuctlessSplitHP
                    case 19 :  "SmallDuctHighVelocityHP"  ; CBECC "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump" 	
                    case 10 :  "DuctlessMiniSplitHP"      ; CBECC "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump"                 
                    case 20 :  "DuctlessMultiSplitHP"     ; CBECC "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump"     or DuctedDuctlessMultiSplitHP / DuctedMultiSplitHP
                    case 21 :  "DuctlessVRF_HP"           ; CBECC "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump" 	
                    case  5 :  "CentralPackagedHP"        ; CBECC "PkgHeatPump - Central packaged heat pump"
                    case  6 :  "CentralLargePackagedHP"   ; CBECC "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
                    case  7 :  "RoomHP"                   ; CBECC "RoomHeatPump - Non-central room A/C system"
                    case 11 :  "AirToWaterHeatPump"       ; CBECC "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
                    case 12 :  "GroundSourceHeatPump"     ; CBECC "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"
                    case 22 :  "VCHP"                     ; CBECC "VCHP - Meets requirements of the VCHP compliance option"     or VCHP_IndoorUnitDucted / VCHP_IndoorUnitDuctedAndDuctless / VCHP_IndoorUnitDuctless
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoCoolingRow[2]:Oo04c_EfficiencyEER"    HVACSys:CF1R_OoCoolingRow[2]:Oo04c_EfficiencyEER  = {  
            if (IfValidAnd( HtPumpSystem[2]:EER  > 0 )) then  HtPumpSystem[2]:EER   else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[2]:Oo04d_EfficiencySEER"    HVACSys:CF1R_OoCoolingRow[2]:Oo04d_EfficiencySEER  = {  
            if (IfValidAnd( HtPumpSystem[2]:SEER  > 0 )) then  HtPumpSystem[2]:SEER   else  UNDEFINED  endif  }
   ; Rule to set Parent for cf1rOo04
    "Set HVACSys:CF1R_OoCoolingRow[2] parent"   HVACSys:CF1R_OoCoolingRow[2]:Parent  = {  CF1R_OoCooling:Name  }

   "Create cf1rOo04 3"
      HVACSys:CF1R_OoCoolingRow[3]  = {
            if (LocalCompAssigned( CF1R_OoCooling ) .AND. NumHtPumpSystemTypes >= 1 .AND. LocalCompAssigned( HtPumpSystem[3] ))
            then  CreateComp( cf1rOo04, Name + " RowSpcCondEx-Cl3" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[3]:Oo04a_ResidentialCoolingSystemName"    HVACSys:CF1R_OoCoolingRow[3]:Oo04a_ResidentialCoolingSystemName  = {  HtPumpSystem[3]:Name  }
    "Set HVACSys:CF1R_OoCoolingRow[3]:Oo04b_ResidentialCoolingSystemType"    HVACSys:CF1R_OoCoolingRow[3]:Oo04b_ResidentialCoolingSystemType  = {  
                 switch(HtPumpSystem[3]:Type)
                    case  4 :  "CentralSplitHP"           ; CBECC "SplitHeatPump - Central split heat pump"                         or DuctlessSplitHP
                    case 19 :  "SmallDuctHighVelocityHP"  ; CBECC "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump" 	
                    case 10 :  "DuctlessMiniSplitHP"      ; CBECC "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump"                 
                    case 20 :  "DuctlessMultiSplitHP"     ; CBECC "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump"     or DuctedDuctlessMultiSplitHP / DuctedMultiSplitHP
                    case 21 :  "DuctlessVRF_HP"           ; CBECC "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump" 	
                    case  5 :  "CentralPackagedHP"        ; CBECC "PkgHeatPump - Central packaged heat pump"
                    case  6 :  "CentralLargePackagedHP"   ; CBECC "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
                    case  7 :  "RoomHP"                   ; CBECC "RoomHeatPump - Non-central room A/C system"
                    case 11 :  "AirToWaterHeatPump"       ; CBECC "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
                    case 12 :  "GroundSourceHeatPump"     ; CBECC "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"
                    case 22 :  "VCHP"                     ; CBECC "VCHP - Meets requirements of the VCHP compliance option"     or VCHP_IndoorUnitDucted / VCHP_IndoorUnitDuctedAndDuctless / VCHP_IndoorUnitDuctless
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoCoolingRow[3]:Oo04c_EfficiencyEER"    HVACSys:CF1R_OoCoolingRow[3]:Oo04c_EfficiencyEER  = {  
            if (IfValidAnd( HtPumpSystem[3]:EER  > 0 )) then  HtPumpSystem[3]:EER   else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[3]:Oo04d_EfficiencySEER"    HVACSys:CF1R_OoCoolingRow[3]:Oo04d_EfficiencySEER  = {  
            if (IfValidAnd( HtPumpSystem[3]:SEER  > 0 )) then  HtPumpSystem[3]:SEER   else  UNDEFINED  endif  }
   ; Rule to set Parent for cf1rOo04
    "Set HVACSys:CF1R_OoCoolingRow[3] parent"   HVACSys:CF1R_OoCoolingRow[3]:Parent  = {  CF1R_OoCooling:Name  }

   "Create cf1rOo04 4"
      HVACSys:CF1R_OoCoolingRow[4]  = {
            if (LocalCompAssigned( CF1R_OoCooling ) .AND. NumHtPumpSystemTypes >= 1 .AND. LocalCompAssigned( HtPumpSystem[4] ))
            then  CreateComp( cf1rOo04, Name + " RowSpcCondEx-Cl4" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[4]:Oo04a_ResidentialCoolingSystemName"    HVACSys:CF1R_OoCoolingRow[4]:Oo04a_ResidentialCoolingSystemName  = {  HtPumpSystem[4]:Name  }
    "Set HVACSys:CF1R_OoCoolingRow[4]:Oo04b_ResidentialCoolingSystemType"    HVACSys:CF1R_OoCoolingRow[4]:Oo04b_ResidentialCoolingSystemType  = {  
                 switch(HtPumpSystem[4]:Type)
                    case  4 :  "CentralSplitHP"           ; CBECC "SplitHeatPump - Central split heat pump"                         or DuctlessSplitHP
                    case 19 :  "SmallDuctHighVelocityHP"  ; CBECC "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump" 	
                    case 10 :  "DuctlessMiniSplitHP"      ; CBECC "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump"                 
                    case 20 :  "DuctlessMultiSplitHP"     ; CBECC "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump"     or DuctedDuctlessMultiSplitHP / DuctedMultiSplitHP
                    case 21 :  "DuctlessVRF_HP"           ; CBECC "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump" 	
                    case  5 :  "CentralPackagedHP"        ; CBECC "PkgHeatPump - Central packaged heat pump"
                    case  6 :  "CentralLargePackagedHP"   ; CBECC "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
                    case  7 :  "RoomHP"                   ; CBECC "RoomHeatPump - Non-central room A/C system"
                    case 11 :  "AirToWaterHeatPump"       ; CBECC "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
                    case 12 :  "GroundSourceHeatPump"     ; CBECC "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"
                    case 22 :  "VCHP"                     ; CBECC "VCHP - Meets requirements of the VCHP compliance option"     or VCHP_IndoorUnitDucted / VCHP_IndoorUnitDuctedAndDuctless / VCHP_IndoorUnitDuctless
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoCoolingRow[4]:Oo04c_EfficiencyEER"    HVACSys:CF1R_OoCoolingRow[4]:Oo04c_EfficiencyEER  = {  
            if (IfValidAnd( HtPumpSystem[4]:EER  > 0 )) then  HtPumpSystem[4]:EER   else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[4]:Oo04d_EfficiencySEER"    HVACSys:CF1R_OoCoolingRow[4]:Oo04d_EfficiencySEER  = {  
            if (IfValidAnd( HtPumpSystem[4]:SEER  > 0 )) then  HtPumpSystem[4]:SEER   else  UNDEFINED  endif  }
   ; Rule to set Parent for cf1rOo04
    "Set HVACSys:CF1R_OoCoolingRow[4] parent"   HVACSys:CF1R_OoCoolingRow[4]:Parent  = {  CF1R_OoCooling:Name  }

   "Create cf1rOo04 5"
      HVACSys:CF1R_OoCoolingRow[5]  = {
            if (LocalCompAssigned( CF1R_OoCooling ) .AND. NumHtPumpSystemTypes >= 1 .AND. LocalCompAssigned( HtPumpSystem[5] ))
            then  CreateComp( cf1rOo04, Name + " RowSpcCondEx-Cl5" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[5]:Oo04a_ResidentialCoolingSystemName"    HVACSys:CF1R_OoCoolingRow[5]:Oo04a_ResidentialCoolingSystemName  = {  HtPumpSystem[5]:Name  }
    "Set HVACSys:CF1R_OoCoolingRow[5]:Oo04b_ResidentialCoolingSystemType"    HVACSys:CF1R_OoCoolingRow[5]:Oo04b_ResidentialCoolingSystemType  = {  
                 switch(HtPumpSystem[5]:Type)
                    case  4 :  "CentralSplitHP"           ; CBECC "SplitHeatPump - Central split heat pump"                         or DuctlessSplitHP
                    case 19 :  "SmallDuctHighVelocityHP"  ; CBECC "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump" 	
                    case 10 :  "DuctlessMiniSplitHP"      ; CBECC "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump"                 
                    case 20 :  "DuctlessMultiSplitHP"     ; CBECC "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump"     or DuctedDuctlessMultiSplitHP / DuctedMultiSplitHP
                    case 21 :  "DuctlessVRF_HP"           ; CBECC "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump" 	
                    case  5 :  "CentralPackagedHP"        ; CBECC "PkgHeatPump - Central packaged heat pump"
                    case  6 :  "CentralLargePackagedHP"   ; CBECC "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
                    case  7 :  "RoomHP"                   ; CBECC "RoomHeatPump - Non-central room A/C system"
                    case 11 :  "AirToWaterHeatPump"       ; CBECC "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
                    case 12 :  "GroundSourceHeatPump"     ; CBECC "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"
                    case 22 :  "VCHP"                     ; CBECC "VCHP - Meets requirements of the VCHP compliance option"     or VCHP_IndoorUnitDucted / VCHP_IndoorUnitDuctedAndDuctless / VCHP_IndoorUnitDuctless
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoCoolingRow[5]:Oo04c_EfficiencyEER"    HVACSys:CF1R_OoCoolingRow[5]:Oo04c_EfficiencyEER  = {  
            if (IfValidAnd( HtPumpSystem[5]:EER  > 0 )) then  HtPumpSystem[5]:EER   else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[5]:Oo04d_EfficiencySEER"    HVACSys:CF1R_OoCoolingRow[5]:Oo04d_EfficiencySEER  = {  
            if (IfValidAnd( HtPumpSystem[5]:SEER  > 0 )) then  HtPumpSystem[5]:SEER   else  UNDEFINED  endif  }
   ; Rule to set Parent for cf1rOo04
    "Set HVACSys:CF1R_OoCoolingRow[5] parent"   HVACSys:CF1R_OoCoolingRow[5]:Parent  = {  CF1R_OoCooling:Name  }

   "Create cf1rOo04 6"
      HVACSys:CF1R_OoCoolingRow[6]  = {
            if (LocalCompAssigned( CF1R_OoCooling ) .AND. NumHtPumpSystemTypes >= 1 .AND. LocalCompAssigned( HtPumpSystem[6] ))
            then  CreateComp( cf1rOo04, Name + " RowSpcCondEx-Cl6" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[6]:Oo04a_ResidentialCoolingSystemName"    HVACSys:CF1R_OoCoolingRow[6]:Oo04a_ResidentialCoolingSystemName  = {  HtPumpSystem[6]:Name  }
    "Set HVACSys:CF1R_OoCoolingRow[6]:Oo04b_ResidentialCoolingSystemType"    HVACSys:CF1R_OoCoolingRow[6]:Oo04b_ResidentialCoolingSystemType  = {  
                 switch(HtPumpSystem[6]:Type)
                    case  4 :  "CentralSplitHP"           ; CBECC "SplitHeatPump - Central split heat pump"                         or DuctlessSplitHP
                    case 19 :  "SmallDuctHighVelocityHP"  ; CBECC "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump" 	
                    case 10 :  "DuctlessMiniSplitHP"      ; CBECC "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump"                 
                    case 20 :  "DuctlessMultiSplitHP"     ; CBECC "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump"     or DuctedDuctlessMultiSplitHP / DuctedMultiSplitHP
                    case 21 :  "DuctlessVRF_HP"           ; CBECC "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump" 	
                    case  5 :  "CentralPackagedHP"        ; CBECC "PkgHeatPump - Central packaged heat pump"
                    case  6 :  "CentralLargePackagedHP"   ; CBECC "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
                    case  7 :  "RoomHP"                   ; CBECC "RoomHeatPump - Non-central room A/C system"
                    case 11 :  "AirToWaterHeatPump"       ; CBECC "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
                    case 12 :  "GroundSourceHeatPump"     ; CBECC "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"
                    case 22 :  "VCHP"                     ; CBECC "VCHP - Meets requirements of the VCHP compliance option"     or VCHP_IndoorUnitDucted / VCHP_IndoorUnitDuctedAndDuctless / VCHP_IndoorUnitDuctless
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoCoolingRow[6]:Oo04c_EfficiencyEER"    HVACSys:CF1R_OoCoolingRow[6]:Oo04c_EfficiencyEER  = {  
            if (IfValidAnd( HtPumpSystem[6]:EER  > 0 )) then  HtPumpSystem[6]:EER   else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[6]:Oo04d_EfficiencySEER"    HVACSys:CF1R_OoCoolingRow[6]:Oo04d_EfficiencySEER  = {  
            if (IfValidAnd( HtPumpSystem[6]:SEER  > 0 )) then  HtPumpSystem[6]:SEER   else  UNDEFINED  endif  }
   ; Rule to set Parent for cf1rOo04
    "Set HVACSys:CF1R_OoCoolingRow[6] parent"   HVACSys:CF1R_OoCoolingRow[6]:Parent  = {  CF1R_OoCooling:Name  }

   "Create cf1rOo04 7"
      HVACSys:CF1R_OoCoolingRow[7]  = {
            if (LocalCompAssigned( CF1R_OoCooling ) .AND. NumHtPumpSystemTypes >= 1 .AND. LocalCompAssigned( HtPumpSystem[7] ))
            then  CreateComp( cf1rOo04, Name + " RowSpcCondEx-Cl7" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[7]:Oo04a_ResidentialCoolingSystemName"    HVACSys:CF1R_OoCoolingRow[7]:Oo04a_ResidentialCoolingSystemName  = {  HtPumpSystem[7]:Name  }
    "Set HVACSys:CF1R_OoCoolingRow[7]:Oo04b_ResidentialCoolingSystemType"    HVACSys:CF1R_OoCoolingRow[7]:Oo04b_ResidentialCoolingSystemType  = {  
                 switch(HtPumpSystem[7]:Type)
                    case  4 :  "CentralSplitHP"           ; CBECC "SplitHeatPump - Central split heat pump"                         or DuctlessSplitHP
                    case 19 :  "SmallDuctHighVelocityHP"  ; CBECC "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump" 	
                    case 10 :  "DuctlessMiniSplitHP"      ; CBECC "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump"                 
                    case 20 :  "DuctlessMultiSplitHP"     ; CBECC "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump"     or DuctedDuctlessMultiSplitHP / DuctedMultiSplitHP
                    case 21 :  "DuctlessVRF_HP"           ; CBECC "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump" 	
                    case  5 :  "CentralPackagedHP"        ; CBECC "PkgHeatPump - Central packaged heat pump"
                    case  6 :  "CentralLargePackagedHP"   ; CBECC "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
                    case  7 :  "RoomHP"                   ; CBECC "RoomHeatPump - Non-central room A/C system"
                    case 11 :  "AirToWaterHeatPump"       ; CBECC "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
                    case 12 :  "GroundSourceHeatPump"     ; CBECC "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"
                    case 22 :  "VCHP"                     ; CBECC "VCHP - Meets requirements of the VCHP compliance option"     or VCHP_IndoorUnitDucted / VCHP_IndoorUnitDuctedAndDuctless / VCHP_IndoorUnitDuctless
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoCoolingRow[7]:Oo04c_EfficiencyEER"    HVACSys:CF1R_OoCoolingRow[7]:Oo04c_EfficiencyEER  = {  
            if (IfValidAnd( HtPumpSystem[7]:EER  > 0 )) then  HtPumpSystem[7]:EER   else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[7]:Oo04d_EfficiencySEER"    HVACSys:CF1R_OoCoolingRow[7]:Oo04d_EfficiencySEER  = {  
            if (IfValidAnd( HtPumpSystem[7]:SEER  > 0 )) then  HtPumpSystem[7]:SEER   else  UNDEFINED  endif  }
   ; Rule to set Parent for cf1rOo04
    "Set HVACSys:CF1R_OoCoolingRow[7] parent"   HVACSys:CF1R_OoCoolingRow[7]:Parent  = {  CF1R_OoCooling:Name  }

   "Create cf1rOo04 8"
      HVACSys:CF1R_OoCoolingRow[8]  = {
            if (LocalCompAssigned( CF1R_OoCooling ) .AND. NumHtPumpSystemTypes >= 1 .AND. LocalCompAssigned( HtPumpSystem[8] ))
            then  CreateComp( cf1rOo04, Name + " RowSpcCondEx-Cl8" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[8]:Oo04a_ResidentialCoolingSystemName"    HVACSys:CF1R_OoCoolingRow[8]:Oo04a_ResidentialCoolingSystemName  = {  HtPumpSystem[8]:Name  }
    "Set HVACSys:CF1R_OoCoolingRow[8]:Oo04b_ResidentialCoolingSystemType"    HVACSys:CF1R_OoCoolingRow[8]:Oo04b_ResidentialCoolingSystemType  = {  
                 switch(HtPumpSystem[8]:Type)
                    case  4 :  "CentralSplitHP"           ; CBECC "SplitHeatPump - Central split heat pump"                         or DuctlessSplitHP
                    case 19 :  "SmallDuctHighVelocityHP"  ; CBECC "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump" 	
                    case 10 :  "DuctlessMiniSplitHP"      ; CBECC "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump"                 
                    case 20 :  "DuctlessMultiSplitHP"     ; CBECC "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump"     or DuctedDuctlessMultiSplitHP / DuctedMultiSplitHP
                    case 21 :  "DuctlessVRF_HP"           ; CBECC "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump" 	
                    case  5 :  "CentralPackagedHP"        ; CBECC "PkgHeatPump - Central packaged heat pump"
                    case  6 :  "CentralLargePackagedHP"   ; CBECC "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
                    case  7 :  "RoomHP"                   ; CBECC "RoomHeatPump - Non-central room A/C system"
                    case 11 :  "AirToWaterHeatPump"       ; CBECC "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
                    case 12 :  "GroundSourceHeatPump"     ; CBECC "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"
                    case 22 :  "VCHP"                     ; CBECC "VCHP - Meets requirements of the VCHP compliance option"     or VCHP_IndoorUnitDucted / VCHP_IndoorUnitDuctedAndDuctless / VCHP_IndoorUnitDuctless
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoCoolingRow[8]:Oo04c_EfficiencyEER"    HVACSys:CF1R_OoCoolingRow[8]:Oo04c_EfficiencyEER  = {  
            if (IfValidAnd( HtPumpSystem[8]:EER  > 0 )) then  HtPumpSystem[8]:EER   else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[8]:Oo04d_EfficiencySEER"    HVACSys:CF1R_OoCoolingRow[8]:Oo04d_EfficiencySEER  = {  
            if (IfValidAnd( HtPumpSystem[8]:SEER  > 0 )) then  HtPumpSystem[8]:SEER   else  UNDEFINED  endif  }
   ; Rule to set Parent for cf1rOo04
    "Set HVACSys:CF1R_OoCoolingRow[8] parent"   HVACSys:CF1R_OoCoolingRow[8]:Parent  = {  CF1R_OoCooling:Name  }

   "Create cf1rOo04 9"
      HVACSys:CF1R_OoCoolingRow[9]  = {
            if (LocalCompAssigned( CF1R_OoCooling ) .AND. NumHtPumpSystemTypes >= 1 .AND. LocalCompAssigned( HtPumpSystem[9] ))
            then  CreateComp( cf1rOo04, Name + " RowSpcCondEx-Cl9" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[9]:Oo04a_ResidentialCoolingSystemName"    HVACSys:CF1R_OoCoolingRow[9]:Oo04a_ResidentialCoolingSystemName  = {  HtPumpSystem[9]:Name  }
    "Set HVACSys:CF1R_OoCoolingRow[9]:Oo04b_ResidentialCoolingSystemType"    HVACSys:CF1R_OoCoolingRow[9]:Oo04b_ResidentialCoolingSystemType  = {  
                 switch(HtPumpSystem[9]:Type)
                    case  4 :  "CentralSplitHP"           ; CBECC "SplitHeatPump - Central split heat pump"                         or DuctlessSplitHP
                    case 19 :  "SmallDuctHighVelocityHP"  ; CBECC "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump" 	
                    case 10 :  "DuctlessMiniSplitHP"      ; CBECC "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump"                 
                    case 20 :  "DuctlessMultiSplitHP"     ; CBECC "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump"     or DuctedDuctlessMultiSplitHP / DuctedMultiSplitHP
                    case 21 :  "DuctlessVRF_HP"           ; CBECC "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump" 	
                    case  5 :  "CentralPackagedHP"        ; CBECC "PkgHeatPump - Central packaged heat pump"
                    case  6 :  "CentralLargePackagedHP"   ; CBECC "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
                    case  7 :  "RoomHP"                   ; CBECC "RoomHeatPump - Non-central room A/C system"
                    case 11 :  "AirToWaterHeatPump"       ; CBECC "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
                    case 12 :  "GroundSourceHeatPump"     ; CBECC "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"
                    case 22 :  "VCHP"                     ; CBECC "VCHP - Meets requirements of the VCHP compliance option"     or VCHP_IndoorUnitDucted / VCHP_IndoorUnitDuctedAndDuctless / VCHP_IndoorUnitDuctless
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoCoolingRow[9]:Oo04c_EfficiencyEER"    HVACSys:CF1R_OoCoolingRow[9]:Oo04c_EfficiencyEER  = {  
            if (IfValidAnd( HtPumpSystem[9]:EER  > 0 )) then  HtPumpSystem[9]:EER   else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[9]:Oo04d_EfficiencySEER"    HVACSys:CF1R_OoCoolingRow[9]:Oo04d_EfficiencySEER  = {  
            if (IfValidAnd( HtPumpSystem[9]:SEER  > 0 )) then  HtPumpSystem[9]:SEER   else  UNDEFINED  endif  }
   ; Rule to set Parent for cf1rOo04
    "Set HVACSys:CF1R_OoCoolingRow[9] parent"   HVACSys:CF1R_OoCoolingRow[9]:Parent  = {  CF1R_OoCooling:Name  }

   "Create cf1rOo04 10"
      HVACSys:CF1R_OoCoolingRow[10]  = {
            if (LocalCompAssigned( CF1R_OoCooling ) .AND. NumHtPumpSystemTypes >= 1 .AND. LocalCompAssigned( HtPumpSystem[10] ))
            then  CreateComp( cf1rOo04, Name + " RowSpcCondEx-Cl10" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[10]:Oo04a_ResidentialCoolingSystemName"    HVACSys:CF1R_OoCoolingRow[10]:Oo04a_ResidentialCoolingSystemName  = {  HtPumpSystem[10]:Name  }
    "Set HVACSys:CF1R_OoCoolingRow[10]:Oo04b_ResidentialCoolingSystemType"    HVACSys:CF1R_OoCoolingRow[10]:Oo04b_ResidentialCoolingSystemType  = {  
                 switch(HtPumpSystem[10]:Type)
                    case  4 :  "CentralSplitHP"           ; CBECC "SplitHeatPump - Central split heat pump"                         or DuctlessSplitHP
                    case 19 :  "SmallDuctHighVelocityHP"  ; CBECC "SDHVSplitHeatPump - Small duct, high velocity, central split heat pump" 	
                    case 10 :  "DuctlessMiniSplitHP"      ; CBECC "DuctlessMiniSplitHeatPump - Ductless mini-split heat pump"                 
                    case 20 :  "DuctlessMultiSplitHP"     ; CBECC "DuctlessMultiSplitHeatPump - Ductless multi-split heat pump"     or DuctedDuctlessMultiSplitHP / DuctedMultiSplitHP
                    case 21 :  "DuctlessVRF_HP"           ; CBECC "DuctlessVRFHeatPump - Ductless variable refrigerant flow (VRF) heat pump" 	
                    case  5 :  "CentralPackagedHP"        ; CBECC "PkgHeatPump - Central packaged heat pump"
                    case  6 :  "CentralLargePackagedHP"   ; CBECC "LrgPkgHeatPump - Large (>= 65 kBtuh) packaged unit"
                    case  7 :  "RoomHP"                   ; CBECC "RoomHeatPump - Non-central room A/C system"
                    case 11 :  "AirToWaterHeatPump"       ; CBECC "AirToWaterHeatPump - Air to water heat pump (able to heat DHW)"
                    case 12 :  "GroundSourceHeatPump"     ; CBECC "GroundSourceHeatPump - Ground source heat pump (able to heat DHW)"
                    case 22 :  "VCHP"                     ; CBECC "VCHP - Meets requirements of the VCHP compliance option"     or VCHP_IndoorUnitDucted / VCHP_IndoorUnitDuctedAndDuctless / VCHP_IndoorUnitDuctless
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoCoolingRow[10]:Oo04c_EfficiencyEER"    HVACSys:CF1R_OoCoolingRow[10]:Oo04c_EfficiencyEER  = {  
            if (IfValidAnd( HtPumpSystem[10]:EER  > 0 )) then  HtPumpSystem[10]:EER   else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[10]:Oo04d_EfficiencySEER"    HVACSys:CF1R_OoCoolingRow[10]:Oo04d_EfficiencySEER  = {  
            if (IfValidAnd( HtPumpSystem[10]:SEER  > 0 )) then  HtPumpSystem[10]:SEER   else  UNDEFINED  endif  }
   ; Rule to set Parent for cf1rOo04
    "Set HVACSys:CF1R_OoCoolingRow[10] parent"   HVACSys:CF1R_OoCoolingRow[10]:Parent  = {  CF1R_OoCooling:Name  }
END

;*************************************************************************
RULELIST "CF1RPRF01E_VerifiedAltered_HVACCooling_Other"  1 0 0 1
   "Create cf1rOo04 1"
      HVACSys:CF1R_OoCoolingRow[1]  = {
            if (LocalCompAssigned( CF1R_OoCooling ) .AND. NumCoolSystemTypes >= 1 .AND. LocalCompAssigned( CoolSystem[1] ))
            then  CreateComp( cf1rOo04, Name + " RowSpcCondEx-Cl1" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[1]:Oo04a_ResidentialCoolingSystemName"    HVACSys:CF1R_OoCoolingRow[1]:Oo04a_ResidentialCoolingSystemName  = {  CoolSystem[1]:Name  }
    "Set HVACSys:CF1R_OoCoolingRow[1]:Oo04b_ResidentialCoolingSystemType"    HVACSys:CF1R_OoCoolingRow[1]:Oo04b_ResidentialCoolingSystemType  = {  
                 switch(CoolSystem[1]:Type)
                    case 1  : "NoCooling"                      ; CBECC "NoCooling"
                    case 2  : "CentralSplitAC"                 ; CBECC "SplitAirCond"
                    case 3  : "CentralPackagedAC"              ; CBECC "PkgAirCond"
                    case 4  : "CentralLargePackagedAC"         ; CBECC "LrgPkgAirCond"
                    case 5  : ""                               ; CBECC "RoomAirCond"
                    case 11 : "EvaporativeDirect"              ; CBECC "EvapDirect"
                    case 12 : "EvaporativeIndirectDirect"      ; CBECC "EvapIndirDirect"
                    case 13 : "EvaporativeIndirect"            ; CBECC "EvapIndirect"
                    case 14 : "EvaporativelyCooledCondenser"   ; CBECC "EvapCondenser"
                    case 16 : "DuctlessSplitAC"                ; CBECC "DuctlessMiniSplitAirCond"
                    case 18 : "SmallDuctHighVelocityAC"        ; CBECC "SDHVSplitAirCond"
                    case 20 : "DuctlessMultiSplitAC"           ; CBECC "DuctlessMultiSplitAirCond"
                    case 21 : "DuctlessVRF_AC"                 ; CBECC "DuctlessVRFAirCond"
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoCoolingRow[1]:Oo04c_EfficiencyEER"    HVACSys:CF1R_OoCoolingRow[1]:Oo04c_EfficiencyEER  = {  
            if (IfValidAnd( CoolSystem[1]:EER  > 0 )) then  CoolSystem[1]:EER   else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[1]:Oo04d_EfficiencySEER"    HVACSys:CF1R_OoCoolingRow[1]:Oo04d_EfficiencySEER  = {  
            if (IfValidAnd( CoolSystem[1]:SEER  > 0 )) then  CoolSystem[1]:SEER   else  UNDEFINED  endif  }
   ; Rule to set Parent for cf1rOo04
    "Set HVACSys:CF1R_OoCoolingRow[1] parent"   HVACSys:CF1R_OoCoolingRow[1]:Parent  = {  CF1R_OoCooling:Name  }

   "Create cf1rOo04 2"
      HVACSys:CF1R_OoCoolingRow[2]  = {
            if (LocalCompAssigned( CF1R_OoCooling ) .AND. NumCoolSystemTypes >= 1 .AND. LocalCompAssigned( CoolSystem[2] ))
            then  CreateComp( cf1rOo04, Name + " RowSpcCondEx-Cl2" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[2]:Oo04a_ResidentialCoolingSystemName"    HVACSys:CF1R_OoCoolingRow[2]:Oo04a_ResidentialCoolingSystemName  = {  CoolSystem[2]:Name  }
    "Set HVACSys:CF1R_OoCoolingRow[2]:Oo04b_ResidentialCoolingSystemType"    HVACSys:CF1R_OoCoolingRow[2]:Oo04b_ResidentialCoolingSystemType  = {  
                 switch(CoolSystem[2]:Type)
                    case 1  : "NoCooling"                      ; CBECC "NoCooling"
                    case 2  : "CentralSplitAC"                 ; CBECC "SplitAirCond"
                    case 3  : "CentralPackagedAC"              ; CBECC "PkgAirCond"
                    case 4  : "CentralLargePackagedAC"         ; CBECC "LrgPkgAirCond"
                    case 5  : ""                               ; CBECC "RoomAirCond"
                    case 11 : "EvaporativeDirect"              ; CBECC "EvapDirect"
                    case 12 : "EvaporativeIndirectDirect"      ; CBECC "EvapIndirDirect"
                    case 13 : "EvaporativeIndirect"            ; CBECC "EvapIndirect"
                    case 14 : "EvaporativelyCooledCondenser"   ; CBECC "EvapCondenser"
                    case 16 : "DuctlessSplitAC"                ; CBECC "DuctlessMiniSplitAirCond"
                    case 18 : "SmallDuctHighVelocityAC"        ; CBECC "SDHVSplitAirCond"
                    case 20 : "DuctlessMultiSplitAC"           ; CBECC "DuctlessMultiSplitAirCond"
                    case 21 : "DuctlessVRF_AC"                 ; CBECC "DuctlessVRFAirCond"
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoCoolingRow[2]:Oo04c_EfficiencyEER"    HVACSys:CF1R_OoCoolingRow[2]:Oo04c_EfficiencyEER  = {  
            if (IfValidAnd( CoolSystem[2]:EER  > 0 )) then  CoolSystem[2]:EER   else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[2]:Oo04d_EfficiencySEER"    HVACSys:CF1R_OoCoolingRow[2]:Oo04d_EfficiencySEER  = {  
            if (IfValidAnd( CoolSystem[2]:SEER  > 0 )) then  CoolSystem[2]:SEER   else  UNDEFINED  endif  }
   ; Rule to set Parent for cf1rOo04
    "Set HVACSys:CF1R_OoCoolingRow[2] parent"   HVACSys:CF1R_OoCoolingRow[2]:Parent  = {  CF1R_OoCooling:Name  }

   "Create cf1rOo04 3"
      HVACSys:CF1R_OoCoolingRow[3]  = {
            if (LocalCompAssigned( CF1R_OoCooling ) .AND. NumCoolSystemTypes >= 1 .AND. LocalCompAssigned( CoolSystem[3] ))
            then  CreateComp( cf1rOo04, Name + " RowSpcCondEx-Cl3" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[3]:Oo04a_ResidentialCoolingSystemName"    HVACSys:CF1R_OoCoolingRow[3]:Oo04a_ResidentialCoolingSystemName  = {  CoolSystem[3]:Name  }
    "Set HVACSys:CF1R_OoCoolingRow[3]:Oo04b_ResidentialCoolingSystemType"    HVACSys:CF1R_OoCoolingRow[3]:Oo04b_ResidentialCoolingSystemType  = {  
                 switch(CoolSystem[3]:Type)
                    case 1  : "NoCooling"                      ; CBECC "NoCooling"
                    case 2  : "CentralSplitAC"                 ; CBECC "SplitAirCond"
                    case 3  : "CentralPackagedAC"              ; CBECC "PkgAirCond"
                    case 4  : "CentralLargePackagedAC"         ; CBECC "LrgPkgAirCond"
                    case 5  : ""                               ; CBECC "RoomAirCond"
                    case 11 : "EvaporativeDirect"              ; CBECC "EvapDirect"
                    case 12 : "EvaporativeIndirectDirect"      ; CBECC "EvapIndirDirect"
                    case 13 : "EvaporativeIndirect"            ; CBECC "EvapIndirect"
                    case 14 : "EvaporativelyCooledCondenser"   ; CBECC "EvapCondenser"
                    case 16 : "DuctlessSplitAC"                ; CBECC "DuctlessMiniSplitAirCond"
                    case 18 : "SmallDuctHighVelocityAC"        ; CBECC "SDHVSplitAirCond"
                    case 20 : "DuctlessMultiSplitAC"           ; CBECC "DuctlessMultiSplitAirCond"
                    case 21 : "DuctlessVRF_AC"                 ; CBECC "DuctlessVRFAirCond"
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoCoolingRow[3]:Oo04c_EfficiencyEER"    HVACSys:CF1R_OoCoolingRow[3]:Oo04c_EfficiencyEER  = {  
            if (IfValidAnd( CoolSystem[3]:EER  > 0 )) then  CoolSystem[3]:EER   else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[3]:Oo04d_EfficiencySEER"    HVACSys:CF1R_OoCoolingRow[3]:Oo04d_EfficiencySEER  = {  
            if (IfValidAnd( CoolSystem[3]:SEER  > 0 )) then  CoolSystem[3]:SEER   else  UNDEFINED  endif  }
   ; Rule to set Parent for cf1rOo04
    "Set HVACSys:CF1R_OoCoolingRow[3] parent"   HVACSys:CF1R_OoCoolingRow[3]:Parent  = {  CF1R_OoCooling:Name  }

   "Create cf1rOo04 4"
      HVACSys:CF1R_OoCoolingRow[4]  = {
            if (LocalCompAssigned( CF1R_OoCooling ) .AND. NumCoolSystemTypes >= 1 .AND. LocalCompAssigned( CoolSystem[4] ))
            then  CreateComp( cf1rOo04, Name + " RowSpcCondEx-Cl4" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[4]:Oo04a_ResidentialCoolingSystemName"    HVACSys:CF1R_OoCoolingRow[4]:Oo04a_ResidentialCoolingSystemName  = {  CoolSystem[4]:Name  }
    "Set HVACSys:CF1R_OoCoolingRow[4]:Oo04b_ResidentialCoolingSystemType"    HVACSys:CF1R_OoCoolingRow[4]:Oo04b_ResidentialCoolingSystemType  = {  
                 switch(CoolSystem[4]:Type)
                    case 1  : "NoCooling"                      ; CBECC "NoCooling"
                    case 2  : "CentralSplitAC"                 ; CBECC "SplitAirCond"
                    case 3  : "CentralPackagedAC"              ; CBECC "PkgAirCond"
                    case 4  : "CentralLargePackagedAC"         ; CBECC "LrgPkgAirCond"
                    case 5  : ""                               ; CBECC "RoomAirCond"
                    case 11 : "EvaporativeDirect"              ; CBECC "EvapDirect"
                    case 12 : "EvaporativeIndirectDirect"      ; CBECC "EvapIndirDirect"
                    case 13 : "EvaporativeIndirect"            ; CBECC "EvapIndirect"
                    case 14 : "EvaporativelyCooledCondenser"   ; CBECC "EvapCondenser"
                    case 16 : "DuctlessSplitAC"                ; CBECC "DuctlessMiniSplitAirCond"
                    case 18 : "SmallDuctHighVelocityAC"        ; CBECC "SDHVSplitAirCond"
                    case 20 : "DuctlessMultiSplitAC"           ; CBECC "DuctlessMultiSplitAirCond"
                    case 21 : "DuctlessVRF_AC"                 ; CBECC "DuctlessVRFAirCond"
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoCoolingRow[4]:Oo04c_EfficiencyEER"    HVACSys:CF1R_OoCoolingRow[4]:Oo04c_EfficiencyEER  = {  
            if (IfValidAnd( CoolSystem[4]:EER  > 0 )) then  CoolSystem[4]:EER   else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[4]:Oo04d_EfficiencySEER"    HVACSys:CF1R_OoCoolingRow[4]:Oo04d_EfficiencySEER  = {  
            if (IfValidAnd( CoolSystem[4]:SEER  > 0 )) then  CoolSystem[4]:SEER   else  UNDEFINED  endif  }
   ; Rule to set Parent for cf1rOo04
    "Set HVACSys:CF1R_OoCoolingRow[4] parent"   HVACSys:CF1R_OoCoolingRow[4]:Parent  = {  CF1R_OoCooling:Name  }

   "Create cf1rOo04 5"
      HVACSys:CF1R_OoCoolingRow[5]  = {
            if (LocalCompAssigned( CF1R_OoCooling ) .AND. NumCoolSystemTypes >= 1 .AND. LocalCompAssigned( CoolSystem[5] ))
            then  CreateComp( cf1rOo04, Name + " RowSpcCondEx-Cl5" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[5]:Oo04a_ResidentialCoolingSystemName"    HVACSys:CF1R_OoCoolingRow[5]:Oo04a_ResidentialCoolingSystemName  = {  CoolSystem[5]:Name  }
    "Set HVACSys:CF1R_OoCoolingRow[5]:Oo04b_ResidentialCoolingSystemType"    HVACSys:CF1R_OoCoolingRow[5]:Oo04b_ResidentialCoolingSystemType  = {  
                 switch(CoolSystem[5]:Type)
                    case 1  : "NoCooling"                      ; CBECC "NoCooling"
                    case 2  : "CentralSplitAC"                 ; CBECC "SplitAirCond"
                    case 3  : "CentralPackagedAC"              ; CBECC "PkgAirCond"
                    case 4  : "CentralLargePackagedAC"         ; CBECC "LrgPkgAirCond"
                    case 5  : ""                               ; CBECC "RoomAirCond"
                    case 11 : "EvaporativeDirect"              ; CBECC "EvapDirect"
                    case 12 : "EvaporativeIndirectDirect"      ; CBECC "EvapIndirDirect"
                    case 13 : "EvaporativeIndirect"            ; CBECC "EvapIndirect"
                    case 14 : "EvaporativelyCooledCondenser"   ; CBECC "EvapCondenser"
                    case 16 : "DuctlessSplitAC"                ; CBECC "DuctlessMiniSplitAirCond"
                    case 18 : "SmallDuctHighVelocityAC"        ; CBECC "SDHVSplitAirCond"
                    case 20 : "DuctlessMultiSplitAC"           ; CBECC "DuctlessMultiSplitAirCond"
                    case 21 : "DuctlessVRF_AC"                 ; CBECC "DuctlessVRFAirCond"
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoCoolingRow[5]:Oo04c_EfficiencyEER"    HVACSys:CF1R_OoCoolingRow[5]:Oo04c_EfficiencyEER  = {  
            if (IfValidAnd( CoolSystem[5]:EER  > 0 )) then  CoolSystem[5]:EER   else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[5]:Oo04d_EfficiencySEER"    HVACSys:CF1R_OoCoolingRow[5]:Oo04d_EfficiencySEER  = {  
            if (IfValidAnd( CoolSystem[5]:SEER  > 0 )) then  CoolSystem[5]:SEER   else  UNDEFINED  endif  }
   ; Rule to set Parent for cf1rOo04
    "Set HVACSys:CF1R_OoCoolingRow[5] parent"   HVACSys:CF1R_OoCoolingRow[5]:Parent  = {  CF1R_OoCooling:Name  }

   "Create cf1rOo04 6"
      HVACSys:CF1R_OoCoolingRow[6]  = {
            if (LocalCompAssigned( CF1R_OoCooling ) .AND. NumCoolSystemTypes >= 1 .AND. LocalCompAssigned( CoolSystem[6] ))
            then  CreateComp( cf1rOo04, Name + " RowSpcCondEx-Cl6" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[6]:Oo04a_ResidentialCoolingSystemName"    HVACSys:CF1R_OoCoolingRow[6]:Oo04a_ResidentialCoolingSystemName  = {  CoolSystem[6]:Name  }
    "Set HVACSys:CF1R_OoCoolingRow[6]:Oo04b_ResidentialCoolingSystemType"    HVACSys:CF1R_OoCoolingRow[6]:Oo04b_ResidentialCoolingSystemType  = {  
                 switch(CoolSystem[6]:Type)
                    case 1  : "NoCooling"                      ; CBECC "NoCooling"
                    case 2  : "CentralSplitAC"                 ; CBECC "SplitAirCond"
                    case 3  : "CentralPackagedAC"              ; CBECC "PkgAirCond"
                    case 4  : "CentralLargePackagedAC"         ; CBECC "LrgPkgAirCond"
                    case 5  : ""                               ; CBECC "RoomAirCond"
                    case 11 : "EvaporativeDirect"              ; CBECC "EvapDirect"
                    case 12 : "EvaporativeIndirectDirect"      ; CBECC "EvapIndirDirect"
                    case 13 : "EvaporativeIndirect"            ; CBECC "EvapIndirect"
                    case 14 : "EvaporativelyCooledCondenser"   ; CBECC "EvapCondenser"
                    case 16 : "DuctlessSplitAC"                ; CBECC "DuctlessMiniSplitAirCond"
                    case 18 : "SmallDuctHighVelocityAC"        ; CBECC "SDHVSplitAirCond"
                    case 20 : "DuctlessMultiSplitAC"           ; CBECC "DuctlessMultiSplitAirCond"
                    case 21 : "DuctlessVRF_AC"                 ; CBECC "DuctlessVRFAirCond"
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoCoolingRow[6]:Oo04c_EfficiencyEER"    HVACSys:CF1R_OoCoolingRow[6]:Oo04c_EfficiencyEER  = {  
            if (IfValidAnd( CoolSystem[6]:EER  > 0 )) then  CoolSystem[6]:EER   else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[6]:Oo04d_EfficiencySEER"    HVACSys:CF1R_OoCoolingRow[6]:Oo04d_EfficiencySEER  = {  
            if (IfValidAnd( CoolSystem[6]:SEER  > 0 )) then  CoolSystem[6]:SEER   else  UNDEFINED  endif  }
   ; Rule to set Parent for cf1rOo04
    "Set HVACSys:CF1R_OoCoolingRow[6] parent"   HVACSys:CF1R_OoCoolingRow[6]:Parent  = {  CF1R_OoCooling:Name  }

   "Create cf1rOo04 7"
      HVACSys:CF1R_OoCoolingRow[7]  = {
            if (LocalCompAssigned( CF1R_OoCooling ) .AND. NumCoolSystemTypes >= 1 .AND. LocalCompAssigned( CoolSystem[7] ))
            then  CreateComp( cf1rOo04, Name + " RowSpcCondEx-Cl7" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[7]:Oo04a_ResidentialCoolingSystemName"    HVACSys:CF1R_OoCoolingRow[7]:Oo04a_ResidentialCoolingSystemName  = {  CoolSystem[7]:Name  }
    "Set HVACSys:CF1R_OoCoolingRow[7]:Oo04b_ResidentialCoolingSystemType"    HVACSys:CF1R_OoCoolingRow[7]:Oo04b_ResidentialCoolingSystemType  = {  
                 switch(CoolSystem[7]:Type)
                    case 1  : "NoCooling"                      ; CBECC "NoCooling"
                    case 2  : "CentralSplitAC"                 ; CBECC "SplitAirCond"
                    case 3  : "CentralPackagedAC"              ; CBECC "PkgAirCond"
                    case 4  : "CentralLargePackagedAC"         ; CBECC "LrgPkgAirCond"
                    case 5  : ""                               ; CBECC "RoomAirCond"
                    case 11 : "EvaporativeDirect"              ; CBECC "EvapDirect"
                    case 12 : "EvaporativeIndirectDirect"      ; CBECC "EvapIndirDirect"
                    case 13 : "EvaporativeIndirect"            ; CBECC "EvapIndirect"
                    case 14 : "EvaporativelyCooledCondenser"   ; CBECC "EvapCondenser"
                    case 16 : "DuctlessSplitAC"                ; CBECC "DuctlessMiniSplitAirCond"
                    case 18 : "SmallDuctHighVelocityAC"        ; CBECC "SDHVSplitAirCond"
                    case 20 : "DuctlessMultiSplitAC"           ; CBECC "DuctlessMultiSplitAirCond"
                    case 21 : "DuctlessVRF_AC"                 ; CBECC "DuctlessVRFAirCond"
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoCoolingRow[7]:Oo04c_EfficiencyEER"    HVACSys:CF1R_OoCoolingRow[7]:Oo04c_EfficiencyEER  = {  
            if (IfValidAnd( CoolSystem[7]:EER  > 0 )) then  CoolSystem[7]:EER   else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[7]:Oo04d_EfficiencySEER"    HVACSys:CF1R_OoCoolingRow[7]:Oo04d_EfficiencySEER  = {  
            if (IfValidAnd( CoolSystem[7]:SEER  > 0 )) then  CoolSystem[7]:SEER   else  UNDEFINED  endif  }
   ; Rule to set Parent for cf1rOo04
    "Set HVACSys:CF1R_OoCoolingRow[7] parent"   HVACSys:CF1R_OoCoolingRow[7]:Parent  = {  CF1R_OoCooling:Name  }

   "Create cf1rOo04 8"
      HVACSys:CF1R_OoCoolingRow[8]  = {
            if (LocalCompAssigned( CF1R_OoCooling ) .AND. NumCoolSystemTypes >= 1 .AND. LocalCompAssigned( CoolSystem[8] ))
            then  CreateComp( cf1rOo04, Name + " RowSpcCondEx-Cl8" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[8]:Oo04a_ResidentialCoolingSystemName"    HVACSys:CF1R_OoCoolingRow[8]:Oo04a_ResidentialCoolingSystemName  = {  CoolSystem[8]:Name  }
    "Set HVACSys:CF1R_OoCoolingRow[8]:Oo04b_ResidentialCoolingSystemType"    HVACSys:CF1R_OoCoolingRow[8]:Oo04b_ResidentialCoolingSystemType  = {  
                 switch(CoolSystem[8]:Type)
                    case 1  : "NoCooling"                      ; CBECC "NoCooling"
                    case 2  : "CentralSplitAC"                 ; CBECC "SplitAirCond"
                    case 3  : "CentralPackagedAC"              ; CBECC "PkgAirCond"
                    case 4  : "CentralLargePackagedAC"         ; CBECC "LrgPkgAirCond"
                    case 5  : ""                               ; CBECC "RoomAirCond"
                    case 11 : "EvaporativeDirect"              ; CBECC "EvapDirect"
                    case 12 : "EvaporativeIndirectDirect"      ; CBECC "EvapIndirDirect"
                    case 13 : "EvaporativeIndirect"            ; CBECC "EvapIndirect"
                    case 14 : "EvaporativelyCooledCondenser"   ; CBECC "EvapCondenser"
                    case 16 : "DuctlessSplitAC"                ; CBECC "DuctlessMiniSplitAirCond"
                    case 18 : "SmallDuctHighVelocityAC"        ; CBECC "SDHVSplitAirCond"
                    case 20 : "DuctlessMultiSplitAC"           ; CBECC "DuctlessMultiSplitAirCond"
                    case 21 : "DuctlessVRF_AC"                 ; CBECC "DuctlessVRFAirCond"
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoCoolingRow[8]:Oo04c_EfficiencyEER"    HVACSys:CF1R_OoCoolingRow[8]:Oo04c_EfficiencyEER  = {  
            if (IfValidAnd( CoolSystem[8]:EER  > 0 )) then  CoolSystem[8]:EER   else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[8]:Oo04d_EfficiencySEER"    HVACSys:CF1R_OoCoolingRow[8]:Oo04d_EfficiencySEER  = {  
            if (IfValidAnd( CoolSystem[8]:SEER  > 0 )) then  CoolSystem[8]:SEER   else  UNDEFINED  endif  }
   ; Rule to set Parent for cf1rOo04
    "Set HVACSys:CF1R_OoCoolingRow[8] parent"   HVACSys:CF1R_OoCoolingRow[8]:Parent  = {  CF1R_OoCooling:Name  }

   "Create cf1rOo04 9"
      HVACSys:CF1R_OoCoolingRow[9]  = {
            if (LocalCompAssigned( CF1R_OoCooling ) .AND. NumCoolSystemTypes >= 1 .AND. LocalCompAssigned( CoolSystem[9] ))
            then  CreateComp( cf1rOo04, Name + " RowSpcCondEx-Cl9" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[9]:Oo04a_ResidentialCoolingSystemName"    HVACSys:CF1R_OoCoolingRow[9]:Oo04a_ResidentialCoolingSystemName  = {  CoolSystem[9]:Name  }
    "Set HVACSys:CF1R_OoCoolingRow[9]:Oo04b_ResidentialCoolingSystemType"    HVACSys:CF1R_OoCoolingRow[9]:Oo04b_ResidentialCoolingSystemType  = {  
                 switch(CoolSystem[9]:Type)
                    case 1  : "NoCooling"                      ; CBECC "NoCooling"
                    case 2  : "CentralSplitAC"                 ; CBECC "SplitAirCond"
                    case 3  : "CentralPackagedAC"              ; CBECC "PkgAirCond"
                    case 4  : "CentralLargePackagedAC"         ; CBECC "LrgPkgAirCond"
                    case 5  : ""                               ; CBECC "RoomAirCond"
                    case 11 : "EvaporativeDirect"              ; CBECC "EvapDirect"
                    case 12 : "EvaporativeIndirectDirect"      ; CBECC "EvapIndirDirect"
                    case 13 : "EvaporativeIndirect"            ; CBECC "EvapIndirect"
                    case 14 : "EvaporativelyCooledCondenser"   ; CBECC "EvapCondenser"
                    case 16 : "DuctlessSplitAC"                ; CBECC "DuctlessMiniSplitAirCond"
                    case 18 : "SmallDuctHighVelocityAC"        ; CBECC "SDHVSplitAirCond"
                    case 20 : "DuctlessMultiSplitAC"           ; CBECC "DuctlessMultiSplitAirCond"
                    case 21 : "DuctlessVRF_AC"                 ; CBECC "DuctlessVRFAirCond"
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoCoolingRow[9]:Oo04c_EfficiencyEER"    HVACSys:CF1R_OoCoolingRow[9]:Oo04c_EfficiencyEER  = {  
            if (IfValidAnd( CoolSystem[9]:EER  > 0 )) then  CoolSystem[9]:EER   else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[9]:Oo04d_EfficiencySEER"    HVACSys:CF1R_OoCoolingRow[9]:Oo04d_EfficiencySEER  = {  
            if (IfValidAnd( CoolSystem[9]:SEER  > 0 )) then  CoolSystem[9]:SEER   else  UNDEFINED  endif  }
   ; Rule to set Parent for cf1rOo04
    "Set HVACSys:CF1R_OoCoolingRow[9] parent"   HVACSys:CF1R_OoCoolingRow[9]:Parent  = {  CF1R_OoCooling:Name  }

   "Create cf1rOo04 10"
      HVACSys:CF1R_OoCoolingRow[10]  = {
            if (LocalCompAssigned( CF1R_OoCooling ) .AND. NumCoolSystemTypes >= 1 .AND. LocalCompAssigned( CoolSystem[10] ))
            then  CreateComp( cf1rOo04, Name + " RowSpcCondEx-Cl10" )
            else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[10]:Oo04a_ResidentialCoolingSystemName"    HVACSys:CF1R_OoCoolingRow[10]:Oo04a_ResidentialCoolingSystemName  = {  CoolSystem[10]:Name  }
    "Set HVACSys:CF1R_OoCoolingRow[10]:Oo04b_ResidentialCoolingSystemType"    HVACSys:CF1R_OoCoolingRow[10]:Oo04b_ResidentialCoolingSystemType  = {  
                 switch(CoolSystem[10]:Type)
                    case 1  : "NoCooling"                      ; CBECC "NoCooling"
                    case 2  : "CentralSplitAC"                 ; CBECC "SplitAirCond"
                    case 3  : "CentralPackagedAC"              ; CBECC "PkgAirCond"
                    case 4  : "CentralLargePackagedAC"         ; CBECC "LrgPkgAirCond"
                    case 5  : ""                               ; CBECC "RoomAirCond"
                    case 11 : "EvaporativeDirect"              ; CBECC "EvapDirect"
                    case 12 : "EvaporativeIndirectDirect"      ; CBECC "EvapIndirDirect"
                    case 13 : "EvaporativeIndirect"            ; CBECC "EvapIndirect"
                    case 14 : "EvaporativelyCooledCondenser"   ; CBECC "EvapCondenser"
                    case 16 : "DuctlessSplitAC"                ; CBECC "DuctlessMiniSplitAirCond"
                    case 18 : "SmallDuctHighVelocityAC"        ; CBECC "SDHVSplitAirCond"
                    case 20 : "DuctlessMultiSplitAC"           ; CBECC "DuctlessMultiSplitAirCond"
                    case 21 : "DuctlessVRF_AC"                 ; CBECC "DuctlessVRFAirCond"
                    default : UNDEFINED
                 endswitch  }
    "Set HVACSys:CF1R_OoCoolingRow[10]:Oo04c_EfficiencyEER"    HVACSys:CF1R_OoCoolingRow[10]:Oo04c_EfficiencyEER  = {  
            if (IfValidAnd( CoolSystem[10]:EER  > 0 )) then  CoolSystem[10]:EER   else  UNDEFINED  endif  }
    "Set HVACSys:CF1R_OoCoolingRow[10]:Oo04d_EfficiencySEER"    HVACSys:CF1R_OoCoolingRow[10]:Oo04d_EfficiencySEER  = {  
            if (IfValidAnd( CoolSystem[10]:SEER  > 0 )) then  CoolSystem[10]:SEER   else  UNDEFINED  endif  }
   ; Rule to set Parent for cf1rOo04
    "Set HVACSys:CF1R_OoCoolingRow[10] parent"   HVACSys:CF1R_OoCoolingRow[10]:Parent  = {  CF1R_OoCooling:Name  }
END
;*************************************************************************


;*************************************************************************
RULELIST "CF1RPRF01E_cf1rSection_Pp_Proposed"  1 0 0 1

   "Create & initialize new cf1rTableHvacDistExisting object"
      cf1rSection_Pp:Action   = {  CreateChildren( cf1rTableHvacDistExisting, 1, "DistributionExisting" )  }     ; no init needed
  ; ----------------------------------------------------------------------
  ; Section_Pp rules to create existing Distribution table rows
   "Create cf1rtblRowDistExisting for all existing HVACDist instances"
      HVACDist:CF1R_DistRowExisting   = {  
            if (ResProj:RunScope = 1)   ; new construction
            then  UNDEFINED
            else if (IsNew)
            then  UNDEFINED
	        else if (IfValidAnd( FloorAreaServed > 0 )==0) 
			then  UNDEFINED
            else if (IsAltered .AND. IsVerified)
            then  CreateComp( cf1rtblRowDistExisting, Name + "HVACDistRowExisting" )
            else  UNDEFINED
            endif endif endif endif }

  ; Rules to populate New HVACDist table rows for existing VA HVACDist instances
      "Set HVACDist:CF1R_DistRowExisting:Pp01_SpaceConditioningDistributionSystemName" HVACDist:CF1R_DistRowExisting:Pp01_SpaceConditioningDistributionSystemName  = {  Name  }
      "Set HVACDist:CF1R_DistRowExisting:Pp02_DuctLocation" HVACDist:CF1R_DistRowExisting:Pp02_DuctLocation  = {  
																				switch(TypeAbbrevStr)  
																					case "DuctsAttic"    : "UnconditionedAttic"
																					case "DuctsCrawl"    : "UnconditionedCrawlSpace" 
																					case "DuctsGarage"   : "UnconditionedGarage"
																					case "DuctsInEx12"   : "ConditionedSpaceExcept12ft"
																					case "DuctsInAll"    : "ConditionedSpace" 
																					case "DuctsNone"     : "Ductless" 
																					case "DuctsOutdoor"  : "Outdoors"
																					case "LowLlCod"      : "ConditionedSpaceDuctsVLL"
																					case "DuctsMult"     : "DuctsInMultipleLocations"
																					default : UNDEFINED
																				endswitch  }
      "Set HVACDist:CF1R_DistRowExisting:Pp03_DuctLeakageExisting" HVACDist:CF1R_DistRowExisting:Pp03_DuctLeakageExisting  = {  atof( Format( "%.2f", exDuctLeakageValUse ) )  }
      "Set HVACDist:CF1R_DistRowExisting:Pp03_NotApplicableMessage" HVACDist:CF1R_DistRowExisting:Pp03_NotApplicableMessage  = { if ( LocalStatus ( CF1R_DistRowExisting:Pp03_DuctLeakageExisting ) < 1 ) then "n/a" else UNDEFINED endif  }
      "Set HVACDist:CF1R_DistRowExisting:Pp04_DuctRValue" HVACDist:CF1R_DistRowExisting:Pp04_DuctRValue  =  {
                  switch (EnumString( exDuctInsRvalOpt ))
                     case "0"    :  "R0.0"
                     case "2.1"  :  "R2.1"
                     case "4.2"  :  "R4.2"
                     case "6.0"  :  "R6"
                     case "8.0"  :  "R8"
                     case "10.0" :  "R10"
                     case "12.0" :  "R12"
                     default  :  UNDEFINED
                  endswitch  }

      "Set HVACDist:CF1R_DistRowExisting:Pp04_NotApplicableMessage" HVACDist:CF1R_DistRowExisting:Pp04_NotApplicableMessage  = { if ( LocalStatus ( CF1R_DistRowExisting:Pp04_DuctRValue ) < 1 ) then "n/a" else UNDEFINED endif  }
      "Set HVACDist:CF1R_DistRowExisting:Pp05_DuctSpaceType" HVACDist:CF1R_DistRowExisting:Pp05_DuctSpaceType  = { 
																											switch(EnumString( SupplyRptLocation ))  
																												case "Attic"    : "Attic"
																												case "Garage"    : "Garage" 
																												case "Conditioned Zone"   : "ConditionedZone"
																												case "Unconditioned Zone"   : "UnconditionedZone"
																												case "Crawl Space"    : "CrawlSpace" 
																												case "Outside"     : "Outside" 
																												case "Multiple"  : "Multiple"
																												default : UNDEFINED
																											endswitch  }
      "Set HVACDist:CF1R_DistRowExisting:Pp05_NotApplicableMessage" HVACDist:CF1R_DistRowExisting:Pp05_NotApplicableMessage  = { if ( LocalStatus ( CF1R_DistRowExisting:Pp05_DuctSpaceType ) < 1 ) then "n/a" else UNDEFINED endif  }
      "Set HVACDist:CF1R_DistRowExisting:Pp06_DuctSpaceType" HVACDist:CF1R_DistRowExisting:Pp06_DuctSpaceType  = { 
																											switch(EnumString( ReturnRptLocation ))  
																												case "Attic"    : "Attic"
																												case "Garage"    : "Garage" 
																												case "Conditioned Zone"   : "ConditionedZone"
																												case "Unconditioned Zone"   : "UnconditionedZone"
																												case "Crawl Space"    : "CrawlSpace" 
																												case "Outside"     : "Outside" 
																												case "Multiple"  : "Multiple"
																												default : UNDEFINED
																											endswitch  }
      "Set HVACDist:CF1R_DistRowExisting:Pp06_NotApplicableMessage" HVACDist:CF1R_DistRowExisting:Pp06_NotApplicableMessage  = { if ( LocalStatus ( CF1R_DistRowExisting:Pp06_DuctSpaceType ) < 1 ) then "n/a" else UNDEFINED endif  }
      "Set HVACDist:CF1R_DistRowExisting:Pp07_HasBypassDuct" HVACDist:CF1R_DistRowExisting:Pp07_HasBypassDuct  = {  if (HasBypassDuct) then "true" else "false" endif  }
      "Set HVACDist:CF1R_DistRowExisting:Pp07_NotApplicableMessage" HVACDist:CF1R_DistRowExisting:Pp07_NotApplicableMessage  = { if ( LocalStatus ( CF1R_DistRowExisting:Pp07_HasBypassDuct ) < 1 ) then "n/a" else UNDEFINED endif  }

  ; Rule to add existing Distribution table rows to the cf1rTableHvacDistExisting
      "Set HVACDist:CF1R_DistRowExisting:Parent"
         HVACDist:CF1R_DistRowExisting:Parent  = {  cf1rTableHvacDistExisting:Name  }
  ; ----------------------------------------------------------------------
  ; Rule to Delete empty TableHvacDistExisting table
   "DELETE empty cf1rTableHvacDistExisting object"
      cf1rSection_Pp:Action   = {  if (ComponentCount( cf1rtblRowDistExisting ) < 1) then  DeleteComp()  else  UNCHANGED  endif }
  ; ----------------------------------------------------------------------
END
;*************************************************************************


;*************************************************************************
RULELIST "CF1RPRF01E_Init_cf1rComplianceDocumentPackage"  1 0 0 1
   "Set cf1rComplianceDocumentPackage:attrib_xmlns"               cf1rComplianceDocumentPackage:attrib_xmlns              = {  "http://www.lmonte.com/besm/CF1RPRF01E"  }     
   "Set cf1rComplianceDocumentPackage:attrib_xmlns_lit"           cf1rComplianceDocumentPackage:attrib_xmlns_lit          = {  "http://www.lmonte.com/besm/lit"  }            
   "Set cf1rComplianceDocumentPackage:attrib_xmlns_com"           cf1rComplianceDocumentPackage:attrib_xmlns_com          = {  "http://www.lmonte.com/besm/com"  }            
   "Set cf1rComplianceDocumentPackage:attrib_xmlns_dtyp"          cf1rComplianceDocumentPackage:attrib_xmlns_dtyp         = {  "http://www.lmonte.com/besm/dtyp"  }           
   "Set cf1rComplianceDocumentPackage:attrib_xmlns_bld"           cf1rComplianceDocumentPackage:attrib_xmlns_bld          = {  "http://www.lmonte.com/besm/bld"  }            
   "Set cf1rComplianceDocumentPackage:attrib_xmlns_env"           cf1rComplianceDocumentPackage:attrib_xmlns_env          = {  "http://www.lmonte.com/besm/env"  }            
   "Set cf1rComplianceDocumentPackage:attrib_xmlns_hvac"          cf1rComplianceDocumentPackage:attrib_xmlns_hvac         = {  "http://www.lmonte.com/besm/hvac"  }           
   "Set cf1rComplianceDocumentPackage:attrib_xmlns_comp"          cf1rComplianceDocumentPackage:attrib_xmlns_comp         = {  "http://www.lmonte.com/besm/comp"  }           
   "Set cf1rComplianceDocumentPackage:attrib_xmlns_d"             cf1rComplianceDocumentPackage:attrib_xmlns_d            = {  "http://www.lmonte.com/besm/d"  }              
   "Set cf1rComplianceDocumentPackage:attrib_xmlns_altova"        cf1rComplianceDocumentPackage:attrib_xmlns_altova       = {  "http://www.altova.com/xml-schema-extensions"  }
   "Set cf1rComplianceDocumentPackage:attrib_xmlns_xsi"           cf1rComplianceDocumentPackage:attrib_xmlns_xsi          = {  "http://www.w3.org/2001/XMLSchema-instance"  } 
   "Set cf1rComplianceDocumentPackage:attrib_xsi_schemaLocation"  cf1rComplianceDocumentPackage:attrib_xsi_schemaLocation = {  "http://www.lmonte.com/besm/CF1RPRF01E.xsd"   }
   "Set cf1rComplianceDocumentPackage:attrib_revision"            cf1rComplianceDocumentPackage:attrib_revision           = {  "rev 20190401"  }  ; "rev 2018-03-31"  }   ; was: "2016.1.009"   }
   "Set cf1rComplianceDocumentPackage:attrib_doc"                 cf1rComplianceDocumentPackage:attrib_doc                = {  "CF1RPRF01E"  }     
END
;*************************************************************************

;*************************************************************************
RULELIST "CF1RPRF01E_Init_cf1rDocID"  1 0 0 1
   "Set cf1rDocID:attrib_doc"          cf1rDocID:attrib_doc      = {  "CF1RPRF01E"  }
   "Set cf1rDocID:attrib_docType"      cf1rDocID:attrib_docType  = {  "CERTIFICATE OF COMPLIANCE -  RESIDENTIAL PERFORMANCE COMPLIANCE METHOD"  }
   "Set cf1rDocID:attrib_docTitle"     cf1rDocID:attrib_docTitle = {  "Residential Performance Compliance Method"  }
END
;*************************************************************************

;*************************************************************************
RULELIST "CF1RPRF01E_Init_cf1rPayload"  1 0 0 1
   "Set cf1rPayload:attrib_complianceDocumentGUID"             cf1rPayload:attrib_complianceDocumentGUID           = {  "complianceDocumentGUID1"  }
   "Set cf1rPayload:attrib_complianceDocumentSchemaVersion"    cf1rPayload:attrib_complianceDocumentSchemaVersion  = {  "complianceDocumentSchemaVersion1"  }
   "Set cf1rPayload:attrib_displayTag"                         cf1rPayload:attrib_displayTag                       = {  "CF1R-PRF-01-E"  }
   "Set cf1rPayload:attrib_payloadDocument"                    cf1rPayload:attrib_payloadDocument                  = {  "CF1RPRF01E"  }
   "Set cf1rPayload:attrib_processedDate"                      cf1rPayload:attrib_processedDate                    = {  ValidOr( Proj:RunDateISO, "2006-05-04T18:13:51.0" )  }
   "Set cf1rPayload:attrib_projectID"                          cf1rPayload:attrib_projectID                        = {  ValidOr( Proj:RptComplianceID, " " )  }     ; SAC 12/12/22
   "Set cf1rPayload:attrib_reportRequestor"                    cf1rPayload:attrib_reportRequestor                  = {  "reportRequestor1"  }
   "Set cf1rPayload:attrib_reportRequestorIP_Address"          cf1rPayload:attrib_reportRequestorIP_Address        = {  "reportRequestorIP_Address1"  }
   "Set cf1rPayload:attrib_revision"                           cf1rPayload:attrib_revision                         = {  "revision3"  }
   "Set cf1rPayload:attrib_validates"                          cf1rPayload:attrib_validates                        = {  "false"  }
   "Set cf1rPayload:attrib_cmRevision"                         cf1rPayload:attrib_cmRevision                       = {  ValidOr( Proj:RuleRepoRev, 0 )  }
END
;*************************************************************************

;*************************************************************************
RULELIST "CF1RPRF01E_Init_cf1rHeader"  1 0 0 1
   "Set cf1rHeader:comp_header01_ProjectName"      cf1rHeader:comp_header01_ProjectName     = {  Proj:Name  }
   ;"Set cf1rHeader:comp_header07_DatePrepared"     cf1rHeader:comp_header07_DatePrepared    = {  Proj:RunDateISO  }
   "Set cf1rHeader:comp_header02_RunDateTime"      cf1rHeader:comp_header02_RunDateTime     = {  Proj:RunDateISO  }
   "Set cf1rHeader:comp_header03_RunDescription"   cf1rHeader:comp_header03_RunDescription  = {  if (GlobalStatus( Proj:RunTitle     ) > 0) then  Proj:RunTitle      else  UNDEFINED  endif  }
   "Set cf1rHeader:comp_header04_InputFilename"    cf1rHeader:comp_header04_InputFilename   = {  if (GlobalStatus( Proj:ProjFileName ) > 0) then  Proj:ProjFileName  else  UNDEFINED  endif  }
END
;*************************************************************************

;*************************************************************************
RULELIST "CF1RPRF01E_Init_cf1rDocAuthor"  1 0 0 1
;  property:       "comp_documentAuthor01Name",                 BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
;  property:       "comp_documentAuthor02ElectronicSignature",  BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
;  property:       "comp_documentAuthor03Company",              BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
;  property:       "comp_documentAuthor04SignatureDate",        BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
;  property:       "comp_documentAuthor05Address",              BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
;  property:       "comp_documentAuthor06Certification",        BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
;  property:       "comp_documentAuthor07City",                 BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
;  property:       "comp_documentAuthor08State",                BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
;  property:       "comp_documentAuthor09Zipcode",              BEMP_Int,  1,  0,  1, "",                 0,  0,                             555, ""
;  property:       "comp_documentAuthor10Phone",                BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
END
;*************************************************************************

;*************************************************************************
RULELIST "CF1RPRF01E_Init_cf1rRespPerson"  1 0 0 1
;  property:       "comp_responsiblePerson01_Name",        BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
;  property:       "comp_responsiblePerson02_Signature",   BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
;  property:       "comp_responsiblePerson03_Company",     BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
;  property:       "comp_responsiblePerson04_DateSigned",  BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
;  property:       "comp_responsiblePerson06_Address",     BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
;  property:       "comp_responsiblePerson07_License",     BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
;  property:       "comp_responsiblePerson08_City",        BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
;  property:       "comp_responsiblePerson09_State",       BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
;  property:       "comp_responsiblePerson10_Zipcode",     BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
;  property:       "comp_responsiblePerson11_Phone",       BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
END
;*************************************************************************

;*************************************************************************
RULELIST "CF1RPRF01E_Init_cf1rFooter"  1 0 0 1
;  property:       "comp_footer01_RegistrationNumber",      BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
;  property:       "comp_footer02_RegistrationDateTime",    BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
;  property:       "comp_footer03_DataRegistryProvider",    BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
;  property:       "comp_footer04_DigitalSignatureLabel",   BEMP_Str,  1,  0,  1, "",                 0,  0,                             555, ""
END
;*************************************************************************


;*************************************************************************
ENDFILE

