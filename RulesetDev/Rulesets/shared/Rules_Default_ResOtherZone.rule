; -------------------------------------------------------------------------
; Rules pertaining to:   Defaulting the Proposed Building Model - focusing on OtherZone (nonres common space) properties
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2019, California Energy Commission
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
;STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------

ENUM_PROPERTIES_VALUE   ; ensures retrieval/logic/us of enum properties assume numeric value (alternative is ENUM_PROPERTIES_STRING)

; SAC 9/3/19 - added to facilitate new MFam prototypes including common spaces (MFamProto)
;*************************************************************************
RULELIST "ProposedInput_ResOtherZone" 0 0 0 0
;*************************************************************************

;  OtherZone:Type       enum: Conditioned (1) / Unconditioned (10)         - enum default to Cond
;  OtherZone:SpcFunc    enum: - specify - (0) / <valid selections> (>200)  - not defaulted

; 1,           "TreeDescrip",       BEMP_Str,  1,  0,  0, "",                 0,  0,                        1044, "Description of zone for display in UI Tree"    
   "Default ResOtherZn:Type" ResOtherZn:Type = 
      {  if (SpcFunc == 243 .OR. SpcFunc == 244 .OR. SpcFunc == 355) then "Unconditioned" else "Conditioned" endif }


   "Default OtherZone:VentSpcFunc"     OtherZone:VentSpcFunc  =
      {  if (SpcFunc < 200) then  "NA"
         else  SpaceFunctionData:VentSpcFuncDef( "FuncType", EnumString( SpcFunc ) )
         endif  }

   "Set OtherZone:LaundryArea"         OtherZone:LaundryArea  =
      {  if (SpcFunc == 231 .OR. SpcFunc == 342) then  ValidOr( Area, 0 )    ; 231, "Laundry Area"
         else  0  endif  }

   "Default OtherZone:DryerFuel"    OtherZone:DryerFuel  =
      {  if (ResProj:Fuel_HaveNatGas == 0) then  1  else  2  endif  }   ; SAC 10/2/19 - MFamProto

   "Set OtherZone:WasherDwellUnits - # of DwellUnits that reference this OtherZone via DwellUnit:WasherZoneRef"    ; SAC 10/2/19 - MFamProto
      OtherZone:WasherDwellUnits =
      {  if (LaundryArea < 0.5) then  0
         else  SumRevRef( DwellUnit:WasherZoneRef, DwellUnit:HaveWasher )  endif  }

   ; prevent SpaceFunctionData:FuncSchGrp lookup for 'Unoccupied...' SpcFuncs - SAC 05/28/21
   "Set OtherZone:FuncSchGrp"       OtherZone:FuncSchGrp  =       ; revised to hardwire use of ResidentialCommon schedules for several SpcFuncs - SAC 04/06/22
      {  if (SpcFunc < 200 .OR. SpcFunc == 262 .OR. SpcFunc == 263 .OR. SpcFunc == 376 .OR. SpcFunc == 377) then  0
         else  switch (SpcFunc)
                  case  320 :  9  ; "Corridor Area"   (normally Office schedules) -->> ResidentialCommon
                  case  345 :  9  ; "Lobby, Main Entry"   (normally Assembly schedules) -->> ResidentialCommon
                  case  362 :  9  ; "Restrooms"   (normally Office schedules) -->> ResidentialCommon
                  case  363 :  9  ; "Stairwell"   (normally Office schedules) -->> ResidentialCommon
                  case  301 :  9  ; "All other"   (normally Office schedules) -->> ResidentialCommon
                  default   :  SpaceFunctionData:FuncSchGrp( "FuncType", EnumString( SpcFunc ) )
               endswitch  endif  }

; JP 3/22/22 moved to Lighting-ResOtherZn-General.rule
;   "Set OtherZone:IntLPDReg"        OtherZone:IntLPDReg  =     ; SAC 10/4/19 - MFamProto
;      {  if (SpcFunc < 200) then  0
;         else  SpaceFunctionData:IntLPDReg( "FuncType", EnumString( SpcFunc ) )  endif  }

   "Set OtherZone:IsGarage - flag indicating this OtherZone is a Garage (for AirNet)"     OtherZone:IsGarage =    ; SAC 11/29/20
      {  switch (SpcFunc)
            case  242 :  1   ; "Parking Garage Area (Daylight Adaptation Zones)"
            case  243 :  1   ; "Parking Garage Area (Dedicated Ramps)"
            case  244 :  1   ; "Parking Garage Area (Parking Zone)"
            case  355 :  1   ; "Parking Garage Area (Parking Zone and Ramps)"   - 2022 - SAC 02/10/22 (MFam)
            default   :  0
         endswitch  }

   ; Occupancy
   ;     following rules ignore option in Com to specify Fixed Seating - implemented in logic as:
   ;         else if( IfValidAnd( FxdSeat > 0 ) .AND. SpcFunc != "Unleased Tenant Area" )
   ;         then // Fixed seating can be used
   ;           ValidOr( OccNumFxdSeat, 0 )
   "Set OtherZone:MinOccNum"        OtherZone:MinOccNum  =     ; SAC 10/7/19 - MFamProto
      {  if (SpcFunc < 200 .OR. IfValidAnd( Area > 0 )==0) then  0
   ;     else if( IfValidAnd( FxdSeat > 0 ) .AND. SpcFunc != "Unleased Tenant Area" )
   ;     then // Fixed seating can be used
   ;       ValidOr( OccNumFxdSeat, 0 )
         else  SpaceFunctionData:OccDens( "FuncType", EnumString( SpcFunc ) ) * Area / 1000
         endif  }
   "Set OtherZone:MinOccDens"       OtherZone:MinOccDens  = 
      {  if (SpcFunc < 200 .OR. IfValidAnd( Area > 0 )==0) then  0
         else  MinOccNum / Area * 1000
         endif  }

   "Default ResProj:OtherZnOccFrac"    ResProj:OtherZnOccFrac  = {  0.5  }
   "Default OtherZone:OccFrac"      OtherZone:OccFrac    = {  ResProj:OtherZnOccFrac  }

   "Set OtherZone:MinOccNumSim"     OtherZone:MinOccNumSim   =
      {  MinOccNum * OccFrac  }
      ;{  if( IfValidAnd( FxdSeat > 0 ) .AND. SpcFunc != "Unleased Tenant Area" )
      ;   then MinOccNum
      ;   else MinOccNum * 0.5 // 50% of egress density
      ;   endif  }
   "Set OtherZone:MinOccDensSim"    OtherZone:MinOccDensSim  =
      {  if (IfValidAnd( Area > 0 ))
         then  MinOccNumSim / Area * 1000
         else  0
         endif  }

;              RULE NEW Spc:OccNum     people    "The number of occupants in the Space for egress/DCV design purposes."
;1,           "OccDens",           BEMP_Flt,  1,  0,  0, "people/1,000 ft2", 0,  0,                        3008, "The density of occupants in the Space for egress/DCV design purposes."  
;              RULE Spc:FxdSeat   checkbox           "A flag that indicates that the space has fixed seating and the space occupancy will be entered as a number of occupants."
;              RULE Spc:OccNumFxdSeat   int          "A number of occupants in the space for simulation and ventilation calculations if FixedSeating is selected and is a valid choice."
;1,           "OccDensSim",        BEMP_Flt,  1,  0,  1, "people/1,000 ft2", 0,  0,                        3008, "The density of people of in a space for simulation and ventilation calculations."                  
;1,           "OccNumSim",         BEMP_Flt,  1,  0,  0, "people",           0,  0,                        3008, "The number of people in a space for simulation and ventilation calculations."  
;              RULE NEW Spc:OccNumSimWithMult   people    "The simulated number of people in the Space, including BuildingStory multiplier."

   "Set OtherZone:OccSensHtRt"      OtherZone:OccSensHtRt  =
      {  if (SpcFunc < 200 .OR. IfValidAnd( MinOccDensSim > 0)==0) then  UNDEFINED
         else  SpaceFunctionData:OccSensHtRt( "FuncType", EnumString( SpcFunc ) )  endif  }
   "Set OtherZone:OccLatHtRt"       OtherZone:OccLatHtRt  =
      {  if (SpcFunc < 200 .OR. IfValidAnd( MinOccDensSim > 0)==0) then  UNDEFINED
         else  SpaceFunctionData:OccLatHtRt(  "FuncType", EnumString( SpcFunc ) )  endif  }

   "Set OtherZone:RecptPwrDens"     OtherZone:RecptPwrDens  =           ; SAC 10/7/19 - MFamProto
      {  if (SpcFunc < 200 .OR. IfValidAnd( Area > 0 )==0) then  0
         else if (SpcFunc = 211 .OR. SpcFunc = 316) then  20   ; "Computer Room" - 20 W/ft2 is Standard's definition for 'Computer Room'
         else  SpaceFunctionData:RecptPwrDens( "FuncType", EnumString( SpcFunc ) )
         endif endif  }
   "Set OtherZone:RecptRadFrac"     OtherZone:RecptRadFrac  =
      {  if (LocalStatus( RecptPwrDens ) = 0)
         then  UNDEFINED
         else  0.20
         endif  }
   "Set OtherZone:RecptLatFrac"     OtherZone:RecptLatFrac  =
      {  if (LocalStatus( RecptPwrDens ) = 0)
         then  UNDEFINED
         else  0.0
         endif  }

   ; Minimum IAQ ventilation via T24N look-up table - SAC 2/24/20
   "Set OtherZone:CodeVentPerPerson"   OtherZone:CodeVentPerPerson  = 
      {  if (VentSpcFunc < 1 .OR. IfValidAnd( MinOccNumSim > 0 )==0) then  0
         else  VentilationSpaceFunctionData:CodeVentPerPerson( "VentFuncType", EnumString( VentSpcFunc ) )
         endif  }
   "Set OtherZone:CodeVentPerArea"     OtherZone:CodeVentPerArea    = 
      {  if (VentSpcFunc < 1 .OR. IfValidAnd( Area > 0 )==0) then  0
         else  VentilationSpaceFunctionData:CodeVentPerArea(   "VentFuncType", EnumString( VentSpcFunc ) )
         endif  }

   "Set OtherZone:CodeExhPerArea"      OtherZone:CodeExhPerArea    =       ; SAC 10/19/20
      {  if (VentSpcFunc < 1 .OR. IfValidAnd( Area > 0 )==0) then  0
         else  VentilationSpaceFunctionData:CodeExhPerArea( "VentFuncType", EnumString( VentSpcFunc ) )
         endif  }
  "Set OtherZone:CodeExhPerFixture"  OtherZone:CodeExhPerFixture = ; JP 5/16/22
      {  if (VentSpcFunc < 1 ) then  0
         else  VentilationSpaceFunctionData:CodeExhContPerFixture( "VentFuncType", EnumString( VentSpcFunc ) )
         endif  }
  "Set OtherZone:MinExhCFM" OtherZone:MinExhCFM =
      {  if (VentSpcFunc < 1 .OR. IfValidAnd( Area > 0 )==0) then  0
         else  Area * CodeExhPerArea + ValidOr( ExhNumFixtures, 0 ) * CodeExhPerFixture
         endif  }

; Default parking garage exhaust fan 
  "Set OtherZone:PrkgGarExhFlow" OtherZone:PrkgGarExhFlow =
      {  if( SpcFunc = 355 ) then  MinExhCFM
         else  0 endif  }
         
   "Set OtherZone:PrkgGarExhFanPwr"       OtherZone:PrkgGarExhFanPwr    = 
      {  if( SpcFunc = 355 ) then  0.35
         else  0  endif  }

   "Set OtherZone:ExhstOutsideOpening"    OtherZone:ExhstOutsideOpening    =     ; SAC 10/19/20
      {  if (VentSpcFunc != 34) then  0
         else  ; "Exhaust - Parking garages"
               if (Area <= 200) then  63
               else if (Area <= 400) then  126
               else  200
         endif endif endif  }


; ResProj:MostDUIAQ_Balanced,         NotInput,   0,    0,   0,    1,  1,  1
; ResProj:MostDUIAQ_Exhaust,          NotInput,   0,    0,   0,    1,  1,  1
; ResProj:MostDUIAQ_Supply,           NotInput,   0,    0,   0,    1,  1,  1
; ResProj:MostDUIAQ_Type,             NotInput,   0,    0,   0,    1,  1,  1

; SAC 2/25/20 - ported all DwellUnitType IAQ inputs/properties to OtherZone
	; SAC 7/29/15 - added properties to disable all IAQ ventilation
	"Default OtherZone:DisableIAQ flag"	   OtherZone:DisableIAQ		   = {	0  }		; option to toggle OFF all IAQ ventilation
	"Set OtherZone:IAQDisabled"				OtherZone:IAQDisabled		= {	if (ResProj:BypassRuleLimits > 0 .AND. DisableIAQ > 0) then  1  else  0  endif  }		; Flag indicating that IAQ vent has been toggled OFF
	"Set OtherZone:ServedByAirSys" OtherZone:ServedByAirSys = { if( LocalCompAssigned( ActiveHVACSystem ) = ComponentType( "AirSys" ) ) then 1 else 0 endif }
	"Set OtherZone:AllowIAQInps"  OtherZone:AllowIAQInps = { if( IAQDisabled < 1 .AND. ServedByAirSys = 0 .AND. SpcFunc != 355 ) then  1  else  0  endif  }		; Flag indicating that ventilation system can be specified using IAQOption

   "Default OtherZone:IAQOption based on ResProj:MostDUIAQ_*"     OtherZone:IAQOption  = 
      { 2 } ; Minimum IAQ fans are not applicable to ResOtherZn
;      {  if (     ResProj:MostDUIAQ_Exhaust) then  5
;         else if (ResProj:MostDUIAQ_Supply ) then  6
;         else  4  endif endif  }
	"Set OtherZone:MinIAQCFM"					OtherZone:MinIAQCFM			=     ; prevent MinOccNumSim and/or Area undefined error - SAC 05/28/21
      {  int( max( (CodeVentPerPerson * ValidOr( MinOccNumSim, 0 )),
                   (CodeVentPerArea   * ValidOr( Area        , 0 )) )*10 ) / 10  }    ; round to nearest tenth CFM
   ; "Default OtherZone:IAQFanRef[1-4]			- no default
   
  "Set ResOtherZn:AirSysVentCFM" ResOtherZn:AirSysVentCFM = ; for zone ventilated by an AirSys
      { if( ServedByAirSys > 0 ) then MinIAQCFM else UNDEFINED endif }
   
   "Set OtherZone:IAQNumFanRefs"			OtherZone:IAQNumFanRefs	   = {	if (IAQDisabled > 0 .OR. MinIAQCFM <= 0 .OR. IAQOption != 2 .OR. AllowIAQInps < 1 ) then  0
   																							else if (LocalCompAssigned( IAQFanRef[4]  )) then  4		else if (LocalCompAssigned( IAQFanRef[3]  )) then  3
   																							else if (LocalCompAssigned( IAQFanRef[2]  )) then  2		else if (LocalCompAssigned( IAQFanRef[1]  )) then  1
   																							else  0  endif endif endif endif endif  }

   "Default OtherZone:IAQFanCnt[1]"		OtherZone:IAQFanCnt[1]	= {	1  }
   "Default OtherZone:IAQFanCnt[2]"		OtherZone:IAQFanCnt[2]	= {	1  }
   "Default OtherZone:IAQFanCnt[3]"		OtherZone:IAQFanCnt[3]	= {	1  }
   "Default OtherZone:IAQFanCnt[4]"		OtherZone:IAQFanCnt[4]	= {	1  }

   "Set OtherZone:IAQCFM[1]"				OtherZone:IAQCFM[1]		= {	if (IAQDisabled > 0 .OR. AllowIAQInps < 1 .OR. IAQOption != 2 .OR. LocalCompAssigned( IAQFanRef[1] ) < 0.5) then  0  else  IAQFanRef[1]:IAQCFM * IAQFanCnt[1]   endif  }
   "Set OtherZone:IAQCFM[2]"				OtherZone:IAQCFM[2]		= {	if (IAQDisabled > 0 .OR. AllowIAQInps < 1 .OR. IAQOption != 2 .OR. LocalCompAssigned( IAQFanRef[2] ) < 0.5) then  0  else  IAQFanRef[2]:IAQCFM * IAQFanCnt[2]   endif  }
   "Set OtherZone:IAQCFM[3]"				OtherZone:IAQCFM[3]		= {	if (IAQDisabled > 0 .OR. AllowIAQInps < 1 .OR. IAQOption != 2 .OR. LocalCompAssigned( IAQFanRef[3] ) < 0.5) then  0  else  IAQFanRef[3]:IAQCFM * IAQFanCnt[3]   endif  }
   "Set OtherZone:IAQCFM[4]"				OtherZone:IAQCFM[4]		= {	if (IAQDisabled > 0 .OR. AllowIAQInps < 1 .OR. IAQOption != 2 .OR. LocalCompAssigned( IAQFanRef[4] ) < 0.5) then  0  else  IAQFanRef[4]:IAQCFM * IAQFanCnt[4]   endif  }

   ; SAC 11/18/16 - modified rules to set IAQPwr_Exhaust for Balanced fans (as well as Exhaust) (tic #765)
   ; SAC 11/11/17 - revised IAQPwr_Exhaust rules to exclude Balanced fans - now to be simulated as HRV IAQ (tic #915)
	"Set OtherZone:IAQPwr_Exhaust - 1"		OtherZone:IAQPwr_Exhaust	= {	if (IAQDisabled > 0 .OR. AllowIAQInps < 1 ) then  0
																									else if (IAQOption == 5) then  MinIAQCFM * ResProj:DefaultIAQFanPwr
																									else if (IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
																									then	if (IAQFanRef[1]:IAQFanType == 1)
																									      then  IAQCFM[1] * ValidOr( IAQFanRef[1]:WperCFMIAQ, 0 )  else  0  endif
																									else	0  endif endif endif  }
	"Set OtherZone:IAQPwr_Exhaust - 2"		OtherZone:IAQPwr_Exhaust	= {	if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
																									then	if (IAQFanRef[2]:IAQFanType == 1) 
																									      then  IAQPwr_Exhaust + (IAQCFM[2] * ValidOr( IAQFanRef[2]:WperCFMIAQ, 0 ))  else  UNCHANGED  endif
																									else	UNCHANGED  endif  }
	"Set OtherZone:IAQPwr_Exhaust - 3"		OtherZone:IAQPwr_Exhaust	= {	if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
																									then	if (IAQFanRef[3]:IAQFanType == 1) 
																									      then  IAQPwr_Exhaust + (IAQCFM[3] * ValidOr( IAQFanRef[3]:WperCFMIAQ, 0 ))  else  UNCHANGED  endif
																									else	UNCHANGED  endif  }
	"Set OtherZone:IAQPwr_Exhaust - 4"		OtherZone:IAQPwr_Exhaust	= {	if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
																									then	if (IAQFanRef[4]:IAQFanType == 1) 
																									      then  IAQPwr_Exhaust + (IAQCFM[4] * ValidOr( IAQFanRef[4]:WperCFMIAQ, 0 ))  else  UNCHANGED  endif
																									else	UNCHANGED  endif  }

   ; SAC 11/11/17 - added IAQCFM_Exhaust to ensure mixture of IAQ fans simulated (tic #915)
	"Set OtherZone:IAQCFM_Exhaust - 1"		OtherZone:IAQCFM_Exhaust	= {	if (IAQDisabled > 0 .OR. AllowIAQInps < 1 ) then  0
																									else if (IAQOption == 5) then  MinIAQCFM
																									else if (IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
																									then	if (IAQFanRef[1]:IAQFanType == 1)
																									      then  IAQCFM[1]  else  0  endif
																									else	0  endif endif endif  }
	"Set OtherZone:IAQCFM_Exhaust - 2"		OtherZone:IAQCFM_Exhaust	= {	if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
																									then	if (IAQFanRef[2]:IAQFanType == 1) 
																									      then  IAQCFM_Exhaust + IAQCFM[2]  else  UNCHANGED  endif
																									else	UNCHANGED  endif  }
	"Set OtherZone:IAQCFM_Exhaust - 3"		OtherZone:IAQCFM_Exhaust	= {	if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
																									then	if (IAQFanRef[3]:IAQFanType == 1) 
																									      then  IAQCFM_Exhaust + IAQCFM[3]  else  UNCHANGED  endif
																									else	UNCHANGED  endif  }
	"Set OtherZone:IAQCFM_Exhaust - 4"		OtherZone:IAQCFM_Exhaust	= {	if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
																									then	if (IAQFanRef[4]:IAQFanType == 1) 
																									      then  IAQCFM_Exhaust + IAQCFM[4]  else  UNCHANGED  endif
																									else	UNCHANGED  endif  }

	"Set OtherZone:IAQCFM_Supply - 1"		OtherZone:IAQCFM_Supply	= {	if (IAQDisabled > 0 .OR. AllowIAQInps < 1 ) then  0
																								else if (IAQOption == 6) then  MinIAQCFM
																								else if (IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
																								then	if (IAQFanRef[1]:IAQFanType == 2) then                  IAQCFM[1]  else      0      endif    else      0      endif endif endif  }
	"Set OtherZone:IAQCFM_Supply - 2"		OtherZone:IAQCFM_Supply	= {	if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
																								then	if (IAQFanRef[2]:IAQFanType == 2) then  IAQCFM_Supply + IAQCFM[2]  else  UNCHANGED  endif    else  UNCHANGED  endif  }
	"Set OtherZone:IAQCFM_Supply - 3"		OtherZone:IAQCFM_Supply	= {	if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
																								then	if (IAQFanRef[3]:IAQFanType == 2) then  IAQCFM_Supply + IAQCFM[3]  else  UNCHANGED  endif    else  UNCHANGED  endif  }
	"Set OtherZone:IAQCFM_Supply - 4"		OtherZone:IAQCFM_Supply	= {	if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
																								then	if (IAQFanRef[4]:IAQFanType == 2) then  IAQCFM_Supply + IAQCFM[4]  else  UNCHANGED  endif    else  UNCHANGED  endif  }

	"Set OtherZone:IAQPwr_Supply - 1"		OtherZone:IAQPwr_Supply	= {	if (IAQDisabled > 0 .OR. AllowIAQInps < 1 ) then  0
																								else if (IAQOption == 6) then  MinIAQCFM * ResProj:DefaultIAQFanPwr
																								else if (IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
																								then	if (IAQFanRef[1]:IAQFanType == 2) then                   IAQCFM[1] * ValidOr( IAQFanRef[1]:WperCFMIAQ, 0 )   else      0      endif    else      0      endif endif endif  }
	"Set OtherZone:IAQPwr_Supply - 2"		OtherZone:IAQPwr_Supply	= {	if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
																								then	if (IAQFanRef[2]:IAQFanType == 2) then  IAQCFM_Supply + (IAQCFM[2] * ValidOr( IAQFanRef[2]:WperCFMIAQ, 0 ))  else  UNCHANGED  endif    else  UNCHANGED  endif  }
	"Set OtherZone:IAQPwr_Supply - 3"		OtherZone:IAQPwr_Supply	= {	if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
																								then	if (IAQFanRef[3]:IAQFanType == 2) then  IAQCFM_Supply + (IAQCFM[3] * ValidOr( IAQFanRef[3]:WperCFMIAQ, 0 ))  else  UNCHANGED  endif    else  UNCHANGED  endif  }
	"Set OtherZone:IAQPwr_Supply - 4"		OtherZone:IAQPwr_Supply	= {	if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
																								then	if (IAQFanRef[4]:IAQFanType == 2) then  IAQCFM_Supply + (IAQCFM[4] * ValidOr( IAQFanRef[4]:WperCFMIAQ, 0 ))  else  UNCHANGED  endif    else  UNCHANGED  endif  }

   ; SAC 11/11/17 - added IAQHRV* to enable Balanced fans to be simulated as HRV IAQ (tic #915)
   ; SAC 12/16/19 - added new IAQOption == 4 (default balanced) logic
   "Set OtherZone:IAQHRVCFM - 1"      OtherZone:IAQHRVCFM	= {
         if (IAQDisabled > 0 .OR. AllowIAQInps < 1 ) then  0
         else if (IAQOption == 4) then  MinIAQCFM
         else if (IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
         then	if (IAQFanRef[1]:IAQFanType == 3)
               then  IAQCFM[1]  else  0  endif
         else	0  endif endif endif  }
   "Set OtherZone:IAQHRVCFM - 2"      OtherZone:IAQHRVCFM	= {
         if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
         then	if (IAQFanRef[2]:IAQFanType == 3) 
               then  IAQHRVCFM + IAQCFM[2]  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set OtherZone:IAQHRVCFM - 3"      OtherZone:IAQHRVCFM	= {
         if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
         then	if (IAQFanRef[3]:IAQFanType == 3) 
               then  IAQHRVCFM + IAQCFM[3]  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set OtherZone:IAQHRVCFM - 4"      OtherZone:IAQHRVCFM	= {
         if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
         then	if (IAQFanRef[4]:IAQFanType == 3) 
               then  IAQHRVCFM + IAQCFM[4]  else  UNCHANGED  endif
         else	UNCHANGED  endif  }

   "Set OtherZone:IAQHRVPwr - 1"      OtherZone:IAQHRVPwr	= {
         if (IAQDisabled > 0 .OR. AllowIAQInps < 1 ) then  0
         else if (IAQOption == 4) then  MinIAQCFM * ResProj:DefaultIAQFanPwr
         else if (IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
         then	if (IAQFanRef[1]:IAQFanType == 3)
               then  IAQCFM[1] * ValidOr( IAQFanRef[1]:WperCFMIAQ, 0 )  else  0  endif
         else	0  endif endif endif  }
   "Set OtherZone:IAQHRVPwr - 2"      OtherZone:IAQHRVPwr	= {
         if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
         then	if (IAQFanRef[2]:IAQFanType == 3) 
               then  IAQHRVPwr + (IAQCFM[2] * ValidOr( IAQFanRef[2]:WperCFMIAQ, 0 ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set OtherZone:IAQHRVPwr - 3"      OtherZone:IAQHRVPwr	= {
         if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
         then	if (IAQFanRef[3]:IAQFanType == 3) 
               then  IAQHRVPwr + (IAQCFM[3] * ValidOr( IAQFanRef[3]:WperCFMIAQ, 0 ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set OtherZone:IAQHRVPwr - 4"      OtherZone:IAQHRVPwr	= {
         if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
         then	if (IAQFanRef[4]:IAQFanType == 3) 
               then  IAQHRVPwr + (IAQCFM[4] * ValidOr( IAQFanRef[4]:WperCFMIAQ, 0 ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }

   ; SAC 7/25/20 (tic #1174)
   "Set OtherZone:IAQBalCFM - 1"      OtherZone:IAQBalCFM	= {
         if (IAQDisabled > 0 .OR. AllowIAQInps < 1 ) then  0
         else if (IAQOption == 4) then  MinIAQCFM
         else if (IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
         then	if (IAQFanRef[1]:IAQFanType == 3 .AND.
                     ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( IAQFanRef[1]:IAQRecovEffect = 0 )) .OR.
                       (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( IAQFanRef[1]:IncludesRecov  = 0 )) ))
               then  IAQCFM[1]  else  0  endif
         else	0  endif endif endif  }
   "Set OtherZone:IAQBalCFM - 2"      OtherZone:IAQBalCFM	= {
         if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
         then	if (IAQFanRef[2]:IAQFanType == 3 .AND.
                     ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( IAQFanRef[2]:IAQRecovEffect = 0 )) .OR.
                       (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( IAQFanRef[2]:IncludesRecov  = 0 )) )) 
               then  IAQBalCFM + IAQCFM[2]  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set OtherZone:IAQBalCFM - 3"      OtherZone:IAQBalCFM	= {
         if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
         then	if (IAQFanRef[3]:IAQFanType == 3 .AND.
                     ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( IAQFanRef[3]:IAQRecovEffect = 0 )) .OR.
                       (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( IAQFanRef[3]:IncludesRecov  = 0 )) )) 
               then  IAQBalCFM + IAQCFM[3]  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set OtherZone:IAQBalCFM - 4"      OtherZone:IAQBalCFM	= {
         if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
         then	if (IAQFanRef[4]:IAQFanType == 3 .AND.
                     ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( IAQFanRef[4]:IAQRecovEffect = 0 )) .OR.
                       (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( IAQFanRef[4]:IncludesRecov  = 0 )) )) 
               then  IAQBalCFM + IAQCFM[4]  else  UNCHANGED  endif
         else	UNCHANGED  endif  }

   "Set OtherZone:IAQBalPwr - 1"      OtherZone:IAQBalPwr	= {
         if (IAQDisabled > 0 .OR. AllowIAQInps < 1 ) then  0
         else if (IAQOption == 4) then  MinIAQCFM * ResProj:DefaultIAQFanPwr
         else if (IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
         then	if (IAQFanRef[1]:IAQFanType == 3 .AND.
                     ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( IAQFanRef[1]:IAQRecovEffect = 0 )) .OR.
                       (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( IAQFanRef[1]:IncludesRecov  = 0 )) ))
               then  IAQCFM[1] * ValidOr( IAQFanRef[1]:WperCFMIAQ, 0 )  else  0  endif
         else	0  endif endif endif  }
   "Set OtherZone:IAQBalPwr - 2"      OtherZone:IAQBalPwr	= {
         if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
         then	if (IAQFanRef[2]:IAQFanType == 3 .AND.
                     ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( IAQFanRef[2]:IAQRecovEffect = 0 )) .OR.
                       (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( IAQFanRef[2]:IncludesRecov  = 0 )) )) 
               then  IAQBalPwr + (IAQCFM[2] * ValidOr( IAQFanRef[2]:WperCFMIAQ, 0 ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set OtherZone:IAQBalPwr - 3"      OtherZone:IAQBalPwr	= {
         if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
         then	if (IAQFanRef[3]:IAQFanType == 3 .AND.
                     ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( IAQFanRef[3]:IAQRecovEffect = 0 )) .OR.
                       (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( IAQFanRef[3]:IncludesRecov  = 0 )) )) 
               then  IAQBalPwr + (IAQCFM[3] * ValidOr( IAQFanRef[3]:WperCFMIAQ, 0 ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set OtherZone:IAQBalPwr - 4"      OtherZone:IAQBalPwr	= {
         if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
         then	if (IAQFanRef[4]:IAQFanType == 3 .AND.
                     ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( IAQFanRef[4]:IAQRecovEffect = 0 )) .OR.
                       (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( IAQFanRef[4]:IncludesRecov  = 0 )) )) 
               then  IAQBalPwr + (IAQCFM[4] * ValidOr( IAQFanRef[4]:WperCFMIAQ, 0 ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }

   ; SAC 12/16/19 - note: default balanced effectiveness = 0
   "Set OtherZone:IAQHRVCFMxRcvEff - 1"      OtherZone:IAQHRVCFMxRcvEff	= {
         if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
         then	if (IAQFanRef[1]:IAQFanType == 3)
               then  IAQCFM[1] * ValidOr( IAQFanRef[1]:IAQRecovEffect, 0 )  else  0  endif
         else	0  endif  }
   "Set OtherZone:IAQHRVCFMxRcvEff - 2"      OtherZone:IAQHRVCFMxRcvEff	= {
         if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
         then	if (IAQFanRef[2]:IAQFanType == 3) 
               then  IAQHRVCFMxRcvEff + (IAQCFM[2] * ValidOr( IAQFanRef[2]:IAQRecovEffect, 0 ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set OtherZone:IAQHRVCFMxRcvEff - 3"      OtherZone:IAQHRVCFMxRcvEff	= {
         if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
         then	if (IAQFanRef[3]:IAQFanType == 3) 
               then  IAQHRVCFMxRcvEff + (IAQCFM[3] * ValidOr( IAQFanRef[3]:IAQRecovEffect, 0 ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set OtherZone:IAQHRVCFMxRcvEff - 4"      OtherZone:IAQHRVCFMxRcvEff	= {
         if (IAQDisabled < 1 .AND. AllowIAQInps > 0 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
         then	if (IAQFanRef[4]:IAQFanType == 3) 
               then  IAQHRVCFMxRcvEff + (IAQCFM[4] * ValidOr( IAQFanRef[4]:IAQRecovEffect, 0 ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }

;   ; SAC 10/21/19
;   "Set OtherZone:IAQHRVCFMxSRE - 1"      OtherZone:IAQHRVCFMxSRE	= {
;         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
;         then	if (IAQFanRef[1]:IAQFanType == 3 .AND. IfValidAnd( IAQFanRef[1]:SensRecovEff > 0 ))
;               then  IAQCFM[1] * ValidOr( IAQFanRef[1]:SensRecovEff, 0 )  else  0  endif
;         else	0  endif  }
;   "Set OtherZone:IAQHRVCFMxSRE - 2"      OtherZone:IAQHRVCFMxSRE	= {
;         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
;         then	if (IAQFanRef[2]:IAQFanType == 3 .AND. IfValidAnd( IAQFanRef[2]:SensRecovEff > 0 )) 
;               then  IAQHRVCFMxSRE + (IAQCFM[2] * ValidOr( IAQFanRef[2]:SensRecovEff, 0 ))  else  UNCHANGED  endif
;         else	UNCHANGED  endif  }
;   "Set OtherZone:IAQHRVCFMxSRE - 3"      OtherZone:IAQHRVCFMxSRE	= {
;         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
;         then	if (IAQFanRef[3]:IAQFanType == 3 .AND. IfValidAnd( IAQFanRef[3]:SensRecovEff > 0 )) 
;               then  IAQHRVCFMxSRE + (IAQCFM[3] * ValidOr( IAQFanRef[3]:SensRecovEff, 0 ))  else  UNCHANGED  endif
;         else	UNCHANGED  endif  }
;   "Set OtherZone:IAQHRVCFMxSRE - 4"      OtherZone:IAQHRVCFMxSRE	= {
;         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
;         then	if (IAQFanRef[4]:IAQFanType == 3 .AND. IfValidAnd( IAQFanRef[4]:SensRecovEff > 0 )) 
;               then  IAQHRVCFMxSRE + (IAQCFM[4] * ValidOr( IAQFanRef[4]:SensRecovEff, 0 ))  else  UNCHANGED  endif
;         else	UNCHANGED  endif  }
;
;   "Set OtherZone:IAQHRVCFMxASRE - 1"      OtherZone:IAQHRVCFMxASRE	= {
;         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
;         then	if (IAQFanRef[1]:IAQFanType == 3 .AND. IfValidAnd( IAQFanRef[1]:AdjSensRecovEff > 0 ))
;               then  IAQCFM[1] * ValidOr( IAQFanRef[1]:AdjSensRecovEff, 0 )  else  0  endif
;         else	0  endif  }
;   "Set OtherZone:IAQHRVCFMxASRE - 2"      OtherZone:IAQHRVCFMxASRE	= {
;         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
;         then	if (IAQFanRef[2]:IAQFanType == 3 .AND. IfValidAnd( IAQFanRef[2]:AdjSensRecovEff > 0 )) 
;               then  IAQHRVCFMxASRE + (IAQCFM[2] * ValidOr( IAQFanRef[2]:AdjSensRecovEff, 0 ))  else  UNCHANGED  endif
;         else	UNCHANGED  endif  }
;   "Set OtherZone:IAQHRVCFMxASRE - 3"      OtherZone:IAQHRVCFMxASRE	= {
;         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
;         then	if (IAQFanRef[3]:IAQFanType == 3 .AND. IfValidAnd( IAQFanRef[3]:AdjSensRecovEff > 0 )) 
;               then  IAQHRVCFMxASRE + (IAQCFM[3] * ValidOr( IAQFanRef[3]:AdjSensRecovEff, 0 ))  else  UNCHANGED  endif
;         else	UNCHANGED  endif  }
;   "Set OtherZone:IAQHRVCFMxASRE - 4"      OtherZone:IAQHRVCFMxASRE	= {
;         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
;         then	if (IAQFanRef[4]:IAQFanType == 3 .AND. IfValidAnd( IAQFanRef[4]:AdjSensRecovEff > 0 )) 
;               then  IAQHRVCFMxASRE + (IAQCFM[4] * ValidOr( IAQFanRef[4]:AdjSensRecovEff, 0 ))  else  UNCHANGED  endif
;         else	UNCHANGED  endif  }

  ; JP 2/4/22 - move TotalIAQCFM down and revise how it is calculated
	"Set OtherZone:TotalIAQCFM"			OtherZone:TotalIAQCFM	= {	if( IAQOption >= 4 .AND. IAQOption <= 6 .AND. IAQDisabled < 1 ) 
	                                                          then  MinIAQCFM  
	                                                          else if( ServedByAirSys > 0 )
	                                                          then AirSysVentCFM
	                                                          else if( IAQOption >= 11 .AND. IAQOption <= 15 .AND. IAQDisabled < 1 ) 
	                                                          then Max( ValidOr( CentralSupplyCFM, 0 ), ValidOr( CentralExhaustCFM, 0 ) )
	                                                          else Max( IAQHRVCFM + IAQCFM_Supply , IAQHRVCFM + IAQCFM_Exhaust )
	                                                          endif endif endif }
	"Set OtherZone:TotalExhCFM"			OtherZone:TotalExhCFM	= {	if( SpcFunc = 355 )
	                                                          then PrkgGarExhFlow
	                                                          else if( ServedByAirSys > 0 )
	                                                          then ValidOr( ActiveHVACSystem:ExhFanCap, 0 )
	                                                          else if( IAQOption >= 11 .AND. IAQOption <= 15 ) 
	                                                          then ValidOr( CentralExhaustCFM, 0 )
	                                                          else IAQHRVCFM + IAQCFM_Exhaust
	                                                          endif endif endif }

   ; SAC 2/6/20 (tic #1174)   ; revised to only apply max HRV CFM for std and drtg models - SAC 7/21/20 (tic #1174)
   ; revised to DEACTIVATE this limit entirely (for 2019.2.0+ releases) - SAC 08/19/21 (tic #1243)
	"Set OtherZone:IAQCFMFracHRVCompat - frac of design IAQ CFM at/below % allowed HRV cutoff"     OtherZone:IAQCFMFracHRVCompat  =     
      {  UNDEFINED  }
      ;{  if (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .OR. IAQDisabled > 0 .OR. IfValidAnd( TotalIAQCFM > 0.5 )==0) then  UNDEFINED
	   ;   else if (TotalIAQCFM <= (MinIAQCFM * 1.1)) then  1
      ;   else if (ResProj:RunAbbrev != "s" .AND. ResProj:RunAbbrev != "zs" .AND. ResProj:RunAbbrev != "smf" .AND. ResProj:RunAbbrev != "dr") then  1
      ;   else  (MinIAQCFM * 1.1) / TotalIAQCFM    endif endif endif  } 

   ; SAC 12/16/19 - IAQOption revisions to labels, CFMs & Powers updated to reflect new settings (default balanced, min exhaust)
   "Set OtherZone:MinIAQCFMLbl"	OtherZone:MinIAQCFMLbl	= {	if (IAQDisabled > 0) then  Format( "IAQ Ventilation disabled (%s required but not met)", FltToStr( MinIAQCFM, 1 ) )
																					else if (MinIAQCFM < 0.05 )
																					     then if( MinExhCFM < 0.05 )
																					          then " "
																					          else if( TotalExhCFM < (MinExhCFM - 0.05) )
																					               then Format( "Min Exhaust -NOT MET-:  %s CFM required, %s entered", FltToStr( MinExhCFM, 1 ), FltToStr( TotalExhCFM, 1 ) )
																					               else Format( "Minimum Exhaust:  %s CFM  (%s entered)", FltToStr( MinExhCFM, 1 ), FltToStr( TotalExhCFM, 1 ) )
																					               endif endif
																					else if (TotalIAQCFM < (MinIAQCFM - 0.05)) then	Format( "Min IAQ Vent -NOT MET-:  %s CFM required, %s entered", FltToStr( MinIAQCFM, 1 ), FltToStr( TotalIAQCFM, 1 ) )
																					else  switch (IAQOption)
																					         case  2:  Format( "Minimum IAQ Ventilation:  %s CFM  (%s entered)", FltToStr( MinIAQCFM, 1 ), FltToStr( TotalIAQCFM, 1 ) )
																					         case  4:  Format( "Minimum IAQ Ventilation:  %s CFM  (balanced)",   FltToStr( MinIAQCFM, 1 ) )
																					         case  5:  Format( "Minimum IAQ Ventilation:  %s CFM  (exhaust)",    FltToStr( MinIAQCFM, 1 ) )
																					         case  6:  Format( "Minimum IAQ Ventilation:  %s CFM  (supply)",     FltToStr( MinIAQCFM, 1 ) )
																									 case 11:  Format( "Minimum IAQ Ventilation:  %s CFM  (%s entered)", FltToStr( MinIAQCFM, 1 ), FltToStr( TotalIAQCFM, 1 ) )
																									 case 12:  Format( "Minimum IAQ Ventilation:  %s CFM  (%s entered)", FltToStr( MinIAQCFM, 1 ), FltToStr( TotalIAQCFM, 1 ) )
																									 case 13:  Format( "Minimum IAQ Ventilation:  %s CFM  (%s entered)", FltToStr( MinIAQCFM, 1 ), FltToStr( TotalIAQCFM, 1 ) )
																									 case 14:  Format( "Minimum IAQ Ventilation:  %s CFM  (%s supply entered)", FltToStr( MinIAQCFM, 1 ), FltToStr( TotalIAQCFM, 1 ) )
																									 case 15:  Format( "Minimum IAQ Ventilation:  %s CFM  (%s exhaust entered)", FltToStr( MinIAQCFM, 1 ), FltToStr( TotalIAQCFM, 1 ) )
																					         default:  Format( "Minimum IAQ Ventilation:  %s CFM  (%s entered)", FltToStr( MinIAQCFM, 1 ), FltToStr( TotalIAQCFM, 1 ) )
																					      endswitch  endif endif endif }

   ; SAC 12/16/19 - add flag and label indicating whether OtherZone IAQ is balanced
   "Set OtherZone:IAQCFMIsBalanced - flag indicating whether or not IAQ CFM is balanced (supply & exhaust within 20%)"   ; SAC 12/16/19 
      OtherZone:IAQCFMIsBalanced  =
      {  if (IAQDisabled > 0) then  0
         else if (IAQOption == 4) then  1
         else if (IAQOption == 5 .OR. IAQOption == 6) then  0
         else if (IAQOption == 2 .AND. IAQCFM_Supply > 0 .AND. IAQCFM_Exhaust > 0)
         then  if (IAQCFM_Supply > IAQCFM_Exhaust)
               then  if (IAQCFM_Supply >= (0.8 * IAQCFM_Exhaust) .AND.
                         IAQCFM_Supply <= (1.2 * IAQCFM_Exhaust))
                     then  1  else  0  endif
               else  if (IAQCFM_Exhaust >= (0.8 * IAQCFM_Supply) .AND.
                         IAQCFM_Exhaust <= (1.2 * IAQCFM_Supply))
                     then  1  else  0  endif
               endif
         else  0  endif endif endif endif  }
;   "Set OtherZone:UnbalancedIAQLbl"      OtherZone:UnbalancedIAQLbl =    ; SAC 12/16/19
;      {  if (IAQDisabled < 1 .AND. MinIAQCFM > 0.05 .AND. IAQCFMIsBalanced == 0)
;         then  "Requires enclosure leakage testing for each dwelling unit"
;         else  UNDEFINED  endif  }

   "blast StdDesignIAQ properties if user defined and no BypassRuleLimits"    OtherZone:Action =     ; SAC 12/15/19
      {  if (IfValidAnd( ResProj:BypassRuleLimits > 0 )) then  UNCHANGED
         else if (LocalStatus( StdDesignIAQCFM           ) > 4 .OR.
                  LocalStatus( MaxStdDesignIAQWperCFM    ) > 4)
         then  EvalRulelist( "ForceReset_ResOtherZone_StdDesignIAQLimits", 1 )
         else  UNCHANGED  endif endif  }
                ;  LocalStatus( ApplyStdIAQCFMLimitToDRtg ) > 4 .OR.
                ;  LocalStatus( ApplyStdIAQMaxPwrToDRtg   ) > 4)
   "default OtherZone:StdDesignIAQCFM"   OtherZone:StdDesignIAQCFM  =
      {  if (IAQDisabled > 0) then  UNDEFINED
         else  max( MinIAQCFM, TotalIAQCFM )  endif  }
   "Set OtherZone:IAQCFMScaleFactor if appropriate"     OtherZone:IAQCFMScaleFactor  =
      {  if (IfValidAnd( StdDesignIAQCFM >= 0 )==0) then  UNDEFINED
         else if (IfValidAnd( IAQDisabled > 0 )) then  UNDEFINED
         else if (MinIAQCFM < 0.1) then  UNDEFINED
         else if (IfValidAnd( TotalIAQCFM > 0 )) then  StdDesignIAQCFM / TotalIAQCFM
         else  UNDEFINED  endif endif endif endif  }

   "Set OtherZone:MaxStdDesignIAQWperCFM - Max limit on standard design IAQ power" 
      OtherZone:MaxStdDesignIAQWperCFM         = {  1.2  }
   "Set OtherZone:MaxStdDesignIAQPower - Max IAQ power (MaxStdDesignIAQWperCFM * StdDesignIAQCFM)"   ; SAC 12/15/19
      OtherZone:MaxStdDesignIAQPower           = {  MaxStdDesignIAQWperCFM * ValidOr( StdDesignIAQCFM, 0 )  }

   ; inputs for creation of AirSys to serve active ResOtherZn - SAC 05/17/22
   "Set ResOtherZn:AirSys_WizDlgDims[1]-Wd"  ResOtherZn:AirSys_WizDlgDims[1]  = {  500  }
   "Set ResOtherZn:AirSys_WizDlgDims[2]-Ht"  ResOtherZn:AirSys_WizDlgDims[2]  = {  500  }
   "Set ResOtherZn:AirSys_NameRoot"          ResOtherZn:AirSys_NameRoot  = {  substr( Name, 0, 16 )  }
   ; "Set ResOtherZn:AirSys_Type",             BEMP_Sym,  1,  "Type of AirSys to create & assign to this ResOtherZn",  ""  
   ; "Set ResOtherZn:AirSys_HtgType",          BEMP_Sym,  1,  "Type of AirSys heating coil",  ""  
   ; "Set ResOtherZn:AirSys_EconoType",        BEMP_Sym,  1,  "Type of economizer for the AirSys (or none)",  "" 
   ; "Set ResOtherZn:AirSys_HtRecovType",      BEMP_Sym,  1,  "Type of heat recovery device for the AirSys (or none)",  "" 
   
   "Backward compat for ResOtherZn if IAQFanOption was set to default." ResOtherZn:Action =
    { if( Proj:DefaultingRounds = 1 .AND. 
          ( IfValidAnd( IAQOption = 4 ) .OR. IfValidAnd( IAQOption = 5 ) .OR. IfValidAnd( IAQOption = 6 ) .OR.
            ( LocalStatus( IAQOption ) <= 4 .AND. 
              LocalCompAssigned( IAQFanRef[1] ) = 0 .AND. LocalCompAssigned( IAQFanRef[2] ) = 0 .AND. 
              LocalCompAssigned( IAQFanRef[3] ) = 0 .AND. LocalCompAssigned( IAQFanRef[4] ) = 0 ) ) )
      then EvalRulelist( "Create_Default_ResOtherZnIAQFan", 1 )
      else UNCHANGED
      endif }

END
;*************************************************************************


;*************************************************************************
RULELIST "PostProposedInput_ResOtherZone" 1 0 0 1
;*************************************************************************

   "Set OtherZone:HtgSetptSchRef"      OtherZone:HtgSetptSchRef  =     ; SAC 12/23/19 - MFamProto
      {  if (SpcFunc < 200) then  UNDEFINED
         else  RuleLibrary( Sch, SpaceFunctionGroups:HtgTstatSchRef( "FuncGroup", EnumString( FuncSchGrp ) ) )
         endif  }
   "Set OtherZone:ClgSetptSchRef"      OtherZone:ClgSetptSchRef  =     ; SAC 12/23/19 - MFamProto
      {  if (SpcFunc < 200) then  UNDEFINED
         else  RuleLibrary( Sch, SpaceFunctionGroups:ClgTstatSchRef( "FuncGroup", EnumString( FuncSchGrp ) ) )
         endif  }

   "Set OtherZone:IntLtgRegSchRef"     OtherZone:IntLtgRegSchRef  =     ; SAC 10/5/19 - MFamProto
      {  if (SpcFunc < 200) then  UNDEFINED
         else  RuleLibrary( Sch, SpaceFunctionGroups:IntLtgRegSchRef( "FuncGroup", EnumString( FuncSchGrp ) ) )
         endif  }

   "Set OtherZone:OccSchRef"           OtherZone:OccSchRef  =           ; SAC 10/7/19 - MFamProto
      {  if (SpcFunc < 200 .OR. IfValidAnd( MinOccDensSim > 0)==0) then  UNDEFINED
         else  RuleLibrary( Sch, SpaceFunctionGroups:OccSchRef( "FuncGroup", EnumString( FuncSchGrp ) ) )
         endif  }

   "Set OtherZone:RecptSchRef"      OtherZone:RecptSchRef  =
      {  if (LocalStatus( RecptPwrDens ) = 0) then  UNDEFINED
         else  RuleLibrary( Sch, SpaceFunctionGroups:RecptSchRef( "FuncGroup", EnumString( FuncSchGrp ) ) )
         endif  }

END
;*************************************************************************

;************************************************************************* ; SAC 2/25/20
RULELIST "ForceReset_ResOtherZone_StdDesignIAQLimits" 1 0 0 0
   "Blast OtherZone:StdDesignIAQCFM"              OtherZone:StdDesignIAQCFM             = {  UNDEFINED  }
;   "Blast OtherZone:ApplyStdIAQCFMLimitToDRtg"    OtherZone:ApplyStdIAQCFMLimitToDRtg   = {  UNDEFINED  }
   "Blast OtherZone:MaxStdDesignIAQWperCFM"       OtherZone:MaxStdDesignIAQWperCFM      = {  UNDEFINED  }
;   "Blast OtherZone:ApplyStdIAQMaxPwrToDRtg"      OtherZone:ApplyStdIAQMaxPwrToDRtg     = {  UNDEFINED  }
END
;*************************************************************************

;*************************************************************************
RULELIST "Create_Default_ResOtherZnIAQFan"  1 0 1 1

   "Post message to log that default IAQFan will be created."  ResOtherZn:Action =
       { PostWarning("ResidentialOtherZone '%s' is using default minimum IAQ fan
                      option which is deprecated. IAQOption is set to 
                      Individual IAQ Fan and a default fan is created.", Name) }
                      
   "Blast ResOtherZn:IAQFanRef"          ResOtherZn:IAQFanRef[1] = { UNDEFINED }
   "Blast ResOtherZn:IAQFanRef"          ResOtherZn:IAQFanRef[2] = { UNDEFINED }
   "Blast ResOtherZn:IAQFanRef"          ResOtherZn:IAQFanRef[3] = { UNDEFINED }
   "Blast ResOtherZn:IAQFanRef"          ResOtherZn:IAQFanRef[4] = { UNDEFINED }
   "Blast ResOtherZn:IAQFanCnt"          ResOtherZn:IAQFanCnt[1] = { UNDEFINED }
   "Blast ResOtherZn:IAQFanCnt"          ResOtherZn:IAQFanCnt[2] = { UNDEFINED }
   "Blast ResOtherZn:IAQFanCnt"          ResOtherZn:IAQFanCnt[3] = { UNDEFINED }
   "Blast ResOtherZn:IAQFanCnt"          ResOtherZn:IAQFanCnt[4] = { UNDEFINED }
                      
   "Set ResOtherZn:IAQFanRef[1]"  ResOtherZn:IAQFanRef[1] = 
       { CreateComp( ResIAQFan, Local( Name ) + "-IAQFan" ) }

   "Set ResOtherZn:IAQFanRef[1]:IAQCFM"  ResOtherZn:IAQFanRef[1]:IAQCFM = 
       { MinIAQCFM }

   "Set ResOtherZn:IAQFanRef[1]:WperCFMIAQ"  ResOtherZn:IAQFanRef[1]:WperCFMIAQ = 
       { if( IAQOption = 4 .OR. LocalStatus( IAQOption ) <= 4 ) 
         then 0.70 ; Default Minimum Balanced IAQ Fan
         else 0.35 ; Minimum Supply IAQ Fan / Minimum Exhaust IAQ Fan
         endif }

   "Set ResOtherZn:IAQFanRef[1]:IAQFanType"  ResOtherZn:IAQFanRef[1]:IAQFanType = 
       { switch( Local( IAQOption ) )
          case  4  :  3 ; Default Minimum Balanced IAQ Fan
          case  5  :  1 ; Minimum Exhaust IAQ Fan
          case  6  :  2 ; Minimum Supply IAQ Fan
          default  :  3 ; Old default was Balanced IAQ Fan
         endswitch }

   "Set ResOtherZn:IAQFanRef[1]:IncludesRecov"  ResOtherZn:IAQFanRef[1]:IncludesRecov = { 0 }
   
   "Set ResOtherZn:IAQFanRef[1]:IAQRecovEffect"  ResOtherZn:IAQFanRef[1]:IAQRecovEffect = { 0 }   
   
   "Set ResOtherZn:IAQOption"  ResOtherZn:IAQOption = { 2 }         
   
END
;*************************************************************************
;*************************************************************************

ENDFILE

