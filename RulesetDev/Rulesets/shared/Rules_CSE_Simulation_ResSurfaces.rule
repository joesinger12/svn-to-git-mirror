; -------------------------------------------------------------------------
; Rules pertaining to:   Setup Surface objects for CSE Energy Simulation
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2014, California Energy Commission
; Copyright (c) 2012-2014, Wrightsoft Corporation
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
; STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------

ENUM_PROPERTIES_VALUE   ; ensures retrieval/logic/us of enum properties assume numeric value (alternative is ENUM_PROPERTIES_STRING)

;*************************************************************************
RULELIST "CSE_SimulationPrep_Surfaces" 1 0 0 1
;*************************************************************************
 ; CSE SURFACE creation & defaulting
	; UNDERGROUND WALLS
	"Create new SURFACE components"					ResUndgrWall:Action								= {	EvalRulelist( "Create_UndWall_SURFACEs", 1 )  }

	"Set ResUndgrWall:FrameSURFACE:Parent"				ResUndgrWall:FrameSURFACE:Parent			= {	Parent( CSE_ZONE )  }
	"Set ResUndgrWall:CavitySURFACE:Parent"				ResUndgrWall:CavitySURFACE:Parent			= {	Parent( CSE_ZONE )  }

	"Set ResUndgrWall:FrameSURFACE:SourceUndWall"		ResUndgrWall:FrameSURFACE:SourceUndWall	= {	Local( Name )  }
	"Set ResUndgrWall:CavitySURFACE:SourceUndWall"		ResUndgrWall:CavitySURFACE:SourceUndWall	= {	Local( Name )  }

	"Set ResUndgrWall:FrameSURFACE:sfCon"					ResUndgrWall:FrameSURFACE:sfCon				= {	if (LocalCompAssigned( Construction:cseFrmCONS ) == 0) then  UNDEFINED
																														else  LocalRef( Construction:cseFrmCONS )  endif  }
	"Set ResUndgrWall:CavitySURFACE:sfCon"				ResUndgrWall:CavitySURFACE:sfCon			= {	if (LocalCompAssigned( Construction:cseCavCONS ) == 0) then  UNDEFINED
																														else  LocalRef( Construction:cseCavCONS )  endif  }

	"Set ResUndgrWall:FrameSURFACE:sfArea"				ResUndgrWall:FrameSURFACE:sfArea			= {	Local( Area ) *      Local( FramingFactor )  }
	"Set ResUndgrWall:CavitySURFACE:sfArea"				ResUndgrWall:CavitySURFACE:sfArea			= {	Local( Area ) * (1 - Local( FramingFactor ))  }

	"Set ResUndgrWall:CavitySURFACE:sfType"				ResUndgrWall:CavitySURFACE:sfType			= {	"Wall"  }
	"Set ResUndgrWall:FrameSURFACE:sfType"				ResUndgrWall:FrameSURFACE:sfType			= {	"Wall"  }

	"Set ResUndgrWall:CavitySURFACE:sfExCnd"				ResUndgrWall:CavitySURFACE:sfExCnd			= {	"Ground"  }
	"Set ResUndgrWall:FrameSURFACE:sfExCnd"				ResUndgrWall:FrameSURFACE:sfExCnd			= {	"Ground"  }

	"Set ResUndgrWall:CavitySURFACE:sfDepthBG"			ResUndgrWall:CavitySURFACE:sfDepthBG		= {	if (IfValidAnd( DepthBelowGrade >= 0 )) then  DepthBelowGrade  else  UNDEFINED  endif  }
	"Set ResUndgrWall:FrameSURFACE:sfDepthBG"			ResUndgrWall:FrameSURFACE:sfDepthBG		= {	if (IfValidAnd( DepthBelowGrade >= 0 )) then  DepthBelowGrade  else  UNDEFINED  endif  }

;	"Set ResUndgrWall:CavitySURFACE:sfTilt"				ResUndgrWall:CavitySURFACE:sfTilt			= {	Local( Tilt )  }
;	"Set ResUndgrWall:FrameSURFACE:sfTilt"				ResUndgrWall:FrameSURFACE:sfTilt			= {	Local( Tilt )  }

;	"Set ResUndgrWall:CavitySURFACE:sfAzm"				ResUndgrWall:CavitySURFACE:sfAzm			= {	if (LocalStatus( OrientationValue ) > 0) then  Local( OrientationValue )  else  UNDEFINED  endif  }
;	"Set ResUndgrWall:FrameSURFACE:sfAzm"					ResUndgrWall:FrameSURFACE:sfAzm				= {	if (LocalStatus( OrientationValue ) > 0) then  Local( OrientationValue )  else  UNDEFINED  endif  }

;	"Set ResUndgrWall:CavitySURFACE:sfExAbs"				ResUndgrWall:CavitySURFACE:sfExAbs			= {	if (LocalStatus( Absorptivity ) > 0) then  Local( Absorptivity )  else  UNDEFINED  endif  }
;	"Set ResUndgrWall:FrameSURFACE:sfExAbs"				ResUndgrWall:FrameSURFACE:sfExAbs			= {	if (LocalStatus( Absorptivity ) > 0) then  Local( Absorptivity )  else  UNDEFINED  endif  }

	"Set ResUndgrWall:CavitySURFACE:sfModel"				ResUndgrWall:CavitySURFACE:sfModel			= {	"Forward_Difference"  }
	"Set ResUndgrWall:FrameSURFACE:sfModel"				ResUndgrWall:FrameSURFACE:sfModel			= {	"Forward_Difference"  }


	; INTERIOR WALLS
	"Create new SURFACE components"					ResIntWall:Action								= {	EvalRulelist( "Create_IntWall_SURFACEs", 1 )  }

	"Set ResIntWall:FrameSURFACE:Parent"				ResIntWall:FrameSURFACE:Parent			= {	Parent( CSE_ZONE )  }
	"Set ResIntWall:CavitySURFACE:Parent"				ResIntWall:CavitySURFACE:Parent			= {	Parent( CSE_ZONE )  }

	"Set ResIntWall:FrameSURFACE:SourceIntWall"		ResIntWall:FrameSURFACE:SourceIntWall	= {	Local( Name )  }
	"Set ResIntWall:CavitySURFACE:SourceIntWall"		ResIntWall:CavitySURFACE:SourceIntWall	= {	Local( Name )  }

	"Set ResIntWall:FrameSURFACE:sfCon"					ResIntWall:FrameSURFACE:sfCon				= {	if (LocalCompAssigned( Construction:cseFrmCONS ) == 0) then  UNDEFINED
																														else  LocalRef( Construction:cseFrmCONS )  endif  }
	"Set ResIntWall:CavitySURFACE:sfCon"				ResIntWall:CavitySURFACE:sfCon			= {	if (LocalCompAssigned( Construction:cseCavCONS ) == 0) then  UNDEFINED
																														else  LocalRef( Construction:cseCavCONS )  endif  }

;	"Set ResIntWall:FrameSURFACE:sfArea"				ResIntWall:FrameSURFACE:sfArea			= {	Local( Area ) *      Local( FramingFactor )  }
;	"Set ResIntWall:CavitySURFACE:sfArea"				ResIntWall:CavitySURFACE:sfArea			= {	Local( Area ) * (1 - Local( FramingFactor ))  }
; SAC 5/8/15 - replaced above w/ following to ensure that IntWall cavity & frame areas are based on the NetWallArea (not input area) to account for child Doors (issue 535)
	"Set ResIntWall:FrameSURFACE:sfArea"				ResIntWall:FrameSURFACE:sfArea			= {	                 Local( NetWallArea ) * Local( FramingFactor )  }
	"Set ResIntWall:CavitySURFACE:sfArea"				ResIntWall:CavitySURFACE:sfArea			= {	Local( Area ) - (Local( NetWallArea ) * Local( FramingFactor ))  }

	"Set ResIntWall:CavitySURFACE:sfType"				ResIntWall:CavitySURFACE:sfType			= {	"Wall"  }
	"Set ResIntWall:FrameSURFACE:sfType"				ResIntWall:FrameSURFACE:sfType			= {	"Wall"  }

	"Set ResIntWall:CavitySURFACE:sfTilt"				ResIntWall:CavitySURFACE:sfTilt			= {	90  }
	"Set ResIntWall:FrameSURFACE:sfTilt"				ResIntWall:FrameSURFACE:sfTilt			= {	90  }

	"Set ResIntWall:CavitySURFACE:sfAzm"				ResIntWall:CavitySURFACE:sfAzm			= {	0  }
	"Set ResIntWall:FrameSURFACE:sfAzm"					ResIntWall:FrameSURFACE:sfAzm				= {	0  }

;	"Set ResIntWall:CavitySURFACE:sfExAbs"				ResIntWall:CavitySURFACE:sfExAbs			= {	if (LocalStatus( Absorptivity ) > 0) then  Local( Absorptivity )  else  UNDEFINED  endif  }
;	"Set ResIntWall:FrameSURFACE:sfExAbs"				ResIntWall:FrameSURFACE:sfExAbs			= {	if (LocalStatus( Absorptivity ) > 0) then  Local( Absorptivity )  else  UNDEFINED  endif  }

	"Set ResIntWall:CavitySURFACE:sfModel"				ResIntWall:CavitySURFACE:sfModel			= {	"Forward_Difference"  }
	"Set ResIntWall:FrameSURFACE:sfModel"				ResIntWall:FrameSURFACE:sfModel			= {	"Forward_Difference"  }

  ; SAC 10/3/13 - added logic to model surfaces where IsPartySurface toggle On as Adiabatic
  ; ensure CSE_ZONE actually defined before setting AdjZn to AdjZn and assigning sfAdjZn - SAC 10/27/21 (MFam)
	"Set ResIntWall:CavitySURFACE:sfExCnd"				ResIntWall:CavitySURFACE:sfExCnd			= {	if ((IsPartySurface < 0.5 .OR. OtherSideModeled > 0.5) .AND. LocalCompAssigned( Outside ) .AND. LocalCompAssigned( Outside:CSE_ZONE )) then  "AdjZn"  else  "Adiabatic"  endif  }
	"Set ResIntWall:FrameSURFACE:sfExCnd"				ResIntWall:FrameSURFACE:sfExCnd			= {	if ((IsPartySurface < 0.5 .OR. OtherSideModeled > 0.5) .AND. LocalCompAssigned( Outside ) .AND. LocalCompAssigned( Outside:CSE_ZONE )) then  "AdjZn"  else  "Adiabatic"  endif  }

	"Set ResIntWall:CavitySURFACE:sfAdjZn"				ResIntWall:CavitySURFACE:sfAdjZn			= {	if ((IsPartySurface < 0.5 .OR. OtherSideModeled > 0.5) .AND. LocalCompAssigned( Outside ) .AND. LocalCompAssigned( Outside:CSE_ZONE )) then  LocalRef( Outside:CSE_ZONE )  else  UNDEFINED  endif  }
	"Set ResIntWall:FrameSURFACE:sfAdjZn"				ResIntWall:FrameSURFACE:sfAdjZn			= {	if ((IsPartySurface < 0.5 .OR. OtherSideModeled > 0.5) .AND. LocalCompAssigned( Outside ) .AND. LocalCompAssigned( Outside:CSE_ZONE )) then  LocalRef( Outside:CSE_ZONE )  else  UNDEFINED  endif  }


	; CATHEDRAL CEILINGS
	"Create new SURFACE components"		ResCathedralCeiling:Action				= {	EvalRulelist( "Create_CathedralCeiling_SURFACEs", 1 )  }

	"Set ResCathedralCeiling:FrameSURFACE:Parent"		ResCathedralCeiling:FrameSURFACE:Parent			= {	Parent( CSE_ZONE )  }
	"Set ResCathedralCeiling:CavitySURFACE:Parent"		ResCathedralCeiling:CavitySURFACE:Parent			= {	Parent( CSE_ZONE )  }

	"Set ResCathedralCeiling:FrameSURFACE:SourceCathClg"		ResCathedralCeiling:FrameSURFACE:SourceCathClg	= {	Local( Name )  }
	"Set ResCathedralCeiling:CavitySURFACE:SourceCathClg"		ResCathedralCeiling:CavitySURFACE:SourceCathClg	= {	Local( Name )  }

	"Set ResCathedralCeiling:FrameSURFACE:sfCon"			ResCathedralCeiling:FrameSURFACE:sfCon			= {	if (LocalCompAssigned( Construction:cseFrmCONS ) == 0) then  UNDEFINED
																																	else  LocalRef( Construction:cseFrmCONS )  endif  }
	"Set ResCathedralCeiling:CavitySURFACE:sfCon"		ResCathedralCeiling:CavitySURFACE:sfCon		= {	if (LocalCompAssigned( Construction:cseCavCONS ) == 0) then  UNDEFINED
																																	else  LocalRef( Construction:cseCavCONS )  endif  }

	"Set ResCathedralCeiling:FrameSURFACE:sfArea"		ResCathedralCeiling:FrameSURFACE:sfArea		= {	                 Local( NetWallArea ) * Local( FramingFactor )  }
	"Set ResCathedralCeiling:CavitySURFACE:sfArea"		ResCathedralCeiling:CavitySURFACE:sfArea		= {	Local( Area ) - (Local( NetWallArea ) * Local( FramingFactor ))  }

	"Set ResCathedralCeiling:FrameSURFACE:sfType"		ResCathedralCeiling:FrameSURFACE:sfType		= {	"Ceiling"  }
	"Set ResCathedralCeiling:CavitySURFACE:sfType"		ResCathedralCeiling:CavitySURFACE:sfType		= {	"Ceiling"  }

	"Set ResCathedralCeiling:FrameSURFACE:sfTilt"		ResCathedralCeiling:FrameSURFACE:sfTilt		= {	Local( RoofTilt )  }
	"Set ResCathedralCeiling:CavitySURFACE:sfTilt"		ResCathedralCeiling:CavitySURFACE:sfTilt		= {	Local( RoofTilt )  }

	"Set ResCathedralCeiling:FrameSURFACE:sfAzm"			ResCathedralCeiling:FrameSURFACE:sfAzm			= {	if (LocalStatus( OrientationValue ) > 0) then  OrientationValue  else  UNDEFINED  endif  }
	"Set ResCathedralCeiling:CavitySURFACE:sfAzm"		ResCathedralCeiling:CavitySURFACE:sfAzm		= {	if (LocalStatus( OrientationValue ) > 0) then  OrientationValue  else  UNDEFINED  endif  }

	"Set ResCathedralCeiling:FrameSURFACE:sfExAbs"		ResCathedralCeiling:FrameSURFACE:sfExAbs		= {	if (LocalStatus( RoofSolReflect ) > 0) then  max( 0, 1 - RoofSolReflect )  else  UNDEFINED  endif  }
	"Set ResCathedralCeiling:CavitySURFACE:sfExAbs"		ResCathedralCeiling:CavitySURFACE:sfExAbs		= {	if (LocalStatus( RoofSolReflect ) > 0) then  max( 0, 1 - RoofSolReflect )  else  UNDEFINED  endif  }

	"Set ResCathedralCeiling:FrameSURFACE:sfExEpsLW"	ResCathedralCeiling:FrameSURFACE:sfExEpsLW	= {	if (LocalStatus( RoofEmiss ) > 0) then  RoofEmiss  else  UNDEFINED  endif  }
	"Set ResCathedralCeiling:CavitySURFACE:sfExEpsLW"	ResCathedralCeiling:CavitySURFACE:sfExEpsLW	= {	if (LocalStatus( RoofEmiss ) > 0) then  RoofEmiss  else  UNDEFINED  endif  }

	"Set ResCathedralCeiling:FrameSURFACE:sfModel"		ResCathedralCeiling:FrameSURFACE:sfModel		= {	"Forward_Difference"  }
	"Set ResCathedralCeiling:CavitySURFACE:sfModel"		ResCathedralCeiling:CavitySURFACE:sfModel		= {	"Forward_Difference"  }


	; CEILINGS BELOW ATTIC
	"Create new SURFACE components"		ResCeilingBelowAttic:Action				= {	EvalRulelist( "Create_CeilingBelowAttic_SURFACEs", 1 )  }

	"Set ResCeilingBelowAttic:FrameSURFACE:Parent"		ResCeilingBelowAttic:FrameSURFACE:Parent		= {	Parent( CSE_ZONE )  }
	"Set ResCeilingBelowAttic:CavitySURFACE:Parent"		ResCeilingBelowAttic:CavitySURFACE:Parent		= {	Parent( CSE_ZONE )  }

	"Set ResCeilingBelowAttic:FrameSURFACE:SourceClgBlwAtc"		ResCeilingBelowAttic:FrameSURFACE:SourceClgBlwAtc	= {	Local( Name )  }
	"Set ResCeilingBelowAttic:CavitySURFACE:SourceClgBlwAtc"		ResCeilingBelowAttic:CavitySURFACE:SourceClgBlwAtc	= {	Local( Name )  }

	"Set ResCeilingBelowAttic:FrameSURFACE:sfCon"		ResCeilingBelowAttic:FrameSURFACE:sfCon		= {	if (LocalCompAssigned( Construction:cseFrmCONS ) == 0) then  UNDEFINED
																																	else  LocalRef( Construction:cseFrmCONS )  endif  }
	"Set ResCeilingBelowAttic:CavitySURFACE:sfCon"		ResCeilingBelowAttic:CavitySURFACE:sfCon		= {	if (LocalCompAssigned( Construction:cseCavCONS ) == 0) then  UNDEFINED
																																	else  LocalRef( Construction:cseCavCONS )  endif  }

;	"Set ResCeilingBelowAttic:FrameSURFACE:sfArea"		ResCeilingBelowAttic:FrameSURFACE:sfArea		= {	                 Local( Area ) * LocalRef( Construction:FramingFactor )  }
;	"Set ResCeilingBelowAttic:CavitySURFACE:sfArea"		ResCeilingBelowAttic:CavitySURFACE:sfArea		= {	Local( Area ) - (Local( Area ) * LocalRef( Construction:FramingFactor ))  }
; SAC 12/4/12 - reduce ceiling area by attic edge area
	"Set ResCeilingBelowAttic:FrameSURFACE:sfArea"		ResCeilingBelowAttic:FrameSURFACE:sfArea		= {	                           (Area - AtcEdg_TotArea) * LocalRef( Construction:FramingFactor )  }
	"Set ResCeilingBelowAttic:CavitySURFACE:sfArea"		ResCeilingBelowAttic:CavitySURFACE:sfArea		= {	(Area - AtcEdg_TotArea) - ((Area - AtcEdg_TotArea) * LocalRef( Construction:FramingFactor ))  }

	"Set ResCeilingBelowAttic:FrameSURFACE:sfType"		ResCeilingBelowAttic:FrameSURFACE:sfType		= {	"Ceiling"  }
	"Set ResCeilingBelowAttic:CavitySURFACE:sfType"		ResCeilingBelowAttic:CavitySURFACE:sfType		= {	"Ceiling"  }

	"Set ResCeilingBelowAttic:FrameSURFACE:sfExCnd"		ResCeilingBelowAttic:FrameSURFACE:sfExCnd		= {	if (LocalCompAssigned( AtticZone ) < 0.5) then  "Adiabatic"
																																	else if (LocalCompAssigned( AtticZone:CSE_ZONE ) < 0.5) then  "Adiabatic"  else  "AdjZn"  endif endif  }
	"Set ResCeilingBelowAttic:CavitySURFACE:sfExCnd"	ResCeilingBelowAttic:CavitySURFACE:sfExCnd	= {	FrameSURFACE:sfExCnd  }

	"Set ResCeilingBelowAttic:FrameSURFACE:sfAdjZn"		ResCeilingBelowAttic:FrameSURFACE:sfAdjZn		= {	if (EnumString( FrameSURFACE:sfExCnd  ) == "Adiabatic") then  UNDEFINED  else  AtticZone:CSE_ZONE  endif  }
	"Set ResCeilingBelowAttic:CavitySURFACE:sfAdjZn"	ResCeilingBelowAttic:CavitySURFACE:sfAdjZn	= {	if (EnumString( CavitySURFACE:sfExCnd ) == "Adiabatic") then  UNDEFINED  else  AtticZone:CSE_ZONE  endif  }

	"Set ResCeilingBelowAttic:FrameSURFACE:sfModel"		ResCeilingBelowAttic:FrameSURFACE:sfModel		= {	"Forward_Difference"  }
	"Set ResCeilingBelowAttic:CavitySURFACE:sfModel"	ResCeilingBelowAttic:CavitySURFACE:sfModel	= {	"Forward_Difference"  }


	; ATTIC EDGE CATHEDRAL CEILINGS
	"Create new WA Cathedral SURFACE components"		ResCeilingBelowAttic:Action				= {	if (AtcEdg_WAArea < 0.1) then  UNCHANGED
																															else	EvalRulelist( "Create_AtticEdgeWACathedralCeiling_SURFACEs", 1 )  endif  }
	"Create new WB Cathedral SURFACE components"		ResCeilingBelowAttic:Action				= {	if (AtcEdg_WBArea < 0.1) then  UNCHANGED
																															else	EvalRulelist( "Create_AtticEdgeWBCathedralCeiling_SURFACEs", 1 )  endif  }

	"Set ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:Parent"					ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:Parent				= {	Parent( CSE_ZONE )  }
	"Set ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:Parent"					ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:Parent				= {	Parent( CSE_ZONE )  }
	"Set ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:Parent"					ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:Parent				= {	Parent( CSE_ZONE )  }
	"Set ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:Parent"					ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:Parent				= {	Parent( CSE_ZONE )  }

	"Set ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:SourceClgBlwAtc"		ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:SourceClgBlwAtc	= {	Local( Name )  }
	"Set ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:SourceClgBlwAtc"		ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:SourceClgBlwAtc	= {	Local( Name )  }
	"Set ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:SourceClgBlwAtc"		ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:SourceClgBlwAtc	= {	Local( Name )  }
	"Set ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:SourceClgBlwAtc"		ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:SourceClgBlwAtc	= {	Local( Name )  }

	"Set ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:sfCon"		ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:sfCon	= {	if (LocalCompAssigned( AtcEdg_WACons:cseFrmCONS ) == 0) then  UNDEFINED
																																						else  LocalRef( AtcEdg_WACons:cseFrmCONS )  endif  }
	"Set ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:sfCon"		ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:sfCon	= {	if (LocalCompAssigned( AtcEdg_WACons:cseCavCONS ) == 0) then  UNDEFINED
																																						else  LocalRef( AtcEdg_WACons:cseCavCONS )  endif  }
	"Set ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:sfCon"		ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:sfCon	= {	if (LocalCompAssigned( AtcEdg_WBCons:cseFrmCONS ) == 0) then  UNDEFINED
																																						else  LocalRef( AtcEdg_WBCons:cseFrmCONS )  endif  }
	"Set ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:sfCon"		ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:sfCon	= {	if (LocalCompAssigned( AtcEdg_WBCons:cseCavCONS ) == 0) then  UNDEFINED
																																						else  LocalRef( AtcEdg_WBCons:cseCavCONS )  endif  }

	"Set ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:sfArea"		ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:sfArea	= {	                 AtcEdg_WAArea * LocalRef( AtcEdg_WACons:FramingFactor )  }
	"Set ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:sfArea"		ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:sfArea	= {	AtcEdg_WAArea - (AtcEdg_WAArea * LocalRef( AtcEdg_WACons:FramingFactor ))  }
	"Set ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:sfArea"		ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:sfArea	= {	                 AtcEdg_WBArea * LocalRef( AtcEdg_WBCons:FramingFactor )  }
	"Set ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:sfArea"		ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:sfArea	= {	AtcEdg_WBArea - (AtcEdg_WBArea * LocalRef( AtcEdg_WBCons:FramingFactor ))  }

	"Set ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:sfType"		ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:sfType	= {	"Ceiling"  }
	"Set ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:sfType"		ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:sfType	= {	"Ceiling"  }
	"Set ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:sfType"		ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:sfType	= {	"Ceiling"  }
	"Set ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:sfType"		ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:sfType	= {	"Ceiling"  }

; Can't specify Tilt unless we also specify Azimuth
;	"Set ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:sfTilt"		ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:sfTilt	= {	ResAttic:RoofTilt  }
;	"Set ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:sfTilt"		ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:sfTilt	= {	ResAttic:RoofTilt  }
;	"Set ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:sfTilt"		ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:sfTilt	= {	ResAttic:RoofTilt  }
;	"Set ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:sfTilt"		ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:sfTilt	= {	ResAttic:RoofTilt  }

; ADD OrientationValue ???
;	"Set ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:sfAzm"		ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:sfAzm		= {	if (LocalStatus( OrientationValue ) > 0) then  Local( OrientationValue )  else  UNDEFINED  endif  }
;	"Set ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:sfAzm"		ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:sfAzm		= {	if (LocalStatus( OrientationValue ) > 0) then  Local( OrientationValue )  else  UNDEFINED  endif  }
;	"Set ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:sfAzm"		ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:sfAzm		= {	if (LocalStatus( OrientationValue ) > 0) then  Local( OrientationValue )  else  UNDEFINED  endif  }
;	"Set ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:sfAzm"		ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:sfAzm		= {	if (LocalStatus( OrientationValue ) > 0) then  Local( OrientationValue )  else  UNDEFINED  endif  }

	"Set ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:sfExAbs"		ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:sfExAbs		= {	if (LocalCompAssigned( AtticZone ) < 0.5) then  0
																																							else	max( 0, 1 - ValidOr( AtticZone:RoofSolReflect, 1 ) )  endif  }
	"Set ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:sfExAbs"	ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:sfExAbs	= {	if (LocalCompAssigned( AtticZone ) < 0.5) then  0
																																							else	max( 0, 1 - ValidOr( AtticZone:RoofSolReflect, 1 ) )  endif  }
	"Set ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:sfExAbs"		ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:sfExAbs		= {	if (LocalCompAssigned( AtticZone ) < 0.5) then  0
																																							else	max( 0, 1 - ValidOr( AtticZone:RoofSolReflect, 1 ) )  endif  }
	"Set ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:sfExAbs"	ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:sfExAbs	= {	if (LocalCompAssigned( AtticZone ) < 0.5) then  0
																																							else	max( 0, 1 - ValidOr( AtticZone:RoofSolReflect, 1 ) )  endif  }

	"Set ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:sfExEpsLW"	ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:sfExEpsLW	= {	if (LocalCompAssigned( AtticZone ) < 0.5) then  0
																																							else	ValidOr( AtticZone:RoofEmiss, 0 )  endif  }
	"Set ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:sfExEpsLW"	ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:sfExEpsLW	= {	if (LocalCompAssigned( AtticZone ) < 0.5) then  0
																																							else	ValidOr( AtticZone:RoofEmiss, 0 )  endif  }
	"Set ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:sfExEpsLW"	ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:sfExEpsLW	= {	if (LocalCompAssigned( AtticZone ) < 0.5) then  0
																																							else	ValidOr( AtticZone:RoofEmiss, 0 )  endif  }
	"Set ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:sfExEpsLW"	ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:sfExEpsLW	= {	if (LocalCompAssigned( AtticZone ) < 0.5) then  0
																																							else	ValidOr( AtticZone:RoofEmiss, 0 )  endif  }

	"Set ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:sfInEpsLW"	ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:sfInEpsLW	= {	0.9  }
	"Set ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:sfInEpsLW"	ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:sfInEpsLW	= {	0.9  }
	"Set ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:sfInEpsLW"	ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:sfInEpsLW	= {	0.9  }
	"Set ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:sfInEpsLW"	ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:sfInEpsLW	= {	0.9  }

	"Set ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:sfModel"		ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE:sfModel		= {	"Forward_Difference"  }
	"Set ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:sfModel"	ResCeilingBelowAttic:AtcEdg_WACavitySURFACE:sfModel	= {	"Forward_Difference"  }
	"Set ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:sfModel"		ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE:sfModel		= {	"Forward_Difference"  }
	"Set ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:sfModel"	ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE:sfModel	= {	"Forward_Difference"  }

	; INTERIOR CEILINGS   - SAC 8/25/14
	"Create new SURFACE components"							ResIntCeiling:Action								= {	EvalRulelist( "Create_InteriorCeiling_SURFACEs", 1 )  }

	"Set ResIntCeiling:FrameSURFACE:Parent"				ResIntCeiling:FrameSURFACE:Parent				= {	Parent( CSE_ZONE )  }
	"Set ResIntCeiling:CavitySURFACE:Parent"			ResIntCeiling:CavitySURFACE:Parent			= {	Parent( CSE_ZONE )  }

	"Set ResIntCeiling:FrameSURFACE:SourceIntClg"		ResIntCeiling:FrameSURFACE:SourceIntClg		= {	Local( Name )  }
	"Set ResIntCeiling:CavitySURFACE:SourceIntClg"	ResIntCeiling:CavitySURFACE:SourceIntClg	= {	Local( Name )  }

	"Set ResIntCeiling:FrameSURFACE:sfCon"				ResIntCeiling:FrameSURFACE:sfCon				= {	if (LocalCompAssigned( Construction:cseFrmCONS ) == 0) then  UNDEFINED
																																			else  LocalRef( Construction:cseFrmCONS )  endif  }
	"Set ResIntCeiling:CavitySURFACE:sfCon"				ResIntCeiling:CavitySURFACE:sfCon				= {	if (LocalCompAssigned( Construction:cseCavCONS ) == 0) then  UNDEFINED
																																			else  LocalRef( Construction:cseCavCONS )  endif  }

	"Set ResIntCeiling:FrameSURFACE:sfArea"				ResIntCeiling:FrameSURFACE:sfArea				= {	Local( Area ) *      Local( FramingFactor )  }
	"Set ResIntCeiling:CavitySURFACE:sfArea"			ResIntCeiling:CavitySURFACE:sfArea			= {	Local( Area ) * (1 - Local( FramingFactor ))  }

	"Set ResIntCeiling:CavitySURFACE:sfType"			ResIntCeiling:CavitySURFACE:sfType			= {	"Ceiling"  }
	"Set ResIntCeiling:FrameSURFACE:sfType"				ResIntCeiling:FrameSURFACE:sfType				= {	"Ceiling"  }

	"Set ResIntCeiling:CavitySURFACE:sfTilt"			ResIntCeiling:CavitySURFACE:sfTilt			= {	0  }
	"Set ResIntCeiling:FrameSURFACE:sfTilt"				ResIntCeiling:FrameSURFACE:sfTilt				= {	0  }

;	"Set ResIntCeiling:CavitySURFACE:sfExAbs"			ResIntCeiling:CavitySURFACE:sfExAbs			= {	if (LocalStatus( Absorptivity ) > 0) then  Local( Absorptivity )  else  UNDEFINED  endif  }
;	"Set ResIntCeiling:FrameSURFACE:sfExAbs"			ResIntCeiling:FrameSURFACE:sfExAbs			= {	if (LocalStatus( Absorptivity ) > 0) then  Local( Absorptivity )  else  UNDEFINED  endif  }

	"Set ResIntCeiling:CavitySURFACE:sfModel"			ResIntCeiling:CavitySURFACE:sfModel			= {	"Forward_Difference"  }
	"Set ResIntCeiling:FrameSURFACE:sfModel"			ResIntCeiling:FrameSURFACE:sfModel			= {	"Forward_Difference"  }

; EM 4/17/15 - added logic to model surfaces where IsPartySurface toggle On as Adiabatic
  ; ensure CSE_ZONE actually defined before setting AdjZn to AdjZn and assigning sfAdjZn - SAC 10/27/21 (MFam)
	"Set ResIntCeiling:CavitySURFACE:sfExCnd"				ResIntCeiling:CavitySURFACE:sfExCnd			= {	if ((IsPartySurface < 0.5 .OR. OtherSideModeled > 0.5) .AND. LocalCompAssigned( Outside ) .AND. LocalCompAssigned( Outside:CSE_ZONE )) then  "AdjZn"  else  "Adiabatic"  endif  }
	"Set ResIntCeiling:FrameSURFACE:sfExCnd"				ResIntCeiling:FrameSURFACE:sfExCnd			= {	if ((IsPartySurface < 0.5 .OR. OtherSideModeled > 0.5) .AND. LocalCompAssigned( Outside ) .AND. LocalCompAssigned( Outside:CSE_ZONE )) then  "AdjZn"  else  "Adiabatic"  endif  }

	"Set ResIntCeiling:CavitySURFACE:sfAdjZn"				ResIntCeiling:CavitySURFACE:sfAdjZn			= {	if ((IsPartySurface < 0.5 .OR. OtherSideModeled > 0.5) .AND. LocalCompAssigned( Outside ) .AND. LocalCompAssigned( Outside:CSE_ZONE )) then  LocalRef( Outside:CSE_ZONE )  else  UNDEFINED  endif  }
	"Set ResIntCeiling:FrameSURFACE:sfAdjZn"				ResIntCeiling:FrameSURFACE:sfAdjZn			= {	if ((IsPartySurface < 0.5 .OR. OtherSideModeled > 0.5) .AND. LocalCompAssigned( Outside ) .AND. LocalCompAssigned( Outside:CSE_ZONE )) then  LocalRef( Outside:CSE_ZONE )  else  UNDEFINED  endif  }
;	"Set ResIntCeiling:CavitySURFACE:sfExCnd"			ResIntCeiling:CavitySURFACE:sfExCnd			= {	if (LocalCompAssigned( Outside )) then  "AdjZn"  else  "Adiabatic"  endif  }
;	"Set ResIntCeiling:FrameSURFACE:sfExCnd"			ResIntCeiling:FrameSURFACE:sfExCnd			= {	if (LocalCompAssigned( Outside )) then  "AdjZn"  else  "Adiabatic"  endif  }
;
;	"Set ResIntCeiling:CavitySURFACE:sfAdjZn"			ResIntCeiling:CavitySURFACE:sfAdjZn			= {	if (LocalCompAssigned( Outside )) then  LocalRef( Outside:CSE_ZONE )  else  UNDEFINED  endif  }
;	"Set ResIntCeiling:FrameSURFACE:sfAdjZn"			ResIntCeiling:FrameSURFACE:sfAdjZn			= {	if (LocalCompAssigned( Outside )) then  LocalRef( Outside:CSE_ZONE )  else  UNDEFINED  endif  }


	; EXTERIOR WALLS
;	"Blast ResExtWall:CavitySURFACE"			ResExtWall:CavitySURFACE	= {	if (LocalCompAssigned( CavitySURFACE )) then  DeleteComp()  else  UNCHANGED  endif  }
;	"Blast ResExtWall:FrameSURFACE"			ResExtWall:FrameSURFACE		= {	if (LocalCompAssigned( FrameSURFACE  )) then  DeleteComp()  else  UNCHANGED  endif  }

	"Create new SURFACE components"		ResExtWall:Action				= {	EvalRulelist( "Create_ExtWall_SURFACEs", 1 )  }

	"Set ResExtWall:FrameSURFACE:Parent"				ResExtWall:FrameSURFACE:Parent			= {	Parent( CSE_ZONE )  }
	"Set ResExtWall:CavitySURFACE:Parent"				ResExtWall:CavitySURFACE:Parent			= {	Parent( CSE_ZONE )  }

	"Set ResExtWall:FrameSURFACE:SourceExtWall"		ResExtWall:FrameSURFACE:SourceExtWall	= {	Local( Name )  }
	"Set ResExtWall:CavitySURFACE:SourceExtWall"		ResExtWall:CavitySURFACE:SourceExtWall	= {	Local( Name )  }

	"Set ResExtWall:FrameSURFACE:sfCon"					ResExtWall:FrameSURFACE:sfCon				= {	if (LocalCompAssigned( Construction:cseFrmCONS ) == 0) then  UNDEFINED
																														else  LocalRef( Construction:cseFrmCONS )  endif  }
	"Set ResExtWall:CavitySURFACE:sfCon"				ResExtWall:CavitySURFACE:sfCon			= {	if (LocalCompAssigned( Construction:cseCavCONS ) == 0) then  UNDEFINED
																														else  LocalRef( Construction:cseCavCONS )  endif  }

;	"Set ResExtWall:FrameSURFACE:sfCon"
;		ResExtWall:FrameSURFACE:sfCon		= {	2001  }    ; "Wood, 2x4"  -->>  "WFrm2x4"
		;ExtWall:FrameSURFACE:sfCon		= {	if (Local( SheathingVRValue ) == 8) then
		;													switch (Local( FrameType ))
		;														case  4 :  2002  ; "Wood, 2x4"  -->>  "WFrm2x4_Foam"
		;														case  6 :  2004  ; "Wood, 2x6"  -->>  "WFrm2x6_Foam"
		;														default :     0  ; - ERROR -  (no mapping provided)
		;													endswitch
		;												else
		;													switch (Local( FrameType ))
		;														case  4 :  2001  ; "Wood, 2x4"  -->>  "WFrm2x4"
		;														case  6 :  2003  ; "Wood, 2x6"  -->>  "WFrm2x6"
		;														default :     0  ; - ERROR -  (no mapping provided)
		;													endswitch  endif  }

;	"Set ResExtWall:CavitySURFACE:sfCon"
;		ResExtWall:CavitySURFACE:sfCon	= {	2005  }    ; "R-13"  -->>  "WCav13"
		;ExtWall:CavitySURFACE:sfCon	= {	if (Local( SheathingVRValue ) == 8) then
		;													switch (Local( CavityRValue ))
		;														case 13 :  2006  ; "R-13"  -->>  "WCav13_Foam"
		;														case 15 :  2008  ; "R-15"  -->>  "WCav15_Foam"
		;														case 17 :  2010  ; "R-17"  -->>  "WCav17_Foam"
		;														case 19 :  2012  ; "R-19"  -->>  "WCav19_Foam"
		;														case 21 :  2014  ; "R-21"  -->>  "WCav21_Foam"
		;														case 24 :  2016  ; "R-24"  -->>  "WCav24_Foam"
		;														case 26 :  2018  ; "R-26"  -->>  "WCav26_Foam"
		;														case 29 :  2020  ; "R-29"  -->>  "WCav29_Foam"
		;														default :     0  ; - ERROR -  (no mapping provided)
		;													endswitch
		;												else
		;													switch (Local( CavityRValue ))
		;														case 13 :  2005  ; "R-13"  -->>  "WCav13"
		;														case 15 :  2007  ; "R-15"  -->>  "WCav15"
		;														case 17 :  2009  ; "R-17"  -->>  "WCav17"
		;														case 19 :  2011  ; "R-19"  -->>  "WCav19"
		;														case 21 :  2013  ; "R-21"  -->>  "WCav21"
		;														case 24 :  2015  ; "R-24"  -->>  "WCav24"
		;														case 26 :  2017  ; "R-26"  -->>  "WCav26"
		;														case 29 :  2019  ; "R-29"  -->>  "WCav29"
		;														default :     0  ; - ERROR -  (no mapping provided)
		;													endswitch  endif  }

; DEBUGGING
;	"store BEMProc details"		ResProj:Action = {  StoreBEMProc( "b4 CSE ExtWall Surface area set", 0 )  }
;	"Post messagebox"				ResProj:Action = {  MessageBox( "BEMProc details written" )  }
; DEBUGGING

	"Set ResExtWall:FrameSURFACE:sfArea"	ResExtWall:FrameSURFACE:sfArea	= {	                 Local( NetWallArea ) * Local( FramingFactor )  }
	"Set ResExtWall:CavitySURFACE:sfArea"	ResExtWall:CavitySURFACE:sfArea	= {	Local( Area ) - (Local( NetWallArea ) * Local( FramingFactor ))  }

	"Set ResExtWall:FrameSURFACE:sfType"	ResExtWall:FrameSURFACE:sfType	= {	"Wall"  }
	"Set ResExtWall:CavitySURFACE:sfType"	ResExtWall:CavitySURFACE:sfType	= {	"Wall"  }

	"Set ResExtWall:FrameSURFACE:sfTilt"	ResExtWall:FrameSURFACE:sfTilt	= {	Local( Tilt )  }
	"Set ResExtWall:CavitySURFACE:sfTilt"	ResExtWall:CavitySURFACE:sfTilt	= {	Local( Tilt )  }

	"Set ResExtWall:FrameSURFACE:sfAzm"		ResExtWall:FrameSURFACE:sfAzm		= {	if (LocalStatus( OrientationValue ) > 0) then  Local( OrientationValue )  else  UNDEFINED  endif  }
	"Set ResExtWall:CavitySURFACE:sfAzm"	ResExtWall:CavitySURFACE:sfAzm	= {	if (LocalStatus( OrientationValue ) > 0) then  Local( OrientationValue )  else  UNDEFINED  endif  }


	"Set ResExtWall:FrameSURFACE:sfExAbs"	ResExtWall:FrameSURFACE:sfExAbs	= {	if (LocalStatus( Absorptivity ) > 0) then  Local( Absorptivity )  else  UNDEFINED  endif  }
	"Set ResExtWall:CavitySURFACE:sfExAbs"	ResExtWall:CavitySURFACE:sfExAbs	= {	if (LocalStatus( Absorptivity ) > 0) then  Local( Absorptivity )  else  UNDEFINED  endif  }

	"Set ResExtWall:FrameSURFACE:sfModel"	ResExtWall:FrameSURFACE:sfModel	= {	"Forward_Difference"  }
	"Set ResExtWall:CavitySURFACE:sfModel"	ResExtWall:CavitySURFACE:sfModel	= {	"Forward_Difference"  }


	"Blast ResWin:NoScrnWINDOW"				ResWin:NoScrnWINDOW	= {	if (LocalCompAssigned( NoScrnWINDOW )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResWin:ScrnWINDOW"					ResWin:ScrnWINDOW		= {	if (LocalCompAssigned(   ScrnWINDOW )) then  DeleteComp()  else  UNCHANGED  endif  }

	"Create new WINDOW components"		ResWin:Action			= {	EvalRulelist( "Create_WINDOWs", 1 )  }

	"Set ResWin:NoScrnWINDOW:Parent"			ResWin:NoScrnWINDOW:Parent		= {	Parent( CavitySURFACE )  }
	"Set ResWin:ScrnWINDOW:Parent"			ResWin:ScrnWINDOW:Parent		= {	Parent( CavitySURFACE )  }

	"Set ResWin:NoScrnWINDOW:SourceWin"		ResWin:NoScrnWINDOW:SourceWin	= {	Local( Name )  }
	"Set ResWin:ScrnWINDOW:SourceWin"		ResWin:ScrnWINDOW:SourceWin	= {	Local( Name )  }

	"Set ResWin:NoScrnWINDOW:wnExShd"		ResWin:NoScrnWINDOW:wnExShd	= {	"None"  }
	"Set ResWin:ScrnWINDOW:wnExShd"			ResWin:ScrnWINDOW:wnExShd		= {	"Inscrn"  }

	"Default remaining WINDOW properties"		cseWINDOW:Action		= {	EvalRulelist( "Default_WINDOW_BasedOn_SourceWin", 1 )  }

	; CSE window shade stuff
	"Set ResWin:NoScrnWinShade:Parent"		ResWin:NoScrnWinShade:Parent		= {	Local( NoScrnWINDOW )  }
	"Set ResWin:ScrnWinShade:Parent"			ResWin:ScrnWinShade:Parent			= {	Local(   ScrnWINDOW )  }

	"Set ResWin:NoScrnWinShade:SourceWin"	ResWin:NoScrnWinShade:SourceWin	= {	Local( Name )  }
	"Set ResWin:ScrnWinShade:SourceWin"		ResWin:ScrnWinShade:SourceWin		= {	Local( Name )  }

	"Default remaining cseSHADE properties"		cseSHADE:Action		= {	EvalRulelist( "Default_SHADE_BasedOn_Win", 1 )  }


  ; Skylights - added 4/7/13
	"Blast ResSkylt:CSEWINDOW"					ResSkylt:CSEWINDOW		= {	if (LocalCompAssigned( CSEWINDOW )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Create new ResSkylt:CSEWINDOW"			ResSkylt:CSEWINDOW		= {	CreateComp( cseWINDOW, substr( Name, 0, 47 ) + "-Skylt" )  }
	"Set ResSkylt:CSEWINDOW:Parent"			ResSkylt:CSEWINDOW:Parent			= {	Parent( CavitySURFACE )  }
	"Set ResSkylt:CSEWINDOW:SourceSkylt"	ResSkylt:CSEWINDOW:SourceSkylt	= {	Local( Name )  }
	"Set ResSkylt:CSEWINDOW:wnExShd"			ResSkylt:CSEWINDOW:wnExShd			= {	"None"  }
	"Set ResSkylt:CSEWINDOW:wnInShd"			ResSkylt:CSEWINDOW:wnInShd			= {	"None"  }

;	"Default remaining WINDOW properties"		cseWINDOW:Action			= {	EvalRulelist( "Default_WINDOW_BasedOn_SourceWin", 1 )  }
	"Set ResSkylt:CSEWINDOW:wnArea"			ResSkylt:CSEWINDOW:wnArea			= {	Area * Multiplier  }
	"Set ResSkylt:CSEWINDOW:wnHeight"		ResSkylt:CSEWINDOW:wnHeight		= {	sqrt( (Area * Multiplier) )  }
	"Set ResSkylt:CSEWINDOW:wnWidth"			ResSkylt:CSEWINDOW:wnWidth			= {   sqrt( (Area * Multiplier) )  }
	"Set ResSkylt:CSEWINDOW:wnUnfrc"			ResSkylt:CSEWINDOW:wnUnfrc			= {	NFRCUfactor  }
	"Set ResSkylt:CSEWINDOW:wnSHGC"			ResSkylt:CSEWINDOW:wnSHGC			= {	NFRCSHGC     }
	"Set ResSkylt:CSEWINDOW:wnMult"			ResSkylt:CSEWINDOW:wnMult			= {   1  }
	"Set ResSkylt:CSEWINDOW:wnFMult"			ResSkylt:CSEWINDOW:wnFMult			= {	0.85  }
	"Set ResSkylt:CSEWINDOW:wnDirtLoss"		ResSkylt:CSEWINDOW:wnDirtLoss		= {	0.1  }
	"Set ResSkylt:CSEWINDOW:wnNGlz"			ResSkylt:CSEWINDOW:wnNGlz			= {	if (Local( NFRCUfactor ) > 0.8) then  1  else  2  endif  }   ; based on logic present in default CSE files
;            "wnModel",           BEMP_Sym,  - symbol defaulted


	"Blast ResDr:SimDOOR"					ResDr:SimDOOR		= {	if (LocalCompAssigned( SimDOOR )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Create new ResDr:SimDOOR"			ResDr:SimDOOR		= {	CreateComp( cseDOOR, substr( Name, 0, 48 ) + "-Sim" )  }
	"Set ResDr:SimDOOR:Parent"			ResDr:SimDOOR:Parent		= {	Parent( CavitySURFACE )  }
	"Set ResDr:SimDOOR:SourceDoor"		ResDr:SimDOOR:SourceDoor	= {	Local( Name )  }
	; "Default remaining cseDOOR properties"	cseDOOR:Action		= {	EvalRulelist( "Default_DOOR_BasedOn_SourceDoor", 1 )  }
	"Set ResDr:SimDOOR:drArea"			ResDr:SimDOOR:drArea		= {	Area     }
	; "Set ResDr:SimDOOR:drU"				ResDr:SimDOOR:drU			= {	Ufactor  }   ; SAC 4/8/13 - now modeled via Construction

  ; SAC 4/8/13 - rules to blast existing and then re-create simulation construction for each Door
	"Blast ResDr:SimCONS"    			ResDr:SimCONS    		= {	if (LocalCompAssigned( SimCONS     )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResDr:SimLAYER"   			ResDr:SimLAYER   		= {	if (LocalCompAssigned( SimLAYER    )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResDr:SimMATERIAL"			ResDr:SimMATERIAL		= {	if (LocalCompAssigned( SimMATERIAL )) then  DeleteComp()  else  UNCHANGED  endif  }

	"Create new ResDr:SimMATERIAL"		ResDr:SimMATERIAL				= {	if (Ufactor > 0) then  CreateComp( cseMATERIAL, "m-" + substr( Name, 0, 48 ) + "-dr" )  else  UNCHANGED  endif  }
	"Set ResDr:SimMATERIAL:matDens"	ResDr:SimMATERIAL:matDens	= {	41    }
	"Set ResDr:SimMATERIAL:matSpHt"	ResDr:SimMATERIAL:matSpHt	= {	0.39  }
	"Post Warning re: ResDr:SimMATERIAL:matCond"	ResDr:Action		= {	if (Ufactor < 1.17647) then  UNCHANGED
																							else  PostWarning( "Door '%s' Ufactor (%g) too large and would result in negative material conductivity.  Modeling Ufactor of 1.170732.", Name, Ufactor )  endif  }
	"Set ResDr:SimMATERIAL:matCond"	ResDr:SimMATERIAL:matCond	= {	if (Ufactor >= 1.17647) then  10
																							else  ((1 / ((1 / Ufactor) - 0.85))) * (0.5 / 12)  endif  }
	"Set ResDr:SimMATERIAL:matThk"		ResDr:SimMATERIAL:matThk 	= {	0.5 / 12  }

	"Create new ResDr:SimCONS"			ResDr:SimCONS					= {	if (Ufactor > 0) then  CreateComp( cseCONSTRUCTION, "c-" + substr( Name, 0, 48 ) + "-dr" )  else  UNCHANGED  endif  }
	"Create new ResDr:SimLAYER"			ResDr:SimLAYER					= {	if (Ufactor > 0) then  CreateComp( cseLAYER,        "l-" + substr( Name, 0, 48 ) + "-dr" )  else  UNCHANGED  endif  }
	"Set ResDr:SimLAYER:Parent"			ResDr:SimLAYER:Parent			= {	SimCONS      }
	"Set ResDr:SimLAYER:lrMat[1]"		ResDr:SimLAYER:lrMat[1]		= {	SimMATERIAL  }

	"Set ResDr:SimDOOR:drCon"			ResDr:SimDOOR:drCon			= {	if (LocalCompAssigned( SimCONS )) then  SimCONS               else  UNDEFINED  endif  }
	"Set ResDr:SimDOOR:drModel"			ResDr:SimDOOR:drModel			= {	if (LocalCompAssigned( SimCONS )) then  "Forward_Difference"  else  UNDEFINED  endif  }


	; EXTERIOR FLOORS
	"Create new SURFACE components"						ResExtFlr:Action								= {	EvalRulelist( "Create_ExteriorFloor_SURFACEs", 1 )  }

	"Set ResExtFlr:FrameSURFACE:Parent"			ResExtFlr:FrameSURFACE:Parent			= {	Parent( CSE_ZONE )  }
	"Set ResExtFlr:CavitySURFACE:Parent"			ResExtFlr:CavitySURFACE:Parent			= {	Parent( CSE_ZONE )  }

	"Set ResExtFlr:FrameSURFACE:SourceExtFlr"	ResExtFlr:FrameSURFACE:SourceExtFlr	= {	Local( Name )  }
	"Set ResExtFlr:CavitySURFACE:SourceExtFlr"	ResExtFlr:CavitySURFACE:SourceExtFlr	= {	Local( Name )  }

	"Set ResExtFlr:FrameSURFACE:sfCon"				ResExtFlr:FrameSURFACE:sfCon				= {	if (LocalCompAssigned( Construction:cseFrmCONS ) == 0) then  UNDEFINED
																																	else  LocalRef( Construction:cseFrmCONS )  endif  }
	"Set ResExtFlr:CavitySURFACE:sfCon"			ResExtFlr:CavitySURFACE:sfCon			= {	if (LocalCompAssigned( Construction:cseCavCONS ) == 0) then  UNDEFINED
																																	else  LocalRef( Construction:cseCavCONS )  endif  }

	"Set ResExtFlr:FrameSURFACE:sfArea"			ResExtFlr:FrameSURFACE:sfArea			= {	Local( Area ) *      Local( FramingFactor )  }
	"Set ResExtFlr:CavitySURFACE:sfArea"			ResExtFlr:CavitySURFACE:sfArea			= {	Local( Area ) * (1 - Local( FramingFactor ))  }

	"Set ResExtFlr:CavitySURFACE:sfType"			ResExtFlr:CavitySURFACE:sfType			= {	"Floor"  }
	"Set ResExtFlr:FrameSURFACE:sfType"			ResExtFlr:FrameSURFACE:sfType			= {	"Floor"  }

	"Set ResExtFlr:CavitySURFACE:sfTilt"			ResExtFlr:CavitySURFACE:sfTilt			= {	180  }
	"Set ResExtFlr:FrameSURFACE:sfTilt"			ResExtFlr:FrameSURFACE:sfTilt			= {	180  }

;	"Set ResExtFlr:CavitySURFACE:sfExAbs"			ResExtFlr:CavitySURFACE:sfExAbs			= {	if (LocalStatus( Absorptivity ) > 0) then  Local( Absorptivity )  else  UNDEFINED  endif  }
;	"Set ResExtFlr:FrameSURFACE:sfExAbs"			ResExtFlr:FrameSURFACE:sfExAbs			= {	if (LocalStatus( Absorptivity ) > 0) then  Local( Absorptivity )  else  UNDEFINED  endif  }

	"Set ResExtFlr:CavitySURFACE:sfModel"			ResExtFlr:CavitySURFACE:sfModel			= {	"Forward_Difference"  }
	"Set ResExtFlr:FrameSURFACE:sfModel"			ResExtFlr:FrameSURFACE:sfModel			= {	"Forward_Difference"  }

	"Set ResExtFlr:CavitySURFACE:sfExCnd"			ResExtFlr:CavitySURFACE:sfExCnd			= {	"Ambient"  }
;	"Set ResExtFlr:CavitySURFACE:sfExCnd"			ResExtFlr:CavitySURFACE:sfExCnd			= {	if (Local( AreaAboveCrawl ) > 0.5 .AND. ComponentCount( CrawlSpace ) > 0)
;																																	then	if (strlen( Global( ResCrawlSpc:CSEZoneName ) ) > 0)
;																																			then	"AdjZn"
;																																			else	"Ambient"  endif
;																																	else  "Ambient"  endif  }
	"Set ResExtFlr:FrameSURFACE:sfExCnd"			ResExtFlr:FrameSURFACE:sfExCnd			= {	LocalRef( CavitySURFACE:sfExCnd )  }

	"Set ResExtFlr:CavitySURFACE:sfAdjZn"			ResExtFlr:CavitySURFACE:sfAdjZn			= {	UNDEFINED  }
	"Set ResExtFlr:FrameSURFACE:sfAdjZn"			ResExtFlr:FrameSURFACE:sfAdjZn			= {	UNDEFINED  }
;	"Set ResExtFlr:CavitySURFACE:sfAdjZn"			ResExtFlr:CavitySURFACE:sfAdjZn			= {	if (LocalRef( CavitySURFACE:sfExCnd ) == 3)   ; AdjZn
;																																	then	Global( ResCrawlSpc:CSE_ZONE )
;																																	else	UNDEFINED  endif  }
;	"Set ResExtFlr:FrameSURFACE:sfAdjZn"			ResExtFlr:FrameSURFACE:sfAdjZn			= {	if (LocalRef( FrameSURFACE:sfExCnd ) == 3)   ; AdjZn
;																																	then	Global( ResCrawlSpc:CSE_ZONE )
;																																	else	UNDEFINED  endif  }

	; FLOORS OVER CRAWLSPACE
	"Create new SURFACE components"						ResFlrOverCrawlSpc:Action							= {	EvalRulelist( "Create_FloorOverCrawl_SURFACEs", 1 )  }

	"Set ResFlrOverCrawlSpc:FrameSURFACE:Parent"			ResFlrOverCrawlSpc:FrameSURFACE:Parent			= {	Parent( CSE_ZONE )  }
	"Set ResFlrOverCrawlSpc:CavitySURFACE:Parent"			ResFlrOverCrawlSpc:CavitySURFACE:Parent			= {	Parent( CSE_ZONE )  }

	"Set ResFlrOverCrawlSpc:FrameSURFACE:SourceFlrOverCrawl"	ResFlrOverCrawlSpc:FrameSURFACE:SourceFlrOverCrawl	= {	Local( Name )  }
	"Set ResFlrOverCrawlSpc:CavitySURFACE:SourceFlrOverCrawl"	ResFlrOverCrawlSpc:CavitySURFACE:SourceFlrOverCrawl	= {	Local( Name )  }

	"Set ResFlrOverCrawlSpc:FrameSURFACE:sfCon"			ResFlrOverCrawlSpc:FrameSURFACE:sfCon			= {	if (LocalCompAssigned( Construction:cseFrmCONS ) == 0) then  UNDEFINED
																																	else  LocalRef( Construction:cseFrmCONS )  endif  }
	"Set ResFlrOverCrawlSpc:CavitySURFACE:sfCon"			ResFlrOverCrawlSpc:CavitySURFACE:sfCon			= {	if (LocalCompAssigned( Construction:cseCavCONS ) == 0) then  UNDEFINED
																																	else  LocalRef( Construction:cseCavCONS )  endif  }

	"Set ResFlrOverCrawlSpc:FrameSURFACE:sfArea"			ResFlrOverCrawlSpc:FrameSURFACE:sfArea			= {	Local( Area ) *      Local( FramingFactor )  }
	"Set ResFlrOverCrawlSpc:CavitySURFACE:sfArea"			ResFlrOverCrawlSpc:CavitySURFACE:sfArea			= {	Local( Area ) * (1 - Local( FramingFactor ))  }

	"Set ResFlrOverCrawlSpc:CavitySURFACE:sfType"			ResFlrOverCrawlSpc:CavitySURFACE:sfType			= {	"Floor"  }
	"Set ResFlrOverCrawlSpc:FrameSURFACE:sfType"			ResFlrOverCrawlSpc:FrameSURFACE:sfType			= {	"Floor"  }

	"Set ResFlrOverCrawlSpc:CavitySURFACE:sfTilt"			ResFlrOverCrawlSpc:CavitySURFACE:sfTilt			= {	180  }
	"Set ResFlrOverCrawlSpc:FrameSURFACE:sfTilt"			ResFlrOverCrawlSpc:FrameSURFACE:sfTilt			= {	180  }

;	"Set ResFlrOverCrawlSpc:CavitySURFACE:sfExAbs"		ResFlrOverCrawlSpc:CavitySURFACE:sfExAbs		= {	if (LocalStatus( Absorptivity ) > 0) then  Local( Absorptivity )  else  UNDEFINED  endif  }
;	"Set ResFlrOverCrawlSpc:FrameSURFACE:sfExAbs"			ResFlrOverCrawlSpc:FrameSURFACE:sfExAbs			= {	if (LocalStatus( Absorptivity ) > 0) then  Local( Absorptivity )  else  UNDEFINED  endif  }

	"Set ResFlrOverCrawlSpc:CavitySURFACE:sfModel"		ResFlrOverCrawlSpc:CavitySURFACE:sfModel		= {	"Forward_Difference"  }
	"Set ResFlrOverCrawlSpc:FrameSURFACE:sfModel"			ResFlrOverCrawlSpc:FrameSURFACE:sfModel			= {	"Forward_Difference"  }

	"Set ResFlrOverCrawlSpc:CavitySURFACE:sfExCnd"		ResFlrOverCrawlSpc:CavitySURFACE:sfExCnd		= {	if (Local( Area ) > 0.5 .AND. ComponentCount( CrawlSpace ) > 0)
																																	then	if (strlen( Global( ResCrawlSpc:CSEZoneName ) ) > 0)
																																			then	"AdjZn"
																																			else	"Ambient"  endif
																																	else  "Ambient"  endif  }
	"Set ResFlrOverCrawlSpc:FrameSURFACE:sfExCnd"			ResFlrOverCrawlSpc:FrameSURFACE:sfExCnd			= {	LocalRef( CavitySURFACE:sfExCnd )  }

	"Set ResFlrOverCrawlSpc:CavitySURFACE:sfAdjZn"		ResFlrOverCrawlSpc:CavitySURFACE:sfAdjZn		= {	if (LocalRef( CavitySURFACE:sfExCnd ) == 3)   ; AdjZn
																																	then	Global( ResCrawlSpc:CSE_ZONE )
																																	else	UNDEFINED  endif  }
	"Set ResFlrOverCrawlSpc:FrameSURFACE:sfAdjZn"			ResFlrOverCrawlSpc:FrameSURFACE:sfAdjZn			= {	if (LocalRef( FrameSURFACE:sfExCnd ) == 3)   ; AdjZn
																																	then	Global( ResCrawlSpc:CSE_ZONE )
																																	else	UNDEFINED  endif  }

	; INTERIOR FLOORS
	"Create new SURFACE components"							ResIntFlr:Action								= {	EvalRulelist( "Create_InteriorFloor_SURFACEs", 1 )  }

	"Set ResIntFlr:FrameSURFACE:Parent"				ResIntFlr:FrameSURFACE:Parent			= {	Parent( CSE_ZONE )  }
	"Set ResIntFlr:CavitySURFACE:Parent"				ResIntFlr:CavitySURFACE:Parent			= {	Parent( CSE_ZONE )  }

	"Set ResIntFlr:FrameSURFACE:SourceIntFlr"		ResIntFlr:FrameSURFACE:SourceIntFlr	= {	Local( Name )  }
	"Set ResIntFlr:CavitySURFACE:SourceIntFlr"		ResIntFlr:CavitySURFACE:SourceIntFlr	= {	Local( Name )  }

	"Set ResIntFlr:FrameSURFACE:sfCon"					ResIntFlr:FrameSURFACE:sfCon				= {	if (LocalCompAssigned( Construction:cseFrmCONS ) == 0) then  UNDEFINED
																																		else  LocalRef( Construction:cseFrmCONS )  endif  }
	"Set ResIntFlr:CavitySURFACE:sfCon"				ResIntFlr:CavitySURFACE:sfCon			= {	if (LocalCompAssigned( Construction:cseCavCONS ) == 0) then  UNDEFINED
																																		else  LocalRef( Construction:cseCavCONS )  endif  }

	"Set ResIntFlr:FrameSURFACE:sfArea"				ResIntFlr:FrameSURFACE:sfArea			= {	Local( Area ) *      Local( FramingFactor )  }
	"Set ResIntFlr:CavitySURFACE:sfArea"				ResIntFlr:CavitySURFACE:sfArea			= {	Local( Area ) * (1 - Local( FramingFactor ))  }

	"Set ResIntFlr:CavitySURFACE:sfType"				ResIntFlr:CavitySURFACE:sfType			= {	"Floor"  }
	"Set ResIntFlr:FrameSURFACE:sfType"				ResIntFlr:FrameSURFACE:sfType			= {	"Floor"  }

	"Set ResIntFlr:CavitySURFACE:sfTilt"				ResIntFlr:CavitySURFACE:sfTilt			= {	180  }
	"Set ResIntFlr:FrameSURFACE:sfTilt"				ResIntFlr:FrameSURFACE:sfTilt			= {	180  }

;	"Set ResIntFlr:CavitySURFACE:sfExAbs"				ResIntFlr:CavitySURFACE:sfExAbs			= {	if (LocalStatus( Absorptivity ) > 0) then  Local( Absorptivity )  else  UNDEFINED  endif  }
;	"Set ResIntFlr:FrameSURFACE:sfExAbs"				ResIntFlr:FrameSURFACE:sfExAbs			= {	if (LocalStatus( Absorptivity ) > 0) then  Local( Absorptivity )  else  UNDEFINED  endif  }

	"Set ResIntFlr:CavitySURFACE:sfModel"				ResIntFlr:CavitySURFACE:sfModel			= {	"Forward_Difference"  }
	"Set ResIntFlr:FrameSURFACE:sfModel"				ResIntFlr:FrameSURFACE:sfModel			= {	"Forward_Difference"  }

; EM 4/17/15 - added logic to model surfaces where IsPartySurface toggle On as Adiabatic
  ; ensure CSE_ZONE actually defined before setting AdjZn to AdjZn and assigning sfAdjZn - SAC 10/27/21 (MFam)
	"Set ResIntFlr:CavitySURFACE:sfExCnd"				ResIntFlr:CavitySURFACE:sfExCnd			= {	if ((IsPartySurface < 0.5 .OR. OtherSideModeled > 0.5) .AND. LocalCompAssigned( Outside ) .AND. LocalCompAssigned( Outside:CSE_ZONE )) then  "AdjZn"  else  "Adiabatic"  endif  }
	"Set ResIntFlr:FrameSURFACE:sfExCnd"				ResIntFlr:FrameSURFACE:sfExCnd			= {	if ((IsPartySurface < 0.5 .OR. OtherSideModeled > 0.5) .AND. LocalCompAssigned( Outside ) .AND. LocalCompAssigned( Outside:CSE_ZONE )) then  "AdjZn"  else  "Adiabatic"  endif  }

	"Set ResIntFlr:CavitySURFACE:sfAdjZn"				ResIntFlr:CavitySURFACE:sfAdjZn			= {	if ((IsPartySurface < 0.5 .OR. OtherSideModeled > 0.5) .AND. LocalCompAssigned( Outside ) .AND. LocalCompAssigned( Outside:CSE_ZONE )) then  LocalRef( Outside:CSE_ZONE )  else  UNDEFINED  endif  }
	"Set ResIntFlr:FrameSURFACE:sfAdjZn"				ResIntFlr:FrameSURFACE:sfAdjZn			= {	if ((IsPartySurface < 0.5 .OR. OtherSideModeled > 0.5) .AND. LocalCompAssigned( Outside ) .AND. LocalCompAssigned( Outside:CSE_ZONE )) then  LocalRef( Outside:CSE_ZONE )  else  UNDEFINED  endif  }
;	"Set ResIntFlr:CavitySURFACE:sfExCnd"				ResIntFlr:CavitySURFACE:sfExCnd			= {	if (LocalCompAssigned( Outside )) then  "AdjZn"  else  "Adiabatic"  endif  }
;	"Set ResIntFlr:FrameSURFACE:sfExCnd"				ResIntFlr:FrameSURFACE:sfExCnd			= {	if (LocalCompAssigned( Outside )) then  "AdjZn"  else  "Adiabatic"  endif  }
;
;	"Set ResIntFlr:CavitySURFACE:sfAdjZn"				ResIntFlr:CavitySURFACE:sfAdjZn			= {	if (LocalCompAssigned( Outside )) then  LocalRef( Outside:CSE_ZONE )  else  UNDEFINED  endif  }
;	"Set ResIntFlr:FrameSURFACE:sfAdjZn"				ResIntFlr:FrameSURFACE:sfAdjZn			= {	if (LocalCompAssigned( Outside )) then  LocalRef( Outside:CSE_ZONE )  else  UNDEFINED  endif  }


	; UNDERGROUND FLOORS
	"Create new SURFACE components"					ResUndgrFlr:Action							= {	EvalRulelist( "Create_UndFloor_SURFACEs", 1 )  }

	; Carpeted surface defaulting
	"Set ResUndgrFlr:CptSURFACE:Parent"					ResUndgrFlr:CptSURFACE:Parent				= {	Parent( CSE_ZONE )  }
	"Set ResUndgrFlr:CptSURFACE:SourceUndFlr"			ResUndgrFlr:CptSURFACE:SourceUndFlr		= {	Local( Name )  }
	"Set ResUndgrFlr:CptSURFACE:sfCon"					ResUndgrFlr:CptSURFACE:sfCon				= {	Global( ResProj:cseUndFloorCptCONS )  }
	"Set ResUndgrFlr:CptSURFACE:sfArea"					ResUndgrFlr:CptSURFACE:sfArea				= {	Area * CarpetedFrac  }   ; SAC 8/28/12 - bug fix (perim area * 2)
	"Set ResUndgrFlr:CptSURFACE:sfDepthBG"				ResUndgrFlr:CptSURFACE:sfDepthBG			= {	if (IfValidAnd( DepthBelowGrade >= 0 )) then  DepthBelowGrade  else  UNDEFINED  endif  }
	"Set ResUndgrFlr:CptSURFACE:sfType"					ResUndgrFlr:CptSURFACE:sfType				= {	"Floor"  }
	"Set ResUndgrFlr:CptSURFACE:sfTilt"					ResUndgrFlr:CptSURFACE:sfTilt				= {	180  }
	"Set ResUndgrFlr:CptSURFACE:sfModel"				ResUndgrFlr:CptSURFACE:sfModel			= {	"Forward_Difference"  }
	"Set ResUndgrFlr:CptSURFACE:sfExCnd"				ResUndgrFlr:CptSURFACE:sfExCnd			= {	"Ground"  }
;	"Set ResUndgrFlr:CptSURFACE:sfInHcModel"			ResUndgrFlr:CptSURFACE:sfInHcModel		= {	"Unified"  }

;	; Exposed surface defaulting
	"Set ResUndgrFlr:ExpSURFACE:Parent"					ResUndgrFlr:ExpSURFACE:Parent				= {	Parent( CSE_ZONE )  }
	"Set ResUndgrFlr:ExpSURFACE:SourceUndFlr"			ResUndgrFlr:ExpSURFACE:SourceUndFlr		= {	Local( Name )  }
	"Set ResUndgrFlr:ExpSURFACE:sfCon"					ResUndgrFlr:ExpSURFACE:sfCon				= {	Global( ResProj:cseUndFloorExpCONS )  }
	"Set ResUndgrFlr:ExpSURFACE:sfArea"					ResUndgrFlr:ExpSURFACE:sfArea				= {	Area * (1 - CarpetedFrac)  }   ; SAC 8/28/12 - bug fix (perim area * 2)
	"Set ResUndgrFlr:ExpSURFACE:sfDepthBG"				ResUndgrFlr:ExpSURFACE:sfDepthBG			= {	if (IfValidAnd( DepthBelowGrade >= 0 )) then  DepthBelowGrade  else  UNDEFINED  endif  }
	"Set ResUndgrFlr:ExpSURFACE:sfType"					ResUndgrFlr:ExpSURFACE:sfType				= {	"Floor"  }
	"Set ResUndgrFlr:ExpSURFACE:sfTilt"					ResUndgrFlr:ExpSURFACE:sfTilt				= {	180  }
	"Set ResUndgrFlr:ExpSURFACE:sfModel"				ResUndgrFlr:ExpSURFACE:sfModel			= {	"Forward_Difference"  }
	"Set ResUndgrFlr:ExpSURFACE:sfExCnd"				ResUndgrFlr:ExpSURFACE:sfExCnd			= {	"Ground"  }
;	"Set ResUndgrFlr:ExpSURFACE:sfInHcModel"			ResUndgrFlr:ExpSURFACE:sfInHcModel		= {	"Unified"  }


	; SLAB FLOORS
; SAC 10/23/14 - moved into earlier rulelist to be accessible for Proposed reporting
;   "Set ResSlabFlr:CarpetedFrac"			ResSlabFlr:CarpetedFrac	= {	switch ( Surface )
;																								case  1 :	1.0    ; "Carpeted"                                    
;																								case  2 :	0.0    ; "Exposed"                                     
;																								default :	0.8	 ; "Default (80% carpeted/covered, 20% exposed)" 
;																							endswitch  }

	"Create new SURFACE components"		ResSlabFlr:Action			= {	EvalRulelist( "Create_SlabFloor_SURFACEs", 1 )  }

	; Carpeted surface defaulting
	"Set ResSlabFlr:PerimCptSURFACE:Parent"					ResSlabFlr:PerimCptSURFACE:Parent					= {	Parent( CSE_ZONE )  }
	"Set ResSlabFlr:InteriorCptSURFACE:Parent"				ResSlabFlr:InteriorCptSURFACE:Parent				= {	Parent( CSE_ZONE )  }

	"Set ResSlabFlr:PerimCptSURFACE:SourceSlabFlr"		ResSlabFlr:PerimCptSURFACE:SourceSlabFlr		= {	Local( Name )  }
	"Set ResSlabFlr:InteriorCptSURFACE:SourceSlabFlr"	ResSlabFlr:InteriorCptSURFACE:SourceSlabFlr	= {	Local( Name )  }

;	"Set ResSlabFlr:PerimCptSURFACE:sfCon"					ResSlabFlr:PerimCptSURFACE:sfCon					= {	if (Local( EdgeInsulation ) > 0.5) then  UNDEFINED
;																																			else  Global( ResProj:cseSlabNoEdgInsCptCONS )  endif  }
;	"Set ResSlabFlr:InteriorCptSURFACE:sfCon"				ResSlabFlr:InteriorCptSURFACE:sfCon				= {	if (Local( EdgeInsulation ) > 0.5) then  UNDEFINED
;																																			else  Global( ResProj:cseSlabNoEdgInsCptCONS )  endif  }
	"Set ResSlabFlr:PerimCptSURFACE:sfCon"					ResSlabFlr:PerimCptSURFACE:sfCon					= {	Global( ResProj:cseSlabNoEdgInsCptCONS )  }
	"Set ResSlabFlr:InteriorCptSURFACE:sfCon"				ResSlabFlr:InteriorCptSURFACE:sfCon				= {	Global( ResProj:cseSlabNoEdgInsCptCONS )  }

	"Set ResSlabFlr:PerimCptSURFACE:sfArea"					ResSlabFlr:PerimCptSURFACE:sfArea					= {	min( (Perimeter * 2), Area ) * CarpetedFrac  }   ; SAC 8/28/12 - bug fix (perim area * 2)
	"Set ResSlabFlr:InteriorCptSURFACE:sfArea"				ResSlabFlr:InteriorCptSURFACE:sfArea				= {	max( 0, Area - (Perimeter * 2) ) * CarpetedFrac  }

	"Set ResSlabFlr:PerimCptSURFACE:sfType"					ResSlabFlr:PerimCptSURFACE:sfType					= {	"Floor"  }
	"Set ResSlabFlr:InteriorCptSURFACE:sfType"				ResSlabFlr:InteriorCptSURFACE:sfType				= {	"Floor"  }

	"Set ResSlabFlr:PerimCptSURFACE:sfTilt"					ResSlabFlr:PerimCptSURFACE:sfTilt					= {	180  }
	"Set ResSlabFlr:InteriorCptSURFACE:sfTilt"				ResSlabFlr:InteriorCptSURFACE:sfTilt				= {	180  }

	"Set ResSlabFlr:PerimCptSURFACE:sfModel"				ResSlabFlr:PerimCptSURFACE:sfModel				= {	"Forward_Difference"  }
	"Set ResSlabFlr:InteriorCptSURFACE:sfModel"			ResSlabFlr:InteriorCptSURFACE:sfModel			= {	"Forward_Difference"  }

	"Set ResSlabFlr:PerimCptSURFACE:sfExCnd"				ResSlabFlr:PerimCptSURFACE:sfExCnd				= {	"Ground"  }
	"Set ResSlabFlr:InteriorCptSURFACE:sfExCnd"			ResSlabFlr:InteriorCptSURFACE:sfExCnd			= {	"Ground"  }

	"Set ResSlabFlr:PerimCptSURFACE:sfInHcModel"			ResSlabFlr:PerimCptSURFACE:sfInHcModel			= {	"Unified"  }
	"Set ResSlabFlr:InteriorCptSURFACE:sfInHcModel"		ResSlabFlr:InteriorCptSURFACE:sfInHcModel		= {	"Unified"  }

; SAC 9/9/12 - remove sfLthkF = 0 so that automatic CSE layering will be performed
;	"Set ResSlabFlr:PerimCptSURFACE:sfLthkF"				ResSlabFlr:PerimCptSURFACE:sfLthkF				= {	0  }
;	"Set ResSlabFlr:InteriorCptSURFACE:sfLthkF"			ResSlabFlr:InteriorCptSURFACE:sfLthkF			= {	0  }

	"Set ResSlabFlr:PerimCptSURFACE:sfExRConGrnd"			ResSlabFlr:PerimCptSURFACE:sfExRConGrnd			= {	5.267  }
	"Set ResSlabFlr:InteriorCptSURFACE:sfExRConGrnd"		ResSlabFlr:InteriorCptSURFACE:sfExRConGrnd		= {	5.267  }

	"Set ResSlabFlr:PerimCptSURFACE:sfExCTGrnd"			ResSlabFlr:PerimCptSURFACE:sfExCTGrnd			= {	if (EdgeInsulation < 0.5)
																																			then	T24RSlabEdgeInsulationTable(       0        , 6 )
																																			else	T24RSlabEdgeInsulationTable( EdgeInsulOption, 6 )  endif  }
	"Set ResSlabFlr:PerimCptSURFACE:sfExCTaDbAvgYr"		ResSlabFlr:PerimCptSURFACE:sfExCTaDbAvgYr		= {	if (EdgeInsulation < 0.5)
																																			then	T24RSlabEdgeInsulationTable(       0        , 7 )
																																			else	T24RSlabEdgeInsulationTable( EdgeInsulOption, 7 )  endif  }
	"Set ResSlabFlr:PerimCptSURFACE:sfExCTaDbAvg14"		ResSlabFlr:PerimCptSURFACE:sfExCTaDbAvg14		= {	if (EdgeInsulation < 0.5)
																																			then	T24RSlabEdgeInsulationTable(       0        , 8 )
																																			else	T24RSlabEdgeInsulationTable( EdgeInsulOption, 8 )  endif  }

	"Set ResSlabFlr:InteriorCptSURFACE:sfExCTGrnd"		ResSlabFlr:InteriorCptSURFACE:sfExCTGrnd		= {	if (EdgeInsulation < 0.5)
																																			then	T24RSlabEdgeInsulationTable(       0        , 9 )
																																			else	T24RSlabEdgeInsulationTable( EdgeInsulOption, 9 )  endif  }
	"Set ResSlabFlr:InteriorCptSURFACE:sfExCTaDbAvgYr"	ResSlabFlr:InteriorCptSURFACE:sfExCTaDbAvgYr	= {	if (EdgeInsulation < 0.5)
																																			then	T24RSlabEdgeInsulationTable(       0        , 10 )
																																			else	T24RSlabEdgeInsulationTable( EdgeInsulOption, 10 )  endif  }

	; Exposed surface defaulting
	"Set ResSlabFlr:PerimExpSURFACE:Parent"					ResSlabFlr:PerimExpSURFACE:Parent					= {	Parent( CSE_ZONE )  }
	"Set ResSlabFlr:InteriorExpSURFACE:Parent"				ResSlabFlr:InteriorExpSURFACE:Parent				= {	Parent( CSE_ZONE )  }

	"Set ResSlabFlr:PerimExpSURFACE:SourceSlabFlr"		ResSlabFlr:PerimExpSURFACE:SourceSlabFlr		= {	Local( Name )  }
	"Set ResSlabFlr:InteriorExpSURFACE:SourceSlabFlr"	ResSlabFlr:InteriorExpSURFACE:SourceSlabFlr	= {	Local( Name )  }

;	"Set ResSlabFlr:PerimExpSURFACE:sfCon"					ResSlabFlr:PerimExpSURFACE:sfCon					= {	if (Local( EdgeInsulation ) > 0.5) then  UNDEFINED
;																																			else  Global( ResProj:cseSlabNoEdgInsExpCONS )  endif  }
;	"Set ResSlabFlr:InteriorExpSURFACE:sfCon"				ResSlabFlr:InteriorExpSURFACE:sfCon				= {	if (Local( EdgeInsulation ) > 0.5) then  UNDEFINED
;																																			else  Global( ResProj:cseSlabNoEdgInsExpCONS )  endif  }
	"Set ResSlabFlr:PerimExpSURFACE:sfCon"					ResSlabFlr:PerimExpSURFACE:sfCon					= {	Global( ResProj:cseSlabNoEdgInsExpCONS )  }
	"Set ResSlabFlr:InteriorExpSURFACE:sfCon"				ResSlabFlr:InteriorExpSURFACE:sfCon				= {	Global( ResProj:cseSlabNoEdgInsExpCONS )  }

	"Set ResSlabFlr:PerimExpSURFACE:sfArea"					ResSlabFlr:PerimExpSURFACE:sfArea					= {	min( (Perimeter * 2), Area ) * (1 - CarpetedFrac)  }   ; SAC 8/28/12 - bug fix (perim area * 2)
	"Set ResSlabFlr:InteriorExpSURFACE:sfArea"				ResSlabFlr:InteriorExpSURFACE:sfArea				= {	max( 0, Area - (Perimeter * 2) ) * (1 - CarpetedFrac)  }

	"Set ResSlabFlr:PerimExpSURFACE:sfType"					ResSlabFlr:PerimExpSURFACE:sfType					= {	"Floor"  }
	"Set ResSlabFlr:InteriorExpSURFACE:sfType"				ResSlabFlr:InteriorExpSURFACE:sfType				= {	"Floor"  }

	"Set ResSlabFlr:PerimExpSURFACE:sfTilt"					ResSlabFlr:PerimExpSURFACE:sfTilt					= {	180  }
	"Set ResSlabFlr:InteriorExpSURFACE:sfTilt"				ResSlabFlr:InteriorExpSURFACE:sfTilt				= {	180  }

	"Set ResSlabFlr:PerimExpSURFACE:sfModel"				ResSlabFlr:PerimExpSURFACE:sfModel				= {	"Forward_Difference"  }
	"Set ResSlabFlr:InteriorExpSURFACE:sfModel"			ResSlabFlr:InteriorExpSURFACE:sfModel			= {	"Forward_Difference"  }

	"Set ResSlabFlr:PerimExpSURFACE:sfExCnd"				ResSlabFlr:PerimExpSURFACE:sfExCnd				= {	"Ground"  }
	"Set ResSlabFlr:InteriorExpSURFACE:sfExCnd"			ResSlabFlr:InteriorExpSURFACE:sfExCnd			= {	"Ground"  }

	"Set ResSlabFlr:PerimExpSURFACE:sfInHcModel"			ResSlabFlr:PerimExpSURFACE:sfInHcModel			= {	"Unified"  }
	"Set ResSlabFlr:InteriorExpSURFACE:sfInHcModel"		ResSlabFlr:InteriorExpSURFACE:sfInHcModel		= {	"Unified"  }

; SAC 9/9/12 - remove sfLthkF = 0 so that automatic CSE layering will be performed
;	"Set ResSlabFlr:PerimExpSURFACE:sfLthkF"				ResSlabFlr:PerimExpSURFACE:sfLthkF				= {	0  }
;	"Set ResSlabFlr:InteriorExpSURFACE:sfLthkF"			ResSlabFlr:InteriorExpSURFACE:sfLthkF			= {	0  }

	"Set ResSlabFlr:PerimExpSURFACE:sfExRConGrnd"			ResSlabFlr:PerimExpSURFACE:sfExRConGrnd			= {	3.187  }
	"Set ResSlabFlr:InteriorExpSURFACE:sfExRConGrnd"		ResSlabFlr:InteriorExpSURFACE:sfExRConGrnd		= {	3.187  }

	"Set ResSlabFlr:PerimExpSURFACE:sfExCTGrnd"			ResSlabFlr:PerimExpSURFACE:sfExCTGrnd			= {	if (EdgeInsulation < 0.5)
																																			then	T24RSlabEdgeInsulationTable(       0        , 1 )
																																			else	T24RSlabEdgeInsulationTable( EdgeInsulOption, 1 )  endif  }
	"Set ResSlabFlr:PerimExpSURFACE:sfExCTaDbAvgYr"		ResSlabFlr:PerimExpSURFACE:sfExCTaDbAvgYr		= {	if (EdgeInsulation < 0.5)
																																			then	T24RSlabEdgeInsulationTable(       0        , 2 )
																																			else	T24RSlabEdgeInsulationTable( EdgeInsulOption, 2 )  endif  }
	"Set ResSlabFlr:PerimExpSURFACE:sfExCTaDbAvg14"		ResSlabFlr:PerimExpSURFACE:sfExCTaDbAvg14		= {	if (EdgeInsulation < 0.5)
																																			then	T24RSlabEdgeInsulationTable(       0        , 3 )
																																			else	T24RSlabEdgeInsulationTable( EdgeInsulOption, 3 )  endif  }

	"Set ResSlabFlr:InteriorExpSURFACE:sfExCTGrnd"		ResSlabFlr:InteriorExpSURFACE:sfExCTGrnd		= {	if (EdgeInsulation < 0.5)
																																			then	T24RSlabEdgeInsulationTable(       0        , 4 )
																																			else	T24RSlabEdgeInsulationTable( EdgeInsulOption, 4 )  endif  }
	"Set ResSlabFlr:InteriorExpSURFACE:sfExCTaDbAvgYr"	ResSlabFlr:InteriorExpSURFACE:sfExCTaDbAvgYr	= {	if (EdgeInsulation < 0.5)
																																			then	T24RSlabEdgeInsulationTable(       0        , 5 )
																																			else	T24RSlabEdgeInsulationTable( EdgeInsulOption, 5 )  endif  }

 ; ATTIC ROOF SURFACES
	; SAC 9/13/13 - added logic to prevent simulation of attic zones w/ no area
	"Create ResAttic:FrameSURFACEs[1]-NORTH"			ResAttic:FrameSURFACEs[1]					= {	if (FloorArea < 0.5 .OR. LocalRef( Construction:FramingFactor ) <= 0) then  UNDEFINED
																														else  CreateComp( cseSURFACE, substr( Name, 0, 44 ) + "-atc-rfNF" )  endif  }
	"Create ResAttic:CavitySURFACEs[1]-NORTH"			ResAttic:CavitySURFACEs[1]					= {	if (FloorArea < 0.5 .OR. LocalRef( Construction:FramingFactor ) < 0 .OR. LocalRef( Construction:FramingFactor ) >= 1) then  UNDEFINED
																														else  CreateComp( cseSURFACE, substr( Name, 0, 44 ) + "-atc-rfNC" )  endif  }
	"Set ResAttic:FrameSURFACEs[1] Parent"				ResAttic:FrameSURFACEs[1]:Parent			= {	Local( CSE_ZONE )  }
	"Set ResAttic:CavitySURFACEs[1] Parent"			ResAttic:CavitySURFACEs[1]:Parent		= {	Local( CSE_ZONE )  }
	"Set ResAttic:FrameSURFACEs[1]:SourceAttic"		ResAttic:FrameSURFACEs[1]:SourceAttic	= {	Local( Name )  }
	"Set ResAttic:CavitySURFACEs[1]:SourceAttic"		ResAttic:CavitySURFACEs[1]:SourceAttic	= {	Local( Name )  }
	"Set ResAttic:FrameSURFACEs[1]:sfCon"				ResAttic:FrameSURFACEs[1]:sfCon			= {	if (LocalCompAssigned( Construction:cseFrmCONS ) == 0) then  UNDEFINED
																														else  LocalRef( Construction:cseFrmCONS )  endif  }
	"Set ResAttic:CavitySURFACEs[1]:sfCon"				ResAttic:CavitySURFACEs[1]:sfCon			= {	if (LocalCompAssigned( Construction:cseCavCONS ) == 0) then  UNDEFINED
																														else  LocalRef( Construction:cseCavCONS )  endif  }
	"Set ResAttic:FrameSURFACEs[1]:sfArea"				ResAttic:FrameSURFACEs[1]:sfArea			= {	Local( DeckArea ) *      Local( RoofFramingFactor )  / 4  }
	"Set ResAttic:CavitySURFACEs[1]:sfArea"			ResAttic:CavitySURFACEs[1]:sfArea		= {	Local( DeckArea ) * (1 - Local( RoofFramingFactor )) / 4  }
	"Set ResAttic:FrameSURFACEs[1]:sfAzm"				ResAttic:FrameSURFACEs[1]:sfAzm			= {	0  }
	"Set ResAttic:CavitySURFACEs[1]:sfAzm"				ResAttic:CavitySURFACEs[1]:sfAzm			= {	0  }
	"Default remaining Attic Roof Surface"			ResAttic:FrameSURFACEs[1]:Action			= {	EvalRulelist( "Default_AtticRoof_SURFACE", 2 )  }
	"Default remaining Attic Roof Surface"			ResAttic:CavitySURFACEs[1]:Action		= {	EvalRulelist( "Default_AtticRoof_SURFACE", 2 )  }

	"Create ResAttic:FrameSURFACEs[2]-EAST"			ResAttic:FrameSURFACEs[2]					= {	if (FloorArea < 0.5 .OR. LocalRef( Construction:FramingFactor ) <= 0) then  UNDEFINED
																														else  CreateComp( cseSURFACE, substr( Name, 0, 44 ) + "-atc-rfEF" )  endif  }
	"Create ResAttic:CavitySURFACEs[2]-EAST"			ResAttic:CavitySURFACEs[2]					= {	if (FloorArea < 0.5 .OR. LocalRef( Construction:FramingFactor ) < 0 .OR. LocalRef( Construction:FramingFactor ) >= 1) then  UNDEFINED
																														else  CreateComp( cseSURFACE, substr( Name, 0, 44 ) + "-atc-rfEC" )  endif  }
	"Set ResAttic:FrameSURFACEs[2] Parent"				ResAttic:FrameSURFACEs[2]:Parent			= {	Local( CSE_ZONE )  }
	"Set ResAttic:CavitySURFACEs[2] Parent"			ResAttic:CavitySURFACEs[2]:Parent		= {	Local( CSE_ZONE )  }
	"Set ResAttic:FrameSURFACEs[2]:SourceAttic"		ResAttic:FrameSURFACEs[2]:SourceAttic	= {	Local( Name )  }
	"Set ResAttic:CavitySURFACEs[2]:SourceAttic"		ResAttic:CavitySURFACEs[2]:SourceAttic	= {	Local( Name )  }
	"Set ResAttic:FrameSURFACEs[2]:sfCon"				ResAttic:FrameSURFACEs[2]:sfCon			= {	if (LocalCompAssigned( Construction:cseFrmCONS ) == 0) then  UNDEFINED
																														else  LocalRef( Construction:cseFrmCONS )  endif  }
	"Set ResAttic:CavitySURFACEs[2]:sfCon"				ResAttic:CavitySURFACEs[2]:sfCon			= {	if (LocalCompAssigned( Construction:cseCavCONS ) == 0) then  UNDEFINED
																														else  LocalRef( Construction:cseCavCONS )  endif  }
	"Set ResAttic:FrameSURFACEs[2]:sfArea"				ResAttic:FrameSURFACEs[2]:sfArea			= {	Local( DeckArea ) *      Local( RoofFramingFactor )  / 4  }
	"Set ResAttic:CavitySURFACEs[2]:sfArea"			ResAttic:CavitySURFACEs[2]:sfArea		= {	Local( DeckArea ) * (1 - Local( RoofFramingFactor )) / 4  }
	"Set ResAttic:FrameSURFACEs[2]:sfAzm"				ResAttic:FrameSURFACEs[2]:sfAzm			= {	90  }
	"Set ResAttic:CavitySURFACEs[2]:sfAzm"				ResAttic:CavitySURFACEs[2]:sfAzm			= {	90  }
	"Default remaining Attic Roof Surface"			ResAttic:FrameSURFACEs[2]:Action			= {	EvalRulelist( "Default_AtticRoof_SURFACE", 2 )  }
	"Default remaining Attic Roof Surface"			ResAttic:CavitySURFACEs[2]:Action		= {	EvalRulelist( "Default_AtticRoof_SURFACE", 2 )  }

	"Create ResAttic:FrameSURFACEs[3]-SOUTH"			ResAttic:FrameSURFACEs[3]					= {	if (FloorArea < 0.5 .OR. LocalRef( Construction:FramingFactor ) <= 0) then  UNDEFINED
																														else  CreateComp( cseSURFACE, substr( Name, 0, 44 ) + "-atc-rfSF" )  endif  }
	"Create ResAttic:CavitySURFACEs[3]-SOUTH"			ResAttic:CavitySURFACEs[3]					= {	if (FloorArea < 0.5 .OR. LocalRef( Construction:FramingFactor ) < 0 .OR. LocalRef( Construction:FramingFactor ) >= 1) then  UNDEFINED
																														else  CreateComp( cseSURFACE, substr( Name, 0, 44 ) + "-atc-rfSC" )  endif  }
	"Set ResAttic:FrameSURFACEs[3] Parent"				ResAttic:FrameSURFACEs[3]:Parent			= {	Local( CSE_ZONE )  }
	"Set ResAttic:CavitySURFACEs[3] Parent"			ResAttic:CavitySURFACEs[3]:Parent		= {	Local( CSE_ZONE )  }
	"Set ResAttic:FrameSURFACEs[3]:SourceAttic"		ResAttic:FrameSURFACEs[3]:SourceAttic	= {	Local( Name )  }
	"Set ResAttic:CavitySURFACEs[3]:SourceAttic"		ResAttic:CavitySURFACEs[3]:SourceAttic	= {	Local( Name )  }
	"Set ResAttic:FrameSURFACEs[3]:sfCon"				ResAttic:FrameSURFACEs[3]:sfCon			= {	if (LocalCompAssigned( Construction:cseFrmCONS ) == 0) then  UNDEFINED
																														else  LocalRef( Construction:cseFrmCONS )  endif  }
	"Set ResAttic:CavitySURFACEs[3]:sfCon"				ResAttic:CavitySURFACEs[3]:sfCon			= {	if (LocalCompAssigned( Construction:cseCavCONS ) == 0) then  UNDEFINED
																														else  LocalRef( Construction:cseCavCONS )  endif  }
	"Set ResAttic:FrameSURFACEs[3]:sfArea"				ResAttic:FrameSURFACEs[3]:sfArea			= {	Local( DeckArea ) *      Local( RoofFramingFactor )  / 4  }
	"Set ResAttic:CavitySURFACEs[3]:sfArea"			ResAttic:CavitySURFACEs[3]:sfArea		= {	Local( DeckArea ) * (1 - Local( RoofFramingFactor )) / 4  }
	"Set ResAttic:FrameSURFACEs[3]:sfAzm"				ResAttic:FrameSURFACEs[3]:sfAzm			= {	180  }
	"Set ResAttic:CavitySURFACEs[3]:sfAzm"				ResAttic:CavitySURFACEs[3]:sfAzm			= {	180  }
	"Default remaining Attic Roof Surface"			ResAttic:FrameSURFACEs[3]:Action			= {	EvalRulelist( "Default_AtticRoof_SURFACE", 2 )  }
	"Default remaining Attic Roof Surface"			ResAttic:CavitySURFACEs[3]:Action		= {	EvalRulelist( "Default_AtticRoof_SURFACE", 2 )  }

	"Create ResAttic:FrameSURFACEs[4]-WEST"			ResAttic:FrameSURFACEs[4]					= {	if (FloorArea < 0.5 .OR. LocalRef( Construction:FramingFactor ) <= 0) then  UNDEFINED
																														else  CreateComp( cseSURFACE, substr( Name, 0, 44 ) + "-atc-rfWF" )  endif  }
	"Create ResAttic:CavitySURFACEs[4]-WEST"			ResAttic:CavitySURFACEs[4]					= {	if (FloorArea < 0.5 .OR. LocalRef( Construction:FramingFactor ) < 0 .OR. LocalRef( Construction:FramingFactor ) >= 1) then  UNDEFINED
																														else  CreateComp( cseSURFACE, substr( Name, 0, 44 ) + "-atc-rfWC" )  endif  }
	"Set ResAttic:FrameSURFACEs[4] Parent"				ResAttic:FrameSURFACEs[4]:Parent			= {	Local( CSE_ZONE )  }
	"Set ResAttic:CavitySURFACEs[4] Parent"			ResAttic:CavitySURFACEs[4]:Parent		= {	Local( CSE_ZONE )  }
	"Set ResAttic:FrameSURFACEs[4]:SourceAttic"		ResAttic:FrameSURFACEs[4]:SourceAttic	= {	Local( Name )  }
	"Set ResAttic:CavitySURFACEs[4]:SourceAttic"		ResAttic:CavitySURFACEs[4]:SourceAttic	= {	Local( Name )  }
	"Set ResAttic:FrameSURFACEs[4]:sfCon"				ResAttic:FrameSURFACEs[4]:sfCon			= {	if (LocalCompAssigned( Construction:cseFrmCONS ) == 0) then  UNDEFINED
																														else  LocalRef( Construction:cseFrmCONS )  endif  }
	"Set ResAttic:CavitySURFACEs[4]:sfCon"				ResAttic:CavitySURFACEs[4]:sfCon			= {	if (LocalCompAssigned( Construction:cseCavCONS ) == 0) then  UNDEFINED
																														else  LocalRef( Construction:cseCavCONS )  endif  }
	"Set ResAttic:FrameSURFACEs[4]:sfArea"				ResAttic:FrameSURFACEs[4]:sfArea			= {	Local( DeckArea ) *      Local( RoofFramingFactor )  / 4  }
	"Set ResAttic:CavitySURFACEs[4]:sfArea"			ResAttic:CavitySURFACEs[4]:sfArea		= {	Local( DeckArea ) * (1 - Local( RoofFramingFactor )) / 4  }
	"Set ResAttic:FrameSURFACEs[4]:sfAzm"				ResAttic:FrameSURFACEs[4]:sfAzm			= {	270  }
	"Set ResAttic:CavitySURFACEs[4]:sfAzm"				ResAttic:CavitySURFACEs[4]:sfAzm			= {	270  }
	"Default remaining Attic Roof Surface"			ResAttic:FrameSURFACEs[4]:Action			= {	EvalRulelist( "Default_AtticRoof_SURFACE", 2 )  }
	"Default remaining Attic Roof Surface"			ResAttic:CavitySURFACEs[4]:Action		= {	EvalRulelist( "Default_AtticRoof_SURFACE", 2 )  }

 ; Attic TRUSS surfaces (divided for radiant exchange algorithm)
	"Create attic truss material & construction components"			ResAttic:Action		= {	if (FloorArea < 0.5) then  UNCHANGED
																														else  EvalRulelist( "CAResAttic_CreateTrussMatAndCons" )  endif  }
	"Create ResAttic:TrussSURFACEs[1]"					ResAttic:TrussSURFACEs[1]					= {	if (FloorArea < 0.5) then  UNDEFINED
																														else  CreateComp( cseSURFACE, substr( Name, 0, 44 ) + "-atc-rfT1" )  endif  }
	"Set ResAttic:TrussSURFACEs[1] Parent"				ResAttic:TrussSURFACEs[1]:Parent			= {	Local( CSE_ZONE )  }
	"Set ResAttic:TrussSURFACEs[1]:SourceAttic"		ResAttic:TrussSURFACEs[1]:SourceAttic	= {	Local( Name )  }
	"Set remaining Attic Truss Surface-1"			ResAttic:TrussSURFACEs[1]:Action			= {	EvalRulelist( "Default_AtticTruss_SURFACE", 2 )  }

	"Create ResAttic:TrussSURFACEs[2]"					ResAttic:TrussSURFACEs[2]					= {	if (FloorArea < 0.5) then  UNDEFINED
																														else  CreateComp( cseSURFACE, substr( Name, 0, 44 ) + "-atc-rfT2" )  endif  }
	"Set ResAttic:TrussSURFACEs[2] Parent"				ResAttic:TrussSURFACEs[2]:Parent			= {	Local( CSE_ZONE )  }
	"Set ResAttic:TrussSURFACEs[2]:SourceAttic"		ResAttic:TrussSURFACEs[2]:SourceAttic	= {	Local( Name )  }
	"Set remaining Attic Truss Surface-1"			ResAttic:TrussSURFACEs[2]:Action			= {	EvalRulelist( "Default_AtticTruss_SURFACE", 2 )  }

	"Create ResAttic:TrussSURFACEs[3]"					ResAttic:TrussSURFACEs[3]					= {	if (FloorArea < 0.5) then  UNDEFINED
																														else  CreateComp( cseSURFACE, substr( Name, 0, 44 ) + "-atc-rfT3" )  endif  }
	"Set ResAttic:TrussSURFACEs[3] Parent"				ResAttic:TrussSURFACEs[3]:Parent			= {	Local( CSE_ZONE )  }
	"Set ResAttic:TrussSURFACEs[3]:SourceAttic"		ResAttic:TrussSURFACEs[3]:SourceAttic	= {	Local( Name )  }
	"Set remaining Attic Truss Surface-1"			ResAttic:TrussSURFACEs[3]:Action			= {	EvalRulelist( "Default_AtticTruss_SURFACE", 2 )  }

 ; CSE ZONE (CrawlSpace) surfaces
	"Create CrawlSpace surfaces"  		ResCrawlSpc:Action		= {	if (LocalCompAssigned( CSE_ZONE ) == 0) then  UNDEFINED
																						else  EvalRulelist( "SimPrep_CSE_CrawlSpace_Surfaces" )  endif  }
END
;*************************************************************************

;*************************************************************************
RULELIST "CSE_Cleanup_Surfaces" 1 0 0 1
;*************************************************************************
	"Blast ResUndgrWall:FrameSURFACE"		ResUndgrWall:FrameSURFACE		= {	if (LocalCompAssigned( FrameSURFACE  )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResUndgrWall:CavitySURFACE"		ResUndgrWall:CavitySURFACE	= {	if (LocalCompAssigned( CavitySURFACE )) then  DeleteComp()  else  UNCHANGED  endif  }

	"Blast ResIntWall:FrameSURFACE"		ResIntWall:FrameSURFACE		= {	if (LocalCompAssigned( FrameSURFACE  )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResIntWall:CavitySURFACE"		ResIntWall:CavitySURFACE	= {	if (LocalCompAssigned( CavitySURFACE )) then  DeleteComp()  else  UNCHANGED  endif  }

	"Blast ResExtWall:FrameSURFACE"		ResExtWall:FrameSURFACE		= {	if (LocalCompAssigned( FrameSURFACE  )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResExtWall:CavitySURFACE"		ResExtWall:CavitySURFACE	= {	if (LocalCompAssigned( CavitySURFACE )) then  DeleteComp()  else  UNCHANGED  endif  }

;	"Blast ResWin:NoScrnWINDOW"			ResWin:NoScrnWINDOW	= {	if (LocalCompAssigned( NoScrnWINDOW )) then  DeleteComp()  else  UNCHANGED  endif  }
;	"Blast ResWin:ScrnWINDOW"				ResWin:ScrnWINDOW		= {	if (LocalCompAssigned(   ScrnWINDOW )) then  DeleteComp()  else  UNCHANGED  endif  }

;	"Blast ResDr:SimDOOR"					ResDr:SimDOOR		= {	if (LocalCompAssigned( SimDOOR )) then  DeleteComp()  else  UNCHANGED  endif  }

	"Blast ResCathedralCeiling:FrameSURFACE"		ResCathedralCeiling:FrameSURFACE		= {	if (LocalCompAssigned( FrameSURFACE    )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCathedralCeiling:CavitySURFACE"		ResCathedralCeiling:CavitySURFACE	= {	if (LocalCompAssigned( CavitySURFACE   )) then  DeleteComp()  else  UNCHANGED  endif  }

	"Blast ResCeilingBelowAttic:FrameSURFACE"		ResCeilingBelowAttic:FrameSURFACE	= {	if (LocalCompAssigned( FrameSURFACE    )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCeilingBelowAttic:CavitySURFACE"	ResCeilingBelowAttic:CavitySURFACE	= {	if (LocalCompAssigned( CavitySURFACE   )) then  DeleteComp()  else  UNCHANGED  endif  }

	"Blast ResIntCeiling:FrameSURFACE"		ResIntCeiling:FrameSURFACE		= {	if (LocalCompAssigned( FrameSURFACE    )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResIntCeiling:CavitySURFACE"		ResIntCeiling:CavitySURFACE		= {	if (LocalCompAssigned( CavitySURFACE   )) then  DeleteComp()  else  UNCHANGED  endif  }

	"Blast ResSlabFlr:PerimCptSURFACE"			ResSlabFlr:PerimCptSURFACE			= {	if (LocalCompAssigned( PerimCptSURFACE    )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResSlabFlr:InteriorCptSURFACE"		ResSlabFlr:InteriorCptSURFACE		= {	if (LocalCompAssigned( InteriorCptSURFACE )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResSlabFlr:PerimExpSURFACE"			ResSlabFlr:PerimExpSURFACE			= {	if (LocalCompAssigned( PerimExpSURFACE    )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResSlabFlr:InteriorExpSURFACE"		ResSlabFlr:InteriorExpSURFACE		= {	if (LocalCompAssigned( InteriorExpSURFACE )) then  DeleteComp()  else  UNCHANGED  endif  }

	"Blast ResExtFlr:FrameSURFACE"		ResExtFlr:FrameSURFACE		= {	if (LocalCompAssigned( FrameSURFACE  )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResExtFlr:CavitySURFACE"		ResExtFlr:CavitySURFACE	= {	if (LocalCompAssigned( CavitySURFACE )) then  DeleteComp()  else  UNCHANGED  endif  }

	"Blast ResExtFlr:FrameSURFACE"		ResExtFlr:FrameSURFACE		= {	if (LocalCompAssigned( FrameSURFACE  )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResExtFlr:CavitySURFACE"		ResExtFlr:CavitySURFACE	= {	if (LocalCompAssigned( CavitySURFACE )) then  DeleteComp()  else  UNCHANGED  endif  }

	"Blast ResFlrOverCrawlSpc:FrameSURFACE"		ResFlrOverCrawlSpc:FrameSURFACE	= {	if (LocalCompAssigned( FrameSURFACE  )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResFlrOverCrawlSpc:CavitySURFACE"	ResFlrOverCrawlSpc:CavitySURFACE	= {	if (LocalCompAssigned( CavitySURFACE )) then  DeleteComp()  else  UNCHANGED  endif  }

	"Blast ResUndgrFlr:CptSURFACE"				ResUndgrFlr:CptSURFACE				= {	if (LocalCompAssigned( CptSURFACE )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResUndgrFlr:ExpSURFACE"				ResUndgrFlr:ExpSURFACE				= {	if (LocalCompAssigned( ExpSURFACE )) then  DeleteComp()  else  UNCHANGED  endif  }

	"Blast attic truss material & construction components"			ResAttic:Action 		= {	EvalRulelist( "CAResAttic_BlastTrussMatAndCons", 1 )  }

	"Blast crawl space floor material & construction components"	ResCrawlSpc:Action = {	EvalRulelist( "BlastCrawlSpaceMatAndCons", 1 )  }

;	"Blast attic edge WA construction component"							ResConsAssm:Action 		= {	if (LocalCompAssigned( AtcEdg_WACons ) == 0) then  UNCHANGED		; SAC 12/3/12
;																														else	EvalRulelist( "BlastAtticEdgeWACons", 1 )  endif  }
;	"Blast attic edge WB ins. material & construction components"	ResConsAssm:Action 		= {	if (LocalCompAssigned( AtcEdg_WBCons ) == 0) then  UNCHANGED
;																														else	EvalRulelist( "BlastAtticEdgeWBCons", 1 )  endif  }
END
;*************************************************************************


;*************************************************************************
RULELIST "Create_UndWall_SURFACEs" 0 0 0 1
;   Rules to create SURFACE components for a given UndWall
;   This subordinate rulelist used for creation in order to ensure that SURFACE component order is interleaved (alternating -Frm & -Cav walls)
;*************************************************************************
; SAC 7/16/14 - revise logic (similar to mod for ExtWall) to ensure that resulting walls will have areas > 0 BEFORE creating them
	"Create new ResUndgrWall:FrameSURFACE"  	ResUndgrWall:FrameSURFACE		= {	if (LocalRef( Construction:FramingFactor ) <= 0 .OR. IfValidAnd( Area >= 0.01 )==0) then  UNDEFINED
																							else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Frm" )  endif  }
	"Create new ResUndgrWall:CavitySURFACE" 	ResUndgrWall:CavitySURFACE	= {	if (LocalRef( Construction:FramingFactor ) < 0 .OR. LocalRef( Construction:FramingFactor ) >= 1 .OR. IfValidAnd( Area >= 0.01 )==0) then  UNDEFINED
																							else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Cav" )  endif  }
END

;*************************************************************************
RULELIST "Create_IntWall_SURFACEs" 0 0 0 1
;   Rules to create SURFACE components for a given IntWall
;   This subordinate rulelist used for creation in order to ensure that SURFACE component order is interleaved (alternating -Frm & -Cav walls)
;*************************************************************************
; SAC 7/16/14 - revise logic (similar to mod for ExtWall) to ensure that resulting walls will have areas > 0 BEFORE creating them
; SAC 5/8/15 - revised checks to check NetWallArea, not simply Area before creating FrameSURFACE (issue 535)
	"Create new ResIntWall:FrameSURFACE"  	ResIntWall:FrameSURFACE		= {	if (IfValidAnd( Construction:FramingFactor > 0 ) .AND. IfValidAnd( NetWallArea >= 0.01 ))
																							then  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Frm" )    else  UNDEFINED  endif  }
	"Create new ResIntWall:CavitySURFACE" 	ResIntWall:CavitySURFACE	= {	if (IfValidAnd( Construction:FramingFactor < 1 ) .AND. IfValidAnd( Area > (ValidOr( NetWallArea, 0 ) * ValidOr( FramingFactor, 0 )) ))
																							then  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Cav" )    else  UNDEFINED  endif  }
END

;*************************************************************************
RULELIST "Create_CathedralCeiling_SURFACEs" 0 0 0 1
;   Rules to create SURFACE components for a given CathedralCeiling
;   This subordinate rulelist used for creation in order to ensure that SURFACE component order is interleaved (alternating -Frm & -Cav walls)
;*************************************************************************
; SAC 7/16/14 - revise logic (similar to mod for ExtWall) to ensure that resulting walls will have areas > 0 BEFORE creating them
	"Create new ResCathedralCeiling:FrameSURFACE"  	ResCathedralCeiling:FrameSURFACE		= {	if (LocalRef( Construction:FramingFactor ) <= 0 .OR. IfValidAnd( NetWallArea >= 0.01 )==0) then  UNDEFINED
																													else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Frm" )  endif  }
	"Create new ResCathedralCeiling:CavitySURFACE" 	ResCathedralCeiling:CavitySURFACE	= {	if (LocalRef( Construction:FramingFactor ) < 0 .OR. LocalRef( Construction:FramingFactor ) >= 1 .OR.
																															IfValidAnd( Area > (ValidOr( NetWallArea, 0 ) * ValidOr( FramingFactor, 0 )) )==0 ) then  UNDEFINED
																													else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Cav" )  endif  }
END

;*************************************************************************
RULELIST "Create_CeilingBelowAttic_SURFACEs" 0 0 0 1
;   Rules to create SURFACE components for a given CeilingBelowAttic
;   This subordinate rulelist used for creation in order to ensure that SURFACE component order is interleaved (alternating -Frm & -Cav walls)
;*************************************************************************
; SAC 7/16/14 - revise logic (similar to mod for ExtWall) to ensure that resulting walls will have areas > 0 BEFORE creating them
	"Create new ResCeilingBelowAttic:FrameSURFACE"  	ResCeilingBelowAttic:FrameSURFACE	= {	if (LocalRef( Construction:FramingFactor ) <= 0 .OR. LocalStatus( Area ) < 1 .OR. LocalStatus( AtcEdg_TotArea ) < 1 .OR.
																																(ValidOr( Area, 0 ) - ValidOr( AtcEdg_TotArea, 0 )) < 0.01) then  UNDEFINED
																														else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Frm" )  endif  }
	"Create new ResCeilingBelowAttic:CavitySURFACE" 	ResCeilingBelowAttic:CavitySURFACE	= {	if (LocalRef( Construction:FramingFactor ) < 0 .OR. LocalRef( Construction:FramingFactor ) >= 1 .OR. LocalStatus( Area ) < 1 .OR. LocalStatus( AtcEdg_TotArea ) < 1 .OR.
																																(ValidOr( Area, 0 ) - ValidOr( AtcEdg_TotArea, 0 )) < 0.01) then  UNDEFINED
																														else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Cav" )  endif  }
END

;*************************************************************************
RULELIST "Create_AtticEdgeWACathedralCeiling_SURFACEs" 0 0 0 1
;   Rules to create SURFACE components to model the WA portion of the Attic Edge for a given CeilingBelowAttic
;   This subordinate rulelist used for creation in order to ensure that SURFACE component order is interleaved (alternating -Frm & -Cav walls)
;*************************************************************************
	"Create new ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE"  	ResCeilingBelowAttic:AtcEdg_WAFrameSURFACE	= {	if (LocalRef( Construction:FramingFactor ) <= 0) then  UNDEFINED
																																				else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-WAFrm" )  endif  }
	"Create new ResCeilingBelowAttic:AtcEdg_WACavitySURFACE" 	ResCeilingBelowAttic:AtcEdg_WACavitySURFACE	= {	if (LocalRef( Construction:FramingFactor ) < 0 .OR. LocalRef( Construction:FramingFactor ) >= 1) then  UNDEFINED
																																				else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-WACav" )  endif  }
END

;*************************************************************************
RULELIST "Create_AtticEdgeWBCathedralCeiling_SURFACEs" 0 0 0 1
;   Rules to create SURFACE components to model the WB portion of the Attic Edge for a given CeilingBelowAttic
;   This subordinate rulelist used for creation in order to ensure that SURFACE component order is interleaved (alternating -Frm & -Cav walls)
;*************************************************************************
	"Create new ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE"  	ResCeilingBelowAttic:AtcEdg_WBFrameSURFACE	= {	if (LocalRef( Construction:FramingFactor ) <= 0) then  UNDEFINED
																																				else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-WBFrm" )  endif  }
	"Create new ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE" 	ResCeilingBelowAttic:AtcEdg_WBCavitySURFACE	= {	if (LocalRef( Construction:FramingFactor ) < 0 .OR. LocalRef( Construction:FramingFactor ) >= 1) then  UNDEFINED
																																				else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-WBCav" )  endif  }
END

;*************************************************************************
RULELIST "Create_ExtWall_SURFACEs" 0 0 0 1
;   Rules to create SURFACE components for a given ExtWall
;   This subordinate rulelist used for creation in order to ensure that SURFACE component order is interleaved (alternating -Frm & -Cav walls)
;*************************************************************************
; SAC 7/16/14 - revise logic to ensure that resulting walls will have areas > 0 BEFORE creating them
	"Create new ResExtWall:FrameSURFACE"  	ResExtWall:FrameSURFACE		= {	if (IfValidAnd( Construction:FramingFactor > 0 ) .AND. IfValidAnd( NetWallArea >= 0.01 ))
																							then  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Frm" )    else  UNDEFINED  endif  }
																					;		if (IfValidAnd( Construction:FramingFactor > 0 )) then  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Frm" )
																					;		else  UNDEFINED  endif  }
	"Create new ResExtWall:CavitySURFACE" 	ResExtWall:CavitySURFACE	= {	if (IfValidAnd( Construction:FramingFactor < 1 ) .AND. IfValidAnd( Area > (ValidOr( NetWallArea, 0 ) * ValidOr( FramingFactor, 0 )) ))
																							then  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Cav" )    else  UNDEFINED  endif  }
																					;		if (IfValidAnd( Construction:FramingFactor < 1 )) then  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Cav" )
																					;		else  UNDEFINED  endif  }
END

;*************************************************************************
RULELIST "Create_WINDOWs" 0 0 0 1
;   Rules to create WINDOW (& SHADE) components for a given Win
;*************************************************************************
	"Create new ResWin:NoScrnWINDOW"			ResWin:NoScrnWINDOW	= {	CreateComp( cseWINDOW, substr( Name, 0, 46 ) + "-NoScrn" )  }
	"Create new ResWin:ScrnWINDOW"			ResWin:ScrnWINDOW		= {	if (Local( ExteriorShade ) != 1) then  UNDEFINED
																					else  CreateComp( cseWINDOW, substr( Name, 0, 46 ) + "-Scrn" )  endif  }
	; CSE window shade stuff
	"Create new ResWin:NoScrnWinShade"		ResWin:NoScrnWinShade	= {	if (LocalCompAssigned( NoScrnWINDOW ) .AND.
																								SpecMethod == 1 .AND. ModelFinsOverhang > 0.5 .AND.
																								(Local(OverhangDepth) > 0.01 .OR. Local(LeftFinDepth) > 0.01 .OR. Local(RightFinDepth) > 0.01))
																						then  CreateComp( cseSHADE, substr( NoScrnWINDOW:Name, 0, 48 ) + "-Shd" )
																						else  UNDEFINED  endif  }
	"Create new ResWin:ScrnWinShade"			ResWin:ScrnWinShade		= {	if (LocalCompAssigned( ScrnWINDOW ) .AND.
																								SpecMethod == 1 .AND. ModelFinsOverhang > 0.5 .AND.
																								(Local(OverhangDepth) > 0.01 .OR. Local(LeftFinDepth) > 0.01 .OR. Local(RightFinDepth) > 0.01))
																						then  CreateComp( cseSHADE, substr( ScrnWINDOW:Name, 0, 48 ) + "-Shd" )
																						else  UNDEFINED  endif  }
END

;*************************************************************************
RULELIST "Default_WINDOW_BasedOn_SourceWin" 0 0 0 1
;   Rules to default newly-created WINDOW components
;*************************************************************************

; SAC 12/14/12 - revised rules outputting CSE WINDOW objects to bypass an autosizing bug by ensuring wnMult is ALWAYS = 1
;	"Default cseWINDOW:wnArea"			cseWINDOW:wnArea		= {	LocalRef( SourceWin:Area   )  }
	"Default cseWINDOW:wnArea"			cseWINDOW:wnArea		= {	if (LocalRef( SourceWin:ExteriorShade ) == 1)
																					then	SourceWin:Area * SourceWin:Multiplier / 2
																					else  SourceWin:Area * SourceWin:Multiplier      endif  }
; KN 08/30/2016 To solve rounding problem from double to real to get rid of funny window areas like 25.200004
;	"Round cseWINDOW:wnArea"			cseWINDOW:wnArea		= {	int((1000.0*wnArea)+0.5)/1000.0 }
; Above commented out to fix rounding bug on additions and/or alterations

; SAC 1/13/14 - revised rules to reflect case where areas are valid but wd/ht undefined
	"Default cseWINDOW:wnHeight"		cseWINDOW:wnHeight	= {	if (LocalStatus( SourceWin:Height ) > 1)
																					then	if (LocalRef( SourceWin:Height ) > 0) then  LocalRef( SourceWin:Height )
																							else if (wnArea > 0) then  sqrt( wnArea )
																							else  UNDEFINED  endif endif
																					else if ((SourceWin:Area * SourceWin:Multiplier) > 0.01)
																					then  sqrt( (SourceWin:Area * SourceWin:Multiplier) )
																					else	UNDEFINED  endif endif  }
	"Default cseWINDOW:wnWidth"		cseWINDOW:wnWidth		= {   if (LocalStatus( SourceWin:Width  ) > 1)
																					then  if (LocalRef( SourceWin:Width  ) > 0) then  LocalRef( SourceWin:Width  )
																							else if (wnArea > 0)
																							then  if (wnHeight > 0) then  wnArea / wnHeight
																									else  sqrt( wnArea )  endif
																							else  UNDEFINED  endif endif
																					else if ((SourceWin:Area * SourceWin:Multiplier) > 0.01)
																					then  if (LocalStatus( wnHeight ) > 0)
																							then			(SourceWin:Area * SourceWin:Multiplier) / wnHeight
																							else  sqrt( (SourceWin:Area * SourceWin:Multiplier) )  endif
																					else	UNDEFINED  endif endif  }

	"Default cseWINDOW:wnUnfrc"		cseWINDOW:wnUnfrc		= {	LocalRef( SourceWin:NFRCUfactor )  }
	"Default cseWINDOW:wnSHGC"			cseWINDOW:wnSHGC		= {	LocalRef( SourceWin:NFRCSHGC    )  }

; SAC 12/14/12 - revised rules outputting CSE WINDOW objects to bypass an autosizing bug by ensuring wnMult is ALWAYS = 1
;	"Default cseWINDOW:wnMult"			cseWINDOW:wnMult		= {   if (LocalRef( SourceWin:ExteriorShade ) == 1)
;																					then	LocalRef( SourceWin:Multiplier  ) / 2
;																					else  LocalRef( SourceWin:Multiplier  )  endif  }
	"Default cseWINDOW:wnMult"			cseWINDOW:wnMult		= {   1  }
	
	"Default cseWINDOW:wnFMult"		cseWINDOW:wnFMult		= {	0.85  }
	"Default cseWINDOW:wnDirtLoss"	cseWINDOW:wnDirtLoss	= {	0.1  }
	
	"Default cseWINDOW:wnNGlz"			cseWINDOW:wnNGlz		= {	if (Local( wnUnfrc ) > 0.8) then  1  else  2  endif  }   ; based on logic present in default CSE files

;            "wnModel",           BEMP_Sym,  - symbol defaulted

;            "wnExShd",           BEMP_Sym,  - defined already based on SourceWin assignment
;            "wnInShd",           BEMP_Sym,  - symbol defaulted

   ; added window view factor setting to account for overhang - SAC 6/22/17
   "Set cseWINDOW:wnVfSkyDf - View factor from window to sky for diffuse radiation"
      cseWINDOW:wnVfSkyDf  = {
         if (IfValidAnd( SourceWin:OvrhngViewFctrSky >= 0 ))
         then  SourceWin:OvrhngViewFctrSky
         else  UNDEFINED  endif  }
END

;*************************************************************************
RULELIST "Default_SHADE_BasedOn_Win" 0 0 0 1
;   Rules to default newly-created SHADE components
;*************************************************************************

	"Default cseSHADE:ohDepth" 	cseSHADE:ohDepth 	= {	if (LocalStatus( SourceWin:OverhangDepth  ) > 0 .AND. LocalRef( SourceWin:OverhangDepth  ) >= 0.001) then  LocalRef( SourceWin:OverhangDepth  )  else  UNDEFINED  endif  }
	"Default cseSHADE:ohDistUp"	cseSHADE:ohDistUp	= {	if (LocalStatus( SourceWin:OverhangDistUp ) > 0 .AND. LocalRef( SourceWin:OverhangDistUp ) >= 0.001) then  LocalRef( SourceWin:OverhangDistUp )  else  UNDEFINED  endif  }
	"Default cseSHADE:ohExL"   	cseSHADE:ohExL   	= {	if (LocalStatus( SourceWin:OverhangExL    ) > 0 .AND. LocalRef( SourceWin:OverhangExL    ) >= 0.001) then  LocalRef( SourceWin:OverhangExL    )  else  UNDEFINED  endif  }
	"Default cseSHADE:ohExR"   	cseSHADE:ohExR   	= {	if (LocalStatus( SourceWin:OverhangExR    ) > 0 .AND. LocalRef( SourceWin:OverhangExR    ) >= 0.001) then  LocalRef( SourceWin:OverhangExR    )  else  UNDEFINED  endif  }
	"Default cseSHADE:ohFlap"  	cseSHADE:ohFlap  	= {	if (LocalStatus( SourceWin:OverhangFlap   ) > 0 .AND. LocalRef( SourceWin:OverhangFlap   ) >= 0.001) then  LocalRef( SourceWin:OverhangFlap   )  else  UNDEFINED  endif  }
	"Default cseSHADE:lfDepth" 	cseSHADE:lfDepth 	= {	if (LocalStatus( SourceWin:LeftFinDepth   ) > 0 .AND. LocalRef( SourceWin:LeftFinDepth   ) >= 0.001) then  LocalRef( SourceWin:LeftFinDepth   )  else  UNDEFINED  endif  }
	"Default cseSHADE:lfTopUp" 	cseSHADE:lfTopUp 	= {	if (LocalStatus( SourceWin:LeftFinTopUp   ) > 0 .AND. LocalRef( SourceWin:LeftFinTopUp   ) >= 0.001) then  LocalRef( SourceWin:LeftFinTopUp   )  else  UNDEFINED  endif  }
	"Default cseSHADE:lfDistL" 	cseSHADE:lfDistL 	= {	if (LocalStatus( SourceWin:LeftFinDistL   ) > 0 .AND. LocalRef( SourceWin:LeftFinDistL   ) >= 0.001) then  LocalRef( SourceWin:LeftFinDistL   )  else  UNDEFINED  endif  }
	"Default cseSHADE:lfBotUp" 	cseSHADE:lfBotUp 	= {	if (LocalStatus( SourceWin:LeftFinBotUp   ) > 0 .AND. LocalRef( SourceWin:LeftFinBotUp   ) >= 0.001) then  LocalRef( SourceWin:LeftFinBotUp   )  else  UNDEFINED  endif  }
	"Default cseSHADE:rfDepth" 	cseSHADE:rfDepth 	= {	if (LocalStatus( SourceWin:RightFinDepth  ) > 0 .AND. LocalRef( SourceWin:RightFinDepth  ) >= 0.001) then  LocalRef( SourceWin:RightFinDepth  )  else  UNDEFINED  endif  }
	"Default cseSHADE:rfTopUp" 	cseSHADE:rfTopUp 	= {	if (LocalStatus( SourceWin:RightFinTopUp  ) > 0 .AND. LocalRef( SourceWin:RightFinTopUp  ) >= 0.001) then  LocalRef( SourceWin:RightFinTopUp  )  else  UNDEFINED  endif  }
	"Default cseSHADE:rfDistR" 	cseSHADE:rfDistR 	= {	if (LocalStatus( SourceWin:RightFinDistR  ) > 0 .AND. LocalRef( SourceWin:RightFinDistR  ) >= 0.001) then  LocalRef( SourceWin:RightFinDistR  )  else  UNDEFINED  endif  }
	"Default cseSHADE:rfBotUp" 	cseSHADE:rfBotUp 	= {	if (LocalStatus( SourceWin:RightFinBotUp  ) > 0 .AND. LocalRef( SourceWin:RightFinBotUp  ) >= 0.001) then  LocalRef( SourceWin:RightFinBotUp  )  else  UNDEFINED  endif  }

END

;;*************************************************************************
;RULELIST "Default_DOOR_BasedOn_SourceDoor" 0 0 0 1
;;   Rules to default newly-created DOOR components
;;*************************************************************************
;
;	"Default cseDOOR:drArea"	cseDOOR:drArea		= {	LocalRef( SourceDoor:Area    )  }
;	"Default cseDOOR:drU"		cseDOOR:drU			= {   LocalRef( SourceDoor:Ufactor )  }
;
;END

;*************************************************************************
RULELIST "Create_InteriorCeiling_SURFACEs" 0 0 0 1
;   Rules to create SURFACE components for a given InteriorCeiling
;   This subordinate rulelist used for creation in order to ensure that SURFACE component order is interleaved (alternating -Frm & -Cav walls)
;*************************************************************************
	"Create new ResIntCeiling:FrameSURFACE"  	ResIntCeiling:FrameSURFACE	= {	if (LocalRef( Construction:FramingFactor ) <= 0 .OR. IfValidAnd( Area > 0 )==0) then  UNDEFINED
																												else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Frm" )  endif  }
	"Create new ResIntCeiling:CavitySURFACE" 	ResIntCeiling:CavitySURFACE	= {	if (LocalRef( Construction:FramingFactor ) < 0 .OR. LocalRef( Construction:FramingFactor ) >= 1 .OR. IfValidAnd( Area > 0 )==0) then  UNDEFINED
																												else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Cav" )  endif  }
END

;*************************************************************************
RULELIST "Create_ExteriorFloor_SURFACEs" 0 0 0 1
;   Rules to create SURFACE components for a given ExteriorFloor
;   This subordinate rulelist used for creation in order to ensure that SURFACE component order is interleaved (alternating -Frm & -Cav walls)
;*************************************************************************
; SAC 7/16/14 - revise logic (similar to mod for ExtWall) to ensure that resulting walls will have areas > 0 BEFORE creating them
	"Create new ResExtFlr:FrameSURFACE"  	ResExtFlr:FrameSURFACE		= {	if (LocalRef( Construction:FramingFactor ) <= 0 .OR. IfValidAnd( Area > 0 )==0) then  UNDEFINED
																											else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Frm" )  endif  }
	"Create new ResExtFlr:CavitySURFACE" 	ResExtFlr:CavitySURFACE	= {	if (LocalRef( Construction:FramingFactor ) < 0 .OR. LocalRef( Construction:FramingFactor ) >= 1 .OR. IfValidAnd( Area > 0 )==0) then  UNDEFINED
																											else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Cav" )  endif  }
END

;*************************************************************************
RULELIST "Create_FloorOverCrawl_SURFACEs" 0 0 0 1
;   Rules to create SURFACE components for a given FloorOverCrawl
;   This subordinate rulelist used for creation in order to ensure that SURFACE component order is interleaved (alternating -Frm & -Cav walls)
;*************************************************************************
; SAC 7/16/14 - revise logic (similar to mod for ExtWall) to ensure that resulting walls will have areas > 0 BEFORE creating them
	"Create new ResFlrOverCrawlSpc:FrameSURFACE"  	ResFlrOverCrawlSpc:FrameSURFACE	= {	if (LocalRef( Construction:FramingFactor ) <= 0 .OR. IfValidAnd( Area > 0 )==0) then  UNDEFINED
																												else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Frm" )  endif  }
	"Create new ResFlrOverCrawlSpc:CavitySURFACE" 	ResFlrOverCrawlSpc:CavitySURFACE	= {	if (LocalRef( Construction:FramingFactor ) < 0 .OR. LocalRef( Construction:FramingFactor ) >= 1 .OR. IfValidAnd( Area > 0 )==0) then  UNDEFINED
																												else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Cav" )  endif  }
END

;*************************************************************************
RULELIST "Create_InteriorFloor_SURFACEs" 0 0 0 1
;   Rules to create SURFACE components for a given InteriorFloor
;   This subordinate rulelist used for creation in order to ensure that SURFACE component order is interleaved (alternating -Frm & -Cav walls)
;*************************************************************************
; SAC 7/16/14 - revise logic (similar to mod for ExtWall) to ensure that resulting walls will have areas > 0 BEFORE creating them
	"Create new ResIntFlr:FrameSURFACE"  	ResIntFlr:FrameSURFACE		= {	if (LocalRef( Construction:FramingFactor ) <= 0 .OR. IfValidAnd( Area > 0 )==0) then  UNDEFINED
																											else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Frm" )  endif  }
	"Create new ResIntFlr:CavitySURFACE" 	ResIntFlr:CavitySURFACE	= {	if (LocalRef( Construction:FramingFactor ) < 0 .OR. LocalRef( Construction:FramingFactor ) >= 1 .OR. IfValidAnd( Area > 0 )==0) then  UNDEFINED
																											else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Cav" )  endif  }
END

;*************************************************************************
RULELIST "Create_UndFloor_SURFACEs" 0 0 0 1
;   Rules to create SURFACE components for a given UndFloor
;   This subordinate rulelist used for creation in order to ensure that SURFACE component order is interleaved (alternating -Frm & -Cav walls)
;*************************************************************************
	"Create new ResUndgrFlr:CptSURFACE"  		ResUndgrFlr:CptSURFACE		= {	if (IfValidAnd( Area > 0 )==0 .OR. IfValidAnd( CarpetedFrac > 0 )==0) then  UNDEFINED
																								else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Cpt" )  endif  }

	"Create new ResUndgrFlr:ExpSURFACE"  		ResUndgrFlr:ExpSURFACE		= {	if (IfValidAnd( Area > 0 )==0 .OR. IfValidAnd( CarpetedFrac < 1 )==0) then  UNDEFINED
																								else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Exp" )  endif  }
END

;*************************************************************************
RULELIST "Create_SlabFloor_SURFACEs" 0 0 0 1
;   Rules to create SURFACE components for a given SlabFloor
;*************************************************************************
; SAC 7/16/14 - revise logic (similar to mod for ExtWall) to ensure that resulting walls will have areas > 0 BEFORE creating them
	"Create new ResSlabFlr:PerimCptSURFACE"  		ResSlabFlr:PerimCptSURFACE		= {	if (LocalStatus( Perimeter ) < 1 .OR. LocalStatus( Area ) < 1
																														.OR. CarpetedFrac <= 0 .OR. (min( (Perimeter * 2), Area ) * CarpetedFrac) < 0.01) then  UNDEFINED
																												else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Prm" )  endif  }
	"Create new ResSlabFlr:InteriorCptSURFACE" 	ResSlabFlr:InteriorCptSURFACE	= {	if (LocalStatus( Perimeter ) < 1 .OR. LocalStatus( Area ) < 1
																														.OR. (Perimeter * 2) >= (Area - 0.5)
																														.OR. CarpetedFrac <= 0) then  UNDEFINED
																												else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Int" )  endif  }

	"Create new ResSlabFlr:PerimExpSURFACE"  		ResSlabFlr:PerimExpSURFACE		= {	if (LocalStatus( Perimeter ) < 1 .OR. LocalStatus( Area ) < 1
																														.OR. CarpetedFrac >= 1 .OR. (min( (Perimeter * 2), Area ) * (1 - CarpetedFrac)) < 0.01) then  UNDEFINED
																												else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Prm" )  endif  }
	"Create new ResSlabFlr:InteriorExpSURFACE" 	ResSlabFlr:InteriorExpSURFACE	= {	if (LocalStatus( Perimeter ) < 1 .OR. LocalStatus( Area ) < 1
																														.OR. (Perimeter * 2) >= (Area - 0.5)
																														.OR. CarpetedFrac >= 1) then  UNDEFINED
																												else  CreateComp( cseSURFACE, substr( Name, 0, 48 ) + "-Int" )  endif  }
END


;*************************************************************************
RULELIST "Default_AtticRoof_SURFACE" 0 0 0 0
;*************************************************************************
	"Set cseSURFACE:sfTilt"			cseSURFACE:sfTilt			= {	LocalRef( SourceAttic:RoofTilt   )  }
	"Set cseSURFACE:sfExAbs"		cseSURFACE:sfExAbs		= {	max( 0, 1 - LocalRef( SourceAttic:RoofSolReflect ) )  }
	"Set cseSURFACE:sfExEpsLW"		cseSURFACE:sfExEpsLW		= {	LocalRef( SourceAttic:RoofEmiss  )  }
	"Set cseSURFACE:sfInEpsLW"		cseSURFACE:sfInEpsLW		=                       ; added logic to prevent sfInEpsLW of 0.05 for Frame path cons - SAC 08/28/20
      {  if (LocalRef( SourceAttic:Construction:RadiantBarrier ) > 0.5 .AND.
             IfValidAnd( SourceAttic:Construction:cseCavCONS = sfCon ))
         then  0.05  else  0.9  endif  }
	"Set cseSURFACE:sfType"			cseSURFACE:sfType			= {	"Ceiling"  }
	"Set cseSURFACE:sfModel"		cseSURFACE:sfModel		= {	"Forward_Difference"  }
END
;*************************************************************************
RULELIST "Default_AtticTruss_SURFACE" 0 0 0 0
;*************************************************************************
	"Set cseSURFACE:sfType"			cseSURFACE:sfType			= {	"Wall"  }
	"Set cseSURFACE:sfCon"			cseSURFACE:sfCon			= {	LocalRef( SourceAttic:TrussCONS )  }
	"Set cseSURFACE:sfArea"			cseSURFACE:sfArea			= {	LocalRef( SourceAttic:TrussArea ) / 3  }
	"Set cseSURFACE:sfExCnd"		cseSURFACE:sfExCnd		= {	"Adiabatic"  }
	"Set cseSURFACE:sfAzm"			cseSURFACE:sfAzm			= {	0  }
	"Set cseSURFACE:sfModel"		cseSURFACE:sfModel		= {	"Forward_Difference"  }
END


;*************************************************************************
RULELIST "CAResAttic_CreateTrussMatAndCons" 0 0 0 0
;*************************************************************************
	"Blast attic truss material & construction components"	ResAttic:Action = {	EvalRulelist( "CAResAttic_BlastTrussMatAndCons", 1 )  }    ; should not be necessary, but just in case...

	"Create ResAttic:TrussMATERIAL"  		ResAttic:TrussMATERIAL				= {	CreateComp( cseMATERIAL,     "m-AtticTruss" )  }
;	"Set ResAttic:TrussMATERIAL:matCond"  	ResAttic:TrussMATERIAL:matCond	= {	0.0667  }
;	"Set ResAttic:TrussMATERIAL:matSpHt"  	ResAttic:TrussMATERIAL:matSpHt	= {	0.33  }
;	"Set ResAttic:TrussMATERIAL:matDens"  	ResAttic:TrussMATERIAL:matDens	= {	32.0  }
	"Set ResAttic:TrussMATERIAL:matCond"  	ResAttic:TrussMATERIAL:matCond	= {	if (GlobalCompAssigned( ResProj:LibMat_SoftWood ) < 1) then  UNDEFINED
																									else if (GlobalStatus( ResProj:LibMat_SoftWood:ConductivityQII ) < 1) then  UNDEFINED
																									else  GlobalRef( ResProj:LibMat_SoftWood:ConductivityQII )  endif endif  }
	"Set ResAttic:TrussMATERIAL:matCondCT"	ResAttic:TrussMATERIAL:matCondCT	= {	if (GlobalCompAssigned( ResProj:LibMat_SoftWood ) < 1) then  UNDEFINED
																									else if (GlobalStatus( ResProj:LibMat_SoftWood:ConductivityCT ) < 1) then  UNDEFINED
																									else  GlobalRef( ResProj:LibMat_SoftWood:ConductivityCT )  endif endif  }
	"Set ResAttic:TrussMATERIAL:matSpHt"  	ResAttic:TrussMATERIAL:matSpHt	= {	if (GlobalCompAssigned( ResProj:LibMat_SoftWood ) < 1) then  UNDEFINED
																									else if (GlobalStatus( ResProj:LibMat_SoftWood:SpecHeat ) < 1) then  UNDEFINED
																									else  GlobalRef( ResProj:LibMat_SoftWood:SpecHeat )  endif endif  }
	"Set ResAttic:TrussMATERIAL:matDens"  	ResAttic:TrussMATERIAL:matDens	= {	if (GlobalCompAssigned( ResProj:LibMat_SoftWood ) < 1) then  UNDEFINED
																									else if (GlobalStatus( ResProj:LibMat_SoftWood:Density ) < 1) then  UNDEFINED
																									else  GlobalRef( ResProj:LibMat_SoftWood:Density )  endif endif  }

	"Create ResAttic:TrussCONS"				ResAttic:TrussCONS					= {	CreateComp( cseCONSTRUCTION, "con-AtticTruss" )  }

	"Create ResAttic:TrussLAYER"				ResAttic:TrussLAYER					= {	CreateComp( cseLAYER,        "lyr-AtticTruss" )  }
	"Set ResAttic:TrussLAYER:Parent"  		ResAttic:TrussLAYER:Parent			= {	Local( TrussCONS )  }
	"Set ResAttic:TrussLAYER:lrMat"  		ResAttic:TrussLAYER:lrMat			= {	Local( TrussMATERIAL )  }
	"Set ResAttic:TrussLAYER:lrThk"  		ResAttic:TrussLAYER:lrThk			= {	0.75 / 12  }
END
;*************************************************************************
RULELIST "CAResAttic_BlastTrussMatAndCons" 1 0 0 0
;*************************************************************************
	"Blast ResAttic:TrussMATERIAL"		ResAttic:TrussMATERIAL		= {	if (LocalCompAssigned( TrussMATERIAL )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResAttic:TrussLAYER"			ResAttic:TrussLAYER			= {	if (LocalCompAssigned( TrussLAYER    )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResAttic:TrussCONS"				ResAttic:TrussCONS			= {	if (LocalCompAssigned( TrussCONS     )) then  DeleteComp()  else  UNCHANGED  endif  }
END
;*************************************************************************


;*************************************************************************
RULELIST "SimPrep_CSE_CrawlSpace_Surfaces" 0 0 0 0
;*************************************************************************

	"Blast crawl space floor material & construction components"	ResCrawlSpc:Action = {	EvalRulelist( "BlastCrawlSpaceMatAndCons", 1 )  }    ; should not be necessary, but just in case...

 ; revised 3/27/13 based on CrawlAlgorithm2.txt from BAW
	"Set ResCrawlSpc:FrameWallHeight"				ResCrawlSpc:FrameWallHeight			= {	max( 0, AvgWallHeight - 2 )  }

	"Create ResCrawlSpc:FloorMATERIAL"  			ResCrawlSpc:FloorMATERIAL			= {	CreateComp( cseMATERIAL,     "m-CrawlSpaceDirt" )  }   ; Earth - based on Bazjanac and Huang slab model
	"Set ResCrawlSpc:FloorMATERIAL:matCond"  	ResCrawlSpc:FloorMATERIAL:matCond	= {	1.0  }
	"Set ResCrawlSpc:FloorMATERIAL:matSpHt"  	ResCrawlSpc:FloorMATERIAL:matSpHt	= {	0.2  }
	"Set ResCrawlSpc:FloorMATERIAL:matDens"  	ResCrawlSpc:FloorMATERIAL:matDens	= {	115  }

	"Create ResCrawlSpc:FloorCONS"					ResCrawlSpc:FloorCONS					= {	CreateComp( cseCONSTRUCTION, "con-CrawlSpaceFloor" )  }

	"Create ResCrawlSpc:FloorLAYER"				ResCrawlSpc:FloorLAYER				= {	CreateComp( cseLAYER,        "lyr-CrawlSpaceDirtFloor" )  }
	"Set ResCrawlSpc:FloorLAYER:Parent"  		ResCrawlSpc:FloorLAYER:Parent		= {	Local( FloorCONS )  }
	"Set ResCrawlSpc:FloorLAYER:lrMat"  			ResCrawlSpc:FloorLAYER:lrMat		= {	Local( FloorMATERIAL )  }
	"Set ResCrawlSpc:FloorLAYER:lrThk"  			ResCrawlSpc:FloorLAYER:lrThk		= {	2  }		; 2 feet of dirt in crawl space

	"Create ResCrawlSpc:FloorSURFACE"						ResCrawlSpc:FloorSURFACE							= {	CreateComp( cseSURFACE, substr( Name, 0, 44 ) + "-CrwlFlr" )  }
	"Set ResCrawlSpc:FloorSURFACE Parent"				ResCrawlSpc:FloorSURFACE:Parent				= {	Local( CSE_ZONE )  }
	"Set ResCrawlSpc:FloorSURFACE:SourceCrawlSpace"	ResCrawlSpc:FloorSURFACE:SourceCrawlSpace	= {	Local( Name )  }
	"Set ResCrawlSpc:FloorSURFACE:sfType"				ResCrawlSpc:FloorSURFACE:sfType				= {	"Floor"  }
	"Set ResCrawlSpc:FloorSURFACE:sfModel"				ResCrawlSpc:FloorSURFACE:sfModel				= {	"Forward_Difference"  }
	"Set ResCrawlSpc:FloorSURFACE:sfArea"				ResCrawlSpc:FloorSURFACE:sfArea				= {	Local( Area )  }
	"Set ResCrawlSpc:FloorSURFACE:sfCon"					ResCrawlSpc:FloorSURFACE:sfCon					= {	LocalRef( FloorCONS )  }
	"Set ResCrawlSpc:FloorSURFACE:sfLthkF"				ResCrawlSpc:FloorSURFACE:sfLthkF				= {	0.5  }
	"Set ResCrawlSpc:FloorSURFACE:sfExCnd"				ResCrawlSpc:FloorSURFACE:sfExCnd        	= {	"Ground"  }
	"Set ResCrawlSpc:FloorSURFACE:sfExCTGrnd"			ResCrawlSpc:FloorSURFACE:sfExCTGrnd     	= {	0.0521  }
	"Set ResCrawlSpc:FloorSURFACE:sfExCTaDbAvgYr"		ResCrawlSpc:FloorSURFACE:sfExCTaDbAvgYr 	= {	0.0251  }
	"Set ResCrawlSpc:FloorSURFACE:sfExRConGrnd"		ResCrawlSpc:FloorSURFACE:sfExRConGrnd   	= {	2.765   }  ; (0.765+2) -- Film + 2 feet of dirt

 ; Wall
	"Create ResCrawlSpc:BGWallMATERIAL"  		ResCrawlSpc:BGWallMATERIAL				= {	CreateComp( cseMATERIAL,     "m-CrawlSpacePouredConcrete" )  }
	"Set ResCrawlSpc:BGWallMATERIAL:matCond"  	ResCrawlSpc:BGWallMATERIAL:matCond	= {	1.0417  }
	"Set ResCrawlSpc:BGWallMATERIAL:matSpHt"  	ResCrawlSpc:BGWallMATERIAL:matSpHt	= {	0.2  }
	"Set ResCrawlSpc:BGWallMATERIAL:matDens"  	ResCrawlSpc:BGWallMATERIAL:matDens	= {	140  }
	"Create ResCrawlSpc:BGWallCONS"				ResCrawlSpc:BGWallCONS					= {	CreateComp( cseCONSTRUCTION, "con-BGCrawlSpaceWall" )  }
	"Create ResCrawlSpc:BGWallLAYER[1]"			ResCrawlSpc:BGWallLAYER[1]				= {	CreateComp( cseLAYER,        "lyr-BGCrawlSpacePouredConcrete" )  }
	"Set ResCrawlSpc:BGWallLAYER[1]:Parent"  	ResCrawlSpc:BGWallLAYER[1]:Parent		= {	BGWallCONS      }
	"Set ResCrawlSpc:BGWallLAYER[1]:lrMat"  	ResCrawlSpc:BGWallLAYER[1]:lrMat		= {	BGWallMATERIAL  }
	"Set ResCrawlSpc:BGWallLAYER[1]:lrThk"  	ResCrawlSpc:BGWallLAYER[1]:lrThk		= {	0.5  }
	"Create ResCrawlSpc:BGWallLAYER[2]"			ResCrawlSpc:BGWallLAYER[2]				= {	CreateComp( cseLAYER,        "lyr-BGCrawlSpaceWallDirt" )  }
	"Set ResCrawlSpc:BGWallLAYER[2]:Parent"  	ResCrawlSpc:BGWallLAYER[2]:Parent		= {	BGWallCONS            }
	"Set ResCrawlSpc:BGWallLAYER[2]:lrMat"  	ResCrawlSpc:BGWallLAYER[2]:lrMat		= {	FloorMATERIAL:Name  }
	"Set ResCrawlSpc:BGWallLAYER[2]:lrThk"  	ResCrawlSpc:BGWallLAYER[2]:lrThk		= {	2.0  }

	"Create ResCrawlSpc:AGWallMATERIAL"  		ResCrawlSpc:AGWallMATERIAL				= {	CreateComp( cseMATERIAL,     "m-CrwlWlSNEICConcrete" )  }
	"Set ResCrawlSpc:AGWallMATERIAL:matCond"  	ResCrawlSpc:AGWallMATERIAL:matCond	= {	1.0  }
	"Set ResCrawlSpc:AGWallMATERIAL:matSpHt"  	ResCrawlSpc:AGWallMATERIAL:matSpHt	= {	0.2  }
	"Set ResCrawlSpc:AGWallMATERIAL:matDens"  	ResCrawlSpc:AGWallMATERIAL:matDens	= {	144  }
	"Create ResCrawlSpc:AGWallCONS"				ResCrawlSpc:AGWallCONS					= {	CreateComp( cseCONSTRUCTION, "con-AGCrawlSpaceWall" )  }
	"Create ResCrawlSpc:AGWallLAYER[1]"			ResCrawlSpc:AGWallLAYER[1]				= {	CreateComp( cseLAYER,        "lyr-AGCrawlSNEICConcrete" )  }
	"Set ResCrawlSpc:AGWallLAYER[1]:Parent"  	ResCrawlSpc:AGWallLAYER[1]:Parent		= {	AGWallCONS      }
	"Set ResCrawlSpc:AGWallLAYER[1]:lrMat"  	ResCrawlSpc:AGWallLAYER[1]:lrMat		= {	AGWallMATERIAL  }
	"Set ResCrawlSpc:AGWallLAYER[1]:lrThk"  	ResCrawlSpc:AGWallLAYER[1]:lrThk		= {	0.5  }

	"Create ResCrawlSpc:ConcWallSURFACE[1] - BlwGrd"			ResCrawlSpc:ConcWallSURFACE[1]							= {	CreateComp( cseSURFACE, substr( Name, 0, 38 ) + "-ConcCrwlWalBG" )  }
	"Set ResCrawlSpc:ConcWallSURFACE[1] Parent"				ResCrawlSpc:ConcWallSURFACE[1]:Parent				= {	Local( CSE_ZONE )  }
	"Set ResCrawlSpc:ConcWallSURFACE[1]:SourceCrawlSpace"	ResCrawlSpc:ConcWallSURFACE[1]:SourceCrawlSpace	= {	Local( Name )  }
	"Set ResCrawlSpc:ConcWallSURFACE[1]:sfType"				ResCrawlSpc:ConcWallSURFACE[1]:sfType				= {	"Wall"  }
	"Set ResCrawlSpc:ConcWallSURFACE[1]:sfModel"				ResCrawlSpc:ConcWallSURFACE[1]:sfModel				= {	"Forward_Difference"  }
	"Set ResCrawlSpc:ConcWallSURFACE[1]:sfArea"				ResCrawlSpc:ConcWallSURFACE[1]:sfArea				= {	Perimeter * 16/12  }		; entire perimeter in length, 16" high
	"Set ResCrawlSpc:ConcWallSURFACE[1]:sfAzm"					ResCrawlSpc:ConcWallSURFACE[1]:sfAzm					= {	0     }		; doesn't matter as no solar gains
	"Set ResCrawlSpc:ConcWallSURFACE[1]:sfCon"					ResCrawlSpc:ConcWallSURFACE[1]:sfCon					= {	LocalRef( BGWallCONS )  }
;	"Set ResCrawlSpc:ConcWallSURFACE[1]:sfExAbs"				ResCrawlSpc:ConcWallSURFACE[1]:sfExAbs        	= {	0.0   }		; No solar gain or radiant on outside
;	"Set ResCrawlSpc:ConcWallSURFACE[1]:sfExEpsLW"			ResCrawlSpc:ConcWallSURFACE[1]:sfExEpsLW     		= {	0.01  }
	"Set ResCrawlSpc:ConcWallSURFACE[1]:sfExCnd"				ResCrawlSpc:ConcWallSURFACE[1]:sfExCnd        	= {	"Ground"  }
	"Set ResCrawlSpc:ConcWallSURFACE[1]:sfExCTaDbAvg14"		ResCrawlSpc:ConcWallSURFACE[1]:sfExCTaDbAvg14 	= {	0.1692  }
	"Set ResCrawlSpc:ConcWallSURFACE[1]:sfExCTGrnd"			ResCrawlSpc:ConcWallSURFACE[1]:sfExCTGrnd     	= {	0.0737  }
	"Set ResCrawlSpc:ConcWallSURFACE[1]:sfExCTaDbAvgYr"		ResCrawlSpc:ConcWallSURFACE[1]:sfExCTaDbAvgYr 	= {	0.0014  }
	"Set ResCrawlSpc:ConcWallSURFACE[1]:sfExRConGrnd"		ResCrawlSpc:ConcWallSURFACE[1]:sfExRConGrnd   	= {	3.18    }  ; (0.68+2.5) -- film + 6" conc + 2' dirt

	"Create ResCrawlSpc:ConcWallSURFACE[2] - AbvGrd-F"		ResCrawlSpc:ConcWallSURFACE[2]							= {	CreateComp( cseSURFACE, substr( Name, 0, 38 ) + "-ConcCrwlWalAGF" )  }
	"Set ResCrawlSpc:ConcWallSURFACE[2] Parent"				ResCrawlSpc:ConcWallSURFACE[2]:Parent				= {	Local( CSE_ZONE )  }
	"Set ResCrawlSpc:ConcWallSURFACE[2]:SourceCrawlSpace"	ResCrawlSpc:ConcWallSURFACE[2]:SourceCrawlSpace	= {	Local( Name )  }
	"Set ResCrawlSpc:ConcWallSURFACE[2]:sfType"				ResCrawlSpc:ConcWallSURFACE[2]:sfType				= {	"Wall"  }
	"Set ResCrawlSpc:ConcWallSURFACE[2]:sfModel"				ResCrawlSpc:ConcWallSURFACE[2]:sfModel				= {	"Forward_Difference"  }
	"Set ResCrawlSpc:ConcWallSURFACE[2]:sfArea"				ResCrawlSpc:ConcWallSURFACE[2]:sfArea				= {	Perimeter * 0.67 / 4  }		; 1/4 of overall perimeter & 8" high
	"Set ResCrawlSpc:ConcWallSURFACE[2]:sfAzm"					ResCrawlSpc:ConcWallSURFACE[2]:sfAzm					= {	0     }
	"Set ResCrawlSpc:ConcWallSURFACE[2]:sfCon"					ResCrawlSpc:ConcWallSURFACE[2]:sfCon					= {	LocalRef( AGWallCONS )  }
	"Set ResCrawlSpc:ConcWallSURFACE[2]:sfExAbs"				ResCrawlSpc:ConcWallSURFACE[2]:sfExAbs        	= {	0.5   }
	"Set ResCrawlSpc:ConcWallSURFACE[2]:sfExHcModel"			ResCrawlSpc:ConcWallSURFACE[2]:sfExHcModel     	= {	"Unified"  }
	"Set ResCrawlSpc:ConcWallSURFACE[2]:sfInHcModel"			ResCrawlSpc:ConcWallSURFACE[2]:sfInHcModel     	= {	"Unified"  }

	"Create ResCrawlSpc:ConcWallSURFACE[3] - AbvGrd-L"		ResCrawlSpc:ConcWallSURFACE[3]							= {	CreateComp( cseSURFACE, substr( Name, 0, 38 ) + "-ConcCrwlWalAGL" )  }
	"Set ResCrawlSpc:ConcWallSURFACE[3] Parent"				ResCrawlSpc:ConcWallSURFACE[3]:Parent				= {	Local( CSE_ZONE )  }
	"Set ResCrawlSpc:ConcWallSURFACE[3]:SourceCrawlSpace"	ResCrawlSpc:ConcWallSURFACE[3]:SourceCrawlSpace	= {	Local( Name )  }
	"Set ResCrawlSpc:ConcWallSURFACE[3]:like"					ResCrawlSpc:ConcWallSURFACE[3]:like					= {	ConcWallSURFACE[2]  }
	"Set ResCrawlSpc:ConcWallSURFACE[3]:sfAzm"					ResCrawlSpc:ConcWallSURFACE[3]:sfAzm					= {	90  }

	"Create ResCrawlSpc:ConcWallSURFACE[4] - AbvGrd-B"		ResCrawlSpc:ConcWallSURFACE[4]							= {	CreateComp( cseSURFACE, substr( Name, 0, 38 ) + "-ConcCrwlWalAGB" )  }
	"Set ResCrawlSpc:ConcWallSURFACE[4] Parent"				ResCrawlSpc:ConcWallSURFACE[4]:Parent				= {	Local( CSE_ZONE )  }
	"Set ResCrawlSpc:ConcWallSURFACE[4]:SourceCrawlSpace"	ResCrawlSpc:ConcWallSURFACE[4]:SourceCrawlSpace	= {	Local( Name )  }
	"Set ResCrawlSpc:ConcWallSURFACE[4]:like"					ResCrawlSpc:ConcWallSURFACE[4]:like					= {	ConcWallSURFACE[2]  }
	"Set ResCrawlSpc:ConcWallSURFACE[4]:sfAzm"					ResCrawlSpc:ConcWallSURFACE[4]:sfAzm					= {	180  }

	"Create ResCrawlSpc:ConcWallSURFACE[5] - AbvGrd-R"		ResCrawlSpc:ConcWallSURFACE[5]							= {	CreateComp( cseSURFACE, substr( Name, 0, 38 ) + "-ConcCrwlWalAGR" )  }
	"Set ResCrawlSpc:ConcWallSURFACE[5] Parent"				ResCrawlSpc:ConcWallSURFACE[5]:Parent				= {	Local( CSE_ZONE )  }
	"Set ResCrawlSpc:ConcWallSURFACE[5]:SourceCrawlSpace"	ResCrawlSpc:ConcWallSURFACE[5]:SourceCrawlSpace	= {	Local( Name )  }
	"Set ResCrawlSpc:ConcWallSURFACE[5]:like"					ResCrawlSpc:ConcWallSURFACE[5]:like					= {	ConcWallSURFACE[2]  }
	"Set ResCrawlSpc:ConcWallSURFACE[5]:sfAzm"					ResCrawlSpc:ConcWallSURFACE[5]:sfAzm					= {	270  }

  ; Materials for rim joists & sill plates
	"Create ResCrawlSpc:OtherMATERIAL[1]"  			ResCrawlSpc:OtherMATERIAL[1]				= {	CreateComp( cseMATERIAL,     "m-CrawlSpaceWdFrm" )  }
;	"Set ResCrawlSpc:OtherMATERIAL[1]:matCond"  	ResCrawlSpc:OtherMATERIAL[1]:matCond		= {	0.0667    }
;	"Set ResCrawlSpc:OtherMATERIAL[1]:matSpHt"  	ResCrawlSpc:OtherMATERIAL[1]:matSpHt		= {	0.33      }
;	"Set ResCrawlSpc:OtherMATERIAL[1]:matDens"  	ResCrawlSpc:OtherMATERIAL[1]:matDens		= {	32.0      }
	"Set ResCrawlSpc:OtherMATERIAL[1]:matCond"  	ResCrawlSpc:OtherMATERIAL[1]:matCond		= {	if (GlobalCompAssigned( ResProj:LibMat_SoftWood ) < 1) then  UNDEFINED
																															else if (GlobalStatus( ResProj:LibMat_SoftWood:ConductivityQII ) < 1) then  UNDEFINED
																															else  ResProj:LibMat_SoftWood:ConductivityQII  endif endif  }
	"Set ResCrawlSpc:OtherMATERIAL[1]:matCondCT" 	ResCrawlSpc:OtherMATERIAL[1]:matCondCT	= {	if (GlobalCompAssigned( ResProj:LibMat_SoftWood ) < 1) then  UNDEFINED
																															else if (GlobalStatus( ResProj:LibMat_SoftWood:ConductivityCT ) < 1) then  UNDEFINED
																															else  ResProj:LibMat_SoftWood:ConductivityCT  endif endif  }
	"Set ResCrawlSpc:OtherMATERIAL[1]:matSpHt"  	ResCrawlSpc:OtherMATERIAL[1]:matSpHt		= {	if (GlobalCompAssigned( ResProj:LibMat_SoftWood ) < 1) then  UNDEFINED
																															else if (GlobalStatus( ResProj:LibMat_SoftWood:SpecHeat ) < 1) then  UNDEFINED
																															else  ResProj:LibMat_SoftWood:SpecHeat  endif endif  }
	"Set ResCrawlSpc:OtherMATERIAL[1]:matDens"  	ResCrawlSpc:OtherMATERIAL[1]:matDens		= {	if (GlobalCompAssigned( ResProj:LibMat_SoftWood ) < 1) then  UNDEFINED
																															else if (GlobalStatus( ResProj:LibMat_SoftWood:Density ) < 1) then  UNDEFINED
																															else  ResProj:LibMat_SoftWood:Density  endif endif  }
;	"Create ResCrawlSpc:OtherMATERIAL[2]"  			ResCrawlSpc:OtherMATERIAL[2]				= {	CreateComp( cseMATERIAL,     "m-CrawlSpaceFiberShth" )  }
;	"Set ResCrawlSpc:OtherMATERIAL[2]:matCond"  	ResCrawlSpc:OtherMATERIAL[2]:matCond		= {	0.0316  }
;	"Set ResCrawlSpc:OtherMATERIAL[2]:matCondCT" 	ResCrawlSpc:OtherMATERIAL[2]:matCondCT	= {	0.00418 }
;	"Set ResCrawlSpc:OtherMATERIAL[2]:matSpHt"  	ResCrawlSpc:OtherMATERIAL[2]:matSpHt		= {	0.31    }
;	"Set ResCrawlSpc:OtherMATERIAL[2]:matDens"  	ResCrawlSpc:OtherMATERIAL[2]:matDens		= {	18.0    }
;	"Set ResCrawlSpc:OtherMATERIAL[2]:matThk"  	ResCrawlSpc:OtherMATERIAL[2]:matThk		= {	0.04167 }	; (0.5/12.0)
;	"Create ResCrawlSpc:OtherMATERIAL[3]"  			ResCrawlSpc:OtherMATERIAL[3]				= {	CreateComp( cseMATERIAL,     "m-CrawlSpaceHrdbrdSid" )  }
;	"Set ResCrawlSpc:OtherMATERIAL[3]:matCond"  	ResCrawlSpc:OtherMATERIAL[3]:matCond		= {	0.0544  }
;	"Set ResCrawlSpc:OtherMATERIAL[3]:matSpHt"  	ResCrawlSpc:OtherMATERIAL[3]:matSpHt		= {	0.28    }
;	"Set ResCrawlSpc:OtherMATERIAL[3]:matDens"  	ResCrawlSpc:OtherMATERIAL[3]:matDens		= {	40.0    }
;	"Set ResCrawlSpc:OtherMATERIAL[3]:matThk"  	ResCrawlSpc:OtherMATERIAL[3]:matThk		= {	0.03646 }	; ((7.0/16.0)/12.0)
	"Import ResCrawlSpc:OtherMATERIAL[2]"  			ResCrawlSpc:OtherMATERIAL[2]				= {	RuleLibrary( cseMATERIAL,  "CrawlSpaceFiberShth" )  }
	"Import ResCrawlSpc:OtherMATERIAL[3]"  			ResCrawlSpc:OtherMATERIAL[3]				= {	RuleLibrary( cseMATERIAL,  "CrawlSpaceHrdbrdSid" )  }

  ; Create and setup above grade framed wall
	"Define framed crawl space walls if necessary"		ResCrawlSpc:Action		= {	if (FrameWallHeight < 0.1) then  UNCHANGED
																											else	EvalRulelist( "SimPrep_CSE_CrawlSpace_Surfaces_AbvGrdFrmWalls", 1 )  endif  }

  ; Rim joist construction and surfaces
	"Create ResCrawlSpc:RimJstCONS"					ResCrawlSpc:RimJstCONS					= {	CreateComp( cseCONSTRUCTION, "con-CrawlSpaceRimJst" )  }
	"Create ResCrawlSpc:RimJstLAYER[1]"				ResCrawlSpc:RimJstLAYER[1]				= {	CreateComp( cseLAYER,        "lyr-CrawlSpaceRJWdFrm" )  }	; 2x8 vertical
	"Set ResCrawlSpc:RimJstLAYER[1]:Parent"  		ResCrawlSpc:RimJstLAYER[1]:Parent		= {	Local( RimJstCONS )  }
	"Set ResCrawlSpc:RimJstLAYER[1]:lrMat"  		ResCrawlSpc:RimJstLAYER[1]:lrMat		= {	Local( OtherMATERIAL[1] )  }
	"Set ResCrawlSpc:RimJstLAYER[1]:lrThk"  		ResCrawlSpc:RimJstLAYER[1]:lrThk		= {	0.125  }		; 1.5/12
	"Create ResCrawlSpc:RimJstLAYER[2]"				ResCrawlSpc:RimJstLAYER[2]				= {	CreateComp( cseLAYER,        "lyr-CrawlSpaceRJFiberShth" )  }
	"Set ResCrawlSpc:RimJstLAYER[2]:Parent"  		ResCrawlSpc:RimJstLAYER[2]:Parent		= {	Local( RimJstCONS )  }
	"Set ResCrawlSpc:RimJstLAYER[2]:lrMat"  		ResCrawlSpc:RimJstLAYER[2]:lrMat		= {	Local( OtherMATERIAL[2] )  }
	"Create ResCrawlSpc:RimJstLAYER[3]"				ResCrawlSpc:RimJstLAYER[3]				= {	CreateComp( cseLAYER,        "lyr-CrawlSpaceRJHrdbrdSid" )  }
	"Set ResCrawlSpc:RimJstLAYER[3]:Parent"  		ResCrawlSpc:RimJstLAYER[3]:Parent		= {	Local( RimJstCONS )  }
	"Set ResCrawlSpc:RimJstLAYER[3]:lrMat"  		ResCrawlSpc:RimJstLAYER[3]:lrMat		= {	Local( OtherMATERIAL[3] )  }

	"Create ResCrawlSpc:RimJstSURFACE[1]-Front"			ResCrawlSpc:RimJstSURFACE[1]							= {	CreateComp( cseSURFACE, substr( Name, 0, 42 ) + "-CrwlRimF" )  }
	"Set ResCrawlSpc:RimJstSURFACE[1] Parent"				ResCrawlSpc:RimJstSURFACE[1]:Parent					= {	Local( CSE_ZONE )  }
	"Set ResCrawlSpc:RimJstSURFACE[1]:SourceCrawlSpace"	ResCrawlSpc:RimJstSURFACE[1]:SourceCrawlSpace		= {	Local( Name )  }
	"Set ResCrawlSpc:RimJstSURFACE[1]:sfType"				ResCrawlSpc:RimJstSURFACE[1]:sfType					= {	"Wall"  }
	"Set ResCrawlSpc:RimJstSURFACE[1]:sfModel"				ResCrawlSpc:RimJstSURFACE[1]:sfModel					= {	"Forward_Difference"  }
	"Set ResCrawlSpc:RimJstSURFACE[1]:sfArea"				ResCrawlSpc:RimJstSURFACE[1]:sfArea					= {	(Perimeter * 7.5 / 12) / 4  } 	; 7.5" high x Perimeter/4
	"Set ResCrawlSpc:RimJstSURFACE[1]:sfAzm"				ResCrawlSpc:RimJstSURFACE[1]:sfAzm					= {	0     }		; Front
	"Set ResCrawlSpc:RimJstSURFACE[1]:sfCon"				ResCrawlSpc:RimJstSURFACE[1]:sfCon					= {	LocalRef( RimJstCONS )  }
	"Set ResCrawlSpc:RimJstSURFACE[1]:sfExAbs"				ResCrawlSpc:RimJstSURFACE[1]:sfExAbs        		= {	0.5   }
;	"Set ResCrawlSpc:RimJstSURFACE[1]:sfInAbs"				ResCrawlSpc:RimJstSURFACE[1]:sfInAbs        		= {	0.0   }
	"Set ResCrawlSpc:RimJstSURFACE[1]:sfExHcModel"		ResCrawlSpc:RimJstSURFACE[1]:sfExHcModel     		= {	"Unified"  }
	"Set ResCrawlSpc:RimJstSURFACE[1]:sfInHcModel"		ResCrawlSpc:RimJstSURFACE[1]:sfInHcModel     		= {	"Unified"  }
;	"Set ResCrawlSpc:RimJstSURFACE[1]:sfExRf"				ResCrawlSpc:RimJstSURFACE[1]:sfExRf        		= {	2  }		; ASHRAE roughness factor for exterior opaque walls: 2 => Rough (brick)

	"Create ResCrawlSpc:RimJstSURFACE[2]-Left"				ResCrawlSpc:RimJstSURFACE[2]							= {	CreateComp( cseSURFACE, substr( Name, 0, 42 ) + "-CrwlRimL" )  }
	"Set ResCrawlSpc:RimJstSURFACE[2] Parent"				ResCrawlSpc:RimJstSURFACE[2]:Parent					= {	Local( CSE_ZONE )  }
	"Set ResCrawlSpc:RimJstSURFACE[2]:SourceCrawlSpace"	ResCrawlSpc:RimJstSURFACE[2]:SourceCrawlSpace		= {	Local( Name )  }
	"Set ResCrawlSpc:RimJstSURFACE[2]:like"					ResCrawlSpc:RimJstSURFACE[2]:like						= {	Local( RimJstSURFACE[1] )  }
	"Set ResCrawlSpc:RimJstSURFACE[2]:sfAzm"				ResCrawlSpc:RimJstSURFACE[2]:sfAzm					= {	90   }		; Left

	"Create ResCrawlSpc:RimJstSURFACE[3]-Back"				ResCrawlSpc:RimJstSURFACE[3]							= {	CreateComp( cseSURFACE, substr( Name, 0, 42 ) + "-CrwlRimB" )  }
	"Set ResCrawlSpc:RimJstSURFACE[3] Parent"				ResCrawlSpc:RimJstSURFACE[3]:Parent					= {	Local( CSE_ZONE )  }
	"Set ResCrawlSpc:RimJstSURFACE[3]:SourceCrawlSpace"	ResCrawlSpc:RimJstSURFACE[3]:SourceCrawlSpace		= {	Local( Name )  }
	"Set ResCrawlSpc:RimJstSURFACE[3]:like"					ResCrawlSpc:RimJstSURFACE[3]:like						= {	Local( RimJstSURFACE[1] )  }
	"Set ResCrawlSpc:RimJstSURFACE[3]:sfAzm"				ResCrawlSpc:RimJstSURFACE[3]:sfAzm					= {	180   }		; Back

	"Create ResCrawlSpc:RimJstSURFACE[4]-Right"			ResCrawlSpc:RimJstSURFACE[4]							= {	CreateComp( cseSURFACE, substr( Name, 0, 42 ) + "-CrwlRimR" )  }
	"Set ResCrawlSpc:RimJstSURFACE[4] Parent"				ResCrawlSpc:RimJstSURFACE[4]:Parent					= {	Local( CSE_ZONE )  }
	"Set ResCrawlSpc:RimJstSURFACE[4]:SourceCrawlSpace"	ResCrawlSpc:RimJstSURFACE[4]:SourceCrawlSpace		= {	Local( Name )  }
	"Set ResCrawlSpc:RimJstSURFACE[4]:like"					ResCrawlSpc:RimJstSURFACE[4]:like						= {	Local( RimJstSURFACE[1] )  }
	"Set ResCrawlSpc:RimJstSURFACE[4]:sfAzm"				ResCrawlSpc:RimJstSURFACE[4]:sfAzm					= {	270   }		; Right

  ; Sill plate construction and surfaces
; SAC 3/27/13 - sill plates left in data model (originating from BESTEST design), but REMOVED for CA analysis (per BAW instructions)
;	"Create ResCrawlSpc:SillPltCONS"					ResCrawlSpc:SillPltCONS					= {	CreateComp( cseCONSTRUCTION, "con-CrawlSpaceSillPlt" )  }
;	"Create ResCrawlSpc:SillPltLAYER[1]"				ResCrawlSpc:SillPltLAYER[1]				= {	CreateComp( cseLAYER,        "lyr-CrawlSpaceSPWdFrm" )  }	; 2x4 horizontal
;	"Set ResCrawlSpc:SillPltLAYER[1]:Parent"  		ResCrawlSpc:SillPltLAYER[1]:Parent	= {	Local( SillPltCONS )  }
;	"Set ResCrawlSpc:SillPltLAYER[1]:lrMat"  		ResCrawlSpc:SillPltLAYER[1]:lrMat		= {	Local( OtherMATERIAL[1] )  }
;	"Set ResCrawlSpc:SillPltLAYER[1]:lrThk"  		ResCrawlSpc:SillPltLAYER[1]:lrThk		= {	0.2917  }		; 3.5/12
;	"Create ResCrawlSpc:SillPltLAYER[2]"				ResCrawlSpc:SillPltLAYER[2]				= {	CreateComp( cseLAYER,        "lyr-CrawlSpaceSPFiberShth" )  }
;	"Set ResCrawlSpc:SillPltLAYER[2]:Parent"  		ResCrawlSpc:SillPltLAYER[2]:Parent	= {	Local( SillPltCONS )  }
;	"Set ResCrawlSpc:SillPltLAYER[2]:lrMat"  		ResCrawlSpc:SillPltLAYER[2]:lrMat		= {	Local( OtherMATERIAL[2] )  }
;	"Create ResCrawlSpc:SillPltLAYER[3]"				ResCrawlSpc:SillPltLAYER[3]				= {	CreateComp( cseLAYER,        "lyr-CrawlSpaceSPHrdbrdSid" )  }
;	"Set ResCrawlSpc:SillPltLAYER[3]:Parent"  		ResCrawlSpc:SillPltLAYER[3]:Parent	= {	Local( SillPltCONS )  }
;	"Set ResCrawlSpc:SillPltLAYER[3]:lrMat"  		ResCrawlSpc:SillPltLAYER[3]:lrMat		= {	Local( OtherMATERIAL[3] )  }
;
;	"Create ResCrawlSpc:SillPltSURFACE[1]-North"				ResCrawlSpc:SillPltSURFACE[1]							= {	CreateComp( cseSURFACE, substr( Name, 0, 42 ) + "-CrwlSillN" )  }
;	"Set ResCrawlSpc:SillPltSURFACE[1] Parent"					ResCrawlSpc:SillPltSURFACE[1]:Parent					= {	Local( CSE_ZONE )  }
;	"Set ResCrawlSpc:SillPltSURFACE[1]:SourceCrawlSpace"	ResCrawlSpc:SillPltSURFACE[1]:SourceCrawlSpace	= {	Local( Name )  }
;	"Set ResCrawlSpc:SillPltSURFACE[1]:sfType"					ResCrawlSpc:SillPltSURFACE[1]:sfType					= {	"Wall"  }
;	"Set ResCrawlSpc:SillPltSURFACE[1]:sfModel"				ResCrawlSpc:SillPltSURFACE[1]:sfModel				= {	"Forward_Difference"  }
;	"Set ResCrawlSpc:SillPltSURFACE[1]:sfArea"					ResCrawlSpc:SillPltSURFACE[1]:sfArea					= {	sqrt( Local( Area ) ) * 1.5 / 12.0  }
;	"Set ResCrawlSpc:SillPltSURFACE[1]:sfAzm"					ResCrawlSpc:SillPltSURFACE[1]:sfAzm					= {	0     }		; North
;	"Set ResCrawlSpc:SillPltSURFACE[1]:sfCon"					ResCrawlSpc:SillPltSURFACE[1]:sfCon					= {	LocalRef( SillPltCONS )  }
;	"Set ResCrawlSpc:SillPltSURFACE[1]:sfExAbs"				ResCrawlSpc:SillPltSURFACE[1]:sfExAbs        		= {	0.6   }
;	"Set ResCrawlSpc:SillPltSURFACE[1]:sfInAbs"				ResCrawlSpc:SillPltSURFACE[1]:sfInAbs        		= {	0.0   }
;	"Set ResCrawlSpc:SillPltSURFACE[1]:sfExHcModel"			ResCrawlSpc:SillPltSURFACE[1]:sfExHcModel     	= {	"Unified"  }
;	"Set ResCrawlSpc:SillPltSURFACE[1]:sfInHcModel"			ResCrawlSpc:SillPltSURFACE[1]:sfInHcModel     	= {	"Unified"  }
;	"Set ResCrawlSpc:SillPltSURFACE[1]:sfExRf"					ResCrawlSpc:SillPltSURFACE[1]:sfExRf        		= {	2  }		; ASHRAE roughness factor for exterior opaque walls: 2 => Rough (brick)
;
;	"Create ResCrawlSpc:SillPltSURFACE[2]-South"				ResCrawlSpc:SillPltSURFACE[2]							= {	CreateComp( cseSURFACE, substr( Name, 0, 42 ) + "-CrwlSillS" )  }
;	"Set ResCrawlSpc:SillPltSURFACE[2] Parent"					ResCrawlSpc:SillPltSURFACE[2]:Parent					= {	Local( CSE_ZONE )  }
;	"Set ResCrawlSpc:SillPltSURFACE[2]:SourceCrawlSpace"	ResCrawlSpc:SillPltSURFACE[2]:SourceCrawlSpace	= {	Local( Name )  }
;	"Set ResCrawlSpc:SillPltSURFACE[2]:like"					ResCrawlSpc:SillPltSURFACE[2]:like					= {	Local( SillPltSURFACE[1] )  }
;	"Set ResCrawlSpc:SillPltSURFACE[2]:sfAzm"					ResCrawlSpc:SillPltSURFACE[2]:sfAzm					= {	180   }		; South
;
;	"Create ResCrawlSpc:SillPltSURFACE[3]-East"				ResCrawlSpc:SillPltSURFACE[3]							= {	CreateComp( cseSURFACE, substr( Name, 0, 42 ) + "-CrwlSillE" )  }
;	"Set ResCrawlSpc:SillPltSURFACE[3] Parent"					ResCrawlSpc:SillPltSURFACE[3]:Parent					= {	Local( CSE_ZONE )  }
;	"Set ResCrawlSpc:SillPltSURFACE[3]:SourceCrawlSpace"	ResCrawlSpc:SillPltSURFACE[3]:SourceCrawlSpace	= {	Local( Name )  }
;	"Set ResCrawlSpc:SillPltSURFACE[3]:like"					ResCrawlSpc:SillPltSURFACE[3]:like					= {	Local( SillPltSURFACE[1] )  }
;	"Set ResCrawlSpc:SillPltSURFACE[3]:sfAzm"					ResCrawlSpc:SillPltSURFACE[3]:sfAzm					= {	90   }		; East
;
;	"Create ResCrawlSpc:SillPltSURFACE[4]-West"				ResCrawlSpc:SillPltSURFACE[4]							= {	CreateComp( cseSURFACE, substr( Name, 0, 42 ) + "-CrwlSillW" )  }
;	"Set ResCrawlSpc:SillPltSURFACE[4] Parent"					ResCrawlSpc:SillPltSURFACE[4]:Parent					= {	Local( CSE_ZONE )  }
;	"Set ResCrawlSpc:SillPltSURFACE[4]:SourceCrawlSpace"	ResCrawlSpc:SillPltSURFACE[4]:SourceCrawlSpace	= {	Local( Name )  }
;	"Set ResCrawlSpc:SillPltSURFACE[4]:like"					ResCrawlSpc:SillPltSURFACE[4]:like					= {	Local( SillPltSURFACE[1] )  }
;	"Set ResCrawlSpc:SillPltSURFACE[4]:sfAzm"					ResCrawlSpc:SillPltSURFACE[4]:sfAzm					= {	270   }		; West

END

;*************************************************************************
RULELIST "SimPrep_CSE_CrawlSpace_Surfaces_AbvGrdFrmWalls" 0 0 0 0
;*************************************************************************
  ; Create and setup above grade framed wall

	"Create ResCrawlSpc:FrmWallCONS[1]"				ResCrawlSpc:FrmWallCONS[1]				= {	CreateComp( cseCONSTRUCTION, "cc-CrawlSpaceFrmWall" )  }
	"Create ResCrawlSpc:FrmWallLAYER[1]"				ResCrawlSpc:FrmWallLAYER[1]				= {	CreateComp( cseLAYER,        "ccl1-CrawlSheath" )  }
	"Set ResCrawlSpc:FrmWallLAYER[1]:Parent"  		ResCrawlSpc:FrmWallLAYER[1]:Parent	= {	Local( FrmWallCONS[1] )  }
	"Set ResCrawlSpc:FrmWallLAYER[1]:lrMat"  		ResCrawlSpc:FrmWallLAYER[1]:lrMat		= {	GlobalRef( ResProj:LibMat_WoodLayer:cseMATERIAL )  }
	"Set ResCrawlSpc:FrmWallLAYER[1]:lrThk"  		ResCrawlSpc:FrmWallLAYER[1]:lrThk		= {	0.041667  }
	"Create ResCrawlSpc:FrmWallLAYER[2]"				ResCrawlSpc:FrmWallLAYER[2]				= {	CreateComp( cseLAYER,        "ccl2-CrawlStucco" )  }
	"Set ResCrawlSpc:FrmWallLAYER[2]:Parent"  		ResCrawlSpc:FrmWallLAYER[2]:Parent	= {	Local( FrmWallCONS[1] )  }
	"Set ResCrawlSpc:FrmWallLAYER[2]:lrMat"  		ResCrawlSpc:FrmWallLAYER[2]:lrMat		= {	GlobalRef( ResProj:LibMat_3CoatStucco:cseMATERIAL )  }
	"Set ResCrawlSpc:FrmWallLAYER[2]:lrThk"  		ResCrawlSpc:FrmWallLAYER[2]:lrThk		= {	0.072917  }

	"Create ResCrawlSpc:FrmWallCONS[2]"				ResCrawlSpc:FrmWallCONS[2]				= {	CreateComp( cseCONSTRUCTION, "fc-CrawlSpaceFrmWall" )  }
	"Create ResCrawlSpc:FrmWallLAYER[3]"				ResCrawlSpc:FrmWallLAYER[3]				= {	CreateComp( cseLAYER,        "fcl1-CrawlFraming" )  }
	"Set ResCrawlSpc:FrmWallLAYER[3]:Parent"  		ResCrawlSpc:FrmWallLAYER[3]:Parent	= {	Local( FrmWallCONS[2] )  }
	"Set ResCrawlSpc:FrmWallLAYER[3]:lrMat"  		ResCrawlSpc:FrmWallLAYER[3]:lrMat		= {	GlobalRef( ResProj:LibMat_SoftWood:cseMATERIAL )  }
	"Set ResCrawlSpc:FrmWallLAYER[3]:lrThk"  		ResCrawlSpc:FrmWallLAYER[3]:lrThk		= {	0.291667  }
	"Create ResCrawlSpc:FrmWallLAYER[4]"				ResCrawlSpc:FrmWallLAYER[4]				= {	CreateComp( cseLAYER,        "fcl2-CrawlSheath" )  }
	"Set ResCrawlSpc:FrmWallLAYER[4]:Parent"  		ResCrawlSpc:FrmWallLAYER[4]:Parent	= {	Local( FrmWallCONS[2] )  }
	"Set ResCrawlSpc:FrmWallLAYER[4]:lrMat"  		ResCrawlSpc:FrmWallLAYER[4]:lrMat		= {	GlobalRef( ResProj:LibMat_WoodLayer:cseMATERIAL )  }
	"Set ResCrawlSpc:FrmWallLAYER[4]:lrThk"  		ResCrawlSpc:FrmWallLAYER[4]:lrThk		= {	0.041667  }
	"Create ResCrawlSpc:FrmWallLAYER[5]"				ResCrawlSpc:FrmWallLAYER[5]				= {	CreateComp( cseLAYER,        "fcl3-CrawlStucco" )  }
	"Set ResCrawlSpc:FrmWallLAYER[5]:Parent"  		ResCrawlSpc:FrmWallLAYER[5]:Parent	= {	Local( FrmWallCONS[2] )  }
	"Set ResCrawlSpc:FrmWallLAYER[5]:lrMat"  		ResCrawlSpc:FrmWallLAYER[5]:lrMat		= {	GlobalRef( ResProj:LibMat_3CoatStucco:cseMATERIAL )  }
	"Set ResCrawlSpc:FrmWallLAYER[5]:lrThk"  		ResCrawlSpc:FrmWallLAYER[5]:lrThk		= {	0.072917  }

	"Create ResCrawlSpc:FrmWallSURFACE[1]-Front"				ResCrawlSpc:FrmWallSURFACE[1]							= {	CreateComp( cseSURFACE, substr( Name, 0, 40 ) + "-CrwlFrmWallCavF" )  }
	"Set ResCrawlSpc:FrmWallSURFACE[1] Parent"					ResCrawlSpc:FrmWallSURFACE[1]:Parent					= {	Local( CSE_ZONE )  }
	"Set ResCrawlSpc:FrmWallSURFACE[1]:SourceCrawlSpace"	ResCrawlSpc:FrmWallSURFACE[1]:SourceCrawlSpace	= {	Local( Name )  }
	"Set ResCrawlSpc:FrmWallSURFACE[1]:sfType"					ResCrawlSpc:FrmWallSURFACE[1]:sfType					= {	"Wall"  }
	"Set ResCrawlSpc:FrmWallSURFACE[1]:sfModel"				ResCrawlSpc:FrmWallSURFACE[1]:sfModel				= {	"Forward_Difference"  }
	"Set ResCrawlSpc:FrmWallSURFACE[1]:sfArea"					ResCrawlSpc:FrmWallSURFACE[1]:sfArea					= {	0.75 * FrameWallHeight * Perimeter / 4  }
	"Set ResCrawlSpc:FrmWallSURFACE[1]:sfAzm"					ResCrawlSpc:FrmWallSURFACE[1]:sfAzm					= {	0     }		; Front
	"Set ResCrawlSpc:FrmWallSURFACE[1]:sfCon"					ResCrawlSpc:FrmWallSURFACE[1]:sfCon					= {	LocalRef( FrmWallCONS[1] )  }
	"Set ResCrawlSpc:FrmWallSURFACE[1]:sfExAbs"				ResCrawlSpc:FrmWallSURFACE[1]:sfExAbs        		= {	0.5   }
	"Set ResCrawlSpc:FrmWallSURFACE[1]:sfExHcModel"			ResCrawlSpc:FrmWallSURFACE[1]:sfExHcModel     	= {	"Unified"  }
	"Set ResCrawlSpc:FrmWallSURFACE[1]:sfInHcModel"			ResCrawlSpc:FrmWallSURFACE[1]:sfInHcModel     	= {	"Unified"  }

	"Create ResCrawlSpc:FrmWallSURFACE[2]-Left"				ResCrawlSpc:FrmWallSURFACE[2]							= {	CreateComp( cseSURFACE, substr( Name, 0, 40 ) + "-CrwlFrmWallCavL" )  }
	"Set ResCrawlSpc:FrmWallSURFACE[2] Parent"					ResCrawlSpc:FrmWallSURFACE[2]:Parent					= {	Local( CSE_ZONE )  }
	"Set ResCrawlSpc:FrmWallSURFACE[2]:SourceCrawlSpace"	ResCrawlSpc:FrmWallSURFACE[2]:SourceCrawlSpace	= {	Local( Name )  }
	"Set ResCrawlSpc:FrmWallSURFACE[2]:like"					ResCrawlSpc:FrmWallSURFACE[2]:like					= {	Local( FrmWallSURFACE[1] )  }
	"Set ResCrawlSpc:FrmWallSURFACE[2]:sfAzm"					ResCrawlSpc:FrmWallSURFACE[2]:sfAzm					= {	90   }		; Left

	"Create ResCrawlSpc:FrmWallSURFACE[3]-Back"				ResCrawlSpc:FrmWallSURFACE[3]							= {	CreateComp( cseSURFACE, substr( Name, 0, 40 ) + "-CrwlFrmWallCavB" )  }
	"Set ResCrawlSpc:FrmWallSURFACE[3] Parent"					ResCrawlSpc:FrmWallSURFACE[3]:Parent					= {	Local( CSE_ZONE )  }
	"Set ResCrawlSpc:FrmWallSURFACE[3]:SourceCrawlSpace"	ResCrawlSpc:FrmWallSURFACE[3]:SourceCrawlSpace	= {	Local( Name )  }
	"Set ResCrawlSpc:FrmWallSURFACE[3]:like"					ResCrawlSpc:FrmWallSURFACE[3]:like					= {	Local( FrmWallSURFACE[1] )  }
	"Set ResCrawlSpc:FrmWallSURFACE[3]:sfAzm"					ResCrawlSpc:FrmWallSURFACE[3]:sfAzm					= {	180   }		; Back

	"Create ResCrawlSpc:FrmWallSURFACE[4]-Right"				ResCrawlSpc:FrmWallSURFACE[4]							= {	CreateComp( cseSURFACE, substr( Name, 0, 40 ) + "-CrwlFrmWallCavR" )  }
	"Set ResCrawlSpc:FrmWallSURFACE[4] Parent"					ResCrawlSpc:FrmWallSURFACE[4]:Parent					= {	Local( CSE_ZONE )  }
	"Set ResCrawlSpc:FrmWallSURFACE[4]:SourceCrawlSpace"	ResCrawlSpc:FrmWallSURFACE[4]:SourceCrawlSpace	= {	Local( Name )  }
	"Set ResCrawlSpc:FrmWallSURFACE[4]:like"					ResCrawlSpc:FrmWallSURFACE[4]:like					= {	Local( FrmWallSURFACE[1] )  }
	"Set ResCrawlSpc:FrmWallSURFACE[4]:sfAzm"					ResCrawlSpc:FrmWallSURFACE[4]:sfAzm					= {	270   }		; Right

	"Create ResCrawlSpc:FrmWallSURFACE[5]-Front"				ResCrawlSpc:FrmWallSURFACE[5]							= {	CreateComp( cseSURFACE, substr( Name, 0, 40 ) + "-CrwlFrmWallFrmF" )  }
	"Set ResCrawlSpc:FrmWallSURFACE[5] Parent"					ResCrawlSpc:FrmWallSURFACE[5]:Parent					= {	Local( CSE_ZONE )  }
	"Set ResCrawlSpc:FrmWallSURFACE[5]:SourceCrawlSpace"	ResCrawlSpc:FrmWallSURFACE[5]:SourceCrawlSpace	= {	Local( Name )  }
	"Set ResCrawlSpc:FrmWallSURFACE[5]:sfType"					ResCrawlSpc:FrmWallSURFACE[5]:sfType					= {	"Wall"  }
	"Set ResCrawlSpc:FrmWallSURFACE[5]:sfModel"				ResCrawlSpc:FrmWallSURFACE[5]:sfModel				= {	"Forward_Difference"  }
	"Set ResCrawlSpc:FrmWallSURFACE[5]:sfArea"					ResCrawlSpc:FrmWallSURFACE[5]:sfArea					= {	0.25 * FrameWallHeight * Perimeter / 4  }
	"Set ResCrawlSpc:FrmWallSURFACE[5]:sfAzm"					ResCrawlSpc:FrmWallSURFACE[5]:sfAzm					= {	0     }		; Front
	"Set ResCrawlSpc:FrmWallSURFACE[5]:sfCon"					ResCrawlSpc:FrmWallSURFACE[5]:sfCon					= {	LocalRef( FrmWallCONS[2] )  }
	"Set ResCrawlSpc:FrmWallSURFACE[5]:sfExAbs"				ResCrawlSpc:FrmWallSURFACE[5]:sfExAbs        		= {	0.5   }
	"Set ResCrawlSpc:FrmWallSURFACE[5]:sfExHcModel"			ResCrawlSpc:FrmWallSURFACE[5]:sfExHcModel     	= {	"Unified"  }
	"Set ResCrawlSpc:FrmWallSURFACE[5]:sfInHcModel"			ResCrawlSpc:FrmWallSURFACE[5]:sfInHcModel     	= {	"Unified"  }

	"Create ResCrawlSpc:FrmWallSURFACE[6]-Left"				ResCrawlSpc:FrmWallSURFACE[6]							= {	CreateComp( cseSURFACE, substr( Name, 0, 40 ) + "-CrwlFrmWallFrmL" )  }
	"Set ResCrawlSpc:FrmWallSURFACE[6] Parent"					ResCrawlSpc:FrmWallSURFACE[6]:Parent					= {	Local( CSE_ZONE )  }
	"Set ResCrawlSpc:FrmWallSURFACE[6]:SourceCrawlSpace"	ResCrawlSpc:FrmWallSURFACE[6]:SourceCrawlSpace	= {	Local( Name )  }
	"Set ResCrawlSpc:FrmWallSURFACE[6]:like"					ResCrawlSpc:FrmWallSURFACE[6]:like					= {	Local( FrmWallSURFACE[5] )  }
	"Set ResCrawlSpc:FrmWallSURFACE[6]:sfAzm"					ResCrawlSpc:FrmWallSURFACE[6]:sfAzm					= {	90   }		; Left

	"Create ResCrawlSpc:FrmWallSURFACE[7]-Back"				ResCrawlSpc:FrmWallSURFACE[7]							= {	CreateComp( cseSURFACE, substr( Name, 0, 40 ) + "-CrwlFrmWallFrmB" )  }
	"Set ResCrawlSpc:FrmWallSURFACE[7] Parent"					ResCrawlSpc:FrmWallSURFACE[7]:Parent					= {	Local( CSE_ZONE )  }
	"Set ResCrawlSpc:FrmWallSURFACE[7]:SourceCrawlSpace"	ResCrawlSpc:FrmWallSURFACE[7]:SourceCrawlSpace	= {	Local( Name )  }
	"Set ResCrawlSpc:FrmWallSURFACE[7]:like"					ResCrawlSpc:FrmWallSURFACE[7]:like					= {	Local( FrmWallSURFACE[5] )  }
	"Set ResCrawlSpc:FrmWallSURFACE[7]:sfAzm"					ResCrawlSpc:FrmWallSURFACE[7]:sfAzm					= {	180   }		; Back

	"Create ResCrawlSpc:FrmWallSURFACE[8]-Right"				ResCrawlSpc:FrmWallSURFACE[8]							= {	CreateComp( cseSURFACE, substr( Name, 0, 40 ) + "-CrwlFrmWallFrmR" )  }
	"Set ResCrawlSpc:FrmWallSURFACE[8] Parent"					ResCrawlSpc:FrmWallSURFACE[8]:Parent					= {	Local( CSE_ZONE )  }
	"Set ResCrawlSpc:FrmWallSURFACE[8]:SourceCrawlSpace"	ResCrawlSpc:FrmWallSURFACE[8]:SourceCrawlSpace	= {	Local( Name )  }
	"Set ResCrawlSpc:FrmWallSURFACE[8]:like"					ResCrawlSpc:FrmWallSURFACE[8]:like					= {	Local( FrmWallSURFACE[5] )  }
	"Set ResCrawlSpc:FrmWallSURFACE[8]:sfAzm"					ResCrawlSpc:FrmWallSURFACE[8]:sfAzm					= {	270   }		; Right

END

;*************************************************************************
RULELIST "BlastCrawlSpaceMatAndCons" 1 0 0 0
;*************************************************************************
	"Blast ResCrawlSpc:FloorMATERIAL"			ResCrawlSpc:FloorMATERIAL		= {	if (LocalCompAssigned( FloorMATERIAL    )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:FloorLAYER"				ResCrawlSpc:FloorLAYER			= {	if (LocalCompAssigned( FloorLAYER       )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:FloorCONS"				ResCrawlSpc:FloorCONS				= {	if (LocalCompAssigned( FloorCONS        )) then  DeleteComp()  else  UNCHANGED  endif  }

;	"Blast ResCrawlSpc:WallMATERIAL"			ResCrawlSpc:WallMATERIAL			= {	if (LocalCompAssigned( WallMATERIAL     )) then  DeleteComp()  else  UNCHANGED  endif  }
;	"Blast ResCrawlSpc:WallLAYER[1]"			ResCrawlSpc:WallLAYER[1]			= {	if (LocalCompAssigned( WallLAYER[1]     )) then  DeleteComp()  else  UNCHANGED  endif  }
;	"Blast ResCrawlSpc:WallLAYER[2]"			ResCrawlSpc:WallLAYER[2]			= {	if (LocalCompAssigned( WallLAYER[2]     )) then  DeleteComp()  else  UNCHANGED  endif  }
;	"Blast ResCrawlSpc:WallCONS"				ResCrawlSpc:WallCONS				= {	if (LocalCompAssigned( WallCONS         )) then  DeleteComp()  else  UNCHANGED  endif  }

	"Blast ResCrawlSpc:ConcWallSURFACE[1]"  ResCrawlSpc:ConcWallSURFACE[1] = {   if (LocalCompAssigned( ConcWallSURFACE[1] )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:ConcWallSURFACE[2]"  ResCrawlSpc:ConcWallSURFACE[2] = {   if (LocalCompAssigned( ConcWallSURFACE[2] )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:ConcWallSURFACE[3]"  ResCrawlSpc:ConcWallSURFACE[3] = {   if (LocalCompAssigned( ConcWallSURFACE[3] )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:ConcWallSURFACE[4]"  ResCrawlSpc:ConcWallSURFACE[4] = {   if (LocalCompAssigned( ConcWallSURFACE[4] )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:ConcWallSURFACE[5]"  ResCrawlSpc:ConcWallSURFACE[5] = {   if (LocalCompAssigned( ConcWallSURFACE[5] )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:BGWallCONS"          ResCrawlSpc:BGWallCONS         = {   if (LocalCompAssigned( BGWallCONS         )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:BGWallLAYER[1]"      ResCrawlSpc:BGWallLAYER[1]     = {   if (LocalCompAssigned( BGWallLAYER[1]     )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:BGWallLAYER[2]"      ResCrawlSpc:BGWallLAYER[2]     = {   if (LocalCompAssigned( BGWallLAYER[2]     )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:BGWallMATERIAL"      ResCrawlSpc:BGWallMATERIAL     = {   if (LocalCompAssigned( BGWallMATERIAL     )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:AGWallCONS"          ResCrawlSpc:AGWallCONS         = {   if (LocalCompAssigned( AGWallCONS         )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:AGWallLAYER"         ResCrawlSpc:AGWallLAYER        = {   if (LocalCompAssigned( AGWallLAYER        )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:AGWallMATERIAL"      ResCrawlSpc:AGWallMATERIAL     = {   if (LocalCompAssigned( AGWallMATERIAL     )) then  DeleteComp()  else  UNCHANGED  endif  }
                                                                          
	"Blast ResCrawlSpc:FrmWallSURFACE[1]"   ResCrawlSpc:FrmWallSURFACE[1]  = {   if (LocalCompAssigned( FrmWallSURFACE[1]  )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:FrmWallSURFACE[2]"   ResCrawlSpc:FrmWallSURFACE[2]  = {   if (LocalCompAssigned( FrmWallSURFACE[2]  )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:FrmWallSURFACE[3]"   ResCrawlSpc:FrmWallSURFACE[3]  = {   if (LocalCompAssigned( FrmWallSURFACE[3]  )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:FrmWallSURFACE[4]"   ResCrawlSpc:FrmWallSURFACE[4]  = {   if (LocalCompAssigned( FrmWallSURFACE[4]  )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:FrmWallSURFACE[5]"   ResCrawlSpc:FrmWallSURFACE[5]  = {   if (LocalCompAssigned( FrmWallSURFACE[5]  )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:FrmWallSURFACE[6]"   ResCrawlSpc:FrmWallSURFACE[6]  = {   if (LocalCompAssigned( FrmWallSURFACE[6]  )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:FrmWallSURFACE[7]"   ResCrawlSpc:FrmWallSURFACE[7]  = {   if (LocalCompAssigned( FrmWallSURFACE[7]  )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:FrmWallSURFACE[8]"   ResCrawlSpc:FrmWallSURFACE[8]  = {   if (LocalCompAssigned( FrmWallSURFACE[8]  )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:FrmWallCONS[1]"      ResCrawlSpc:FrmWallCONS[1]     = {   if (LocalCompAssigned( FrmWallCONS[1]     )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:FrmWallCONS[2]"      ResCrawlSpc:FrmWallCONS[2]     = {   if (LocalCompAssigned( FrmWallCONS[2]     )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:FrmWallLAYER[1]"     ResCrawlSpc:FrmWallLAYER[1]    = {   if (LocalCompAssigned( FrmWallLAYER[1]    )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:FrmWallLAYER[2]"     ResCrawlSpc:FrmWallLAYER[2]    = {   if (LocalCompAssigned( FrmWallLAYER[2]    )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:FrmWallLAYER[3]"     ResCrawlSpc:FrmWallLAYER[3]    = {   if (LocalCompAssigned( FrmWallLAYER[3]    )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:FrmWallLAYER[4]"     ResCrawlSpc:FrmWallLAYER[4]    = {   if (LocalCompAssigned( FrmWallLAYER[4]    )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:FrmWallLAYER[5]"     ResCrawlSpc:FrmWallLAYER[5]    = {   if (LocalCompAssigned( FrmWallLAYER[5]    )) then  DeleteComp()  else  UNCHANGED  endif  }

	"Blast ResCrawlSpc:OtherMATERIAL[1]"		ResCrawlSpc:OtherMATERIAL[1]	= {	if (LocalCompAssigned( OtherMATERIAL[1] )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:OtherMATERIAL[2]"		ResCrawlSpc:OtherMATERIAL[2]	= {	if (LocalCompAssigned( OtherMATERIAL[2] )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:OtherMATERIAL[3]"		ResCrawlSpc:OtherMATERIAL[3]	= {	if (LocalCompAssigned( OtherMATERIAL[3] )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:RimJstLAYER[1]"		ResCrawlSpc:RimJstLAYER[1]		= {	if (LocalCompAssigned( RimJstLAYER[1]   )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:RimJstLAYER[2]"		ResCrawlSpc:RimJstLAYER[2]		= {	if (LocalCompAssigned( RimJstLAYER[2]   )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:RimJstLAYER[3]"		ResCrawlSpc:RimJstLAYER[3]		= {	if (LocalCompAssigned( RimJstLAYER[3]   )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:RimJstCONS"				ResCrawlSpc:RimJstCONS			= {	if (LocalCompAssigned( RimJstCONS       )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:SillPltLAYER[1]"		ResCrawlSpc:SillPltLAYER[1]		= {	if (LocalCompAssigned( SillPltLAYER[1]  )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:SillPltLAYER[2]"		ResCrawlSpc:SillPltLAYER[2]		= {	if (LocalCompAssigned( SillPltLAYER[2]  )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:SillPltLAYER[3]"		ResCrawlSpc:SillPltLAYER[3]		= {	if (LocalCompAssigned( SillPltLAYER[3]  )) then  DeleteComp()  else  UNCHANGED  endif  }
	"Blast ResCrawlSpc:SillPltCONS"			ResCrawlSpc:SillPltCONS			= {	if (LocalCompAssigned( SillPltCONS      )) then  DeleteComp()  else  UNCHANGED  endif  }
END
;*************************************************************************


;*************************************************************************
;*************************************************************************

ENDFILE
