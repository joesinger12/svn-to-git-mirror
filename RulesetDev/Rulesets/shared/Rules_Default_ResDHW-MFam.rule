; -------------------------------------------------------------------------
; Rules pertaining to:   Defaulting the Proposed Building Model - focusing on MFam DHW properties
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2019, California Energy Commission
; Copyright (c) 2018-2019, SAC Software Solutions, LLC
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
;STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------

ENUM_PROPERTIES_VALUE   ; ensures retrieval/logic/us of enum properties assume numeric value (alternative is ENUM_PROPERTIES_STRING)

;*************************************************************************  - SAC 12/30/18
RULELIST "ProposedInput_ResMFam_CompactDistribution" 0 0 0 0

   "Set DwellUnitType:CmpctDistDescrip"    DwellUnitType:CmpctDistDescrip  = {
         switch (CompactDistrib)
            case  1 :  "RTF\DHW_CD_Basic.rtf"
            case  2 :  "RTF\DHW_CD_Exp.rtf"
            default :  UNDEFINED
         endswitch  }

   "Set DwellUnitType:IsDHWRecircSystem[1]"     DwellUnitType:IsDHWRecircSystem[1]  = {
         if (IfValidAnd( NumDHWSysTypes >= 1 ) .AND. LocalCompAssigned( DHWSysRef[1] ))
         then  if (DHWSysRef[1]:CentralDHW < 1)
               then  switch (DHWSysRef[1]:SystemType)
                        case    5248 :  1  ; "Recirculation with demand control, push button"
                        case    5504 :  1  ; "Recirculation with demand control, occupancy/motion sensor"
                        case    4992 :  1  ; "Recirculation with non-demand control (continuous pumping)"
                        case 8393856 :  1  ; "(HERS req'd) Recirculation with demand control, push button"
                        case 8394112 :  1  ; "(HERS req'd) Recirculation with demand control, occupancy/motion sensor"
                        default      :  0
                     endswitch
               else if (DHWSysRef[1]:MFamDistType > 0)
               then  1
               else  0  endif endif
         else  UNDEFINED  endif  }
   "Set DwellUnitType:IsDHWRecircSystem[2]"     DwellUnitType:IsDHWRecircSystem[2]  = {
         if (IfValidAnd( NumDHWSysTypes >= 2 ) .AND. LocalCompAssigned( DHWSysRef[2] ))
         then  if (DHWSysRef[2]:CentralDHW < 1)
               then  switch (DHWSysRef[2]:SystemType)
                        case    5248 :  1  ; "Recirculation with demand control, push button"
                        case    5504 :  1  ; "Recirculation with demand control, occupancy/motion sensor"
                        case    4992 :  1  ; "Recirculation with non-demand control (continuous pumping)"
                        case 8393856 :  1  ; "(HERS req'd) Recirculation with demand control, push button"
                        case 8394112 :  1  ; "(HERS req'd) Recirculation with demand control, occupancy/motion sensor"
                        default      :  0
                     endswitch
               else if (DHWSysRef[2]:MFamDistType > 0)
               then  1
               else  0  endif endif
         else  UNDEFINED  endif  }
   "Set DwellUnitType:IsDHWRecircSystem[3]"     DwellUnitType:IsDHWRecircSystem[3]  = {
         if (IfValidAnd( NumDHWSysTypes >= 3 ) .AND. LocalCompAssigned( DHWSysRef[3] ))
         then  if (DHWSysRef[3]:CentralDHW < 1)
               then  switch (DHWSysRef[3]:SystemType)
                        case    5248 :  1  ; "Recirculation with demand control, push button"
                        case    5504 :  1  ; "Recirculation with demand control, occupancy/motion sensor"
                        case    4992 :  1  ; "Recirculation with non-demand control (continuous pumping)"
                        case 8393856 :  1  ; "(HERS req'd) Recirculation with demand control, push button"
                        case 8394112 :  1  ; "(HERS req'd) Recirculation with demand control, occupancy/motion sensor"
                        default      :  0
                     endswitch
               else if (DHWSysRef[3]:MFamDistType > 0)
               then  1
               else  0  endif endif
         else  UNDEFINED  endif  }
   "Set DwellUnitType:IsDHWRecircSystem[4]"     DwellUnitType:IsDHWRecircSystem[4]  = {
         if (IfValidAnd( NumDHWSysTypes >= 4 ) .AND. LocalCompAssigned( DHWSysRef[4] ))
         then  if (DHWSysRef[4]:CentralDHW < 1)
               then  switch (DHWSysRef[4]:SystemType)
                        case    5248 :  1  ; "Recirculation with demand control, push button"
                        case    5504 :  1  ; "Recirculation with demand control, occupancy/motion sensor"
                        case    4992 :  1  ; "Recirculation with non-demand control (continuous pumping)"
                        case 8393856 :  1  ; "(HERS req'd) Recirculation with demand control, push button"
                        case 8394112 :  1  ; "(HERS req'd) Recirculation with demand control, occupancy/motion sensor"
                        default      :  0
                     endswitch
               else if (DHWSysRef[4]:MFamDistType > 0)
               then  1
               else  0  endif endif
         else  UNDEFINED  endif  }
   "Set DwellUnitType:IsDHWRecircSystem[5]"     DwellUnitType:IsDHWRecircSystem[5]  = {
         if (IfValidAnd( NumDHWSysTypes >= 5 ) .AND. LocalCompAssigned( DHWSysRef[5] ))
         then  if (DHWSysRef[5]:CentralDHW < 1)
               then  switch (DHWSysRef[5]:SystemType)
                        case    5248 :  1  ; "Recirculation with demand control, push button"
                        case    5504 :  1  ; "Recirculation with demand control, occupancy/motion sensor"
                        case    4992 :  1  ; "Recirculation with non-demand control (continuous pumping)"
                        case 8393856 :  1  ; "(HERS req'd) Recirculation with demand control, push button"
                        case 8394112 :  1  ; "(HERS req'd) Recirculation with demand control, occupancy/motion sensor"
                        default      :  0
                     endswitch
               else if (DHWSysRef[5]:MFamDistType > 0)
               then  1
               else  0  endif endif
         else  UNDEFINED  endif  }

   ;"Default DwellUnitType:UsrSpecCmpctDist"     DwellUnitType:UsrSpecCmpctDist  = {  if (LocalStatus( UsrSpecCmpctDist ) < 1) then  0  else  UNCHANGED  endif  }     ; SAC 4/1/19
   ; replace UsrSpecCmpctDist w/ CDSpecFixDists - SAC 09/29/21 (tic #1277)
   "Default DwellUnitType:CDSpecFixDists"       DwellUnitType:CDSpecFixDists = {  if (LocalStatus( CDSpecFixDists ) < 1) then  0  else  UNCHANGED  endif  } 
   "Default DwellUnitType:UsrCompactFactor"     DwellUnitType:UsrCompactFactor  =   ; SAC 09/29/21 was:  {  if (IfValidAnd( UsrSpecCmpctDist > 0 ) .AND. IfValidAnd( DHWSysRef[1]:CompactDistrib == 1 )) then  0.7  else  UNCHANGED  endif  }     ; SAC 4/1/19
      {  switch (CompactDistrib)
            case  1 :  0.7
            case  2 :  0.6
            default :  UNDEFINED
         endswitch  }

   "Default DwellUnitType:CDServesMBathFix[1]"     DwellUnitType:CDServesMBathFix[1]  = {
         if (CompactDistrib > 0 .AND. IfValidAnd( NumDHWSysTypes >= 1 ) .AND. LocalCompAssigned( DHWSysRef[1] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:CDServesMBathFix[2]"     DwellUnitType:CDServesMBathFix[2]  = {
         if (CompactDistrib > 0 .AND. IfValidAnd( NumDHWSysTypes >= 2 ) .AND. LocalCompAssigned( DHWSysRef[2] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:CDServesMBathFix[3]"     DwellUnitType:CDServesMBathFix[3]  = {
         if (CompactDistrib > 0 .AND. IfValidAnd( NumDHWSysTypes >= 3 ) .AND. LocalCompAssigned( DHWSysRef[3] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:CDServesMBathFix[4]"     DwellUnitType:CDServesMBathFix[4]  = {
         if (CompactDistrib > 0 .AND. IfValidAnd( NumDHWSysTypes >= 4 ) .AND. LocalCompAssigned( DHWSysRef[4] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:CDServesMBathFix[5]"     DwellUnitType:CDServesMBathFix[5]  = {
         if (CompactDistrib > 0 .AND. IfValidAnd( NumDHWSysTypes >= 5 ) .AND. LocalCompAssigned( DHWSysRef[5] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:CDServesKitFix[1]"       DwellUnitType:CDServesKitFix[1]  = {
         if (CompactDistrib > 0 .AND. IfValidAnd( NumDHWSysTypes >= 1 ) .AND. LocalCompAssigned( DHWSysRef[1] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:CDServesKitFix[2]"       DwellUnitType:CDServesKitFix[2]  = {
         if (CompactDistrib > 0 .AND. IfValidAnd( NumDHWSysTypes >= 2 ) .AND. LocalCompAssigned( DHWSysRef[2] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:CDServesKitFix[3]"       DwellUnitType:CDServesKitFix[3]  = {
         if (CompactDistrib > 0 .AND. IfValidAnd( NumDHWSysTypes >= 3 ) .AND. LocalCompAssigned( DHWSysRef[3] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:CDServesKitFix[4]"       DwellUnitType:CDServesKitFix[4]  = {
         if (CompactDistrib > 0 .AND. IfValidAnd( NumDHWSysTypes >= 4 ) .AND. LocalCompAssigned( DHWSysRef[4] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:CDServesKitFix[5]"       DwellUnitType:CDServesKitFix[5]  = {
         if (CompactDistrib > 0 .AND. IfValidAnd( NumDHWSysTypes >= 5 ) .AND. LocalCompAssigned( DHWSysRef[5] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:CDServesThirdFix[1]"     DwellUnitType:CDServesThirdFix[1]  = {
         if (CompactDistrib > 0 .AND. IfValidAnd( NumDHWSysTypes >= 1 ) .AND. LocalCompAssigned( DHWSysRef[1] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:CDServesThirdFix[2]"     DwellUnitType:CDServesThirdFix[2]  = {
         if (CompactDistrib > 0 .AND. IfValidAnd( NumDHWSysTypes >= 2 ) .AND. LocalCompAssigned( DHWSysRef[2] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:CDServesThirdFix[3]"     DwellUnitType:CDServesThirdFix[3]  = {
         if (CompactDistrib > 0 .AND. IfValidAnd( NumDHWSysTypes >= 3 ) .AND. LocalCompAssigned( DHWSysRef[3] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:CDServesThirdFix[4]"     DwellUnitType:CDServesThirdFix[4]  = {
         if (CompactDistrib > 0 .AND. IfValidAnd( NumDHWSysTypes >= 4 ) .AND. LocalCompAssigned( DHWSysRef[4] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:CDServesThirdFix[5]"     DwellUnitType:CDServesThirdFix[5]  = {
         if (CompactDistrib > 0 .AND. IfValidAnd( NumDHWSysTypes >= 5 ) .AND. LocalCompAssigned( DHWSysRef[5] )) then  1  else  UNDEFINED  endif  }

   "Set DwellUnitType:CmpctDistErrorID[1] flag"    DwellUnitType:CmpctDistErrorID[1] = {
         if (IfValidAnd( NumDHWSysTypes >= 1 ) .AND. LocalCompAssigned( DHWSysRef[1] ))
         then  if (ResProj:IsMultiFamily .AND. DHWSysRef[1]:CentralDHW) then  3
               else if (DHWSysRef[1]:CentralDHW = 0 .AND. IsDHWRecircSystem[1]) then  4   ; incompat w/ MFam systems w/ recirc (no coef.s to calc Qualification Distance)
               else if (DHWSysRef[1]:CentralDHW = 0 .AND.
                        (DHWSysRef[1]:SystemType ==    4608 .OR.  ; "Central Parallel Piping"                
                         DHWSysRef[1]:SystemType ==    4609 .OR.  ; "Point of use"                           
                         DHWSysRef[1]:SystemType == 8392704 .OR.  ; "(HERS req'd) Pipe Insulation, All Lines"
                         DHWSysRef[1]:SystemType == 8393216))     ; "(HERS req'd) Central Parallel Piping"
               then  6
               else if (IfValidAnd( CDNumFloorsServed > 0 )==0) then  2
               else if (IfValidAnd( CDSpecFixDists > 0 )==0) then  0
               else if ( (IfValidAnd( CDServesMBathFix[1] > 0 ) .AND. IfValidAnd( CDMBathFixDist[1] > 0 )==0) .OR.
                         (IfValidAnd( CDServesKitFix[1]   > 0 ) .AND. IfValidAnd( CDKitFixDist[1]   > 0 )==0) .OR.
                         (IfValidAnd( CDServesThirdFix[1] > 0 ) .AND. IfValidAnd( CDThirdFixDist[1] > 0 )==0) )
               then  1
               else  0  endif endif endif endif endif endif
         else  UNDEFINED  endif  }
   "Set DwellUnitType:CmpctDistErrorID[2] flag"    DwellUnitType:CmpctDistErrorID[2] = {
         if (IfValidAnd( NumDHWSysTypes >= 2 ) .AND. LocalCompAssigned( DHWSysRef[2] ))
         then  if (ResProj:IsMultiFamily .AND. DHWSysRef[2]:CentralDHW) then  3
               else if (DHWSysRef[2]:CentralDHW = 0 .AND. IsDHWRecircSystem[2]) then  4
               else if (DHWSysRef[2]:CentralDHW = 0 .AND.
                        (DHWSysRef[2]:SystemType ==    4608 .OR.  ; "Central Parallel Piping"                
                         DHWSysRef[2]:SystemType ==    4609 .OR.  ; "Point of use"                           
                         DHWSysRef[2]:SystemType == 8392704 .OR.  ; "(HERS req'd) Pipe Insulation, All Lines"
                         DHWSysRef[2]:SystemType == 8393216))     ; "(HERS req'd) Central Parallel Piping"
               then  6
               else if (IfValidAnd( CDNumFloorsServed > 0 )==0) then  2
               else if (IfValidAnd( CDSpecFixDists > 0 )==0) then  0
               else if ( (IfValidAnd( CDServesMBathFix[2] > 0 ) .AND. IfValidAnd( CDMBathFixDist[2] > 0 )==0) .OR.
                         (IfValidAnd( CDServesKitFix[2]   > 0 ) .AND. IfValidAnd( CDKitFixDist[2]   > 0 )==0) .OR.
                         (IfValidAnd( CDServesThirdFix[2] > 0 ) .AND. IfValidAnd( CDThirdFixDist[2] > 0 )==0) )
               then  1
               else  0  endif endif endif endif endif endif
         else  UNDEFINED  endif  }
   "Set DwellUnitType:CmpctDistErrorID[3] flag"    DwellUnitType:CmpctDistErrorID[3] = {
         if (IfValidAnd( NumDHWSysTypes >= 3 ) .AND. LocalCompAssigned( DHWSysRef[3] ))
         then  if (ResProj:IsMultiFamily .AND. DHWSysRef[3]:CentralDHW) then  3
               else if (DHWSysRef[3]:CentralDHW = 0 .AND. IsDHWRecircSystem[3]) then  4
               else if (DHWSysRef[3]:CentralDHW = 0 .AND.
                        (DHWSysRef[3]:SystemType ==    4608 .OR.  ; "Central Parallel Piping"                
                         DHWSysRef[3]:SystemType ==    4609 .OR.  ; "Point of use"                           
                         DHWSysRef[3]:SystemType == 8392704 .OR.  ; "(HERS req'd) Pipe Insulation, All Lines"
                         DHWSysRef[3]:SystemType == 8393216))     ; "(HERS req'd) Central Parallel Piping"
               then  6
               else if (IfValidAnd( CDNumFloorsServed > 0 )==0) then  2
               else if (IfValidAnd( CDSpecFixDists > 0 )==0) then  0
               else if ( (IfValidAnd( CDServesMBathFix[3] > 0 ) .AND. IfValidAnd( CDMBathFixDist[3] > 0 )==0) .OR.
                         (IfValidAnd( CDServesKitFix[3]   > 0 ) .AND. IfValidAnd( CDKitFixDist[3]   > 0 )==0) .OR.
                         (IfValidAnd( CDServesThirdFix[3] > 0 ) .AND. IfValidAnd( CDThirdFixDist[3] > 0 )==0) )
               then  1
               else  0  endif endif endif endif endif endif
         else  UNDEFINED  endif  }
   "Set DwellUnitType:CmpctDistErrorID[4] flag"    DwellUnitType:CmpctDistErrorID[4] = {
         if (IfValidAnd( NumDHWSysTypes >= 4 ) .AND. LocalCompAssigned( DHWSysRef[4] ))
         then  if (ResProj:IsMultiFamily .AND. DHWSysRef[4]:CentralDHW) then  3
               else if (DHWSysRef[4]:CentralDHW = 0 .AND. IsDHWRecircSystem[4]) then  4
               else if (DHWSysRef[4]:CentralDHW = 0 .AND.
                        (DHWSysRef[4]:SystemType ==    4608 .OR.  ; "Central Parallel Piping"                
                         DHWSysRef[4]:SystemType ==    4609 .OR.  ; "Point of use"                           
                         DHWSysRef[4]:SystemType == 8392704 .OR.  ; "(HERS req'd) Pipe Insulation, All Lines"
                         DHWSysRef[4]:SystemType == 8393216))     ; "(HERS req'd) Central Parallel Piping"
               then  6
               else if (IfValidAnd( CDNumFloorsServed > 0 )==0) then  2
               else if (IfValidAnd( CDSpecFixDists > 0 )==0) then  0
               else if ( (IfValidAnd( CDServesMBathFix[4] > 0 ) .AND. IfValidAnd( CDMBathFixDist[4] > 0 )==0) .OR.
                         (IfValidAnd( CDServesKitFix[4]   > 0 ) .AND. IfValidAnd( CDKitFixDist[4]   > 0 )==0) .OR.
                         (IfValidAnd( CDServesThirdFix[4] > 0 ) .AND. IfValidAnd( CDThirdFixDist[4] > 0 )==0) )
               then  1
               else  0  endif endif endif endif endif endif
         else  UNDEFINED  endif  }
   "Set DwellUnitType:CmpctDistErrorID[5] flag"    DwellUnitType:CmpctDistErrorID[5] = {
         if (IfValidAnd( NumDHWSysTypes >= 5 ) .AND. LocalCompAssigned( DHWSysRef[5] ))
         then  if (ResProj:IsMultiFamily .AND. DHWSysRef[5]:CentralDHW) then  3
               else if (DHWSysRef[5]:CentralDHW = 0 .AND. IsDHWRecircSystem[5]) then  4
               else if (DHWSysRef[5]:CentralDHW = 0 .AND.
                        (DHWSysRef[5]:SystemType ==    4608 .OR.  ; "Central Parallel Piping"                
                         DHWSysRef[5]:SystemType ==    4609 .OR.  ; "Point of use"                           
                         DHWSysRef[5]:SystemType == 8392704 .OR.  ; "(HERS req'd) Pipe Insulation, All Lines"
                         DHWSysRef[5]:SystemType == 8393216))     ; "(HERS req'd) Central Parallel Piping"
               then  6
               else if (IfValidAnd( CDNumFloorsServed > 0 )==0) then  2
               else if (IfValidAnd( CDSpecFixDists > 0 )==0) then  0
               else if ( (IfValidAnd( CDServesMBathFix[5] > 0 ) .AND. IfValidAnd( CDMBathFixDist[5] > 0 )==0) .OR.
                         (IfValidAnd( CDServesKitFix[5]   > 0 ) .AND. IfValidAnd( CDKitFixDist[5]   > 0 )==0) .OR.
                         (IfValidAnd( CDServesThirdFix[5] > 0 ) .AND. IfValidAnd( CDThirdFixDist[5] > 0 )==0) )
               then  1
               else  0  endif endif endif endif endif endif
         else  UNDEFINED  endif  }

   "Set DwellUnitType:CDCentralDHW"    DwellUnitType:CDCentralDHW  =    ; SAC 4/4/19
      {  if (CmpctDistErrorID[1]==3 .OR. CmpctDistErrorID[2]==3 .OR. CmpctDistErrorID[3]==3 .OR.
             CmpctDistErrorID[4]==3 .OR. CmpctDistErrorID[5]==3) then  1  else  0  endif  }

   ; calcs to determine Weighted & Qual distances and CompactnessFactor
   "Set DwellUnitType:CDCompatible[1]"    DwellUnitType:CDCompatible[1]  = {
         if (CompactDistrib < 1 .OR. IfValidAnd( NumDHWSysTypes >= 1 )==0 .OR. LocalCompAssigned( DHWSysRef[1] ) < 1) then  UNDEFINED
         else if (IfValidAnd( CmpctDistErrorID[1] > 0 ) .OR. IfValidAnd( DHWSysRef[1]:TotNumDHWHeaters < 1 )) then  0
         else if (IfValidAnd( CDSpecFixDists > 0 )==0) then  1
         else if ( (IfValidAnd( CDServesMBathFix[1] > 0 ) .AND. IfValidAnd( CDMBathFixDist[1] > 0 )) .OR.
                   (IfValidAnd( CDServesKitFix[1]   > 0 ) .AND. IfValidAnd( CDKitFixDist[1]   > 0 )) .OR.
                   (IfValidAnd( CDServesThirdFix[1] > 0 ) .AND. IfValidAnd( CDThirdFixDist[1] > 0 )) )
         then  1  else  0  endif endif endif endif  }
   "Set DwellUnitType:CDCompatible[2]"    DwellUnitType:CDCompatible[2]  = {
         if (CompactDistrib < 1 .OR. IfValidAnd( NumDHWSysTypes >= 2 )==0 .OR. LocalCompAssigned( DHWSysRef[2] ) < 1) then  UNDEFINED
         else if (IfValidAnd( CmpctDistErrorID[2] > 0 ) .OR. IfValidAnd( DHWSysRef[2]:TotNumDHWHeaters < 1 )) then  0
         else if (IfValidAnd( CDSpecFixDists > 0 )==0) then  1
         else if ( (IfValidAnd( CDServesMBathFix[2] > 0 ) .AND. IfValidAnd( CDMBathFixDist[2] > 0 )) .OR.
                   (IfValidAnd( CDServesKitFix[2]   > 0 ) .AND. IfValidAnd( CDKitFixDist[2]   > 0 )) .OR.
                   (IfValidAnd( CDServesThirdFix[2] > 0 ) .AND. IfValidAnd( CDThirdFixDist[2] > 0 )) )
         then  1  else  0  endif endif endif endif  }
   "Set DwellUnitType:CDCompatible[3]"    DwellUnitType:CDCompatible[3]  = {
         if (CompactDistrib < 1 .OR. IfValidAnd( NumDHWSysTypes >= 3 )==0 .OR. LocalCompAssigned( DHWSysRef[3] ) < 1) then  UNDEFINED
         else if (IfValidAnd( CmpctDistErrorID[3] > 0 ) .OR. IfValidAnd( DHWSysRef[3]:TotNumDHWHeaters < 1 )) then  0
         else if (IfValidAnd( CDSpecFixDists > 0 )==0) then  1
         else if ( (IfValidAnd( CDServesMBathFix[3] > 0 ) .AND. IfValidAnd( CDMBathFixDist[3] > 0 )) .OR.
                   (IfValidAnd( CDServesKitFix[3]   > 0 ) .AND. IfValidAnd( CDKitFixDist[3]   > 0 )) .OR.
                   (IfValidAnd( CDServesThirdFix[3] > 0 ) .AND. IfValidAnd( CDThirdFixDist[3] > 0 )) )
         then  1  else  0  endif endif endif endif  }
   "Set DwellUnitType:CDCompatible[4]"    DwellUnitType:CDCompatible[4]  = {
         if (CompactDistrib < 1 .OR. IfValidAnd( NumDHWSysTypes >= 4 )==0 .OR. LocalCompAssigned( DHWSysRef[4] ) < 1) then  UNDEFINED
         else if (IfValidAnd( CmpctDistErrorID[4] > 0 ) .OR. IfValidAnd( DHWSysRef[4]:TotNumDHWHeaters < 1 )) then  0
         else if (IfValidAnd( CDSpecFixDists > 0 )==0) then  1
         else if ( (IfValidAnd( CDServesMBathFix[4] > 0 ) .AND. IfValidAnd( CDMBathFixDist[4] > 0 )) .OR.
                   (IfValidAnd( CDServesKitFix[4]   > 0 ) .AND. IfValidAnd( CDKitFixDist[4]   > 0 )) .OR.
                   (IfValidAnd( CDServesThirdFix[4] > 0 ) .AND. IfValidAnd( CDThirdFixDist[4] > 0 )) )
         then  1  else  0  endif endif endif endif  }
   "Set DwellUnitType:CDCompatible[5]"    DwellUnitType:CDCompatible[5]  = {
         if (CompactDistrib < 1 .OR. IfValidAnd( NumDHWSysTypes >= 5 )==0 .OR. LocalCompAssigned( DHWSysRef[5] ) < 1) then  UNDEFINED
         else if (IfValidAnd( CmpctDistErrorID[5] > 0 ) .OR. IfValidAnd( DHWSysRef[5]:TotNumDHWHeaters < 1 )) then  0
         else if (IfValidAnd( CDSpecFixDists > 0 )==0) then  1
         else if ( (IfValidAnd( CDServesMBathFix[5] > 0 ) .AND. IfValidAnd( CDMBathFixDist[5] > 0 )) .OR.
                   (IfValidAnd( CDServesKitFix[5]   > 0 ) .AND. IfValidAnd( CDKitFixDist[5]   > 0 )) .OR.
                   (IfValidAnd( CDServesThirdFix[5] > 0 ) .AND. IfValidAnd( CDThirdFixDist[5] > 0 )) )
         then  1  else  0  endif endif endif endif  }

   "Set DwellUnitType:CDUseMBathFixDist-1"      DwellUnitType:CDUseMBathFixDist  = {
         if (IfValidAnd( CDCompatible[1] > 0 ) .AND. IfValidAnd( CDServesMBathFix[1] > 0 ) .AND. IfValidAnd( CDMBathFixDist[1] > 0 )) then  CDMBathFixDist[1]  else  0  endif  }
   "Set DwellUnitType:CDUseMBathFixDist-2"      DwellUnitType:CDUseMBathFixDist  = {
         if (IfValidAnd( CDCompatible[2] > 0 ) .AND. IfValidAnd( CDServesMBathFix[2] > 0 ) .AND. IfValidAnd( CDMBathFixDist[2] > CDUseMBathFixDist )) then  CDMBathFixDist[2]  else  UNCHANGED  endif  }
   "Set DwellUnitType:CDUseMBathFixDist-3"      DwellUnitType:CDUseMBathFixDist  = {
         if (IfValidAnd( CDCompatible[3] > 0 ) .AND. IfValidAnd( CDServesMBathFix[3] > 0 ) .AND. IfValidAnd( CDMBathFixDist[3] > CDUseMBathFixDist )) then  CDMBathFixDist[3]  else  UNCHANGED  endif  }
   "Set DwellUnitType:CDUseMBathFixDist-4"      DwellUnitType:CDUseMBathFixDist  = {
         if (IfValidAnd( CDCompatible[4] > 0 ) .AND. IfValidAnd( CDServesMBathFix[4] > 0 ) .AND. IfValidAnd( CDMBathFixDist[4] > CDUseMBathFixDist )) then  CDMBathFixDist[4]  else  UNCHANGED  endif  }
   "Set DwellUnitType:CDUseMBathFixDist-5"      DwellUnitType:CDUseMBathFixDist  = {
         if (IfValidAnd( CDCompatible[5] > 0 ) .AND. IfValidAnd( CDServesMBathFix[5] > 0 ) .AND. IfValidAnd( CDMBathFixDist[5] > CDUseMBathFixDist )) then  CDMBathFixDist[5]  else  UNCHANGED  endif  }

   "Set DwellUnitType:CDUseKitFixDist-1"      DwellUnitType:CDUseKitFixDist  = {
         if (IfValidAnd( CDCompatible[1] > 0 ) .AND. IfValidAnd( CDServesKitFix[1] > 0 ) .AND. IfValidAnd( CDKitFixDist[1] > 0 )) then  CDKitFixDist[1]  else  0  endif  }
   "Set DwellUnitType:CDUseKitFixDist-2"      DwellUnitType:CDUseKitFixDist  = {
         if (IfValidAnd( CDCompatible[2] > 0 ) .AND. IfValidAnd( CDServesKitFix[2] > 0 ) .AND. IfValidAnd( CDKitFixDist[2] > CDUseKitFixDist )) then  CDKitFixDist[2]  else  UNCHANGED  endif  }
   "Set DwellUnitType:CDUseKitFixDist-3"      DwellUnitType:CDUseKitFixDist  = {
         if (IfValidAnd( CDCompatible[3] > 0 ) .AND. IfValidAnd( CDServesKitFix[3] > 0 ) .AND. IfValidAnd( CDKitFixDist[3] > CDUseKitFixDist )) then  CDKitFixDist[3]  else  UNCHANGED  endif  }
   "Set DwellUnitType:CDUseKitFixDist-4"      DwellUnitType:CDUseKitFixDist  = {
         if (IfValidAnd( CDCompatible[4] > 0 ) .AND. IfValidAnd( CDServesKitFix[4] > 0 ) .AND. IfValidAnd( CDKitFixDist[4] > CDUseKitFixDist )) then  CDKitFixDist[4]  else  UNCHANGED  endif  }
   "Set DwellUnitType:CDUseKitFixDist-5"      DwellUnitType:CDUseKitFixDist  = {
         if (IfValidAnd( CDCompatible[5] > 0 ) .AND. IfValidAnd( CDServesKitFix[5] > 0 ) .AND. IfValidAnd( CDKitFixDist[5] > CDUseKitFixDist )) then  CDKitFixDist[5]  else  UNCHANGED  endif  }

   "Set DwellUnitType:CDNumThirdFixDist-1"      DwellUnitType:CDNumThirdFixDist  = {
         if (IfValidAnd( CDCompatible[1] > 0 ) .AND. IfValidAnd( CDServesThirdFix[1] > 0 ) .AND. IfValidAnd( CDThirdFixDist[1] > 0 )) then  1  else  0  endif  }
   "Set DwellUnitType:CDNumThirdFixDist-2"      DwellUnitType:CDNumThirdFixDist  = {
         if (IfValidAnd( CDCompatible[2] > 0 ) .AND. IfValidAnd( CDServesThirdFix[2] > 0 ) .AND. IfValidAnd( CDThirdFixDist[2] > 0 )) then  CDNumThirdFixDist + 1  else  UNCHANGED  endif  }
   "Set DwellUnitType:CDNumThirdFixDist-3"      DwellUnitType:CDNumThirdFixDist  = {
         if (IfValidAnd( CDCompatible[3] > 0 ) .AND. IfValidAnd( CDServesThirdFix[3] > 0 ) .AND. IfValidAnd( CDThirdFixDist[3] > 0 )) then  CDNumThirdFixDist + 1  else  UNCHANGED  endif  }
   "Set DwellUnitType:CDNumThirdFixDist-4"      DwellUnitType:CDNumThirdFixDist  = {
         if (IfValidAnd( CDCompatible[4] > 0 ) .AND. IfValidAnd( CDServesThirdFix[4] > 0 ) .AND. IfValidAnd( CDThirdFixDist[4] > 0 )) then  CDNumThirdFixDist + 1  else  UNCHANGED  endif  }
   "Set DwellUnitType:CDNumThirdFixDist-5"      DwellUnitType:CDNumThirdFixDist  = {
         if (IfValidAnd( CDCompatible[5] > 0 ) .AND. IfValidAnd( CDServesThirdFix[5] > 0 ) .AND. IfValidAnd( CDThirdFixDist[5] > 0 )) then  CDNumThirdFixDist + 1  else  UNCHANGED  endif  }
   "Set DwellUnitType:CDUseThirdFixDist-1"      DwellUnitType:CDUseThirdFixDist  = {
         if (IfValidAnd( CDCompatible[1] > 0 ) .AND. IfValidAnd( CDServesThirdFix[1] > 0 ) .AND. IfValidAnd( CDThirdFixDist[1] > 0 )) then  CDThirdFixDist[1]  else  0  endif  }
   "Set DwellUnitType:CDUseThirdFixDist-2"      DwellUnitType:CDUseThirdFixDist  = {
         if (IfValidAnd( CDCompatible[2] > 0 ) .AND. IfValidAnd( CDServesThirdFix[2] > 0 ) .AND. IfValidAnd( CDThirdFixDist[2] > 0 )) then  CDUseThirdFixDist + CDThirdFixDist[2]  else  UNCHANGED  endif  }
   "Set DwellUnitType:CDUseThirdFixDist-3"      DwellUnitType:CDUseThirdFixDist  = {
         if (IfValidAnd( CDCompatible[3] > 0 ) .AND. IfValidAnd( CDServesThirdFix[3] > 0 ) .AND. IfValidAnd( CDThirdFixDist[3] > 0 )) then  CDUseThirdFixDist + CDThirdFixDist[3]  else  UNCHANGED  endif  }
   "Set DwellUnitType:CDUseThirdFixDist-4"      DwellUnitType:CDUseThirdFixDist  = {
         if (IfValidAnd( CDCompatible[4] > 0 ) .AND. IfValidAnd( CDServesThirdFix[4] > 0 ) .AND. IfValidAnd( CDThirdFixDist[4] > 0 )) then  CDUseThirdFixDist + CDThirdFixDist[4]  else  UNCHANGED  endif  }
   "Set DwellUnitType:CDUseThirdFixDist-5"      DwellUnitType:CDUseThirdFixDist  = {
         if (IfValidAnd( CDCompatible[5] > 0 ) .AND. IfValidAnd( CDServesThirdFix[5] > 0 ) .AND. IfValidAnd( CDThirdFixDist[5] > 0 )) then  CDUseThirdFixDist + CDThirdFixDist[5]  else  UNCHANGED  endif  }
   "Set DwellUnitType:CDUseThirdFixDist-Avg"    DwellUnitType:CDUseThirdFixDist  = {
         if (CDNumThirdFixDist > 0 .AND. CDUseThirdFixDist > 0) then  CDUseThirdFixDist / CDNumThirdFixDist  else  0  endif  }

   "Set DwellUnitType:CDTotNumDHWHeaters-1"     DwellUnitType:CDTotNumDHWHeaters  = {
         if (IfValidAnd( CDCompatible[1] > 0 )) then  DHWSysRef[1]:TotNumDHWHeaters  else  0  endif  }
   "Set DwellUnitType:CDTotNumDHWHeaters-2"     DwellUnitType:CDTotNumDHWHeaters  = {
         if (IfValidAnd( CDCompatible[2] > 0 )) then  CDTotNumDHWHeaters + DHWSysRef[2]:TotNumDHWHeaters  else  UNCHANGED  endif  }
   "Set DwellUnitType:CDTotNumDHWHeaters-3"     DwellUnitType:CDTotNumDHWHeaters  = {
         if (IfValidAnd( CDCompatible[3] > 0 )) then  CDTotNumDHWHeaters + DHWSysRef[3]:TotNumDHWHeaters  else  UNCHANGED  endif  }
   "Set DwellUnitType:CDTotNumDHWHeaters-4"     DwellUnitType:CDTotNumDHWHeaters  = {
         if (IfValidAnd( CDCompatible[4] > 0 )) then  CDTotNumDHWHeaters + DHWSysRef[4]:TotNumDHWHeaters  else  UNCHANGED  endif  }
   "Set DwellUnitType:CDTotNumDHWHeaters-5"     DwellUnitType:CDTotNumDHWHeaters  = {
         if (IfValidAnd( CDCompatible[5] > 0 )) then  CDTotNumDHWHeaters + DHWSysRef[5]:TotNumDHWHeaters  else  UNCHANGED  endif  }

   "Set DwellUnitType:CDWeightedDist"   DwellUnitType:CDWeightedDist  = {
         if (IfValidAnd( CDUseMBathFixDist >  0 )==0 .OR. IfValidAnd( CDUseKitFixDist > 0 )==0 .OR.
             IfValidAnd( CDUseThirdFixDist >= 0 )==0)
         then  10002
         else  (CDUseMBathFixDist * 0.4) +
               (CDUseKitFixDist   * 0.4) +
               (CDUseThirdFixDist * 0.2)
         endif  }

   "Set DwellUnitType:CDQualifyDist"    DwellUnitType:CDQualifyDist  = {
         if (IfValidAnd( CDTotNumDHWHeaters > 0 )==0) then  -1
         else if (IfValidAnd( CDNumFloorsServed <= 1 ))
         then  (7.5 + (0.008 * CondFlrArea)) / CDTotNumDHWHeaters
         else  (7.5 + (0.005 * CondFlrArea)) / CDTotNumDHWHeaters
         endif endif  }

      ; SAC 4/4/19 - added check for CDCentralDHW
      ; replaced UsrSpecCmpctDist with CDSpecFixDists - SAC 09/29/21 (tic #1277)
   "Set DwellUnitType:CompactFactor"    DwellUnitType:CompactFactor  = {
         if (CDCentralDHW > 0) then  1
         else if (CompactDistrib > 0 .AND. IfValidAnd( CDSpecFixDists > 0 )==0)
         then  if (CompactDistrib == 1) then  0.7
               else if (IfValidAnd( UsrCompactFactor > 0 )) then  UsrCompactFactor
               else  1  endif endif
         else if (CDWeightedDist >= 10000 .OR. IfValidAnd( CDNumFloorsServed > 0 )==0) then  1
         else if (IfValidAnd( CDWeightedDist <= CDQualifyDist )==0) then  10
         else if (CompactDistrib == 1) then  0.7
         else  0.3 + (0.4 * CDWeightedDist / CDQualifyDist)
         endif endif endif endif endif  }

   ; Compact Distribution messages
      ; SAC 4/4/19 - added check for CDCentralDHW
   "Set main DwellUnitType:CDDistMessageMain"   DwellUnitType:CDDistMessageMain  = {
         if (ResProj:IsMultiFamily < 0.5 .OR. CompactDistrib < 1)
         then  UNDEFINED
         else if (CDCentralDHW > 0)
         then  "Compact Distribution Credit not available for central DHW systems"
         else if (IfValidAnd( CDSpecFixDists > 0 )==0)
         then  UNDEFINED
         else if (IfValidAnd( CDWeightedDist = 10002 ))
         then  "Distances from heater(s) to served fixtures must be specified for each DHW system"
         else if (IfValidAnd( CompactFactor = 10 ))
         then  "Doesn't Qualify for Compact Distribution:  heater-fixture distances too high"
;         then  Format( "Doesn't Qualify for Compact Distribution:  weighted dist. %.1f must be <= qual. dist. %.1f", CDWeightedDist, CDQualifyDist )
         else if (CompactDistrib == 1)
         then  Format( "Basic Compact Distribution credit:  Qualifies with compactness factor of %.2f", CompactFactor )
         else  Format( "Expanded Compact Distribution credit:  Qualifies with compactness factor of %.2f", CompactFactor )
         endif endif endif endif endif endif  }

   "Set DwellUnitType:ReportCompactDist"     DwellUnitType:ReportCompactDist  =     ; SAC 4/13/19 - added for CF1R XML output
      {  if (ResProj:IsMultiFamily < 0.5 .OR. CompactDistrib < 1 .OR. IfValidAnd( NumAssigningDUs > 0 )==0) then  UNDEFINED
         else if (CDCentralDHW > 0) then  UNDEFINED
         else if (CompactDistrib > 0 .AND. IfValidAnd( CompactFactor < 1 )) then  CompactDistrib
         else  UNDEFINED  endif endif endif  }

   "Set initial DwellUnitType:CDDistMessage[1]"    DwellUnitType:CDDistMessage[1]  = {
         switch (CmpctDistErrorID[1])
            case  2 :  "Number of floors served by DHW system(s) must be specified to achieve credit"
            case  3 :  "Compact distribution credit not allowed for Central DHW systems"
            case  4 :  "Compact distribution credit not allowed for multifamily DHW systems with recirculation"
            case  6 :  "Compact distribution credit not available for Central Parallel Piping or Point of Use DHW Distribution types"
            case  1 :  "Compact distribution fixture distances missing or invalid for this DHW system"
            default :   if (CompactDistrib < 1)
                        then  "Compact distribution selection must be made for this Dwelling Unit Type to achieve credit"
                        else if (IfValidAnd( CDSpecFixDists > 0 )==0 .AND. IfvalidAnd( CompactFactor < 1 ))
                        then  Format( "Compactness factor %g (from main DwellUnitType dialog tab)", CompactFactor )
                        else if (IfValidAnd( CDWeightedDist > 10000 ))
                        then  "No Compact Distribution Credit:  All fixture distances must be specified"
                        else if (CompactFactor == 10)
                        then  Format( "Doesn't Qualify for Compact Distribution:  weighted dist. %.1f must be <= qual. dist. %.1f", CDWeightedDist, CDQualifyDist )
                        else if (CompactDistrib == 1)
                        then  Format( "Basic Compact Distribution credit:  Qualifies with compactness factor of %.2f", CompactFactor )
                        else  Format( "Expanded Compact Distribution credit:  Qualifies with compactness factor of %.2f", CompactFactor )
                        endif endif endif endif endif
         endswitch  }

   "Set initial DwellUnitType:CDDistMessage[2]"    DwellUnitType:CDDistMessage[2]  = {
         if (LocalStatus( CmpctDistErrorID[2] ) < 1) then  UNDEFINED
         else  switch (CmpctDistErrorID[2])
                  case  1 :  "User-specified distribution compactness factor missing"
                  case  2 :  "Number of floors served by DHW system(s) must be specified to achieve credit"
                  case  3 :  "Compact distribution credit not allowed for Central DHW systems"
                  case  4 :  "Compact distribution credit not allowed for multifamily DHW systems with recirculation"
                  case  6 :  "Compact distribution credit not available for Central Parallel Piping or Point of Use DHW Distribution types"
                  case  1 :  "Compact distribution fixture distances missing or invalid for this DHW system"
                  default :   if (IfValidAnd( NumDHWSysTypes >= 2 )==0 .OR. LocalCompAssigned( DHWSysRef[2] ) < 1) then  UNDEFINED
                              else  CDDistMessage[1]  endif
               endswitch  endif  }
   "Set initial DwellUnitType:CDDistMessage[3]"    DwellUnitType:CDDistMessage[3]  = {
         if (LocalStatus( CmpctDistErrorID[3] ) < 1) then  UNDEFINED
         else  switch (CmpctDistErrorID[3])
                  case  1 :  "User-specified distribution compactness factor missing"
                  case  2 :  "Number of floors served by DHW system(s) must be specified to achieve credit"
                  case  3 :  "Compact distribution credit not allowed for Central DHW systems"
                  case  4 :  "Compact distribution credit not allowed for multifamily DHW systems with recirculation"
                  case  6 :  "Compact distribution credit not available for Central Parallel Piping or Point of Use DHW Distribution types"
                  case  1 :  "Compact distribution fixture distances missing or invalid for this DHW system"
                  default :   if (IfValidAnd( NumDHWSysTypes >= 3 )==0 .OR. LocalCompAssigned( DHWSysRef[3] ) < 1) then  UNDEFINED
                              else  CDDistMessage[1]  endif
               endswitch  endif  }
   "Set initial DwellUnitType:CDDistMessage[4]"    DwellUnitType:CDDistMessage[4]  = {
         if (LocalStatus( CmpctDistErrorID[4] ) < 1) then  UNDEFINED
         else  switch (CmpctDistErrorID[4])
                  case  1 :  "User-specified distribution compactness factor missing"
                  case  2 :  "Number of floors served by DHW system(s) must be specified to achieve credit"
                  case  3 :  "Compact distribution credit not allowed for Central DHW systems"
                  case  4 :  "Compact distribution credit not allowed for multifamily DHW systems with recirculation"
                  case  6 :  "Compact distribution credit not available for Central Parallel Piping or Point of Use DHW Distribution types"
                  case  1 :  "Compact distribution fixture distances missing or invalid for this DHW system"
                  default :   if (IfValidAnd( NumDHWSysTypes >= 4 )==0 .OR. LocalCompAssigned( DHWSysRef[4] ) < 1) then  UNDEFINED
                              else  CDDistMessage[1]  endif
               endswitch  endif  }
   "Set initial DwellUnitType:CDDistMessage[5]"    DwellUnitType:CDDistMessage[5]  = {
         if (LocalStatus( CmpctDistErrorID[5] ) < 1) then  UNDEFINED
         else  switch (CmpctDistErrorID[5])
                  case  1 :  "User-specified distribution compactness factor missing"
                  case  2 :  "Number of floors served by DHW system(s) must be specified to achieve credit"
                  case  3 :  "Compact distribution credit not allowed for Central DHW systems"
                  case  4 :  "Compact distribution credit not allowed for multifamily DHW systems with recirculation"
                  case  6 :  "Compact distribution credit not available for Central Parallel Piping or Point of Use DHW Distribution types"
                  case  1 :  "Compact distribution fixture distances missing or invalid for this DHW system"
                  default :   if (IfValidAnd( NumDHWSysTypes >= 5 )==0 .OR. LocalCompAssigned( DHWSysRef[5] ) < 1) then  UNDEFINED
                              else  CDDistMessage[1]  endif
               endswitch  endif  }

;   "Init DwellUnitType:CompactFactor[1]"     DwellUnitType:CompactFactor[1]  = {
;         if (IfValidAnd( CmpctDistErrorID[1] = 0 )) then  UNCHANGED  ; set later
;         else if (LocalStatus( CompactFactor[1] ) > 0) then  UNDEFINED
;         else  UNCHANGED  endif endif  }
;   "Init DwellUnitType:CompactFactor[2]"     DwellUnitType:CompactFactor[2]  = {
;         if (IfValidAnd( CmpctDistErrorID[2] = 0 )) then  UNCHANGED  ; set later
;         else if (LocalStatus( CompactFactor[2] ) > 0) then  UNDEFINED
;         else  UNCHANGED  endif endif  }
;   "Init DwellUnitType:CompactFactor[3]"     DwellUnitType:CompactFactor[3]  = {
;         if (IfValidAnd( CmpctDistErrorID[3] = 0 )) then  UNCHANGED  ; set later
;         else if (LocalStatus( CompactFactor[3] ) > 0) then  UNDEFINED
;         else  UNCHANGED  endif endif  }
;   "Init DwellUnitType:CompactFactor[4]"     DwellUnitType:CompactFactor[4]  = {
;         if (IfValidAnd( CmpctDistErrorID[4] = 0 )) then  UNCHANGED  ; set later
;         else if (LocalStatus( CompactFactor[4] ) > 0) then  UNDEFINED
;         else  UNCHANGED  endif endif  }
;   "Init DwellUnitType:CompactFactor[5]"     DwellUnitType:CompactFactor[5]  = {
;         if (IfValidAnd( CmpctDistErrorID[5] = 0 )) then  UNCHANGED  ; set later
;         else if (LocalStatus( CompactFactor[5] ) > 0) then  UNDEFINED
;         else  UNCHANGED  endif endif  }

;   "Setup Compact Distrib properties-1"      DwellUnitType:Action  = {
;         if (IfValidAnd( CmpctDistErrorID[1] = 0 )==0) then  UNCHANGED
;         else  EvalRulelist( "ProposedInput_ResMFam_CompactDistribution_1", 1 )  endif  }
;   "Setup Compact Distrib properties-2"      DwellUnitType:Action  = {
;         if (IfValidAnd( CmpctDistErrorID[2] = 0 )==0) then  UNCHANGED
;         else  EvalRulelist( "ProposedInput_ResMFam_CompactDistribution_2", 1 )  endif  }
;   "Setup Compact Distrib properties-3"      DwellUnitType:Action  = {
;         if (IfValidAnd( CmpctDistErrorID[3] = 0 )==0) then  UNCHANGED
;         else  EvalRulelist( "ProposedInput_ResMFam_CompactDistribution_3", 1 )  endif  }
;   "Setup Compact Distrib properties-4"      DwellUnitType:Action  = {
;         if (IfValidAnd( CmpctDistErrorID[4] = 0 )==0) then  UNCHANGED
;         else  EvalRulelist( "ProposedInput_ResMFam_CompactDistribution_4", 1 )  endif  }
;   "Setup Compact Distrib properties-5"      DwellUnitType:Action  = {
;         if (IfValidAnd( CmpctDistErrorID[5] = 0 )==0) then  UNCHANGED
;         else  EvalRulelist( "ProposedInput_ResMFam_CompactDistribution_5", 1 )  endif  }
END
;*************************************************************************  - SAC 12/31/18
RULELIST "ProposedInput_ResMFam_CompactDistribution_1" 0 0 0 0
   ; SAC 12/31/18 - 2019 Compact Distribution input
      ; DwellUnitType:NumFlrsServedByDHW[1]  - no default
      ; DwellUnitType:CDMBathFixDist[1]      - no default
      ; DwellUnitType:CDKitFixDist[1]        - no default
      ; DwellUnitType:CDThirdFixDist[1]      - no default

;   "Set DwellUnitType:CDWeightedDist[1]"   DwellUnitType:CDWeightedDist[1]  = {
;         if (IfValidAnd( CDMBathFixDist[1] >  0 )==0 .OR. IfValidAnd( CDKitFixDist[1] > 0 )==0 .OR.
;             IfValidAnd( CDThirdFixDist[1] >= 0 )==0)
;         then  10002
;         else  (CDMBathFixDist[1] * 0.4) +
;               (CDKitFixDist[1]   * 0.4) +
;               (CDThirdFixDist[1] * 0.2)
;         endif  }
;
;   "Set DwellUnitType:CDQualifyDist[1]"    DwellUnitType:CDQualifyDist[1]  = {
;         if (IfValidAnd( NumFlrsServedByDHW[1] <= 1 ))
;         then  (7.5 + (0.008 * CondFlrArea)) / ValidOr( DHWSysRef[1]:TotNumDHWHeaters, 1 )
;         else  (7.5 + (0.005 * CondFlrArea)) / ValidOr( DHWSysRef[1]:TotNumDHWHeaters, 1 )
;         endif  }
;
;   "Set DwellUnitType:CompactFactor[1]"    DwellUnitType:CompactFactor[1]  = {
;         if (UserSpecCmpctDist[1] > 0 .AND. IfValidAnd( UserCompactFactor[1] > 0 )) then  UserCompactFactor[1]
;         else if (CDWeightedDist[1] >= 10000 .OR. IfValidAnd( NumFlrsServedByDHW[1] > 0 )==0) then  1
;         else if (IfValidAnd( CDWeightedDist[1] <= CDQualifyDist[1] )==0) then  10
;         else if (DHWSysRef[1]:CompactDistrib == 1) then  0.7
;         else  0.3 + (0.4 * CDWeightedDist[1] / CDQualifyDist[1])
;         endif endif endif endif  }
;
;   "Set DwellUnitType:CDDistMessage[1]"       DwellUnitType:CDDistMessage[1]  = {
;         if (UsrSpecCmpctDist > 0)
;         then  if (IfValidAnd( UserCompactFactor > 0 ))
;               then  Format( "User-specified compactness factor %g (not valid for compliance)", UserCompactFactor )
;               else  "Custom compactness factor not entered"
;               endif
;         else if (IfValidAnd( NumFlrsServedByDHW[1] > 0 )==0)
;         then  "Number of floors this DHW system serves must be specified for Compact Distrib. Credit"
;         else if (IfValidAnd( CDWeightedDist[1] > 10000 ))
;         then  "Distances to fixtures must be specified for Compact Distribution Credit"
;         else if (CompactFactor[1] == 10)
;         then  Format( "Weighted Distance of %.1f cannot exceed Qualification Distance of %.1f", CDWeightedDist[1], CDQualifyDist[1] )
;         else if (DHWSysRef[1]:CompactDistrib == 1)
;         then  Format( "Qualifies for Basic Compact credit with compactness factor of %.2f", CompactFactor[1] )
;         else  Format( "Qualifies for Expanded Compact credit with compactness factor of %.2f", CompactFactor[1] )
;         endif endif endif endif endif  }
END
;*************************************************************************  - SAC 1/6/19
RULELIST "ProposedInput_ResMFam_CompactDistribution_2" 0 0 0 0
   ; 2019 Compact Distribution input
      ; DwellUnitType:NumFlrsServedByDHW[2]  - no default
      ; DwellUnitType:CDMBathFixDist[2]      - no default
      ; DwellUnitType:CDKitFixDist[2]        - no default
      ; DwellUnitType:CDThirdFixDist[2]      - no default

;   "Set DwellUnitType:CDWeightedDist[2]"   DwellUnitType:CDWeightedDist[2]  = {
;         if (IfValidAnd( CDMBathFixDist[2] >  0 )==0 .OR. IfValidAnd( CDKitFixDist[2] > 0 )==0 .OR.
;             IfValidAnd( CDThirdFixDist[2] >= 0 )==0)
;         then  10002
;         else  (CDMBathFixDist[2] * 0.4) +
;               (CDKitFixDist[2]   * 0.4) +
;               (CDThirdFixDist[2] * 0.2)
;         endif  }
;
;   "Set DwellUnitType:CDQualifyDist[2]"    DwellUnitType:CDQualifyDist[2]  = {
;         if (IfValidAnd( NumFlrsServedByDHW[2] <= 1 ))
;         then  (7.5 + (0.008 * CondFlrArea)) / ValidOr( DHWSysRef[2]:TotNumDHWHeaters, 1 )
;         else  (7.5 + (0.005 * CondFlrArea)) / ValidOr( DHWSysRef[2]:TotNumDHWHeaters, 1 )
;         endif  }
;
;   "Set DwellUnitType:CompactFactor[2]"    DwellUnitType:CompactFactor[2]  = {
;         if (UserSpecCmpctDist[2] > 0 .AND. IfValidAnd( UserCompactFactor[2] > 0 )) then  UserCompactFactor[2]
;         else if (CDWeightedDist[2] >= 10000 .OR. IfValidAnd( NumFlrsServedByDHW[2] > 0 )==0) then  1
;         else if (IfValidAnd( CDWeightedDist[2] <= CDQualifyDist[2] )==0) then  10
;         else if (DHWSysRef[2]:CompactDistrib == 1) then  0.7
;         else  0.3 + (0.4 * CDWeightedDist[2] / CDQualifyDist[2])
;         endif endif endif endif  }
;
;   "Set DwellUnitType:CDDistMessage[2]"       DwellUnitType:CDDistMessage[2]  = {
;         if (UsrSpecCmpctDist > 0)
;         then  if (IfValidAnd( UserCompactFactor > 0 ))
;               then  Format( "User-specified compactness factor %g (not valid for compliance)", UserCompactFactor )
;               else  "Custom compactness factor not entered"
;               endif
;         else if (IfValidAnd( NumFlrsServedByDHW[2] > 0 )==0)
;         then  "Number of floors this DHW system serves must be specified for Compact Distrib. Credit"
;         else if (IfValidAnd( CDWeightedDist[2] > 10000 ))
;         then  "Distances to fixtures must be specified for Compact Distribution Credit"
;         else if (CompactFactor[2] == 10)
;         then  Format( "Weighted Distance of %.1f cannot exceed Qualification Distance of %.1f", CDWeightedDist[2], CDQualifyDist[2] )
;         else if (DHWSysRef[2]:CompactDistrib == 1)
;         then  Format( "Qualifies for Basic Compact credit with compactness factor of %.2f", CompactFactor[2] )
;         else  Format( "Qualifies for Expanded Compact credit with compactness factor of %.2f", CompactFactor[2] )
;         endif endif endif endif endif  }
END
;*************************************************************************  - SAC 1/7/19
RULELIST "ProposedInput_ResMFam_CompactDistribution_3" 0 0 0 0
   ; 2019 Compact Distribution input
      ; DwellUnitType:NumFlrsServedByDHW[3]  - no default
      ; DwellUnitType:CDMBathFixDist[3]      - no default
      ; DwellUnitType:CDKitFixDist[3]        - no default
      ; DwellUnitType:CDThirdFixDist[3]      - no default

;   "Set DwellUnitType:CDWeightedDist[3]"   DwellUnitType:CDWeightedDist[3]  = {
;         if (IfValidAnd( CDMBathFixDist[3] >  0 )==0 .OR. IfValidAnd( CDKitFixDist[3] > 0 )==0 .OR.
;             IfValidAnd( CDThirdFixDist[3] >= 0 )==0)
;         then  10002
;         else  (CDMBathFixDist[3] * 0.4) +
;               (CDKitFixDist[3]   * 0.4) +
;               (CDThirdFixDist[3] * 0.2)
;         endif  }
;
;   "Set DwellUnitType:CDQualifyDist[3]"    DwellUnitType:CDQualifyDist[3]  = {
;         if (IfValidAnd( NumFlrsServedByDHW[3] <= 1 ))
;         then  (7.5 + (0.008 * CondFlrArea)) / ValidOr( DHWSysRef[3]:TotNumDHWHeaters, 1 )
;         else  (7.5 + (0.005 * CondFlrArea)) / ValidOr( DHWSysRef[3]:TotNumDHWHeaters, 1 )
;         endif  }
;
;   "Set DwellUnitType:CompactFactor[3]"    DwellUnitType:CompactFactor[3]  = {
;         if (UserSpecCmpctDist[3] > 0 .AND. IfValidAnd( UserCompactFactor[3] > 0 )) then  UserCompactFactor[3]
;         else if (CDWeightedDist[3] >= 10000 .OR. IfValidAnd( NumFlrsServedByDHW[3] > 0 )==0) then  1
;         else if (IfValidAnd( CDWeightedDist[3] <= CDQualifyDist[3] )==0) then  10
;         else if (DHWSysRef[3]:CompactDistrib == 1) then  0.7
;         else  0.3 + (0.4 * CDWeightedDist[3] / CDQualifyDist[3])
;         endif endif endif endif  }
;
;   "Set DwellUnitType:CDDistMessage[3]"       DwellUnitType:CDDistMessage[3]  = {
;         if (UsrSpecCmpctDist > 0)
;         then  if (IfValidAnd( UserCompactFactor > 0 ))
;               then  Format( "User-specified compactness factor %g (not valid for compliance)", UserCompactFactor )
;               else  "Custom compactness factor not entered"
;               endif
;         else if (IfValidAnd( NumFlrsServedByDHW[3] > 0 )==0)
;         then  "Number of floors this DHW system serves must be specified for Compact Distrib. Credit"
;         else if (IfValidAnd( CDWeightedDist[3] > 10000 ))
;         then  "Distances to fixtures must be specified for Compact Distribution Credit"
;         else if (CompactFactor[3] == 10)
;         then  Format( "Weighted Distance of %.1f cannot exceed Qualification Distance of %.1f", CDWeightedDist[3], CDQualifyDist[3] )
;         else if (DHWSysRef[3]:CompactDistrib == 1)
;         then  Format( "Qualifies for Basic Compact credit with compactness factor of %.2f", CompactFactor[3] )
;         else  Format( "Qualifies for Expanded Compact credit with compactness factor of %.2f", CompactFactor[3] )
;         endif endif endif endif endif  }
END
;*************************************************************************  - SAC 1/7/19
RULELIST "ProposedInput_ResMFam_CompactDistribution_4" 0 0 0 0
   ; 2019 Compact Distribution input
      ; DwellUnitType:NumFlrsServedByDHW[4]  - no default
      ; DwellUnitType:CDMBathFixDist[4]      - no default
      ; DwellUnitType:CDKitFixDist[4]        - no default
      ; DwellUnitType:CDThirdFixDist[4]      - no default

;   "Set DwellUnitType:CDWeightedDist[4]"   DwellUnitType:CDWeightedDist[4]  = {
;         if (IfValidAnd( CDMBathFixDist[4] >  0 )==0 .OR. IfValidAnd( CDKitFixDist[4] > 0 )==0 .OR.
;             IfValidAnd( CDThirdFixDist[4] >= 0 )==0)
;         then  10002
;         else  (CDMBathFixDist[4] * 0.4) +
;               (CDKitFixDist[4]   * 0.4) +
;               (CDThirdFixDist[4] * 0.2)
;         endif  }
;
;   "Set DwellUnitType:CDQualifyDist[4]"    DwellUnitType:CDQualifyDist[4]  = {
;         if (IfValidAnd( NumFlrsServedByDHW[4] <= 1 ))
;         then  (7.5 + (0.008 * CondFlrArea)) / ValidOr( DHWSysRef[4]:TotNumDHWHeaters, 1 )
;         else  (7.5 + (0.005 * CondFlrArea)) / ValidOr( DHWSysRef[4]:TotNumDHWHeaters, 1 )
;         endif  }
;
;   "Set DwellUnitType:CompactFactor[4]"    DwellUnitType:CompactFactor[4]  = {
;         if (UserSpecCmpctDist[4] > 0 .AND. IfValidAnd( UserCompactFactor[4] > 0 )) then  UserCompactFactor[4]
;         else if (CDWeightedDist[4] >= 10000 .OR. IfValidAnd( NumFlrsServedByDHW[4] > 0 )==0) then  1
;         else if (IfValidAnd( CDWeightedDist[4] <= CDQualifyDist[4] )==0) then  10
;         else if (DHWSysRef[4]:CompactDistrib == 1) then  0.7
;         else  0.3 + (0.4 * CDWeightedDist[4] / CDQualifyDist[4])
;         endif endif endif endif  }
;
;   "Set DwellUnitType:CDDistMessage[4]"       DwellUnitType:CDDistMessage[4]  = {
;         if (UsrSpecCmpctDist > 0)
;         then  if (IfValidAnd( UserCompactFactor > 0 ))
;               then  Format( "User-specified compactness factor %g (not valid for compliance)", UserCompactFactor )
;               else  "Custom compactness factor not entered"
;               endif
;         else if (IfValidAnd( NumFlrsServedByDHW[4] > 0 )==0)
;         then  "Number of floors this DHW system serves must be specified for Compact Distrib. Credit"
;         else if (IfValidAnd( CDWeightedDist[4] > 10000 ))
;         then  "Distances to fixtures must be specified for Compact Distribution Credit"
;         else if (CompactFactor[4] == 10)
;         then  Format( "Weighted Distance of %.1f cannot exceed Qualification Distance of %.1f", CDWeightedDist[4], CDQualifyDist[4] )
;         else if (DHWSysRef[4]:CompactDistrib == 1)
;         then  Format( "Qualifies for Basic Compact credit with compactness factor of %.2f", CompactFactor[4] )
;         else  Format( "Qualifies for Expanded Compact credit with compactness factor of %.2f", CompactFactor[4] )
;         endif endif endif endif endif  }
END
;*************************************************************************  - SAC 1/7/19
RULELIST "ProposedInput_ResMFam_CompactDistribution_5" 0 0 0 0
   ; 2019 Compact Distribution input
      ; DwellUnitType:NumFlrsServedByDHW[5]  - no default
      ; DwellUnitType:CDMBathFixDist[5]      - no default
      ; DwellUnitType:CDKitFixDist[5]        - no default
      ; DwellUnitType:CDThirdFixDist[5]      - no default

;   "Set DwellUnitType:CDWeightedDist[5]"   DwellUnitType:CDWeightedDist[5]  = {
;         if (IfValidAnd( CDMBathFixDist[5] >  0 )==0 .OR. IfValidAnd( CDKitFixDist[5] > 0 )==0 .OR.
;             IfValidAnd( CDThirdFixDist[5] >= 0 )==0)
;         then  10002
;         else  (CDMBathFixDist[5] * 0.4) +
;               (CDKitFixDist[5]   * 0.4) +
;               (CDThirdFixDist[5] * 0.2)
;         endif  }
;
;   "Set DwellUnitType:CDQualifyDist[5]"    DwellUnitType:CDQualifyDist[5]  = {
;         if (IfValidAnd( NumFlrsServedByDHW[5] <= 1 ))
;         then  (7.5 + (0.008 * CondFlrArea)) / ValidOr( DHWSysRef[5]:TotNumDHWHeaters, 1 )
;         else  (7.5 + (0.005 * CondFlrArea)) / ValidOr( DHWSysRef[5]:TotNumDHWHeaters, 1 )
;         endif  }
;
;   "Set DwellUnitType:CompactFactor[5]"    DwellUnitType:CompactFactor[5]  = {
;         if (UserSpecCmpctDist[5] > 0 .AND. IfValidAnd( UserCompactFactor[5] > 0 )) then  UserCompactFactor[5]
;         else if (CDWeightedDist[5] >= 10000 .OR. IfValidAnd( NumFlrsServedByDHW[5] > 0 )==0) then  1
;         else if (IfValidAnd( CDWeightedDist[5] <= CDQualifyDist[5] )==0) then  10
;         else if (DHWSysRef[5]:CompactDistrib == 1) then  0.7
;         else  0.3 + (0.4 * CDWeightedDist[5] / CDQualifyDist[5])
;         endif endif endif endif  }
;
;   "Set DwellUnitType:CDDistMessage[5]"       DwellUnitType:CDDistMessage[5]  = {
;         if (UsrSpecCmpctDist > 0)
;         then  if (IfValidAnd( UserCompactFactor > 0 ))
;               then  Format( "User-specified compactness factor %g (not valid for compliance)", UserCompactFactor )
;               else  "Custom compactness factor not entered"
;               endif
;         else if (IfValidAnd( NumFlrsServedByDHW[5] > 0 )==0)
;         then  "Number of floors this DHW system serves must be specified for Compact Distrib. Credit"
;         else if (IfValidAnd( CDWeightedDist[5] > 10000 ))
;         then  "Distances to fixtures must be specified for Compact Distribution Credit"
;         else if (CompactFactor[5] == 10)
;         then  Format( "Weighted Distance of %.1f cannot exceed Qualification Distance of %.1f", CDWeightedDist[5], CDQualifyDist[5] )
;         else if (DHWSysRef[5]:CompactDistrib == 1)
;         then  Format( "Qualifies for Basic Compact credit with compactness factor of %.2f", CompactFactor[5] )
;         else  Format( "Qualifies for Expanded Compact credit with compactness factor of %.2f", CompactFactor[5] )
;         endif endif endif endif endif  }
END
;*************************************************************************


;*************************************************************************  - SAC 1/5/19
RULELIST "ProposedInput_MFam_DwellUnitType_FixtSrvdDWHRMsg" 0 0 0 0

   "Blast combined Fixtures Served & DWHRSys Message for DHWSys assignment #1 if not assigned"    DwellUnitType:FixtSrvdDWHRMsg[1]  = {
         if (IfValidAnd( NumDHWSysTypes >= 1 ) .AND. LocalCompAssigned( DHWSysRef[1] )) then  UNCHANGED
         else  UNDEFINED  endif  }
   "Call subordinate rulelist to set combined Fixtures Served & DWHRSys Message for DHWSys assignment #1"    DwellUnitType:Action  = {
         if (IfValidAnd( NumDHWSysTypes >= 1 ) .AND. LocalCompAssigned( DHWSysRef[1] ))
         then  EvalRulelist( "ProposedInput_MFam_DwellUnitType_FixtSrvdDWHRMsg_System1", 1 )
         else  UNCHANGED  endif  }
   "Blast combined Fixtures Served & DWHRSys Message for DHWSys assignment #2 if not assigned"    DwellUnitType:FixtSrvdDWHRMsg[2]  = {
         if (IfValidAnd( NumDHWSysTypes >= 2 ) .AND. LocalCompAssigned( DHWSysRef[2] )) then  UNCHANGED
         else  UNDEFINED  endif  }
   "Call subordinate rulelist to set combined Fixtures Served & DWHRSys Message for DHWSys assignment #2"    DwellUnitType:Action  = {
         if (IfValidAnd( NumDHWSysTypes >= 2 ) .AND. LocalCompAssigned( DHWSysRef[2] ))
         then  EvalRulelist( "ProposedInput_MFam_DwellUnitType_FixtSrvdDWHRMsg_System2", 1 )
         else  UNCHANGED  endif  }
   "Blast combined Fixtures Served & DWHRSys Message for DHWSys assignment #3 if not assigned"    DwellUnitType:FixtSrvdDWHRMsg[3]  = {
         if (IfValidAnd( NumDHWSysTypes >= 3 ) .AND. LocalCompAssigned( DHWSysRef[3] )) then  UNCHANGED
         else  UNDEFINED  endif  }
   "Call subordinate rulelist to set combined Fixtures Served & DWHRSys Message for DHWSys assignment #3"    DwellUnitType:Action  = {
         if (IfValidAnd( NumDHWSysTypes >= 3 ) .AND. LocalCompAssigned( DHWSysRef[3] ))
         then  EvalRulelist( "ProposedInput_MFam_DwellUnitType_FixtSrvdDWHRMsg_System3", 1 )
         else  UNCHANGED  endif  }
   "Blast combined Fixtures Served & DWHRSys Message for DHWSys assignment #4 if not assigned"    DwellUnitType:FixtSrvdDWHRMsg[4]  = {
         if (IfValidAnd( NumDHWSysTypes >= 4 ) .AND. LocalCompAssigned( DHWSysRef[4] )) then  UNCHANGED
         else  UNDEFINED  endif  }
   "Call subordinate rulelist to set combined Fixtures Served & DWHRSys Message for DHWSys assignment #4"    DwellUnitType:Action  = {
         if (IfValidAnd( NumDHWSysTypes >= 4 ) .AND. LocalCompAssigned( DHWSysRef[4] ))
         then  EvalRulelist( "ProposedInput_MFam_DwellUnitType_FixtSrvdDWHRMsg_System4", 1 )
         else  UNCHANGED  endif  }
   "Blast combined Fixtures Served & DWHRSys Message for DHWSys assignment #5 if not assigned"    DwellUnitType:FixtSrvdDWHRMsg[5]  = {
         if (IfValidAnd( NumDHWSysTypes >= 5 ) .AND. LocalCompAssigned( DHWSysRef[5] )) then  UNCHANGED
         else  UNDEFINED  endif  }
   "Call subordinate rulelist to set combined Fixtures Served & DWHRSys Message for DHWSys assignment #5"    DwellUnitType:Action  = {
         if (IfValidAnd( NumDHWSysTypes >= 5 ) .AND. LocalCompAssigned( DHWSysRef[5] ))
         then  EvalRulelist( "ProposedInput_MFam_DwellUnitType_FixtSrvdDWHRMsg_System5", 1 )
         else  UNCHANGED  endif  }
END
;*************************************************************************  - SAC 1/5/19
RULELIST "ProposedInput_MFam_DwellUnitType_FixtSrvdDWHRMsg_System1" 0 0 0 0
; first set Fixtures Served portion of message
   "Set Fixtures Served portion of message for DHWSysRef #1"   DwellUnitType:FixtSrvdDWHRMsg[1]  = {
         Format( "%g shower(s) & %g bath(s) served", ValidOr( TotShowersServed[1], 0 ), ValidOr( TotBathsServed[1], 0 ) )  }
; then set DWHRSys portion of message
   "Set DWHRSys portion of message for DHWSysRef #1"     DwellUnitType:FixtSrvdDWHRMsg[1]  = {
         if (IfValidAnd( NumDWHRSysRefs[1] > 0 )==0 .OR. IfValidAnd( TotDWHRSysShowers[1] > 0 )==0 .OR.
             IfValidAnd( TotShowersServed[1] < TotDWHRSysShowers[1] ))
         then  FixtSrvdDWHRMsg[1] + " / Drain Water Heat Recov. not specified"
         else if ((TotDWHRSysShowers[1] / TotShowersServed[1]) <= 0.095)
         then  Format( "%s / Heat Recovery from %.1f% of shower drains", FixtSrvdDWHRMsg[1], (TotDWHRSysShowers[1] * 100 / TotShowersServed[1]) )
         else  Format( "%s / Heat Recovery from %.0f% of shower drains", FixtSrvdDWHRMsg[1], (TotDWHRSysShowers[1] * 100 / TotShowersServed[1]) )
         endif endif  }
END
;*************************************************************************  - SAC 1/6/19
RULELIST "ProposedInput_MFam_DwellUnitType_FixtSrvdDWHRMsg_System2" 0 0 0 0
; first set Fixtures Served portion of message
   "Set Fixtures Served portion of message for DHWSysRef #2"   DwellUnitType:FixtSrvdDWHRMsg[2]  = {
         Format( "%g shower(s) & %g bath(s) served", ValidOr( TotShowersServed[2], 0 ), ValidOr( TotBathsServed[2], 0 ) )  }
; then set DWHRSys portion of message
   "Set DWHRSys portion of message for DHWSysRef #2"     DwellUnitType:FixtSrvdDWHRMsg[2]  = {
         if (NumDWHRSysRefs[2] < 1 .OR. IfValidAnd( TotDWHRSysShowers[2] > 0 )==0 .OR.
             IfValidAnd( TotShowersServed[2] < TotDWHRSysShowers[2] ))
         then  FixtSrvdDWHRMsg[2] + " / Drain Water Heat Recov. not specified"
         else if ((TotDWHRSysShowers[2] / TotShowersServed[2]) <= 0.095)
         then  Format( "%s / Heat Recovery from %.1f% of shower drains", FixtSrvdDWHRMsg[2], (TotDWHRSysShowers[2] * 100 / TotShowersServed[2]) )
         else  Format( "%s / Heat Recovery from %.0f% of shower drains", FixtSrvdDWHRMsg[2], (TotDWHRSysShowers[2] * 100 / TotShowersServed[2]) )
         endif endif  }
END
;*************************************************************************  - SAC 1/7/19
RULELIST "ProposedInput_MFam_DwellUnitType_FixtSrvdDWHRMsg_System3" 0 0 0 0
; first set Fixtures Served portion of message
   "Set Fixtures Served portion of message for DHWSysRef #3"   DwellUnitType:FixtSrvdDWHRMsg[3]  = {
         Format( "%g shower(s) & %g bath(s) served", ValidOr( TotShowersServed[3], 0 ), ValidOr( TotBathsServed[3], 0 ) )  }
; then set DWHRSys portion of message
   "Set DWHRSys portion of message for DHWSysRef #3"     DwellUnitType:FixtSrvdDWHRMsg[3]  = {
         if (NumDWHRSysRefs[3] < 1 .OR. IfValidAnd( TotDWHRSysShowers[3] > 0 )==0 .OR.
             IfValidAnd( TotShowersServed[3] < TotDWHRSysShowers[3] ))
         then  FixtSrvdDWHRMsg[3] + " / Drain Water Heat Recov. not specified"
         else if ((TotDWHRSysShowers[3] / TotShowersServed[3]) <= 0.095)
         then  Format( "%s / Heat Recovery from %.1f% of shower drains", FixtSrvdDWHRMsg[3], (TotDWHRSysShowers[3] * 100 / TotShowersServed[3]) )
         else  Format( "%s / Heat Recovery from %.0f% of shower drains", FixtSrvdDWHRMsg[3], (TotDWHRSysShowers[3] * 100 / TotShowersServed[3]) )
         endif endif  }
END
;*************************************************************************  - SAC 1/7/19
RULELIST "ProposedInput_MFam_DwellUnitType_FixtSrvdDWHRMsg_System4" 0 0 0 0
; first set Fixtures Served portion of message
   "Set Fixtures Served portion of message for DHWSysRef #4"   DwellUnitType:FixtSrvdDWHRMsg[4]  = {
         Format( "%g shower(s) & %g bath(s) served", ValidOr( TotShowersServed[4], 0 ), ValidOr( TotBathsServed[4], 0 ) )  }
; then set DWHRSys portion of message
   "Set DWHRSys portion of message for DHWSysRef #4"     DwellUnitType:FixtSrvdDWHRMsg[4]  = {
         if (NumDWHRSysRefs[4] < 1 .OR. IfValidAnd( TotDWHRSysShowers[4] > 0 )==0 .OR.
             IfValidAnd( TotShowersServed[4] < TotDWHRSysShowers[4] ))
         then  FixtSrvdDWHRMsg[4] + " / Drain Water Heat Recov. not specified"
         else if ((TotDWHRSysShowers[4] / TotShowersServed[4]) <= 0.095)
         then  Format( "%s / Heat Recovery from %.1f% of shower drains", FixtSrvdDWHRMsg[4], (TotDWHRSysShowers[4] * 100 / TotShowersServed[4]) )
         else  Format( "%s / Heat Recovery from %.0f% of shower drains", FixtSrvdDWHRMsg[4], (TotDWHRSysShowers[4] * 100 / TotShowersServed[4]) )
         endif endif  }
END
;*************************************************************************  - SAC 1/7/19
RULELIST "ProposedInput_MFam_DwellUnitType_FixtSrvdDWHRMsg_System5" 0 0 0 0
; first set Fixtures Served portion of message
   "Set Fixtures Served portion of message for DHWSysRef #5"   DwellUnitType:FixtSrvdDWHRMsg[5]  = {
         Format( "%g shower(s) & %g bath(s) served", ValidOr( TotShowersServed[5], 0 ), ValidOr( TotBathsServed[5], 0 ) )  }
; then set DWHRSys portion of message
   "Set DWHRSys portion of message for DHWSysRef #5"     DwellUnitType:FixtSrvdDWHRMsg[5]  = {
         if (NumDWHRSysRefs[5] < 1 .OR. IfValidAnd( TotDWHRSysShowers[5] > 0 )==0 .OR.
             IfValidAnd( TotShowersServed[5] < TotDWHRSysShowers[5] ))
         then  FixtSrvdDWHRMsg[5] + " / Drain Water Heat Recov. not specified"
         else if ((TotDWHRSysShowers[5] / TotShowersServed[5]) <= 0.095)
         then  Format( "%s / Heat Recovery from %.1f% of shower drains", FixtSrvdDWHRMsg[5], (TotDWHRSysShowers[5] * 100 / TotShowersServed[5]) )
         else  Format( "%s / Heat Recovery from %.0f% of shower drains", FixtSrvdDWHRMsg[5], (TotDWHRSysShowers[5] * 100 / TotShowersServed[5]) )
         endif endif  }
END
;*************************************************************************


;*************************************************************************  - SAC 12/26/18
RULELIST "ProposedInput_MFam_DWHRSys" 0 0 0 0

   "Call subordinate rulelist to default DWHRSys for DHWSys assignment #1"    DwellUnitType:Action  = {
         if (IfValidAnd( NumDHWSysTypes >= 1 ) .AND. LocalCompAssigned( DHWSysRef[1] ))
         then  EvalRulelist( "ProposedInput_MFam_DWHRSys_System1", 1 )
         else  UNCHANGED  endif  }
   "Call subordinate rulelist to default DWHRSys for DHWSys assignment #2"    DwellUnitType:Action  = {
         if (IfValidAnd( NumDHWSysTypes >= 2 ) .AND. LocalCompAssigned( DHWSysRef[2] ))
         then  EvalRulelist( "ProposedInput_MFam_DWHRSys_System2", 1 )
         else  UNCHANGED  endif  }
   "Call subordinate rulelist to default DWHRSys for DHWSys assignment #3"    DwellUnitType:Action  = {
         if (IfValidAnd( NumDHWSysTypes >= 3 ) .AND. LocalCompAssigned( DHWSysRef[3] ))
         then  EvalRulelist( "ProposedInput_MFam_DWHRSys_System3", 1 )
         else  UNCHANGED  endif  }
   "Call subordinate rulelist to default DWHRSys for DHWSys assignment #4"    DwellUnitType:Action  = {
         if (IfValidAnd( NumDHWSysTypes >= 4 ) .AND. LocalCompAssigned( DHWSysRef[4] ))
         then  EvalRulelist( "ProposedInput_MFam_DWHRSys_System4", 1 )
         else  UNCHANGED  endif  }
   "Call subordinate rulelist to default DWHRSys for DHWSys assignment #5"    DwellUnitType:Action  = {
         if (IfValidAnd( NumDHWSysTypes >= 5 ) .AND. LocalCompAssigned( DHWSysRef[5] ))
         then  EvalRulelist( "ProposedInput_MFam_DWHRSys_System5", 1 )
         else  UNCHANGED  endif  }

   "Set DwellUnitType:HaveShowerDWHR"     DwellUnitType:HaveShowerDWHR  =    ; SAC 7/16/19 - tic #1139
      {  if ( (IfValidAnd( NumDHWSysTypes >= 1 ) .AND. LocalCompAssigned( DHWSysRef[1] ) .AND.
               IfValidAnd( NumDWHRSysRefs[1] > 0 ) .AND. IfValidAnd( TotDWHRSysShowers[1] > 0 )) .OR.
              (IfValidAnd( NumDHWSysTypes >= 2 ) .AND. LocalCompAssigned( DHWSysRef[2] ) .AND.
               IfValidAnd( NumDWHRSysRefs[2] > 0 ) .AND. IfValidAnd( TotDWHRSysShowers[2] > 0 )) .OR.
              (IfValidAnd( NumDHWSysTypes >= 3 ) .AND. LocalCompAssigned( DHWSysRef[3] ) .AND.
               IfValidAnd( NumDWHRSysRefs[3] > 0 ) .AND. IfValidAnd( TotDWHRSysShowers[3] > 0 )) .OR.
              (IfValidAnd( NumDHWSysTypes >= 4 ) .AND. LocalCompAssigned( DHWSysRef[4] ) .AND.
               IfValidAnd( NumDWHRSysRefs[4] > 0 ) .AND. IfValidAnd( TotDWHRSysShowers[4] > 0 )) .OR.
              (IfValidAnd( NumDHWSysTypes >= 5 ) .AND. LocalCompAssigned( DHWSysRef[5] ) .AND.
               IfValidAnd( NumDWHRSysRefs[5] > 0 ) .AND. IfValidAnd( TotDWHRSysShowers[5] > 0 )) )
         then  1  else  0  endif  }
END
;*************************************************************************  - SAC 12/26/18
RULELIST "ProposedInput_MFam_DWHRSys_System1" 0 0 0 0
   "Set DwellUnitType:AllowShowerDWHR[1]"    DwellUnitType:AllowShowerDWHR[1]  =    ; SAC 4/4/19 - flag indicating shower-side DWHR allowed (=> not served by central system serving more than 8 units)
      {  if (IfValidAnd( DHWSysRef[1]:CentralDHW > 0 ) .AND. IfValidAnd( DHWSysRef[1]:NumDUsServed > 8 ))
         then  0  else  1  endif  }

      ; DwellUnitType:DWHRSysRef<1-6>[1],                 Default,   0,    1,   1,    1,  1,  1 BEMP_Obj,  3,  1,   1, "DWHRSys", 0, "",  1003, "DWHRSys equipment" 
      ; DwellUnitType:DWHRSysConfig<1-6>[1],              Default,   0,    1,   1,    1,  1,  1 BEMP_Sym,  3,  1,   0,                 3008, "DWHRSys Configuration" 
   "Default DwellUnitType:DWHRSysShowers1[1]"    DwellUnitType:DWHRSysShowers1[1]  = {
         if (LocalCompAssigned( DWHRSysRef1[1] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers2[1]"    DwellUnitType:DWHRSysShowers2[1]  = {
         if (LocalCompAssigned( DWHRSysRef2[1] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers3[1]"    DwellUnitType:DWHRSysShowers3[1]  = {
         if (LocalCompAssigned( DWHRSysRef3[1] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers4[1]"    DwellUnitType:DWHRSysShowers4[1]  = {
         if (LocalCompAssigned( DWHRSysRef4[1] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers5[1]"    DwellUnitType:DWHRSysShowers5[1]  = {
         if (LocalCompAssigned( DWHRSysRef5[1] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers6[1]"    DwellUnitType:DWHRSysShowers6[1]  = {
         if (LocalCompAssigned( DWHRSysRef6[1] )) then  1  else  UNDEFINED  endif  }
   "Set DwellUnitType:NumDWHRSysRefs[1] - Number of DWHRSys object references are defined"    DwellUnitType:NumDWHRSysRefs[1]  = {
           if (LocalCompAssigned( DWHRSysRef6[1] )) then  6
      else if (LocalCompAssigned( DWHRSysRef5[1] )) then  5
      else if (LocalCompAssigned( DWHRSysRef4[1] )) then  4
      else if (LocalCompAssigned( DWHRSysRef3[1] )) then  3
      else if (LocalCompAssigned( DWHRSysRef2[1] )) then  2
      else if (LocalCompAssigned( DWHRSysRef1[1] )) then  1
      else   0  endif endif endif endif endif endif  }

   ; SAC 4/1/19 - added revised DWHR inputs replacing DWHRSysConfig w/ DWHRSysTakeCold & DWHRSysFeedHeater
   ; SAC 4/4/19 - revised rules to default to no DWHRSysTakeCold* showers and 'yes' to DWHRSysFeedHeater* when served by central DHW systems serving > 8 DUs
   "Default DwellUnitType:DWHRSysTakeCold1[1]"    DwellUnitType:DWHRSysTakeCold1[1]  = {
         if (LocalCompAssigned( DWHRSysRef1[1] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[1] < 1) then  0  else  ValidOr( DWHRSysShowers1[1], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold2[1]"    DwellUnitType:DWHRSysTakeCold2[1]  = {
         if (LocalCompAssigned( DWHRSysRef2[1] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[1] < 1) then  0  else  ValidOr( DWHRSysShowers2[1], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold3[1]"    DwellUnitType:DWHRSysTakeCold3[1]  = {
         if (LocalCompAssigned( DWHRSysRef3[1] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[1] < 1) then  0  else  ValidOr( DWHRSysShowers3[1], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold4[1]"    DwellUnitType:DWHRSysTakeCold4[1]  = {
         if (LocalCompAssigned( DWHRSysRef4[1] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[1] < 1) then  0  else  ValidOr( DWHRSysShowers4[1], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold5[1]"    DwellUnitType:DWHRSysTakeCold5[1]  = {
         if (LocalCompAssigned( DWHRSysRef5[1] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[1] < 1) then  0  else  ValidOr( DWHRSysShowers5[1], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold6[1]"    DwellUnitType:DWHRSysTakeCold6[1]  = {
         if (LocalCompAssigned( DWHRSysRef6[1] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[1] < 1) then  0  else  ValidOr( DWHRSysShowers6[1], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater1[1]"  DwellUnitType:DWHRSysFeedHeater1[1]  = {
         if (LocalCompAssigned( DWHRSysRef1[1] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[1] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater2[1]"  DwellUnitType:DWHRSysFeedHeater2[1]  = {
         if (LocalCompAssigned( DWHRSysRef2[1] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[1] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater3[1]"  DwellUnitType:DWHRSysFeedHeater3[1]  = {
         if (LocalCompAssigned( DWHRSysRef3[1] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[1] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater4[1]"  DwellUnitType:DWHRSysFeedHeater4[1]  = {
         if (LocalCompAssigned( DWHRSysRef4[1] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[1] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater5[1]"  DwellUnitType:DWHRSysFeedHeater5[1]  = {
         if (LocalCompAssigned( DWHRSysRef5[1] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[1] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater6[1]"  DwellUnitType:DWHRSysFeedHeater6[1]  = {
         if (LocalCompAssigned( DWHRSysRef6[1] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[1] < 1) then  1  else  0  endif endif  }

   "Set DwellUnitType:TotDWHRSysShowers[1] - 1"     DwellUnitType:TotDWHRSysShowers[1]  = {
         if (LocalCompAssigned( DWHRSysRef1[1] )) then  DWHRSysShowers1[1]  else  0  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[1] - 2"     DwellUnitType:TotDWHRSysShowers[1]  = {
         if (LocalCompAssigned( DWHRSysRef2[1] )) then  TotDWHRSysShowers[1] + DWHRSysShowers2[1]  else  UNCHANGED  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[1] - 3"     DwellUnitType:TotDWHRSysShowers[1]  = {
         if (LocalCompAssigned( DWHRSysRef3[1] )) then  TotDWHRSysShowers[1] + DWHRSysShowers3[1]  else  UNCHANGED  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[1] - 4"     DwellUnitType:TotDWHRSysShowers[1]  = {
         if (LocalCompAssigned( DWHRSysRef4[1] )) then  TotDWHRSysShowers[1] + DWHRSysShowers4[1]  else  UNCHANGED  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[1] - 5"     DwellUnitType:TotDWHRSysShowers[1]  = {
         if (LocalCompAssigned( DWHRSysRef5[1] )) then  TotDWHRSysShowers[1] + DWHRSysShowers5[1]  else  UNCHANGED  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[1] - 6"     DwellUnitType:TotDWHRSysShowers[1]  = {
         if (LocalCompAssigned( DWHRSysRef6[1] )) then  TotDWHRSysShowers[1] + DWHRSysShowers6[1]  else  UNCHANGED  endif  }

   "Default DwellUnitType:TotShowersServed[1]"   DwellUnitType:TotShowersServed[1]  = {  max( 1, TotDWHRSysShowers[1] )  }

   "Set DwellUnitType:NumDWHRSysDevices[1] - error detection"   DwellUnitType:NumDWHRSysDevices[1]  = {
               if (NumDWHRSysRefs[1] > 0 .AND. TotShowersServed[1] < TotDWHRSysShowers[1])
               then  -1
               else   0
               endif  }
   ;      if (IfValidAnd( DHWSysRef[1]:CentralDHW > 0 )==0)
   ;      then  ; non-central MFam
   ;            if (NumDWHRSysRefs[1] > 0 .AND. TotShowersServed[1] < TotDWHRSysShowers[1])
   ;            then  -1
   ;            else   0
   ;            endif
   ;      else  ; MFam Central systems
   ;            0
   ;      endif  }

   "Set DwellUnitType:NumDWHRSysDevices[1] - DWHRSys 1"   DwellUnitType:NumDWHRSysDevices[1]  = {
         if (NumDWHRSysDevices[1] < 0 .OR. NumDWHRSysRefs[1] < 1) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef1[1]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers1[1] > 0 )) then  1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[1] - DWHRSys 2"   DwellUnitType:NumDWHRSysDevices[1]  = {
         if (NumDWHRSysDevices[1] < 0 .OR. NumDWHRSysRefs[1] < 2) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef2[1]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers2[1] > 0 )) then  NumDWHRSysDevices[1] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[1] - DWHRSys 3"   DwellUnitType:NumDWHRSysDevices[1]  = {
         if (NumDWHRSysDevices[1] < 0 .OR. NumDWHRSysRefs[1] < 3) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef3[1]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers3[1] > 0 )) then  NumDWHRSysDevices[1] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[1] - DWHRSys 4"   DwellUnitType:NumDWHRSysDevices[1]  = {
         if (NumDWHRSysDevices[1] < 0 .OR. NumDWHRSysRefs[1] < 4) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef4[1]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers4[1] > 0 )) then  NumDWHRSysDevices[1] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[1] - DWHRSys 5"   DwellUnitType:NumDWHRSysDevices[1]  = {
         if (NumDWHRSysDevices[1] < 0 .OR. NumDWHRSysRefs[1] < 5) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef5[1]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers5[1] > 0 )) then  NumDWHRSysDevices[1] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[1] - DWHRSys 6"   DwellUnitType:NumDWHRSysDevices[1]  = {
         if (NumDWHRSysDevices[1] < 0 .OR. NumDWHRSysRefs[1] < 6) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef6[1]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers6[1] > 0 )) then  NumDWHRSysDevices[1] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:DWHRSysDevicesSim[1]"     DwellUnitType:DWHRSysDevicesSim[1]  =     ; SAC 4/29/19 (tic #1056)
      {  if (NumDWHRSysDevices[1] > 0 .AND. IfValidAnd( AssignedDUFlrArea > 1 )) then  NumDWHRSysDevices[1]  else  0  endif  }

; TO DO - set based on DUT assignments ->  DwellUnitType:CntrlDWHRSysShowers,            NotInput,   0,    0,   0,    1,  1,  1 BEMP_Int,  1,   1003, "Number of showers this central DHWSys recovers heat from"
   "Set DwellUnitType:DWHRSysSummaryMsg[1]"      DwellUnitType:DWHRSysSummaryMsg[1]  = {
         if (NumDWHRSysRefs[1] < 1)
         then  "Assign DWHRSys devices below to enable shower drain heat recovery"
         else if (TotDWHRSysShowers[1] < 1)
         then  "Specify number of shower drains below to enable shower drain ht recov"
         else if (TotShowersServed[1] < TotDWHRSysShowers[1])
         ;then  Format( "ERROR:  Total showers served (%.0f) must be >= %.0f (# DWHRSys showers)", TotShowersServed[1], TotDWHRSysShowers[1] )
         then  Format( "ERROR:  Total shower drains served by this system must be >= %.0f (number of DWHRSys showers)", TotDWHRSysShowers[1] )
         else if (LocalCompAssigned( DWHRSysRef1[1] ) .AND. IfValidAnd( DWHRSysShowers1[1] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold1[1] > DWHRSysShowers1[1] ))
         then  Format( "ERROR:  System #1 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold1[1], DWHRSysShowers1[1] )
         else if (LocalCompAssigned( DWHRSysRef1[1] ) .AND. IfValidAnd( DWHRSysShowers1[1] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold1[1] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater1[1] > 0 )==0)
         then  Format( "ERROR:  System #1 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef2[1] ) .AND. IfValidAnd( DWHRSysShowers2[1] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold2[1] > DWHRSysShowers2[1] ))
         then  Format( "ERROR:  System #2 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold2[1], DWHRSysShowers2[1] )
         else if (LocalCompAssigned( DWHRSysRef2[1] ) .AND. IfValidAnd( DWHRSysShowers2[1] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold2[1] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater2[1] > 0 )==0)
         then  Format( "ERROR:  System #2 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef3[1] ) .AND. IfValidAnd( DWHRSysShowers3[1] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold3[1] > DWHRSysShowers3[1] ))
         then  Format( "ERROR:  System #3 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold3[1], DWHRSysShowers3[1] )
         else if (LocalCompAssigned( DWHRSysRef3[1] ) .AND. IfValidAnd( DWHRSysShowers3[1] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold3[1] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater3[1] > 0 )==0)
         then  Format( "ERROR:  System #3 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef4[1] ) .AND. IfValidAnd( DWHRSysShowers4[1] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold4[1] > DWHRSysShowers4[1] ))
         then  Format( "ERROR:  System #4 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold4[1], DWHRSysShowers4[1] )
         else if (LocalCompAssigned( DWHRSysRef4[1] ) .AND. IfValidAnd( DWHRSysShowers4[1] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold4[1] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater4[1] > 0 )==0)
         then  Format( "ERROR:  System #4 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef5[1] ) .AND. IfValidAnd( DWHRSysShowers5[1] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold5[1] > DWHRSysShowers5[1] ))
         then  Format( "ERROR:  System #5 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold5[1], DWHRSysShowers5[1] )
         else if (LocalCompAssigned( DWHRSysRef5[1] ) .AND. IfValidAnd( DWHRSysShowers5[1] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold5[1] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater5[1] > 0 )==0)
         then  Format( "ERROR:  System #5 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef6[1] ) .AND. IfValidAnd( DWHRSysShowers6[1] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold6[1] > DWHRSysShowers6[1] ))
         then  Format( "ERROR:  System #6 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold6[1], DWHRSysShowers6[1] )
         else if (LocalCompAssigned( DWHRSysRef6[1] ) .AND. IfValidAnd( DWHRSysShowers6[1] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold6[1] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater6[1] > 0 )==0)
         then  Format( "ERROR:  System #6 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if ((TotDWHRSysShowers[1] / TotShowersServed[1]) <= 0.2)
         then  Format( "Heat being recovered from %.1f% of shower drains", (TotDWHRSysShowers[1] * 100 / TotShowersServed[1]) )
         else  Format( "Heat being recovered from %.0f% of shower drains", (TotDWHRSysShowers[1] * 100 / TotShowersServed[1]) )
         endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif  }

   "Set DwellUnitType:DWHRSysConfigDescrip[1]"      DwellUnitType:DWHRSysConfigDescrip[1]  = {
         if (NumDWHRSysRefs[1] < 1) then  UNDEFINED
         else  "RTF\DWHX_Config.rtf"  endif  }

;     ; SAC 12/25/18 - added 2019 Drain Water Heat Recovery (via new DWHX objects)
;     DwellUnitType:TotShowersServed[ALL],   Default,   0,    1,   1,    1,  1,  1
;     DwellUnitType:TotDWHRSysShowers[ALL],    NotInput,   0,    0,   0,    1,  1,  1
;     DwellUnitType:DWHRSysSummaryMsg[ALL],    NotInput,   0,    0,   0,    1,  1,  1
;     DwellUnitType:DWHRSysRef1[ALL],           Default,   0,    1,   1,    1,  1,  1
;     DwellUnitType:DWHRSysConfig1[ALL],        Default,   0,    1,   1,    1,  1,  1
;     DwellUnitType:DWHRSysShowers1[ALL],       Default,   0,    1,   1,    1,  1,  1
;     DwellUnitType:DWHRSysRef2[ALL],           Default,   0,    1,   1,    1,  1,  1
;     DwellUnitType:DWHRSysConfig2[ALL],        Default,   0,    1,   1,    1,  1,  1
;     DwellUnitType:DWHRSysShowers2[ALL],       Default,   0,    1,   1,    1,  1,  1
;     DwellUnitType:DWHRSysRef3[ALL],           Default,   0,    1,   1,    1,  1,  1
;     DwellUnitType:DWHRSysConfig3[ALL],        Default,   0,    1,   1,    1,  1,  1
;     DwellUnitType:DWHRSysShowers3[ALL],       Default,   0,    1,   1,    1,  1,  1
;     DwellUnitType:DWHRSysRef4[ALL],           Default,   0,    1,   1,    1,  1,  1
;     DwellUnitType:DWHRSysConfig4[ALL],        Default,   0,    1,   1,    1,  1,  1
;     DwellUnitType:DWHRSysShowers4[ALL],       Default,   0,    1,   1,    1,  1,  1
;     DwellUnitType:DWHRSysRef5[ALL],           Default,   0,    1,   1,    1,  1,  1
;     DwellUnitType:DWHRSysConfig5[ALL],        Default,   0,    1,   1,    1,  1,  1
;     DwellUnitType:DWHRSysShowers5[ALL],       Default,   0,    1,   1,    1,  1,  1
;     DwellUnitType:DWHRSysRef6[ALL],           Default,   0,    1,   1,    1,  1,  1
;     DwellUnitType:DWHRSysConfig6[ALL],        Default,   0,    1,   1,    1,  1,  1
;     DwellUnitType:DWHRSysShowers6[ALL],       Default,   0,    1,   1,    1,  1,  1
;     DwellUnitType:DWHRSysConfigDescrip[ALL], NotInput,   0,    0,   0,    1,  1,  1
;     DwellUnitType:NumDWHRSysRefs[ALL],       NotInput,   0,    0,   0,    1,  1,  1
;     DwellUnitType:NumDevices[ALL],    NotInput,   0,    0,   0,    1,  1,  1

END
;*************************************************************************  - SAC 1/6/19
RULELIST "ProposedInput_MFam_DWHRSys_System2" 0 0 0 0
   "Set DwellUnitType:AllowShowerDWHR[2]"    DwellUnitType:AllowShowerDWHR[2]  =    ; SAC 4/4/19 - flag indicating shower-side DWHR allowed (=> not served by central system serving more than 8 units)
      {  if (IfValidAnd( DHWSysRef[2]:CentralDHW > 0 ) .AND. IfValidAnd( DHWSysRef[2]:NumDUsServed > 8 ))
         then  0  else  1  endif  }

      ; DwellUnitType:DWHRSysRef<1-6>[2],                 Default,   0,    1,   1,    1,  1,  1 BEMP_Obj,  3,  1,   1, "DWHRSys", 0, "",  1003, "DWHRSys equipment" 
      ; DwellUnitType:DWHRSysConfig<1-6>[2],              Default,   0,    1,   1,    1,  1,  1 BEMP_Sym,  3,  1,   0,                 3008, "DWHRSys Configuration" 
   "Default DwellUnitType:DWHRSysShowers1[2]"    DwellUnitType:DWHRSysShowers1[2]  = {
         if (LocalCompAssigned( DWHRSysRef1[2] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers2[2]"    DwellUnitType:DWHRSysShowers2[2]  = {
         if (LocalCompAssigned( DWHRSysRef2[2] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers3[2]"    DwellUnitType:DWHRSysShowers3[2]  = {
         if (LocalCompAssigned( DWHRSysRef3[2] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers4[2]"    DwellUnitType:DWHRSysShowers4[2]  = {
         if (LocalCompAssigned( DWHRSysRef4[2] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers5[2]"    DwellUnitType:DWHRSysShowers5[2]  = {
         if (LocalCompAssigned( DWHRSysRef5[2] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers6[2]"    DwellUnitType:DWHRSysShowers6[2]  = {
         if (LocalCompAssigned( DWHRSysRef6[2] )) then  1  else  UNDEFINED  endif  }
   "Set DwellUnitType:NumDWHRSysRefs[2] - Number of DWHRSys object references are defined"    DwellUnitType:NumDWHRSysRefs[2]  = {
           if (LocalCompAssigned( DWHRSysRef6[2] )) then  6
      else if (LocalCompAssigned( DWHRSysRef5[2] )) then  5
      else if (LocalCompAssigned( DWHRSysRef4[2] )) then  4
      else if (LocalCompAssigned( DWHRSysRef3[2] )) then  3
      else if (LocalCompAssigned( DWHRSysRef2[2] )) then  2
      else if (LocalCompAssigned( DWHRSysRef1[2] )) then  1
      else   0  endif endif endif endif endif endif  }

   ; SAC 4/1/19 - added revised DWHR inputs replacing DWHRSysConfig w/ DWHRSysTakeCold & DWHRSysFeedHeater
   ; SAC 4/4/19 - revised rules to default to no DWHRSysTakeCold* showers and 'yes' to DWHRSysFeedHeater* when served by central DHW systems serving > 8 DUs
   "Default DwellUnitType:DWHRSysTakeCold1[2]"    DwellUnitType:DWHRSysTakeCold1[2]  = {
         if (LocalCompAssigned( DWHRSysRef1[2] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[2] < 1) then  0  else  ValidOr( DWHRSysShowers1[2], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold2[2]"    DwellUnitType:DWHRSysTakeCold2[2]  = {
         if (LocalCompAssigned( DWHRSysRef2[2] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[2] < 1) then  0  else  ValidOr( DWHRSysShowers2[2], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold3[2]"    DwellUnitType:DWHRSysTakeCold3[2]  = {
         if (LocalCompAssigned( DWHRSysRef3[2] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[2] < 1) then  0  else  ValidOr( DWHRSysShowers3[2], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold4[2]"    DwellUnitType:DWHRSysTakeCold4[2]  = {
         if (LocalCompAssigned( DWHRSysRef4[2] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[2] < 1) then  0  else  ValidOr( DWHRSysShowers4[2], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold5[2]"    DwellUnitType:DWHRSysTakeCold5[2]  = {
         if (LocalCompAssigned( DWHRSysRef5[2] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[2] < 1) then  0  else  ValidOr( DWHRSysShowers5[2], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold6[2]"    DwellUnitType:DWHRSysTakeCold6[2]  = {
         if (LocalCompAssigned( DWHRSysRef6[2] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[2] < 1) then  0  else  ValidOr( DWHRSysShowers6[2], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater1[2]"  DwellUnitType:DWHRSysFeedHeater1[2]  = {
         if (LocalCompAssigned( DWHRSysRef1[2] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[2] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater2[2]"  DwellUnitType:DWHRSysFeedHeater2[2]  = {
         if (LocalCompAssigned( DWHRSysRef2[2] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[2] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater3[2]"  DwellUnitType:DWHRSysFeedHeater3[2]  = {
         if (LocalCompAssigned( DWHRSysRef3[2] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[2] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater4[2]"  DwellUnitType:DWHRSysFeedHeater4[2]  = {
         if (LocalCompAssigned( DWHRSysRef4[2] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[2] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater5[2]"  DwellUnitType:DWHRSysFeedHeater5[2]  = {
         if (LocalCompAssigned( DWHRSysRef5[2] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[2] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater6[2]"  DwellUnitType:DWHRSysFeedHeater6[2]  = {
         if (LocalCompAssigned( DWHRSysRef6[2] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[2] < 1) then  1  else  0  endif endif  }

   "Set DwellUnitType:TotDWHRSysShowers[2] - 1"     DwellUnitType:TotDWHRSysShowers[2]  = {
         if (LocalCompAssigned( DWHRSysRef1[2] )) then  DWHRSysShowers1[2]  else  0  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[2] - 2"     DwellUnitType:TotDWHRSysShowers[2]  = {
         if (LocalCompAssigned( DWHRSysRef2[2] )) then  TotDWHRSysShowers[2] + DWHRSysShowers2[2]  else  UNCHANGED  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[2] - 3"     DwellUnitType:TotDWHRSysShowers[2]  = {
         if (LocalCompAssigned( DWHRSysRef3[2] )) then  TotDWHRSysShowers[2] + DWHRSysShowers3[2]  else  UNCHANGED  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[2] - 4"     DwellUnitType:TotDWHRSysShowers[2]  = {
         if (LocalCompAssigned( DWHRSysRef4[2] )) then  TotDWHRSysShowers[2] + DWHRSysShowers4[2]  else  UNCHANGED  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[2] - 5"     DwellUnitType:TotDWHRSysShowers[2]  = {
         if (LocalCompAssigned( DWHRSysRef5[2] )) then  TotDWHRSysShowers[2] + DWHRSysShowers5[2]  else  UNCHANGED  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[2] - 6"     DwellUnitType:TotDWHRSysShowers[2]  = {
         if (LocalCompAssigned( DWHRSysRef6[2] )) then  TotDWHRSysShowers[2] + DWHRSysShowers6[2]  else  UNCHANGED  endif  }

   "Default DwellUnitType:TotShowersServed[2]"   DwellUnitType:TotShowersServed[2]  = {  max( 1, TotDWHRSysShowers[2] )  }

   "Set DwellUnitType:NumDWHRSysDevices[2] - error detection"   DwellUnitType:NumDWHRSysDevices[2]  = {
               if (NumDWHRSysRefs[2] > 0 .AND. TotShowersServed[2] < TotDWHRSysShowers[2])
               then  -1
               else   0
               endif  }
   ;      if (IfValidAnd( DHWSysRef[2]:CentralDHW > 0 )==0)
   ;      then  ; non-central MFam
   ;            if (NumDWHRSysRefs[2] > 0 .AND. TotShowersServed[2] < TotDWHRSysShowers[2])
   ;            then  -1
   ;            else   0
   ;            endif
   ;      else  ; MFam Central systems
   ;            0
   ;      endif  }
   "Set DwellUnitType:NumDWHRSysDevices[2] - DWHRSys 1"   DwellUnitType:NumDWHRSysDevices[2]  = {
         if (NumDWHRSysDevices[2] < 0 .OR. NumDWHRSysRefs[2] < 1) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef1[2]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers1[2] > 0 )) then  1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[2] - DWHRSys 2"   DwellUnitType:NumDWHRSysDevices[2]  = {
         if (NumDWHRSysDevices[2] < 0 .OR. NumDWHRSysRefs[2] < 2) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef2[2]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers2[2] > 0 )) then  NumDWHRSysDevices[2] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[2] - DWHRSys 3"   DwellUnitType:NumDWHRSysDevices[2]  = {
         if (NumDWHRSysDevices[2] < 0 .OR. NumDWHRSysRefs[2] < 3) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef3[2]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers3[2] > 0 )) then  NumDWHRSysDevices[2] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[2] - DWHRSys 4"   DwellUnitType:NumDWHRSysDevices[2]  = {
         if (NumDWHRSysDevices[2] < 0 .OR. NumDWHRSysRefs[2] < 4) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef4[2]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers4[2] > 0 )) then  NumDWHRSysDevices[2] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[2] - DWHRSys 5"   DwellUnitType:NumDWHRSysDevices[2]  = {
         if (NumDWHRSysDevices[2] < 0 .OR. NumDWHRSysRefs[2] < 5) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef5[2]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers5[2] > 0 )) then  NumDWHRSysDevices[2] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[2] - DWHRSys 6"   DwellUnitType:NumDWHRSysDevices[2]  = {
         if (NumDWHRSysDevices[2] < 0 .OR. NumDWHRSysRefs[2] < 6) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef6[2]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers6[2] > 0 )) then  NumDWHRSysDevices[2] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:DWHRSysDevicesSim[2]"     DwellUnitType:DWHRSysDevicesSim[2]  =     ; SAC 4/29/19 (tic #1056)
      {  if (NumDWHRSysDevices[2] > 0 .AND. IfValidAnd( AssignedDUFlrArea > 1 )) then  NumDWHRSysDevices[2]  else  0  endif  }

; TO DO - set based on DUT assignments ->  DwellUnitType:CntrlDWHRSysShowers,            NotInput,   0,    0,   0,    1,  1,  1 BEMP_Int,  1,   1003, "Number of showers this central DHWSys recovers heat from"
   "Set DwellUnitType:DWHRSysSummaryMsg[2]"      DwellUnitType:DWHRSysSummaryMsg[2]  = {
         if (NumDWHRSysRefs[2] < 1)
         then  "Assign DWHRSys devices below to enable shower drain heat recovery"
         else if (TotDWHRSysShowers[2] < 1)
         then  "Specify number of shower drains below to enable shower drain ht recov"
         else if (TotShowersServed[2] < TotDWHRSysShowers[2])
         ;then  Format( "ERROR:  Total showers served (%.0f) must be >= %.0f (# DWHRSys showers)", TotShowersServed[2], TotDWHRSysShowers[2] )
         then  Format( "ERROR:  Total shower drains served by this system must be >= %.0f (number of DWHRSys showers)", TotDWHRSysShowers[2] )
         else if (LocalCompAssigned( DWHRSysRef1[2] ) .AND. IfValidAnd( DWHRSysShowers1[2] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold1[2] > DWHRSysShowers1[2] ))
         then  Format( "ERROR:  System #1 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold1[2], DWHRSysShowers1[2] )
         else if (LocalCompAssigned( DWHRSysRef1[2] ) .AND. IfValidAnd( DWHRSysShowers1[2] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold1[2] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater1[2] > 0 )==0)
         then  Format( "ERROR:  System #1 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef2[2] ) .AND. IfValidAnd( DWHRSysShowers2[2] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold2[2] > DWHRSysShowers2[2] ))
         then  Format( "ERROR:  System #2 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold2[2], DWHRSysShowers2[2] )
         else if (LocalCompAssigned( DWHRSysRef2[2] ) .AND. IfValidAnd( DWHRSysShowers2[2] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold2[2] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater2[2] > 0 )==0)
         then  Format( "ERROR:  System #2 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef3[2] ) .AND. IfValidAnd( DWHRSysShowers3[2] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold3[2] > DWHRSysShowers3[2] ))
         then  Format( "ERROR:  System #3 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold3[2], DWHRSysShowers3[2] )
         else if (LocalCompAssigned( DWHRSysRef3[2] ) .AND. IfValidAnd( DWHRSysShowers3[2] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold3[2] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater3[2] > 0 )==0)
         then  Format( "ERROR:  System #3 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef4[2] ) .AND. IfValidAnd( DWHRSysShowers4[2] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold4[2] > DWHRSysShowers4[2] ))
         then  Format( "ERROR:  System #4 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold4[2], DWHRSysShowers4[2] )
         else if (LocalCompAssigned( DWHRSysRef4[2] ) .AND. IfValidAnd( DWHRSysShowers4[2] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold4[2] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater4[2] > 0 )==0)
         then  Format( "ERROR:  System #4 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef5[2] ) .AND. IfValidAnd( DWHRSysShowers5[2] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold5[2] > DWHRSysShowers5[2] ))
         then  Format( "ERROR:  System #5 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold5[2], DWHRSysShowers5[2] )
         else if (LocalCompAssigned( DWHRSysRef5[2] ) .AND. IfValidAnd( DWHRSysShowers5[2] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold5[2] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater5[2] > 0 )==0)
         then  Format( "ERROR:  System #5 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef6[2] ) .AND. IfValidAnd( DWHRSysShowers6[2] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold6[2] > DWHRSysShowers6[2] ))
         then  Format( "ERROR:  System #6 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold6[2], DWHRSysShowers6[2] )
         else if (LocalCompAssigned( DWHRSysRef6[2] ) .AND. IfValidAnd( DWHRSysShowers6[2] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold6[2] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater6[2] > 0 )==0)
         then  Format( "ERROR:  System #6 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if ((TotDWHRSysShowers[2] / TotShowersServed[2]) <= 0.2)
         then  Format( "Heat being recovered from %.1f% of shower drains", (TotDWHRSysShowers[2] * 100 / TotShowersServed[2]) )
         else  Format( "Heat being recovered from %.0f% of shower drains", (TotDWHRSysShowers[2] * 100 / TotShowersServed[2]) )
         endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif  }
   ;      if (IfValidAnd( DHWSysRef[2]:CentralDHW > 0 )==0)
   ;      then  ; non-central MFam
   ;      else
   ;            "Message describing central DHWSys drain water heat recovery"
   ;      endif  }

   "Set DwellUnitType:DWHRSysConfigDescrip[2]"      DwellUnitType:DWHRSysConfigDescrip[2]  = {
         if (NumDWHRSysRefs[2] < 1) then  UNDEFINED
         else  "RTF\DWHX_Config.rtf"  endif  }
END
;*************************************************************************  - SAC 1/6/19
RULELIST "ProposedInput_MFam_DWHRSys_System3" 0 0 0 0
   "Set DwellUnitType:AllowShowerDWHR[3]"    DwellUnitType:AllowShowerDWHR[3]  =    ; SAC 4/4/19 - flag indicating shower-side DWHR allowed (=> not served by central system serving more than 8 units)
      {  if (IfValidAnd( DHWSysRef[3]:CentralDHW > 0 ) .AND. IfValidAnd( DHWSysRef[3]:NumDUsServed > 8 ))
         then  0  else  1  endif  }

      ; DwellUnitType:DWHRSysRef<1-6>[3],                 Default,   0,    1,   1,    1,  1,  1 BEMP_Obj,  3,  1,   1, "DWHRSys", 0, "",  1003, "DWHRSys equipment" 
      ; DwellUnitType:DWHRSysConfig<1-6>[3],              Default,   0,    1,   1,    1,  1,  1 BEMP_Sym,  3,  1,   0,                 3008, "DWHRSys Configuration" 
   "Default DwellUnitType:DWHRSysShowers1[3]"    DwellUnitType:DWHRSysShowers1[3]  = {
         if (LocalCompAssigned( DWHRSysRef1[3] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers2[3]"    DwellUnitType:DWHRSysShowers2[3]  = {
         if (LocalCompAssigned( DWHRSysRef2[3] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers3[3]"    DwellUnitType:DWHRSysShowers3[3]  = {
         if (LocalCompAssigned( DWHRSysRef3[3] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers4[3]"    DwellUnitType:DWHRSysShowers4[3]  = {
         if (LocalCompAssigned( DWHRSysRef4[3] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers5[3]"    DwellUnitType:DWHRSysShowers5[3]  = {
         if (LocalCompAssigned( DWHRSysRef5[3] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers6[3]"    DwellUnitType:DWHRSysShowers6[3]  = {
         if (LocalCompAssigned( DWHRSysRef6[3] )) then  1  else  UNDEFINED  endif  }
   "Set DwellUnitType:NumDWHRSysRefs[3] - Number of DWHRSys object references are defined"    DwellUnitType:NumDWHRSysRefs[3]  = {
           if (LocalCompAssigned( DWHRSysRef6[3] )) then  6
      else if (LocalCompAssigned( DWHRSysRef5[3] )) then  5
      else if (LocalCompAssigned( DWHRSysRef4[3] )) then  4
      else if (LocalCompAssigned( DWHRSysRef3[3] )) then  3
      else if (LocalCompAssigned( DWHRSysRef2[3] )) then  2
      else if (LocalCompAssigned( DWHRSysRef1[3] )) then  1
      else   0  endif endif endif endif endif endif  }

   ; SAC 4/1/19 - added revised DWHR inputs replacing DWHRSysConfig w/ DWHRSysTakeCold & DWHRSysFeedHeater
   ; SAC 4/4/19 - revised rules to default to no DWHRSysTakeCold* showers and 'yes' to DWHRSysFeedHeater* when served by central DHW systems serving > 8 DUs
   "Default DwellUnitType:DWHRSysTakeCold1[3]"    DwellUnitType:DWHRSysTakeCold1[3]  = {
         if (LocalCompAssigned( DWHRSysRef1[3] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[3] < 1) then  0  else  ValidOr( DWHRSysShowers1[3], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold2[3]"    DwellUnitType:DWHRSysTakeCold2[3]  = {
         if (LocalCompAssigned( DWHRSysRef2[3] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[3] < 1) then  0  else  ValidOr( DWHRSysShowers2[3], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold3[3]"    DwellUnitType:DWHRSysTakeCold3[3]  = {
         if (LocalCompAssigned( DWHRSysRef3[3] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[3] < 1) then  0  else  ValidOr( DWHRSysShowers3[3], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold4[3]"    DwellUnitType:DWHRSysTakeCold4[3]  = {
         if (LocalCompAssigned( DWHRSysRef4[3] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[3] < 1) then  0  else  ValidOr( DWHRSysShowers4[3], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold5[3]"    DwellUnitType:DWHRSysTakeCold5[3]  = {
         if (LocalCompAssigned( DWHRSysRef5[3] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[3] < 1) then  0  else  ValidOr( DWHRSysShowers5[3], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold6[3]"    DwellUnitType:DWHRSysTakeCold6[3]  = {
         if (LocalCompAssigned( DWHRSysRef6[3] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[3] < 1) then  0  else  ValidOr( DWHRSysShowers6[3], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater1[3]"  DwellUnitType:DWHRSysFeedHeater1[3]  = {
         if (LocalCompAssigned( DWHRSysRef1[3] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[3] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater2[3]"  DwellUnitType:DWHRSysFeedHeater2[3]  = {
         if (LocalCompAssigned( DWHRSysRef2[3] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[3] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater3[3]"  DwellUnitType:DWHRSysFeedHeater3[3]  = {
         if (LocalCompAssigned( DWHRSysRef3[3] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[3] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater4[3]"  DwellUnitType:DWHRSysFeedHeater4[3]  = {
         if (LocalCompAssigned( DWHRSysRef4[3] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[3] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater5[3]"  DwellUnitType:DWHRSysFeedHeater5[3]  = {
         if (LocalCompAssigned( DWHRSysRef5[3] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[3] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater6[3]"  DwellUnitType:DWHRSysFeedHeater6[3]  = {
         if (LocalCompAssigned( DWHRSysRef6[3] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[3] < 1) then  1  else  0  endif endif  }

   "Set DwellUnitType:TotDWHRSysShowers[3] - 1"     DwellUnitType:TotDWHRSysShowers[3]  = {
         if (LocalCompAssigned( DWHRSysRef1[3] )) then  DWHRSysShowers1[3]  else  0  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[3] - 2"     DwellUnitType:TotDWHRSysShowers[3]  = {
         if (LocalCompAssigned( DWHRSysRef2[3] )) then  TotDWHRSysShowers[3] + DWHRSysShowers2[3]  else  UNCHANGED  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[3] - 3"     DwellUnitType:TotDWHRSysShowers[3]  = {
         if (LocalCompAssigned( DWHRSysRef3[3] )) then  TotDWHRSysShowers[3] + DWHRSysShowers3[3]  else  UNCHANGED  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[3] - 4"     DwellUnitType:TotDWHRSysShowers[3]  = {
         if (LocalCompAssigned( DWHRSysRef4[3] )) then  TotDWHRSysShowers[3] + DWHRSysShowers4[3]  else  UNCHANGED  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[3] - 5"     DwellUnitType:TotDWHRSysShowers[3]  = {
         if (LocalCompAssigned( DWHRSysRef5[3] )) then  TotDWHRSysShowers[3] + DWHRSysShowers5[3]  else  UNCHANGED  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[3] - 6"     DwellUnitType:TotDWHRSysShowers[3]  = {
         if (LocalCompAssigned( DWHRSysRef6[3] )) then  TotDWHRSysShowers[3] + DWHRSysShowers6[3]  else  UNCHANGED  endif  }

   "Default DwellUnitType:TotShowersServed[3]"   DwellUnitType:TotShowersServed[3]  = {  max( 1, TotDWHRSysShowers[3] )  }

   "Set DwellUnitType:NumDWHRSysDevices[3] - error detection"   DwellUnitType:NumDWHRSysDevices[3]  = {
               if (NumDWHRSysRefs[3] > 0 .AND. TotShowersServed[3] < TotDWHRSysShowers[3])
               then  -1
               else   0
               endif  }
   ;      if (IfValidAnd( DHWSysRef[3]:CentralDHW > 0 )==0)
   ;      then  ; non-central MFam
   ;            if (NumDWHRSysRefs[3] > 0 .AND. TotShowersServed[3] < TotDWHRSysShowers[3])
   ;            then  -1
   ;            else   0
   ;            endif
   ;      else  ; MFam Central systems
   ;            0
   ;      endif  }
   "Set DwellUnitType:NumDWHRSysDevices[3] - DWHRSys 1"   DwellUnitType:NumDWHRSysDevices[3]  = {
         if (NumDWHRSysDevices[3] < 0 .OR. NumDWHRSysRefs[3] < 1) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef1[3]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers1[3] > 0 )) then  1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[3] - DWHRSys 2"   DwellUnitType:NumDWHRSysDevices[3]  = {
         if (NumDWHRSysDevices[3] < 0 .OR. NumDWHRSysRefs[3] < 2) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef2[3]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers2[3] > 0 )) then  NumDWHRSysDevices[3] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[3] - DWHRSys 3"   DwellUnitType:NumDWHRSysDevices[3]  = {
         if (NumDWHRSysDevices[3] < 0 .OR. NumDWHRSysRefs[3] < 3) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef3[3]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers3[3] > 0 )) then  NumDWHRSysDevices[3] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[3] - DWHRSys 4"   DwellUnitType:NumDWHRSysDevices[3]  = {
         if (NumDWHRSysDevices[3] < 0 .OR. NumDWHRSysRefs[3] < 4) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef4[3]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers4[3] > 0 )) then  NumDWHRSysDevices[3] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[3] - DWHRSys 5"   DwellUnitType:NumDWHRSysDevices[3]  = {
         if (NumDWHRSysDevices[3] < 0 .OR. NumDWHRSysRefs[3] < 5) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef5[3]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers5[3] > 0 )) then  NumDWHRSysDevices[3] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[3] - DWHRSys 6"   DwellUnitType:NumDWHRSysDevices[3]  = {
         if (NumDWHRSysDevices[3] < 0 .OR. NumDWHRSysRefs[3] < 6) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef6[3]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers6[3] > 0 )) then  NumDWHRSysDevices[3] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:DWHRSysDevicesSim[3]"     DwellUnitType:DWHRSysDevicesSim[3]  =     ; SAC 4/29/19 (tic #1056)
      {  if (NumDWHRSysDevices[3] > 0 .AND. IfValidAnd( AssignedDUFlrArea > 1 )) then  NumDWHRSysDevices[3]  else  0  endif  }

; TO DO - set based on DUT assignments ->  DwellUnitType:CntrlDWHRSysShowers,            NotInput,   0,    0,   0,    1,  1,  1 BEMP_Int,  1,   1003, "Number of showers this central DHWSys recovers heat from"
   "Set DwellUnitType:DWHRSysSummaryMsg[3]"      DwellUnitType:DWHRSysSummaryMsg[3]  = {
         if (NumDWHRSysRefs[3] < 1)
         then  "Assign DWHRSys devices below to enable shower drain heat recovery"
         else if (TotDWHRSysShowers[3] < 1)
         then  "Specify number of shower drains below to enable shower drain ht recov"
         else if (TotShowersServed[3] < TotDWHRSysShowers[3])
         ;then  Format( "ERROR:  Total showers served (%.0f) must be >= %.0f (# DWHRSys showers)", TotShowersServed[3], TotDWHRSysShowers[3] )
         then  Format( "ERROR:  Total shower drains served by this system must be >= %.0f (number of DWHRSys showers)", TotDWHRSysShowers[3] )
         else if (LocalCompAssigned( DWHRSysRef1[3] ) .AND. IfValidAnd( DWHRSysShowers1[3] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold1[3] > DWHRSysShowers1[3] ))
         then  Format( "ERROR:  System #1 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold1[3], DWHRSysShowers1[3] )
         else if (LocalCompAssigned( DWHRSysRef1[3] ) .AND. IfValidAnd( DWHRSysShowers1[3] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold1[3] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater1[3] > 0 )==0)
         then  Format( "ERROR:  System #1 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef2[3] ) .AND. IfValidAnd( DWHRSysShowers2[3] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold2[3] > DWHRSysShowers2[3] ))
         then  Format( "ERROR:  System #2 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold2[3], DWHRSysShowers2[3] )
         else if (LocalCompAssigned( DWHRSysRef2[3] ) .AND. IfValidAnd( DWHRSysShowers2[3] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold2[3] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater2[3] > 0 )==0)
         then  Format( "ERROR:  System #2 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef3[3] ) .AND. IfValidAnd( DWHRSysShowers3[3] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold3[3] > DWHRSysShowers3[3] ))
         then  Format( "ERROR:  System #3 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold3[3], DWHRSysShowers3[3] )
         else if (LocalCompAssigned( DWHRSysRef3[3] ) .AND. IfValidAnd( DWHRSysShowers3[3] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold3[3] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater3[3] > 0 )==0)
         then  Format( "ERROR:  System #3 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef4[3] ) .AND. IfValidAnd( DWHRSysShowers4[3] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold4[3] > DWHRSysShowers4[3] ))
         then  Format( "ERROR:  System #4 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold4[3], DWHRSysShowers4[3] )
         else if (LocalCompAssigned( DWHRSysRef4[3] ) .AND. IfValidAnd( DWHRSysShowers4[3] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold4[3] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater4[3] > 0 )==0)
         then  Format( "ERROR:  System #4 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef5[3] ) .AND. IfValidAnd( DWHRSysShowers5[3] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold5[3] > DWHRSysShowers5[3] ))
         then  Format( "ERROR:  System #5 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold5[3], DWHRSysShowers5[3] )
         else if (LocalCompAssigned( DWHRSysRef5[3] ) .AND. IfValidAnd( DWHRSysShowers5[3] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold5[3] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater5[3] > 0 )==0)
         then  Format( "ERROR:  System #5 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef6[3] ) .AND. IfValidAnd( DWHRSysShowers6[3] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold6[3] > DWHRSysShowers6[3] ))
         then  Format( "ERROR:  System #6 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold6[3], DWHRSysShowers6[3] )
         else if (LocalCompAssigned( DWHRSysRef6[3] ) .AND. IfValidAnd( DWHRSysShowers6[3] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold6[3] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater6[3] > 0 )==0)
         then  Format( "ERROR:  System #6 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if ((TotDWHRSysShowers[3] / TotShowersServed[3]) <= 0.2)
         then  Format( "Heat being recovered from %.1f% of shower drains", (TotDWHRSysShowers[3] * 100 / TotShowersServed[3]) )
         else  Format( "Heat being recovered from %.0f% of shower drains", (TotDWHRSysShowers[3] * 100 / TotShowersServed[3]) )
         endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif  }
   ;      if (IfValidAnd( DHWSysRef[3]:CentralDHW > 0 )==0)
   ;      then  ; non-central MFam
   ;      else
   ;            "Message describing central DHWSys drain water heat recovery"
   ;      endif  }

   "Set DwellUnitType:DWHRSysConfigDescrip[3]"      DwellUnitType:DWHRSysConfigDescrip[3]  = {
         if (NumDWHRSysRefs[3] < 1) then  UNDEFINED
         else  "RTF\DWHX_Config.rtf"  endif  }
END
;*************************************************************************  - SAC 1/6/19
RULELIST "ProposedInput_MFam_DWHRSys_System4" 0 0 0 0
   "Set DwellUnitType:AllowShowerDWHR[4]"    DwellUnitType:AllowShowerDWHR[4]  =    ; SAC 4/4/19 - flag indicating shower-side DWHR allowed (=> not served by central system serving more than 8 units)
      {  if (IfValidAnd( DHWSysRef[4]:CentralDHW > 0 ) .AND. IfValidAnd( DHWSysRef[4]:NumDUsServed > 8 ))
         then  0  else  1  endif  }

      ; DwellUnitType:DWHRSysRef<1-6>[4],                 Default,   0,    1,   1,    1,  1,  1 BEMP_Obj,  3,  1,   1, "DWHRSys", 0, "",  1003, "DWHRSys equipment" 
      ; DwellUnitType:DWHRSysConfig<1-6>[4],              Default,   0,    1,   1,    1,  1,  1 BEMP_Sym,  3,  1,   0,                 3008, "DWHRSys Configuration" 
   "Default DwellUnitType:DWHRSysShowers1[4]"    DwellUnitType:DWHRSysShowers1[4]  = {
         if (LocalCompAssigned( DWHRSysRef1[4] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers2[4]"    DwellUnitType:DWHRSysShowers2[4]  = {
         if (LocalCompAssigned( DWHRSysRef2[4] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers3[4]"    DwellUnitType:DWHRSysShowers3[4]  = {
         if (LocalCompAssigned( DWHRSysRef3[4] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers4[4]"    DwellUnitType:DWHRSysShowers4[4]  = {
         if (LocalCompAssigned( DWHRSysRef4[4] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers5[4]"    DwellUnitType:DWHRSysShowers5[4]  = {
         if (LocalCompAssigned( DWHRSysRef5[4] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers6[4]"    DwellUnitType:DWHRSysShowers6[4]  = {
         if (LocalCompAssigned( DWHRSysRef6[4] )) then  1  else  UNDEFINED  endif  }
   "Set DwellUnitType:NumDWHRSysRefs[4] - Number of DWHRSys object references are defined"    DwellUnitType:NumDWHRSysRefs[4]  = {
           if (LocalCompAssigned( DWHRSysRef6[4] )) then  6
      else if (LocalCompAssigned( DWHRSysRef5[4] )) then  5
      else if (LocalCompAssigned( DWHRSysRef4[4] )) then  4
      else if (LocalCompAssigned( DWHRSysRef3[4] )) then  3
      else if (LocalCompAssigned( DWHRSysRef2[4] )) then  2
      else if (LocalCompAssigned( DWHRSysRef1[4] )) then  1
      else   0  endif endif endif endif endif endif  }

   ; SAC 4/1/19 - added revised DWHR inputs replacing DWHRSysConfig w/ DWHRSysTakeCold & DWHRSysFeedHeater
   ; SAC 4/4/19 - revised rules to default to no DWHRSysTakeCold* showers and 'yes' to DWHRSysFeedHeater* when served by central DHW systems serving > 8 DUs
   "Default DwellUnitType:DWHRSysTakeCold1[4]"    DwellUnitType:DWHRSysTakeCold1[4]  = {
         if (LocalCompAssigned( DWHRSysRef1[4] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[4] < 1) then  0  else  ValidOr( DWHRSysShowers1[4], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold2[4]"    DwellUnitType:DWHRSysTakeCold2[4]  = {
         if (LocalCompAssigned( DWHRSysRef2[4] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[4] < 1) then  0  else  ValidOr( DWHRSysShowers2[4], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold3[4]"    DwellUnitType:DWHRSysTakeCold3[4]  = {
         if (LocalCompAssigned( DWHRSysRef3[4] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[4] < 1) then  0  else  ValidOr( DWHRSysShowers3[4], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold4[4]"    DwellUnitType:DWHRSysTakeCold4[4]  = {
         if (LocalCompAssigned( DWHRSysRef4[4] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[4] < 1) then  0  else  ValidOr( DWHRSysShowers4[4], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold5[4]"    DwellUnitType:DWHRSysTakeCold5[4]  = {
         if (LocalCompAssigned( DWHRSysRef5[4] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[4] < 1) then  0  else  ValidOr( DWHRSysShowers5[4], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold6[4]"    DwellUnitType:DWHRSysTakeCold6[4]  = {
         if (LocalCompAssigned( DWHRSysRef6[4] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[4] < 1) then  0  else  ValidOr( DWHRSysShowers6[4], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater1[4]"  DwellUnitType:DWHRSysFeedHeater1[4]  = {
         if (LocalCompAssigned( DWHRSysRef1[4] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[4] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater2[4]"  DwellUnitType:DWHRSysFeedHeater2[4]  = {
         if (LocalCompAssigned( DWHRSysRef2[4] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[4] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater3[4]"  DwellUnitType:DWHRSysFeedHeater3[4]  = {
         if (LocalCompAssigned( DWHRSysRef3[4] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[4] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater4[4]"  DwellUnitType:DWHRSysFeedHeater4[4]  = {
         if (LocalCompAssigned( DWHRSysRef4[4] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[4] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater5[4]"  DwellUnitType:DWHRSysFeedHeater5[4]  = {
         if (LocalCompAssigned( DWHRSysRef5[4] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[4] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater6[4]"  DwellUnitType:DWHRSysFeedHeater6[4]  = {
         if (LocalCompAssigned( DWHRSysRef6[4] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[4] < 1) then  1  else  0  endif endif  }

   "Set DwellUnitType:TotDWHRSysShowers[4] - 1"     DwellUnitType:TotDWHRSysShowers[4]  = {
         if (LocalCompAssigned( DWHRSysRef1[4] )) then  DWHRSysShowers1[4]  else  0  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[4] - 2"     DwellUnitType:TotDWHRSysShowers[4]  = {
         if (LocalCompAssigned( DWHRSysRef2[4] )) then  TotDWHRSysShowers[4] + DWHRSysShowers2[4]  else  UNCHANGED  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[4] - 3"     DwellUnitType:TotDWHRSysShowers[4]  = {
         if (LocalCompAssigned( DWHRSysRef3[4] )) then  TotDWHRSysShowers[4] + DWHRSysShowers3[4]  else  UNCHANGED  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[4] - 4"     DwellUnitType:TotDWHRSysShowers[4]  = {
         if (LocalCompAssigned( DWHRSysRef4[4] )) then  TotDWHRSysShowers[4] + DWHRSysShowers4[4]  else  UNCHANGED  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[4] - 5"     DwellUnitType:TotDWHRSysShowers[4]  = {
         if (LocalCompAssigned( DWHRSysRef5[4] )) then  TotDWHRSysShowers[4] + DWHRSysShowers5[4]  else  UNCHANGED  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[4] - 6"     DwellUnitType:TotDWHRSysShowers[4]  = {
         if (LocalCompAssigned( DWHRSysRef6[4] )) then  TotDWHRSysShowers[4] + DWHRSysShowers6[4]  else  UNCHANGED  endif  }

   "Default DwellUnitType:TotShowersServed[4]"   DwellUnitType:TotShowersServed[4]  = {  max( 1, TotDWHRSysShowers[4] )  }

   "Set DwellUnitType:NumDWHRSysDevices[4] - error detection"   DwellUnitType:NumDWHRSysDevices[4]  = {
               if (NumDWHRSysRefs[4] > 0 .AND. TotShowersServed[4] < TotDWHRSysShowers[4])
               then  -1
               else   0
               endif  }
   ;      if (IfValidAnd( DHWSysRef[4]:CentralDHW > 0 )==0)
   ;      then  ; non-central MFam
   ;            if (NumDWHRSysRefs[4] > 0 .AND. TotShowersServed[4] < TotDWHRSysShowers[4])
   ;            then  -1
   ;            else   0
   ;            endif
   ;      else  ; MFam Central systems
   ;            0
   ;      endif  }
   "Set DwellUnitType:NumDWHRSysDevices[4] - DWHRSys 1"   DwellUnitType:NumDWHRSysDevices[4]  = {
         if (NumDWHRSysDevices[4] < 0 .OR. NumDWHRSysRefs[4] < 1) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef1[4]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers1[4] > 0 )) then  1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[4] - DWHRSys 2"   DwellUnitType:NumDWHRSysDevices[4]  = {
         if (NumDWHRSysDevices[4] < 0 .OR. NumDWHRSysRefs[4] < 2) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef2[4]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers2[4] > 0 )) then  NumDWHRSysDevices[4] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[4] - DWHRSys 3"   DwellUnitType:NumDWHRSysDevices[4]  = {
         if (NumDWHRSysDevices[4] < 0 .OR. NumDWHRSysRefs[4] < 3) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef3[4]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers3[4] > 0 )) then  NumDWHRSysDevices[4] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[4] - DWHRSys 4"   DwellUnitType:NumDWHRSysDevices[4]  = {
         if (NumDWHRSysDevices[4] < 0 .OR. NumDWHRSysRefs[4] < 4) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef4[4]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers4[4] > 0 )) then  NumDWHRSysDevices[4] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[4] - DWHRSys 5"   DwellUnitType:NumDWHRSysDevices[4]  = {
         if (NumDWHRSysDevices[4] < 0 .OR. NumDWHRSysRefs[4] < 5) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef5[4]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers5[4] > 0 )) then  NumDWHRSysDevices[4] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[4] - DWHRSys 6"   DwellUnitType:NumDWHRSysDevices[4]  = {
         if (NumDWHRSysDevices[4] < 0 .OR. NumDWHRSysRefs[4] < 6) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef6[4]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers6[4] > 0 )) then  NumDWHRSysDevices[4] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:DWHRSysDevicesSim[4]"     DwellUnitType:DWHRSysDevicesSim[4]  =     ; SAC 4/29/19 (tic #1056)
      {  if (NumDWHRSysDevices[4] > 0 .AND. IfValidAnd( AssignedDUFlrArea > 1 )) then  NumDWHRSysDevices[4]  else  0  endif  }

; TO DO - set based on DUT assignments ->  DwellUnitType:CntrlDWHRSysShowers,            NotInput,   0,    0,   0,    1,  1,  1 BEMP_Int,  1,   1003, "Number of showers this central DHWSys recovers heat from"
   "Set DwellUnitType:DWHRSysSummaryMsg[4]"      DwellUnitType:DWHRSysSummaryMsg[4]  = {
         if (NumDWHRSysRefs[4] < 1)
         then  "Assign DWHRSys devices below to enable shower drain heat recovery"
         else if (TotDWHRSysShowers[4] < 1)
         then  "Specify number of shower drains below to enable shower drain ht recov"
         else if (TotShowersServed[4] < TotDWHRSysShowers[4])
         ;then  Format( "ERROR:  Total showers served (%.0f) must be >= %.0f (# DWHRSys showers)", TotShowersServed[4], TotDWHRSysShowers[4] )
         then  Format( "ERROR:  Total shower drains served by this system must be >= %.0f (number of DWHRSys showers)", TotDWHRSysShowers[4] )
         else if (LocalCompAssigned( DWHRSysRef1[4] ) .AND. IfValidAnd( DWHRSysShowers1[4] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold1[4] > DWHRSysShowers1[4] ))
         then  Format( "ERROR:  System #1 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold1[4], DWHRSysShowers1[4] )
         else if (LocalCompAssigned( DWHRSysRef1[4] ) .AND. IfValidAnd( DWHRSysShowers1[4] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold1[4] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater1[4] > 0 )==0)
         then  Format( "ERROR:  System #1 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef2[4] ) .AND. IfValidAnd( DWHRSysShowers2[4] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold2[4] > DWHRSysShowers2[4] ))
         then  Format( "ERROR:  System #2 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold2[4], DWHRSysShowers2[4] )
         else if (LocalCompAssigned( DWHRSysRef2[4] ) .AND. IfValidAnd( DWHRSysShowers2[4] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold2[4] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater2[4] > 0 )==0)
         then  Format( "ERROR:  System #2 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef3[4] ) .AND. IfValidAnd( DWHRSysShowers3[4] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold3[4] > DWHRSysShowers3[4] ))
         then  Format( "ERROR:  System #3 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold3[4], DWHRSysShowers3[4] )
         else if (LocalCompAssigned( DWHRSysRef3[4] ) .AND. IfValidAnd( DWHRSysShowers3[4] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold3[4] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater3[4] > 0 )==0)
         then  Format( "ERROR:  System #3 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef4[4] ) .AND. IfValidAnd( DWHRSysShowers4[4] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold4[4] > DWHRSysShowers4[4] ))
         then  Format( "ERROR:  System #4 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold4[4], DWHRSysShowers4[4] )
         else if (LocalCompAssigned( DWHRSysRef4[4] ) .AND. IfValidAnd( DWHRSysShowers4[4] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold4[4] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater4[4] > 0 )==0)
         then  Format( "ERROR:  System #4 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef5[4] ) .AND. IfValidAnd( DWHRSysShowers5[4] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold5[4] > DWHRSysShowers5[4] ))
         then  Format( "ERROR:  System #5 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold5[4], DWHRSysShowers5[4] )
         else if (LocalCompAssigned( DWHRSysRef5[4] ) .AND. IfValidAnd( DWHRSysShowers5[4] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold5[4] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater5[4] > 0 )==0)
         then  Format( "ERROR:  System #5 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef6[4] ) .AND. IfValidAnd( DWHRSysShowers6[4] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold6[4] > DWHRSysShowers6[4] ))
         then  Format( "ERROR:  System #6 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold6[4], DWHRSysShowers6[4] )
         else if (LocalCompAssigned( DWHRSysRef6[4] ) .AND. IfValidAnd( DWHRSysShowers6[4] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold6[4] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater6[4] > 0 )==0)
         then  Format( "ERROR:  System #6 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if ((TotDWHRSysShowers[4] / TotShowersServed[4]) <= 0.2)
         then  Format( "Heat being recovered from %.1f% of shower drains", (TotDWHRSysShowers[4] * 100 / TotShowersServed[4]) )
         else  Format( "Heat being recovered from %.0f% of shower drains", (TotDWHRSysShowers[4] * 100 / TotShowersServed[4]) )
         endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif  }
   ;      if (IfValidAnd( DHWSysRef[4]:CentralDHW > 0 )==0)
   ;      then  ; non-central MFam
   ;      else
   ;            "Message describing central DHWSys drain water heat recovery"
   ;      endif  }

   "Set DwellUnitType:DWHRSysConfigDescrip[4]"      DwellUnitType:DWHRSysConfigDescrip[4]  = {
         if (NumDWHRSysRefs[4] < 1) then  UNDEFINED
         else  "RTF\DWHX_Config.rtf"  endif  }
END
;*************************************************************************  - SAC 1/6/19
RULELIST "ProposedInput_MFam_DWHRSys_System5" 0 0 0 0
   "Set DwellUnitType:AllowShowerDWHR[5]"    DwellUnitType:AllowShowerDWHR[5]  =    ; SAC 4/4/19 - flag indicating shower-side DWHR allowed (=> not served by central system serving more than 8 units)
      {  if (IfValidAnd( DHWSysRef[5]:CentralDHW > 0 ) .AND. IfValidAnd( DHWSysRef[5]:NumDUsServed > 8 ))
         then  0  else  1  endif  }

      ; DwellUnitType:DWHRSysRef<1-6>[5],                 Default,   0,    1,   1,    1,  1,  1 BEMP_Obj,  3,  1,   1, "DWHRSys", 0, "",  1003, "DWHRSys equipment" 
      ; DwellUnitType:DWHRSysConfig<1-6>[5],              Default,   0,    1,   1,    1,  1,  1 BEMP_Sym,  3,  1,   0,                 3008, "DWHRSys Configuration" 
   "Default DwellUnitType:DWHRSysShowers1[5]"    DwellUnitType:DWHRSysShowers1[5]  = {
         if (LocalCompAssigned( DWHRSysRef1[5] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers2[5]"    DwellUnitType:DWHRSysShowers2[5]  = {
         if (LocalCompAssigned( DWHRSysRef2[5] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers3[5]"    DwellUnitType:DWHRSysShowers3[5]  = {
         if (LocalCompAssigned( DWHRSysRef3[5] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers4[5]"    DwellUnitType:DWHRSysShowers4[5]  = {
         if (LocalCompAssigned( DWHRSysRef4[5] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers5[5]"    DwellUnitType:DWHRSysShowers5[5]  = {
         if (LocalCompAssigned( DWHRSysRef5[5] )) then  1  else  UNDEFINED  endif  }
   "Default DwellUnitType:DWHRSysShowers6[5]"    DwellUnitType:DWHRSysShowers6[5]  = {
         if (LocalCompAssigned( DWHRSysRef6[5] )) then  1  else  UNDEFINED  endif  }
   "Set DwellUnitType:NumDWHRSysRefs[5] - Number of DWHRSys object references are defined"    DwellUnitType:NumDWHRSysRefs[5]  = {
           if (LocalCompAssigned( DWHRSysRef6[5] )) then  6
      else if (LocalCompAssigned( DWHRSysRef5[5] )) then  5
      else if (LocalCompAssigned( DWHRSysRef4[5] )) then  4
      else if (LocalCompAssigned( DWHRSysRef3[5] )) then  3
      else if (LocalCompAssigned( DWHRSysRef2[5] )) then  2
      else if (LocalCompAssigned( DWHRSysRef1[5] )) then  1
      else   0  endif endif endif endif endif endif  }

   ; SAC 4/1/19 - added revised DWHR inputs replacing DWHRSysConfig w/ DWHRSysTakeCold & DWHRSysFeedHeater
   ; SAC 4/4/19 - revised rules to default to no DWHRSysTakeCold* showers and 'yes' to DWHRSysFeedHeater* when served by central DHW systems serving > 8 DUs
   "Default DwellUnitType:DWHRSysTakeCold1[5]"    DwellUnitType:DWHRSysTakeCold1[5]  = {
         if (LocalCompAssigned( DWHRSysRef1[5] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[5] < 1) then  0  else  ValidOr( DWHRSysShowers1[5], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold2[5]"    DwellUnitType:DWHRSysTakeCold2[5]  = {
         if (LocalCompAssigned( DWHRSysRef2[5] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[5] < 1) then  0  else  ValidOr( DWHRSysShowers2[5], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold3[5]"    DwellUnitType:DWHRSysTakeCold3[5]  = {
         if (LocalCompAssigned( DWHRSysRef3[5] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[5] < 1) then  0  else  ValidOr( DWHRSysShowers3[5], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold4[5]"    DwellUnitType:DWHRSysTakeCold4[5]  = {
         if (LocalCompAssigned( DWHRSysRef4[5] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[5] < 1) then  0  else  ValidOr( DWHRSysShowers4[5], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold5[5]"    DwellUnitType:DWHRSysTakeCold5[5]  = {
         if (LocalCompAssigned( DWHRSysRef5[5] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[5] < 1) then  0  else  ValidOr( DWHRSysShowers5[5], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysTakeCold6[5]"    DwellUnitType:DWHRSysTakeCold6[5]  = {
         if (LocalCompAssigned( DWHRSysRef6[5] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[5] < 1) then  0  else  ValidOr( DWHRSysShowers6[5], 0 )  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater1[5]"  DwellUnitType:DWHRSysFeedHeater1[5]  = {
         if (LocalCompAssigned( DWHRSysRef1[5] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[5] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater2[5]"  DwellUnitType:DWHRSysFeedHeater2[5]  = {
         if (LocalCompAssigned( DWHRSysRef2[5] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[5] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater3[5]"  DwellUnitType:DWHRSysFeedHeater3[5]  = {
         if (LocalCompAssigned( DWHRSysRef3[5] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[5] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater4[5]"  DwellUnitType:DWHRSysFeedHeater4[5]  = {
         if (LocalCompAssigned( DWHRSysRef4[5] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[5] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater5[5]"  DwellUnitType:DWHRSysFeedHeater5[5]  = {
         if (LocalCompAssigned( DWHRSysRef5[5] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[5] < 1) then  1  else  0  endif endif  }
   "Default DwellUnitType:DWHRSysFeedHeater6[5]"  DwellUnitType:DWHRSysFeedHeater6[5]  = {
         if (LocalCompAssigned( DWHRSysRef6[5] ) < 1) then  UNDEFINED
         else if (AllowShowerDWHR[5] < 1) then  1  else  0  endif endif  }

   "Set DwellUnitType:TotDWHRSysShowers[5] - 1"     DwellUnitType:TotDWHRSysShowers[5]  = {
         if (LocalCompAssigned( DWHRSysRef1[5] )) then  DWHRSysShowers1[5]  else  0  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[5] - 2"     DwellUnitType:TotDWHRSysShowers[5]  = {
         if (LocalCompAssigned( DWHRSysRef2[5] )) then  TotDWHRSysShowers[5] + DWHRSysShowers2[5]  else  UNCHANGED  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[5] - 3"     DwellUnitType:TotDWHRSysShowers[5]  = {
         if (LocalCompAssigned( DWHRSysRef3[5] )) then  TotDWHRSysShowers[5] + DWHRSysShowers3[5]  else  UNCHANGED  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[5] - 4"     DwellUnitType:TotDWHRSysShowers[5]  = {
         if (LocalCompAssigned( DWHRSysRef4[5] )) then  TotDWHRSysShowers[5] + DWHRSysShowers4[5]  else  UNCHANGED  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[5] - 5"     DwellUnitType:TotDWHRSysShowers[5]  = {
         if (LocalCompAssigned( DWHRSysRef5[5] )) then  TotDWHRSysShowers[5] + DWHRSysShowers5[5]  else  UNCHANGED  endif  }
   "Set DwellUnitType:TotDWHRSysShowers[5] - 6"     DwellUnitType:TotDWHRSysShowers[5]  = {
         if (LocalCompAssigned( DWHRSysRef6[5] )) then  TotDWHRSysShowers[5] + DWHRSysShowers6[5]  else  UNCHANGED  endif  }

   "Default DwellUnitType:TotShowersServed[5]"   DwellUnitType:TotShowersServed[5]  = {  max( 1, TotDWHRSysShowers[5] )  }

   "Set DwellUnitType:NumDWHRSysDevices[5] - error detection"   DwellUnitType:NumDWHRSysDevices[5]  = {
               if (NumDWHRSysRefs[5] > 0 .AND. TotShowersServed[5] < TotDWHRSysShowers[5])
               then  -1
               else   0
               endif  }
   ;      if (IfValidAnd( DHWSysRef[5]:CentralDHW > 0 )==0)
   ;      then  ; non-central MFam
   ;            if (NumDWHRSysRefs[5] > 0 .AND. TotShowersServed[5] < TotDWHRSysShowers[5])
   ;            then  -1
   ;            else   0
   ;            endif
   ;      else  ; MFam Central systems
   ;            0
   ;      endif  }
   "Set DwellUnitType:NumDWHRSysDevices[5] - DWHRSys 1"   DwellUnitType:NumDWHRSysDevices[5]  = {
         if (NumDWHRSysDevices[5] < 0 .OR. NumDWHRSysRefs[5] < 1) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef1[5]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers1[5] > 0 )) then  1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[5] - DWHRSys 2"   DwellUnitType:NumDWHRSysDevices[5]  = {
         if (NumDWHRSysDevices[5] < 0 .OR. NumDWHRSysRefs[5] < 2) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef2[5]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers2[5] > 0 )) then  NumDWHRSysDevices[5] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[5] - DWHRSys 3"   DwellUnitType:NumDWHRSysDevices[5]  = {
         if (NumDWHRSysDevices[5] < 0 .OR. NumDWHRSysRefs[5] < 3) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef3[5]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers3[5] > 0 )) then  NumDWHRSysDevices[5] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[5] - DWHRSys 4"   DwellUnitType:NumDWHRSysDevices[5]  = {
         if (NumDWHRSysDevices[5] < 0 .OR. NumDWHRSysRefs[5] < 4) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef4[5]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers4[5] > 0 )) then  NumDWHRSysDevices[5] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[5] - DWHRSys 5"   DwellUnitType:NumDWHRSysDevices[5]  = {
         if (NumDWHRSysDevices[5] < 0 .OR. NumDWHRSysRefs[5] < 5) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef5[5]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers5[5] > 0 )) then  NumDWHRSysDevices[5] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:NumDWHRSysDevices[5] - DWHRSys 6"   DwellUnitType:NumDWHRSysDevices[5]  = {
         if (NumDWHRSysDevices[5] < 0 .OR. NumDWHRSysRefs[5] < 6) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef6[5]:CSARatedEff > 0 ) .AND. IfValidAnd( DWHRSysShowers6[5] > 0 )) then  NumDWHRSysDevices[5] + 1
         else  UNCHANGED  endif endif  }
   "Set DwellUnitType:DWHRSysDevicesSim[5]"     DwellUnitType:DWHRSysDevicesSim[5]  =     ; SAC 4/29/19 (tic #1056)
      {  if (NumDWHRSysDevices[5] > 0 .AND. IfValidAnd( AssignedDUFlrArea > 1 )) then  NumDWHRSysDevices[5]  else  0  endif  }

; TO DO - set based on DUT assignments ->  DwellUnitType:CntrlDWHRSysShowers,            NotInput,   0,    0,   0,    1,  1,  1 BEMP_Int,  1,   1003, "Number of showers this central DHWSys recovers heat from"
   "Set DwellUnitType:DWHRSysSummaryMsg[5]"      DwellUnitType:DWHRSysSummaryMsg[5]  = {
         if (NumDWHRSysRefs[5] < 1)
         then  "Assign DWHRSys devices below to enable shower drain heat recovery"
         else if (TotDWHRSysShowers[5] < 1)
         then  "Specify number of shower drains below to enable shower drain ht recov"
         else if (TotShowersServed[5] < TotDWHRSysShowers[5])
         ;then  Format( "ERROR:  Total showers served (%.0f) must be >= %.0f (# DWHRSys showers)", TotShowersServed[5], TotDWHRSysShowers[5] )
         then  Format( "ERROR:  Total shower drains served by this system must be >= %.0f (number of DWHRSys showers)", TotDWHRSysShowers[5] )
         else if (LocalCompAssigned( DWHRSysRef1[5] ) .AND. IfValidAnd( DWHRSysShowers1[5] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold1[5] > DWHRSysShowers1[5] ))
         then  Format( "ERROR:  System #1 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold1[5], DWHRSysShowers1[5] )
         else if (LocalCompAssigned( DWHRSysRef1[5] ) .AND. IfValidAnd( DWHRSysShowers1[5] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold1[5] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater1[5] > 0 )==0)
         then  Format( "ERROR:  System #1 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef2[5] ) .AND. IfValidAnd( DWHRSysShowers2[5] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold2[5] > DWHRSysShowers2[5] ))
         then  Format( "ERROR:  System #2 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold2[5], DWHRSysShowers2[5] )
         else if (LocalCompAssigned( DWHRSysRef2[5] ) .AND. IfValidAnd( DWHRSysShowers2[5] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold2[5] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater2[5] > 0 )==0)
         then  Format( "ERROR:  System #2 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef3[5] ) .AND. IfValidAnd( DWHRSysShowers3[5] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold3[5] > DWHRSysShowers3[5] ))
         then  Format( "ERROR:  System #3 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold3[5], DWHRSysShowers3[5] )
         else if (LocalCompAssigned( DWHRSysRef3[5] ) .AND. IfValidAnd( DWHRSysShowers3[5] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold3[5] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater3[5] > 0 )==0)
         then  Format( "ERROR:  System #3 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef4[5] ) .AND. IfValidAnd( DWHRSysShowers4[5] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold4[5] > DWHRSysShowers4[5] ))
         then  Format( "ERROR:  System #4 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold4[5], DWHRSysShowers4[5] )
         else if (LocalCompAssigned( DWHRSysRef4[5] ) .AND. IfValidAnd( DWHRSysShowers4[5] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold4[5] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater4[5] > 0 )==0)
         then  Format( "ERROR:  System #4 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef5[5] ) .AND. IfValidAnd( DWHRSysShowers5[5] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold5[5] > DWHRSysShowers5[5] ))
         then  Format( "ERROR:  System #5 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold5[5], DWHRSysShowers5[5] )
         else if (LocalCompAssigned( DWHRSysRef5[5] ) .AND. IfValidAnd( DWHRSysShowers5[5] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold5[5] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater5[5] > 0 )==0)
         then  Format( "ERROR:  System #5 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef6[5] ) .AND. IfValidAnd( DWHRSysShowers6[5] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold6[5] > DWHRSysShowers6[5] ))
         then  Format( "ERROR:  System #6 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold6[5], DWHRSysShowers6[5] )
         else if (LocalCompAssigned( DWHRSysRef6[5] ) .AND. IfValidAnd( DWHRSysShowers6[5] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold6[5] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater6[5] > 0 )==0)
         then  Format( "ERROR:  System #6 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if ((TotDWHRSysShowers[5] / TotShowersServed[5]) <= 0.2)
         then  Format( "Heat being recovered from %.1f% of shower drains", (TotDWHRSysShowers[5] * 100 / TotShowersServed[5]) )
         else  Format( "Heat being recovered from %.0f% of shower drains", (TotDWHRSysShowers[5] * 100 / TotShowersServed[5]) )
         endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif  }
   ;      if (IfValidAnd( DHWSysRef[5]:CentralDHW > 0 )==0)
   ;      then  ; non-central MFam
   ;      else
   ;            "Message describing central DHWSys drain water heat recovery"
   ;      endif  }

   "Set DwellUnitType:DWHRSysConfigDescrip[5]"      DwellUnitType:DWHRSysConfigDescrip[5]  = {
         if (NumDWHRSysRefs[5] < 1) then  UNDEFINED
         else  "RTF\DWHX_Config.rtf"  endif  }
END
;*************************************************************************

;*************************************************************************
; SAC 1/12/19 - replaced original DWHR default/std design rules (above) w/ updated version for 2019
RULELIST  "ForceDefault_ShowerDrainHeatRecov_MFam" 1 0 0 1
   "Blast Proj:ShwrDRAINHREFF"    Proj:ShwrDRAINHREFF  = {  0  }

   "Setup std design DwellUnitType:DHWSysRef[1]"   DwellUnitType:Action  = {
         if (NumDHWSysTypes >= 1 .AND. IfValidAnd( DHWSysRef[1]:IsStdDesignElec > 0 ) .AND. NumAssigningDUs > 0)
         then  EvalRulelist( "ForceDefault_ShowerDrainHeatRecov_MFam_DUT1", 1 )  else  UNCHANGED  endif  }
   "Setup std design DwellUnitType:DHWSysRef[2]"   DwellUnitType:Action  = {
         if (NumDHWSysTypes >= 2 .AND. IfValidAnd( DHWSysRef[2]:IsStdDesignElec > 0 ) .AND. NumAssigningDUs > 0)
         then  EvalRulelist( "ForceDefault_ShowerDrainHeatRecov_MFam_DUT2", 1 )  else  UNCHANGED  endif  }
   "Setup std design DwellUnitType:DHWSysRef[3]"   DwellUnitType:Action  = {
         if (NumDHWSysTypes >= 3 .AND. IfValidAnd( DHWSysRef[3]:IsStdDesignElec > 0 ) .AND. NumAssigningDUs > 0)
         then  EvalRulelist( "ForceDefault_ShowerDrainHeatRecov_MFam_DUT3", 1 )  else  UNCHANGED  endif  }
   "Setup std design DwellUnitType:DHWSysRef[4]"   DwellUnitType:Action  = {
         if (NumDHWSysTypes >= 4 .AND. IfValidAnd( DHWSysRef[4]:IsStdDesignElec > 0 ) .AND. NumAssigningDUs > 0)
         then  EvalRulelist( "ForceDefault_ShowerDrainHeatRecov_MFam_DUT4", 1 )  else  UNCHANGED  endif  }
   "Setup std design DwellUnitType:DHWSysRef[5]"   DwellUnitType:Action  = {
         if (NumDHWSysTypes >= 5 .AND. IfValidAnd( DHWSysRef[5]:IsStdDesignElec > 0 ) .AND. NumAssigningDUs > 0)
         then  EvalRulelist( "ForceDefault_ShowerDrainHeatRecov_MFam_DUT5", 1 )  else  UNCHANGED  endif  }
END
RULELIST  "ForceDefault_ShowerDrainHeatRecov_MFam_DUT1" 1 0 1 1
   ; incorporated StdDesignDrnWtrHtRecYear into table look-ups - SAC 01/22/21
   "Set std design DwellUnitType:TotShowersServed[1]"    DwellUnitType:TotShowersServed[1]  = {
         1 + int( (ValidOr( NumBedrooms, 1 )+1)/2.5 )  }
   "Set std design DwellUnitType:DWHRSysRef1[1]"      DwellUnitType:DWHRSysRef1[1]     = {
         if (DHWSysRef[1]:CentralDHW)
         then  Proj:StdElecDWHRSysRef[2]
         else  Proj:StdElecDWHRSysRef[1]  endif  }
   "Set std design DwellUnitType:DWHRSysShowers1[1]"  DwellUnitType:DWHRSysShowers1[1] = {
         if (DHWSysRef[1]:CentralDHW)
         then  TotShowersServed[1]
         else  TotShowersServed[1] * T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovShwrSrvd( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr ) / 100  endif  }
;   "Set std design DwellUnitType:DWHRSysConfig1[1]"   DwellUnitType:DWHRSysConfig1[1]  = {
;         if (DHWSysRef[1]:CentralDHW)
;         then  "Equal Flow"
;         else  T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovConfig( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr )  endif  }
   ; SAC 4/1/19 - replaced above Config rule to following setting newer inputs
   "Set std design DwellUnitType:DWHRSysTakeCold1[1]"  DwellUnitType:DWHRSysTakeCold1[1] = {
         if (DHWSysRef[1]:CentralDHW)
         then  if (DHWSysRef[1]:NumDUsServed > 8) then  0  else  DWHRSysShowers1[1]  endif
         else  switch (T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovConfig( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr ))
                  case  "Equal Flow"              :  DWHRSysShowers1[1]
                  case  "Unequal - Water Heater"  :  0
                  case  "Unequal - Shower"        :  DWHRSysShowers1[1]
                  default  :  0
               endswitch  endif  }
   "Set std design DwellUnitType:DWHRSysFeedHeater1[1]"  DwellUnitType:DWHRSysFeedHeater1[1] = {
         if (DHWSysRef[1]:CentralDHW)
         then  1
         else  switch (T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovConfig( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr ))
                  case  "Equal Flow"              :  1
                  case  "Unequal - Water Heater"  :  1
                  case  "Unequal - Shower"        :  0
                  default  :  0
               endswitch  endif  }
   "Blast std design DwellUnitType:DWHRSysRef2[1]"     DwellUnitType:DWHRSysRef2[1]  = {  UNDEFINED  }
   "Blast std design DwellUnitType:DWHRSysRef3[1]"     DwellUnitType:DWHRSysRef3[1]  = {  UNDEFINED  }
   "Blast std design DwellUnitType:DWHRSysRef4[1]"     DwellUnitType:DWHRSysRef4[1]  = {  UNDEFINED  }
   "Blast std design DwellUnitType:DWHRSysRef5[1]"     DwellUnitType:DWHRSysRef5[1]  = {  UNDEFINED  }
   "Blast std design DwellUnitType:DWHRSysRef6[1]"     DwellUnitType:DWHRSysRef6[1]  = {  UNDEFINED  }
END
RULELIST  "ForceDefault_ShowerDrainHeatRecov_MFam_DUT2" 1 0 1 1
   ; incorporated StdDesignDrnWtrHtRecYear into table look-ups - SAC 01/22/21
   "Set std design DwellUnitType:TotShowersServed[2]"    DwellUnitType:TotShowersServed[2]  = {
         1 + int( (ValidOr( NumBedrooms, 1 )+1)/2.5 )  }
   "Set std design DwellUnitType:DWHRSysRef1[2]"      DwellUnitType:DWHRSysRef1[2]     = {
         if (DHWSysRef[2]:CentralDHW)
         then  Proj:StdElecDWHRSysRef[2]
         else  Proj:StdElecDWHRSysRef[1]  endif  }
   "Set std design DwellUnitType:DWHRSysShowers1[2]"  DwellUnitType:DWHRSysShowers1[2] = {
         if (DHWSysRef[2]:CentralDHW)
         then  TotShowersServed[2]
         else  TotShowersServed[2] * T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovShwrSrvd( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr ) / 100  endif  }
;   "Set std design DwellUnitType:DWHRSysConfig1[2]"   DwellUnitType:DWHRSysConfig1[2]  = {
;         if (DHWSysRef[2]:CentralDHW)
;         then  "Equal Flow"
;         else  T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovConfig( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr )  endif  }
   ; SAC 4/1/19 - replaced above Config rule to following setting newer inputs
   "Set std design DwellUnitType:DWHRSysTakeCold1[2]"  DwellUnitType:DWHRSysTakeCold1[2] = {
         if (DHWSysRef[2]:CentralDHW)
         then  if (DHWSysRef[2]:NumDUsServed > 8) then  0  else  DWHRSysShowers1[2]  endif
         else  switch (T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovConfig( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr ))
                  case  "Equal Flow"              :  DWHRSysShowers1[2]
                  case  "Unequal - Water Heater"  :  0
                  case  "Unequal - Shower"        :  DWHRSysShowers1[2]
                  default  :  0
               endswitch  endif  }
   "Set std design DwellUnitType:DWHRSysFeedHeater1[2]"  DwellUnitType:DWHRSysFeedHeater1[2] = {
         if (DHWSysRef[2]:CentralDHW)
         then  1
         else  switch (T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovConfig( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr ))
                  case  "Equal Flow"              :  1
                  case  "Unequal - Water Heater"  :  1
                  case  "Unequal - Shower"        :  0
                  default  :  0
               endswitch  endif  }
   "Blast std design DwellUnitType:DWHRSysRef2[2]"     DwellUnitType:DWHRSysRef2[2]  = {  UNDEFINED  }
   "Blast std design DwellUnitType:DWHRSysRef3[2]"     DwellUnitType:DWHRSysRef3[2]  = {  UNDEFINED  }
   "Blast std design DwellUnitType:DWHRSysRef4[2]"     DwellUnitType:DWHRSysRef4[2]  = {  UNDEFINED  }
   "Blast std design DwellUnitType:DWHRSysRef5[2]"     DwellUnitType:DWHRSysRef5[2]  = {  UNDEFINED  }
   "Blast std design DwellUnitType:DWHRSysRef6[2]"     DwellUnitType:DWHRSysRef6[2]  = {  UNDEFINED  }
END
RULELIST  "ForceDefault_ShowerDrainHeatRecov_MFam_DUT3" 1 0 1 1
   ; incorporated StdDesignDrnWtrHtRecYear into table look-ups - SAC 01/22/21
   "Set std design DwellUnitType:TotShowersServed[3]"    DwellUnitType:TotShowersServed[3]  = {
         1 + int( (ValidOr( NumBedrooms, 1 )+1)/2.5 )  }
   "Set std design DwellUnitType:DWHRSysRef1[3]"      DwellUnitType:DWHRSysRef1[3]     = {
         if (DHWSysRef[3]:CentralDHW)
         then  Proj:StdElecDWHRSysRef[2]
         else  Proj:StdElecDWHRSysRef[1]  endif  }
   "Set std design DwellUnitType:DWHRSysShowers1[3]"  DwellUnitType:DWHRSysShowers1[3] = {
         if (DHWSysRef[3]:CentralDHW)
         then  TotShowersServed[3]
         else  TotShowersServed[3] * T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovShwrSrvd( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr ) / 100  endif  }
;   "Set std design DwellUnitType:DWHRSysConfig1[3]"   DwellUnitType:DWHRSysConfig1[3]  = {
;         if (DHWSysRef[3]:CentralDHW)
;         then  "Equal Flow"
;         else  T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovConfig( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr )  endif  }
   ; SAC 4/1/19 - replaced above Config rule to following setting newer inputs
   "Set std design DwellUnitType:DWHRSysTakeCold1[3]"  DwellUnitType:DWHRSysTakeCold1[3] = {
         if (DHWSysRef[3]:CentralDHW)
         then  if (DHWSysRef[3]:NumDUsServed > 8) then  0  else  DWHRSysShowers1[3]  endif
         else  switch (T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovConfig( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr ))
                  case  "Equal Flow"              :  DWHRSysShowers1[3]
                  case  "Unequal - Water Heater"  :  0
                  case  "Unequal - Shower"        :  DWHRSysShowers1[3]
                  default  :  0
               endswitch  endif  }
   "Set std design DwellUnitType:DWHRSysFeedHeater1[3]"  DwellUnitType:DWHRSysFeedHeater1[3] = {
         if (DHWSysRef[3]:CentralDHW)
         then  1
         else  switch (T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovConfig( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr ))
                  case  "Equal Flow"              :  1
                  case  "Unequal - Water Heater"  :  1
                  case  "Unequal - Shower"        :  0
                  default  :  0
               endswitch  endif  }
   "Blast std design DwellUnitType:DWHRSysRef2[3]"     DwellUnitType:DWHRSysRef2[3]  = {  UNDEFINED  }
   "Blast std design DwellUnitType:DWHRSysRef3[3]"     DwellUnitType:DWHRSysRef3[3]  = {  UNDEFINED  }
   "Blast std design DwellUnitType:DWHRSysRef4[3]"     DwellUnitType:DWHRSysRef4[3]  = {  UNDEFINED  }
   "Blast std design DwellUnitType:DWHRSysRef5[3]"     DwellUnitType:DWHRSysRef5[3]  = {  UNDEFINED  }
   "Blast std design DwellUnitType:DWHRSysRef6[3]"     DwellUnitType:DWHRSysRef6[3]  = {  UNDEFINED  }
END
RULELIST  "ForceDefault_ShowerDrainHeatRecov_MFam_DUT4" 1 0 1 1
   ; incorporated StdDesignDrnWtrHtRecYear into table look-ups - SAC 01/22/21
   "Set std design DwellUnitType:TotShowersServed[4]"    DwellUnitType:TotShowersServed[4]  = {
         1 + int( (ValidOr( NumBedrooms, 1 )+1)/2.5 )  }
   "Set std design DwellUnitType:DWHRSysRef1[4]"      DwellUnitType:DWHRSysRef1[4]     = {
         if (DHWSysRef[4]:CentralDHW)
         then  Proj:StdElecDWHRSysRef[2]
         else  Proj:StdElecDWHRSysRef[1]  endif  }
   "Set std design DwellUnitType:DWHRSysShowers1[4]"  DwellUnitType:DWHRSysShowers1[4] = {
         if (DHWSysRef[4]:CentralDHW)
         then  TotShowersServed[4]
         else  TotShowersServed[4] * T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovShwrSrvd( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr ) / 100  endif  }
;   "Set std design DwellUnitType:DWHRSysConfig1[4]"   DwellUnitType:DWHRSysConfig1[4]  = {
;         if (DHWSysRef[4]:CentralDHW)
;         then  "Equal Flow"
;         else  T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovConfig( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr )  endif  }
   ; SAC 4/1/19 - replaced above Config rule to following setting newer inputs
   "Set std design DwellUnitType:DWHRSysTakeCold1[4]"  DwellUnitType:DWHRSysTakeCold1[4] = {
         if (DHWSysRef[4]:CentralDHW)
         then  if (DHWSysRef[4]:NumDUsServed > 8) then  0  else  DWHRSysShowers1[4]  endif
         else  switch (T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovConfig( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr ))
                  case  "Equal Flow"              :  DWHRSysShowers1[4]
                  case  "Unequal - Water Heater"  :  0
                  case  "Unequal - Shower"        :  DWHRSysShowers1[4]
                  default  :  0
               endswitch  endif  }
   "Set std design DwellUnitType:DWHRSysFeedHeater1[4]"  DwellUnitType:DWHRSysFeedHeater1[4] = {
         if (DHWSysRef[4]:CentralDHW)
         then  1
         else  switch (T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovConfig( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr ))
                  case  "Equal Flow"              :  1
                  case  "Unequal - Water Heater"  :  1
                  case  "Unequal - Shower"        :  0
                  default  :  0
               endswitch  endif  }
   "Blast std design DwellUnitType:DWHRSysRef2[4]"     DwellUnitType:DWHRSysRef2[4]  = {  UNDEFINED  }
   "Blast std design DwellUnitType:DWHRSysRef3[4]"     DwellUnitType:DWHRSysRef3[4]  = {  UNDEFINED  }
   "Blast std design DwellUnitType:DWHRSysRef4[4]"     DwellUnitType:DWHRSysRef4[4]  = {  UNDEFINED  }
   "Blast std design DwellUnitType:DWHRSysRef5[4]"     DwellUnitType:DWHRSysRef5[4]  = {  UNDEFINED  }
   "Blast std design DwellUnitType:DWHRSysRef6[4]"     DwellUnitType:DWHRSysRef6[4]  = {  UNDEFINED  }
END
RULELIST  "ForceDefault_ShowerDrainHeatRecov_MFam_DUT5" 1 0 1 1
   ; incorporated StdDesignDrnWtrHtRecYear into table look-ups - SAC 01/22/21
   "Set std design DwellUnitType:TotShowersServed[5]"    DwellUnitType:TotShowersServed[5]  = {
         1 + int( (ValidOr( NumBedrooms, 1 )+1)/2.5 )  }
   "Set std design DwellUnitType:DWHRSysRef1[5]"      DwellUnitType:DWHRSysRef1[5]     = {
         if (DHWSysRef[5]:CentralDHW)
         then  Proj:StdElecDWHRSysRef[2]
         else  Proj:StdElecDWHRSysRef[1]  endif  }
   "Set std design DwellUnitType:DWHRSysShowers1[5]"  DwellUnitType:DWHRSysShowers1[5] = {
         if (DHWSysRef[5]:CentralDHW)
         then  TotShowersServed[5]
         else  TotShowersServed[5] * T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovShwrSrvd( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr ) / 100  endif  }
;   "Set std design DwellUnitType:DWHRSysConfig1[5]"   DwellUnitType:DWHRSysConfig1[5]  = {
;         if (DHWSysRef[5]:CentralDHW)
;         then  "Equal Flow"
;         else  T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovConfig( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr )  endif  }
   ; SAC 4/1/19 - replaced above Config rule to following setting newer inputs
   "Set std design DwellUnitType:DWHRSysTakeCold1[5]"  DwellUnitType:DWHRSysTakeCold1[5] = {
         if (DHWSysRef[5]:CentralDHW)
         then  if (DHWSysRef[5]:NumDUsServed > 8) then  0  else  DWHRSysShowers1[5]  endif
         else  switch (T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovConfig( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr ))
                  case  "Equal Flow"              :  DWHRSysShowers1[5]
                  case  "Unequal - Water Heater"  :  0
                  case  "Unequal - Shower"        :  DWHRSysShowers1[5]
                  default  :  0
               endswitch  endif  }
   "Set std design DwellUnitType:DWHRSysFeedHeater1[5]"  DwellUnitType:DWHRSysFeedHeater1[5] = {
         if (DHWSysRef[5]:CentralDHW)
         then  1
         else  switch (T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovConfig( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr ))
                  case  "Equal Flow"              :  1
                  case  "Unequal - Water Heater"  :  1
                  case  "Unequal - Shower"        :  0
                  default  :  0
               endswitch  endif  }
   "Blast std design DwellUnitType:DWHRSysRef2[5]"     DwellUnitType:DWHRSysRef2[5]  = {  UNDEFINED  }
   "Blast std design DwellUnitType:DWHRSysRef3[5]"     DwellUnitType:DWHRSysRef3[5]  = {  UNDEFINED  }
   "Blast std design DwellUnitType:DWHRSysRef4[5]"     DwellUnitType:DWHRSysRef4[5]  = {  UNDEFINED  }
   "Blast std design DwellUnitType:DWHRSysRef5[5]"     DwellUnitType:DWHRSysRef5[5]  = {  UNDEFINED  }
   "Blast std design DwellUnitType:DWHRSysRef6[5]"     DwellUnitType:DWHRSysRef6[5]  = {  UNDEFINED  }
END
;;*************************************************************************  SAC 1/12/19
;RULELIST  "Remove_ShowerDrainHeatRecov_MFam" 1 0 0 1
;   "Blast Proj:ShwrDRAINHREFF"    Proj:ShwrDRAINHREFF  = {  0  }
;   "Blast std design DwellUnitType:DHWSysRef[1]"   DwellUnitType:Action  = {
;         if (NumDHWSysTypes >= 1 .AND. IfValidAnd( DHWSysRef[1]:IsExisting < 0.5 ) .AND. NumAssigningDUs > 0)
;         then  EvalRulelist( "Blast_DwellUnitType_DWHRSysRefs_1", 1 )  else  UNCHANGED  endif  }
;   "Blast std design DwellUnitType:DHWSysRef[2]"   DwellUnitType:Action  = {
;         if (NumDHWSysTypes >= 2 .AND. IfValidAnd( DHWSysRef[2]:IsExisting < 0.5 ) .AND. NumAssigningDUs > 0)
;         then  EvalRulelist( "Blast_DwellUnitType_DWHRSysRefs_2", 1 )  else  UNCHANGED  endif  }
;   "Blast std design DwellUnitType:DHWSysRef[3]"   DwellUnitType:Action  = {
;         if (NumDHWSysTypes >= 3 .AND. IfValidAnd( DHWSysRef[3]:IsExisting < 0.5 ) .AND. NumAssigningDUs > 0)
;         then  EvalRulelist( "Blast_DwellUnitType_DWHRSysRefs_3", 1 )  else  UNCHANGED  endif  }
;   "Blast std design DwellUnitType:DHWSysRef[4]"   DwellUnitType:Action  = {
;         if (NumDHWSysTypes >= 4 .AND. IfValidAnd( DHWSysRef[4]:IsExisting < 0.5 ) .AND. NumAssigningDUs > 0)
;         then  EvalRulelist( "Blast_DwellUnitType_DWHRSysRefs_4", 1 )  else  UNCHANGED  endif  }
;   "Blast std design DwellUnitType:DHWSysRef[5]"   DwellUnitType:Action  = {
;         if (NumDHWSysTypes >= 5 .AND. IfValidAnd( DHWSysRef[5]:IsExisting < 0.5 ) .AND. NumAssigningDUs > 0)
;         then  EvalRulelist( "Blast_DwellUnitType_DWHRSysRefs_5", 1 )  else  UNCHANGED  endif  }
;END
;;*************************************************************************

;*************************************************************************  - SAC 1/12/19
RULELIST  "ForceDefault_CompactDistribution_MFam" 1 0 1 1
; SAC 3/25/19 - no longer needed now that Fixtures Served specified @ dwelling, not system, level
;   ; first make changes to individual DHWSys COmpactDistrib settings
;   "Setup std design Fixtures Servedution inputs for indiv DHWSys objects"    ResDHWSys:Action  = {
;         if (IfValidAnd( IsExisting > 0.5 ) .OR. CentralDHW) then  UNCHANGED
;         else  EvalRulelist( "ForceDefault_CompactDistribution_SFam" )  endif  }

   ; SAC 4/1/19 - std design rules for MFam CompactDistrib
   "Set std design DwellUnitType:CompactDistrib"   DwellUnitType:CompactDistrib  =              ; StdDesignCompactDistYear - SAC 01/22/21   ; StdDesignCompactDistVal - SAC 01/27/21
      {  if ( IfValidAnd( IsStdDesignElecDHW > 0 ) .OR.
              (ResProj:AllowStdDesignFuel > 0 .AND. IfValidAnd( ResProj:StdDesignCompactDistrib > 0 ) .AND.
               (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. (ResProj:SMFFollowsStdDesignFuel .AND. ResProj:RunAbbrev == "smf"))) )
         then  if (ResProj:AllowStdDesignFuel > 0 .AND. IfValidAnd( ResProj:StdDesignCompactDistrib > 0 ) .AND.
                   IfValidAnd( ResProj:StdDesignCompactDistVal > 0 ) .AND. (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. (ResProj:SMFFollowsStdDesignFuel .AND. ResProj:RunAbbrev == "smf")))
               then  switch (ResProj:StdDesignCompactDistVal)
                        case  1.0 :  "not compact"
                        case  0.7 :  "Basic Credit"
                        default   :  "Expanded Credit (HERS req'd)"
                     endswitch
               else  switch (T24RClimateZoneCodeBase:ElecDHWCompactFactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignCompactDistYear, "BldgType", Proj:BldgTypeTblStr ))
                        case  0.0 :  "not compact"    ; covers DRtg run
                        case  1.0 :  "not compact"
                        case  0.7 :  "Basic Credit"
                        default   :  "Expanded Credit (HERS req'd)"
                     endswitch
               endif
         else  T24RClimateZoneCodeBase:DHWCompactDistrib( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignCompactDistYear, "BldgType", Proj:BldgTypeTblStr )
         endif  }
   ;"Set std design DwellUnitType:UsrSpecCmpctDist"    DwellUnitType:UsrSpecCmpctDist  = 
   ;   {  if (CompactDistrib > 0) then  1  else  0  endif  }
   ; swap UsrSpecCmpctDist & CDSpecFixDists - SAC 09/29/21 (tic #1277)
   "Set std design DwellUnitType:CDSpecFixDists"      DwellUnitType:CDSpecFixDists  = 
      {  if (CompactDistrib > 0) then  0  else  1  endif  }
   "Set std design DwellUnitType:UsrCompactFactor"    DwellUnitType:UsrCompactFactor  =         ; StdDesignCompactDistYear - SAC 01/22/21   ; StdDesignCompactDistVal - SAC 01/27/21
      {  if (CDSpecFixDists > 0) then  UNDEFINED
         else if (ResProj:AllowStdDesignFuel > 0 .AND. IfValidAnd( ResProj:StdDesignCompactDistrib > 0 ) .AND.
                  IfValidAnd( ResProj:StdDesignCompactDistVal > 0 ) .AND. (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. (ResProj:SMFFollowsStdDesignFuel .AND. ResProj:RunAbbrev == "smf")))
         then  ResProj:StdDesignCompactDistVal
         else  T24RClimateZoneCodeBase:ElecDHWCompactFactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignCompactDistYear, "BldgType", Proj:BldgTypeTblStr )
         endif endif  }

;   ; then mods to DwellingUnitType data
;   "Setup std design DwellUnitType:DHWSysRef[1]:CompactDistrib"   DwellUnitType:Action  = {
;         if (NumDHWSysTypes >= 1 .AND. IfValidAnd( DHWSysRef[1]:CentralDHW = 0 ) .AND. NumAssigningDUs > 0)
;         then  EvalRulelist( "ForceDefault_CompactDistribution_MFam_DUT1", 1 )  else  UNCHANGED  endif  }
;   "Setup std design DwellUnitType:DHWSysRef[2]:CompactDistrib"   DwellUnitType:Action  = {
;         if (NumDHWSysTypes >= 2 .AND. IfValidAnd( DHWSysRef[2]:CentralDHW = 0 ) .AND. NumAssigningDUs > 0)
;         then  EvalRulelist( "ForceDefault_CompactDistribution_MFam_DUT2", 1 )  else  UNCHANGED  endif  }
;   "Setup std design DwellUnitType:DHWSysRef[3]:CompactDistrib"   DwellUnitType:Action  = {
;         if (NumDHWSysTypes >= 3 .AND. IfValidAnd( DHWSysRef[3]:CentralDHW = 0 ) .AND. NumAssigningDUs > 0)
;         then  EvalRulelist( "ForceDefault_CompactDistribution_MFam_DUT3", 1 )  else  UNCHANGED  endif  }
;   "Setup std design DwellUnitType:DHWSysRef[4]:CompactDistrib"   DwellUnitType:Action  = {
;         if (NumDHWSysTypes >= 4 .AND. IfValidAnd( DHWSysRef[4]:CentralDHW = 0 ) .AND. NumAssigningDUs > 0)
;         then  EvalRulelist( "ForceDefault_CompactDistribution_MFam_DUT4", 1 )  else  UNCHANGED  endif  }
;   "Setup std design DwellUnitType:DHWSysRef[5]:CompactDistrib"   DwellUnitType:Action  = {
;         if (NumDHWSysTypes >= 5 .AND. IfValidAnd( DHWSysRef[5]:CentralDHW = 0 ) .AND. NumAssigningDUs > 0)
;         then  EvalRulelist( "ForceDefault_CompactDistribution_MFam_DUT5", 1 )  else  UNCHANGED  endif  }
END
;RULELIST  "ForceDefault_CompactDistribution_MFam_DUT1" 1 0 1 1
;   "Set std design DwellUnitType:UserSpecCmpctDist[1]"    DwellUnitType:UserSpecCmpctDist[1]  = {
;         if (IfValidAnd( DHWSysRef[1]:CompactDistrib > 0 )) then  1  else  0  endif  }
;   "Set std design DwellUnitType:UserCompactFactor[1]"    DwellUnitType:UserCompactFactor[1]  = {
;         if (IfValidAnd( UserSpecCmpctDist[1] > 0 )==0) then  UNDEFINED
;         else if (IfValidAnd( DHWSysRef[1]:IsStdDesignElec > 0 ))
;         then  T24RClimateZoneCodeBase:ElecDHWCompactFactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
;         else  0.7  endif endif  }
;END
;RULELIST  "ForceDefault_CompactDistribution_MFam_DUT2" 1 0 1 1
;   "Set std design DwellUnitType:UserSpecCmpctDist[2]"    DwellUnitType:UserSpecCmpctDist[2]  = {
;         if (IfValidAnd( DHWSysRef[2]:CompactDistrib > 0 )) then  1  else  0  endif  }
;   "Set std design DwellUnitType:UserCompactFactor[2]"    DwellUnitType:UserCompactFactor[2]  = {
;         if (IfValidAnd( UserSpecCmpctDist[2] > 0 )==0) then  UNDEFINED
;         else if (IfValidAnd( DHWSysRef[2]:IsStdDesignElec > 0 ))
;         then  T24RClimateZoneCodeBase:ElecDHWCompactFactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
;         else  0.7  endif endif  }
;END
;RULELIST  "ForceDefault_CompactDistribution_MFam_DUT3" 1 0 1 1
;   "Set std design DwellUnitType:UserSpecCmpctDist[3]"    DwellUnitType:UserSpecCmpctDist[3]  = {
;         if (IfValidAnd( DHWSysRef[3]:CompactDistrib > 0 )) then  1  else  0  endif  }
;   "Set std design DwellUnitType:UserCompactFactor[3]"    DwellUnitType:UserCompactFactor[3]  = {
;         if (IfValidAnd( UserSpecCmpctDist[3] > 0 )==0) then  UNDEFINED
;         else if (IfValidAnd( DHWSysRef[3]:IsStdDesignElec > 0 ))
;         then  T24RClimateZoneCodeBase:ElecDHWCompactFactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
;         else  0.7  endif endif  }
;END
;RULELIST  "ForceDefault_CompactDistribution_MFam_DUT4" 1 0 1 1
;   "Set std design DwellUnitType:UserSpecCmpctDist[4]"    DwellUnitType:UserSpecCmpctDist[4]  = {
;         if (IfValidAnd( DHWSysRef[4]:CompactDistrib > 0 )) then  1  else  0  endif  }
;   "Set std design DwellUnitType:UserCompactFactor[4]"    DwellUnitType:UserCompactFactor[4]  = {
;         if (IfValidAnd( UserSpecCmpctDist[4] > 0 )==0) then  UNDEFINED
;         else if (IfValidAnd( DHWSysRef[4]:IsStdDesignElec > 0 ))
;         then  T24RClimateZoneCodeBase:ElecDHWCompactFactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
;         else  0.7  endif endif  }
;END
;RULELIST  "ForceDefault_CompactDistribution_MFam_DUT5" 1 0 1 1
;   "Set std design DwellUnitType:UserSpecCmpctDist[5]"    DwellUnitType:UserSpecCmpctDist[5]  = {
;         if (IfValidAnd( DHWSysRef[5]:CompactDistrib > 0 )) then  1  else  0  endif  }
;   "Set std design DwellUnitType:UserCompactFactor[5]"    DwellUnitType:UserCompactFactor[5]  = {
;         if (IfValidAnd( UserSpecCmpctDist[5] > 0 )==0) then  UNDEFINED
;         else if (IfValidAnd( DHWSysRef[5]:IsStdDesignElec > 0 ))
;         then  T24RClimateZoneCodeBase:ElecDHWCompactFactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
;         else  0.7  endif endif  }
;END
;;*************************************************************************  - SAC 1/12/19
;RULELIST  "Remove_CompactDistribution_MFam" 1 0 0 1
;   "Blast std design DwellUnitType:DHWSysRef[1]:CompactDistrib"   DwellUnitType:DHWSysRef[1]:CompactDistrib  = {
;         if (NumDHWSysTypes >= 1 .AND. IfValidAnd( DHWSysRef[1]:IsExisting < 0.5 ) .AND. NumAssigningDUs > 0)
;         then  0  else  UNCHANGED  endif  }
;   "Blast std design DwellUnitType:DHWSysRef[2]"   DwellUnitType:Action  = {
;         if (NumDHWSysTypes >= 2 .AND. IfValidAnd( DHWSysRef[2]:IsExisting < 0.5 ) .AND. NumAssigningDUs > 0)
;         then  0  else  UNCHANGED  endif  }
;   "Blast std design DwellUnitType:DHWSysRef[3]"   DwellUnitType:Action  = {
;         if (NumDHWSysTypes >= 3 .AND. IfValidAnd( DHWSysRef[3]:IsExisting < 0.5 ) .AND. NumAssigningDUs > 0)
;         then  0  else  UNCHANGED  endif  }
;   "Blast std design DwellUnitType:DHWSysRef[4]"   DwellUnitType:Action  = {
;         if (NumDHWSysTypes >= 4 .AND. IfValidAnd( DHWSysRef[4]:IsExisting < 0.5 ) .AND. NumAssigningDUs > 0)
;         then  0  else  UNCHANGED  endif  }
;   "Blast std design DwellUnitType:DHWSysRef[5]"   DwellUnitType:Action  = {
;         if (NumDHWSysTypes >= 5 .AND. IfValidAnd( DHWSysRef[5]:IsExisting < 0.5 ) .AND. NumAssigningDUs > 0)
;         then  0  else  UNCHANGED  endif  }
;END
;;*************************************************************************


;*************************************************************************   - SAC 02/13/21 (tic #1260 & #1220)
RULELIST  "Switch_DHWSys_CentralDHW_MFamDistType_to_CentralRecircType"  1 0 1 1
   "Post Warning if project included one of the no-longer-supported MFamDistType options"    ResDHWSys:Action =
      {  if (LocalStatus( MFamDistType ) > 5 .AND. IfValidAnd( ResProj:IsMultifamily > 0 ) .AND.
             IfValidAnd( CentralDHW > 0 ) .AND. IfValidAnd( MFamDistType > 5056 ))
         then  switch (MFamDistType)
                  case  6336 :  PostWarning( "DHWSys '%s' MFam Distribution Type 'Multi-family: Recirculation demand control' is no longer supported, switching to recirculation w/ continuous pumping.", Name )
                  case  6592 :  PostWarning( "DHWSys '%s' MFam Distribution Type 'Multi-family: Recirculating with temperature modulation' is no longer supported, switching to recirculation w/ continuous pumping.", Name )
                  case  6848 :  PostWarning( "DHWSys '%s' MFam Distribution Type 'Multi-family: Recirculating with temperature modulation and monitoring' is no longer supported, switching to recirculation w/ continuous pumping.", Name )
                  default    :  PostWarning( "DHWSys '%s' MFam Distribution Type is no longer supported, switching to recirculation w/ continuous pumping.", Name )
               endswitch
         else  UNCHANGED  endif  }
   "Hardwire ResDHWSys:CentralRecircType based on CentralDHW & MFamDistType"     ResDHWSys:CentralRecircType =
      {  if (IfValidAnd( CentralDHW > 0 )==0) then      "Non-Central"
         else if (IfValidAnd( MFamDistType > 0 )) then  "Central with Recirculation"
         else                                           "Central, no Recirculation"
         endif endif }
   "Blast ResDHWSys:CentralDHW"     ResDHWSys:CentralDHW    = {  UNDEFINED  }
   "Blast ResDHWSys:MFamDistType"   ResDHWSys:MFamDistType  = {  UNDEFINED  }
END
;*************************************************************************


;*************************************************************************
;*************************************************************************

ENDFILE

