; -------------------------------------------------------------------------
; Rules pertaining to:   Defaulting the Proposed Building Model - focusing on EAA properties
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2014, California Energy Commission
; Copyright (c) 2012-2014, Wrightsoft Corporation
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
;STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------

ENUM_PROPERTIES_VALUE   ; ensures retrieval/logic/us of enum properties assume numeric value (alternative is ENUM_PROPERTIES_STRING)

; SAC 10/24/16 - new rulelist to default EAA (existing-addition-alteration) properties
; SAC 7/20/17 - split single EAA rulelist into two - Shell & HVAC to evaluate shell before Construction defaulting and HVAC after floor area served defaulting
;*************************************************************************
RULELIST "ProposedInput_ResEAA_Shell" 0 0 0 0
;*************************************************************************
   ;--------------------------------------------------------------------
   ; ProposedInput: E+A+A Defaults and Flag Settings
   ;--------------------------------------------------------------------
	"Default ACH50 IsVerified flag"					ResProj:IsVerified = { 0 }
	"Default ResExtWall IsVerified flag"			ResExtWall:IsVerified = { 0 }
	"Default ResWin IsVerified flag"					ResWin:IsVerified = { 0 }
	"Default ResDr IsVerified flag"					ResDr:IsVerified = { 0 }		; SAC 2/11/14
	"Default ResExtFlr IsVerified flag"		      ResExtFlr:IsVerified = { 0 }
	"Default FloorOverCrawl IsVerified flag"		FloorOverCrawl:IsVerified = { 0 }
	"Default CathedralCeiling IsVerified flag"	CathedralCeiling:IsVerified = { 0 }
	"Default CeilingBelowAttic IsVerified flag"	CeilingBelowAttic:IsVerified = { 0 }
	"Default InteriorCeiling IsVerified flag"		InteriorCeiling:IsVerified = { 0 }
	"Default ResIntWall IsVerified flag"			ResIntWall:IsVerified = { 0 }
	"Default UndWall IsVerified flag"				UndWall:IsVerified = { 0 }
	"Default UndFloor IsVerified flag"				UndFloor:IsVerified = { 0 }
	"Default ResIntFlr IsVerified flag"		      ResIntFlr:IsVerified = { 0 }		; SAC 2/11/14
	"Default SlabFloor IsVerified flag"				SlabFloor:IsVerified = { 0 }
	"Default Attic IsVerified flag"					Attic:IsVerified = { 0 }
	"Default ResSkylt IsVerified flag"				ResSkylt:IsVerified = { 0 }

	"Default Zone:HVACSysVerified"	Zone:HVACSysVerified		= {	0  }
	"Default Zone:DHWSys1Verified"	Zone:DHWSys1Verified		= {	0  }
	"Default Zone:DHWSys2Verified"	Zone:DHWSys2Verified		= {	0  }

;	"Default HVACHeat IsVerified flag"				HVACHeat:IsVerified = { 0 }
;	"Default HVACCool IsVerified flag"				HVACCool:IsVerified = { 0 }
;	"Default HVACHtPump IsVerified flag"			HVACHtPump:IsVerified = { 0 }
	"Default HVACDist IsVerified flag"				HVACDist:IsVerified = { 0 }
	"Default HVACFan IsVerified flag"				HVACFan:IsVerified = { 0 }

;	mjb 6/4/14	force consistent defaults of all flags derived from Status
	"Default Zone status flags"					Zone:Action						= {	EvalRulelist( "ForceDefaults_Zone_Status", 1 )  }
	"Default ResExtWall status flags"				ResExtWall:Action					= {	EvalRulelist( "ForceDefaults_ResExtWall_Status", 1 )  }
	"Default ResWin status flags"						ResWin:Action						= {	EvalRulelist( "ForceDefaults_ResWin_Status", 1 )  }
	"Default ResDr status flags"					ResDr:Action						= {	EvalRulelist( "ForceDefaults_ResDr_Status", 1 )  }
	"Default ResExtFlr status flags"		ResExtFlr:Action			= {	EvalRulelist( "ForceDefaults_ResExtFlr_Status", 1 )  }
	"Default FloorOverCrawl status flags"		FloorOverCrawl:Action		= {	EvalRulelist( "ForceDefaults_FloorOverCrawl_Status", 1 )  }
	"Default CathedralCeiling status flags"	CathedralCeiling:Action		= {	EvalRulelist( "ForceDefaults_CathedralCeiling_Status", 1 )  }
	"Default CeilingBelowAttic status flags"	CeilingBelowAttic:Action	= {	EvalRulelist( "ForceDefaults_CeilingBelowAttic_Status", 1 )  }
	"Default InteriorCeiling status flags"		InteriorCeiling:Action		= {	EvalRulelist( "ForceDefaults_InteriorCeiling_Status", 1 )  }
	"Default ResIntWall status flags"				ResIntWall:Action					= {	EvalRulelist( "ForceDefaults_ResIntWall_Status", 1 )  }
	"Default UndWall status flags"				UndWall:Action					= {	EvalRulelist( "ForceDefaults_UndWall_Status", 1 )  }
	"Default UndFloor status flags"				UndFloor:Action				= {	EvalRulelist( "ForceDefaults_UndFloor_Status", 1 )  }
	"Default ResIntFlr status flags"		ResIntFlr:Action			= {	EvalRulelist( "ForceDefaults_ResIntFlr_Status", 1 )  }
	"Default SlabFloor status flags"				SlabFloor:Action				= {	EvalRulelist( "ForceDefaults_SlabFloor_Status", 1 )  }
	"Default Attic status flags"					Attic:Action					= {	EvalRulelist( "ForceDefaults_Attic_Status", 1 )  }
	"Default ResSkylt status flags"					ResSkylt:Action					= {	EvalRulelist( "ForceDefaults_ResSkylt_Status", 1 )  }

END
;*************************************************************************

; SAC 7/20/17 - split single EAA rulelist into two - Shell & HVAC to evaluate shell before Construction defaulting and HVAC after floor area served defaulting
;*************************************************************************
RULELIST "ProposedInput_ResEAA_HVAC" 0 0 0 0
;*************************************************************************
	"Init HVACCool Is* status flags"				HVACCool:Action				= {	EvalRulelist( "Initialize_HVACCool_Status", 1 )  }
	"Init HVACHtPump Is* status flags"			HVACHtPump:Action				= {	EvalRulelist( "Initialize_HVACHtPump_Status", 1 )  }     ; SAC 10/24/17 - tic #909
	"Default HVACSys status flags"				HVACSys:Action					= {	EvalRulelist( "ForceDefaults_HVACSys_Status", 1 )  }
	"Default HVACHeat status flags"				HVACHeat:Action				= {	EvalRulelist( "ForceDefaults_HVACHeat_Status", 1 )  }
;	"Default HVACCool status flags"				HVACCool:Action				= {	EvalRulelist( "ForceDefaults_HVACCool_Status", 1 )  }    ; SAC 8/28/16 - removed to address tic #728
;	"Default HVACHtPump status flags"			HVACHtPump:Action				= {	EvalRulelist( "ForceDefaults_HVACHtPump_Status", 1 )  }  ; SAC 10/24/17 - dup of mod for HVACCool - in this case for tic #909
	"Default HVACDist status flags"				HVACDist:Action				= {	EvalRulelist( "ForceDefaults_HVACDist_Status", 1 )  }
;	"Default HVACFan status flags"				HVACFan:Action					= {	EvalRulelist( "ForceDefaults_HVACFan_Status", 1 )  }	;	mjb	8/21/14 - removed to implement CEC decision to NOT allow E+A+A Fan mods independent of HVACSys mods
	"Default DHWSys status flags"					DHWSys:Action					= {	EvalRulelist( "ForceDefaults_DHWSys_Status", 1 )  }
	"Default DHWHeater status flags"				DHWHeater:Action				= {	EvalRulelist( "ForceDefaults_DHWHeater_Status", 1 )  }

; mjb	7/31/14	- moved to after forced defaults
	"Default HVACSys IsVerified flag"			HVACSys:IsVerified = {
      if (ResProj:RunScope == 2 .AND. SumRevRef( Zone:AltHVACSystem, Zone:HVACSysVerified ) > 0)
      then  1  else  0  endif  }

   ; SAC 5/1/19 - add rule to set HVACFan:IsVerified flag - seemingly first rule that ever sets this flag > 0 (tic #1042)
   ;              as w/ other IsVerified flag rules - these settings won't stick if the same Fan object is referenced by a combination of systems w/ differing Status settings - needs more attention
   "Set HVACSys:Fan IsVerified flag when pertinent"   HVACSys:Fan:IsVerified	=
	   {  if (ResProj:RunScope == 2 .AND. FloorAreaServed[1] > 1 .AND. IsAltered .AND. IsVerified) then  1  else  UNCHANGED  endif  }
	"Force reset of any Fan:exWperCFMCool (in order to ensure use of default set in following rule)"   HVACFan:Action  =    ; SAC 5/1/19 (tic #1042)
	   {  if (LocalStatus( exWperCFMCool ) > 5) then  EvalRulelist( "Blast_Fan_exWperCFMCool", 1 )  else  UNCHANGED  endif  }
   ; SAC 5/1/19 - reach down from the Zone to set it's AltHVACSystem:Fan:exWperCFMCool for Altered-Verified systems (tic #1042)
   "Default Zone:AltHVACSystem:Fan:exWperCFMCool when pertinent"   Zone:AltHVACSystem:Fan:exWperCFMCool  =
	   {  if (ResProj:RunScope == 2 .AND. HVACSysStatus == 2 .AND. HVACSysVerified .AND.
	          IfValidAnd( exHVACSystem:Fan:WperCFMCool > 0 ))
         then  exHVACSystem:Fan:WperCFMCool
	      else  UNCHANGED  endif  }

	"Default DHWSys IsVerified flag"				Zone:AltDHWSys1:IsVerified = {
      if (ResProj:RunScope == 2 .AND. DHWSys1Verified > 0.5) then  1  else  0  endif  }
	"Default DHWSys IsVerified flag"				Zone:AltDHWSys2:IsVerified = {
      if (ResProj:RunScope == 2 .AND. DHWSys2Verified > 0.5) then  1  else  UNCHANGED  endif  }

; SAC 4/28/15 - added logic to check all envelope IsVerified flags to set ResProj:ExistingCondVerif
	"Default ResProj:ExistingCondVerif -1"		ResProj:ExistingCondVerif	= {
		if ( RunScope == 2 .AND. MinChild(Zone:Status) < 1.5 ) then 
			if ( MaxChild(Zone:HVACSysVerified) > 0.5 .OR. MaxChild(Zone:DHWSys1Verified) > 0.5 .OR.
			     MaxChild(Zone:DHWSys2Verified) > 0.5  .OR. IfValidAnd(ResProj:IsVerified > 0.5) ) 
			then 1
			else if (SumAll( Attic:IsVerified ) > 0.5)
			then 1
			else if (MaxChild( ResExtWall:IsVerified ) > 0.5 .OR. MaxChild( ResIntWall:IsVerified ) > 0.5 .OR.
			         MaxChild( UndWall:IsVerified ) > 0.5 .OR. MaxChild( CathedralCeiling:IsVerified ) > 0.5 .OR. 
						MaxChild( CeilingBelowAttic:IsVerified ) > 0.5 .OR. MaxChild( InteriorCeiling:IsVerified ) > 0.5 .OR.
						MaxChild( SlabFloor:IsVerified ) > 0.5 .OR. MaxChild( ResExtFlr:IsVerified ) > 0.5)
			then 1
			else if (MaxChild( FloorOverCrawl:IsVerified ) > 0.5 .OR. MaxChild( ResIntFlr:IsVerified ) > 0.5 .OR.
			         MaxChild( UndFloor:IsVerified ) > 0.5 .OR. MaxChild( ResWin:IsVerified ) > 0.5 .OR. 
						MaxChild( ResSkylt:IsVerified ) > 0.5 .OR. MaxChild( ResDr:IsVerified ) > 0.5)
			then 1
			else 0 endif endif endif endif
		else 0 endif	}
;	"debug ResProj:ExistingCondVerif - 1"			ResProj:Action = { PostWarning( "Default 1 - ExistingCondVerif:  %g", ExistingCondVerif )  }
;	mjb	10/31/14	- make sure rules to not bonk if there are no Ext Walls in project
	"Default Zone:IsVerified -1"		Zone:IsVerified	= { Max( 0, MaxChild( ResExtWall:IsVerified) )  }
	"Default Zone:IsVerified -2"		Zone:IsVerified	= { Max( IsVerified, MaxChild( ResExtFlr:IsVerified) )  }
	"Default Zone:IsVerified -3"		Zone:IsVerified	= { Max( IsVerified, MaxChild( FloorOverCrawl:IsVerified) )  }
	"Default Zone:IsVerified -4"		Zone:IsVerified	= { Max( IsVerified, MaxChild( CathedralCeiling:IsVerified) )  }
	"Default Zone:IsVerified -5"		Zone:IsVerified	= { Max( IsVerified, MaxChild( CeilingBelowAttic:IsVerified) )  }
	"Default Zone:IsVerified -6"		Zone:IsVerified	= { Max( IsVerified, MaxChild( UndWall:IsVerified) )  }
	"Default Zone:IsVerified -7"		Zone:IsVerified	= { Max( IsVerified, MaxChild( UndFloor:IsVerified) )  }
	"Default Zone:IsVerified -8"		Zone:IsVerified	= { Max( IsVerified, MaxChild( SlabFloor:IsVerified) )  }

;	mjb	8/5/14	- corrected placement of ) in MaxChild() function below
	"Default ResProj:ExistingCondVerif -2"		ResProj:ExistingCondVerif	= {
      if ( ExistingCondVerif > 0.5 ) then UNCHANGED
      else if ( MaxChild(Zone:IsVerified) > 0.5 ) then 1 else 0 endif endif	}
;	"debug ResProj:ExistingCondVerif - 2"			ResProj:Action = { PostWarning( "Default 2 - ExistingCondVerif:  %g", ExistingCondVerif )  }

END
;*************************************************************************


;*************************************************************************  - SAC 5/1/19 (tic #1042)
RULELIST "Blast_Fan_exWperCFMCool" 1 0 0 0
	"Force reset of Fan:exWperCFMCool"   HVACFan:exWperCFMCool  = {  UNDEFINED  }
END
;*************************************************************************

;*************************************************************************
RULELIST "ForceDefaults_ResProj_Status" 1 0 0 0
;*************************************************************************
	"Force Default of ResProj IsNew"   			ResProj:IsNew			= { if (Status == 3) then 1 else 0 endif }
	"Force Default of ResProj IsAltered"   	ResProj:IsAltered		= { if (Status == 2) then 1 else 0 endif }
	"Force consistent ResProj IsVerified"		ResProj:IsVerified	= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
END
;*************************************************************************
RULELIST "ForceDefaults_Zone_Status" 1 0 0 0
;*************************************************************************
	"Force Default of Zone IsNew"   			Zone:IsNew			= { if (Status == 3) then 1 else 0 endif }
	"Force Default of Zone IsAltered"   	Zone:IsAltered		= { if (Status == 2) then 1 else 0 endif }
	"Force Default of Zone IsExisting"   	Zone:IsExisting	= { if (Status == 1) then 1 else 0 endif }
END
; SAC 9/10/19 - revisions to all surface ParentIsNewZone rules to account for OtherZone parents (MFamProto)
;*************************************************************************
RULELIST "ForceDefaults_ResExtWall_Status" 1 0 0 0
;*************************************************************************
	"Force Default of ResExtWall IsNew"   			ResExtWall:IsNew			= { if (Status == 3) then 1 else 0 endif }
	"Force Default of ResExtWall IsAltered"   	ResExtWall:IsAltered		= { if (Status == 2) then 1 else 0 endif }
	"Force Default of ResExtWall IsExisting"   	ResExtWall:IsExisting	= { if (Status == 1) then 1 else 0 endif }
	"Force consistent ResExtWall IsVerified"		ResExtWall:IsVerified	= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
   "Set ResExtWall:ParentIsNewZone"    ResExtWall:ParentIsNewZone  = {
      if (ParentComponentType() != "ResZn" .AND. ParentComponentType() != "ResOtherZn") then  0
      else if (Parent( Status ) == 3) then  1  else  0  endif endif  }
   "Set ResExtWall:ParentNotNewZone"   ResExtWall:ParentNotNewZone  = {
      if (ParentIsNewZone > 0) then  0  else  1  endif  }

;"dbg" ResExtWall:Action = { if (Name != "Extended Front") then  UNCHANGED
;   else  MessageBox( "Cons:Type '%s' / CavityThickness %g / CavityLayerRVal %g", EnumString( Construction:Type ), Construction:CavityThickness, Construction:CavityLayerRVal )  endif  }
   "Set ResExtWall:ShowException - flag indicating whether to display Exception choices"      ; SAC 5/18/18 - tic #798
      ResExtWall:ShowException  = {
         if (ParentComponentType() != "ResZn" .OR. LocalCompAssigned( Construction )==0) then  0
         else if (Zone:Status != 3 .OR. Status != 3) then  0
         else if (Construction:Type != 0) then  0   ; not wood-framed wall
         else if ((((int( Construction:FrameLayer / 100 ) - 0.5) == 3.5 .AND. Construction:CavityLayerRVal >= 15) .OR.
                   ((int( Construction:FrameLayer / 100 ) - 0.5) == 5.5 .AND. Construction:CavityLayerRVal >= 18)) .AND.   ; R18 = R19 in 5.5in cavity
                  ( ResProj:RunScope == 2 .OR.   ; EAA
                   (ResProj:RunScope == 1 .AND. ResProj:IsAddAlone > 0))) then  1
         else  0  endif endif endif endif  }
   "Backward compatibility for ResExtWall:IsWoodFrmdWallExt -> Exception"      ; SAC 5/18/18 - tic #798
      ResExtWall:Action  = {
         if (IfValidAnd( IsWoodFrmdWallExt > 0 ) .AND. ShowException > 0 .AND.
             LocalStatus( IsWoodFrmdWallExt ) > 6 .AND. LocalStatus( Exception ) < 7)
         then  EvalRulelist( "Force_ResExtWall_Exception_WallExt", 1 )
         else  UNCHANGED  endif  }
   "Blast any user-defined ResExtWall:IsWoodFrmdWallExt (no longer an input)"     ; SAC 5/18/18 - tic #798
      ResExtWall:Action  = {
         if (LocalStatus( IsWoodFrmdWallExt ) > 6)
         then  EvalRulelist( "ForceReset_ResExtWall_IsWoodFrmdWallExt", 1 )
         else  UNCHANGED  endif  }
   "Reset ResExtWall:Exception if not a valid input for this ResExtWall"     ; SAC 5/18/18 - tic #798
      ResExtWall:Action  = {
         if (Exception > 0 .AND. ShowException == 0)
         then  EvalRulelist( "ForceReset_ResExtWall_Exception", 1 )
         else  UNCHANGED  endif  }
;   "Default ResExtWall:IsWoodFrmdWallExt - whether or not this is a wood-framed wall extension of an existing wall (Section 150.2(a)1A)"  ; SAC 4/30/18 - tic #798
;      ResExtWall:IsWoodFrmdWallExt  = {  0  }
;  allow default via Enums ->  "Exception",  BEMP_Sym,  "exterior wall exception: none, Wall Extension or Existing Wall w/ Siding"  ; SAC 5/18/18 - replacement for IsWoodFrmdWallExt (tic #798)
   "Set ResExtWall:ExceptionRpt"    ResExtWall:ExceptionRpt =     ; SAC 5/19/18 - tic #798
      {  if (ShowException < 1) then  "n/a"
         else  switch (Exception)
                  case  1 :  "Extension"
                  case  2 :  "Ex. w/ Siding"
                  default :  "none"
               endswitch  endif  }

   ; SAC 5/18/18 - revised QII rules to accommodate wall exception input (tic #798)
   "Set ResExtWall:QIIDegraded"     ResExtWall:QIIDegraded  = {
      if (LocalCompAssigned( Construction ) > 0 .AND.
          (IfValidAnd( Construction:Type = 0 ) .OR.  ; wood framed
           IfValidAnd( Construction:Type = 1 ) .OR.  ; steel framed
           IfValidAnd( Construction:Type = 5 )))     ; SIPS wall
      then  if (ParentNotNewZone > 0 .OR. ResProj:InsulConsQuality < 2 .OR.
                (ShowException > 0 .AND. Exception > 0))
            then  1  else  0  endif
      else  0  endif  }
   "Set ResExtWall:QIINotDegraded"  ResExtWall:QIINotDegraded  = {
      if (QIIDegraded > 0) then  0  else  1  endif  }
END
;*************************************************************************
RULELIST "ForceDefaults_ResWin_Status" 1 0 0 0
;*************************************************************************
	"Force Default of ResWin IsNew"   			ResWin:IsNew			= { if (Status == 3) then 1 else 0 endif }
	"Force Default of ResWin IsAltered"   		ResWin:IsAltered		= { if (Status == 2) then 1 else 0 endif }
	"Force Default of ResWin IsExisting"   	ResWin:IsExisting		= { if (Status == 1) then 1 else 0 endif }
	"Force consistent ResWin IsVerified"		ResWin:IsVerified		= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
END
;*************************************************************************
RULELIST "ForceDefaults_ResDr_Status" 1 0 0 0
;*************************************************************************
	"Force Default of ResDr IsNew"   			ResDr:IsNew			= { if (Status == 3) then 1 else 0 endif }
	"Force Default of ResDr IsAltered"   	ResDr:IsAltered		= { if (Status == 2) then 1 else 0 endif }
	"Force Default of ResDr IsExisting"   	ResDr:IsExisting	= { if (Status == 1) then 1 else 0 endif }
	"Force consistent ResDr IsVerified"		ResDr:IsVerified	= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
END
;*************************************************************************
RULELIST "ForceDefaults_ResExtFlr_Status" 1 0 0 0
;*************************************************************************
	"Force Default of ResExtFlr IsNew"   			ResExtFlr:IsNew			= { if (Status == 3) then 1 else 0 endif }
	"Force Default of ResExtFlr IsAltered"   	ResExtFlr:IsAltered		= { if (Status == 2) then 1 else 0 endif }
	"Force Default of ResExtFlr IsExisting"   	ResExtFlr:IsExisting	= { if (Status == 1) then 1 else 0 endif }
	"Force consistent ResExtFlr IsVerified"		ResExtFlr:IsVerified	= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
   "Set ResExtFlr:ParentIsNewZone"    ResExtFlr:ParentIsNewZone  = {
      if (ParentComponentType() != "ResZn" .AND. ParentComponentType() != "ResOtherZn") then  0
      else if (Parent( Status ) == 3) then  1  else  0  endif endif  }
   "Set ResExtFlr:ParentNotNewZone"   ResExtFlr:ParentNotNewZone  = {
      if (ParentIsNewZone > 0) then  0  else  1  endif  }
END
;*************************************************************************
RULELIST "ForceDefaults_FloorOverCrawl_Status" 1 0 0 0
;*************************************************************************
	"Force Default of FloorOverCrawl IsNew"   		FloorOverCrawl:IsNew			= { if (Status == 3) then 1 else 0 endif }
	"Force Default of FloorOverCrawl IsAltered"   	FloorOverCrawl:IsAltered	= { if (Status == 2) then 1 else 0 endif }
	"Force Default of FloorOverCrawl IsExisting"   	FloorOverCrawl:IsExisting	= { if (Status == 1) then 1 else 0 endif }
	"Force consistent FloorOverCrawl IsVerified"		FloorOverCrawl:IsVerified	= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
   "Set FloorOverCrawl:ParentIsNewZone"    FloorOverCrawl:ParentIsNewZone  = {
      if (ParentComponentType() != "ResZn" .AND. ParentComponentType() != "ResOtherZn") then  0
      else if (Parent( Status ) == 3) then  1  else  0  endif endif  }
   "Set FloorOverCrawl:ParentNotNewZone"   FloorOverCrawl:ParentNotNewZone  = {
      if (ParentIsNewZone > 0) then  0  else  1  endif  }
END
;*************************************************************************
RULELIST "ForceDefaults_CathedralCeiling_Status" 1 0 0 0
;*************************************************************************
	"Force Default of CathedralCeiling IsNew"   			CathedralCeiling:IsNew			= { if (Status == 3) then 1 else 0 endif }
	"Force Default of CathedralCeiling IsAltered"   	CathedralCeiling:IsAltered		= { if (Status == 2) then 1 else 0 endif }
	"Force Default of CathedralCeiling IsExisting"   	CathedralCeiling:IsExisting	= { if (Status == 1) then 1 else 0 endif }
	"Force Default of CathedralCeiling IsAltered"   	CathedralCeiling:IsAlteredSurface		= { if (Status == 4) then 1 else 0 endif }
	"Force consistent CathedralCeiling IsVerified"		CathedralCeiling:IsVerified	= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
   "Set CathedralCeiling:ParentIsNewZone"    CathedralCeiling:ParentIsNewZone  = {
      if (ParentComponentType() != "ResZn" .AND. ParentComponentType() != "ResOtherZn") then  0
      else if (Parent( Status ) == 3) then  1  else  0  endif endif  }
   "Set CathedralCeiling:ParentNotNewZone"   CathedralCeiling:ParentNotNewZone  = {
      if (ParentIsNewZone > 0) then  0  else  1  endif  }
END
;*************************************************************************
RULELIST "ForceDefaults_CeilingBelowAttic_Status" 1 0 0 0
;*************************************************************************
	"Force Default of CeilingBelowAttic IsNew"   		CeilingBelowAttic:IsNew			= { if (Status == 3) then 1 else 0 endif }
	"Force Default of CeilingBelowAttic IsAltered"   	CeilingBelowAttic:IsAltered	= { if (Status == 2) then 1 else 0 endif }
	"Force Default of CeilingBelowAttic IsExisting"   	CeilingBelowAttic:IsExisting	= { if (Status == 1) then 1 else 0 endif }
	"Force consistent CeilingBelowAttic IsVerified"		CeilingBelowAttic:IsVerified	= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
   "Set CeilingBelowAttic:ParentIsNewZone"    CeilingBelowAttic:ParentIsNewZone  = {
      if (ParentComponentType() != "ResZn" .AND. ParentComponentType() != "ResOtherZn") then  0
      else if (Parent( Status ) == 3) then  1  else  0  endif endif  }
   "Set CeilingBelowAttic:ParentNotNewZone"   CeilingBelowAttic:ParentNotNewZone  = {
      if (ParentIsNewZone > 0) then  0  else  1  endif  }
END
;*************************************************************************
RULELIST "ForceDefaults_InteriorCeiling_Status" 1 0 0 0
;*************************************************************************
	"Force Default of InteriorCeiling IsNew"   		InteriorCeiling:IsNew			= { if (Status == 3) then 1 else 0 endif }
	"Force Default of InteriorCeiling IsAltered"   	InteriorCeiling:IsAltered		= { if (Status == 2) then 1 else 0 endif }
	"Force Default of InteriorCeiling IsExisting"   InteriorCeiling:IsExisting		= { if (Status == 1) then 1 else 0 endif }
	"Force consistent InteriorCeiling IsVerified"	InteriorCeiling:IsVerified		= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
   "Set InteriorCeiling:ParentIsNewZone"    InteriorCeiling:ParentIsNewZone  = {
      if (ParentComponentType() != "ResZn" .AND. ParentComponentType() != "ResOtherZn") then  0
      else if (Parent( Status ) == 3) then  1  else  0  endif endif  }
   "Set InteriorCeiling:ParentNotNewZone"   InteriorCeiling:ParentNotNewZone  = {
      if (ParentIsNewZone > 0) then  0  else  1  endif  }
END
;*************************************************************************
RULELIST "ForceDefaults_ResIntWall_Status" 1 0 0 0
;*************************************************************************
	"Force Default of ResIntWall IsNew"   			ResIntWall:IsNew			= { if (Status == 3) then 1 else 0 endif }
	"Force Default of ResIntWall IsAltered"   	ResIntWall:IsAltered		= { if (Status == 2) then 1 else 0 endif }
	"Force Default of ResIntWall IsExisting"   	ResIntWall:IsExisting	= { if (Status == 1) then 1 else 0 endif }
	"Force consistent ResIntWall IsVerified"		ResIntWall:IsVerified	= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
   "Set ResIntWall:ParentIsNewZone"    ResIntWall:ParentIsNewZone  = {
      if (ParentComponentType() != "ResZn" .AND. ParentComponentType() != "ResOtherZn") then  0
      else if (Parent( Status ) == 3) then  1  else  0  endif endif  }
   "Set ResIntWall:ParentNotNewZone"   ResIntWall:ParentNotNewZone  = {
      if (ParentIsNewZone > 0) then  0  else  1  endif  }
END
;*************************************************************************
RULELIST "ForceDefaults_UndWall_Status" 1 0 0 0
;*************************************************************************
	"Force Default of UndWall IsNew"   			UndWall:IsNew			= { if (Status == 3) then 1 else 0 endif }
	"Force Default of UndWall IsAltered"   	UndWall:IsAltered		= { if (Status == 2) then 1 else 0 endif }
	"Force Default of UndWall IsExisting"   	UndWall:IsExisting	= { if (Status == 1) then 1 else 0 endif }
	"Force consistent UndWall IsVerified"		UndWall:IsVerified	= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
   "Set UndWall:ParentIsNewZone"    UndWall:ParentIsNewZone  = {
      if (ParentComponentType() != "ResZn" .AND. ParentComponentType() != "ResOtherZn") then  0
      else if (Parent( Status ) == 3) then  1  else  0  endif endif  }
   "Set UndWall:ParentNotNewZone"   UndWall:ParentNotNewZone  = {
      if (ParentIsNewZone > 0) then  0  else  1  endif  }
END
;*************************************************************************
RULELIST "ForceDefaults_ResIntFlr_Status" 1 0 0 0
;*************************************************************************
	"Force Default of ResIntFlr IsNew"   			ResIntFlr:IsNew			= { if (Status == 3) then 1 else 0 endif }
	"Force Default of ResIntFlr IsAltered"   	ResIntFlr:IsAltered		= { if (Status == 2) then 1 else 0 endif }
	"Force Default of ResIntFlr IsExisting"   	ResIntFlr:IsExisting	= { if (Status == 1) then 1 else 0 endif }
	"Force consistent ResIntFlr IsVerified"		ResIntFlr:IsVerified	= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
   "Set ResIntFlr:ParentIsNewZone"    ResIntFlr:ParentIsNewZone  = {
      if (ParentComponentType() != "ResZn" .AND. ParentComponentType() != "ResOtherZn") then  0
      else if (Parent( Status ) == 3) then  1  else  0  endif endif  }
   "Set ResIntFlr:ParentNotNewZone"   ResIntFlr:ParentNotNewZone  = {
      if (ParentIsNewZone > 0) then  0  else  1  endif  }
END
;*************************************************************************
RULELIST "ForceDefaults_UndFloor_Status" 1 0 0 0
;*************************************************************************
	"Force Default of UndFloor IsNew"   			UndFloor:IsNew				= { if (Status == 3) then 1 else 0 endif }
	"Force Default of UndFloor IsAltered"   		UndFloor:IsAltered		= { if (Status == 2) then 1 else 0 endif }
	"Force Default of UndFloor IsExisting"   		UndFloor:IsExisting		= { if (Status == 1) then 1 else 0 endif }
	"Force consistent UndFloor IsVerified"			UndFloor:IsVerified		= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
   "Set UndFloor:ParentIsNewZone"    UndFloor:ParentIsNewZone  = {
      if (ParentComponentType() != "ResZn" .AND. ParentComponentType() != "ResOtherZn") then  0
      else if (Parent( Status ) == 3) then  1  else  0  endif endif  }
   "Set UndFloor:ParentNotNewZone"   UndFloor:ParentNotNewZone  = {
      if (ParentIsNewZone > 0) then  0  else  1  endif  }
END
;*************************************************************************
RULELIST "ForceDefaults_SlabFloor_Status" 1 0 0 0
;*************************************************************************
	"Force Default of SlabFloor IsNew"   			SlabFloor:IsNew			= { if (Status == 3) then 1 else 0 endif }
	"Force Default of SlabFloor IsAltered"   		SlabFloor:IsAltered		= { if (Status == 2) then 1 else 0 endif }
	"Force Default of SlabFloor IsExisting"   	SlabFloor:IsExisting		= { if (Status == 1) then 1 else 0 endif }
	"Force consistent SlabFloor IsVerified"		SlabFloor:IsVerified		= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
END
;*************************************************************************
RULELIST "ForceDefaults_Attic_Status" 1 0 0 0
;*************************************************************************
	"Force Default of Attic IsNew"   			Attic:IsNew				= { if (Status == 3) then 1 else 0 endif }
	"Force Default of Attic IsAltered"   		Attic:IsAltered		= { if (Status == 2) then 1 else 0 endif }
	"Force Default of Attic IsExisting"   		Attic:IsExisting		= { if (Status == 1) then 1 else 0 endif }
	"Force Default of Attic IsAltered"   		Attic:IsAlteredSurface		= { if (Status == 4) then 1 else 0 endif }
	"Force consistent Attic IsVerified"			Attic:IsVerified		= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
END
;*************************************************************************
RULELIST "ForceDefaults_ResSkylt_Status" 1 0 0 0
;*************************************************************************
	"Force Default of ResSkylt IsNew"   			ResSkylt:IsNew				= { if (Status == 3) then 1 else 0 endif }
	"Force Default of ResSkylt IsAltered"   		ResSkylt:IsAltered		= { if (Status == 2) then 1 else 0 endif }
	"Force Default of ResSkylt IsExisting"   		ResSkylt:IsExisting		= { if (Status == 1) then 1 else 0 endif }
	"Force consistent ResSkylt IsVerified"			ResSkylt:IsVerified		= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
END
;*************************************************************************

;*************************************************************************  ; SAC 5/18/18 - tic #798
RULELIST "Force_ResExtWall_Exception_WallExt" 1 0 1 0
;*************************************************************************
   "Force ResExtWall:Exception to Wall Ext"  ResExtWall:Exception = {  1  }
   "Blast ResExtWall:IsWoodFrmdWallExt"      ResExtWall:IsWoodFrmdWallExt = {  UNDEFINED  }
END
;*************************************************************************  ; SAC 5/18/18 - tic #798
RULELIST "ForceReset_ResExtWall_IsWoodFrmdWallExt" 1 0 0 0
;*************************************************************************
   "Blast ResExtWall:IsWoodFrmdWallExt"      ResExtWall:IsWoodFrmdWallExt = {  UNDEFINED  }
END
;*************************************************************************  ; SAC 5/18/18 - tic #798
RULELIST "ForceReset_ResExtWall_Exception" 1 0 0 0
;*************************************************************************
   "Blast ResExtWall:Exception"              ResExtWall:Exception         = {  UNDEFINED  }
END
;*************************************************************************

;*************************************************************************
RULELIST "ForceDefaults_HVACSys_Status" 1 0 0 0
;*************************************************************************
	"Force Default of HVACSys IsNew"   			HVACSys:IsNew			= { if (Status == 3) then 1 else 0 endif }
	"Force Default of HVACSys IsAltered"   	HVACSys:IsAltered		= { if (Status == 2) then 1 else 0 endif }
	"Force Default of HVACSys IsExisting"   	HVACSys:IsExisting	= { if (Status == 1) then 1 else 0 endif }
	"Force consistent HVACSys IsVerified"		HVACSys:IsVerified	= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
; mjb		8/21/14	- added to implement CEC decision to ONLY allow fan E+A+A mods that are consistent with HVACSys mods
; SAC 8/28/16 - NOTE: the following logic will NOT result in consistent settings if the same Fan object is referenced by a combination of systems w/ differing Status settings - needs more attention
	"Force Default of HVACSys:Fan Status"   			HVACSys:Fan:Status			= { Status }
	"Force Default of HVACSys:Fan IsNew"   			HVACSys:Fan:IsNew				= { if (Status == 3) then 1 else 0 endif }
	"Force Default of HVACSys:Fan IsAltered"   		HVACSys:Fan:IsAltered		= { if (Status == 2) then 1 else 0 endif }
	"Force Default of HVACSys:Fan IsExisting"   		HVACSys:Fan:IsExisting		= { if (Status == 1) then 1 else 0 endif }
	"Force consistent HVACSys:fan IsVerified"			HVACSys:Fan:IsVerified		= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
; SAC 8/28/16 - added logic to set HVACCool:Is* status flags - multiple MAY be set, and they could equal values > 1, depending on how many references there are
	"Increment HVACSys:CoolSystem[1]:IsNew"      HVACSys:CoolSystem[1]:IsNew   = {
	   if (IsNew = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 1 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
	   else  CoolSystem[1]:IsNew + 1  endif  }
	"Increment HVACSys:CoolSystem[2]:IsNew"      HVACSys:CoolSystem[2]:IsNew   = {
	   if (IsNew = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 2 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[2]:IsNew + 1  endif  }
	"Increment HVACSys:CoolSystem[3]:IsNew"      HVACSys:CoolSystem[3]:IsNew   = {
	   if (IsNew = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 3 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[3]:IsNew + 1  endif  }
	"Increment HVACSys:CoolSystem[4]:IsNew"      HVACSys:CoolSystem[4]:IsNew   = {
	   if (IsNew = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 4 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[4]:IsNew + 1  endif  }
	"Increment HVACSys:CoolSystem[5]:IsNew"      HVACSys:CoolSystem[5]:IsNew   = {
	   if (IsNew = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 5 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[5]:IsNew + 1  endif  }
	"Increment HVACSys:CoolSystem[6]:IsNew"      HVACSys:CoolSystem[6]:IsNew   = {
	   if (IsNew = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 6 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[6]:IsNew + 1  endif  }
	"Increment HVACSys:CoolSystem[7]:IsNew"      HVACSys:CoolSystem[7]:IsNew   = {
	   if (IsNew = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 7 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[7]:IsNew + 1  endif  }
	"Increment HVACSys:CoolSystem[8]:IsNew"      HVACSys:CoolSystem[8]:IsNew   = {
	   if (IsNew = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 8 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[8]:IsNew + 1  endif  }
	"Increment HVACSys:CoolSystem[9]:IsNew"      HVACSys:CoolSystem[9]:IsNew   = {
	   if (IsNew = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 9 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[9]:IsNew + 1  endif  }
	"Increment HVACSys:CoolSystem[10]:IsNew"     HVACSys:CoolSystem[10]:IsNew  = {
	   if (IsNew = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 10 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[10]:IsNew + 1  endif  }

	"Increment HVACSys:CoolSystem[1]:IsAltered"  HVACSys:CoolSystem[1]:IsAltered  = {
	   if (IsAltered = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 1 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[1]:IsAltered + 1  endif  }
	"Increment HVACSys:CoolSystem[2]:IsAltered"  HVACSys:CoolSystem[2]:IsAltered  = {
	   if (IsAltered = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 2 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[2]:IsAltered + 1  endif  }
	"Increment HVACSys:CoolSystem[3]:IsAltered"  HVACSys:CoolSystem[3]:IsAltered  = {
	   if (IsAltered = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 3 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[3]:IsAltered + 1  endif  }
	"Increment HVACSys:CoolSystem[4]:IsAltered"  HVACSys:CoolSystem[4]:IsAltered  = {
	   if (IsAltered = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 4 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[4]:IsAltered + 1  endif  }
	"Increment HVACSys:CoolSystem[5]:IsAltered"  HVACSys:CoolSystem[5]:IsAltered  = {
	   if (IsAltered = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 5 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[5]:IsAltered + 1  endif  }
	"Increment HVACSys:CoolSystem[6]:IsAltered"  HVACSys:CoolSystem[6]:IsAltered  = {
	   if (IsAltered = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 6 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[6]:IsAltered + 1  endif  }
	"Increment HVACSys:CoolSystem[7]:IsAltered"  HVACSys:CoolSystem[7]:IsAltered  = {
	   if (IsAltered = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 7 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[7]:IsAltered + 1  endif  }
	"Increment HVACSys:CoolSystem[8]:IsAltered"  HVACSys:CoolSystem[8]:IsAltered  = {
	   if (IsAltered = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 8 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[8]:IsAltered + 1  endif  }
	"Increment HVACSys:CoolSystem[9]:IsAltered"  HVACSys:CoolSystem[9]:IsAltered  = {
	   if (IsAltered = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 9 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[9]:IsAltered + 1  endif  }
	"Increment HVACSys:CoolSystem[10]:IsAltered" HVACSys:CoolSystem[10]:IsAltered = {
	   if (IsAltered = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 10 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[10]:IsAltered + 1  endif  }

	"Incremnt HVACSys:CoolSystem[1]:IsExisting"  HVACSys:CoolSystem[1]:IsExisting = {
	   if (IsExisting = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 1 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[1]:IsExisting + 1  endif  }
	"Incremnt HVACSys:CoolSystem[2]:IsExisting"  HVACSys:CoolSystem[2]:IsExisting = {
	   if (IsExisting = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 2 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[2]:IsExisting + 1  endif  }
	"Incremnt HVACSys:CoolSystem[3]:IsExisting"  HVACSys:CoolSystem[3]:IsExisting = {
	   if (IsExisting = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 3 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[3]:IsExisting + 1  endif  }
	"Incremnt HVACSys:CoolSystem[4]:IsExisting"  HVACSys:CoolSystem[4]:IsExisting = {
	   if (IsExisting = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 4 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[4]:IsExisting + 1  endif  }
	"Incremnt HVACSys:CoolSystem[5]:IsExisting"  HVACSys:CoolSystem[5]:IsExisting = {
	   if (IsExisting = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 5 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[5]:IsExisting + 1  endif  }
	"Incremnt HVACSys:CoolSystem[6]:IsExisting"  HVACSys:CoolSystem[6]:IsExisting = {
	   if (IsExisting = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 6 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[6]:IsExisting + 1  endif  }
	"Incremnt HVACSys:CoolSystem[7]:IsExisting"  HVACSys:CoolSystem[7]:IsExisting = {
	   if (IsExisting = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 7 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[7]:IsExisting + 1  endif  }
	"Incremnt HVACSys:CoolSystem[8]:IsExisting"  HVACSys:CoolSystem[8]:IsExisting = {
	   if (IsExisting = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 8 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[8]:IsExisting + 1  endif  }
	"Incremnt HVACSys:CoolSystem[9]:IsExisting"  HVACSys:CoolSystem[9]:IsExisting = {
	   if (IsExisting = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 9 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[9]:IsExisting + 1  endif  }
	"Incremnt HVACSys:CoolSystem[10]:IsExisting" HVACSys:CoolSystem[10]:IsExisting = {
	   if (IsExisting = 0 .OR. IfValidAnd( NumCoolSystemTypes >= 10 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  CoolSystem[10]:IsExisting + 1  endif  }

; SAC 10/24/17 - added logic (dup of above) to set HVACHtPump:Is* status flags - multiple MAY be set, and they could equal values > 1, depending on how many references there are (tic #909)
	"Increment HVACSys:HtPumpSystem[1]:IsNew"      HVACSys:HtPumpSystem[1]:IsNew   = {
	   if (IsNew = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 1 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
	   else  HtPumpSystem[1]:IsNew + 1  endif  }
	"Increment HVACSys:HtPumpSystem[2]:IsNew"      HVACSys:HtPumpSystem[2]:IsNew   = {
	   if (IsNew = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 2 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[2]:IsNew + 1  endif  }
	"Increment HVACSys:HtPumpSystem[3]:IsNew"      HVACSys:HtPumpSystem[3]:IsNew   = {
	   if (IsNew = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 3 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[3]:IsNew + 1  endif  }
	"Increment HVACSys:HtPumpSystem[4]:IsNew"      HVACSys:HtPumpSystem[4]:IsNew   = {
	   if (IsNew = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 4 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[4]:IsNew + 1  endif  }
	"Increment HVACSys:HtPumpSystem[5]:IsNew"      HVACSys:HtPumpSystem[5]:IsNew   = {
	   if (IsNew = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 5 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[5]:IsNew + 1  endif  }
	"Increment HVACSys:HtPumpSystem[6]:IsNew"      HVACSys:HtPumpSystem[6]:IsNew   = {
	   if (IsNew = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 6 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[6]:IsNew + 1  endif  }
	"Increment HVACSys:HtPumpSystem[7]:IsNew"      HVACSys:HtPumpSystem[7]:IsNew   = {
	   if (IsNew = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 7 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[7]:IsNew + 1  endif  }
	"Increment HVACSys:HtPumpSystem[8]:IsNew"      HVACSys:HtPumpSystem[8]:IsNew   = {
	   if (IsNew = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 8 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[8]:IsNew + 1  endif  }
	"Increment HVACSys:HtPumpSystem[9]:IsNew"      HVACSys:HtPumpSystem[9]:IsNew   = {
	   if (IsNew = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 9 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[9]:IsNew + 1  endif  }
	"Increment HVACSys:HtPumpSystem[10]:IsNew"     HVACSys:HtPumpSystem[10]:IsNew  = {
	   if (IsNew = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 10 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[10]:IsNew + 1  endif  }

	"Increment HVACSys:HtPumpSystem[1]:IsAltered"  HVACSys:HtPumpSystem[1]:IsAltered  = {
	   if (IsAltered = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 1 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[1]:IsAltered + 1  endif  }
	"Increment HVACSys:HtPumpSystem[2]:IsAltered"  HVACSys:HtPumpSystem[2]:IsAltered  = {
	   if (IsAltered = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 2 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[2]:IsAltered + 1  endif  }
	"Increment HVACSys:HtPumpSystem[3]:IsAltered"  HVACSys:HtPumpSystem[3]:IsAltered  = {
	   if (IsAltered = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 3 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[3]:IsAltered + 1  endif  }
	"Increment HVACSys:HtPumpSystem[4]:IsAltered"  HVACSys:HtPumpSystem[4]:IsAltered  = {
	   if (IsAltered = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 4 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[4]:IsAltered + 1  endif  }
	"Increment HVACSys:HtPumpSystem[5]:IsAltered"  HVACSys:HtPumpSystem[5]:IsAltered  = {
	   if (IsAltered = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 5 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[5]:IsAltered + 1  endif  }
	"Increment HVACSys:HtPumpSystem[6]:IsAltered"  HVACSys:HtPumpSystem[6]:IsAltered  = {
	   if (IsAltered = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 6 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[6]:IsAltered + 1  endif  }
	"Increment HVACSys:HtPumpSystem[7]:IsAltered"  HVACSys:HtPumpSystem[7]:IsAltered  = {
	   if (IsAltered = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 7 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[7]:IsAltered + 1  endif  }
	"Increment HVACSys:HtPumpSystem[8]:IsAltered"  HVACSys:HtPumpSystem[8]:IsAltered  = {
	   if (IsAltered = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 8 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[8]:IsAltered + 1  endif  }
	"Increment HVACSys:HtPumpSystem[9]:IsAltered"  HVACSys:HtPumpSystem[9]:IsAltered  = {
	   if (IsAltered = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 9 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[9]:IsAltered + 1  endif  }
	"Increment HVACSys:HtPumpSystem[10]:IsAltered" HVACSys:HtPumpSystem[10]:IsAltered = {
	   if (IsAltered = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 10 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[10]:IsAltered + 1  endif  }

	"Incremnt HVACSys:HtPumpSystem[1]:IsExisting"  HVACSys:HtPumpSystem[1]:IsExisting = {
	   if (IsExisting = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 1 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[1]:IsExisting + 1  endif  }
	"Incremnt HVACSys:HtPumpSystem[2]:IsExisting"  HVACSys:HtPumpSystem[2]:IsExisting = {
	   if (IsExisting = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 2 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[2]:IsExisting + 1  endif  }
	"Incremnt HVACSys:HtPumpSystem[3]:IsExisting"  HVACSys:HtPumpSystem[3]:IsExisting = {
	   if (IsExisting = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 3 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[3]:IsExisting + 1  endif  }
	"Incremnt HVACSys:HtPumpSystem[4]:IsExisting"  HVACSys:HtPumpSystem[4]:IsExisting = {
	   if (IsExisting = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 4 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[4]:IsExisting + 1  endif  }
	"Incremnt HVACSys:HtPumpSystem[5]:IsExisting"  HVACSys:HtPumpSystem[5]:IsExisting = {
	   if (IsExisting = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 5 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[5]:IsExisting + 1  endif  }
	"Incremnt HVACSys:HtPumpSystem[6]:IsExisting"  HVACSys:HtPumpSystem[6]:IsExisting = {
	   if (IsExisting = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 6 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[6]:IsExisting + 1  endif  }
	"Incremnt HVACSys:HtPumpSystem[7]:IsExisting"  HVACSys:HtPumpSystem[7]:IsExisting = {
	   if (IsExisting = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 7 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[7]:IsExisting + 1  endif  }
	"Incremnt HVACSys:HtPumpSystem[8]:IsExisting"  HVACSys:HtPumpSystem[8]:IsExisting = {
	   if (IsExisting = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 8 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[8]:IsExisting + 1  endif  }
	"Incremnt HVACSys:HtPumpSystem[9]:IsExisting"  HVACSys:HtPumpSystem[9]:IsExisting = {
	   if (IsExisting = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 9 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[9]:IsExisting + 1  endif  }
	"Incremnt HVACSys:HtPumpSystem[10]:IsExisting" HVACSys:HtPumpSystem[10]:IsExisting = {
	   if (IsExisting = 0 .OR. IfValidAnd( NumHtPumpSystemTypes >= 10 )==0 .OR.
	       IfValidAnd( FloorAreaServed[1] > 0.5 )==0) then  UNCHANGED
      else  HtPumpSystem[10]:IsExisting + 1  endif  }

END
;*************************************************************************
RULELIST "ForceDefaults_HVACHeat_Status" 1 0 0 0
;*************************************************************************
	"Force Default of HVACHeat IsNew"   		HVACHeat:IsNew			= { if (Status == 3) then 1 else 0 endif }
	"Force Default of HVACHeat IsAltered"   	HVACHeat:IsAltered	= { if (Status == 2) then 1 else 0 endif }
	"Force Default of HVACHeat IsExisting"   	HVACHeat:IsExisting	= { if (Status == 1) then 1 else 0 endif }
;	"Force consistent HVACHeat IsVerified"		HVACHeat:IsVerified	= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
END
;*************************************************************************
RULELIST "Initialize_HVACCool_Status" 1 0 0 0
	"Initialize HVACCool IsNew"   		HVACCool:IsNew			= { 0 }
	"Initialize HVACCool IsAltered"   	HVACCool:IsAltered	= { 0 }
	"Initialize HVACCool IsExisting"   	HVACCool:IsExisting	= { 0 }
END
;*************************************************************************
; SAC 8/28/16 - these flags now set above in 'ForceDefaults_HVACSys_Status' based on assignments from HVACSys (tic #728)
;RULELIST "ForceDefaults_HVACCool_Status" 1 0 0 0
;	"Force Default of HVACCool IsNew"   		HVACCool:IsNew			= { if (Status == 3) then 1 else 0 endif }
;	"Force Default of HVACCool IsAltered"   	HVACCool:IsAltered	= { if (Status == 2) then 1 else 0 endif }
;	"Force Default of HVACCool IsExisting"   	HVACCool:IsExisting	= { if (Status == 1) then 1 else 0 endif }
;;	"Force consistent HVACCool IsVerified"		HVACCool:IsVerified	= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
;END
;*************************************************************************  ; SAC 10/24/17 - tic #909
RULELIST "Initialize_HVACHtPump_Status" 1 0 0 0
	"Initialize HVACHtPump IsNew"   		HVACHtPump:IsNew			= { 0 }
	"Initialize HVACHtPump IsAltered"   HVACHtPump:IsAltered		= { 0 }
	"Initialize HVACHtPump IsExisting"  HVACHtPump:IsExisting	= { 0 }
END
;*************************************************************************
; SAC 10/24/17 - these flags now set above in 'ForceDefaults_HVACSys_Status' based on assignments from HVACSys (tic #909)
;RULELIST "ForceDefaults_HVACHtPump_Status" 1 0 0 0
;	"Force Default of HVACHtPump IsNew"   			HVACHtPump:IsNew			= { if (Status == 3) then 1 else 0 endif }
;	"Force Default of HVACHtPump IsAltered"   	HVACHtPump:IsAltered		= { if (Status == 2) then 1 else 0 endif }
;	"Force Default of HVACHtPump IsExisting"   	HVACHtPump:IsExisting	= { if (Status == 1) then 1 else 0 endif }
;;	"Force consistent HVACHtPump IsVerified"		HVACHtPump:IsVerified	= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
;END
;*************************************************************************
;RULELIST "ForceDefaults_HVACFan_Status" 1 0 0 0			; mjb		8/21/14	- removed to implement CEC decision to NOT allow fan E+A+A mods independent of HVACSys mods
;*************************************************************************
;	"Force Default of HVACFan IsNew"   			HVACFan:IsNew			= { if (Status == 3) then 1 else 0 endif }
;	"Force Default of HVACFan IsAltered"   	HVACFan:IsAltered		= { if (Status == 2) then 1 else 0 endif }
;	"Force Default of HVACFan IsExisting"   	HVACFan:IsExisting	= { if (Status == 1) then 1 else 0 endif }
;	"Force consistent HVACFan IsVerified"		HVACFan:IsVerified	= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
;END
;*************************************************************************
RULELIST "ForceDefaults_HVACDist_Status" 1 0 0 0
;*************************************************************************
	"Force Default of HVACDist IsNew"   		HVACDist:IsNew			= { if (Status == 3) then 1 else 0 endif }
	"Force Default of HVACDist IsAltered"   	HVACDist:IsAltered	= { if (Status == 2) then 1 else 0 endif }
	"Force Default of HVACDist IsExisting"   	HVACDist:IsExisting	= { if (Status == 1) then 1 else 0 endif }
	"Force consistent HVACDist IsVerified"		HVACDist:IsVerified	= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
END
;*************************************************************************
RULELIST "ForceDefaults_DHWSys_Status" 1 0 0 0
;*************************************************************************
	"Force Default of DHWSys IsNew"   			DHWSys:IsNew			= { if (Status == 3) then 1 else 0 endif }
	"Force Default of DHWSys IsAltered"   		DHWSys:IsAltered		= { if (Status == 2) then 1 else 0 endif }
	"Force Default of DHWSys IsExisting"   	DHWSys:IsExisting		= { if (Status == 1) then 1 else 0 endif }
	"Force consistent DHWSys IsVerified"		DHWSys:IsVerified		= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
END
;*************************************************************************
RULELIST "ForceDefaults_DHWHeater_Status" 1 0 0 0
;*************************************************************************
	"Force Default of DHWHeater IsNew"   			DHWHeater:IsNew			= { if (Status == 3) then 1 else 0 endif }
	"Force Default of DHWHeater IsAltered"   		DHWHeater:IsAltered		= { if (Status == 2) then 1 else 0 endif }
	"Force Default of DHWHeater IsExisting"   	DHWHeater:IsExisting		= { if (Status == 1) then 1 else 0 endif }
;	"Force consistent DHWHeater IsVerified"		DHWHeater:IsVerified		= { if (IsNew > 0.5) then 0 else UNCHANGED endif }
END
;*************************************************************************


;*************************************************************************
;*************************************************************************

ENDFILE

