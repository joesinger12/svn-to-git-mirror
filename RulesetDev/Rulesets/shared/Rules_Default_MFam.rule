; -------------------------------------------------------------------------
; Rules pertaining to:   Defaulting the Proposed Building Model (excluding Constructions & HVAC)
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2014, California Energy Commission
; Copyright (c) 2012-2014, Wrightsoft Corporation
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
;STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------

ENUM_PROPERTIES_VALUE   ; ensures retrieval/logic/us of enum properties assume numeric value (alternative is ENUM_PROPERTIES_STRING)

; based on Res rules: Rules_Default.rule - paired down to apply only to MFam model data - SAC 10/07/21 (MFam)
;*************************************************************************
RULELIST "ProposedInput_MFam" 0 0 0 0
;*************************************************************************

; duplicate or unnecessary rules, those needed mostly ported to Com's ResProject-Multifamily.rule module - SAC 10/07/21 & 10/07/21
;   "Set or increment ResProj:DefaultingRounds"     ResProj:DefaultingRounds  =         ; SAC 2/3/20
;      {  if (IfValidAnd( DefaultingRounds > 0 )==0) then  1
;         else  DefaultingRounds + 1  endif  }
;
;   ;--------------------------------------------------------------------
;   ; ProposedInput: Analysis and Site Rules
;   ;--------------------------------------------------------------------
;
;   "Init ResProj:ExEDR_Defaults"    ResProj:ExEDR_Defaults  = {  0  }  ; Whether or not Existing EDR defaulting is active for this model - SAC 5/24/17
;
;	"Set ResProj:RuleRepoRev"		                        ResProj:Action	= {	EvalRulelist( "Set_RuleRepoRev" )  }
;	"Set various Code & Program Version properties"		ResProj:Action	= {	EvalRulelist( "Default_CodeVersion" )  }
;
;   "Reset ResProj:ResAnalysisType if invalid"      ResProj:Action  = {
;         if (LocalSymbolInvalid( ResAnalysisType )) then  EvalRulelist( "ForceReset_ResAnalysisType" )
;         else  UNCHANGED  endif  }
;
;   "Initialize ResProject Err** Code to 0"
;     ResProj:ErrorCode = { 0 }
;
;; removed - SAC 10/07/21 (MFam)
;;   "Set ResProj:CSEinclDHWMFL_EU - lag indicating whether or not CSE results will include the DhwMFL enduse"   ; SAC 2/27/18   ; SAC 10/29/19
;;      ResProj:CSEinclDHWMFL_EU  = {
;;         if (IfValidAnd( CSEName = "CSE19" ) .OR.
;;             IfValidAnd( CSEName = "CSE19-860" )) then  1  else  0  endif  }
;
;;   ; SAC 1/25/17 - rules to populate entire model based on summary inputs present in "Model" object
;;   "Default model object"        Model:Action = {  EvalRulelist( "Default_Model" )  }
;;   "Generate building model"     ResProj:Action  = {
;;         if (IfValidAnd( EnergyCodeYearNum = 0 )==0 .OR.
;;             ComponentCount( Model ) < 1 .OR. ComponentCount( Zone ) > 0) then  UNCHANGED
;;         else  EvalRulelist( "GenerateModel" )  endif  }
;
;   "Initialize ResProj:EnableResearchMode"         ResProj:EnableResearchMode  = {
;         if (LocalStatus( EnableResearchMode ) < 0.5) then  0  else  UNCHANGED  endif  }
;   "Initialize ResProj:AllowNegativeDesignRatings" ResProj:AllowNegativeDesignRatings  = {
;         if (LocalStatus( AllowNegativeDesignRatings ) < 0.5) then  0  else  UNCHANGED  endif  }   ; SAC 1/11/18
;   "Initialize ResProj:CalcCO2DesignRatings"       ResProj:CalcCO2DesignRatings  = {
;         if (LocalStatus( CalcCO2DesignRatings ) < 0.5) then  0  else  UNCHANGED  endif  }   ; SAC 1/27/18
;	; no default of ResProj:RetainRuleDefaults - Boolean (0/1) to override file save of all rule defaults as user inputs   ; SAC 2/4/16
;
;   "Initialize ResProj:ShuffleSFamDHW"    ResProj:ShuffleSFamDHW =                           ; SAC 05/13/21   ; default to 0 for 2019, 1 for 2022+ - SAC 06/24/21
;      {  if (LocalStatus( ShuffleSFamDHW ) < 0.5)
;         then  if (EnergyCodeYearNum < 2022)
;               then  0
;               else  1  endif
;         else  UNCHANGED  endif  }
;   "Set ResProj:ShuffleSFamDHWMsg"     ResProj:ShuffleSFamDHWMsg =      ; SAC 06/24/21
;      {  if (IfValidAnd( IsMultiFamily > 0 )==0 .AND. ResAnalysisType >= 13)
;         then  if (EnergyCodeYearNum < 2022 .AND. ShuffleSFamDHW > 0)
;               then  Format( "activation of DHW draw profile shuffling, which is invalid for %g compliance analysis", EnergyCodeYearNum )
;               else if (EnergyCodeYearNum >= 2022 .AND. ShuffleSFamDHW < 1)
;               then  Format( "deactivation of DHW draw profile shuffling, which is required for %g compliance analysis", EnergyCodeYearNum )
;               else  UNDEFINED  endif endif
;         else  UNDEFINED  endif  }
;   "Set ResProj:ShuffleSFamDHWNum"        ResProj:ShuffleSFamDHWNum =
;      {  if (IfValidAnd( IsMultiFamily > 0 )==0 .AND. ShuffleSFamDHW > 0.5) then  5  else  0  endif  }
;
;   "Initialize ResProj:EnableRHERS"                ResProj:EnableRHERS  =     ; SAC 11/8/19
;      {  if (LocalStatus( EnableRHERS ) < 0.5) then  0  else  UNCHANGED  endif  }
;   ; ResProj:CalcRHERSEnergyRtgIdx - no default
;   "Set ResProj:RHERSEnabled - flag indicating whether RESNET HERS inputs, calcs & results are enabled"
;      ResProj:RHERSEnabled  = {  if (EnableRHERS > 0 .AND. IfValidAnd( CalcRHERSEnergyRtgIdx > 0 )) then  1  else  0  endif  }
;
;   ; moved StdDesignFuel & DRtgDesignFuel rules from here down to end of defaulting rules, since now can depend on other model defaulting - SAC 02/05/21
;
;   "Set ResProj:AllowStdDesignFuel (iff undefined)"            ResProj:AllowStdDesignFuel =              ; SAC 04/02/21
;      {  if (LocalStatus( AllowStdDesignFuel         ) < 1) then  0  else  UNCHANGED  endif  }
;   "Set ResProj:ApplyStdDesignIAQFromTable (iff undefined)"    ResProj:ApplyStdDesignIAQFromTable =      ; SAC 04/03/21
;      {  if (LocalStatus( ApplyStdDesignIAQFromTable ) < 1) then  0  else  UNCHANGED  endif  }
;
;	"Default ResProj:ComplianceReportPDF"			ResProj:ComplianceReportPDF	= {	0  }		; SAC 8/14/13
;	"Default ResProj:ComplianceReportXML"			ResProj:ComplianceReportXML	= {	0  }
;
;   "Default ResProj:SpecifyWeatherFN"     ResProj:SpecifyWeatherFN  = {  0  }    ; SAC 5/17/19
;  ; SAC 4/21/19 - added reference to WeatherFileKey property to facilitate alternate weather file batch processing (reserch only)
;  ; SAC 5/17/19 - added logic to retain user-specified weather filename for analysis if BypassRuleLimits activated
;   "Call subordinate rulelist to setup simulation weather file (ResProj:WeatherFileName)"    ResProj:Action  =    ; SAC 4/22/19
;      {  if (ResAnalysisType == 0 .AND. LocalStatus( WeatherFileName ) > 5) then  UNCHANGED		; Research mode
;         else if (IfValidAnd( BypassRuleLimits > 0 ) .AND. LocalStatus( WeatherFileKey ) > 0 .AND. ClimateZone > 0)
;         then  EvalRulelist( "Set_WeatherFileName_ViaKey" )
;         else if (IfValidAnd( BypassRuleLimits > 0 ) .AND. IfValidAnd( SpecifyWeatherFN > 0 ) .AND.
;                  LocalStatus( WeatherFileName ) > 5) then  UNCHANGED
;         else  EvalRulelist( "Default_WeatherFileName" )  endif endif endif  }

   "Set ResProj:WeatherFileName to same as Com"    ResProj:WeatherFileName = {  Proj:AnnualWeatherFileNoPath  }      ; SAC 10/27/21 (MFam)

;   "Set ResProj:WeatherFileSetMsg"     ResProj:WeatherFileSetMsg  =     ; SAC 6/9/19
;      {  UNDEFINED  }
;      ;{  if (EnergyCodeYearNum = 2022 .AND. WeatherFileSet > 0)                                             - SAC 8/26/19 - remove limitation on 2022 EDR calcs
;      ;   then  "Warning:  EDR results can only be calculated for the '(default)' weather set."
;      ;   else  UNDEFINED  endif  }
;
;	"Init ResProj:DHWWthrFileName"		ResProj:DHWWthrFileName	= {	UNDEFINED  }   ; not defined for CEC Title-24 analysis (DLL-based weather used)
;	"Set ResProj:DHWHour2to1Mult - based on weekday DHW usage profile hr2/hr1 from ACM ref manual"		ResProj:DHWHour2to1Mult	= {	14/8  }		; SAC 4/17/15 - workaround for DHW DLL issue where prop & std results differ (GC 468)
;
;   "Force reset of Proj:StandardsVersion for early/test 2019 ResProjects"    ResProj:Action  =     ; SAC 6/7/19 - added logic to cover 2022 rules as well
;      {  if (LocalStatus( StandardsVersion ) > 6 .AND.
;             ( (IfValidAnd( StandardsVersion = 2017 ) .AND. IfValidAnd( StdDesignBase = 2019 )) .OR.
;               (IfValidAnd( StandardsVersion = 2020 ) .AND. IfValidAnd( StdDesignBase = 2022 )) ))
;         then  EvalRulelist( "ForceReset_StandardsVersion" )
;         else  UNCHANGED  endif  }
;	; defaulted via enumerations:  "StandardsVersion",  BEMP_Sym,  1,  0,  0, "",                 0,  0,                           1003, "determines which federal appliance efficiency requirements for cooling & heating equipment apply to this ResProject"   
;	"Set ResProj:StandardsVerLabel"	ResProj:StandardsVerLabel	= {
;			switch (StandardsVersion)
;				case 2014 :  if (StdDesignBase == 2014) then  " "  else  "valid through December 2014 (with current Federal Air Conditioning efficiency requirements)"  endif
;				case 2015 :  "any time (with 2015 Federal Air Conditioning Requirements) and solar credit"
;				default   :  " "  ; unrecognized
;			endswitch  }

   ; added CALGreen & TDVType defaulting and resets
   "Default ResProj:CALGreen"    ResProj:CALGreen  = {   0  }
;   "Force reset of ResProj:TDVType if necessary"   ResProj:Action = {
;         if (CALGreen = 0 .AND. TDVType > 1)
;         then  EvalRulelist( "ForceDefault_TDVType_Std" )
;         else if (CALGreen > 0 .AND. TDVType < 2)
;         then  EvalRulelist( "ForceDefault_TDVType_CALGreen" )
;         else  UNCHANGED  endif endif  }

	"Set ResProj:WinOvrhngGraphic"		ResProj:WinOvrhngGraphic	= {	"WinOvrhng.jpg"  }
	"Set ResProj:WinFinGraphic"			ResProj:WinFinGraphic		= {	"WinFin.jpg"  }

	"Set ResProj:RunNumber"					ResProj:RunNumber				= {	if (LocalStatus( RunNumber ) < 1) then   0   else  UNCHANGED  endif  }
	"Set ResProj:RunID"						ResProj:RunID					= {	"User"		}
	"Set ResProj:RunIDProcFile"			ResProj:RunIDProcFile		= {	" - User"	}
	"Set ResProj:RunAbbrev"					ResProj:RunAbbrev				= {	if (LocalStatus( RunAbbrev ) < 1) then  "u"  else  UNCHANGED  endif  }

	; default to 'Compliance' - logic designed to facilitate setting/resetting this based on INI settings
	"Default ResProj:SimSpeedOption"		ResProj:SimSpeedOption		= {	if (LocalStatus( SimSpeedOption ) < 0.5) then  0  else  UNCHANGED  endif  }
	"Default SimSpeedOption-related properties enabling user customization"		ResProj:Action	= {	EvalRulelist( "Default_SimSpeedOption" )  }

   "Set ResProj:MaxDuctFracArea - Max duct surface area as a fraction of the sum of all zone surface + duct areas"   ; SAC 5/31/17 - tic #621   
      ResProj:MaxDuctFracArea     = {  0.45  }
   "Set ResProj:DuctInsRValPerInch - Estimate of duct insulation R-value per inch, used to calculate duct surface areas"   ; SAC 5/31/17 - tic #621   
      ResProj:DuctInsRValPerInch  = {  3  }

	; SAC 10/7/13 - added to INI-file enabled features
	"Default ResProj:EnableRptIncFile"		ResProj:EnableRptIncFile		= {	if (LocalStatus( EnableRptIncFile   ) < 0.5) then  0  else  UNCHANGED  endif  }
	"Default ResProj:EnableVarFlowOAV"		ResProj:EnableVarFlowOAV		= {	if (LocalStatus( EnableVarFlowOAV   ) < 0.5) then  1  else  UNCHANGED  endif  }		; SAC 8/7/14 - turn ON by default
	"Default ResProj:EnableFixedFlowOAV"	ResProj:EnableFixedFlowOAV		= {	if (LocalStatus( EnableFixedFlowOAV ) < 0.5) then  1  else  UNCHANGED  endif  }

   ; properties managing feature to perform ruleset table replacements @ start of analysis - SAC 12/14/20
   ;      "ReplaceRuleTableFile",   BEMP_Str,  5,  1,  0, "",            0,  0,                           1001, "replace ruleset table path/filename" 
   "default ResProj:ReplaceRuleTable[1]"     ResProj:ReplaceRuleTable[1] = {  if (LocalStatus( ReplaceRuleTableString[1] ) > 5 .AND. EnableResearchMode > 0) then  ReplaceRuleTableString[1]  else  UNDEFINED  endif  }
   "default ResProj:ReplaceRuleTable[2]"     ResProj:ReplaceRuleTable[2] = {  if (LocalStatus( ReplaceRuleTableString[2] ) > 5 .AND. EnableResearchMode > 0) then  ReplaceRuleTableString[2]  else  UNDEFINED  endif  }
   "default ResProj:ReplaceRuleTable[3]"     ResProj:ReplaceRuleTable[3] = {  if (LocalStatus( ReplaceRuleTableString[3] ) > 5 .AND. EnableResearchMode > 0) then  ReplaceRuleTableString[3]  else  UNDEFINED  endif  }
   "default ResProj:ReplaceRuleTable[4]"     ResProj:ReplaceRuleTable[4] = {  if (LocalStatus( ReplaceRuleTableString[4] ) > 5 .AND. EnableResearchMode > 0) then  ReplaceRuleTableString[4]  else  UNDEFINED  endif  }
   "default ResProj:ReplaceRuleTable[5]"     ResProj:ReplaceRuleTable[5] = {  if (LocalStatus( ReplaceRuleTableString[5] ) > 5 .AND. EnableResearchMode > 0) then  ReplaceRuleTableString[5]  else  UNDEFINED  endif  }
   "default ResProj:ReplaceRuleTableString[1]"  ResProj:ReplaceRuleTableString[1] = {  if (IfValidAnd( ReplaceRuleTable[1] > 0 ) .AND. EnableResearchMode > 0) then  EnumString( ReplaceRuleTable[1] )  else  UNDEFINED  endif  }
   "default ResProj:ReplaceRuleTableString[2]"  ResProj:ReplaceRuleTableString[2] = {  if (IfValidAnd( ReplaceRuleTable[2] > 0 ) .AND. EnableResearchMode > 0) then  EnumString( ReplaceRuleTable[2] )  else  UNDEFINED  endif  }
   "default ResProj:ReplaceRuleTableString[3]"  ResProj:ReplaceRuleTableString[3] = {  if (IfValidAnd( ReplaceRuleTable[3] > 0 ) .AND. EnableResearchMode > 0) then  EnumString( ReplaceRuleTable[3] )  else  UNDEFINED  endif  }
   "default ResProj:ReplaceRuleTableString[4]"  ResProj:ReplaceRuleTableString[4] = {  if (IfValidAnd( ReplaceRuleTable[4] > 0 ) .AND. EnableResearchMode > 0) then  EnumString( ReplaceRuleTable[4] )  else  UNDEFINED  endif  }
   "default ResProj:ReplaceRuleTableString[5]"  ResProj:ReplaceRuleTableString[5] = {  if (IfValidAnd( ReplaceRuleTable[5] > 0 ) .AND. EnableResearchMode > 0) then  EnumString( ReplaceRuleTable[5] )  else  UNDEFINED  endif  }

   "Default ResProj:ReportInclPropOnly - whether or not ReportIncludeFile to be used in Proposed (1) or all (0) runs"   ; SAC 9/4/17
      ResProj:ReportInclPropOnly    = {  1  }

; duplicate or unnecessary rules, those needed mostly ported to Com's ResProject-Multifamily.rule module - SAC 10/07/21 & 10/07/21
;	; SAC 6/2/14 - added BypassRuleLimits to properties that can be set from INI-file...
;	"Default ResProj:BypassRuleLimits"		ResProj:BypassRuleLimits		= {	if (LocalStatus( BypassRuleLimits   ) > 0.5) then  UNCHANGED
;	                                                                     else if (ResAnalysisType == 2) then  3    ; CA Res Existing EDR
;	                                                                     else  0  endif endif  }
;      ; "dbg" ResProj:Action = { PostMessageToLog( "Evaluating 'ProposedInput' rulelist w/ BypassRuleLimits = %g", BypassRuleLimits ) }  ; SAC 1/9/19 - debugging live vs. batch processing
;
;   ; SAC 5/10/19 - remove (without resets) user specification of HP AutoSize
;   ; SAC 6/21/19 - revised HVACHtPump:AutoSize reset to relax for EnableHPAutosize (as opposed to the more generic BypassRuleLimits)
;   "Reset HVACHtPump:AutoSize if not EnableHPAutosize"   HVACHtPump:Action  =
;      {  if (IfValidAnd( AutoSize > 0 ) .AND. IfValidAnd( ResProj:EnableHPAutosize > 0 )==0)
;         then  EvalRulelist( "Blast_HtPump_AutoSize_NoResets", 1 )
;         else  UNCHANGED  endif  }
;
;   ; SAC 10/30/16 - added vintage defaulting for Existing EDR runs
;   ; ResProj:YearBuilt,             Required,   0,    1,   1,    1,  1,  1
;   "Default ResProj:YearRoof"          ResProj:YearRoof        = {
;         if (LocalStatus( YearBuilt ) < 1) then  UNDEFINED  else  YearBuilt  endif  }
;   "Default ResProj:YearWindows"       ResProj:YearWindows     = {
;         if (LocalStatus( YearBuilt ) < 1) then  UNDEFINED  else  YearBuilt  endif  }
;   "Default ResProj:YearEnvelope"      ResProj:YearEnvelope    = {
;         if (LocalStatus( YearBuilt ) < 1) then  UNDEFINED  else  YearBuilt  endif  }
;   "Default ResProj:YearAppliances"    ResProj:YearAppliances  = {
;         if (LocalStatus( YearBuilt ) < 1) then  UNDEFINED  else  YearBuilt  endif  }
;   "Default ResProj:YearLighting"      ResProj:YearLighting    = {
;         if (LocalStatus( YearBuilt ) < 1) then  UNDEFINED  else  YearBuilt  endif  }
;   "Default ResProj:YearHVAC"          ResProj:YearHVAC        = {
;         if (LocalStatus( YearBuilt ) < 1) then  UNDEFINED  else  YearBuilt  endif  }
;   "Default ResProj:YearWaterHtg"      ResProj:YearWaterHtg    = {
;         if (LocalStatus( YearBuilt ) < 1) then  UNDEFINED  else  YearBuilt  endif  }
;
;   "Default ExEDR ResProj:DfltExWin* properties"    ResProj:Action  = {
;         if (IfValidAnd( ResProj:ExEDR_Defaults > 0 ))
;         then  EvalRulelist( "ExEDRDefault_ResProj_DfltWinProperties" )
;         else  UNCHANGED  endif  }
;
;   ; SAC 11/3/15 - ensure DHWCalcMethod = "CSE" for all runs where BypassRuleLimits not activated
;   ; SAC 7/29/18 - removed all logic pertaining to DHWCalcMethod (related to transition from T24DHW DLLs to CSE)
;	"Hardwire ResProj:DHWCalcMethod to 'CSE' if BypassRuleLimits missing or < 2"	ResProj:Action		= {
;											if (IfValidAnd( DHWCalcMethod = 1 )) then  UNCHANGED
;											else	EvalRulelist( "ForceDefault_DHWCalcMethod_CSE" )  endif  }
;
;	"Set ResProj:ResultSummary[1] based on EUseSummary:ResProjAssignFirst"		ResProj:ResultSummary[1]	= {	if (LocalCompAssigned( ResultSummary[1] ) > 0) then  UNCHANGED
;																																		else	MaxAllComp( EUseSummary:ResProjAssignFirst )  endif  }		; SAC 3/3/16 - tic #609
;
;;	mjb 4/24/14	- Additions Alone params defaulted
;	"Default ResProj:IsAddAlone"			ResProj:IsAddAlone			= {	0	}
;	"Default ResProj:AdditionCFAFrac"	ResProj:AdditionCFAFrac		= {	1	}
;	"Force resets for non-New Cons (necessary for third party analysis)"		ResProj:Action	= {	if (RunScope == 1 .OR. (IsAddAlone == 0 .AND. AdditionCFAFrac == 1)) then  UNCHANGED
;																															else	EvalRulelist( "ForceDefault_IsAddAlone_AddFrac" )  endif  }
;
;  ; SAC 2/9/15 - flag documenting requirement of alterations including at least 2 categories of upgraded component(s)
;	"Default ResProj:AlterIncl2Categs"	ResProj:AlterIncl2Categs	= {	0	}
;
;	"Default ResProj:ProjInclKitchen"	ResProj:ProjInclKitchen  = {
;	      if (RunScope == 1 .AND. IsAddAlone == 0) then  1  else  0  endif  }     ; SAC 3/8/19 (tic #1085)
;
;; mjb 9/30/14 - Default HVACSysStatus for IsAddAlone = 1
;	"Conditional Default Zone:HVACSysStatus"			Zone:HVACSysStatus			= {	if (ResProj:IsAddAlone > 0.5) then 	3 else UNCHANGED endif	}		; HVACSysStatus set to NEW if IsAddAlone
;
;
;   ;--------------------------------------------------------------------
;   ; ProposedInput: Season Change Temperature & 
;   ;--------------------------------------------------------------------
;
;   "Force reset of SeasonChangeSetpt and/or FanVentLockoutTemp if not BypassRuleLimits or EnableResearchMode"  ResProj:Action  =    ; SAC 2/7/20
;      {  if (IfValidAnd( BypassRuleLimits > 0 ) .OR. IfValidAnd( EnableResearchMode > 0 )) then  UNCHANGED
;         else if (LocalStatus( SeasonChangeSetpt ) < 5 .AND. LocalStatus( FanVentLockoutTemp )) then  UNCHANGED
;         else  EvalRulelist( "ForceReset_SeasonFanVentTemps" )  endif endif  }
;	"Default ResProj:SeasonChangeSetpt"		ResProj:SeasonChangeSetpt	= {	60  }		; SAC 4/3/14
;	"Default ResProj:FanVentLockoutTemp"	ResProj:FanVentLockoutTemp	= {	68  }		; SAC 4/8/14	- SAC 4/23/14 - updated default from 66 -> 68 (per Bruce request)
;
;   ;--------------------------------------------------------------------
;	; SAC 3/23/15 - moved up here ABOVE DesignRating rules since this setting effects setting of AllowDesignRating
;	"Default ResProj:IsMultiFamily"			ResProj:IsMultiFamily    	= {	0  }
;
;   "Set ResProj:CSEVentAvailZonal - whether to model zone-level vent control"    ResProj:CSEVentAvailZonal =      ; SAC 7/12/20 - toggle ON for all MFam models starting in ver 2019.2.0
;      {  if (IsMultiFamily .AND. IfValidAnd( AnalysisVersion >= 220000 )) then  1  else  0  endif  }
;   "Set ResProj:NResLeakageRatio - ratio of NRes surface leakage (per ft2) / Res surface leakage"     ResProj:NResLeakageRatio =    ; SAC 7/12/20
;      {  if (CSEVentAvailZonal) then  1.8  else  UNDEFINED  endif  }
;   "Set ResProj:IntSurfHoleSzRatio[1] - ratio of hole size / wall size for int surfaces (1-between Res units)"    ResProj:IntSurfHoleSzRatio[1] =     ; SAC 7/13/20
;      {  0.0005  }
;   "Set ResProj:IntSurfHoleSzRatio[2] - ratio of hole size / wall size for int surfaces (2-other than between Res units)"     ResProj:IntSurfHoleSzRatio[2] =     ; SAC 7/13/20
;      {  0.0005  }
;   ; multiplier on natural ventilation wind pressure coefficient by number of window orientations (1-4)
;   "Set ResProj:NatVentWindPresCoefMult[1] - 1 window orientation"   ResProj:NatVentWindPresCoefMult[1] = {  1  }       ; SAC 7/13/20
;   "Set ResProj:NatVentWindPresCoefMult[2] - 2 window orientations"  ResProj:NatVentWindPresCoefMult[2] = {  1  }
;   "Set ResProj:NatVentWindPresCoefMult[3] - 3 window orientations"  ResProj:NatVentWindPresCoefMult[3] = {  1  }
;   "Set ResProj:NatVentWindPresCoefMult[4] - 4 window orientations"  ResProj:NatVentWindPresCoefMult[4] = {  1  }
;
;   ; moved rule to set ResProj:DefaultIAQFanPwr into separate rulelist to be called in multiple spots - SAC 08/27/20
;   "Set ResProj:DefaultIAQFanPwr via rulelist"  ResProj:Action = {  EvalRulelist( "Set_ResProj_DefaultIAQFanPwr" )  }
;
;; SAC 4/15/15 - added ResProj:MultiFamilyType and related properties
;	; ResProj:MultiFamilyType - defaults to "Other" via Enums definitions
;	"Blast ResProj:MultiFamilyType if not set to 'Other' - pending final implementation plans/design"		; SAC 4/28/15 - disable initial duplex/townhome options (issue 508/365)
;			ResProj:Action		= {	if (MultiFamilyType != 3) then  EvalRulelist( "ForceReset_MultiFamilyType" )  else  UNCHANGED  endif  }
;
;	"Set ResProj:IsMFamDuplex"			ResProj:IsMFamDuplex			= {	if (IsMultiFamily > 0.5 .AND.  MultiFamilyType == 1) then  1  else  0  endif  }
;	"Set ResProj:IsMFamTownhm"			ResProj:IsMFamTownhm			= {	if (IsMultiFamily > 0.5 .AND.  MultiFamilyType == 2) then  1  else  0  endif  }  
;	"Set ResProj:IsMFamDupOrTownhm"	ResProj:IsMFamDupOrTownhm	= {	if (IsMultiFamily > 0.5 .AND. (MultiFamilyType == 1 .OR. MultiFamilyType == 2)) then  1  else  0  endif  }  
;
;	"Set ResProj:BuildingTypeRpt"		ResProj:BuildingTypeRpt		= {	if (IsMultiFamily < 0.5) then  "Single Family"
;																					else	switch (MultiFamilyType)
;																								case  1 :	"Duplex (multifamily)"
;																								case  2 :	"Townhomes (multifamily)"
;																								case  3 :	"Multifamily"
;																								default :	UNDEFINED
;																							endswitch  endif  }
;
;   "Set ResProj:BldgTypeTblStr - Building type string used in code look-up tables (T24RClimateZoneCodeBase:*)"  ; SAC 6/5/17
;      ResProj:BldgTypeTblStr   = {  if (IsMultiFamily < 0.5)
;                                 then  "SingleFam"
;                                 else  "MultiFam"  endif  }   ; possibly expand to incl. Duplex &/or TownHome in future...
;
;
;   ;--------------------------------------------------------------------
;   ; ProposedInput: Default for Standard Design Code Baseline
;	; mjb 1/12/15 - needed for Design Rating calcs
;   ;--------------------------------------------------------------------
;; SAC 3/23/15 - removed default here, since we set 2013/2016 default via separate 2013/2016 Enum definitions
;;	"Default ResProj:StdDesignBase"			ResProj:StdDesignBase		= {	2013  }		; ensures proper defaulting for ruleset-specific standard design
;
;; SAC 11/17/15 - add rule to default Proj:StandardsVersion only in the case it is undefined, which can happen following a ruleset switch due to reset of ResProj:StdDesignBase
;	"Default Proj:StandardsVersion"		Proj:StandardsVersion	= {	if (LocalStatus( StandardsVersion ) < 1 .AND. LocalStatus( StdDesignBase ) > 0)
;																							then	switch (StdDesignBase)
;																										case  2013 :  2015		; T-24 2013
;																										case  2016 :  2017		; T-24 2016
;																										case  2019 :  2020		; T-24 2019
;																										case  2022 :  2023		; T-24 2022 - SAC 6/7/19
;																										case  2008 :  2010		; T-24 2008
;																										case  2006 :  2007		; IECC 2006
;																										default :  UNCHANGED		; error
;																									endswitch
;																							else	UNCHANGED  endif  }
;
;   ; SAC 3/23/15 - prevent design rating calcs for multi-family, additions/alterations or addition alone runs
;	"Set ResProj:CompCodeBase - keeps track of the initial StdDesignBase - not changed to design rating base during analysis"
;			ResProj:CompCodeBase	= {	if (RunNumber < 1) then  StdDesignBase  else  UNCHANGED  endif  }
;
;	; SAC 4/13/16 - IntGainsMethod used to differentiate between 2013 & 2016 CA-24 internal gains
;	"Set ResProj:IntGainsMethod"	ResProj:IntGainsMethod	= {	if (StdDesignBase < 2016 .OR. DRtgRefRunID == 2014) then  2013
;																			else	2016  endif  }

   "Set ResProj:TDVTableName - name of TDV data table used to calculate EDR2 compliance results"   ResProj:TDVTableName  =       ; SAC 6/10/19 - 2022
;      {  if (EnergyCodeYearNum = 2022 .AND. (EDR2Metric = 2 .OR. EDR2Metric = 12))   ; SAC 3/3/20 - mod to remove EDR2Metric option from 2022 analysis (just single TDV/SrcEnergy/CO2 per ruleset binary)
      {  if (EnergyCodeYearNum >= 2022)
         then  "TDVM02Table"
         else  "TDVTable"
         endif  }

;   "Set ResProj:TDVTableCols[1] - column of Elec multipliers in TDV data table"     ResProj:TDVTableCols[1]  = {  ((ClimateZone-1) * 3) + 1  }         ; SAC 5/3/20 (FlexibilityCredit)
;   "Set ResProj:TDVTableCols[2] - column of NGas multipliers in TDV data table"     ResProj:TDVTableCols[2]  = {  ((ClimateZone-1) * 3) + 2  }
;   "Set ResProj:TDVTableCols[3] - column of Othr multipliers in TDV data table"     ResProj:TDVTableCols[3]  = {  ((ClimateZone-1) * 3) + 3  }
;
;   "Set ResProj:EDR1TableName - name of hourly CZ/Fuel multiplier table used to calculate EDR1 compliance results"   ResProj:EDR1TableName  =       ; SAC 6/10/19 - 2022   ; SAC 9/17/19
;      {  if (EnergyCodeYearNum = 2022)
;         then  "T24SrcEnergyTable"
;         else  UNDEFINED
;         endif  }
;
;   "Set ResProj:TDVMult_Elec"    ResProj:TDVMult_Elec    =        ; SAC 8/23/19 - multipliers to enable 2022+ TDV & SrcEnergy tables to remain in original (E3) units
;      {  switch (TDVTableName)
;            case "TDVM02Table" :  1/3.413
;            default            :  1.0      endswitch  }
;   "Set ResProj:TDVMult_Fuel"    ResProj:TDVMult_Fuel    =
;      {  switch (TDVTableName)
;            case "TDVM02Table" :  0.01
;            default            :  1.0    endswitch  }
;   "Set ResProj:SrcMult_Elec"    ResProj:SrcMult_Elec   =
;      {  if (LocalStatus( EDR1TableName ) < 1) then  UNDEFINED
;         else  switch (EDR1TableName)
;                  case "T24SrcEnergyTable" :  1/3.413
;                  default                  :  1.0      endswitch  endif  }
;   "Set ResProj:SrcMult_Fuel"    ResProj:SrcMult_Fuel   =
;      {  if (LocalStatus( EDR1TableName ) < 1) then  UNDEFINED
;         else  switch (EDR1TableName)
;                  case "T24SrcEnergyTable" :  0.01
;                  default                  :  1.0   endswitch  endif  }
;
;   "Set ResProj:TDVSecMult_Elec"    ResProj:TDVSecMult_Elec    =        ; SAC 8/26/19 - multipliers to enable flexible secondary (CO2/GHG-based adders) TDV & SrcEnergy tables units
;      {  1/3.413  }     ; update w/ logic similar to above if/when secondary TDV (CO2/GHG-based adders) table switched units
;   "Set ResProj:TDVSecMult_Fuel"    ResProj:TDVSecMult_Fuel    =
;      {  0.01     }
;   "Set ResProj:SrcSecMult_Elec"    ResProj:SrcSecMult_Elec   =
;      {  if (LocalStatus( EDR1TableName ) < 1) then  UNDEFINED
;         else  1/3.413  endif  }     ; update w/ logic similar to above if/when secondary Src Energy (CO2/GHG-based adders) table switched units
;   "Set ResProj:SrcSecMult_Fuel"    ResProj:SrcSecMult_Fuel   =
;      {  if (LocalStatus( EDR1TableName ) < 1) then  UNDEFINED
;         else  0.01     endif  }
;
;   "Set ResProj:TrackSrcEnergy - whether or not Source Energy results are being tracked"     ResProj:TrackSrcEnergy  =        ; SAC 6/11/19 - 2022
;      {  if (LocalStatus( EDR1TableName ) < 1) then  0
;         else if (strlen( EDR1TableName ) > 0) then  1  else  0  endif endif  }
;
;   "Set ResProj:TDVEDRFuelMultMetric - string identifying set of TDV fuel adjustment mutlipliers used in design rating calcs"   ResProj:TDVEDRFuelMultMetric  =     ; SAC 6/25/19 - 2022  - SAC 7/8/19 - added No Fuel Adj options
;      {  if (EnergyCodeYearNum = 2019 .AND. IfValidAnd( AnalysisVersion <= 190101 ))
;         then  "ver19.1.0"
;         else  "-"  endif  }
;      ; SAC 8/31/19 - fuel adjustment mults removed from 2022 analysis
;      ;{  if (EnergyCodeYearNum = 2022)
;      ;   then  if (WeatherFileSet > 0) then  "-"
;      ;         else  switch (EDR2Metric)
;      ;                  case  0 :  "TDV_0"
;      ;                  case 10 :  "none"
;      ;                  case  2 :  "TDV_2"
;      ;                  case 12 :  "none"
;      ;                  default :  "-"
;      ;               endswitch  endif
;      ;   else  "-"
;      ;   endif  }
;   "Set ResProj:SrcEDRFuelMultMetric - string identifying set of SrcEnergy fuel adjustment mutlipliers used in design rating calcs"   ResProj:SrcEDRFuelMultMetric  =     ; SAC 6/25/19 - 2022
;      {  if (EnergyCodeYearNum = 2022)
;         then  if (WeatherFileSet > 0) then  "-"
;               else  "Src_5"  endif
;         else  "-"
;         endif  }
;
;;"store BEMProc details"		ResProj:Action = {  StoreBEMProc( "PropInput", 0 )  }
;;"debugging" ResProj:Action = { MessageBox( "checking before setting ResProj:AllowDesignRating:\n   IsMultiFamily = %g\n   RunScope = %g\n   IsAddAlone = %g\n   CompCodeBase = %g\n   BypassRuleLimits = %g", IsMultiFamily, RunScope, IsAddAlone, ValidOr( CompCodeBase, -1 ), ValidOr( BypassRuleLimits, -1 ) ) }
;	"Default ResProj:EnableEDR"	ResProj:EnableEDR		= {	0  }  ; if (LocalStatus( EnableEDR ) < 0.5) then  0  else  UNCHANGED  endif  }  - removed for MFam 2022+ - SAC 10/27/21

	; SAC 10/6/16 - turn off *DesignRating* settings for 2019 analysis  - SAC 4/5/17 - toggled back on for 2019
	"Set ResProj:AllowDesignRating"
	   ResProj:AllowDesignRating	= {	0  }   ; if (EnableEDR) then  1        - removed for MFam 2022+ - SAC 10/27/21
	                           ;      else if (RunScope == 1 .AND. IsAddAlone < 0.5 .AND.
	                           ;               IfValidAnd( CompCodeBase > 2015 ))
                              ;      then  1  else  0  endif endif  }
	;"Blast ResProj:DesignRatingCalcs if user-specified as Yes when not allowed -or- set to No but doing Existing EDR or 2019 NewCons analysis"
   ;   ResProj:Action	= {
   ;      if ( LocalStatus( DesignRatingCalcs ) > 6 .AND.
   ;           ( ( ResAnalysisType == 2 .OR.
   ;               (IfValidAnd( EnergyCodeYearNum >= 2019 ) .AND. RunScope == 1 .AND. IsAddAlone < 0.5) ) .AND.
   ;             AllowDesignRating > 0.5 .AND. IfValidAnd( DesignRatingCalcs < 0.5 ) ) .OR.
   ;           ( AllowDesignRating < 0.5 .AND. IfValidAnd( DesignRatingCalcs > 0.5 ) ) )
   ;      then  EvalRulelist( "ForceDefault_DesignRatingCalcs" )  else  UNCHANGED  endif  }
	"Default ResProj:DesignRatingCalcs"
	   ResProj:DesignRatingCalcs	= {
         if (AllowDesignRating < 0.5) then  0
         else if (ResAnalysisType == 2)
         then  1    ; CA Res Existing EDR
         else if (IfValidAnd( EnergyCodeYearNum >= 2019 ) .AND. RunScope == 1 .AND. IsAddAlone < 0.5)
         then  1    ; CA Res 2019 New Cons
         else  0  endif endif endif  }

; duplicate or unnecessary rules, those needed mostly ported to Com's ResProject-Multifamily.rule module - SAC 10/07/21 & 10/07/21
;	"Default ResProj:DesignRatingBase"		ResProj:DesignRatingBase	= {	2014  }		; default design rating base is 'IECC2006' / SAC 3/8/16 - updated default to 'RESNET2014'
;	"Call subordinate rulelist to override ResProj:DesignRatingBase when appropriate"		; SAC 3/21/16
;	   ResProj:Action		= {	if (AllowDesignRating > 0.5 .AND. DesignRatingCalcs > 0.5 .AND.
;	                            DesignRatingBase != 2014 .AND. IfValidAnd( BypassRuleLimits >= 3 )==0)
;									then	EvalRulelist( "ForceDefault_DesignRatingBase_RESNET2014" )
;									else	UNCHANGED  endif  }
;	   ; SAC 12/19/17 - switched input tab name from 'Analysis' to 'EDR/PV' (per request from CEC-LF)
;	"Set ResProj:DRtgResultsMsg"				ResProj:DRtgResultsMsg		=
;   ; DEPRECATED - refer to replacement properties EUseSummary:HideEDRs & EUseSummary:EDRMsg - SAC 6/26/19
;	   {  if (EnergyCodeYearNum >= 2019 .AND. AllowDesignRating < 0.5)
;	      then  Format( "Design Rating calcs not yet implemented for %g analysis.", EnergyCodeYearNum )  ; SAC 10/6/16 - 2019 msg
;         else if (AllowDesignRating < 0.5)
;         then  "Design Rating calcs currently available only for single family new construction analysis."
;         else if (DesignRatingCalcs < 0.5)
;         then  "Design Rating calcs must be toggled on in EDR/PV tab of ResProject data to view results here."
;         else  UNDEFINED  endif endif endif  }
;	"Set ResProj:DRtgRefRunID"					ResProj:DRtgRefRunID			= {	if (AllowDesignRating > 0.5 .AND. RunAbbrev == "dr") then  DesignRatingBase  else  0  endif  }		; SAC 3/9/16 - added to facilitate RESNET2014 rules
;
;	"Default ResProj:DRtgLtgCredit"			ResProj:DRtgLtgCredit		= {	0  }
;	"Default ResProj:DRtgLtgReduction"		ResProj:DRtgLtgReduction	= {	0  }
;	"Blast ResProj:DRtgLtg* if not allowed"	ResProj:Action	= {	if ((AllowDesignRating < 0.5 .OR. DesignRatingCalcs < 0.5 .OR. IfValidAnd( BypassRuleLimits >= 3 )==0) .AND.
;																					 (DRtgLtgCredit > 0.5 .OR. DRtgLtgReduction > 0))			then  EvalRulelist( "ForceDefault_DRtgLighting" )
;																				else if (DRtgLtgCredit < 0.5 .AND. DRtgLtgReduction > 0)		then  EvalRulelist( "ForceDefault_DRtgLightingReduction" )
;																				else  UNCHANGED  endif endif  }
;
;   "Default ResProj:AllowExcessPVEDR - Allow Excess PV Generation EDR Credit"   ; whether or not to allow excess PV generation (above cap based on proposed design electric use) to factor into EDR credit (toggle ON for Santa Monica EDR calcs)
;      ResProj:AllowExcessPVEDR  = {  0  }
;;   "Set ResProj:AllowExcessPVEDRMsg"      ResProj:AllowExcessPVEDRMsg  = {         ; message warning user of invalid EDR results when toggled off
;;         if (EnergyCodeYearNum = 2016 .AND. AllowExcessPVEDR > 0)
;;         then  "Warning: Allowing excess PV generation in EDR credit will invalidate CEC EDR result"
;;         else  UNDEFINED  endif  }
;
;   "Default ResProj:SpecifyTargetDRtg - whether or not specify a target/desired Energy Design Rating (by scaling PV system size(s))"  ; SAC 4/10/17
;      ResProj:SpecifyTargetDRtg  = {  0  }
;   ; no default for ResProj:TargetDesignRtgInp,  Prescribed,   0,    1,   1,    1,  1,  1  BEMP_Flt "%"  "Target Design Rating (100 * Prop / DesignRtg TDV)"    
;
;
;   ;--------------------------------------------------------------------
;   ; ProposedInput: Building Rules
;   ;--------------------------------------------------------------------
;
;;   "Default ResProj:BuildingType"			ResProj:BuildingType    	= {	xx  }
;	"Default ResProj:ZonalControl"			ResProj:ZonalControl    	= {	0  }
;;   "Default ResProj:Description"			ResProj:Description     	= {	xx  }
;
;	"Set ResProj:ZoneLabel"				ResProj:ZoneLabel			= {	if (ZonalControl > 0.5) then  "Living Zone & Area / Unit:"  else  "            Zone & Area / Unit:"  endif  }
;;	"Set ResProj:ZoneLabel"				ResProj:ZoneLabel			= {	if (ZonalControl > 0.5) then  "Living Zone:"  else  "         Zone:"  endif  }
;;	"Set ResProj:FloorAreaLabel"		ResProj:FloorAreaLabel	= {	if (ZonalControl > 0.5) then  "Living Area:"  else  "   Floor Area:"  endif  }
;
;; SAC 1/7/13 - moved ACH50 defaulting down BELOW system duct rules, so that presence of ducts in unconditioned space is known
;;   "Default ResProj:ACH50"						ResProj:ACH50           	= {	7.6  }
;
;;   "Default ResProj:InsulConsQuality"		ResProj:InsulConsQuality	= {	xx  }  - defaulted via symbol definitions
;   "Default ResProj:NumBedrooms"				ResProj:NumBedrooms     	= {	1  }   ; SAC 5/1/13 - added default since should require input for multifamily buildings
;	"Default ResProj:NumAddBedrooms"			ResProj:NumAddBedrooms		= {	0  }	; SAC 12/28/15 - added
;	"Set ResProj:NumBedrmsLabel"				ResProj:NumBedrmsLabel		= {	if (RunScope == 1 .AND. IsAddAlone > 0.5)
;																							then	"Num of Existing Bedrooms:"
;																							else	"Num of Bedrooms (incl. ADU):"  endif  }
;	"Set ResProj:SimNumBedrooms"				ResProj:SimNumBedrooms		= {	if (RunScope == 1 .AND. IsAddAlone > 0.5)
;																							then	NumAddBedrooms
;																							else	NumBedrooms  endif  }
;
;; SAC 5/21/13 - moved down & revised to include sum of all MFam units...
;;   "Default ResProj:NumDwellingUnits"		ResProj:NumDwellingUnits	= {	1  }
;   "Default ResProj:AllOrientations"		ResProj:AllOrientations 	= {	0  }
;   ; SAC 12/8/15 - tic 512 ensure wall orientations are reported as 0/90/180/270 for all orientation runs
;   "Force default of ResProj:FrontOrientation"	ResProj:Action			= {	if (AllOrientations > 0.5 .AND. IfValidAnd( FrontOrientation != 0 ) .AND. IfValidAnd( RunNumber > 0 )==0)
;   																						then	EvalRulelist( "ForceDefault_FrontOrientation" )
;   																						else  UNCHANGED  endif  }
;   "Default ResProj:FrontOrientation"		ResProj:FrontOrientation	= {	0  }
;	
;; RCG 5/31/17 - Force reset ResProj:AllOrientations
;	"Force Reset ResProject:AllOrientations"	ResProj:Action	=	{	if	(ResProj:RunScope == 2 .AND. ResProj:AllOrientations == 1 )
;																												then	EvalRulelist( "ForceReset_AllOrientations", 1)
;																												else if	(ResProj:RunScope == 1 .AND. ResProj:IsAddAlone == 1 )
;																												then	EvalRulelist( "ForceReset_AllOrientations", 1)
;																												else	UNCHANGED
;																												endif	endif	}
;
;   "Force reset of user-defined NatGasAvailable flag for 2019+ analysis"   ; SAC 2/28/18 (tic #992)
;      ResProj:Action  = {
;         if (IfValidAnd( EnergyCodeYearNum >= 2019 ) .AND. LocalStatus( NatGasAvailable ) > 4)
;         then  EvalRulelist( "ForceReset_ResProj_NatGasAvailable" )
;         else  UNCHANGED  endif  }
;	"Default ResProj:NatGasAvailable"		ResProj:NatGasAvailable		= {	1  }
;; SAC 11/9/15 - added ResProj:GasType - allow to default via enumerations
;	"Default ResProj:GasType"					ResProj:GasType				= {	if (NatGasAvailable > 0.5) then  1  else  2  endif  }		; force default - relying exclusively on enumeration defaulting not working here
;   "RE-Default ResProj:NatGasAvailable if user chooses GasType = Propane"     ResProj:NatGasAvailable =     ; SAC 09/01/20 (tic #1066)
;      {  if (GasType == 2) then  0  else  UNCHANGED  endif  }
;
;	"Set ResProj:FuelTDVLabel"					ResProj:FuelTDVLabel			= {	if (StdsVersionYr > 2016 .OR. 	; SAC 11/9/15
;	                                                                      (IfValidAnd( EnergyCodeYearNum >= 2019 ) .AND. StdsVersionYr = 2014))  ; SAC 2/28/18 (tic #992)
;																							then	if (GasType == 1) then  "Natural Gas"  else  "Other"  endif
;																							else if (NatGasAvailable > 0.5) then  "Natural Gas"  else  "Other"  endif endif  }
;
;	; SAC 11/9/15 - moved setting of ResProj:Fuel_Have* flags from CSE_Sim rulelsit to here and elsewhere (to support 2016 analysis)
;	"Set flag - ResProj:Fuel_HaveElec"		ResProj:Fuel_HaveElec		= {	1 }
;	"Set flag - ResProj:Fuel_HaveNatGas"	ResProj:Fuel_HaveNatGas		= {	if (StdsVersionYr > 2016 .OR.		; SAC 11/9/15
;	                                                                      (IfValidAnd( EnergyCodeYearNum >= 2019 ) .AND. StdsVersionYr = 2014))  ; SAC 2/28/18 (tic #992)
;																							then	if (GasType == 1) then  1  else  0  endif
;																							else if (ResProj:NatGasAvailable > 0.5) then  1  else  0  endif endif  }
;	"Set flag - ResProj:Fuel_HaveOther"		ResProj:Fuel_HaveOther		= {	if (Fuel_HaveNatGas > 0.5) then  0  else  1  endif  }
;
;   "Default ResProj:HasGarage"				ResProj:HasGarage				= {	0  }			; default to no attached garage" 
;; SAC 9/9/12 - removed properties that are duplicated in the Attic object
;;   "Default ResProj:AtticVentFrac"			ResProj:AtticVentFrac		= {	1/300  }		; ratio of free area of attic vents to attic floor area
;;   "Default ResProj:AtticVentFracHi"		ResProj:AtticVentFracHi		= {	0.3  }		; fraction of the attic vent area located in the upper part of the attic
;   "Default ResProj:InsulRValPerInch[1] - blown"	ResProj:InsulRValPerInch[1]	= {	2.6  }		; insulation R-value per inch, used to calculate blown ceiling insulation thickness within & above joists" 
;   "Default ResProj:InsulRValPerInch[2] - roof"		ResProj:InsulRValPerInch[2]	= {	3.714  }		; insulation R-value per inch, used to calculate roof insulation thickness within & below joists" 
;
;	; ICQEnclCavInsMult factors based on CavityIns2.xlsx from BW 7/16/12
;   ; SAC 7/20/17 - split out StdICQEnclCavInsMult as separate property to avoid excessive table look-ups w/ new logic pertaining to QII excluded from non-new Zone surfaces (tic #775)
;   "Set ResProj:StdICQEnclCavInsMult"     ResProj:StdICQEnclCavInsMult  = {  T24RClimateZoneCodeBase:StdICQEnclCavInsMult( "ClimateZone", ResProj:ClimateZone, "CodeBase", ResProj:StdDesignBase, "BldgType", ResProj:BldgTypeTblStr )  }
;	; SAC 1/13/13 - switched Improved multiplier from 0.9 to 1.0
;	"Set ResProj:ICQEnclCavInsMult"			ResProj:ICQEnclCavInsMult	= {	switch (Local( InsulConsQuality ))		; Mulitplier used to adjust conduction of cavity insulation layer
;																								case 2 :  1.0		; Yes/Improved
;																								default:  StdICQEnclCavInsMult		; No/Standard (or other)
;																							endswitch  }
;   "Default ResProj:ApplRefrigEffMethod[1]"		ResProj:ApplRefrigEffMethod[1] 	= {	1  }
;   "Default ResProj:ApplDishUsageMethod[1]"		ResProj:ApplDishUsageMethod[1] 	= {	1  }
;
;	"Set ResProj:Ltg_FracPort"		ResProj:Ltg_FracPort		= {	if (ResProj:DRtgRefRunID == 2014) then  1.0		; SAC 3/10/16 - RESNET
;																			else  0.22  endif   }
;	"Set ResProj:Ltg_PwrAdjMult"	ResProj:Ltg_PwrAdjMult	= {	0.625  }
;
;  ; SAC 2/25/17 - new properties added from Com to facilitate Azimuth calcs/reporting
;	"Set ResProj:BldgNAng"           ResProj:BldgNAng          = {    ; Bldg:NAngVector in Com
;         0  }
;; TO DO - keep BldgNAng @ constant 0 until we decide how to relate Bldg vs. True azimuth
;;	      if (FrontOrientation = 0) then  0
;;	      else  360 - FrontOrientation  endif  }
;	"Set ResProj:BldgNRad"           ResProj:BldgNRad          = {    ; Bldg:NRad in Com
;	      BldgNAng * (3.14159265359/180)  }
;
;	"Set ResProj:BldgUnitVectorNi"   ResProj:BldgUnitVectorNi  = {    ; Bldg:UnitVectorNi in Com - X coordinate of unit vector defining true north
;      if (BldgNAng < 0) then
;         POSTERROR("FrontOrientation Must be greater than or equal to 0 deg")
;      else if (BldgNAng < 90) then
;         SQRT( ((TAN(BldgNRad))**2)/(1+(TAN(BldgNRad))**2) )
;      else if (BldgNAng =  90) then    1 
;      else if (BldgNAng < 180) then
;         SQRT( ((TAN(BldgNRad))**2)/(1+(TAN(BldgNRad))**2) )
;      else if (BldgNAng = 180) then  0 
;      else if (BldgNAng < 270) then
;        -SQRT( ((TAN(BldgNRad))**2)/(1+(TAN(BldgNRad))**2) )
;      else if (BldgNAng = 270) then   -1
;      else if (BldgNAng < 360) then
;        -SQRT( ((TAN(BldgNRad))**2)/(1+(TAN(BldgNRad))**2) )
;      else  POSTERROR("FrontOrientation Must be Less than 360 deg")
;      endif endif endif endif endif endif endif endif  }
;
;	"Set ResProj:BldgUnitVectorNj"   ResProj:BldgUnitVectorNj  = {    ; Bldg:UnitVectorNj in Com - Y coordinate of unit vector defining true north
;      if (BldgNAng < 0) then
;         POSTERROR("FrontOrientation Must be greater than or equal to 0 deg")
;      else if (BldgNAng <  90) then
;         SQRT(1/(1+(TAN(BldgNRad))**2))
;      else if (BldgNAng =  90) then  0
;      else if (BldgNAng < 180) then
;        -SQRT(1/(1+(TAN(BldgNRad))**2))
;      else if (BldgNAng = 180) then -1
;      else if (BldgNAng < 270) then
;        -SQRT(1/(1+(TAN(BldgNRad))**2))
;      else if (BldgNAng = 270) then  0
;      else if (BldgNAng < 360) then
;         SQRT(1/(1+(TAN(BldgNRad))**2))
;      else  POSTERROR("FrontOrientation Must be Less than 360 deg")
;      endif endif endif endif endif endif endif endif  }
;
;
;  ; SAC 2/22/17 - PolyLp defaulting
;   "Default PolyLp data"   PolyLp:Action  = {
;         if (LocalStatus(Area) > 0) then  UNCHANGED
;         else  EvalRulelist( "Default_PolyLp", 1 )  endif  }
;
;   "Set ResProj:HavePVGeomObjects (which impacts PV array inputs)"  
;         ResProj:HavePVGeomObjects = {  if (ComponentCount( PVArrayGeom ) < 1) then  0  else  1  endif  }
;   "Set ResProj:HaveShadeObjects (which impacts PV array inputs)"  
;         ResProj:HaveShadeObjects  = {  if (ComponentCount( Shade ) < 1) then  0  else  1  endif  }
;
;   "Set PVArrayGeom:ChildPolyLpRef"    PVArrayGeom:ChildPolyLpRef  = {  MaxChildComp( PolyLp:Area )  }  ; SAC 3/3/17
;   "Set Shade:ChildPolyLpRef"          Shade:ChildPolyLpRef        = {  MaxChildComp( PolyLp:Area )  }  ; SAC 2/24/17
;
;   ; SAC 10/25/16 - new rulelist to default CAHP properties
;   "Default CAHP properties"
;      ResProj:Action = {   EvalRulelist( "ProposedInput_CAHP" )  }


   ; SAC 10/25/16 - new rulelist to default DHW systems, heaters & simulation properties
   "Default DHW systems, heaters & simulation properties"
      Proj:Action = {   EvalRulelist( "ProposedInput_DHWEquipment" )  }

   "Default IAQFan properties"      ; fix evaluation order issue by moving IAQFan defaulting prior to Shell - SAC 7/21/20 (tic #1174)
      ResProj:Action = {  EvalRulelist( "Default_HVAC_IAQFan" )  }

   ; SAC 10/25/16 - new rulelist to default shell (zones, dwelling units, crawl spaces) properties
   "Default shell (zones, dwelling units, crawl spaces) properties"
      ResProj:Action = {   EvalRulelist( "ProposedInput_Shell" )  }

   ; SAC 9/3/19 - added to facilitate new MFam prototypes including common spaces (MFamProto)
   "Default OtherZone (MF common area) properties"
      ResProj:Action = {   if (EnergyCodeYearNum < 2019) then  UNCHANGED
                        else  EvalRulelist( "ProposedInput_ResOtherZone" )  endif  }


; duplicate or unnecessary rules, those needed mostly ported to Com's Project-Multifamily.rule module - SAC 10/07/21 & 10/07/21
;   ; SAC 10/24/16 - new rulelist to default photovoltaic (PV) system properties
;	; SAC 10/6/16 - allow PV sim regardless of *DesignRating* settings for 2019 analysis
;   "Set ResProj:AllowPVWInputs"     ResProj:AllowPVWInputs = {
;         if (EnergyCodeYearNum >= 2019) then  1
;         else if (AllowDesignRating > 0.5 .AND. DesignRatingCalcs > 0.5)
;         then  1  else  0  endif endif  }
;   "Default photovoltaic (PV) system properties"
;      ResProj:Action = {   EvalRulelist( "ProposedInput_PVSystem" )  }
;
;   ; SAC 10/24/16 - new rulelist to default PV compliance credit (2013/16) properties
;   "Default PV compliance credit (2013/16) properties"
;      ResProj:Action = {   EvalRulelist( "ProposedInput_PVCompCredit" )  }
;
;   "Force reset of SpecifyTargetDRtg when Reduced PV Requirement specified"  ; SAC 2/7/18 - (tic #974)
;      ResProj:Action = {   if (IfValidAnd( ReducedPVReq > 0 ) .AND. SpecifyTargetDRtg > 0)
;                        then  EvalRulelist( "ForceOff_SpecifyTargetDRtg" )
;                        else  UNCHANGED  endif  }
;
;   ; SAC 12/27/17 - moved following rule up from LoadModelAdjustments rulelist since EnableResearchMode not set at that point
;   "Check for invalid BatteryControl options"      ; SAC 12/12/17 - alert user if invalid BattCtrl option is selected 
;      ResProj:Action  = {
;         if (LocalStatus( AllowBattInputs ) < 1 .AND. IfValidAnd( BattMaxCap > 0 ) .AND. EnableResearchMode != 1 .AND. BatteryControl > 98)
;         then  switch (BatteryControl)
;                  case  99 :  MessageBox( "Program option (INI file) EnableResearchMode must be activated for BatteryControl '- specify -'.\n\nToggle on EnableResearchMode and reload project or select a different BatteryControl option." )
;                  case 100 :  MessageBox( "Program option (INI file) EnableResearchMode must be activated for BatteryControl Best Case/Advanced Control (old).\n\nToggle on EnableResearchMode and reload project or select a different BatteryControl option." )
;                  default  :  UNCHANGED
;               endswitch
;         else  UNCHANGED  endif  }
;   "Set ResProj:AdvBattTDVPkDayVal"    ResProj:AdvBattTDVPkDayVal  = {  10 / ValidOr( TDVMult_Elec, 1 )  }    ; SAC 7/28/19 - new CSE advanced battery simulation (34.12 for Com)   / SAC 8/29/19 - incorporate TDVMult_Elec to account for TDV units (2022+)
;   "Blast ResProj:BattDRNumRankedDays if user-specified but not EnableResearchMode"    ResProj:Action =        ; SAC 03/30/21 (tic #1266)
;      {  if (LocalStatus( BattDRNumRankedDays ) > 5 .AND. EnableResearchMode < 1)
;         then  EvalRulelist( "Blast_ResProj_BattDRNumRankedDays" )
;         else  UNCHANGED  endif  }
;   "Default ResProj:BattDRNumRankedDays - # of ranked (TDV) days to operate in TDVPeakSave mode"      ; SAC 3/4/20
;      ResProj:BattDRNumRankedDays  = {  20  }
;
;               ; SAC 12/17/17 - added TDVSummerPkFirstHr to enable TOU BatteryControl expression to vary by CZ (tic #941)
;   "Default ResProj:TDVSummerPkFirstHr"  ResProj:TDVSummerPkFirstHr  = {
;         T24RClimateZoneCodeBase:SummerPkFirstHr( "ClimateZone", ResProj:ClimateZone, "CodeBase", ResProj:CompCodeBase )  }
;   ; SAC 12/14/16 - new rulelist to default Battery system properties
;   ; SAC 4/27/17 - updated logic for 2016 EDR mods
;   ; SAC 6/28/17 - alter logic to allow battery inputs in 2016 even when AllowExcessPVEDR > 0 (LF e-mail 6/26/17)
;   "Set ResProj:AllowBattInputs"    ResProj:AllowBattInputs = {
;      if (IfValidAnd( AllowPVWInputs > 0 ) .AND. IfValidAnd( PVWDCSysTotal > 0 ) .AND.
;          EnergyCodeYearNum >= 2016)
;      then  1
;      else  0  endif  }
;   "Default Battery properties"
;      ResProj:Action = {   if (EnergyCodeYearNum >= 2016)
;                        then  EvalRulelist( "ProposedInput_Battery" )
;                        else  UNCHANGED  endif  }
;
;   ; SAC 12/10/17 - revised TDRtg messages into array
;   "Set ResProj:TargetDRtgInpMsg[1]"      ResProj:TargetDRtgInpMsg[1]  = {
;         if (IfValidAnd( ReducedPVReq > 0 ))
;         then  "Target EDR not available with Reduced PV Requirement"
;         else if (IfValidAnd( AllowDesignRating  > 0.5 ) .AND. IfValidAnd( DesignRatingCalcs > 0.5 ) .AND.
;                  IfValidAnd( SpecifyTargetDRtg  > 0.5 ))
;         then  if (IfValidAnd( PVWDCSysTotal > 0 )==0)
;               then  "PV system must be entered below for Target EDR"
;               else if (IfValidAnd( ScalePropPVResults > 0.5 ) .AND. IfValidAnd( MaxPropPVRatioInp > 0 ) .AND.
;                        LocalStatus( TargetDesignRtgInp ) > 0)
;               then  if (EnergyCodeYearNum == 2016)
;                     then  Format( "May be superceded by Max PV Gen Ratio of %g", MaxPropPVRatioInp )
;                     else  Format( "May be superceded by Max PV Gen Ratio of %g (Battery tab)", MaxPropPVRatioInp )
;                     endif
;               else  "Target EDR lengthens analysis runtime"  endif endif
;         else  UNDEFINED  endif endif  }
;   "Set ResProj:TargetDRtgInpMsg[2]"      ResProj:TargetDRtgInpMsg[2]  = {
;         if (IfValidAnd( AllowDesignRating  > 0.5 ) .AND. IfValidAnd( DesignRatingCalcs > 0.5 ) .AND.
;             IfValidAnd( SpecifyTargetDRtg  > 0.5 ))
;         then  if (IfValidAnd( PVWDCSysTotal > 0 )==0)
;               then  "Target EDR lengthens analysis runtime"
;               else if (IfValidAnd( ScalePropPVResults > 0.5 ) .AND. IfValidAnd( MaxPropPVRatioInp > 0 ) .AND.
;                        LocalStatus( TargetDesignRtgInp ) > 0)
;               then  "Target EDR lengthens analysis runtime"
;               else  UNDEFINED  endif endif
;         else  UNDEFINED  endif  }
;
;   "Init ResProj:TargetDRtgIterNum"
;      ResProj:TargetDRtgIterNum  = {   if (LocalStatus( TargetDRtgIterNum ) > 0) then  UNCHANGED  else  0  endif  }
;   "Set ResProj:TargetDRtgMaxIter - max number of times we will iterate to achieve the target design rating"  ; SAC 4/11/17
;      ResProj:TargetDRtgMaxIter  = {   if (LocalStatus( TargetDRtgMaxIter ) > 0) then  UNCHANGED  else  4  endif  }


   ; SAC 4/14/15 - call subordinate rulelist to evaluate ALL Attic defaulting
	"Perform Attic defaulting"		Attic:Action	= {	EvalRulelist( "Default_Attic", 1 )  }

   ; SAC 10/24/16 - new rulelist to default cool vent, IAQ & internal gains properties
   "Default cool vent, IAQ & internal gains properties"
      ResProj:Action = {   EvalRulelist( "ProposedInput_CoolVent_IAQ_IntGains" )  }

   ; SAC 10/24/16 - new rulelist to default Garage properties
   "Default Garage properties"
      ResProj:Action = {   EvalRulelist( "ProposedInput_Garage" )  }

   ; SAC 5/15/17 - added compressed R-value selections - R-val = (SymVal-mod(SymVal,10))/100  (tic #761)  - SAC 5/18/18 - COPIED rule here to evaluate before EAA_Shell rules (tic #798)
   "Set Cons:CavityLayerRVal (incl. compressed R-vals)"     Cons:CavityLayerRVal  = {
         if (CavityLayer = 100401) then  0
         else if (CavityLayer > 200 .AND. CavityLayer < 100001)
         then  (CavityLayer - mod( CavityLayer, 10 )) / 100
         else   CavityLayer  endif endif  }

   ; SAC 7/20/17 - split single rulelist into two - Shell moved up to HERE from below, before Construction defaulting
   "Default EAA (existing-addition-alteration) Shell properties"
      ResProj:Action = {   EvalRulelist( "ProposedInput_ResEAA_Shell" )  }

   ; SAC 10/24/16 - new rulelist to default Construction (incl. attic edge) properties
   "Default Construction (incl. attic edge) properties"
      ResProj:Action = {   EvalRulelist( "ProposedInput_Constructions" )  }

   ; SAC 10/24/16 - new rulelist to default shell surfaces & inter-zone area properties
   "Default shell surfaces & inter-zone area properties"
      ResProj:Action = {   EvalRulelist( "ProposedInput_SurfacesAndInterZoneAreas" )  }

   ; SAC 10/24/16 - new rulelist to default misc CSE shell properties
   "Default misc CSE shell properties"
      ResProj:Action = {   EvalRulelist( "ProposedInput_CSE_Shell" )  }

   ; SAC 10/24/16 - new rulelist to default attic & cool vent properties
   "Default attic & cool vent properties"
      ResProj:Action = {   EvalRulelist( "ProposedInput_Shell_AtticAndCoolVent" )  }

   ; SAC 10/24/16 - new rulelist to default laundry properties
   "Default laundry properties"
      ResProj:Action = {   EvalRulelist( "ProposedInput_Loads_Laundry" )  }

   ; SAC 10/24/16 - new rulelist to default zone height, HVAC & cool vent properties
   "Default zone height, HVAC & cool vent properties"
      ResProj:Action = {   EvalRulelist( "ProposedInput_HVAC" )  }

;   "Reset any past Compact Distrib settings"    DHWSys:Action  = {
;         if (CompactDistrib < 1 .AND. IfValidAnd( CompactFactor < 1 ))
;         then  EvalRulelist( "ProposedInput_DHWCompactDistribution_Blast" )
;         else  UNCHANGED  endif  }   ; SAC 1/8/19
   ; SAC 12/4/18 - rules needed to process DHW Compact Distribution qualification
   "Determine DHW Compact Distribution qualification"
      ResProj:Action = {   EvalRulelist( "ProposedInput_DHWCompactDistribution" )  }
                     ;   if (SFamCompactDistrib > 0)
                     ;   then  EvalRulelist( "ProposedInput_DHWCompactDistribution" )
                     ;   else  UNCHANGED  endif  }

   ;--------------------------------------------------------------------
   ; ProposedInput: Final Calcs
   ;--------------------------------------------------------------------
	"Set ResExtWall:ChildAreaSum => Sum of child window & door areas"    ; SAC 5/22/12 - added to fix CBECCbug003 from BW 5/18/12
		ResExtWall:ChildAreaSum		= {	SumChildren( ResWin:TotAreaInclMult[1] ) + SumChildren( ResDr:Area )  }

	"Set ResExtWall:NetWallArea => gross wall area minus sum of child window & door area" 
		ResExtWall:NetWallArea		= {	Local( Area ) - Local( ChildAreaSum )  }

	"Set ResExtWall:FramingFactor => fraction of gross wall area that includes frame" 
		ResExtWall:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set ResIntWall:ChildAreaSum => Sum of child door areas"    ; SAC 5/8/15 - added in conjunction w/ fix to issue 585
		ResIntWall:ChildAreaSum		= {	SumChildren( ResDr:Area )  }
	"Set ResIntWall:NetWallArea => gross wall area minus sum of child door area" 		; SAC 11/3/14 - added to fix rule eval error (GC issue 394)
		ResIntWall:NetWallArea		= {	Local( Area ) - ValidOr( ChildAreaSum, 0 )  }

; mjb	2/19/14	added array element designation (needed for reporting consistent with Window reporting)
	"Set CathedralCeiling:ChildAreaSum => Sum of child skylight areas"    ; SAC 5/22/12 - added to fix CBECCbug003 from BW 5/18/12
		CathedralCeiling:ChildAreaSum[1]		= {	SumChildren( ResSkylt:TotAreaInclMult[1] )  }

	"Set CathedralCeiling:NetWallArea => gross ceiling area minus sum of child skylight area" 
		CathedralCeiling:NetWallArea		= {	Local( Area ) - Local( ChildAreaSum[1] )  }

	"Set CathedralCeiling:FramingFactor => fraction of gross ceiling area that includes frame" 
		CathedralCeiling:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set InteriorCeiling:FramingFactor => fraction of gross ceiling area that includes frame" 
		InteriorCeiling:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set UndWall:FramingFactor => fraction of gross wall area that includes frame" 
		UndWall:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set ResIntWall:FramingFactor => fraction of gross wall area that includes frame" 
		ResIntWall:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set ResExtFlr:FramingFactor => fraction of gross floor area that includes frame" 
		ResExtFlr:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set FloorOverCrawl:FramingFactor => fraction of gross floor area that includes frame" 
		FloorOverCrawl:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set ResIntFlr:FramingFactor => fraction of gross floor area that includes frame" 
		ResIntFlr:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set UndFloor:FramingFactor => fraction of gross floor area that includes frame" 
		UndFloor:FramingFactor	= {	0 }  ; LocalRef( Construction:FramingFactor )  }

	; SAC 5/22/12 - added properties used in range checks to ensure that (parent) net wall areas don't go negative (CBECCbug003 5/18/12)
	"Set ResWin:MaxArea"				ResWin:MaxArea			= {	if (Local( Multiplier ) > 0.0001)
																		then	(Parent( NetWallArea ) + Local( TotAreaInclMult[1] )) / Local( Multiplier )
																		else	100000  endif  }
	"Set ResWin:MaxHeight"			ResWin:MaxHeight		= {	if (LocalStatus( Area ) < 5 .AND. IfValidAnd( Width > 0.0001 ) .AND. IfValidAnd( Multiplier > 0.0001 ))
																		then	(Parent( NetWallArea ) + Local( TotAreaInclMult[1] )) / (Local( Width ) * Local( Multiplier ))
																		else	100000  endif  }
	"Set ResWin:MaxWidth"			ResWin:MaxWidth		= {	if (LocalStatus( Area ) < 5 .AND. IfValidAnd( Height > 0.0001 ) .AND. IfValidAnd( Multiplier > 0.0001 ))
																		then	(Parent( NetWallArea ) + Local( TotAreaInclMult[1] )) / (Local( Height ) * Local( Multiplier ))
																		else	100000  endif  }
	"Set ResWin:MaxMultiplier"		ResWin:MaxMultiplier	= {	if (ValidOr( Area, 0 ) > 0.0001)
																		then	(Parent( NetWallArea ) + Local( TotAreaInclMult[1] )) / Local( Area )
																		else	100000  endif  }

	; SAC 4/7/13 - properties referenced in range checks to ensure that (parent) net roof areas don't go negative
	"Set ResSkylt:MaxArea"			ResSkylt:MaxArea			= {	if (Local( Multiplier ) > 0.0001)
																			then	(Parent( NetWallArea ) + Local( TotAreaInclMult )) / Local( Multiplier )
																			else	100000  endif  }
	"Set ResSkylt:MaxMultiplier"	ResSkylt:MaxMultiplier	= {	if (Local( Area ) > 0.0001)
																			then	(Parent( NetWallArea ) + Local( TotAreaInclMult )) / Local( Area )
																			else	100000  endif  }

	; SAC 5/24/12 - added properties used in range checks to ensure that (parent) net wall areas don't go negative (CBECCbug003 5/18/12)
	"Set ResDr:MaxArea"			ResDr:MaxArea		= {	Parent( NetWallArea ) + Local( Area )  }

	; SAC 7/18/13 - added new boolean indicating whether or not DHW systems are defined (& assigned to zones?) (and should be modeled)
; PERHAPS REPLACE w/ "SumAll( Zone:DHWFloorArea ) > 0"
;	"Set ResProj:ModelingDHW"		ResProj:ModelingDHW	= {	if (SumAll( DHWSys:NumDHWHeaters ) > 0) then  1  else  0  endif  }		- SAC 10/7/15 - replaced w/ below to ensure that the DHWSys objects are actually assigned to zones or DUTs
	"Set ResProj:ModelingDHW"		ResProj:ModelingDHW	= {	if (SumAcrossIf( DHWSys:TotNumDHWHeaters, DHWSys:FloorAreaServed[1] > 0 ) > 0) then  1  else  0  endif  }


   ; SAC 10/24/16 - new rulelist to default EAA (existing-addition-alteration) properties
   ; SAC 7/20/17 - split single rulelist into two - Shell moved up above, HVAC remaining here
   "Default EAA (existing-addition-alteration) properties"
      ResProj:Action = {   EvalRulelist( "ProposedInput_ResEAA_HVAC" )  }

																							
   ;--------------------------------------------------------------------
   ; ProposedInput: Defaulting of HVAC & DHW reporting object properties
   ;--------------------------------------------------------------------
  ; mjb  4/21/14 - "Mech1" replaced with "SCSysRpt" in data model
	"Default SCSysRpt properties - general"		SCSysRpt:Action	= {	EvalRulelist( "Default_SCSysReportObject", 1 )  }
;	"Default SCSysRpt properties - general"		SCSysRpt:Action	= {	if (ParentComponentType() == "HVACSys" .OR. ParentComponentType() == "DwellUnit")
;																								then  EvalRulelist( "Default_SCSysReportObject", 1 )
;																								else	UNCHANGED  endif  }

	"Default DHWSysRpt properties - general"		DHWSysRpt:Action	= {	     if (ParentComponentType() == "DHWSys") then  EvalRulelist( "Default_DHWSysReportObject_DHWSysParent", 1 )
																								else if (ParentComponentType() == "DwellUnit" .AND. LocalCompAssigned( DHWSysRef )) then  EvalRulelist( "Default_DHWSysReportObject_DwellUnitParent", 1 )
																								else  UNCHANGED  endif endif  }

   ; SAC 10/24/16 - new rulelist to default project-wide DHW properties
   "Default project-wide DHWSys assignments and areas by category"
      ResProj:Action = {   EvalRulelist( "ProposedInput_DHW_ResProject" )  }

; SAC 12/4/13 - added UI control labels for HVAC & DHW system assignments
;	"Set Zone:UILabel_HVACSys[1]"		Zone:UILabel_HVACSys[1]	= {	     if (ResProj:IsMultiFamily > 0.5 .OR.
;																						         ResProj:RunScope == 1) then  "       HVAC System:"
;																						else if (HVACSysStatus == 3) then  "New HVAC System:"
;																						else if (HVACSysStatus == 2) then  "Altered HVAC Sys:"
;																															  else  "Existing HVAC Sys:"  endif endif endif  }
;	mjb	9/30/14 - mod label for IsAddAlone
	"Set Zone:UILabel_HVACSys[1]"		Zone:UILabel_HVACSys[1]	= {	     if (ResProj:IsMultiFamily > 0.5 .OR.
																									(ResProj:RunScope == 1 .AND. ResProj:IsAddAlone < 1)) then  "       HVAC System:"
																						else if (HVACSysStatus == 3) then  "New HVAC System:"
																						else if (HVACSysStatus == 2) then  "Altered HVAC Sys:"
																															  else  "Existing HVAC Sys:"  endif endif endif  }
	"Set Zone:UILabel_HVACSys[2]"		Zone:UILabel_HVACSys[2]	= {	if (ResProj:IsMultiFamily < 0.5 .AND. ResProj:RunScope == 2 .AND. HVACSysStatus == 2 .AND. HVACSysVerified) then  "Existing HVAC Sys:"  else  " "  endif  }

	"Set Zone:UILabel_DHWSys1[1]"		Zone:UILabel_DHWSys1[1]	= {	     if (ResProj:IsMultiFamily > 0.5 .OR.
																						         ResProj:RunScope == 1) then  "       DHW System 1:"
																						else if (DHWSys1Status == 3) then  "New DHW System 1:"
																						else if (DHWSys1Status == 2) then  "Altered DHW Sys 1:"
																															  else  "Existing DHW Sys 1:"  endif endif endif  }
	"Set Zone:UILabel_DHWSys1[2]"		Zone:UILabel_DHWSys1[2]	= {	if (ResProj:IsMultiFamily < 0.5 .AND. ResProj:RunScope == 2 .AND. DHWSys1Status == 2 .AND. DHWSys1Verified) then  "Existing DHW Sys 1:"  else  " "  endif  }

   ; removed second DHWSys assignment to Zone - SAC 07/20/21
	;"Set Zone:UILabel_DHWSys2[1]"		Zone:UILabel_DHWSys2[1]	= {	     if (ResProj:IsMultiFamily > 0.5) then  " "
	;																					else if (ResProj:RunScope == 1) then  "       DHW System 2:"
	;																					else if (DHWSys2Status == 3) then  "New DHW System 2:"
	;																					else if (DHWSys2Status == 2) then  "Altered DHW Sys 2:"
	;																														  else  "Existing DHW Sys 2:"  endif endif endif endif  }
	;"Set Zone:UILabel_DHWSys2[2]"		Zone:UILabel_DHWSys2[2]	= {	if (ResProj:IsMultiFamily < 0.5 .AND. ResProj:RunScope == 2 .AND. DHWSys2Status == 2 .AND. DHWSys2Verified) then  "Existing DHW Sys 2:"  else  " "  endif  }

  ; SAC 1/6/16 - RESET ResProj:Fuel_HaveOther flag if it was set to 0 but there are Propane use selections (and the ruleset version is < 2016) (tic 374)
	"Set flag - ResProj:Fuel_HaveOther"		ResProj:Fuel_HaveOther		= {	if (Fuel_HaveOther < 0.5 .AND. StdsVersionYr < 2016)
																							then	if (IsMultiFamily < 0.5 .AND. ((Appl_HaveDryer[1] > 0.5 .AND. ApplDryerFuel[1] = 3) .OR.
																																			 (Appl_HaveCook[ 1] > 0.5 .AND. ApplCookFuel[ 1] = 3))) then  1
																									else if (SumAll( DHWHeater:AreaServedByFuel[3] ) > 1 .OR. SumAll( DHWHeater:AreaServedByFuel[5] ) > 1) then  1
																									else  UNCHANGED  endif endif
																							else	UNCHANGED  endif  }


   ;--------------------------------------------------------------------
   ; ProposedInput: PreCooling property defaulting  - SAC 4/3/17
   ;--------------------------------------------------------------------
   "Default PreCooling properties"     ResProj:Action	= {	EvalRulelist( "Default_PreCooling" )  }


   ;--------------------------------------------------------------------
   ; ProposedInput: Determine whether Proposed Flexibility run is required during analysis
   ;--------------------------------------------------------------------
   "Init ResProj:PropFlexRunReqd"      ResProj:PropFlexRunReqd  = {
         if (EnergyCodeYearNum < 2019 .OR. RunScope != 1 .OR. ResAnalysisType < 13 .OR.
             IsAddAlone > 0.5 .OR. IfValidAnd( PreCl_DataValid > 0 )==0 .OR.
             IfValidAnd( UsePreCooling > 0 )==0)
         then  0
         else  1  endif  }
   "Default ResProj:PropFlexFrac"      ResProj:PropFlexFrac  = {  0.3  }
   "Set ResProj:IsPropFlexRun"         ResProj:IsPropFlexRun  = {
         if (PropFlexRunReqd = 0 .OR. LocalStatus( RunAbbrev ) < 1) then  0
         else  switch (RunAbbrev)
                    case "pfx"   :  1
                    case "pfx-N" :  1
                    case "pfx-E" :  1
                    case "pfx-S" :  1
                    case "pfx-W" :  1
                    default      :  0
               endswitch  endif  }


; TO DO MFAM ???
;   ;--------------------------------------------------------------------
;   ; ProposedInput: Determine whether Standard Mixed Fuel run is required during analysis
;   ;--------------------------------------------------------------------
;   "Init ResProj:StdMixedFuelRunReqd"    ResProj:StdMixedFuelRunReqd  = {  0  }
;   "Eval rules to determine ResProj:StdMixedFuelRunReqd"   ResProj:Action  = {
;         if (EnergyCodeYearNum < 2019 .OR. ResAnalysisType < 13 .OR.
;             RunScope != 1 .OR. IsAddAlone > 0.5)
;         then  UNCHANGED
;         else  EvalRulelist( "Default_StandardMixedFuel" )  endif  }


; TO DO MFAM ???
;   ;--------------------------------------------------------------------  SAC 12/29/17
;   ; ProposedInput: Determine whether Preliminary Proposed run is required during analysis
;   ;--------------------------------------------------------------------
;   ; SAC 1/11/18 - added logic to ensure AllOrientation runs cause PrelimProp runs regardless of PV presence
;   ; added logic to ensure that PrelimProp run is performed if 2022+ HVAC systems are AutoSized and therefore calced sizes are needed to determine std design fan powers - SAC 03/11/21  ; SAC 03/15/21
;   "Set ResProj:PrelimPropRunReqd - flag indicating whether a preliminary proposed run is needed"   
;      ResProj:PrelimPropRunReqd  = {
;         if (EnergyCodeYearNum < 2019 .OR. ResAnalysisType < 13 .OR.
;             ( IfValidAnd( PVWDCSysTotal > 0 )==0 .AND. AllOrientations = 0 .AND.
;               (IfValidAnd( AnalysisVersion < 220000 ) .OR. SumAll( HVACSys:PropHtPumpAutoSz ) < 0.1) ))
;         then  0
;         else  1  endif  }


; TO DO MFAM
;   ; SAC 4/3/17 - PreCooling (and future formula that rely on TDV data...)
;   ; SAC 4/17/17 - moved here and included logic to handle HPWH DR systems
;   ; SAC 4/25/17 - revised to FORCE value of '1' in case user input of '0' preventing this flag from being toggled on
;   ; SAC 12/11/17 - ensure CSE_WriteTDV forced on for runs w/ batteries w/ control other than 'Basic'
;   ; SAC 12/17/17 - revsied again to cause CSE_WriteTDV for ANY battery run (to enable test/debug reporting)
;   ; SAC 1/10/20 - added logic to ensure TDV data written for all models containing WHF objects (needed for new FANVENTAVAIL expression) (tic #1175)
;   "Ensure ResProj:CSE_WriteTDV toggled ON when needed"     ResProj:Action  = {
;         if ((IfValidAnd( PreCl_DataValid > 0 ) .AND. IfValidAnd( IsPropFlexRun > 0 )) .OR.
;             SumAcrossIf( DHWSys:NumDHWHeaters, DHWSys:DemRespValid > 0 ) > 0 .OR.
;             (AllowBattInputs > 0 .AND. IfValidAnd( BattMaxCap > 0 )) .OR.
;             (UnitClVentOption > 0 .AND. IfValidAnd( AnalysisVersion > 190101 )))
;         then  EvalRulelist( "ForceOn_CSE_WriteTDV" )
;         else  UNCHANGED  endif  }
;   "Default ResProj:CSE_WriteTDV to undef when not needed"     ResProj:CSE_WriteTDV  = {
;         if ((IfValidAnd( PreCl_DataValid > 0 )==0 .OR. IfValidAnd( IsPropFlexRun > 0 )==0) .AND.
;             SumAcrossIf( DHWSys:NumDHWHeaters, DHWSys:DemRespValid > 0 )==0 .AND.
;             (AllowBattInputs < 1 .OR. IfValidAnd( BattMaxCap > 0 )==0) .AND.
;             (UnitClVentOption = 0 .OR. IfValidAnd( AnalysisVersion <= 190101 )))
;         then  UNDEFINED
;         else  UNCHANGED  endif  }
;   ;      if (IfValidAnd( CSE_WriteTDV > 0 )) then  UNCHANGED
;   ;      else if (IfValidAnd( PreCl_DataValid > 0 )) then  1
;   ;      else if (SumAcrossIf( DHWSys:NumDHWHeaters, DHWSys:DemandResponseFlag = 2 ) > 0 ) then  1
;   ;      else  UNCHANGED  endif endif endif  }


   ; SAC 2/28/18 - added flag and various rulelists to track whether model IsAllElectric (tic #992)
   "Reset ResProj:IsAllElectric flag"     ResProj:IsAllElectric  = {
         if (MaxAll( Zone:Appl_CookGain[2] ) > 0.01 .OR. MaxAll( Zone:Appl_DryerGain[2] ) > 0.01 .OR.
             MaxAll( Zone:Appl_CookGain[3] ) > 0.01 .OR. MaxAll( Zone:Appl_DryerGain[3] ) > 0.01 .OR.
             MaxAll( OtherZone:Appl_CookGain[2] ) > 0.01 .OR. MaxAll( OtherZone:Appl_DryerGain[2] ) > 0.01 .OR.
             MaxAll( OtherZone:Appl_CookGain[3] ) > 0.01 .OR. MaxAll( OtherZone:Appl_DryerGain[3] ) > 0.01)
         then  0
         else  1  endif  }
   "Check SFam HVAC equip in setting ResProj:IsAllElectric flag"     HVACSys:Action  = {
         if (ResProj:IsMultiFamily > 0.5 .OR. ResProj:IsAllElectric = 0 .OR. HaveHeating < 0.5 .OR.
             Type == 2 .OR. FloorAreaServed[1] < 1 .OR. LocalStatus( HeatSysTypeAbbrev ) < 1)
         then  UNCHANGED
         else if (T24RHeatingEquipment:UseElec( "CodeBase", ResProj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", HeatSysTypeAbbrev ) < 0.5)
         then  EvalRulelist( "ForceOff_ResProj_IsAllElectric" )
         else  UNCHANGED  endif endif  }
   "Check MFam HVAC equip in setting ResProj:IsAllElectric flag"     DwellUnitType:Action  = {
         if (ResProj:IsMultiFamily < 0.5 .OR. ResProj:IsAllElectric = 0 .OR. AssignedDUFlrArea < 0.5 .OR.
             HVACSysType == 2)
         then  UNCHANGED
         else if (T24RHeatingEquipment:UseElec( "CodeBase", ResProj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", HeatEqpTypeAbbrev ) < 0.5)
         then  EvalRulelist( "ForceOff_ResProj_IsAllElectric" )
         else  UNCHANGED  endif endif  }
   "Check DHW equip in setting ResProj:IsAllElectric flag"           DHWHeater:Action  = {
         if (ResProj:IsAllElectric = 0 .OR. IfValidAnd( FloorAreaServed > 1 )==0 .OR.
             HeaterElementType != 1)
         then  UNCHANGED
         else  EvalRulelist( "ForceOff_ResProj_IsAllElectric" )
         endif  }
   "Set ResProj:GasTypeRpt - type of fossil fuel used on site (or 'All Electric') (for reporting purposes)"   ; SAC 2/28/18 (tic #992)
      ResProj:GasTypeRpt  = {
         if (IsAllElectric > 0)
         then  "All Electric"
         else  EnumString( GasType )
         endif  }


; duplicate or unnecessary rules, those needed mostly ported to Com's Project-Multifamily.rule module - SAC 10/07/21 & 10/07/21
;   ;--------------------------------------------------------------------
;   ; ProposedInput: RESNET CA-HERS
;   ;--------------------------------------------------------------------
;   "Default RESNET CA-HERS data"     ResProj:Action =
;      {  if (IfValidAnd( RHERSEnabled > 0 )==0) then  UNCHANGED
;         else  EvalRulelist( "ProposedInput_HERS" )  endif  }
;
;
;   ;-------------------------------------------------------------------- SAC 11/15/19
;   ; ProposedInput: UI Dialog Tabs
;   ;--------------------------------------------------------------------
;   "Set ResProj:NumUIDialogTabs - number of dialog tabs to display in the user interface"   ResProj:NumUIDialogTabs =
;      {  if (IfValidAnd( Proj:AnalysisVersion >= 190101 )==0) then  UNDEFINED
;         else if (Proj:AnalysisVersion < 220000)
;         then  if (IfValidAnd( RHERSEnabled > 0 ))   ; 2019
;               then  13
;               else  12  endif
;         else  if (IfValidAnd( RHERSEnabled > 0 ))   ; 2022
;               then  13
;               else  12  endif
;         endif endif  }


   ;--------------------------------------------------------------------
   ; ProposedInput: misc model contents flags
   ;--------------------------------------------------------------------
   ; revised rule logic to NOT reset AllowCntrlElecDHWSlrPVCred flag to 0 when defaulting Std model, fixing bug where models w/out attic never get credit - SAC 10/29/20
   "Set ResProj:AllowCntrlElecDHWSlrPVCred - flag value indicating model includes PV and excludes solar thermal (DHW)"   ResProj:AllowCntrlElecDHWSlrPVCred =     ; SAC 5/2/20 (FlexibilityCredit)
      {  switch (RunAbbrev)
            case "smf" :  0
            case "s"   :  UNCHANGED
            default    :  if (IfValidAnd( PVWDCSysTotal > 0 ) .AND. SumAll( DHWSolarSys:FloorAreaServed ) < 1 .AND.
                              SumAcrossIf( DHWSys:FloorAreaServed, DHWSys:CentralElecDHW > 0 ) > 1 .AND.
                              SumAcrossIf( DHWSys:FloorAreaServed, DHWSys:CentralElecDHW = 0 ) < (0.05 * SumAcrossIf( DHWSys:FloorAreaServed, DHWSys:CentralElecDHW > 0 )))
                          then  1
                          else  0  endif
         endswitch  }
     ; {  if (IfValidAnd( PVWDCSysTotal > 0 ) .AND. SumAll( DHWSolarSys:FloorAreaServed ) < 1 .AND.
     ;        SumAcrossIf( DHWSys:FloorAreaServed, DHWSys:CentralElecDHW > 0 ) > 1 .AND.
     ;        SumAcrossIf( DHWSys:FloorAreaServed, DHWSys:CentralElecDHW = 0 ) < (0.05 * SumAcrossIf( DHWSys:FloorAreaServed, DHWSys:CentralElecDHW > 0 )) .AND.
     ;        (ResProj:RunAbbrev == "p" .OR. ResProj:RunAbbrev == "p-N" .OR. ResProj:RunAbbrev == "p-E" .OR. 
     ;         ResProj:RunAbbrev == "u" .OR. ResProj:RunAbbrev == "p-S" .OR. ResProj:RunAbbrev == "p-W"))
     ;    then  1  else  0  endif  }
   "Default ResProj:TakeCntrlElecDHWSlrPVCred - flag to apply efficiency credit for all-electric central DHW & PV models"  ResProj:TakeCntrlElecDHWSlrPVCred =    ; SAC 5/6/20 (FlexibilityCredit)
      {  if (AllowCntrlElecDHWSlrPVCred < 1) then  UNDEFINED
         else  0  endif  }


   ;--------------------------------------------------------------------
   ; ProposedInput: Blast all LayerParams objects following ProposedInput defaulting
   ;--------------------------------------------------------------------

; SAC 3/17/14 - to be REMOVED
; "store BEMProc details"		ResProj:Action = {  StoreBEMProc( "Before LayerParams-Mat cleanup", 0 )  }

	"Blast all LayerParams objects"			ResProj:Action	= {	DeleteAllComps( LayerParams )  }
	"Blast ResMats marked for deletion"			ResMat:Action	= {	if (IfValidAnd( MarkForDeletion == 1 )) then  DeleteComp()  else  UNCHANGED  endif  }		; SAC 3/17/14
;	"Blast ResMats not referenced by Cons:*"	ResMat:Action	= {	if (CountRefs( Cons:CavityPathMats ) < 1 .AND. CountRefs( Cons:FramePathMats ) < 1) then  DeleteComp()  else  UNCHANGED  endif  }		; SAC 3/21/14

; SAC 3/17/14 - to be REMOVED
; "store BEMProc details"		ResProj:Action = {  StoreBEMProc( "After LayerParams-Mat cleanup", 0 )  }
; "debug"		ResProj:Action	= {	MessageBox( "LayerParams-Mat cleanup done." )  }

; SAC 2/2/15 - new rulelist evaluation calls to ensure that AirNet ELA properties are defaulted in ProposedInput - ONLY FOR BypassRuleLimits
; tweaked rules to summarize model & default AirNet stuff for version >= 2019.2.0 (for MFam AirNet research/testing) - SAC 7/13/20
;	"evaluate ...SummarizeModel rules when in BypassRuleLimits mode"	ResProj:Action	= {	if (BypassRuleLimits < 0.5) then  UNCHANGED
	"evaluate ...SummarizeModel rules when in BypassRuleLimits mode"	ResProj:Action	= {	if (BypassRuleLimits < 0.5 .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )==0) then  UNCHANGED
																													else  EvalRulelist( "Reporting_SummarizeModel" )  endif  }
	"evaluate ...CSE_AirNet_ELA rules when in BypassRuleLimits mode"	ResProj:Action	= {	if (BypassRuleLimits < 0.5 .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )==0) then  UNCHANGED
																													else  EvalRulelist( "Default_CSE_AirNet_ELA" )  endif  }

; SAC 11/11/16 - enable user-specification of CSE simulation reports
   "Default ResProj:CSERpt_ZnDataDump"    ResProj:CSERpt_ZnDataDump    = {  0  }
   "Default ResProj:CSERpt_HVACDescrip"   ResProj:CSERpt_HVACDescrip   = {  0  }
   "Default ResProj:CSERpt_ZnEnergy"      ResProj:CSERpt_ZnEnergy      = {  0  }
   "Default ResProj:CSERpt_HtPumpHtg"     ResProj:CSERpt_HtPumpHtg     = {  0  }    ; SAC 11/01/20
   "Default ResProj:CSERpt_Mtr_All"       ResProj:CSERpt_Mtr_All       = {  0  }
   "Default ResProj:CSERpt_Mtr_Elec"      ResProj:CSERpt_Mtr_Elec      = { 
         if (CSERpt_Mtr_All < 1) then  0  else  1  endif  }
   "Default ResProj:CSERpt_Mtr_NGas"      ResProj:CSERpt_Mtr_NGas      = {
         if (CSERpt_Mtr_All < 1 .OR. Fuel_HaveNatGas < 1) then  0  else  1  endif  }
   "Default ResProj:CSERpt_Mtr_Othr"      ResProj:CSERpt_Mtr_Othr      = {
         if (CSERpt_Mtr_All < 1 .OR. Fuel_HaveOther  < 1) then  0  else  1  endif  }
                                                                
   "Default ResProj:CSERpt_ZnEnergy_DD"  ResProj:CSERpt_ZnEnergy_DD  = {  0  }
   "Default ResProj:CSERpt_Mtr_All_DD"   ResProj:CSERpt_Mtr_All_DD   = {  0  }
   "Default ResProj:CSERpt_Mtr_Elec_DD"  ResProj:CSERpt_Mtr_Elec_DD  = {
         if (CSERpt_Mtr_All_DD < 1) then  0  else  1  endif  }
   "Default ResProj:CSERpt_Mtr_NGas_DD"  ResProj:CSERpt_Mtr_NGas_DD  = {
         if (CSERpt_Mtr_All_DD < 1 .OR. Fuel_HaveNatGas < 1) then  0  else  1  endif  }
   "Default ResProj:CSERpt_Mtr_Othr_DD"  ResProj:CSERpt_Mtr_Othr_DD  = {
         if (CSERpt_Mtr_All_DD < 1 .OR. Fuel_HaveOther  < 1) then  0  else  1  endif  }
                                                                
   "Default ResProj:CSERpt_ZnEnergy_CD"  ResProj:CSERpt_ZnEnergy_CD  = {  0  }
   "Default ResProj:CSERpt_Mtr_All_CD"   ResProj:CSERpt_Mtr_All_CD   = {  0  }
   "Default ResProj:CSERpt_Mtr_Elec_CD"  ResProj:CSERpt_Mtr_Elec_CD  = {
         if (CSERpt_Mtr_All_CD < 1) then  0  else  1  endif  }
   "Default ResProj:CSERpt_Mtr_NGas_CD"  ResProj:CSERpt_Mtr_NGas_CD  = {
         if (CSERpt_Mtr_All_CD < 1 .OR. Fuel_HaveNatGas < 1) then  0  else  1  endif  }
   "Default ResProj:CSERpt_Mtr_Othr_CD"  ResProj:CSERpt_Mtr_Othr_CD  = {
         if (CSERpt_Mtr_All_CD < 1 .OR. Fuel_HaveOther  < 1) then  0  else  1  endif  }
                                                                
   "Default ResProj:CSERpt_ZnEnergy_HD"  ResProj:CSERpt_ZnEnergy_HD  = {  0  }
   "Default ResProj:CSERpt_Mtr_All_HD"   ResProj:CSERpt_Mtr_All_HD   = {  0  }
   "Default ResProj:CSERpt_Mtr_Elec_HD"  ResProj:CSERpt_Mtr_Elec_HD  = {
         if (CSERpt_Mtr_All_HD < 1) then  0  else  1  endif  }
   "Default ResProj:CSERpt_Mtr_NGas_HD"  ResProj:CSERpt_Mtr_NGas_HD  = {
         if (CSERpt_Mtr_All_HD < 1 .OR. Fuel_HaveNatGas < 1) then  0  else  1  endif  }
   "Default ResProj:CSERpt_Mtr_Othr_HD"  ResProj:CSERpt_Mtr_Othr_HD  = {
         if (CSERpt_Mtr_All_HD < 1 .OR. Fuel_HaveOther  < 1) then  0  else  1  endif  }

   ; moved StdDesignFuel & DRtgDesignFuel rules down from above since now can depend on other model defaulting - SAC 02/05/21
   "Set ResProj:NumProposedHPWHs - # of active/assigned (& new) HPWHs in proposed model"     ; SAC 02/05/21
      ResProj:NumProposedHPWHs = {  SumAll( ResWtrHtr:IsNewAssignedHPWH )  }
   "Set ResProj:AllowStdDesignFuel - StdDesignFuel availability flag (0-not allowed, 1-allowed, 2-by use)"  ResProj:AllowStdDesignFuel =        ; SAC 6/13/20 (2022AllElecStd) - SAC 6/18/20   ; remove dependence on EnableReserchMode - SAC 11/18/21
      {  if (IfValidAnd( AnalysisVersion >= 220000 ) .AND. RunScope == 1)
         then  if (StdDesignFuel >= 3)
               then  2     ; allow specification of fuel by use - SAC 7/2/20 (2022AllElecStd)
               else  1  endif
         else  0  endif  }
   "switch old AllElecStdDesign input to StdDesignFuel (if allowed & specified)"    ResProj:Action =        ; SAC 6/18/20 (2022AllElecStd)
      {  if (AllowStdDesignFuel .AND. IfValidAnd( AllElecStdDesign > 0 ))
         then  EvalRulelist( "Force_StdDesignFuel_AllElectric" )  else  UNCHANGED  endif  }
   "hardwire StdDesignFuel options based on '2022 Final' selections"     ResProj:Action =                       ; SAC 02/05/21
      {  if (AllowStdDesignFuel .AND. StdDesignFuel >= 11)
         then  EvalRulelist( "Force_StdDesignFuel_2022Final" )  else  UNCHANGED  endif  }

; duplicate or unnecessary rules, those needed mostly ported to Com's Project-Multifamily.rule module - SAC 10/07/21 & 10/07/21
;   "Set ResProj:AllowDRtgDesignFuel - DRtgDesignFuel availability flag (0-not allowed, 1-allowed, 2-by use)"   ResProj:AllowDRtgDesignFuel =       ; SAC 01/16/21
;      {  if (EnableResearchMode > 0 .AND. IfValidAnd( AnalysisVersion >= 190200 ) .AND. RunScope == 1)
;         then  if (DRtgDesignFuel >= 3)
;               then  2     ; specification of fuel by use
;               else  1  endif
;         else  0  endif  }
;   "hardwire DRtgDesignFuel options based on '2022 Final' selections"    ResProj:Action =                       ; SAC 02/05/21
;      {  if (AllowDRtgDesignFuel .AND. DRtgDesignFuel >= 11)
;         then  EvalRulelist( "Force_DRtgDesignFuel_2022Final" )  else  UNCHANGED  endif  }

   "Default ResProj:StdDesignFuel_Ckg"    ResProj:StdDesignFuel_Ckg =      ; SAC 01/19/21
      {  if (AllowStdDesignFuel > 0 .AND. LocalStatus( StdDesignFuel_App ) > 5)
         then  StdDesignFuel_App  else  "Electricity"  endif  }
   "Default ResProj:StdDesignFuel_Dry"    ResProj:StdDesignFuel_Dry = 
      {  if (AllowStdDesignFuel > 0)
         then  StdDesignFuel_Ckg  else  UNCHANGED  endif  }

; duplicate or unnecessary rules, those needed mostly ported to Com's Project-Multifamily.rule module - SAC 10/07/21 & 10/07/21
;   "Default ResProj:DRtgDesignFuel_Ckg"   ResProj:DRtgDesignFuel_Ckg =     ; SAC 01/19/21
;      {  if (AllowDRtgDesignFuel > 0 .AND. LocalStatus( DRtgDesignFuel_App ) > 5)
;         then  DRtgDesignFuel_App  else  "Electricity"  endif  }
;   "Default ResProj:DRtgDesignFuel_Dry"   ResProj:DRtgDesignFuel_Dry = 
;      {  if (AllowDRtgDesignFuel > 0)
;         then  DRtgDesignFuel_Ckg  else  UNCHANGED  endif  }

   "Default ResProj:StdDesignCompactDistrib - whether to apply 2019 DHW compact distribution standard design settings"       ; SAC 01/22/21
      ResProj:StdDesignCompactDistrib  = {   if (AllowStdDesignFuel > 0) then  0
                                          else  UNDEFINED  endif  }
   ; ResProj:StdDesignCompactDistVal - no default - SAC 01/27/21
   "Set ResProj:StdDesignCompactDistYear - Title24 code year to base DHW compact distribution table look-ups on" 
      ResProj:StdDesignCompactDistYear = {   if (AllowStdDesignFuel > 0 .AND. IfValidAnd( StdDesignCompactDistrib > 0 )) then  2019
                                          else  StdDesignBase  endif  }
                        ;"dbg" ResProj:Action = { PostMessageToLog( "just set StdDesignCompactDistYear to %g (ProposedInput)", StdDesignCompactDistYear ) }
   "Default ResProj:StdDesignDrnWtrHtRecov - whether to apply 2019 drain water heat recovery standard design settings" 
      ResProj:StdDesignDrnWtrHtRecov   = {   if (AllowStdDesignFuel > 0) then  0
                                          else  UNDEFINED  endif  }
   "Set ResProj:StdDesignDrnWtrHtRecYear - Title24 code year to base drain water heat recovery table look-ups on" 
      ResProj:StdDesignDrnWtrHtRecYear = {   if (AllowStdDesignFuel > 0 .AND. IfValidAnd( StdDesignDrnWtrHtRecov > 0 )) then  2019
                                          else  StdDesignBase  endif  }
   ; ResProj:StdDesignCompactDistYear & ResProj:StdDesignDrnWtrHtRecYear ALSO set @ top of 'BudgetConversion_DHW' rulelist - SAC 01/22/21

   "Default ResProj:StdDesignHPWHLocOverride - whether to override the standard design HPWH location to the largest conditioned zone"     ; SAC 01/22/21
      ResProj:StdDesignHPWHLocOverride = {   if (AllowStdDesignFuel > 0) then  0
                                          else  UNDEFINED  endif  }

   "Default ResProj:StdDesignWinPerfAdjust - whether to adjust the standard design window performance settings"         ; SAC 01/22/21
      ResProj:StdDesignWinPerfAdjust = {     if (AllowStdDesignFuel > 0) then  0
                                          else  UNDEFINED  endif  }
   "Set ResProj:StdDesignWinAdj_Ufactor - adjustment to the standard design window U-factor" 
      ResProj:StdDesignWinAdj_Ufactor = {    if (AllowStdDesignFuel > 0 .AND. IfValidAnd( StdDesignWinPerfAdjust > 0 )) then  -0.1
                                          else  UNDEFINED  endif  }
   "Set ResProj:StdDesignWinAdj_SHGC - adjustment to the standard design window SHGC" 
      ResProj:StdDesignWinAdj_SHGC = {       if (AllowStdDesignFuel > 0 .AND. IfValidAnd( StdDesignWinPerfAdjust > 0 )) then  -0.03
                                          else  UNDEFINED  endif  }

; duplicate or unnecessary rules, those needed mostly ported to Com's Project-Multifamily.rule module - SAC 10/07/21 & 10/07/21
;   "Set ResProj:SMFFollowsStdDesignFuel - override the standard mixed fuel run w/ customized standard design fuel options"    ; SAC 02/01/21
;      ResProj:SMFFollowsStdDesignFuel = {  0  }
;; end of rules related to custom Std and DRtg run fuel and features - SAC 02/05/21


   "Set ResProj:CSERpt_HaveReports"    ResProj:CSERpt_HaveReports = {
         if ( ( CSERpt_ZnDataDump > 0 .OR. CSERpt_ZnEnergy .OR.
                CSERpt_ZnEnergy_HD > 0 .OR. CSERpt_ZnEnergy_CD > 0 .OR. CSERpt_ZnEnergy_DD > 0 ) .AND.
              ( IfValidAnd( CondFloorArea > 1 ) .OR. IfValidAnd( HasGarage > 0 ) .OR.
                SumAll( Attic:FloorArea ) > 1 ) ) then  1
         else if (CSERpt_HVACDescrip > 0 .AND. SumAll( HVACSys:FloorAreaServed ) > 0) then  1
         else if (CSERpt_HtPumpHtg > 0 .AND. SumAll( HVACHtPump:FloorAreaServed ) > 0) then  1
         else if (CSERpt_Mtr_All > 0 .OR. CSERpt_Mtr_All_HD > 0 .OR.
                  CSERpt_Mtr_All_CD > 0 .OR. CSERpt_Mtr_All_DD > 0) then  1
         else if (Fuel_HaveElec > 0 .AND. (CSERpt_Mtr_Elec > 0 .OR.
                    CSERpt_Mtr_Elec_HD > 0 .OR. CSERpt_Mtr_Elec_CD > 0 .OR. CSERpt_Mtr_Elec_DD > 0)) then  1
         else if (Fuel_HaveNatGas > 0 .AND. (CSERpt_Mtr_NGas > 0 .OR.
                    CSERpt_Mtr_NGas_HD > 0 .OR. CSERpt_Mtr_NGas_CD > 0 .OR. CSERpt_Mtr_NGas_DD > 0)) then  1
         else if (Fuel_HaveOther > 0 .AND. (CSERpt_Mtr_Othr > 0 .OR.
                    CSERpt_Mtr_Othr_HD > 0 .OR. CSERpt_Mtr_Othr_CD > 0 .OR. CSERpt_Mtr_Othr_DD > 0)) then  1
         else  0  endif endif endif endif endif endif endif  }


; duplicate or unnecessary rules, those needed mostly ported to Com's Project-Multifamily.rule module - SAC 10/07/21 & 10/07/21
;   ; model adjustments that require first round of defaulting to have been executed first - SAC 2/3/20
;   "Remove inputs related to DwellUnitType:DHWSolFrac*"     DwellUnitType:Action  =       ; SAC 2/3/20 (tic #1198)
;      {  if (IfValidAnd( Proj:AnalysisVersion >= 190102 )==0 .OR. IfValidAnd( ResProj:DefaultingRounds > 1 ) .OR.
;             IfValidAnd( ResProj:EnableResearchMode > 0 )) then  UNCHANGED
;         else if (DHWSolFracType > 0 .OR. IfValidAnd( DHWSolFracAnn > 0 ) .OR.
;                  IfValidAnd( DHWSolFracMon[1]  > 0 ) .OR. IfValidAnd( DHWSolFracMon[2]  > 0 ) .OR. IfValidAnd( DHWSolFracMon[3]  > 0 ) .OR.
;                  IfValidAnd( DHWSolFracMon[4]  > 0 ) .OR. IfValidAnd( DHWSolFracMon[5]  > 0 ) .OR. IfValidAnd( DHWSolFracMon[6]  > 0 ) .OR.
;                  IfValidAnd( DHWSolFracMon[7]  > 0 ) .OR. IfValidAnd( DHWSolFracMon[8]  > 0 ) .OR. IfValidAnd( DHWSolFracMon[9]  > 0 ) .OR.
;                  IfValidAnd( DHWSolFracMon[10] > 0 ) .OR. IfValidAnd( DHWSolFracMon[11] > 0 ) .OR. IfValidAnd( DHWSolFracMon[12] > 0 ))
;         then  EvalRulelist( "Blast_DwellUnitType_DHWSolFrac", 1 )
;         else  UNCHANGED  endif endif  }
;
;   "Remove inputs related to DHWSys:SolFrac*"     DHWSys:Action  =       ; SAC 2/3/20 (tic #1198)
;      {  if (IfValidAnd( Proj:AnalysisVersion >= 190102 )==0 .OR. IfValidAnd( ResProj:DefaultingRounds > 1 ) .OR.
;             IfValidAnd( ResProj:EnableResearchMode > 0 )) then  UNCHANGED
;         else if (SolFracType > 0 .OR. IfValidAnd( SolFracAnn > 0 ) .OR.
;                  IfValidAnd( SolFracMon[1]  > 0 ) .OR. IfValidAnd( SolFracMon[2]  > 0 ) .OR. IfValidAnd( SolFracMon[3]  > 0 ) .OR.
;                  IfValidAnd( SolFracMon[4]  > 0 ) .OR. IfValidAnd( SolFracMon[5]  > 0 ) .OR. IfValidAnd( SolFracMon[6]  > 0 ) .OR.
;                  IfValidAnd( SolFracMon[7]  > 0 ) .OR. IfValidAnd( SolFracMon[8]  > 0 ) .OR. IfValidAnd( SolFracMon[9]  > 0 ) .OR.
;                  IfValidAnd( SolFracMon[10] > 0 ) .OR. IfValidAnd( SolFracMon[11] > 0 ) .OR. IfValidAnd( SolFracMon[12] > 0 ))
;         then  EvalRulelist( "Blast_DHWSys_DHWSolFrac", 1 )
;         else  UNCHANGED  endif endif  }
;
;   "Warn user of presence of OtherZone objects in 2019 model when BRL or RM not activated"   ResProj:Action  =       ; SAC 2/14/20 - install check & user message for 2019 models containing OtherZones
;      {  if (IfValidAnd( AnalysisVersion >= 220000 ) .OR. IfValidAnd( DefaultingRounds > 1 ) .OR.
;             IfValidAnd( EnableResearchMode > 0 ) .OR. IfValidAnd( BypassRuleLimits > 0 )) then  UNCHANGED
;         else if (ComponentCount( OtherZone ) < 1) then  UNCHANGED
;         else if (IfValidAnd( BypassMessageBoxes > 0 ))
;         then  PostMessageToLog( "%g OtherZone objects exist in the building description. Analysis cannot be performed on buildings with OtherZones unless EnableResearchMode or BypassRuleLimits are activated.", ComponentCount( OtherZone ) )
;         else  MessageBox(       "%g OtherZone objects exist in the building description. Analysis cannot be performed on buildings with OtherZones unless EnableResearchMode or BypassRuleLimits are activated.", ComponentCount( OtherZone ) )
;         endif endif endif  }
;
;   "UI settings for Analysis Options confirmation dialog"   ResProj:Action = {  EvalRulelist( "ConfirmAnalysisOptions_UI" )  }   ; SAC 6/11/20 (CommunitySolar)
;
;; SAC 2/17/20 - fix Fan Efficacy problems w/ the loaded run
;;   "Force fix to Fan Efficacy errors"     ResProj:Action  =
;;      {  if (IfValidAnd( DefaultingRounds != 2 )) then  UNCHANGED
;;         else if (IfValidAnd( IsMultiFamily > 0 ))
;;         then  EvalRulelist( "FIX_2019FanEfficacy_MFam" )
;;         else  EvalRulelist( "FIX_2019FanEfficacy_SFam" )  endif endif  }

END
;*************************************************************************

;************************************************************************* SAC 08/27/20
RULELIST "Set_ResProj_DefaultIAQFanPwr" 0 0 0 0
   "Default ResProj:IAQSupInletsAccessible - supply air filters, outside air inlets, and H/ERV recovery cores are readily accessible"     ; SAC 01/20/21 (tic #1243)
      ResProj:IAQSupInletsAccessible = {  0  }
   "Set ResProj:IAQSupInletsAccessMsg"    ResProj:IAQSupInletsAccessMsg =        ; SAC 01/21/21 (tic #1243)   ; updated label - SAC 10/28/21 (tic #1282)
      {  if (IAQSupInletsAccessible == 0)
         then  "Supply air filters, inlets and H/ERV cores must be accessible to receive IAQ compliance credit"
         else  UNDEFINED  endif  }
      ;   then  "Inaccessible inlets/filters/cores will prevent any compliance credit for efficient IAQ systems"

   "Default ResProj:IAQHasFID - system has FID"       ; SAC 08/22/21 (tic #1243)
      ResProj:IAQHasFID = {  0  }

   "Set ResProj:MaxStdIAQCFMRatio"     ResProj:MaxStdIAQCFMRatio = 
      {  if (IfValidAnd( AnalysisVersion >= 190200 ))
         then  1.25     ; max std IAQ CFM 110% of min required (tic #1243) - SAC 01/20/21 / switched from 110% to 125% for 2019.2.0-RC - SAC 08/18/21 (tic #1243)
         else  1.5  endif  }

   ; SAC 2/25/20 - revised default IAQ fan power from 0.25 to 0.3 for SFam and 0.6 for MFam in 2019.2.0+ (tic #1174)
   ; revised logic to default MFam to 0.3 for IAQ other than Balanced - SAC 7/21/20 (tic #1174)
   "Set ResProj:DefaultIAQFanPwr"   ResProj:DefaultIAQFanPwr  =               ; revised DefaultIAQFanPwr unbal 0.3->0.35 & bal 0.6->0.7 - SAC 01/19/21 (tic #1243) 
      {  if (IfValidAnd( AnalysisVersion >= 190200 )==0) then  0.25
         else if (IsMultiFamily)
         then  if (IfValidAnd( MostDUIAQ_Balanced = 0 ))
               then  0.35  else  0.7  endif
         else  0.35  endif endif  }
END
;*************************************************************************

; duplicate or unnecessary rules, those needed mostly ported to Com's Project-Multifamily.rule module - SAC 10/07/21
;; SAC 4/10/15 - force reset of addition alone flag/value when RunScope NOT New Cons
;;*************************************************************************
;RULELIST "ForceDefault_IsAddAlone_AddFrac" 1 0 0 0
;	"Force default ResProj:IsAddAlone"			ResProj:IsAddAlone			= {	0	} 
;	"Force default ResProj:AdditionCFAFrac"	ResProj:AdditionCFAFrac		= {	1	} 
;	"Force reset ResProj:AddAloneExistArea"	ResProj:AddAloneExistArea	= {	UNDEFINED  }		; SAC 12/28/15
;	"Force reset ResProj:AddAloneAddedArea"	ResProj:AddAloneAddedArea	= {	UNDEFINED  }
;END
;;*************************************************************************
;
;; SAC 12/8/15 - tic 512 ensure wall orientations are reported as 0/90/180/270 for all orientation runs
;;*************************************************************************
;RULELIST "ForceDefault_FrontOrientation" 1 0 0 0
;;*************************************************************************
;   "Default ResProj:FrontOrientation"		ResProj:FrontOrientation	= {	0  }
;END
;;*************************************************************************
;
;
;; SAC 6/28/17 - new rulelist to handle model adjustments immediately following LoadModel (project file open) action
;;*************************************************************************
;RULELIST "LoadModelAdjustments" 1 0 0 0
;;*************************************************************************
;   ; added eval of generic SVN & code version rules referenced by subsequent rules... - SAC 3/2/18
;	"Set ResProj:RuleRepoRev"		                        ResProj:Action	= {	EvalRulelist( "Set_RuleRepoRev" )  }
;	"Set various Code & Program Version properties"		ResProj:Action	= {	EvalRulelist( "Default_CodeVersion" )  }
;
;   "backward compat for EWall Cons:WallExtFinishLayer = 'R4 Synthetic Stucco'"   ; SAC 6/28/17 - (tic #761)
;      Cons:Action  = {
;         if (CanAssignTo == 0 .AND. WallExtFinishLayer == 100103)      ; ResExtWall where WallExtFinishLayer = 'R4 Synthetic Stucco'
;         then  if (Type == 0 .OR. Type == 1 .OR. Type == 5)   ; two-path ResExtWall
;               then  EvalRulelist( "ForceUpdate_Cons_WallExtFinish_2Path_R4Synthetic", 1 )
;               else  EvalRulelist( "ForceUpdate_Cons_WallExtFinish_1Path_R4Synthetic", 1 )  endif
;         else if ((CanAssignTo == 5 .OR. CanAssignTo == 9) .AND. FlrExtFinishLayer == 100103)   ; ExtFlr where FlrExtFinishLayer = 'R4 Synthetic Stucco'
;         then  if (Type == 25) 
;               then  EvalRulelist( "ForceUpdate_Cons_FlrExtFinish_1Path_R4Synthetic", 1 )
;               else  EvalRulelist( "ForceUpdate_Cons_FlrExtFinish_2Path_R4Synthetic", 1 )  endif
;         else  UNCHANGED  endif endif  }
;
;   "backward compat for EWall Cons:CavityLayer = 'R 19' combined with 2x6 framing"   ; SAC 6/28/17 - (tic #761)
;      Cons:Action  = {
;         if (IfValidAnd( ResProj:BEMVersion > 5 ) .OR. LocalStatus( CanAssignTo ) < 1) then  UNCHANGED
;         else if ( ( ( (CanAssignTo == 0 .OR. CanAssignTo == 10 .OR. CanAssignTo == 20) .AND. (Type = 0 .OR. Type = 1)) .OR.   ; framed Ext/Int/Und Walls
;                     ( (CanAssignTo == 2 .OR. CanAssignTo == 6) .AND. (Type = 10 .OR. Type = 11 .OR. Type = 12)) .OR.      ; framed Cath/Int Ceilings
;                     ( (CanAssignTo == 4 .OR. CanAssignTo == 5) .AND. (Type = 20 .OR. Type = 23)) ) .AND.    ; framed Int/Ext Flrs
;                   CavityLayer == 19 .AND. FrameLayer >= 600 .AND. FrameLayer <= 699 )
;         then  EvalRulelist( "ForceUpdate_Cons_R19_2x6_Compressed", 1 )
;         else  UNCHANGED  endif endif  }
;
;   "backward compat for AtticRoof Cons:CavInsulOverFrame to ensure consistency w/ past releases"   ; SAC 7/10/17 - (tic #856)
;      Cons:Action  = {
;         if (IfValidAnd( ResProj:BEMVersion > 5 ) .OR. LocalStatus( CanAssignTo ) < 1) then  UNCHANGED
;         else if (CanAssignTo == 1 .AND. LocalStatus( CavInsulOverFrame ) < 7)
;         then  EvalRulelist( "ForceUpdate_Cons_CavInsulOverFrame_On", 1 )
;         else  UNCHANGED  endif endif  }
;
;   "Delete ResMat objects with invalid ConductivityQII (=0)"   ; SAC 10/11/17 - prune invalid ResMat objects related to addition of compressed insulation Cons layers (tic #902)
;      ResMat:Action  = {
;         if (IfValidAnd( ConductivityQII = 0 )) then  DeleteComp()
;         else  UNCHANGED  endif  }
;
;;"dbg" ResProj:Action = { MessageBox( "ResProj:EnergyCodeYearNum status = %g, ResProj:BEMVersion status = %g", GlobalStatus( ResProj:EnergyCodeYearNum ), GlobalStatus( ResProj:BEMVersion ) ) }
;   "Address re-characterization of DHWHeater:TankType 'Consumer Instantaneous (UEF)-New' -> 'Consumer Instantaneous (UEF)'"  ; SAC 3/1/18 (tic #993)
;      DHWHeater:Action  = {
;         if (HeaterElementType == 1 .AND. TankType == 10 .AND. IfValidAnd( ResProj:EnergyCodeYearNum >= 2019 ) .AND.
;             IfValidAnd( ResProj:BEMVersion >= 7 )==0 .AND. LocalStatus( InputRating ) > 6)
;         then  EvalRulelist( "GasDHWHeater_ConvertToNew_ConsumerInstantaneousUEF", 1 )
;         else  UNCHANGED  endif  }
;
;   "Transform old DHWSys:RecircPumpHP & Eff to roughly consistent RecircPumpPwr"    DHWSys:Action  =     ; SAC 2/11/20 (tic #862)
;      {  if (LocalStatus( RecircPumpHP ) > 0 .OR. LocalStatus( RecircPumpEff ) > 0)
;         then  EvalRulelist( "TransformOld_DHWSys_RecircPump", 1 )
;         else  UNCHANGED  endif  }
;
;   "Force Setting of new DHWSys:CentralRecircType based on prior CentralDHW & MFamDistType inputs"    DHWSys:Action =      ; SAC 02/13/21 (tic #1260 & #1220)
;      {  if (IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND.
;             (LocalStatus( CentralDHW ) > 5 .OR. LocalStatus( MFamDistType ) > 5))
;         then  EvalRulelist( "Switch_DHWSys_CentralDHW_MFamDistType_to_CentralRecircType", 1 ) 
;         else  UNCHANGED endif  }
;
;   "Warn user of change to 'Advanced DR Control' BatteryControl simulation mechanism"  ResProj:Action =        ; SAC 03/30/21 (tic #1266)
;      {  if (IfValidAnd( ResProj:BEMVersion <= 8 ) .AND. IfValidAnd( BattMaxCap > 0 ) .AND. BatteryControl == 101)
;         then  PostWarning( "Expect differences in analysis results due to 'Advanced DR Control' battery simulation updated to new algorithm that better adapts to variations in TDV data." )
;         else  UNCHANGED  endif  }
;
;   "Hardwire ResProj:SFamCDSpecFixDists for old SFam models w/ compact distribution"         ResProj:Action =              ; SAC 09/29/21 (tic #1277)
;      {  if (IfValidAnd( ResProj:BEMVersion <= 9 ) .AND. IfValidAnd( IsMultiFamily > 0 )==0 .AND.
;             SFamCompactDistrib > 0 .AND. IfValidAnd( SFamUserSpecCmpctDist > 0 )==0)
;         then  EvalRulelist( "TransformOld_ResProj_SFamCDSpecFixDists" )
;         else  UNCHANGED  endif  }
;   "Hardwire DwellUnitType:CDSpecFixDists for old MFam models w/ compact distribution"    DwellUnitType:Action =     ; SAC 09/29/21 (tic #1277)
;      {  if (IfValidAnd( ResProj:BEMVersion <= 9 ) .AND. IfValidAnd( ResProj:IsMultiFamily > 0 ) .AND.
;             CompactDistrib > 0 .AND. IfValidAnd( UsrSpecCmpctDist > 0 )==0)
;         then  EvalRulelist( "TransformOld_DwellUnitType_CDSpecFixDists", 1 )
;         else  UNCHANGED  endif  }
;
;; removed forced IAQFan power defaulting in latest round of 19.2.0 mods - SAC 7/20/20 (tic #1174)
;;   "Force new default IAQFan:WperCFMIAQ values (of 0.25) to allow new SFam/MFam inputs to be used"    IAQFan:Action  =     ; SAC 2/12/20 (tic #1174)
;;      {  if (IfValidAnd( WperCFMIAQ = 0.25 ) .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND.
;;             IfValidAnd( ResProj:BEMVersion > 1 ) .AND. IfValidAnd( ResProj:BEMVersion < 8 ))
;;         then  EvalRulelist( "ForceNewDefault_IAQFan_WperCFMIAQ", 1 )
;;         else  UNCHANGED  endif  }
;
;;   "TESTING new Psych_HAProps() function"    ResProj:Action =        ; SAC 05/26/21
;;      {  EvalRulelist( "Test_Psych_HAProps" )  }
;END
;;*************************************************************************


;*************************************************************************  ; SAC 2/28/18 (tic #992)
RULELIST "ForceOff_ResProj_IsAllElectric" 1 0 0 0
   "Toggle Off ResProj:IsAllElectric"     ResProj:IsAllElectric  = {  0  }
END
;*************************************************************************

;************************************************************************* SAC 6/18/20 (2022AllElecStd)
RULELIST  "Force_StdDesignFuel_AllElectric"  1 0 1 1
   "Hardwire ResProj:StdDesignFuel to 'Force All Electric'"    ResProj:StdDesignFuel = {  1  }
   "Blast ResProj:AllElecStdDesign"    ResProj:AllElecStdDesign = {  UNDEFINED  }
END
;************************************************************************* SAC 6/18/20 (2022AllElecStd)
RULELIST  "Force_StdDesignFuel_2022Final"  1 0 1 1
   "Set ResProj:StdDesignFuel_Ckg"     ResProj:StdDesignFuel_Ckg =
      {  T24RCustomStandardDesign:Cooking( "StdOption", EnumString( StdDesignFuel ), "BldgType", BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )  }
   "Set ResProj:StdDesignFuel_Dry"     ResProj:StdDesignFuel_Dry = 
      {  T24RCustomStandardDesign:Dryer(   "StdOption", EnumString( StdDesignFuel ), "BldgType", BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )  }
   "Set ResProj:StdDesignFuel_HVAC"    ResProj:StdDesignFuel_HVAC =
      {  T24RCustomStandardDesign:HVAC(    "StdOption", EnumString( StdDesignFuel ), "BldgType", BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )  }
   "Set ResProj:StdDesignFuel_DHW"     ResProj:StdDesignFuel_DHW = 
      {  T24RCustomStandardDesign:DHW(     "StdOption", EnumString( StdDesignFuel ), "BldgType", BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )  }

   "Set ResProj:StdDesignCompactDistrib"     ResProj:StdDesignCompactDistrib  = 
      {  switch (T24RCustomStandardDesign:CompactDHW( "StdOption", EnumString( StdDesignFuel ), "BldgType", BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone ))
            case   0 :  0
            default  :  1
         endswitch  }
   "Set ResProj:StdDesignCompactDistVal"     ResProj:StdDesignCompactDistVal  = 
      {  if (StdDesignCompactDistrib == 0) then  UNDEFINED
         else if (T24RCustomStandardDesign:CompactDHW( "StdOption", EnumString( StdDesignFuel ), "BldgType", BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone ) == -1)
         then  T24RClimateZoneCodeBase:ElecDHWCompactFactor( "ClimateZone", ClimateZone, "CodeBase", 2019, "BldgType", BldgTypeTblStr )
         else  T24RCustomStandardDesign:CompactDHW( "StdOption", EnumString( StdDesignFuel ), "BldgType", BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )
         endif endif  }

   "Set ResProj:StdDesignDrnWtrHtRecov"      ResProj:StdDesignDrnWtrHtRecov   =
      {  T24RCustomStandardDesign:DrnWtrHtRec( "StdOption", EnumString( StdDesignFuel ), "BldgType", BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )  }
   "Set ResProj:StdDesignHPWHLocOverride"    ResProj:StdDesignHPWHLocOverride =
      {  T24RCustomStandardDesign:HPWHLoc(     "StdOption", EnumString( StdDesignFuel ), "BldgType", BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )  }
   "Set ResProj:StdDesignWinPerfAdjust"      ResProj:StdDesignWinPerfAdjust   =
      {  T24RCustomStandardDesign:WindowPerf(  "StdOption", EnumString( StdDesignFuel ), "BldgType", BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )  }

   "Set ResProj:StdDesignIAQType[1]"         ResProj:StdDesignIAQType[1]  =            ; SAC 04/02/21   ; MostUserDUIAQ_Exhaust - SAC 04/03/21
      {  if (  (IfValidAnd( MostUserDUIAQ_Exhaust > 0 ) .OR. IfValidAnd( IAQSupInletsAccessible > 0 )) .AND.
               T24RCustomStandardDesign:IAQType(        "StdOption", EnumString( StdDesignFuel ), "BldgType", BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone ) != "default")
         then  T24RCustomStandardDesign:IAQType(        "StdOption", EnumString( StdDesignFuel ), "BldgType", BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )
         else if (LocalStatus( StdDesignIAQType[1] ) > 4)
         then  UNCHANGED  else  UNDEFINED  endif endif  }
   "Set ResProj:StdDesignIAQFanPwr[1]"       ResProj:StdDesignIAQFanPwr[1]  =
      {  if (  (IfValidAnd( MostUserDUIAQ_Exhaust > 0 ) .OR. IfValidAnd( IAQSupInletsAccessible > 0 )) .AND.
               T24RCustomStandardDesign:IAQFanPwr(      "StdOption", EnumString( StdDesignFuel ), "BldgType", BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone ) > 0)
         then  T24RCustomStandardDesign:IAQFanPwr(      "StdOption", EnumString( StdDesignFuel ), "BldgType", BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )
         else  UNDEFINED  endif  }
   "Set ResProj:StdIAQHtRec_SRE[1]"          ResProj:StdIAQHtRec_SRE[1]  =
      {  if (  (IfValidAnd( MostUserDUIAQ_Exhaust > 0 ) .OR. IfValidAnd( IAQSupInletsAccessible > 0 )) .AND.
               T24RCustomStandardDesign:IAQHtRecovSRE(  "StdOption", EnumString( StdDesignFuel ), "BldgType", BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone ) > 0)
         then  T24RCustomStandardDesign:IAQHtRecovSRE(  "StdOption", EnumString( StdDesignFuel ), "BldgType", BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )
         else if (LocalStatus( StdIAQHtRec_SRE[1] ) > 4)
         then  UNCHANGED  else  UNDEFINED  endif endif  }
   "Set ResProj:StdIAQHtRec_ASRE[1]"         ResProj:StdIAQHtRec_ASRE[1]  =
      {  if (  (IfValidAnd( MostUserDUIAQ_Exhaust > 0 ) .OR. IfValidAnd( IAQSupInletsAccessible > 0 )) .AND.
               T24RCustomStandardDesign:IAQHtRecovASRE( "StdOption", EnumString( StdDesignFuel ), "BldgType", BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone ) > 0)
         then  T24RCustomStandardDesign:IAQHtRecovASRE( "StdOption", EnumString( StdDesignFuel ), "BldgType", BldgTypeTblStr, "NumPropHPWH", NumProposedHPWHs, "ClimateZone", ClimateZone )
         else if (LocalStatus( StdIAQHtRec_ASRE[1] ) > 4)
         then  UNCHANGED  else  UNDEFINED  endif endif  }
END
;*************************************************************************



;*************************************************************************
;*************************************************************************

ENDFILE














