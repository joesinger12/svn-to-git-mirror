; -------------------------------------------------------------------------
; Rules pertaining to:   Defaulting the Proposed Building Model - focusing on DHW properties
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2014, California Energy Commission
; Copyright (c) 2012-2014, Wrightsoft Corporation
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
;STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------

ENUM_PROPERTIES_VALUE   ; ensures retrieval/logic/us of enum properties assume numeric value (alternative is ENUM_PROPERTIES_STRING)

;************************************************************************* SAC 08/06/22
RULELIST "CUAC_ZoneUnitCounts" 0 0 0 0
;*************************************************************************
; these rules only evaluated if:  IfValidAnd( Proj:AffordableHousing > 0 ) .AND. IfValidAnd( Proj:CUACReport > 0 )

   "Set ResZn:AffordableUnitsByBedrmsWithMult[1] - Studio"     ResZn:AffordableUnitsByBedrmsWithMult[1] =      ; SAC 08/04/22 (CUAC)
      {  if (IfValidAnd( AffordableHousing > 0 )) then  NumDwellingUnitsByBedrmsWithMult[1]  else  UNDEFINED  endif  }
   "Set ResZn:AffordableUnitsByBedrmsWithMult[2] - 1 Bdrm"     ResZn:AffordableUnitsByBedrmsWithMult[2] =      ; SAC 08/05/22 (CUAC)
      {  if (IfValidAnd( AffordableHousing > 0 )) then  NumDwellingUnitsByBedrmsWithMult[2]  else  UNDEFINED  endif  }
   "Set ResZn:AffordableUnitsByBedrmsWithMult[3] - 2 Bdrm"     ResZn:AffordableUnitsByBedrmsWithMult[3] =
      {  if (IfValidAnd( AffordableHousing > 0 )) then  NumDwellingUnitsByBedrmsWithMult[3]  else  UNDEFINED  endif  }
   "Set ResZn:AffordableUnitsByBedrmsWithMult[4] - 3 Bdrm"     ResZn:AffordableUnitsByBedrmsWithMult[4] =
      {  if (IfValidAnd( AffordableHousing > 0 )) then  NumDwellingUnitsByBedrmsWithMult[4]  else  UNDEFINED  endif  }
   "Set ResZn:AffordableUnitsByBedrmsWithMult[5] - 4 Bdrm"     ResZn:AffordableUnitsByBedrmsWithMult[5] =
      {  if (IfValidAnd( AffordableHousing > 0 )) then  NumDwellingUnitsByBedrmsWithMult[5]  else  UNDEFINED  endif  }
   "Set ResZn:AffordableUnitsByBedrmsWithMult[6] - 5 Bdrm"     ResZn:AffordableUnitsByBedrmsWithMult[6] =
      {  if (IfValidAnd( AffordableHousing > 0 )) then  NumDwellingUnitsByBedrmsWithMult[6]  else  UNDEFINED  endif  }
   "Set ResZn:AffordableUnitsByBedrmsWithMult[7] - 6 Bdrm"     ResZn:AffordableUnitsByBedrmsWithMult[7] =
      {  if (IfValidAnd( AffordableHousing > 0 )) then  NumDwellingUnitsByBedrmsWithMult[7]  else  UNDEFINED  endif  }
   "Set ResZn:AffordableUnitsByBedrmsWithMult[8] - >6 Bdrm"    ResZn:AffordableUnitsByBedrmsWithMult[8] =
      {  if (IfValidAnd( AffordableHousing > 0 )) then  NumDwellingUnitsByBedrmsWithMult[8]  else  UNDEFINED  endif  }

   "Set ResZn:NumAffordableUnitTypes - 1"                   ResZn:NumAffordableUnitTypes =      ; SAC 08/05/22 (CUAC)
      {  if (IfValidAnd( AffordableUnitsByBedrmsWithMult[1] > 0 )) then  1  else  0  endif  }
   "Set ResZn:NumAffordableUnitTypes - 2-8"  for:#Ar=(2to8)  ResZn:NumAffordableUnitTypes =
      {  if (IfValidAnd( AffordableUnitsByBedrmsWithMult[#Ar] > 0 )) then  NumAffordableUnitTypes + 1  else  UNCHANGED  endif  }

   "default ResZn:CUAC_IncludeDHW"     ResZn:CUAC_IncludeDHW =       ; moved from CUAC object - SAC 09/27/23
      {  if (IfValidAnd( AffordableHousing > 0 )) then  1
         else  UNDEFINED  endif  }

   "Set ResZn:CUACErrorMsg"      ResZn:CUACErrorMsg =       ; SAC 08/07/22
      {  if (IfValidAnd( AffordableHousing > 0 )==0) then  UNDEFINED
         else if (NumAffordableUnitTypes < 1)
         then  "CUAC Error: No Affordable Dwellings present"
         else if (NumAffordableUnitTypes > 1)
         then  "CUAC Error: Dwellings must have same # of bedrooms"
         else if (IfValidAnd( AffordableUnitsByBedrmsWithMult[8] > 0 ))
         then  "CUAC Error: No CUAC calcs/reporting for >6 bedroom units"
         else  UNDEFINED  endif endif endif endif  }
   "Set ResZn:CUACError"   ResZn:CUACError = {  if (LocalStatus( CUACErrorMsg) > 0) then  1  else  UNDEFINED  endif  }

   "Set CUAC:AffordableUnitsByBedrms[1] - Studio"     CUAC:AffordableUnitsByBedrms[1] = {  SumAll( ResZn:AffordableUnitsByBedrmsWithMult[1] )  }      ; SAC 08/05/22 (CUAC)
   "Set CUAC:AffordableUnitsByBedrms[2] - 1 Bdrm"     CUAC:AffordableUnitsByBedrms[2] = {  SumAll( ResZn:AffordableUnitsByBedrmsWithMult[2] )  }
   "Set CUAC:AffordableUnitsByBedrms[3] - 2 Bdrm"     CUAC:AffordableUnitsByBedrms[3] = {  SumAll( ResZn:AffordableUnitsByBedrmsWithMult[3] )  }
   "Set CUAC:AffordableUnitsByBedrms[4] - 3 Bdrm"     CUAC:AffordableUnitsByBedrms[4] = {  SumAll( ResZn:AffordableUnitsByBedrmsWithMult[4] )  }
   "Set CUAC:AffordableUnitsByBedrms[5] - 4 Bdrm"     CUAC:AffordableUnitsByBedrms[5] = {  SumAll( ResZn:AffordableUnitsByBedrmsWithMult[5] )  }
   "Set CUAC:AffordableUnitsByBedrms[6] - 5 Bdrm"     CUAC:AffordableUnitsByBedrms[6] = {  SumAll( ResZn:AffordableUnitsByBedrmsWithMult[6] )  }
   "Set CUAC:AffordableUnitsByBedrms[7] - 6 Bdrm"     CUAC:AffordableUnitsByBedrms[7] = {  SumAll( ResZn:AffordableUnitsByBedrmsWithMult[7] )  }
   "Set CUAC:AffordableUnitsByBedrms[8] - >6 Bdrm"    CUAC:AffordableUnitsByBedrms[8] = {  SumAll( ResZn:AffordableUnitsByBedrmsWithMult[8] )  }
   "Set CUAC:NumAffordableDwellingUnits - 0-6 Bdrm"   CUAC:NumAffordableDwellingUnits =         ; SAC 09/13/22 (CUAC)
      {  AffordableUnitsByBedrms[1] + AffordableUnitsByBedrms[2] + AffordableUnitsByBedrms[3] + AffordableUnitsByBedrms[4] +
         AffordableUnitsByBedrms[5] + AffordableUnitsByBedrms[6] + AffordableUnitsByBedrms[7]  }

   "Set CUAC:ResidentsByBedrms[1] - Studio"              CUAC:ResidentsByBedrms[1]   = {                   AffordableUnitsByBedrms[1]   }    ; 1 resident per studio unit - SAC 11/21/22 (CUAC)
   "Set CUAC:ResidentsByBedrms[2-7]"      for:#U=(2to7)  CUAC:ResidentsByBedrms[#U]  = {  ((#U-1) * 1.5) * AffordableUnitsByBedrms[#U]  }    ; 1.5 residents per bedrm - SAC 11/21/22 (CUAC)
   "Set CUAC:NumResidents - 0-6 Bdrm"                    CUAC:NumResidents = 
      {  ResidentsByBedrms[1] + ResidentsByBedrms[2] + ResidentsByBedrms[3] + ResidentsByBedrms[4] +
         ResidentsByBedrms[5] + ResidentsByBedrms[6] + ResidentsByBedrms[7]  }
   "Set CUAC:ResidentFracByBedrms[1-7]"   for:#U=(1to7)  CUAC:ResidentFracByBedrms[#U]  = {  ResidentsByBedrms[#U] / max( NumResidents, 1 )  } 

   "Set CUAC:AvgUnitAreaByBedrms[1-8]"   for:#U=(1to8)   CUAC:AvgUnitAreaByBedrms[#U] =      ; SAC 12/08/22 (CUAC)
      {  if (IfValidAnd( AffordableUnitsByBedrms[#U] > 0 )==0) then  0
         else  SumAcrossIf( ResZn:CondFlrAreaWithMult, ResZn:AffordableUnitsByBedrmsWithMult[#U] > 0 ) / AffordableUnitsByBedrms[#U]  endif  } 

   "Set CUAC:TotAffordableUnitArea"    CUAC:TotAffordableUnitArea =     ; SAC 12/08/22 (CUAC)
      {  (AvgUnitAreaByBedrms[1] * AffordableUnitsByBedrms[1]) + (AvgUnitAreaByBedrms[2] * AffordableUnitsByBedrms[2]) +
         (AvgUnitAreaByBedrms[3] * AffordableUnitsByBedrms[3]) + (AvgUnitAreaByBedrms[4] * AffordableUnitsByBedrms[4]) +
         (AvgUnitAreaByBedrms[5] * AffordableUnitsByBedrms[5]) + (AvgUnitAreaByBedrms[6] * AffordableUnitsByBedrms[6]) +
         (AvgUnitAreaByBedrms[7] * AffordableUnitsByBedrms[7]) + (AvgUnitAreaByBedrms[8] * AffordableUnitsByBedrms[8])  }

   "Set CUAC:PctIndivUnitAreaByBedrms[1-8]"   for:#U=(1to8)   CUAC:PctIndivUnitAreaByBedrms[#U] =     ; SAC 12/08/22 (CUAC)
      {  if (IfValidAnd( TotAffordableUnitArea > 0 )==0) then  0
         else  AvgUnitAreaByBedrms[#U] * 100 / TotAffordableUnitArea  endif  } 

; don't default PctIndivUnitPVByBedrms[*] ??
;   "Default CUAC:PctIndivUnitPVByBedrms[1-8]"   for:#U=(1to8)   CUAC:PctIndivUnitPVByBedrms[#U] = {  PctIndivUnitAreaByBedrms[#U]  }

   "Init CUAC:TotUserDefinedTenantPV"                    CUAC:TotUserDefinedTenantPV = {  0  }
   "Set CUAC:TotUserDefinedTenantPV 1-7"  for:#U=(1to7)  CUAC:TotUserDefinedTenantPV =
      {  if (LocalStatus( PctIndivUnitPVByBedrms[#U] ) > 4 .AND. IfValidAnd( PctIndivUnitPVByBedrms[#U] > 0 ) .AND.
             IfValidAnd( AffordablePVDCSysSize > 0 ) .AND. IfValidAnd( ShowPVBattInputs > 0 ))
         then  TotUserDefinedTenantPV + (PctIndivUnitPVByBedrms[#U] * AffordableUnitsByBedrms[#U] * AffordablePVDCSysSize / 100)
         else  UNCHANGED  endif  }

   "Default CUAC:PctIndivUnitPVByBedrms[1] if all others are user-defined"    CUAC:PctIndivUnitPVByBedrms[1] =          ; SAC 12/08/22
      {  if ( (IfValidAnd( AvgUnitAreaByBedrms[1] > 0 )   .AND. LocalStatus( PctIndivUnitPVByBedrms[1] ) < 5) .AND. IfValidAnd( AffordablePVDCSysSize > 0 ) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[2] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[2] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[3] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[3] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[4] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[4] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[5] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[5] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[6] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[6] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[7] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[7] ) > 4) )
         then  max( 0, 100 * (AffordablePVDCSysSize - TotUserDefinedTenantPV) / AffordablePVDCSysSize / AffordableUnitsByBedrms[1] )
         else  UNDEFINED  endif  }
   "Default CUAC:PctIndivUnitPVByBedrms[2] if all others are user-defined"    CUAC:PctIndivUnitPVByBedrms[2] =
      {  if ( (IfValidAnd( AvgUnitAreaByBedrms[2] > 0 )   .AND. LocalStatus( PctIndivUnitPVByBedrms[2] ) < 5) .AND. IfValidAnd( AffordablePVDCSysSize > 0 ) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[1] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[1] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[3] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[3] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[4] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[4] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[5] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[5] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[6] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[6] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[7] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[7] ) > 4) )
         then  max( 0, 100 * (AffordablePVDCSysSize - TotUserDefinedTenantPV) / AffordablePVDCSysSize / AffordableUnitsByBedrms[2] )
         else  UNDEFINED  endif  }
   "Default CUAC:PctIndivUnitPVByBedrms[3] if all others are user-defined"    CUAC:PctIndivUnitPVByBedrms[3] =
      {  if ( (IfValidAnd( AvgUnitAreaByBedrms[3] > 0 )   .AND. LocalStatus( PctIndivUnitPVByBedrms[3] ) < 5) .AND. IfValidAnd( AffordablePVDCSysSize > 0 ) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[2] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[2] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[1] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[1] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[4] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[4] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[5] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[5] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[6] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[6] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[7] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[7] ) > 4) )
         then  max( 0, 100 * (AffordablePVDCSysSize - TotUserDefinedTenantPV) / AffordablePVDCSysSize / AffordableUnitsByBedrms[3] )
         else  UNDEFINED  endif  }
   "Default CUAC:PctIndivUnitPVByBedrms[4] if all others are user-defined"    CUAC:PctIndivUnitPVByBedrms[4] = 
      {  if ( (IfValidAnd( AvgUnitAreaByBedrms[4] > 0 )   .AND. LocalStatus( PctIndivUnitPVByBedrms[4] ) < 5) .AND. IfValidAnd( AffordablePVDCSysSize > 0 ) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[2] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[2] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[3] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[3] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[1] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[1] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[5] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[5] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[6] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[6] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[7] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[7] ) > 4) )
         then  max( 0, 100 * (AffordablePVDCSysSize - TotUserDefinedTenantPV) / AffordablePVDCSysSize / AffordableUnitsByBedrms[4] )
         else  UNDEFINED  endif  }
   "Default CUAC:PctIndivUnitPVByBedrms[5] if all others are user-defined"    CUAC:PctIndivUnitPVByBedrms[5] = 
      {  if ( (IfValidAnd( AvgUnitAreaByBedrms[5] > 0 )   .AND. LocalStatus( PctIndivUnitPVByBedrms[5] ) < 5) .AND. IfValidAnd( AffordablePVDCSysSize > 0 ) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[2] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[2] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[3] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[3] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[4] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[4] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[1] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[1] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[6] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[6] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[7] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[7] ) > 4) )
         then  max( 0, 100 * (AffordablePVDCSysSize - TotUserDefinedTenantPV) / AffordablePVDCSysSize / AffordableUnitsByBedrms[5] )
         else  UNDEFINED  endif  }
   "Default CUAC:PctIndivUnitPVByBedrms[6] if all others are user-defined"    CUAC:PctIndivUnitPVByBedrms[6] =
      {  if ( (IfValidAnd( AvgUnitAreaByBedrms[6] > 0 )   .AND. LocalStatus( PctIndivUnitPVByBedrms[6] ) < 5) .AND. IfValidAnd( AffordablePVDCSysSize > 0 ) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[2] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[2] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[3] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[3] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[4] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[4] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[5] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[5] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[1] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[1] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[7] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[7] ) > 4) )
         then  max( 0, 100 * (AffordablePVDCSysSize - TotUserDefinedTenantPV) / AffordablePVDCSysSize / AffordableUnitsByBedrms[6] )
         else  UNDEFINED  endif  }
   "Default CUAC:PctIndivUnitPVByBedrms[7] if all others are user-defined"    CUAC:PctIndivUnitPVByBedrms[7] =
      {  if ( (IfValidAnd( AvgUnitAreaByBedrms[7] > 0 )   .AND. LocalStatus( PctIndivUnitPVByBedrms[7] ) < 5) .AND. IfValidAnd( AffordablePVDCSysSize > 0 ) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[2] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[2] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[3] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[3] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[4] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[4] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[5] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[5] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[6] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[6] ) > 4) .AND.
              (IfValidAnd( AvgUnitAreaByBedrms[1] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[1] ) > 4) )
         then  max( 0, 100 * (AffordablePVDCSysSize - TotUserDefinedTenantPV) / AffordablePVDCSysSize / AffordableUnitsByBedrms[7] )
         else  UNDEFINED  endif  }

   "Set CUAC:IndivUnitPVByBedrms[1-8]"   for:#U=(1to7)   CUAC:IndivUnitPVByBedrms[#U] =
      {  if (IfValidAnd( PctIndivUnitPVByBedrms[#U] > 0 )==0) then  UNDEFINED
         else  PctIndivUnitPVByBedrms[#U] * AffordablePVDCSysSize / 100   endif  }

   "Init CUAC:PctIndivUnitPVSum"                                        CUAC:PctIndivUnitPVSum = {  0  }    ; SAC 12/09/22
   "Set CUAC:PctIndivUnitPVSum 1-8 (sum, not % yet)"   for:#U=(1to7)    CUAC:PctIndivUnitPVSum =
      {  if (IfValidAnd( AvgUnitAreaByBedrms[#U] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[#U] > 0 ) .AND. IfValidAnd( AffordablePVDCSysSize > 0 ))
         then  PctIndivUnitPVSum + ( (PctIndivUnitPVByBedrms[#U] * AffordablePVDCSysSize / 100) * AffordableUnitsByBedrms[#U] )
         else  UNCHANGED  endif  }
   "Calc % for CUAC:PctIndivUnitPVSum"                                  CUAC:PctIndivUnitPVSum =
      {  if (IfValidAnd( PctIndivUnitPVSum > 0 ))
         then  100 * PctIndivUnitPVSum / AffordablePVDCSysSize
         else  UNCHANGED  endif  }

   "Set CUAC:TotCommunitySolarSize"    CUAC:TotCommunitySolarSize = 
      {  if (CommunitySolarValid < 1) then  0
         else  (AffordableUnitsByBedrms[1] * ValidOr( CommunitySolarSizeByBedrms[1], 0 )) +
               (AffordableUnitsByBedrms[2] * ValidOr( CommunitySolarSizeByBedrms[2], 0 )) +
               (AffordableUnitsByBedrms[3] * ValidOr( CommunitySolarSizeByBedrms[3], 0 )) +
               (AffordableUnitsByBedrms[4] * ValidOr( CommunitySolarSizeByBedrms[4], 0 )) +
               (AffordableUnitsByBedrms[5] * ValidOr( CommunitySolarSizeByBedrms[5], 0 )) +
               (AffordableUnitsByBedrms[6] * ValidOr( CommunitySolarSizeByBedrms[6], 0 )) +
               (AffordableUnitsByBedrms[7] * ValidOr( CommunitySolarSizeByBedrms[7], 0 ))
         endif  }

   "Set CUAC:CommunitySolarAnnCreditByBedrms[1-7]"   for:#U=(1to7)  CUAC:CommunitySolarAnnCreditByBedrms[#U]  =
      {  if (CommunitySolarValid < 1 .OR. AffordableUnitsByBedrms[#U] < 1) then  UNDEFINED
         else  ValidOr( CommunitySolarSizeByBedrms[#U], 0 ) * 10  endif  } 

   "Set CUAC:PVAllocUserMsg"     CUAC:PVAllocUserMsg =      ; SAC 12/09/22
      {  if (IfValidAnd( UseCommunitySolar > 0 )==0 .AND. IfValidAnd( NumAvailCmntySlrProjs > 0 ) .AND. IfValidAnd( Proj:PVSizeSum > 0 )==0)
         then  "Select 'Use Community Solar' -or- create building PVArray(s) before defining allocation. If site PV, select Edit > Create Component > PhotovoltaicArray from the program menu and enter data describing the building-wide system."
         else if (IfValidAnd( UseCommunitySolar > 0 )==0 .AND. IfValidAnd( NumAvailCmntySlrProjs > 0 ) .AND. IfValidAnd( AffordablePVDCSysSize > 0 )==0)
         then  Format( "Select 'Use Community Solar' -or- Enter the kWdc size below (up to building total %s kWdc) of the PV system designated for affordable housing units.", FltToStr( Proj:PVSizeSum, 1 ) )
         else if (IfValidAnd( UseCommunitySolar > 0 ))
         then  if (CommunitySolarProject < 1)
               then  "Error: A valid community solar project must be selected (or toggle off 'Use Community Solar')"
               else if (IfValidAnd( InCmntySlrProjTerritory > 0 )==0)
               then  "Error: Confirm that this building is located within the selected Community Solar Project (or toggle off 'Use Community Solar')"
               else if (TotCommunitySolarSize < 0.01)
               then  Format( "Enter community solar PV size by unit type below for project '%s'.", EnumString( CommunitySolarProject ) )
               else  Format( "%.1f kW of  '%s'  community solar specified. ", TotCommunitySolarSize, EnumString( CommunitySolarProject ) )
               endif endif endif
         else if (IfValidAnd( Proj:PVSizeSum > 0 )==0)
         then  "Building-wide PVArray(s) must be created before allocation to affordable housing units. From the program menu select Edit > Create Component > PhotovoltaicArray and enter data describing the building-wide system."
         else if (IfValidAnd( AffordablePVDCSysSize > 0 )==0)
         then  Format( "Enter the kWdc size below (up to building total %s kWdc) of the PV system designated for affordable housing units.", FltToStr( Proj:PVSizeSum, 1 ) )
         else if ( (ValidOr( Proj:PVSizeSum, 1 ) - ValidOr( AffordablePVDCSysSize, 1 )) < -0.1 )
         then  Format( "Total affordable housing tenant PV size entered below is too high. This value must be <= total building PV %s kWdc.", FltToStr( Proj:PVSizeSum, 1 ) )
         else if ( (IfValidAnd( AvgUnitAreaByBedrms[1] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[1] >= 0 )==0) .OR.
                   (IfValidAnd( AvgUnitAreaByBedrms[2] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[2] >= 0 )==0) .OR.
                   (IfValidAnd( AvgUnitAreaByBedrms[3] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[3] >= 0 )==0) .OR.
                   (IfValidAnd( AvgUnitAreaByBedrms[4] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[4] >= 0 )==0) .OR.
                   (IfValidAnd( AvgUnitAreaByBedrms[5] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[5] >= 0 )==0) .OR.
                   (IfValidAnd( AvgUnitAreaByBedrms[6] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[6] >= 0 )==0) .OR.
                   (IfValidAnd( AvgUnitAreaByBedrms[7] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[7] >= 0 )==0) )
         then  "Enter the percent of tenant PV that serves each affordable unit type (per unit) in the table below."
         else if (IfValidAnd( PctIndivUnitPVSum < 99.96 ) .OR. IfValidAnd( PctIndivUnitPVSum > 100.04 ))
         then  "The sum listed below the % Tenant PV Serving Each Unit column must be equal to 100.0%. Values in this column must be adjusted to achieve that sum before CUAC analysis/reporting can be performed."
         else  "Allocation of affordable housing tenant PV successful!"
         endif endif endif endif endif endif endif endif  }

   ; moved CUAC error checking rules HERE to ensure all above rules processed PRIOR to error checks - SAC 12/09/22
   ; previsouly ... moved to Battery.rule from Project-Multifamily.rule to ensure PV & Batt data refreshed BEFORE error checks which also setup PV/Batt messages - SAC 11/21/22
   ; WAS previously data model Proj:Action rule ->
   ;        DEFAULT
   ;          if (IfValidAnd( ResDwellUnits > 0 )==0) then  UNCHANGED
   ;          else  EvalRulelist( "CUAC_InputErrorCheck" )  endif
   "Perform CUAC error checking"    Proj:Action = {  EvalRulelist( "CUAC_InputErrorCheck" )  }

END
;*************************************************************************

;************************************************************************* SAC 09/18/23
RULELIST "CUAC_ZoneUnitCounts_OldCUAC" 0 0 0 0
;*************************************************************************
; these rules only evaluated if:  IfValidAnd( Proj:AffordableHousing > 0 ) .AND. IfValidAnd( Proj:CUACReport > 0 ) .AND. IfValidAnd( CUAC_OldAccessDB > 0 )

   "Set CUAC:AffordableUnitsByBedrms[1] - Studio"     CUAC:AffordableUnitsByBedrms[1] = {  SumAcrossIf( OldCUACApt:NumAffordableUnits, OldCUACApt:NumBedrooms = 0 )  }      ; SAC 09/18/23
   "Set CUAC:AffordableUnitsByBedrms[2] - 1 Bdrm"     CUAC:AffordableUnitsByBedrms[2] = {  SumAcrossIf( OldCUACApt:NumAffordableUnits, OldCUACApt:NumBedrooms = 1 )  }
   "Set CUAC:AffordableUnitsByBedrms[3] - 2 Bdrm"     CUAC:AffordableUnitsByBedrms[3] = {  SumAcrossIf( OldCUACApt:NumAffordableUnits, OldCUACApt:NumBedrooms = 2 )  }
   "Set CUAC:AffordableUnitsByBedrms[4] - 3 Bdrm"     CUAC:AffordableUnitsByBedrms[4] = {  SumAcrossIf( OldCUACApt:NumAffordableUnits, OldCUACApt:NumBedrooms = 3 )  }
   "Set CUAC:AffordableUnitsByBedrms[5] - 4 Bdrm"     CUAC:AffordableUnitsByBedrms[5] = {  SumAcrossIf( OldCUACApt:NumAffordableUnits, OldCUACApt:NumBedrooms = 4 )  }
   "Set CUAC:AffordableUnitsByBedrms[6] - 5 Bdrm"     CUAC:AffordableUnitsByBedrms[6] = {  SumAcrossIf( OldCUACApt:NumAffordableUnits, OldCUACApt:NumBedrooms = 5 )  }
   "Set CUAC:AffordableUnitsByBedrms[7] - 6 Bdrm"     CUAC:AffordableUnitsByBedrms[7] = {  SumAcrossIf( OldCUACApt:NumAffordableUnits, OldCUACApt:NumBedrooms = 6 )  }
   "Set CUAC:AffordableUnitsByBedrms[8] - >6 Bdrm"    CUAC:AffordableUnitsByBedrms[8] = {  SumAcrossIf( OldCUACApt:NumAffordableUnits, OldCUACApt:NumBedrooms = 7 )  }
   "Set CUAC:NumAffordableDwellingUnits - 0-6 Bdrm"   CUAC:NumAffordableDwellingUnits =   
      {  AffordableUnitsByBedrms[1] + AffordableUnitsByBedrms[2] + AffordableUnitsByBedrms[3] + AffordableUnitsByBedrms[4] +
         AffordableUnitsByBedrms[5] + AffordableUnitsByBedrms[6] + AffordableUnitsByBedrms[7]  }

   "Set ResProj:NumDwellingUnitsByBedrms[1] - Studio"     ResProj:NumDwellingUnitsByBedrms[1] = {  CUAC:AffordableUnitsByBedrms[1] + SumAcrossIf( OldCUACApt:NumMarketRateUnits, OldCUACApt:NumBedrooms = 0 )  }      ; SAC 09/18/23
   "Set ResProj:NumDwellingUnitsByBedrms[2] - 1 Bdrm"     ResProj:NumDwellingUnitsByBedrms[2] = {  CUAC:AffordableUnitsByBedrms[2] + SumAcrossIf( OldCUACApt:NumMarketRateUnits, OldCUACApt:NumBedrooms = 1 )  }
   "Set ResProj:NumDwellingUnitsByBedrms[3] - 2 Bdrm"     ResProj:NumDwellingUnitsByBedrms[3] = {  CUAC:AffordableUnitsByBedrms[3] + SumAcrossIf( OldCUACApt:NumMarketRateUnits, OldCUACApt:NumBedrooms = 2 )  }
   "Set ResProj:NumDwellingUnitsByBedrms[4] - 3 Bdrm"     ResProj:NumDwellingUnitsByBedrms[4] = {  CUAC:AffordableUnitsByBedrms[4] + SumAcrossIf( OldCUACApt:NumMarketRateUnits, OldCUACApt:NumBedrooms = 3 )  }
   "Set ResProj:NumDwellingUnitsByBedrms[5] - 4 Bdrm"     ResProj:NumDwellingUnitsByBedrms[5] = {  CUAC:AffordableUnitsByBedrms[5] + SumAcrossIf( OldCUACApt:NumMarketRateUnits, OldCUACApt:NumBedrooms = 4 )  }
   "Set ResProj:NumDwellingUnitsByBedrms[6] - 5 Bdrm"     ResProj:NumDwellingUnitsByBedrms[6] = {  CUAC:AffordableUnitsByBedrms[6] + SumAcrossIf( OldCUACApt:NumMarketRateUnits, OldCUACApt:NumBedrooms = 5 )  }
   "Set ResProj:NumDwellingUnitsByBedrms[7] - 6 Bdrm"     ResProj:NumDwellingUnitsByBedrms[7] = {  CUAC:AffordableUnitsByBedrms[7] + SumAcrossIf( OldCUACApt:NumMarketRateUnits, OldCUACApt:NumBedrooms = 6 )  }
   "Set ResProj:NumDwellingUnitsByBedrms[8] - >6 Bdrm"    ResProj:NumDwellingUnitsByBedrms[8] = {  CUAC:AffordableUnitsByBedrms[8] + SumAcrossIf( OldCUACApt:NumMarketRateUnits, OldCUACApt:NumBedrooms = 7 )  }
   "Set ResProj:NumDwellingUnits - 0-6 Bdrm"   ResProj:NumDwellingUnits =   
      {  NumDwellingUnitsByBedrms[1] + NumDwellingUnitsByBedrms[2] + NumDwellingUnitsByBedrms[3] + NumDwellingUnitsByBedrms[4] +
         NumDwellingUnitsByBedrms[5] + NumDwellingUnitsByBedrms[6] + NumDwellingUnitsByBedrms[7]  }

   "Set CUAC:ResidentsByBedrms[1] - Studio"              CUAC:ResidentsByBedrms[1]   = {                   AffordableUnitsByBedrms[1]   }    ; 1 resident per studio unit - SAC 11/21/22 (CUAC)
   "Set CUAC:ResidentsByBedrms[2-7]"      for:#U=(2to7)  CUAC:ResidentsByBedrms[#U]  = {  ((#U-1) * 1.5) * AffordableUnitsByBedrms[#U]  }    ; 1.5 residents per bedrm - SAC 11/21/22 (CUAC)
   "Set CUAC:NumResidents - 0-6 Bdrm"                    CUAC:NumResidents = 
      {  ResidentsByBedrms[1] + ResidentsByBedrms[2] + ResidentsByBedrms[3] + ResidentsByBedrms[4] +
         ResidentsByBedrms[5] + ResidentsByBedrms[6] + ResidentsByBedrms[7]  }
   "Set CUAC:ResidentFracByBedrms[1-7]"   for:#U=(1to7)  CUAC:ResidentFracByBedrms[#U]  = {  ResidentsByBedrms[#U] / max( NumResidents, 1 )  } 


;   "Set CUAC:AvgUnitAreaByBedrms[1-8]"   for:#U=(1to8)   CUAC:AvgUnitAreaByBedrms[#U] =      ; SAC 12/08/22 (CUAC)
;      {  if (IfValidAnd( AffordableUnitsByBedrms[#U] > 0 )==0) then  0
;         else  SumAcrossIf( ResZn:CondFlrAreaWithMult, ResZn:AffordableUnitsByBedrmsWithMult[#U] > 0 ) / AffordableUnitsByBedrms[#U]  endif  } 
;
;   "Set CUAC:TotAffordableUnitArea"    CUAC:TotAffordableUnitArea =     ; SAC 12/08/22 (CUAC)
;      {  (AvgUnitAreaByBedrms[1] * AffordableUnitsByBedrms[1]) + (AvgUnitAreaByBedrms[2] * AffordableUnitsByBedrms[2]) +
;         (AvgUnitAreaByBedrms[3] * AffordableUnitsByBedrms[3]) + (AvgUnitAreaByBedrms[4] * AffordableUnitsByBedrms[4]) +
;         (AvgUnitAreaByBedrms[5] * AffordableUnitsByBedrms[5]) + (AvgUnitAreaByBedrms[6] * AffordableUnitsByBedrms[6]) +
;         (AvgUnitAreaByBedrms[7] * AffordableUnitsByBedrms[7]) + (AvgUnitAreaByBedrms[8] * AffordableUnitsByBedrms[8])  }
;
;   "Set CUAC:PctIndivUnitAreaByBedrms[1-8]"   for:#U=(1to8)   CUAC:PctIndivUnitAreaByBedrms[#U] =     ; SAC 12/08/22 (CUAC)
;      {  if (IfValidAnd( TotAffordableUnitArea > 0 )==0) then  0
;         else  AvgUnitAreaByBedrms[#U] * 100 / TotAffordableUnitArea  endif  } 
;
;; don't default PctIndivUnitPVByBedrms[*] ??
;;   "Default CUAC:PctIndivUnitPVByBedrms[1-8]"   for:#U=(1to8)   CUAC:PctIndivUnitPVByBedrms[#U] = {  PctIndivUnitAreaByBedrms[#U]  }
;
;   "Init CUAC:TotUserDefinedTenantPV"                    CUAC:TotUserDefinedTenantPV = {  0  }
;   "Set CUAC:TotUserDefinedTenantPV 1-7"  for:#U=(1to7)  CUAC:TotUserDefinedTenantPV =
;      {  if (LocalStatus( PctIndivUnitPVByBedrms[#U] ) > 4 .AND. IfValidAnd( PctIndivUnitPVByBedrms[#U] > 0 ) .AND.
;             IfValidAnd( AffordablePVDCSysSize > 0 ) .AND. IfValidAnd( ShowPVBattInputs > 0 ))
;         then  TotUserDefinedTenantPV + (PctIndivUnitPVByBedrms[#U] * AffordableUnitsByBedrms[#U] * AffordablePVDCSysSize / 100)
;         else  UNCHANGED  endif  }
;
;   "Default CUAC:PctIndivUnitPVByBedrms[1] if all others are user-defined"    CUAC:PctIndivUnitPVByBedrms[1] =          ; SAC 12/08/22
;      {  if ( (IfValidAnd( AvgUnitAreaByBedrms[1] > 0 )   .AND. LocalStatus( PctIndivUnitPVByBedrms[1] ) < 5) .AND. IfValidAnd( AffordablePVDCSysSize > 0 ) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[2] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[2] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[3] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[3] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[4] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[4] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[5] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[5] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[6] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[6] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[7] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[7] ) > 4) )
;         then  max( 0, 100 * (AffordablePVDCSysSize - TotUserDefinedTenantPV) / AffordablePVDCSysSize / AffordableUnitsByBedrms[1] )
;         else  UNDEFINED  endif  }
;   "Default CUAC:PctIndivUnitPVByBedrms[2] if all others are user-defined"    CUAC:PctIndivUnitPVByBedrms[2] =
;      {  if ( (IfValidAnd( AvgUnitAreaByBedrms[2] > 0 )   .AND. LocalStatus( PctIndivUnitPVByBedrms[2] ) < 5) .AND. IfValidAnd( AffordablePVDCSysSize > 0 ) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[1] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[1] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[3] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[3] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[4] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[4] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[5] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[5] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[6] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[6] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[7] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[7] ) > 4) )
;         then  max( 0, 100 * (AffordablePVDCSysSize - TotUserDefinedTenantPV) / AffordablePVDCSysSize / AffordableUnitsByBedrms[2] )
;         else  UNDEFINED  endif  }
;   "Default CUAC:PctIndivUnitPVByBedrms[3] if all others are user-defined"    CUAC:PctIndivUnitPVByBedrms[3] =
;      {  if ( (IfValidAnd( AvgUnitAreaByBedrms[3] > 0 )   .AND. LocalStatus( PctIndivUnitPVByBedrms[3] ) < 5) .AND. IfValidAnd( AffordablePVDCSysSize > 0 ) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[2] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[2] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[1] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[1] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[4] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[4] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[5] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[5] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[6] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[6] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[7] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[7] ) > 4) )
;         then  max( 0, 100 * (AffordablePVDCSysSize - TotUserDefinedTenantPV) / AffordablePVDCSysSize / AffordableUnitsByBedrms[3] )
;         else  UNDEFINED  endif  }
;   "Default CUAC:PctIndivUnitPVByBedrms[4] if all others are user-defined"    CUAC:PctIndivUnitPVByBedrms[4] = 
;      {  if ( (IfValidAnd( AvgUnitAreaByBedrms[4] > 0 )   .AND. LocalStatus( PctIndivUnitPVByBedrms[4] ) < 5) .AND. IfValidAnd( AffordablePVDCSysSize > 0 ) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[2] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[2] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[3] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[3] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[1] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[1] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[5] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[5] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[6] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[6] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[7] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[7] ) > 4) )
;         then  max( 0, 100 * (AffordablePVDCSysSize - TotUserDefinedTenantPV) / AffordablePVDCSysSize / AffordableUnitsByBedrms[4] )
;         else  UNDEFINED  endif  }
;   "Default CUAC:PctIndivUnitPVByBedrms[5] if all others are user-defined"    CUAC:PctIndivUnitPVByBedrms[5] = 
;      {  if ( (IfValidAnd( AvgUnitAreaByBedrms[5] > 0 )   .AND. LocalStatus( PctIndivUnitPVByBedrms[5] ) < 5) .AND. IfValidAnd( AffordablePVDCSysSize > 0 ) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[2] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[2] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[3] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[3] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[4] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[4] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[1] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[1] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[6] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[6] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[7] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[7] ) > 4) )
;         then  max( 0, 100 * (AffordablePVDCSysSize - TotUserDefinedTenantPV) / AffordablePVDCSysSize / AffordableUnitsByBedrms[5] )
;         else  UNDEFINED  endif  }
;   "Default CUAC:PctIndivUnitPVByBedrms[6] if all others are user-defined"    CUAC:PctIndivUnitPVByBedrms[6] =
;      {  if ( (IfValidAnd( AvgUnitAreaByBedrms[6] > 0 )   .AND. LocalStatus( PctIndivUnitPVByBedrms[6] ) < 5) .AND. IfValidAnd( AffordablePVDCSysSize > 0 ) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[2] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[2] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[3] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[3] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[4] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[4] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[5] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[5] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[1] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[1] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[7] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[7] ) > 4) )
;         then  max( 0, 100 * (AffordablePVDCSysSize - TotUserDefinedTenantPV) / AffordablePVDCSysSize / AffordableUnitsByBedrms[6] )
;         else  UNDEFINED  endif  }
;   "Default CUAC:PctIndivUnitPVByBedrms[7] if all others are user-defined"    CUAC:PctIndivUnitPVByBedrms[7] =
;      {  if ( (IfValidAnd( AvgUnitAreaByBedrms[7] > 0 )   .AND. LocalStatus( PctIndivUnitPVByBedrms[7] ) < 5) .AND. IfValidAnd( AffordablePVDCSysSize > 0 ) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[2] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[2] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[3] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[3] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[4] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[4] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[5] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[5] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[6] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[6] ) > 4) .AND.
;              (IfValidAnd( AvgUnitAreaByBedrms[1] > 0 )==0 .OR. LocalStatus( PctIndivUnitPVByBedrms[1] ) > 4) )
;         then  max( 0, 100 * (AffordablePVDCSysSize - TotUserDefinedTenantPV) / AffordablePVDCSysSize / AffordableUnitsByBedrms[7] )
;         else  UNDEFINED  endif  }
;
;   "Set CUAC:IndivUnitPVByBedrms[1-8]"   for:#U=(1to7)   CUAC:IndivUnitPVByBedrms[#U] =
;      {  if (IfValidAnd( PctIndivUnitPVByBedrms[#U] > 0 )==0) then  UNDEFINED
;         else  PctIndivUnitPVByBedrms[#U] * AffordablePVDCSysSize / 100   endif  }
;
;   "Init CUAC:PctIndivUnitPVSum"                                        CUAC:PctIndivUnitPVSum = {  0  }    ; SAC 12/09/22
;   "Set CUAC:PctIndivUnitPVSum 1-8 (sum, not % yet)"   for:#U=(1to7)    CUAC:PctIndivUnitPVSum =
;      {  if (IfValidAnd( AvgUnitAreaByBedrms[#U] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[#U] > 0 ) .AND. IfValidAnd( AffordablePVDCSysSize > 0 ))
;         then  PctIndivUnitPVSum + ( (PctIndivUnitPVByBedrms[#U] * AffordablePVDCSysSize / 100) * AffordableUnitsByBedrms[#U] )
;         else  UNCHANGED  endif  }
;   "Calc % for CUAC:PctIndivUnitPVSum"                                  CUAC:PctIndivUnitPVSum =
;      {  if (IfValidAnd( PctIndivUnitPVSum > 0 ))
;         then  100 * PctIndivUnitPVSum / AffordablePVDCSysSize
;         else  UNCHANGED  endif  }
;
;   "Set CUAC:PVAllocUserMsg"     CUAC:PVAllocUserMsg =      ; SAC 12/09/22
;      {  if (IfValidAnd( Proj:PVSizeSum > 0 )==0)
;         then  "Building-wide PVArray(s) must be created before allocation to affordable housing units. From the program menu select Edit > Create Component > PhotovoltaicArray and enter data describing the building-wide system."
;         else if (IfValidAnd( AffordablePVDCSysSize > 0 )==0)
;         then  Format( "Enter the kWdc size below (up to building total %s kWdc) of the PV system designated for affordable housing units.", FltToStr( Proj:PVSizeSum, 1 ) )
;         else if ( (ValidOr( Proj:PVSizeSum, 1 ) - ValidOr( AffordablePVDCSysSize, 1 )) < -0.1 )
;         then  Format( "Total affordable housing tenant PV size entered below is too high. This value must be <= total building PV %s kWdc.", FltToStr( Proj:PVSizeSum, 1 ) )
;         else if ( (IfValidAnd( AvgUnitAreaByBedrms[1] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[1] >= 0 )==0) .OR.
;                   (IfValidAnd( AvgUnitAreaByBedrms[2] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[2] >= 0 )==0) .OR.
;                   (IfValidAnd( AvgUnitAreaByBedrms[3] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[3] >= 0 )==0) .OR.
;                   (IfValidAnd( AvgUnitAreaByBedrms[4] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[4] >= 0 )==0) .OR.
;                   (IfValidAnd( AvgUnitAreaByBedrms[5] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[5] >= 0 )==0) .OR.
;                   (IfValidAnd( AvgUnitAreaByBedrms[6] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[6] >= 0 )==0) .OR.
;                   (IfValidAnd( AvgUnitAreaByBedrms[7] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[7] >= 0 )==0) )
;         then  "Enter the percent of tenant PV that serves each affordable unit type (per unit) in the table below."
;         else if (IfValidAnd( PctIndivUnitPVSum < 99.96 ) .OR. IfValidAnd( PctIndivUnitPVSum > 100.04 ))
;         then  "The sum listed below the % Tenant PV Serving Each Unit column must be equal to 100.0%. Values in this column must be adjusted to achieve that sum before CUAC analysis/reporting can be performed."
;         else  "Allocation of affordable housing tenant PV successful!"
;         endif endif endif endif endif  }

   "Perform CUAC error checking"    Proj:Action = {  EvalRulelist( "CUAC_InputErrorCheck" )  }

END
;*************************************************************************


;************************************************************************* SAC 08/07/22
RULELIST "CUAC_InputErrorCheck" 0 0 0 0
;*************************************************************************

   "Set CUAC:AffordablePVDCSysSizeFrac"      CUAC:AffordablePVDCSysSizeFrac =
      {  if (IfValidAnd( ResDwellUnits > 0 )==0 .OR. IfValidAnd( CUACReport > 0 )==0 .OR.
             IfValidAnd( Proj:PVSizeSum > 0 )==0 .OR. IfValidAnd( CUAC_OldAccessDB > 0 ))
         then  0
         else  ValidOr( AffordablePVDCSysSize, 0 ) / Proj:PVSizeSum
         endif  }
   "Set CUAC:AffordableBattMaxCapFrac"       CUAC:AffordableBattMaxCapFrac =
      {  0  }     ; force to 0
; removed from CUAC battery from calcs - SAC 12/07/22
;      {  if (IfValidAnd( ResDwellUnits > 0 )==0 .OR. IfValidAnd( CUACReport > 0 )==0 .OR.
;             IfValidAnd( Proj:BattSizeSum > 0 )==0)
;         then  0
;         else  ValidOr( AffordableBattMaxCap, 0 ) / Proj:BattSizeSum
;         endif  }

   "Set CUAC:GasUtilitySelected"    CUAC:GasUtilitySelected =     ; to better enable gas rate error checks
      {  if (GasUtility > 0 .AND. GasUtility < 999) then  1  else  0  endif  }
   "Set CUAC:GasTerritoryValid"     CUAC:GasTerritoryValid  = 
      {  if (GasUtility < 1 .OR. GasUtility >= 999) then  0
         else  CUAC_UtilityRateGen2Data:WhichGen( "Fuel", "Gas", "Utility", EnumString( GasUtility ), "Territory", EnumString( G2GasTerritory ) )  endif  }
      ;   else  CUAC_UtilityTerritories:IsValid( "TerritoryID", GasTerritory )   endif  }
   "Set CUAC:GasTariffValid"        CUAC:GasTariffValid     = 
      {  if (GasUtility < 1 .OR. GasUtility >= 999 .OR. GasTariffGen < 1) then  0
         else  1  endif  }
      ;   else  CUAC_UtilityRates:IsValid( "RateID", GasTariff )   endif  }

      ;"dbg" CUAC:Action = { PostMessageToLog( "GasUtility %g / G2GasTerritory %g / G2GasTariff %g", ValidOr( GasUtility, -999 ), ValidOr( G2GasTerritory, -999 ), ValidOr( G2GasTariff, -999 ) ) }

   "Set CUAC:ErrorMsg"     CUAC:ErrorMsg =      ; add central laundry check - SAC 12/20/22  ; prevent Utility valid errors on utilities added in Gen2 - SAC 09/13/23
      {  if (IfValidAnd( Proj:ResDwellUnits > 0 )==0 .OR. IfValidAnd( Proj:CUACReport > 0 )==0)
         then  "Error: Res dwelling units and CUAC not all selected"
         else if (IfValidAnd( CUAC_OldAccessDB > 0 )==0 .AND. SumAll( ResZn:AffordableHousing ) < 1)
         then  "Error: No Res Zones with Affordable Housing selected"
         else if (SumAcrossIf( ResZn:AffordableHousing, ResZn:NumAffordableUnitTypes > 1 ) > 0)
         then  Format( "Error: %g Res Zone(s) have dwellings with multiple numbers of bedrooms", SumAcrossIf( ResZn:AffordableHousing, ResZn:NumAffordableUnitTypes > 1 ) )
         else if (SumAcrossIf( ResZn:AffordableHousing, ResZn:AffordableUnitsByBedrmsWithMult[8] > 0 ) > 0)
         then  Format( "Error: %g Res Zone(s) have dwellings with more than 6 bedrooms", SumAcrossIf( ResZn:AffordableHousing, ResZn:AffordableUnitsByBedrmsWithMult[8] > 0 ) )
         ; else if (SumAcrossIf( ResZn:CentralDHWDUCount, ResZn:AffordableHousing > 0 ) > 0)
         ; then  Format( "Error: %g Res dwelling units are served by central DHW systems", SumAcrossIf( ResZn:CentralDHWDUCount, ResZn:AffordableHousing > 0 ) )
         else if (SumAll( ResZn:NumAffordableCentralLaundryAssignments ) > 0)
         then  Format( "Error: Res dwelling units of %g zone(s) use central laundry facilities", SumAll( ResZn:NumAffordableCentralLaundryAssignments ) )

         else if (GlobalStatus( Proj:StAddress ) < 4)
         then  "Error: Project street address not specified"
         else if (GlobalStatus( Proj:City ) < 4)
         then  "Error: Project city not specified"
         else if (IfValidAnd( Proj:ZipCode > 90000 )==0)
         then  "Error: Project Zip code not specified or valid"

         else if (IfValidAnd( AffordablePVDCSysSizeFrac > 1.01 ))
         then  Format( "Error: Affordable portion of PV system (%g kW) is too large", AffordablePVDCSysSize )
         else if ( IfValidAnd( AffordablePVDCSysSizeFrac > 0 ) .AND.
                   ( (IfValidAnd( AvgUnitAreaByBedrms[1] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[1] >= 0 )==0) .OR.
                     (IfValidAnd( AvgUnitAreaByBedrms[2] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[2] >= 0 )==0) .OR.
                     (IfValidAnd( AvgUnitAreaByBedrms[3] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[3] >= 0 )==0) .OR.
                     (IfValidAnd( AvgUnitAreaByBedrms[4] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[4] >= 0 )==0) .OR.
                     (IfValidAnd( AvgUnitAreaByBedrms[5] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[5] >= 0 )==0) .OR.
                     (IfValidAnd( AvgUnitAreaByBedrms[6] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[6] >= 0 )==0) .OR.
                     (IfValidAnd( AvgUnitAreaByBedrms[7] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[7] >= 0 )==0) ) )
         then  "Error: One or more tenant PV allocation inputs are missing"
         else if (IfValidAnd( AffordablePVDCSysSizeFrac > 0 ) .AND. IfValidAnd( PctIndivUnitPVSum < 99.96 ) .OR. IfValidAnd( PctIndivUnitPVSum > 100.04 ))
         then  "Error: Tenant PV allocation inputs are invalid"
         else if (IfValidAnd( AffordableBattMaxCapFrac > 1.01 ))
         then  Format( "Error: Affordable portion of Battery system (%g kWh) is too large", AffordableBattMaxCap )

         else if (ElecUtility < 1 .OR. G2ElecTerritory < 1 .OR. G2ElecTariff < 1)
         then  "Error: Electric Utility, Territory and/or Tariff not selected"
         else if (CUAC_UtilityRateGen2Data:WhichGen( "Fuel", "Electric", "Utility", EnumString( ElecUtility ) ) < 1 .AND.
                  CUAC_UtilityCompanies:IsValid( "UtilityID", ElecUtility ) < 1)
         then  "Error: Electric Utility not found in ruleset look-up table"
         else if (CUAC_UtilityRateGen2Data:WhichGen( "Fuel", "Electric", "Utility", EnumString( ElecUtility ), "Territory", EnumString( G2ElecTerritory ) ) < 1 .AND.
                  CUAC_UtilityTerritories:IsValid( "TerritoryID", G2ElecTerritory ) < 1)
         then  "Error: Electric Territory not found in ruleset look-up table"
         else if (ElecTariffGen < 1)
         then  "Error: Electric Tariff/Rate not found in ruleset look-up table"
         else if (IfValidAnd( CUAC_OldAccessDB > 0 ) .AND. IfValidAnd( ElecTariffIsTOU > 0 ))
         then  "Error: Electric Tariff/Rate is not compatible (Time-of-Use rate)"

         else if (GasUtility == 0)
         then  "Error: Gas Utility or 'no gas service' must be selected"
         else if (GasUtilitySelected .AND. (G2GasTerritory < 1 .OR. G2GasTariff < 1))
         then  "Error: Gas Territory and/or Tariff not selected"
         ; else if (GasUtilitySelected .AND. CUAC_UtilityCompanies:IsValid( "UtilityID", GasUtility ) < 1)
         ; then  "Error: Gas Utility not found in ruleset look-up table"
         else if (GasUtilitySelected .AND. IfValidAnd( GasTerritoryValid > 0 )==0)
         then  "Error: Gas Territory not found in ruleset look-up table"
         else if (GasUtilitySelected .AND. IfValidAnd( GasTariffValid > 0 )==0)
         then  "Error: Gas Tariff/Rate not found in ruleset look-up table"
         else if (IfValidAnd( CUAC_OldAccessDB > 0 ) .AND. IfValidAnd( GasTariffIsTOU > 0 ))
         then  "Error: Gas Tariff/Rate is not compatible (Time-of-Use rate)"

         else  UNDEFINED  endif endif endif endif endif   endif endif endif   endif endif endif endif   endif endif endif endif endif   endif endif endif endif endif  }

   "Set CUAC:ErrorInfo"    CUAC:ErrorInfo =
      {  if (IfValidAnd( Proj:ResDwellUnits > 0 )==0 .OR. IfValidAnd( Proj:CUACReport > 0 )==0)
         then  "Residential Dwelling Units and CUAC must all be selected in the Project & CUAC dialog tabs in order to perform CUAC analysis."
         else if (IfValidAnd( CUAC_OldAccessDB > 0 )==0 .AND. SumAll( ResZn:AffordableHousing ) < 1)
         then  "Affordable Housing Units (CUAC) must be selected for all Res Zones that have affordable/CUAC dwellings via a checkbox in the ResZn (residential zone) dialog."
         else if (SumAcrossIf( ResZn:AffordableHousing, ResZn:NumAffordableUnitTypes > 1 ) > 0)
         then  Format( "Each Res Zone w/ affordable housing must have dwellings with the same number of bedrooms. %g Res Zone(s) violate this rule.", SumAcrossIf( ResZn:AffordableHousing, ResZn:NumAffordableUnitTypes > 1 ) )
         else if (SumAcrossIf( ResZn:AffordableHousing, ResZn:AffordableUnitsByBedrmsWithMult[8] > 0 ) > 0)
         then  Format( "The largest CUAC reporting dwelling type is 6 bedrooms. %g Res Zone(s) have dwellings that exceed that limit.", SumAcrossIf( ResZn:AffordableHousing, ResZn:AffordableUnitsByBedrmsWithMult[8] > 0 ) )
         ; else if (SumAcrossIf( ResZn:CentralDHWDUCount, ResZn:AffordableHousing > 0 ) > 0)
         ; then  Format( "Affordable (CUAC) dwelling units must be served by individual (dwelling) DHW systems. %g are served by central DHW systems.", SumAcrossIf( ResZn:CentralDHWDUCount, ResZn:AffordableHousing > 0 ) )
         else if (SumAll( ResZn:NumAffordableCentralLaundryAssignments ) > 0)
         then  Format( "Laundry equipment must be removed from or switched to in-unit for Res dwelling units of the following zones: %s", ListRevRefIf( ResZn:CUACRef, ResZn:NumAffordableCentralLaundryAssignments > 0, " '%s'", ", '%s'", ", '%s'", ResZn:Name ) )

         else if (GlobalStatus( Proj:StAddress ) < 4)
         then  "Project street address (on 'Project' tab) must be specified"
         else if (GlobalStatus( Proj:City ) < 4)
         then  "Project city (on 'Project' tab) must be specified"
         else if (IfValidAnd( Proj:ZipCode > 90000 )==0)
         then  "A valid project Zip code (on 'Project' tab) must be specified"

         else if (IfValidAnd( AffordablePVDCSysSizeFrac > 1.01 ))
         then  Format( "Affordable portion of PV system (%g kW) cannot exceed overall building PV system size of %g kW. Correct this via the PV Allocation... button below.", AffordablePVDCSysSize, Proj:PVSizeSum )
         else if ( IfValidAnd( AffordablePVDCSysSizeFrac > 0 ) .AND.
                   ( (IfValidAnd( AvgUnitAreaByBedrms[1] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[1] >= 0 )==0) .OR.
                     (IfValidAnd( AvgUnitAreaByBedrms[2] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[2] >= 0 )==0) .OR.
                     (IfValidAnd( AvgUnitAreaByBedrms[3] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[3] >= 0 )==0) .OR.
                     (IfValidAnd( AvgUnitAreaByBedrms[4] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[4] >= 0 )==0) .OR.
                     (IfValidAnd( AvgUnitAreaByBedrms[5] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[5] >= 0 )==0) .OR.
                     (IfValidAnd( AvgUnitAreaByBedrms[6] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[6] >= 0 )==0) .OR.
                     (IfValidAnd( AvgUnitAreaByBedrms[7] > 0 ) .AND. IfValidAnd( PctIndivUnitPVByBedrms[7] >= 0 )==0) ) )
         then  "One or more tenant PV allocation inputs are missing. Correct this via the PV Allocation... button below."
         else if (IfValidAnd( AffordablePVDCSysSizeFrac > 0 ) .AND. IfValidAnd( PctIndivUnitPVSum < 99.96 ) .OR. IfValidAnd( PctIndivUnitPVSum > 100.04 ))
         then  "Tenant PV allocation inputs are invalid. Correct this via the PV Allocation... button below."
         else if (IfValidAnd( AffordableBattMaxCapFrac > 1.01 ))
         then  Format( "Affordable portion of Battery system (%g kWh) cannot exceed overall building battery system size of %g kWh", AffordableBattMaxCap, Proj:BattSizeSum )

         else if (ElecUtility < 1 .OR. G2ElecTerritory < 1 .OR. G2ElecTariff < 1)
         then  "Electric Utility, Territory and Tariff must be selected before performing analysis/reporting."
         else if (CUAC_UtilityRateGen2Data:WhichGen( "Fuel", "Electric", "Utility", EnumString( ElecUtility ) ) < 1 .AND.
                  CUAC_UtilityCompanies:IsValid( "UtilityID", ElecUtility ) < 1)
         then  Format( "Electric Utility '%s' not found in ruleset look-up table.", EnumString( ElecUtility ) )
         else if (CUAC_UtilityRateGen2Data:WhichGen( "Fuel", "Electric", "Utility", EnumString( ElecUtility ), "Territory", EnumString( G2ElecTerritory ) ) < 1 .AND.
                  CUAC_UtilityTerritories:IsValid( "TerritoryID", G2ElecTerritory ) < 1)
         then  Format( "Electric Territory '%s' not found in ruleset look-up table.", EnumString( G2ElecTerritory ) )
         else if (ElecTariffGen < 1)
         then  Format( "Electric Tariff/Rate '%s' not found in ruleset look-up table.", EnumString( G2ElecTariff ) )
         else if (IfValidAnd( CUAC_OldAccessDB > 0 ) .AND. IfValidAnd( ElecTariffIsTOU > 0 ))
         then  Format( "Electric Tariff/Rate '%s' is a Time-of-Use rate, and as such, is not compatible with old projects containing only monthly energy use data", EnumString( G2ElecTariff ) )

         else if (GasUtility == 0)
         then  "Gas Utility or 'no gas service' must be selected before performing analysis/reporting."
         else if (GasUtilitySelected .AND. (G2GasTerritory < 1 .OR. G2GasTariff < 1))
         then  "Gas Territory and Tariff must be selected before performing analysis/reporting."
         ; else if (GasUtilitySelected .AND. CUAC_UtilityCompanies:IsValid( "UtilityID", GasUtility ) < 1)
         ; then  Format( "Gas Utility '%s' not found in ruleset look-up table.", EnumString( GasUtility ) )
         else if (GasUtilitySelected .AND. IfValidAnd( GasTerritoryValid > 0 )==0)
         then  Format( "Gas Territory '%s' not found in ruleset look-up table.", EnumString( G2GasTerritory ) )
         else if (GasUtilitySelected .AND. IfValidAnd( GasTariffValid > 0 )==0)
         then  Format( "Gas Tariff/Rate '%s' not found in ruleset look-up table.", EnumString( G2GasTariff ) )
         else if (IfValidAnd( CUAC_OldAccessDB > 0 ) .AND. IfValidAnd( GasTariffIsTOU > 0 ))
         then  Format( "Gas Tariff/Rate '%s' is a Time-of-Use rate, and as such, is not compatible with old projects containing only monthly energy use data", EnumString( G2GasTariff ) )

         else  UNDEFINED  endif endif endif endif endif   endif endif endif   endif endif endif endif   endif endif endif endif endif   endif endif endif endif endif  }
   "Set CUAC:HaveErrorInfo"      CUAC:HaveErrorInfo = {  if (LocalStatus( ErrorInfo ) > 0) then  1  else  UNDEFINED  endif  }

   "Set CUAC:TreeDescrip"  CUAC:TreeDescrip =
      {  if (IfValidAnd( Proj:ResDwellUnits > 0 )==0 .OR. IfValidAnd( Proj:CUACReport > 0 )==0)
         then  "CUAC not selected in Project data"
         else if (IfValidAnd( CUAC_OldAccessDB > 0 )==0 .AND. SumAll( ResZn:AffordableHousing ) < 1)
         then  "No Affordable Housing selected in Res Zones"
         else if (SumAcrossIf( ResZn:AffordableHousing, ResZn:NumAffordableUnitTypes > 1 ) > 0)
         then  Format( "%g Res zone(s) have dwellings with multiple #s of bedrooms", SumAcrossIf( ResZn:AffordableHousing, ResZn:NumAffordableUnitTypes > 1 ) )
         else if (SumAcrossIf( ResZn:AffordableHousing, ResZn:AffordableUnitsByBedrmsWithMult[8] > 0 ) > 0)
         then  Format( "%g Res zone(s) have dwellings with too many bedrooms", SumAcrossIf( ResZn:AffordableHousing, ResZn:AffordableUnitsByBedrmsWithMult[8] > 0 ) )
         ; else if (SumAcrossIf( ResZn:CentralDHWDUCount, ResZn:AffordableHousing > 0 ) > 0)
         ; then  Format( "%g Res dwelling units are served by central DHW systems", SumAcrossIf( ResZn:CentralDHWDUCount, ResZn:AffordableHousing > 0 ) )
         else if (SumAll( ResZn:NumAffordableCentralLaundryAssignments ) > 0)
         then  Format( "Res dwelling units of %g zone(s) use central laundry facilities", SumAll( ResZn:NumAffordableCentralLaundryAssignments ) )

         else if (IfValidAnd( AffordablePVDCSysSizeFrac > 1.01 ))
         then  Format( "Affordable portion of PV system (%g kW) exceeds building total", AffordablePVDCSysSize )
         else if (IfValidAnd( AffordableBattMaxCapFrac > 1.01 ))
         then  Format( "Affordable portion of Battery system (%g kWh) exceeds building total", AffordableBattMaxCap )

         else  Format( "%g zones, %g dwellings, %s ft2", SumAcrossIf( ResZn:AffordableHousing, ResZn:NumAffordableUnitTypes = 1 ),
                                                  SumAcrossIf( ResZn:NumDwellingUnitsWithMult, ResZn:NumAffordableUnitTypes = 1 ), 
                                                   FltToStr( SumAcrossIf( ResZn:CondFloorArea, ResZn:NumAffordableUnitTypes = 1 ) ) ) 
         endif endif endif endif endif endif endif  }


   "Set Proj:CUACUIFlag"      Proj:CUACUIFlag =       ; SAC 08/19/22 (CUAC)
      {  if (IfValidAnd( ResDwellUnits > 0 )==0)
         then  0   ; CUAC not available when not MFam Res
         else if (IfValidAnd( CUACReport > 0 )==0)
         then  1   ; CUAC not (yet) selected
         else if (ComponentCount( CUAC ) < 1)
         then  2   ; shouldn't ever happen??
         else if ((IfValidAnd( CUAC_OldAccessDB > 0 )==0 .AND. SumAll( ResZn:AffordableHousing ) < 1) .OR.
                  SumAcrossIf( ResZn:AffordableHousing, ResZn:NumAffordableUnitTypes > 1 ) > 0 .OR.
                  SumAcrossIf( ResZn:AffordableHousing, ResZn:AffordableUnitsByBedrmsWithMult[8] > 0 ) > 0 .OR.
                  SumAll( ResZn:NumAffordableCentralLaundryAssignments ) > 0)
         then  10  ; show error & summary info only
         else if (GlobalStatus( CUAC:ErrorMsg ) > 0)
         then  11  ; show complete CUAC UI, but disable Calc button
         else  12  ; show complete CUAC UI
         endif endif endif endif endif  }

   "Set CUAC:ShowPVAllocGrid"    CUAC:ShowPVAllocGrid =        ; SAC 10/02/23
      {  if (Proj:CUACUIFlag > 9 .AND. (IfValidAnd( Proj:PVSizeSum > 0 ) .OR. IfValidAnd( UseCommunitySolar > 0 )))
         then  1  else  UNDEFINED  endif  }

   "Set Proj:CUACMsg"         Proj:CUACMsg =          ; SAC 08/19/22 (CUAC)
      {  switch (CUACUIFlag)
            case  0 :  "California Utility Allowance Calculator (CUAC) features only available for Multifamily Residential projects"
            case  1 :  "Select the 'Enable CUAC Reporting' checkbox to activate California Utility Allowance Calculator (CUAC) features"
            case  2 :  "CUAC object not found"
            default :  UNDEFINED
         endswitch  }


   "Set CUAC:ShowPVBattInputs"         CUAC:ShowPVBattInputs =
      {  if (CUACUIFlag >= 11 .AND. (IfValidAnd( Proj:PVSizeSum > 0 ) .OR. IfValidAnd( Proj:BattSizeSum > 0 )))
         then  1  else  0  endif  }
   "Set CUAC:AffordablePVMsg"          CUAC:AffordablePVMsg =
      {  if (ShowPVBattInputs < 1 .OR. IfValidAnd( Proj:PVSizeSum > 0 )==0)
         then  UNDEFINED
         else if (AffordablePVDCSysSizeFrac = 0)
         then  Format( "(up to building total %g kWdc PV)", Proj:PVSizeSum )
         else if (IfValidAnd( AffordablePVDCSysSizeFrac > 1.01 ))
         then  Format( "(<= building total %g kWdc PV)", Proj:PVSizeSum )
         else  Format( "(%s%% of building total %g kWdc PV)", FltToStr( (AffordablePVDCSysSizeFrac * 100), 1 ), Proj:PVSizeSum )
         endif endif endif  }
; removed from CUAC battery from calcs - SAC 12/07/22
;   "Set CUAC:AffordableBattMsg"        CUAC:AffordableBattMsg =
;      {  if (ShowPVBattInputs < 1 .OR. IfValidAnd( Proj:BattSizeSum > 0 )==0)
;         then  UNDEFINED
;         else if (AffordableBattMaxCapFrac = 0)
;         then  Format( "(up to total Battery %g kWh)", Proj:BattSizeSum )
;         else if (IfValidAnd( AffordableBattMaxCapFrac > 1.01 ))
;         then  Format( "(<= total Battery %g kWh)", Proj:BattSizeSum )
;         else  Format( "(%s%% of total Battery %g kWh)", FltToStr( (AffordableBattMaxCapFrac * 100), 0 ), Proj:BattSizeSum )
;         endif endif endif  }

   "Set CUAC:PVAllocBtnMsg"            CUAC:PVAllocBtnMsg =    ; SAC 12/08/22
      {  if (CUACUIFlag < 11) then  UNDEFINED
         else if (IfValidAnd( UseCommunitySolar > 0 )==0 .AND. IfValidAnd( NumAvailCmntySlrProjs > 0 ) .AND. IfValidAnd( Proj:PVSizeSum > 0 )==0)
         then  "Choose Community Solar -or- create bldg PVArray(s) before allocation"
         else if (IfValidAnd( UseCommunitySolar > 0 )==0 .AND. IfValidAnd( NumAvailCmntySlrProjs > 0 ) .AND. AffordablePVDCSysSizeFrac == 0)
         then  "Choose Community Solar -or- allocate bldg PV to affordable units"
         else if (IfValidAnd( UseCommunitySolar > 0 ))
         then  if (CommunitySolarProject < 1)
               then  "Click to select a valid community solar project"
               else if (IfValidAnd( InCmntySlrProjTerritory > 0 )==0)
               then  "Click to confirm building within Community Solar project boundary"
               else if (TotCommunitySolarSize < 0.01)
               then  "Click to enter community solar PV size by unit type"
               else  Format( "%.0f kW of '%s' entered", TotCommunitySolarSize, EnumString( CommunitySolarProject ) )
               endif endif endif
         else if (IfValidAnd( Proj:PVSizeSum > 0 )==0) then  "Create building-wide PVArray(s) before defining allocation"
         else if (AffordablePVDCSysSizeFrac == 0)      then  Format( "PV Allocation:  (up to %g kWdc PV available for allocation)", Proj:PVSizeSum )
         else if (IfValidAnd( AffordablePVDCSysSizeFrac > 1.01 ))
         then  Format( "PV Allocation Error:  (tenant %g kWdc PV exceeds bldg total)", AffordablePVDCSysSize )
         else  Format( "PV Allocation:  (%s%% of total %g kWdc PV allocated)", FltToStr( (AffordablePVDCSysSizeFrac * 100), 0 ), Proj:PVSizeSum )
         endif endif endif endif endif endif endif  }


;           "PerformCalcs",                      BEMP_Int,  1,  0,  0,  NInp,  "",                 0,  0,                           1044, "PerformCalculations",  ""   ; "boolean (0/1) whether calcs/reporting are to be performed (=> no errors)",  ""    ; SAC 08/07/22


END
;*************************************************************************


;************************************************************************* SAC 08/22/23
RULELIST "CUAC_DefaultGen2Rates" 0 0 0 0

   "Set CPR_UtilityRate:NumRateSeasons"      CPR_UtilityRate:NumRateSeasons =       ; SAC 08/27/23
      {       if (LocalCompAssigned( RateSeasons[12] ) > 0) then  12
         else if (LocalCompAssigned( RateSeasons[11] ) > 0) then  11
         else if (LocalCompAssigned( RateSeasons[10] ) > 0) then  10
         else if (LocalCompAssigned( RateSeasons[9]  ) > 0) then   9
         else if (LocalCompAssigned( RateSeasons[8]  ) > 0) then   8
         else if (LocalCompAssigned( RateSeasons[7]  ) > 0) then   7
         else if (LocalCompAssigned( RateSeasons[6]  ) > 0) then   6
         else if (LocalCompAssigned( RateSeasons[5]  ) > 0) then   5
         else if (LocalCompAssigned( RateSeasons[4]  ) > 0) then   4
         else if (LocalCompAssigned( RateSeasons[3]  ) > 0) then   3
         else if (LocalCompAssigned( RateSeasons[2]  ) > 0) then   2
         else if (LocalCompAssigned( RateSeasons[1]  ) > 0) then   1
         else  0  endif endif endif endif endif endif  endif endif endif endif endif endif  }
   "Set CPR_UtilityRate:NumHourlyTOUCosts"   CPR_UtilityRate:NumHourlyTOUCosts = 
      {       if (LocalCompAssigned( HourlyTOUCosts[12] ) > 0) then  12
         else if (LocalCompAssigned( HourlyTOUCosts[11] ) > 0) then  11
         else if (LocalCompAssigned( HourlyTOUCosts[10] ) > 0) then  10
         else if (LocalCompAssigned( HourlyTOUCosts[9]  ) > 0) then   9
         else if (LocalCompAssigned( HourlyTOUCosts[8]  ) > 0) then   8
         else if (LocalCompAssigned( HourlyTOUCosts[7]  ) > 0) then   7
         else if (LocalCompAssigned( HourlyTOUCosts[6]  ) > 0) then   6
         else if (LocalCompAssigned( HourlyTOUCosts[5]  ) > 0) then   5
         else if (LocalCompAssigned( HourlyTOUCosts[4]  ) > 0) then   4
         else if (LocalCompAssigned( HourlyTOUCosts[3]  ) > 0) then   3
         else if (LocalCompAssigned( HourlyTOUCosts[2]  ) > 0) then   2
         else if (LocalCompAssigned( HourlyTOUCosts[1]  ) > 0) then   1
         else  0  endif endif endif endif endif endif  endif endif endif endif endif endif  }

   "Set CPR_RateSeason:NumSeasonPeriods"     CPR_RateSeason:NumSeasonPeriods =       ; SAC 08/28/23
      {       if (LocalCompAssigned( SeasonPeriods[12] ) > 0) then  12
         else if (LocalCompAssigned( SeasonPeriods[11] ) > 0) then  11
         else if (LocalCompAssigned( SeasonPeriods[10] ) > 0) then  10
         else if (LocalCompAssigned( SeasonPeriods[9]  ) > 0) then   9
         else if (LocalCompAssigned( SeasonPeriods[8]  ) > 0) then   8
         else if (LocalCompAssigned( SeasonPeriods[7]  ) > 0) then   7
         else if (LocalCompAssigned( SeasonPeriods[6]  ) > 0) then   6
         else if (LocalCompAssigned( SeasonPeriods[5]  ) > 0) then   5
         else if (LocalCompAssigned( SeasonPeriods[4]  ) > 0) then   4
         else if (LocalCompAssigned( SeasonPeriods[3]  ) > 0) then   3
         else if (LocalCompAssigned( SeasonPeriods[2]  ) > 0) then   2
         else if (LocalCompAssigned( SeasonPeriods[1]  ) > 0) then   1
         else  0  endif endif endif endif endif endif  endif endif endif endif endif endif  }
   "Set CPR_RateSeason:NumTimeOfUsePeriods"  CPR_RateSeason:NumTimeOfUsePeriods = 
      {       if (LocalCompAssigned( TimeOfUsePeriods[12] ) > 0) then  12
         else if (LocalCompAssigned( TimeOfUsePeriods[11] ) > 0) then  11
         else if (LocalCompAssigned( TimeOfUsePeriods[10] ) > 0) then  10
         else if (LocalCompAssigned( TimeOfUsePeriods[9]  ) > 0) then   9
         else if (LocalCompAssigned( TimeOfUsePeriods[8]  ) > 0) then   8
         else if (LocalCompAssigned( TimeOfUsePeriods[7]  ) > 0) then   7
         else if (LocalCompAssigned( TimeOfUsePeriods[6]  ) > 0) then   6
         else if (LocalCompAssigned( TimeOfUsePeriods[5]  ) > 0) then   5
         else if (LocalCompAssigned( TimeOfUsePeriods[4]  ) > 0) then   4
         else if (LocalCompAssigned( TimeOfUsePeriods[3]  ) > 0) then   3
         else if (LocalCompAssigned( TimeOfUsePeriods[2]  ) > 0) then   2
         else if (LocalCompAssigned( TimeOfUsePeriods[1]  ) > 0) then   1
         else  0  endif endif endif endif endif endif  endif endif endif endif endif endif  }

   "Set CPR_TOUPeriod:NumTimePeriods"        CPR_TOUPeriod:NumTimePeriods =         ; SAC 08/28/23
      {       if (LocalCompAssigned( TimePeriods[20] ) > 0) then  20
         else if (LocalCompAssigned( TimePeriods[19] ) > 0) then  19
         else if (LocalCompAssigned( TimePeriods[18] ) > 0) then  18
         else if (LocalCompAssigned( TimePeriods[17] ) > 0) then  17
         else if (LocalCompAssigned( TimePeriods[16] ) > 0) then  16
         else if (LocalCompAssigned( TimePeriods[15] ) > 0) then  15
         else if (LocalCompAssigned( TimePeriods[14] ) > 0) then  14
         else if (LocalCompAssigned( TimePeriods[13] ) > 0) then  13
         else if (LocalCompAssigned( TimePeriods[12] ) > 0) then  12
         else if (LocalCompAssigned( TimePeriods[11] ) > 0) then  11
         else if (LocalCompAssigned( TimePeriods[10] ) > 0) then  10
         else if (LocalCompAssigned( TimePeriods[9]  ) > 0) then   9
         else if (LocalCompAssigned( TimePeriods[8]  ) > 0) then   8
         else if (LocalCompAssigned( TimePeriods[7]  ) > 0) then   7
         else if (LocalCompAssigned( TimePeriods[6]  ) > 0) then   6
         else if (LocalCompAssigned( TimePeriods[5]  ) > 0) then   5
         else if (LocalCompAssigned( TimePeriods[4]  ) > 0) then   4
         else if (LocalCompAssigned( TimePeriods[3]  ) > 0) then   3
         else if (LocalCompAssigned( TimePeriods[2]  ) > 0) then   2
         else if (LocalCompAssigned( TimePeriods[1]  ) > 0) then   1
         else  0  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  }

   "Set CPR_SeasonCost:NumFixedCosts"        CPR_SeasonCost:NumFixedCosts =         ; SAC 08/28/23
      {       if (LocalCompAssigned( FixedCosts[20] ) > 0) then  20
         else if (LocalCompAssigned( FixedCosts[19] ) > 0) then  19
         else if (LocalCompAssigned( FixedCosts[18] ) > 0) then  18
         else if (LocalCompAssigned( FixedCosts[17] ) > 0) then  17
         else if (LocalCompAssigned( FixedCosts[16] ) > 0) then  16
         else if (LocalCompAssigned( FixedCosts[15] ) > 0) then  15
         else if (LocalCompAssigned( FixedCosts[14] ) > 0) then  14
         else if (LocalCompAssigned( FixedCosts[13] ) > 0) then  13
         else if (LocalCompAssigned( FixedCosts[12] ) > 0) then  12
         else if (LocalCompAssigned( FixedCosts[11] ) > 0) then  11
         else if (LocalCompAssigned( FixedCosts[10] ) > 0) then  10
         else if (LocalCompAssigned( FixedCosts[9]  ) > 0) then   9
         else if (LocalCompAssigned( FixedCosts[8]  ) > 0) then   8
         else if (LocalCompAssigned( FixedCosts[7]  ) > 0) then   7
         else if (LocalCompAssigned( FixedCosts[6]  ) > 0) then   6
         else if (LocalCompAssigned( FixedCosts[5]  ) > 0) then   5
         else if (LocalCompAssigned( FixedCosts[4]  ) > 0) then   4
         else if (LocalCompAssigned( FixedCosts[3]  ) > 0) then   3
         else if (LocalCompAssigned( FixedCosts[2]  ) > 0) then   2
         else if (LocalCompAssigned( FixedCosts[1]  ) > 0) then   1
         else  0  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  }
   "Set CPR_SeasonCost:NumMinimumBillCosts"  CPR_SeasonCost:NumMinimumBillCosts = 
      {       if (LocalCompAssigned( MinimumBillCosts[20] ) > 0) then  20
         else if (LocalCompAssigned( MinimumBillCosts[19] ) > 0) then  19
         else if (LocalCompAssigned( MinimumBillCosts[18] ) > 0) then  18
         else if (LocalCompAssigned( MinimumBillCosts[17] ) > 0) then  17
         else if (LocalCompAssigned( MinimumBillCosts[16] ) > 0) then  16
         else if (LocalCompAssigned( MinimumBillCosts[15] ) > 0) then  15
         else if (LocalCompAssigned( MinimumBillCosts[14] ) > 0) then  14
         else if (LocalCompAssigned( MinimumBillCosts[13] ) > 0) then  13
         else if (LocalCompAssigned( MinimumBillCosts[12] ) > 0) then  12
         else if (LocalCompAssigned( MinimumBillCosts[11] ) > 0) then  11
         else if (LocalCompAssigned( MinimumBillCosts[10] ) > 0) then  10
         else if (LocalCompAssigned( MinimumBillCosts[9]  ) > 0) then   9
         else if (LocalCompAssigned( MinimumBillCosts[8]  ) > 0) then   8
         else if (LocalCompAssigned( MinimumBillCosts[7]  ) > 0) then   7
         else if (LocalCompAssigned( MinimumBillCosts[6]  ) > 0) then   6
         else if (LocalCompAssigned( MinimumBillCosts[5]  ) > 0) then   5
         else if (LocalCompAssigned( MinimumBillCosts[4]  ) > 0) then   4
         else if (LocalCompAssigned( MinimumBillCosts[3]  ) > 0) then   3
         else if (LocalCompAssigned( MinimumBillCosts[2]  ) > 0) then   2
         else if (LocalCompAssigned( MinimumBillCosts[1]  ) > 0) then   1
         else  0  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  }
   "Set CPR_SeasonCost:NumNetSurplusCompensationCosts"   CPR_SeasonCost:NumNetSurplusCompensationCosts = 
      {       if (LocalCompAssigned( NetSurplusCompensationCosts[20] ) > 0) then  20
         else if (LocalCompAssigned( NetSurplusCompensationCosts[19] ) > 0) then  19
         else if (LocalCompAssigned( NetSurplusCompensationCosts[18] ) > 0) then  18
         else if (LocalCompAssigned( NetSurplusCompensationCosts[17] ) > 0) then  17
         else if (LocalCompAssigned( NetSurplusCompensationCosts[16] ) > 0) then  16
         else if (LocalCompAssigned( NetSurplusCompensationCosts[15] ) > 0) then  15
         else if (LocalCompAssigned( NetSurplusCompensationCosts[14] ) > 0) then  14
         else if (LocalCompAssigned( NetSurplusCompensationCosts[13] ) > 0) then  13
         else if (LocalCompAssigned( NetSurplusCompensationCosts[12] ) > 0) then  12
         else if (LocalCompAssigned( NetSurplusCompensationCosts[11] ) > 0) then  11
         else if (LocalCompAssigned( NetSurplusCompensationCosts[10] ) > 0) then  10
         else if (LocalCompAssigned( NetSurplusCompensationCosts[9]  ) > 0) then   9
         else if (LocalCompAssigned( NetSurplusCompensationCosts[8]  ) > 0) then   8
         else if (LocalCompAssigned( NetSurplusCompensationCosts[7]  ) > 0) then   7
         else if (LocalCompAssigned( NetSurplusCompensationCosts[6]  ) > 0) then   6
         else if (LocalCompAssigned( NetSurplusCompensationCosts[5]  ) > 0) then   5
         else if (LocalCompAssigned( NetSurplusCompensationCosts[4]  ) > 0) then   4
         else if (LocalCompAssigned( NetSurplusCompensationCosts[3]  ) > 0) then   3
         else if (LocalCompAssigned( NetSurplusCompensationCosts[2]  ) > 0) then   2
         else if (LocalCompAssigned( NetSurplusCompensationCosts[1]  ) > 0) then   1
         else  0  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  }

   "Set CPR_NetSurplusCompensationCost:NumTiers"      CPR_NetSurplusCompensationCost:NumTiers =       ; SAC 08/28/23
      {       if (LocalCompAssigned( Tiers[20] ) > 0) then  20
         else if (LocalCompAssigned( Tiers[19] ) > 0) then  19
         else if (LocalCompAssigned( Tiers[18] ) > 0) then  18
         else if (LocalCompAssigned( Tiers[17] ) > 0) then  17
         else if (LocalCompAssigned( Tiers[16] ) > 0) then  16
         else if (LocalCompAssigned( Tiers[15] ) > 0) then  15
         else if (LocalCompAssigned( Tiers[14] ) > 0) then  14
         else if (LocalCompAssigned( Tiers[13] ) > 0) then  13
         else if (LocalCompAssigned( Tiers[12] ) > 0) then  12
         else if (LocalCompAssigned( Tiers[11] ) > 0) then  11
         else if (LocalCompAssigned( Tiers[10] ) > 0) then  10
         else if (LocalCompAssigned( Tiers[9]  ) > 0) then   9
         else if (LocalCompAssigned( Tiers[8]  ) > 0) then   8
         else if (LocalCompAssigned( Tiers[7]  ) > 0) then   7
         else if (LocalCompAssigned( Tiers[6]  ) > 0) then   6
         else if (LocalCompAssigned( Tiers[5]  ) > 0) then   5
         else if (LocalCompAssigned( Tiers[4]  ) > 0) then   4
         else if (LocalCompAssigned( Tiers[3]  ) > 0) then   3
         else if (LocalCompAssigned( Tiers[2]  ) > 0) then   2
         else if (LocalCompAssigned( Tiers[1]  ) > 0) then   1
         else  0  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  }

   "Set CPR_PeriodCost:NumDemandCosts"             CPR_PeriodCost:NumDemandCosts =       ; SAC 08/28/23
      {       if (LocalCompAssigned( DemandCosts[20] ) > 0) then  20
         else if (LocalCompAssigned( DemandCosts[19] ) > 0) then  19
         else if (LocalCompAssigned( DemandCosts[18] ) > 0) then  18
         else if (LocalCompAssigned( DemandCosts[17] ) > 0) then  17
         else if (LocalCompAssigned( DemandCosts[16] ) > 0) then  16
         else if (LocalCompAssigned( DemandCosts[15] ) > 0) then  15
         else if (LocalCompAssigned( DemandCosts[14] ) > 0) then  14
         else if (LocalCompAssigned( DemandCosts[13] ) > 0) then  13
         else if (LocalCompAssigned( DemandCosts[12] ) > 0) then  12
         else if (LocalCompAssigned( DemandCosts[11] ) > 0) then  11
         else if (LocalCompAssigned( DemandCosts[10] ) > 0) then  10
         else if (LocalCompAssigned( DemandCosts[9]  ) > 0) then   9
         else if (LocalCompAssigned( DemandCosts[8]  ) > 0) then   8
         else if (LocalCompAssigned( DemandCosts[7]  ) > 0) then   7
         else if (LocalCompAssigned( DemandCosts[6]  ) > 0) then   6
         else if (LocalCompAssigned( DemandCosts[5]  ) > 0) then   5
         else if (LocalCompAssigned( DemandCosts[4]  ) > 0) then   4
         else if (LocalCompAssigned( DemandCosts[3]  ) > 0) then   3
         else if (LocalCompAssigned( DemandCosts[2]  ) > 0) then   2
         else if (LocalCompAssigned( DemandCosts[1]  ) > 0) then   1
         else  0  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  }
   "Set CPR_PeriodCost:NumEnergyCosts"             CPR_PeriodCost:NumEnergyCosts = 
      {       if (LocalCompAssigned( EnergyCosts[20] ) > 0) then  20
         else if (LocalCompAssigned( EnergyCosts[19] ) > 0) then  19
         else if (LocalCompAssigned( EnergyCosts[18] ) > 0) then  18
         else if (LocalCompAssigned( EnergyCosts[17] ) > 0) then  17
         else if (LocalCompAssigned( EnergyCosts[16] ) > 0) then  16
         else if (LocalCompAssigned( EnergyCosts[15] ) > 0) then  15
         else if (LocalCompAssigned( EnergyCosts[14] ) > 0) then  14
         else if (LocalCompAssigned( EnergyCosts[13] ) > 0) then  13
         else if (LocalCompAssigned( EnergyCosts[12] ) > 0) then  12
         else if (LocalCompAssigned( EnergyCosts[11] ) > 0) then  11
         else if (LocalCompAssigned( EnergyCosts[10] ) > 0) then  10
         else if (LocalCompAssigned( EnergyCosts[9]  ) > 0) then   9
         else if (LocalCompAssigned( EnergyCosts[8]  ) > 0) then   8
         else if (LocalCompAssigned( EnergyCosts[7]  ) > 0) then   7
         else if (LocalCompAssigned( EnergyCosts[6]  ) > 0) then   6
         else if (LocalCompAssigned( EnergyCosts[5]  ) > 0) then   5
         else if (LocalCompAssigned( EnergyCosts[4]  ) > 0) then   4
         else if (LocalCompAssigned( EnergyCosts[3]  ) > 0) then   3
         else if (LocalCompAssigned( EnergyCosts[2]  ) > 0) then   2
         else if (LocalCompAssigned( EnergyCosts[1]  ) > 0) then   1
         else  0  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  }
   "Set CPR_PeriodCost:NumNetExcessCreditCosts"    CPR_PeriodCost:NumNetExcessCreditCosts = 
      {       if (LocalCompAssigned( NetExcessCreditCosts[20] ) > 0) then  20
         else if (LocalCompAssigned( NetExcessCreditCosts[19] ) > 0) then  19
         else if (LocalCompAssigned( NetExcessCreditCosts[18] ) > 0) then  18
         else if (LocalCompAssigned( NetExcessCreditCosts[17] ) > 0) then  17
         else if (LocalCompAssigned( NetExcessCreditCosts[16] ) > 0) then  16
         else if (LocalCompAssigned( NetExcessCreditCosts[15] ) > 0) then  15
         else if (LocalCompAssigned( NetExcessCreditCosts[14] ) > 0) then  14
         else if (LocalCompAssigned( NetExcessCreditCosts[13] ) > 0) then  13
         else if (LocalCompAssigned( NetExcessCreditCosts[12] ) > 0) then  12
         else if (LocalCompAssigned( NetExcessCreditCosts[11] ) > 0) then  11
         else if (LocalCompAssigned( NetExcessCreditCosts[10] ) > 0) then  10
         else if (LocalCompAssigned( NetExcessCreditCosts[9]  ) > 0) then   9
         else if (LocalCompAssigned( NetExcessCreditCosts[8]  ) > 0) then   8
         else if (LocalCompAssigned( NetExcessCreditCosts[7]  ) > 0) then   7
         else if (LocalCompAssigned( NetExcessCreditCosts[6]  ) > 0) then   6
         else if (LocalCompAssigned( NetExcessCreditCosts[5]  ) > 0) then   5
         else if (LocalCompAssigned( NetExcessCreditCosts[4]  ) > 0) then   4
         else if (LocalCompAssigned( NetExcessCreditCosts[3]  ) > 0) then   3
         else if (LocalCompAssigned( NetExcessCreditCosts[2]  ) > 0) then   2
         else if (LocalCompAssigned( NetExcessCreditCosts[1]  ) > 0) then   1
         else  0  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  }

   "Set CPR_DemandCost:NumTiers"              CPR_DemandCost:NumTiers =          ; SAC 08/28/23
      {       if (LocalCompAssigned( Tiers[20] ) > 0) then  20
         else if (LocalCompAssigned( Tiers[19] ) > 0) then  19
         else if (LocalCompAssigned( Tiers[18] ) > 0) then  18
         else if (LocalCompAssigned( Tiers[17] ) > 0) then  17
         else if (LocalCompAssigned( Tiers[16] ) > 0) then  16
         else if (LocalCompAssigned( Tiers[15] ) > 0) then  15
         else if (LocalCompAssigned( Tiers[14] ) > 0) then  14
         else if (LocalCompAssigned( Tiers[13] ) > 0) then  13
         else if (LocalCompAssigned( Tiers[12] ) > 0) then  12
         else if (LocalCompAssigned( Tiers[11] ) > 0) then  11
         else if (LocalCompAssigned( Tiers[10] ) > 0) then  10
         else if (LocalCompAssigned( Tiers[9]  ) > 0) then   9
         else if (LocalCompAssigned( Tiers[8]  ) > 0) then   8
         else if (LocalCompAssigned( Tiers[7]  ) > 0) then   7
         else if (LocalCompAssigned( Tiers[6]  ) > 0) then   6
         else if (LocalCompAssigned( Tiers[5]  ) > 0) then   5
         else if (LocalCompAssigned( Tiers[4]  ) > 0) then   4
         else if (LocalCompAssigned( Tiers[3]  ) > 0) then   3
         else if (LocalCompAssigned( Tiers[2]  ) > 0) then   2
         else if (LocalCompAssigned( Tiers[1]  ) > 0) then   1
         else  0  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  }

   "Set CPR_EnergyCost:NumTiers"              CPR_EnergyCost:NumTiers =          ; SAC 08/28/23
      {       if (LocalCompAssigned( Tiers[20] ) > 0) then  20
         else if (LocalCompAssigned( Tiers[19] ) > 0) then  19
         else if (LocalCompAssigned( Tiers[18] ) > 0) then  18
         else if (LocalCompAssigned( Tiers[17] ) > 0) then  17
         else if (LocalCompAssigned( Tiers[16] ) > 0) then  16
         else if (LocalCompAssigned( Tiers[15] ) > 0) then  15
         else if (LocalCompAssigned( Tiers[14] ) > 0) then  14
         else if (LocalCompAssigned( Tiers[13] ) > 0) then  13
         else if (LocalCompAssigned( Tiers[12] ) > 0) then  12
         else if (LocalCompAssigned( Tiers[11] ) > 0) then  11
         else if (LocalCompAssigned( Tiers[10] ) > 0) then  10
         else if (LocalCompAssigned( Tiers[9]  ) > 0) then   9
         else if (LocalCompAssigned( Tiers[8]  ) > 0) then   8
         else if (LocalCompAssigned( Tiers[7]  ) > 0) then   7
         else if (LocalCompAssigned( Tiers[6]  ) > 0) then   6
         else if (LocalCompAssigned( Tiers[5]  ) > 0) then   5
         else if (LocalCompAssigned( Tiers[4]  ) > 0) then   4
         else if (LocalCompAssigned( Tiers[3]  ) > 0) then   3
         else if (LocalCompAssigned( Tiers[2]  ) > 0) then   2
         else if (LocalCompAssigned( Tiers[1]  ) > 0) then   1
         else  0  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  }

   "Set CPR_NetExcessCreditCost:NumTiers"          CPR_NetExcessCreditCost:NumTiers =     ; SAC 08/28/23
      {       if (LocalCompAssigned( Tiers[20] ) > 0) then  20
         else if (LocalCompAssigned( Tiers[19] ) > 0) then  19
         else if (LocalCompAssigned( Tiers[18] ) > 0) then  18
         else if (LocalCompAssigned( Tiers[17] ) > 0) then  17
         else if (LocalCompAssigned( Tiers[16] ) > 0) then  16
         else if (LocalCompAssigned( Tiers[15] ) > 0) then  15
         else if (LocalCompAssigned( Tiers[14] ) > 0) then  14
         else if (LocalCompAssigned( Tiers[13] ) > 0) then  13
         else if (LocalCompAssigned( Tiers[12] ) > 0) then  12
         else if (LocalCompAssigned( Tiers[11] ) > 0) then  11
         else if (LocalCompAssigned( Tiers[10] ) > 0) then  10
         else if (LocalCompAssigned( Tiers[9]  ) > 0) then   9
         else if (LocalCompAssigned( Tiers[8]  ) > 0) then   8
         else if (LocalCompAssigned( Tiers[7]  ) > 0) then   7
         else if (LocalCompAssigned( Tiers[6]  ) > 0) then   6
         else if (LocalCompAssigned( Tiers[5]  ) > 0) then   5
         else if (LocalCompAssigned( Tiers[4]  ) > 0) then   4
         else if (LocalCompAssigned( Tiers[3]  ) > 0) then   3
         else if (LocalCompAssigned( Tiers[2]  ) > 0) then   2
         else if (LocalCompAssigned( Tiers[1]  ) > 0) then   1
         else  0  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  endif endif endif endif endif  }

   "Set CPR_HourlyTOUCost:NumHourlyTimeOfUseMonths"      CPR_HourlyTOUCost:NumHourlyTimeOfUseMonths =    ; SAC 08/28/23
      {       if (LocalCompAssigned( HourlyTimeOfUseMonths[12] ) > 0) then  12
         else if (LocalCompAssigned( HourlyTimeOfUseMonths[11] ) > 0) then  11
         else if (LocalCompAssigned( HourlyTimeOfUseMonths[10] ) > 0) then  10
         else if (LocalCompAssigned( HourlyTimeOfUseMonths[9]  ) > 0) then   9
         else if (LocalCompAssigned( HourlyTimeOfUseMonths[8]  ) > 0) then   8
         else if (LocalCompAssigned( HourlyTimeOfUseMonths[7]  ) > 0) then   7
         else if (LocalCompAssigned( HourlyTimeOfUseMonths[6]  ) > 0) then   6
         else if (LocalCompAssigned( HourlyTimeOfUseMonths[5]  ) > 0) then   5
         else if (LocalCompAssigned( HourlyTimeOfUseMonths[4]  ) > 0) then   4
         else if (LocalCompAssigned( HourlyTimeOfUseMonths[3]  ) > 0) then   3
         else if (LocalCompAssigned( HourlyTimeOfUseMonths[2]  ) > 0) then   2
         else if (LocalCompAssigned( HourlyTimeOfUseMonths[1]  ) > 0) then   1
         else  0  endif endif endif endif endif endif  endif endif endif endif endif endif  }

   "Default CPR_SeasonTimePeriod:StartDay"   CPR_SeasonTimePeriod:StartDay = {  1  }
   "Default CPR_SeasonTimePeriod:EndDay"     CPR_SeasonTimePeriod:EndDay   =
      {  switch (ValidOr( EndMonth, 0 ))
            case  0 :  UNDEFINED
            case  2 :  28
            case  4 :  30
            case  6 :  30
            case  9 :  30
            case 11 :  30
            default :  31  endswitch  }

   "Set CUAC:ElecTariffGen to 2 if CPR_UtilityRate loaded"     CUAC:ElecTariffGen =       ; SAC 09/01/23
      {  if (LocalCompAssigned( CPR_ElecUtilityRateRef ) > 0) then  2
         else  UNCHANGED  endif  }
   "Set CUAC:GasTariffGen to 2 if CPR_UtilityRate loaded"      CUAC:GasTariffGen  = 
      {  if (LocalCompAssigned( CPR_GasUtilityRateRef ) > 0) then  2
         else  UNCHANGED  endif  }

END
;*************************************************************************


;************************************************************************* SAC 09/20/23
RULELIST "CUAC_DeleteCPRRates" 1 0 0 0
   "Delete CPR_UtilityRates"                 CPR_UtilityRate:Action                 = {  DeleteComp()  }
   "Delete CPR_RateSeason"                   CPR_RateSeason:Action                  = {  DeleteComp()  }
   "Delete CPR_SeasonTimePeriod"             CPR_SeasonTimePeriod:Action            = {  DeleteComp()  }
   "Delete CPR_TOUPeriod"                    CPR_TimeOfUsePeriod:Action             = {  DeleteComp()  }
   "Delete CPR_DailyTimePeriod"              CPR_DailyTimePeriod:Action             = {  DeleteComp()  }
   "Delete CPR_SeasonCost"                   CPR_SeasonCost:Action                  = {  DeleteComp()  }
   "Delete CPR_FixedCost"                    CPR_FixedCost:Action                   = {  DeleteComp()  }
   "Delete CPR_NetSurplusCompensationCost"   CPR_NetSurplusCompensationCost:Action  = {  DeleteComp()  }
   "Delete CPR_PeriodCost"                   CPR_PeriodCost:Action                  = {  DeleteComp()  }
   "Delete CPR_DemandCost"                   CPR_DemandCost:Action                  = {  DeleteComp()  }
   "Delete CPR_EnergyCost"                   CPR_EnergyCost:Action                  = {  DeleteComp()  }
   "Delete CPR_NetExcessCreditCost"          CPR_NetExcessCreditCost:Action         = {  DeleteComp()  }
   "Delete CPR_HourlyTOUCost"                CPR_HourlyTOUCost:Action               = {  DeleteComp()  }
   "Delete CPR_HourlyTOUMonth"               CPR_HourlyTOUMonth:Action              = {  DeleteComp()  }
   "Delete CPR_Tier"                         CPR_Tier:Action                        = {  DeleteComp()  }
END
;*************************************************************************


; split CUAC_SetupRates into CUAC_SetupGen1ElecRate & CUAC_SetupGen1GasRate rulelists - SAC 08/22/23
;************************************************************************* SAC 09/14/22
RULELIST "CUAC_SetupGen1ElecRate" 1 0 0 0
   "Delete existing CUAC:ElecUtilityRateRef"    CUAC:ElecUtilityRateRef =
      {  if (LocalCompAssigned( ElecUtilityRateRef ) > 0)
         then  DeleteComp()  else  UNCHANGED  endif  }
   "Create and setup CUAC:ElecUtilityRateRef"   CUAC:ElecUtilityRateRef =
      {  if (IfValidAnd( ElecTariffGen > 1 )) then  UNDEFINED
         else  CreateComp( UtilityRate, "CUAC Elec Rate", "CUAC_SetupRate_Elec" )  endif  }
END
;*************************************************************************
RULELIST "CUAC_SetupGen1GasRate" 1 0 0 0
   "Delete existing CUAC:GasUtilityRateRef"     CUAC:GasUtilityRateRef  =
      {  if (LocalCompAssigned( GasUtilityRateRef  ) > 0)
         then  DeleteComp()  else  UNCHANGED  endif  }
   "Create and setup CUAC:GasUtilityRateRef"    CUAC:GasUtilityRateRef  =
      {  if (IfValidAnd( GasUtilitySelected > 0 )==0 .OR.
             IfValidAnd( GasTariffGen > 1 )) then  UNDEFINED
         else  CreateComp( UtilityRate, "CUAC Gas Rate", "CUAC_SetupRate_Gas" )  endif  }
END
;*************************************************************************

;************************************************************************* SAC 09/14/22
RULELIST "CUAC_SetupRate_Elec" 1 0 0 0

   "set UtilityRate:Company"     UtilityRate:Company     = {  CUAC:ElecUtility    }
   "set UtilityRate:Territory"   UtilityRate:Territory   =           ; updated Territory & Rate rules to reference new G2* properties when needed - SAC 09/20/23
      {  if (GlobalStatus( CUAC:G2ElecTerritory ) > 5 .AND. GlobalStatus( CUAC:ElecTerritory ) < 5)
         then  CUAC:G2ElecTerritory
         else  CUAC:ElecTerritory  endif  }
   "set UtilityRate:Rate"        UtilityRate:Rate        = 
      {  if (GlobalStatus( CUAC:G2ElecTariff ) > 5 .AND. GlobalStatus( CUAC:ElecTariff ) < 5)
         then  CUAC:G2ElecTariff
         else  CUAC:ElecTariff  endif  }
   "set UtilityRate:Units"       UtilityRate:Units       = {  CUAC_UtilityRates:Units( "RateID", Rate )  }

   "set UtilityRate:MonthlyCharge"     UtilityRate:MonthlyCharge       = {  CUAC_UtilityRates:MonthlyCharge(    "RateID", Rate )  }
   "set UtilityRate:MinMonthlyCharge"  UtilityRate:MinMonthlyCharge    = {  CUAC_UtilityRates:MinMonthlyCharge( "RateID", Rate )  }

   "set UtilityRate:NumSeasons"        UtilityRate:NumSeasons          = {  2  }
   "set UtilityRate:SeasonLabels[1]"   UtilityRate:SeasonLabels[1]     = {  "Winter"  }
   "set UtilityRate:SeasonLabels[2]"   UtilityRate:SeasonLabels[2]     = {  "Summer"  }

   "set UtilityRate:SeasonMonthMap[1-12]"  for:#Mo=(1to12)  UtilityRate:SeasonMonthMap[#Mo]  =
      {  if (CUAC_UtilityCompanies:IsSummer( "UtilityID", Company, "Month", #Mo )) then  2  else  1  endif  }

   "set UtilityRate:SeasonalUsePerDay[1] - Win"    UtilityRate:SeasonalUsePerDay[1]    = {  CUAC_UtilityTerritories:WinterKwhPerDay( "TerritoryID", Territory )  }
   "set UtilityRate:SeasonalUsePerDay[2] - Sum"    UtilityRate:SeasonalUsePerDay[2]    = {  CUAC_UtilityTerritories:SummerKwhPerDay( "TerritoryID", Territory )  }

   "set UtilityRate:Bin1-5SeasonalCost[1-2]"  for:#S=(1to2)  for:#Bin=(1to5)  UtilityRate:Bin#BinSeasonalCost[#S]  =
      {  CUAC_UtilityRates:UnitCost( "RateID", Rate, "Season", #S, "Bin", #Bin )  }
END
;************************************************************************* SAC 10/25/22
RULELIST "CUAC_SetupRate_Gas" 1 0 0 0

   "set UtilityRate:Company"     UtilityRate:Company     = {  CUAC:GasUtility    }
   "set UtilityRate:Territory"   UtilityRate:Territory   =           ; updated Territory & Rate rules to reference new G2* properties when needed - SAC 09/20/23
      {  if (GlobalStatus( CUAC:G2GasTerritory ) > 5 .AND. GlobalStatus( CUAC:GasTerritory ) < 5)
         then  CUAC:G2GasTerritory
         else  CUAC:GasTerritory  endif  }
   "set UtilityRate:Rate"        UtilityRate:Rate        = 
      {  if (GlobalStatus( CUAC:G2GasTariff ) > 5 .AND. GlobalStatus( CUAC:GasTariff ) < 5)
         then  CUAC:G2GasTariff
         else  CUAC:GasTariff  endif  }
   "set UtilityRate:Units"       UtilityRate:Units       = {  CUAC_UtilityRates:Units( "RateID", Rate )  }

   "set UtilityRate:MonthlyCharge"     UtilityRate:MonthlyCharge       = {  CUAC_UtilityRates:MonthlyCharge(    "RateID", Rate )  }
   "set UtilityRate:MinMonthlyCharge"  UtilityRate:MinMonthlyCharge    = {  CUAC_UtilityRates:MinMonthlyCharge( "RateID", Rate )  }

   "set UtilityRate:NumSeasons"        UtilityRate:NumSeasons          = {  2  }
   "set UtilityRate:SeasonLabels[1]"   UtilityRate:SeasonLabels[1]     = {  "Winter"  }
   "set UtilityRate:SeasonLabels[2]"   UtilityRate:SeasonLabels[2]     = {  "Summer"  }

   "set UtilityRate:SeasonMonthMap[1-12]"  for:#Mo=(1to12)  UtilityRate:SeasonMonthMap[#Mo]  =
      {  if (CUAC_UtilityCompanies:IsSummer( "UtilityID", Company, "Month", #Mo )) then  2  else  1  endif  }

   "set UtilityRate:SeasonalUsePerDay[1] - Win"    UtilityRate:SeasonalUsePerDay[1]    = {  CUAC_UtilityTerritories:WinterThermsPerDay( "TerritoryID", Territory )  }
   "set UtilityRate:SeasonalUsePerDay[2] - Sum"    UtilityRate:SeasonalUsePerDay[2]    = {  CUAC_UtilityTerritories:SummerThermsPerDay( "TerritoryID", Territory )  }

   "set UtilityRate:Bin1-5SeasonalCost[1-2]"  for:#S=(1to2)  for:#Bin=(1to5)  UtilityRate:Bin#BinSeasonalCost[#S]  =
      {  CUAC_UtilityRates:UnitCost( "RateID", Rate, "Season", #S, "Bin", #Bin )  }
END
;*************************************************************************

;************************************************************************* SAC 10/25/22
RULELIST "CUAC_MapOldCUACElecUtility" 1 0 1 0
   "set CUAC:ElecUtility based on OldElecUtilityID"   CUAC:ElecUtility =
      {  if (IfValidAnd( OldElecUtilityID > 0 )==0) then  UNCHANGED
         else  CUAC_UtilityRateGen2Mapping:CUACUtility( "Fuel", "Electric", "OldUtilityID", OldElecUtilityID )  endif  }
END
RULELIST "CUAC_MapOldCUACGasUtility" 1 0 1 0
   "set CUAC:GasUtility based on OldGasUtilityID"     CUAC:GasUtility =
      {  if (IfValidAnd( OldGasUtilityID > 0 )==0) then  UNCHANGED
         else  CUAC_UtilityRateGen2Mapping:CUACUtility( "Fuel", "Gas", "OldUtilityID", OldGasUtilityID )  endif  }
END
;*************************************************************************


;************************************************************************* SAC 09/18/23
RULELIST "Default_OldCUAC" 0 0 0 0
   "set OldCUAC:EnableProjListLoad"    OldCUAC:EnableProjListLoad =
      {  if (LocalStatus( OriginalAccessDBFile ) < 1) then  0
         else if (strlen( OriginalAccessDBFile ) > 0) then  1
         else  0  endif endif  }

   "default OldCUAC:OldProjectList"    OldCUAC:OldProjectList = {  0  }

;1,           "OriginalAccessDBFile",              BEMP_Str,  1,  0,  0,  Pres,  "",                 0,  0,                           1005, "OriginalAccessDBFile",       ""   ; SAC 09/18/23
;1,           "EnableProjListLoad",                BEMP_Int,  1,  0,  0,  Pres,  "",                 0,  0,                           1040, "EnableProjListLoad",  "" 
;1,           "ShowProjList",                      BEMP_Int,  1,  0,  0,  Pres,  "",                 0,  0,                           1040, "ShowProjList",  "" 
;1,           "OldProjectList",                    BEMP_Sym,  1,  0,  0,  Pres,  "",                 0,  0,                           1001, "OldProjectList",  ""  

END
;*************************************************************************


;************************************************************************* SAC 10/19/22
RULELIST "CUAC_SetupResults" 1 0 1 0
;*************************************************************************
   "Delete any current CUACResults objects"     Proj:Action = {  DeleteAllComps( CUACResults )  }

   "Create CUAC:CUACResultsRef[1] - Studio"     CUAC:CUACResultsRef[1] =
      {  if (IfValidAnd( AffordableUnitsByBedrms[1] > 0 )==0) then  UNDEFINED
         else  CreateComp( CUACResults, "Studio results" )  endif  }
   "Create CUAC:CUACResultsRef[2] - 1bedrm"     CUAC:CUACResultsRef[2] =
      {  if (IfValidAnd( AffordableUnitsByBedrms[2] > 0 )==0) then  UNDEFINED
         else  CreateComp( CUACResults, "1bedrm results" )  endif  }
   "Create CUAC:CUACResultsRef[3] - 2bedrm"     CUAC:CUACResultsRef[3] =
      {  if (IfValidAnd( AffordableUnitsByBedrms[3] > 0 )==0) then  UNDEFINED
         else  CreateComp( CUACResults, "2bedrm results" )  endif  }
   "Create CUAC:CUACResultsRef[4] - 3bedrm"     CUAC:CUACResultsRef[4] =
      {  if (IfValidAnd( AffordableUnitsByBedrms[4] > 0 )==0) then  UNDEFINED
         else  CreateComp( CUACResults, "3bedrm results" )  endif  }
   "Create CUAC:CUACResultsRef[5] - 4bedrm"     CUAC:CUACResultsRef[5] =
      {  if (IfValidAnd( AffordableUnitsByBedrms[5] > 0 )==0) then  UNDEFINED
         else  CreateComp( CUACResults, "4bedrm results" )  endif  }
   "Create CUAC:CUACResultsRef[6] - 5bedrm"     CUAC:CUACResultsRef[6] =
      {  if (IfValidAnd( AffordableUnitsByBedrms[6] > 0 )==0) then  UNDEFINED
         else  CreateComp( CUACResults, "5bedrm results" )  endif  }
   "Create CUAC:CUACResultsRef[7] - 6bedrm"     CUAC:CUACResultsRef[7] =
      {  if (IfValidAnd( AffordableUnitsByBedrms[7] > 0 )==0) then  UNDEFINED
         else  CreateComp( CUACResults, "6bedrm results" )  endif  }
END
;*************************************************************************

;************************************************************************* SAC 10/26/22
RULELIST "CUAC_FinalCalcs" 1 0 1 0
;*************************************************************************
   "store properties to be marked 'defaults' (to avoid file storage)"  CUAC:Action = { EvalRulelist( "CUAC_FinalCalcs_Defaulted", 1 ) }   ; SAC 09/20/23

   ; WaterUse based on prior CUAC tool / tAptTypesTemplate table / WaterGalPerDay -> Studio 65g / Xbdrm 65g + (65*#bdrm)
   "Set monthly water usage"   for:#U=(1to7)  for:#M=(1to12)
      CUAC:CUACResultsRef[#U]:WaterUse[#M] = {  65 * #U * DaysInMonth[#M]  }
   "Set annual water usage"    for:#U=(1to7)
      CUAC:CUACResultsRef[#U]:WaterUse[13] = {  65 * #U * 365  }
   "Set daily water usage"     for:#U=(1to7)
      CUAC:CUACResultsRef[#U]:WaterUse[14] = {  65 * #U  }

   "Set monthly water cost"    for:#U=(1to7)  for:#M=(1to12)
      CUAC:CUACResultsRef[#U]:WaterCosts[#M] =
         {  switch (WaterRateType)
               case  1 :  ValidOr( WaterMonthlyCost, 0 )
               case  2 :  ValidOr( WaterMonthlyCost, 0 ) + (ValidOr( WaterVolumeCost, 0 ) * CUACResultsRef[#U]:WaterUse[#M])
               default :  0
            endswitch  }
;   "Set annual water cost"     for:#U=(1to7)
;       CUAC:CUACResultsRef[#U]:WaterCosts[13] =
;         {  CUACResultsRef[#U]:WaterCosts[1]  + CUACResultsRef[#U]:WaterCosts[2]  + CUACResultsRef[#U]:WaterCosts[3]  +
;            CUACResultsRef[#U]:WaterCosts[4]  + CUACResultsRef[#U]:WaterCosts[5]  + CUACResultsRef[#U]:WaterCosts[6]  +
;            CUACResultsRef[#U]:WaterCosts[7]  + CUACResultsRef[#U]:WaterCosts[8]  + CUACResultsRef[#U]:WaterCosts[9]  +
;            CUACResultsRef[#U]:WaterCosts[10] + CUACResultsRef[#U]:WaterCosts[11] + CUACResultsRef[#U]:WaterCosts[12]  }
;   "Set daily water cost"      for:#U=(1to7)
;      CUAC:CUACResultsRef[#U]:WaterCosts[14] = {  CUACResultsRef[#U]:WaterCosts[13] / 365  }
   "Shift monthly water costs from 1-12 -> 3-14"    for:#U=(1to7)  CUAC:CUACResultsRef[#U]:WaterCosts[14] = {  CUACResultsRef[#U]:WaterCosts[12]  }
   "Shift monthly water costs from 1-12 -> 3-14"    for:#U=(1to7)  CUAC:CUACResultsRef[#U]:WaterCosts[13] = {  CUACResultsRef[#U]:WaterCosts[11]  }
   "Shift monthly water costs from 1-12 -> 3-14"    for:#U=(1to7)  CUAC:CUACResultsRef[#U]:WaterCosts[12] = {  CUACResultsRef[#U]:WaterCosts[10]  }
   "Shift monthly water costs from 1-12 -> 3-14"    for:#U=(1to7)  CUAC:CUACResultsRef[#U]:WaterCosts[11] = {  CUACResultsRef[#U]:WaterCosts[9]   }
   "Shift monthly water costs from 1-12 -> 3-14"    for:#U=(1to7)  CUAC:CUACResultsRef[#U]:WaterCosts[10] = {  CUACResultsRef[#U]:WaterCosts[8]   }
   "Shift monthly water costs from 1-12 -> 3-14"    for:#U=(1to7)  CUAC:CUACResultsRef[#U]:WaterCosts[9]  = {  CUACResultsRef[#U]:WaterCosts[7]   }
   "Shift monthly water costs from 1-12 -> 3-14"    for:#U=(1to7)  CUAC:CUACResultsRef[#U]:WaterCosts[8]  = {  CUACResultsRef[#U]:WaterCosts[6]   }
   "Shift monthly water costs from 1-12 -> 3-14"    for:#U=(1to7)  CUAC:CUACResultsRef[#U]:WaterCosts[7]  = {  CUACResultsRef[#U]:WaterCosts[5]   }
   "Shift monthly water costs from 1-12 -> 3-14"    for:#U=(1to7)  CUAC:CUACResultsRef[#U]:WaterCosts[6]  = {  CUACResultsRef[#U]:WaterCosts[4]   }
   "Shift monthly water costs from 1-12 -> 3-14"    for:#U=(1to7)  CUAC:CUACResultsRef[#U]:WaterCosts[5]  = {  CUACResultsRef[#U]:WaterCosts[3]   }
   "Shift monthly water costs from 1-12 -> 3-14"    for:#U=(1to7)  CUAC:CUACResultsRef[#U]:WaterCosts[4]  = {  CUACResultsRef[#U]:WaterCosts[2]   }
   "Shift monthly water costs from 1-12 -> 3-14"    for:#U=(1to7)  CUAC:CUACResultsRef[#U]:WaterCosts[3]  = {  CUACResultsRef[#U]:WaterCosts[1]   }
   "Set annual water cost"     for:#U=(1to7)
       CUAC:CUACResultsRef[#U]:WaterCosts[1] =
         {  CUACResultsRef[#U]:WaterCosts[3]  + CUACResultsRef[#U]:WaterCosts[4]  + CUACResultsRef[#U]:WaterCosts[5]  +
            CUACResultsRef[#U]:WaterCosts[6]  + CUACResultsRef[#U]:WaterCosts[7]  + CUACResultsRef[#U]:WaterCosts[8]  +
            CUACResultsRef[#U]:WaterCosts[9]  + CUACResultsRef[#U]:WaterCosts[10] + CUACResultsRef[#U]:WaterCosts[11] +
            CUACResultsRef[#U]:WaterCosts[12] + CUACResultsRef[#U]:WaterCosts[13] + CUACResultsRef[#U]:WaterCosts[14]  }
   "Set daily water cost"      for:#U=(1to7)
      CUAC:CUACResultsRef[#U]:WaterCosts[2] = {  CUACResultsRef[#U]:WaterCosts[1] / 12  }


   "Set Trash bill CUAC:CUACResultsRef[*]:MonthlyTrashCost"  for:#U=(1to7)   CUAC:CUACResultsRef[#U]:TrashMonthlyCost =     ; SAC 10/25/22
      {  if (TrashRateType > 0) then  ValidOr( TrashMonthlyCost, 0 )  else  0  endif  }

   ; ROUND average monthly and annual costs
   "Round CUAC:CUACResultsRef[*]:ElecCosts[2]  - monthly"   for:#U=(1to7)   CUAC:CUACResultsRef[#U]:ElecCosts[2]  = {  int( ( ValidOr( CUACResultsRef[#U]:ElecCosts[ 2], 0 ) * 100 )+0.5 ) / 100  }
   "Round CUAC:CUACResultsRef[*]:GasCosts[2]   - monthly"   for:#U=(1to7)   CUAC:CUACResultsRef[#U]:GasCosts[2]   = {  int( ( ValidOr( CUACResultsRef[#U]:GasCosts[  2], 0 ) * 100 )+0.5 ) / 100  }
   "Round CUAC:CUACResultsRef[*]:WaterCosts[2] - monthly"   for:#U=(1to7)   CUAC:CUACResultsRef[#U]:WaterCosts[2] = {  int( ( ValidOr( CUACResultsRef[#U]:WaterCosts[2], 0 ) * 100 )+0.5 ) / 100  }
   "Round CUAC:CUACResultsRef[*]:TrashMonthlyCost"          for:#U=(1to7)   CUAC:CUACResultsRef[#U]:TrashMonthlyCost  = {  int( ( ValidOr( CUACResultsRef[#U]:TrashMonthlyCost, 0 ) * 100 )+0.5 ) / 100  }

   "Round CUAC:CUACResultsRef[*]:ElecCosts[1]  - annual"    for:#U=(1to7)   CUAC:CUACResultsRef[#U]:ElecCosts[1]  = {  ValidOr( CUACResultsRef[#U]:ElecCosts[ 2], 0 ) * 12  }
   "Round CUAC:CUACResultsRef[*]:GasCosts[1]   - annual"    for:#U=(1to7)   CUAC:CUACResultsRef[#U]:GasCosts[1]   = {  ValidOr( CUACResultsRef[#U]:GasCosts[  2], 0 ) * 12  }
   "Round CUAC:CUACResultsRef[*]:WaterCosts[1] - annual"    for:#U=(1to7)   CUAC:CUACResultsRef[#U]:WaterCosts[1] = {  ValidOr( CUACResultsRef[#U]:WaterCosts[2], 0 ) * 12  }

   "Calc CUAC:CUACResultsRef[*]:TotCosts[2] - monthly"      for:#U=(1to7)   CUAC:CUACResultsRef[#U]:TotCosts[2] =
      {  CUACResultsRef[#U]:ElecCosts[2] + CUACResultsRef[#U]:GasCosts[2] + CUACResultsRef[#U]:WaterCosts[2] + CUACResultsRef[#U]:TrashMonthlyCost  }
   "Calc CUAC:CUACResultsRef[*]:TotCosts[1] - annual"       for:#U=(1to7)   CUAC:CUACResultsRef[#U]:TotCosts[1] = {  CUACResultsRef[#U]:TotCosts[2] * 12  }


   "Set CUAC:CUACResultsRef[*]:TotalElecUse[*]"    for:#U=(1to7)   for:#M=(1to14)   CUAC:CUACResultsRef[#U]:TotalElecUse[#M] =
      {  CUACResultsRef[#U]:CkgElecUse[#M]     + CUACResultsRef[#U]:ClgElecUse[#M]  + CUACResultsRef[#U]:DHWElecUse[#M]     + CUACResultsRef[#U]:DishElecUse[#M] +
         CUACResultsRef[#U]:DryerElecUse[#M]   + CUACResultsRef[#U]:HtgElecUse[#M]  + CUACResultsRef[#U]:IAQVentElecUse[#M] + CUACResultsRef[#U]:LtgElecUse[#M]  +
         CUACResultsRef[#U]:PlugLdsElecUse[#M] + CUACResultsRef[#U]:RfrgElecUse[#M] + CUACResultsRef[#U]:WashElecUse[#M]    + CUACResultsRef[#U]:PVSysElecUse[#M]  }
   "Set CUAC:CUACResultsRef[*]:TotalGasUse[*]"     for:#U=(1to7)   for:#M=(1to14)   CUAC:CUACResultsRef[#U]:TotalGasUse[#M] =
      {  CUACResultsRef[#U]:CkgGasUse[#M] + CUACResultsRef[#U]:DHWGasUse[#M] + CUACResultsRef[#U]:DryerGasUse[#M] + CUACResultsRef[#U]:HtgGasUse[#M]  }


   "Set CUAC:CUACResultsRef[*]:Allowances[1] - Htg Elec"      for:#U=(1to7)   CUAC:CUACResultsRef[#U]:Allowances[1] =
                                                         {  CUACResultsRef[#U]:ElecCosts[2] * CUACResultsRef[#U]:HtgElecUse[13] / ( CUACResultsRef[#U]:TotalElecUse[13] - CUACResultsRef[#U]:PVSysElecUse[13] )  }
   "Set CUAC:CUACResultsRef[*]:Allowances[2] - Htg Gas"       for:#U=(1to7)   CUAC:CUACResultsRef[#U]:Allowances[2] =
                                                         {  if (IfValidAnd( CUACResultsRef[#U]:TotalGasUse[13] > 0 )==0) then  0
                                                            else  CUACResultsRef[#U]:GasCosts[2] * CUACResultsRef[#U]:HtgGasUse[13] / CUACResultsRef[#U]:TotalGasUse[13]  endif  }

   "Set CUAC:CUACResultsRef[*]:Allowances[3] - Ckg Elec"      for:#U=(1to7)   CUAC:CUACResultsRef[#U]:Allowances[3] =
                                                         {  CUACResultsRef[#U]:ElecCosts[2] * CUACResultsRef[#U]:CkgElecUse[13] / ( CUACResultsRef[#U]:TotalElecUse[13] - CUACResultsRef[#U]:PVSysElecUse[13] )  }
   "Set CUAC:CUACResultsRef[*]:Allowances[4] - Ckg Gas"       for:#U=(1to7)   CUAC:CUACResultsRef[#U]:Allowances[4] =
                                                         {  if (IfValidAnd( CUACResultsRef[#U]:TotalGasUse[13] > 0 )==0) then  0
                                                            else  CUACResultsRef[#U]:GasCosts[2] * CUACResultsRef[#U]:CkgGasUse[13] / CUACResultsRef[#U]:TotalGasUse[13]  endif  }

   "Set CUAC:CUACResultsRef[*]:Allowances[5] - Ltg Elec"      for:#U=(1to7)   CUAC:CUACResultsRef[#U]:Allowances[5] =
                                                         {  CUACResultsRef[#U]:ElecCosts[2] * CUACResultsRef[#U]:LtgElecUse[13] / ( CUACResultsRef[#U]:TotalElecUse[13] - CUACResultsRef[#U]:PVSysElecUse[13] )  }

   "Set CUAC:CUACResultsRef[*]:Allowances[8] - Clg Elec"      for:#U=(1to7)   CUAC:CUACResultsRef[#U]:Allowances[8] =
                                                         {  CUACResultsRef[#U]:ElecCosts[2] * CUACResultsRef[#U]:ClgElecUse[13] / ( CUACResultsRef[#U]:TotalElecUse[13] - CUACResultsRef[#U]:PVSysElecUse[13] )  }

   "Set CUAC:CUACResultsRef[*]:Allowances[9]  - DHW Elec"     for:#U=(1to7)   CUAC:CUACResultsRef[#U]:Allowances[9] =
                                                         {  CUACResultsRef[#U]:ElecCosts[2] * CUACResultsRef[#U]:DHWElecUse[13] / ( CUACResultsRef[#U]:TotalElecUse[13] - CUACResultsRef[#U]:PVSysElecUse[13] )  }
   "Set CUAC:CUACResultsRef[*]:Allowances[10] - DHW Gas"      for:#U=(1to7)   CUAC:CUACResultsRef[#U]:Allowances[10] =
                                                         {  if (IfValidAnd( CUACResultsRef[#U]:TotalGasUse[13] > 0 )==0) then  0
                                                            else  CUACResultsRef[#U]:GasCosts[2] * CUACResultsRef[#U]:DHWGasUse[13] / CUACResultsRef[#U]:TotalGasUse[13]  endif  }

   "Set CUAC:CUACResultsRef[*]:Allowances[6] - Other Elec"   for:#U=(1to7)   CUAC:CUACResultsRef[#U]:Allowances[6] =
      {  CUACResultsRef[#U]:ElecCosts[2] - ( CUACResultsRef[#U]:Allowances[1] + CUACResultsRef[#U]:Allowances[3] + CUACResultsRef[#U]:Allowances[5] + CUACResultsRef[#U]:Allowances[8] + CUACResultsRef[#U]:Allowances[9] )  }
   "Set CUAC:CUACResultsRef[*]:Allowances[7] - Other Gas"    for:#U=(1to7)   CUAC:CUACResultsRef[#U]:Allowances[7] =
      {  CUACResultsRef[#U]:GasCosts[2]  - ( CUACResultsRef[#U]:Allowances[2] + CUACResultsRef[#U]:Allowances[4] + CUACResultsRef[#U]:Allowances[10] )  }

   "Set CUAC:CUACResultsRef[*]:Allowances[11] - Water"       for:#U=(1to7)   CUAC:CUACResultsRef[#U]:Allowances[11] = {  CUACResultsRef[#U]:WaterCosts[2]  }
   "Set CUAC:CUACResultsRef[*]:Allowances[12] - Sewer"       for:#U=(1to7)   CUAC:CUACResultsRef[#U]:Allowances[12] = {  0  }
   "Set CUAC:CUACResultsRef[*]:Allowances[13] - Trash"       for:#U=(1to7)   CUAC:CUACResultsRef[#U]:Allowances[13] =            ; prevent reporting of trash costs when TrashRateType = "Not Paid..." - SAC 09/14/23
      {  if (TrashRateType < 1) then  0
         else  ValidOr( TrashMonthlyCost, 0 )  endif  }

; TESTING
;         "store properties to be marked 'defaults' (to avoid file storage)"  CUAC:Action = { EvalRulelist( "CUAC_FinalCalcs_Defaulted", 1 ) }   ; SAC 09/20/23
;      END
;      ;************************************************************************* SAC 09/20/23
;      RULELIST "CUAC_FinalCalcs_Defaulted" 1 0 0 0
   ; setup path/filename of in/out CSV file here so that it can be checked for writeability before being opened and written via CUAC_WriteInputOutputCSV rules - SAC 10/20/22
   "Set CUAC:InOutCSVPathFile"   CUAC:InOutCSVPathFile = {  Proj:ModelPath + Proj:ModelFile + " - CUAC.csv"  }

   "Set CUAC:SubmitPDFPathFile"     CUAC:SubmitPDFPathFile =      ; SAC 10/27/22
      {  switch (RptOption)
            case  1 :  Proj:ModelPath + Proj:ModelFile + " - CUAC Draft Submittal.pdf"
            case  2 :  Proj:ModelPath + Proj:ModelFile + " - CUAC Final Submittal.pdf"
            case  3 :  Proj:ModelPath + Proj:ModelFile + " - CUAC Annual Submittal.pdf"
            default :  UNDEFINED
         endswitch  }
   "Set CUAC:DetailsPDFPathFile"    CUAC:DetailsPDFPathFile =  
      {  switch (RptOption)
            case  1 :  Proj:ModelPath + Proj:ModelFile + " - CUAC Draft Details.pdf"
            case  2 :  Proj:ModelPath + Proj:ModelFile + " - CUAC Final Details.pdf"
            case  3 :  Proj:ModelPath + Proj:ModelFile + " - CUAC Annual Details.pdf"
            default :  UNDEFINED
         endswitch  }
END
;************************************************************************* SAC 09/20/23
RULELIST "CUAC_FinalCalcs_Defaulted" 1 0 0 0
   "Set Jan Days"  CUAC:DaysInMonth[1]  = { 31 }
   "Set Feb Days"  CUAC:DaysInMonth[2]  = { 28 }
   "Set Mar Days"  CUAC:DaysInMonth[3]  = { 31 }
   "Set Apr Days"  CUAC:DaysInMonth[4]  = { 30 }
   "Set May Days"  CUAC:DaysInMonth[5]  = { 31 }
   "Set Jun Days"  CUAC:DaysInMonth[6]  = { 30 }
   "Set Jul Days"  CUAC:DaysInMonth[7]  = { 31 }
   "Set Aug Days"  CUAC:DaysInMonth[8]  = { 31 }
   "Set Sep Days"  CUAC:DaysInMonth[9]  = { 30 }
   "Set Oct Days"  CUAC:DaysInMonth[10] = { 31 }
   "Set Nov Days"  CUAC:DaysInMonth[11] = { 30 }
   "Set Dec Days"  CUAC:DaysInMonth[12] = { 31 }
END
;*************************************************************************


;************************************************************************* SAC 10/20/22
RULELIST "CUAC_WriteInputOutputCSV" 1 0 0 0
;*************************************************************************
   "Open CUAC InOutCSVPathFile CSV file"  CUAC:InOutCSVFileIdx  = {  OpenExportFile( InOutCSVPathFile, "wt" )  }

   "Set CUAC:ModelPathFwdSlash"                       CUAC:ModelPathFwdSlash = {  ValidOr( Proj:ModelPath, "" )  }
   "Replace '\' w/ '/' in CUAC:ModelPathFwdSlash"     CUAC:ModelPathFwdSlash = {  ReplaceInString( "\", "/" )  }

;   "Write CUAC I/O CSV Header-1"    CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, "10,1,Row/Col hourly use data begin\n" )  }
   "Write CUAC I/O CSV Header-2"    CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, "1,format index\n" )  }    ; increment w/ each CHANGE to file contents/organization
   "Write CUAC I/O CSV Header-3"    CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, "CUAC Analysis Inputs and Results Report\n" )  }
   "Write CUAC I/O CSV Header-4"    CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, ",Software:,%c%s%c\n",     34, ValidOr( Proj:SoftwareVersion,    "" ), 34 )  }
   "Write CUAC I/O CSV Header-5"    CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, ",Ruleset:,%c%s%c\n",      34, ValidOr( Proj:CompManagerVersion, "" ), 34 )  }
   "Write CUAC I/O CSV Header-6"    CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, ",CSE:,%c%s%c\n",          34, ValidOr( Proj:DHWSimEngVersion,   "" ), 34 )  }
   "Write CUAC I/O CSV Header-7"    CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, "Run Title:,,%c%s%c\n",    34, ValidOr( Proj:RunTitle,           "" ), 34 )  }
   "Write CUAC I/O CSV Header-8"    CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, "Run Date/Time:,,%s\n",        ValidOr( Proj:RunDateISO,   "" ) )  }
   "Write CUAC I/O CSV Header-9"    CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, "Model File:,,%c%s%s%c\n", 34, ValidOr( ModelPathFwdSlash, "" ), ValidOr( Proj:ModelFile, "" ), 34 )  }
   "Write CUAC I/O CSV Header-10"   CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, "Weather File:,,%c%s%c\n", 34, ValidOr( Proj:AnnualWeatherFileNoPath, "" ), 34 )  }

   "Set CUAC:UnitTypeLabels[1]"  CUAC:UnitTypeLabels[1] = { if (IfValidAnd( AffordableUnitsByBedrms[1] > 0 )==0) then  UNDEFINED  else  "Studio"     endif  }
   "Set CUAC:UnitTypeLabels[2]"  CUAC:UnitTypeLabels[2] = { if (IfValidAnd( AffordableUnitsByBedrms[2] > 0 )==0) then  UNDEFINED  else  "1 Bedroom"  endif  }
   "Set CUAC:UnitTypeLabels[3]"  CUAC:UnitTypeLabels[3] = { if (IfValidAnd( AffordableUnitsByBedrms[3] > 0 )==0) then  UNDEFINED  else  "2 Bedroom"  endif  }
   "Set CUAC:UnitTypeLabels[4]"  CUAC:UnitTypeLabels[4] = { if (IfValidAnd( AffordableUnitsByBedrms[4] > 0 )==0) then  UNDEFINED  else  "3 Bedroom"  endif  }
   "Set CUAC:UnitTypeLabels[5]"  CUAC:UnitTypeLabels[5] = { if (IfValidAnd( AffordableUnitsByBedrms[5] > 0 )==0) then  UNDEFINED  else  "4 Bedroom"  endif  }
   "Set CUAC:UnitTypeLabels[6]"  CUAC:UnitTypeLabels[6] = { if (IfValidAnd( AffordableUnitsByBedrms[6] > 0 )==0) then  UNDEFINED  else  "5 Bedroom"  endif  }
   "Set CUAC:UnitTypeLabels[7]"  CUAC:UnitTypeLabels[7] = { if (IfValidAnd( AffordableUnitsByBedrms[7] > 0 )==0) then  UNDEFINED  else  "6 Bedroom"  endif  }

   "Write CUAC I/O CSV inputs"   CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, "\nAnalysis Inputs:\n" )  }
   "Write CUAC I/O CSV inputs"   CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, ",# Affordable Units by Type:\n" )  }
   "Write CUAC I/O CSV inputs"  for:#U=(1to7)  CUAC:Action = { if (IfValidAnd( AffordableUnitsByBedrms[#U] > 0 )==0) then  UNCHANGED
                                                               else  WriteToExportFile( InOutCSVFileIdx, ",,%s,,%g\n", UnitTypeLabels[#U], AffordableUnitsByBedrms[#U] )  endif  }
   "Write CUAC I/O CSV inputs"                 CUAC:Action = { if (IfValidAnd( NumAffordableDwellingUnits > 0 )==0) then  UNCHANGED
                                                               else  WriteToExportFile( InOutCSVFileIdx, ",,  Total,,%g\n", NumAffordableDwellingUnits )  endif  }

      ; updated ElecTerritory & ElecTariff to G2* - SAC 09/11/23
   "Write CUAC I/O CSV inputs"   CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, ",Electric Utility:,,%c%s%c,,,,,,Territory:,%c%s%c,,,Tariff:,%c%s%c\n",
                                                               34, EnumString( ElecUtility ), 34, 34, EnumString( G2ElecTerritory ), 34, 34, EnumString( G2ElecTariff ), 34 )  }

      ; updated GasTerritory & GasTariff to G2* - SAC 09/11/23
   "Write CUAC I/O CSV inputs"   CUAC:Action  = {  if (GasUtility > 998)
                                                   then  WriteToExportFile( InOutCSVFileIdx, ",Gas Utility:,,%c%s%c,\n", 34, EnumString( GasUtility ), 34 )
                                                   else  WriteToExportFile( InOutCSVFileIdx, ",Gas Utility:,,%c%s%c,,,,,,Territory:,%c%s%c,,,Tariff:,%c%s%c\n",
                                                               34, EnumString( GasUtility ), 34, 34, EnumString( G2GasTerritory ), 34, 34, EnumString( G2GasTariff ), 34 )  endif  }

   "Write CUAC I/O CSV inputs"   CUAC:Action  = {  switch (WaterRateType)
                                                      case  0 :  WriteToExportFile( InOutCSVFileIdx, ",Water Bill:,,%c%s%c,\n", 34, EnumString( WaterRateType ), 34 )
                                                      case  1 :  WriteToExportFile( InOutCSVFileIdx, ",Water Bill:,,%c%s%c,,,Monthly:,%g,$/mo,\n",
                                                                        34, EnumString( WaterRateType ), 34, WaterMonthlyCost )
                                                      case  2 :  WriteToExportFile( InOutCSVFileIdx, ",Water Bill:,,%c%s%c,,,Monthly:,%g,$/mo,,Usage:,%g,$/gal\n",
                                                                        34, EnumString( WaterRateType ), 34, WaterMonthlyCost, WaterVolumeCost )
                                                      default :  WriteToExportFile( InOutCSVFileIdx, ",Water Bill:,,(not recognized),\n" )
                                                   endswitch  }

   "Write CUAC I/O CSV inputs"   CUAC:Action  = {  switch (TrashRateType)
                                                      case  0 :  WriteToExportFile( InOutCSVFileIdx, ",Trash Bill:,,%c%s%c,\n", 34, EnumString( TrashRateType ), 34 )
                                                      case  1 :  WriteToExportFile( InOutCSVFileIdx, ",Trash Bill:,,%c%s%c,,,Monthly:,%g,$/mo,\n",
                                                                        34, EnumString( TrashRateType ), 34, TrashMonthlyCost )
                                                      default :  WriteToExportFile( InOutCSVFileIdx, ",Trash Bill:,,(not recognized),\n" )
                                                   endswitch  }

      ; SAC 10/03/23
   "Write CUAC I/O CSV inputs - CmSlr" CUAC:Action  = {  if (IfValidAnd( UseCommunitySolar > 0 )==0 .OR. IfValidAnd( TotCommunitySolarSize > 0 )==0)
                                                         then  WriteToExportFile( InOutCSVFileIdx, ",Community Solar:,,none\n" )
                                                         else  WriteToExportFile( InOutCSVFileIdx, ",Community Solar allocated to Affordable Units:,,,,,%g,kW,,Project:,%s\n", TotCommunitySolarSize, EnumString( CommunitySolarProject ) )  endif  }

   "Write CUAC I/O CSV inputs - PV"    CUAC:Action  = {  if (IfValidAnd( ShowPVBattInputs > 0 )==0 .OR. IfValidAnd( PVSizeSum > 0 )==0) then  UNCHANGED
                                                         else if (IfValidAnd( UseCommunitySolar > 0 )==0 .OR. IfValidAnd( TotCommunitySolarSize > 0 )==0)
                                                         then  WriteToExportFile( InOutCSVFileIdx, ",On-site PV System(s) serving Affordable Units:,,,,,%g,kW,%s\n", AffordablePVDCSysSize, AffordablePVMsg )
                                                         else  WriteToExportFile( InOutCSVFileIdx, ",On-site PV System(s) serving Affordable Units:,,,,,,(overridden by Community Solar)\n" )  endif endif  }
; removed from CUAC battery from calcs - SAC 12/07/22
;   "Write CUAC I/O CSV inputs - Batt"  CUAC:Action  = {  if (IfValidAnd( ShowPVBattInputs > 0 )==0 .OR. IfValidAnd( BattSizeSum > 0 )==0) then  UNCHANGED
;                                                         else  WriteToExportFile( InOutCSVFileIdx, ",Portion of Battery System(s) serving Affordable Units:,,,,,%g,kWh,%s\n", AffordableBattMaxCap, AffordableBattMsg )  endif  }


   "Write CUAC I/O CSV results"  CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, "\nAnalysis Results:\n" )  }

      ; added Community Solar details to right of main allowances table - SAC 10/03/23
   "Write CUAC I/O CSV results"  CUAC:Action  = {  if (IfValidAnd( UseCommunitySolar > 0 )==0 .OR. IfValidAnd( TotCommunitySolarSize > 0 )==0) then  UNCHANGED
                                                   else  WriteToExportFile( InOutCSVFileIdx, ",,,,,,,,,,,,,,Allocated,Monthly\n" )  endif  }

   "Write CUAC I/O CSV results"  CUAC:Action  = {  if (IfValidAnd( UseCommunitySolar > 0 )==0 .OR. IfValidAnd( TotCommunitySolarSize > 0 )==0)
                                                   then  WriteToExportFile( InOutCSVFileIdx, ",,Unit Type,,Electric,Gas,Water,Trash,Total\n" )
                                                   else  WriteToExportFile( InOutCSVFileIdx, ",,Unit Type,,Electric,Gas,Water,Trash,Total,,,,UnitType,,per Unit,Credit\n" )  endif  }
   "Write CUAC I/O CSV results"  CUAC:Action  = {  if (IfValidAnd( UseCommunitySolar > 0 )==0 .OR. IfValidAnd( TotCommunitySolarSize > 0 )==0)
                                                   then  WriteToExportFile( InOutCSVFileIdx, ",Monthly Usage ($):\n" )
                                                   else  WriteToExportFile( InOutCSVFileIdx, ",Monthly Usage ($):,,,,,,,,,,Community Solar:,,,(kW PV),($)\n" )  endif  }
   "Write CUAC I/O CSV results"  for:#U=(1to7)   CUAC:Action =
               {  if (IfValidAnd( AffordableUnitsByBedrms[#U] > 0 )==0 .OR. LocalCompAssigned( CUACResultsRef[#U] ) < 1) then  UNCHANGED
                  else if (IfValidAnd( UseCommunitySolar > 0 )==0 .OR. IfValidAnd( TotCommunitySolarSize > 0 )==0)
                  then  WriteToExportFile( InOutCSVFileIdx, ",,%s,,%.2f,%.2f,%.2f,%.2f,%.2f\n",                  UnitTypeLabels[#U],  CUACResultsRef[#U]:ElecCosts[2],  
                              CUACResultsRef[#U]:GasCosts[2], CUACResultsRef[#U]:WaterCosts[2], CUACResultsRef[#U]:TrashMonthlyCost,  CUACResultsRef[#U]:TotCosts[2]  )
                  else  WriteToExportFile( InOutCSVFileIdx, ",,%s,,%.2f,%.2f,%.2f,%.2f,%.2f,,,,%s,,%g,%.2f\n",   UnitTypeLabels[#U],  CUACResultsRef[#U]:ElecCosts[2],  
                              CUACResultsRef[#U]:GasCosts[2], CUACResultsRef[#U]:WaterCosts[2], CUACResultsRef[#U]:TrashMonthlyCost,  CUACResultsRef[#U]:TotCosts[2],
                              UnitTypeLabels[#U], ValidOr( CommunitySolarSizeByBedrms[#U], 0 ), ValidOr( CommunitySolarAnnCreditByBedrms[#U], 0 )/12  )  endif endif  }

   "Write CUAC I/O CSV results"  CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, "\n,,Unit Type,,Heating,,Cooking,,Lighting,Other,,Air Conditioning,Water Heating,,Water,Sewer,Trash\n" )  }
   "Write CUAC I/O CSV results"  CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, ",Monthly Allowance ($):,,,Electric,Gas,Electric,Gas,Electric,Electric,Gas,Electric,Electric,Gas,Water,Sewer,Trash\n" )  }
   "Write CUAC I/O CSV results"  for:#U=(1to7)   CUAC:Action =
               {  if (IfValidAnd( AffordableUnitsByBedrms[#U] > 0 )==0 .OR. LocalCompAssigned( CUACResultsRef[#U] ) < 1) then  UNCHANGED
                  else  WriteToExportFile( InOutCSVFileIdx, ",,%s,,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n",   UnitTypeLabels[#U],         CUACResultsRef[#U]:Allowances[1], CUACResultsRef[#U]:Allowances[2],
                           CUACResultsRef[#U]:Allowances[3], CUACResultsRef[#U]:Allowances[4],  CUACResultsRef[#U]:Allowances[5],  CUACResultsRef[#U]:Allowances[6],  CUACResultsRef[#U]:Allowances[7], CUACResultsRef[#U]:Allowances[8],
                           CUACResultsRef[#U]:Allowances[9], CUACResultsRef[#U]:Allowances[10], CUACResultsRef[#U]:Allowances[11], CUACResultsRef[#U]:Allowances[12], CUACResultsRef[#U]:Allowances[13]  )  endif  }

   "Write CUAC I/O CSV results"  CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, "\n,,Unit Type,,Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,,Total\n" )  }
   "Write CUAC I/O CSV results"  CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, ",Cooling kWh Usage:\n" )  }
   "Write CUAC I/O CSV results"  for:#U=(1to7)   CUAC:Action =
               {  if (IfValidAnd( AffordableUnitsByBedrms[#U] > 0 )==0 .OR. LocalCompAssigned( CUACResultsRef[#U] ) < 1) then  UNCHANGED
                  else  WriteToExportFile( InOutCSVFileIdx, ",,%s,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,,%.0f\n", UnitTypeLabels[#U],            CUACResultsRef[#U]:ClgElecUse[1],  
                              CUACResultsRef[#U]:ClgElecUse[2], CUACResultsRef[#U]:ClgElecUse[3], CUACResultsRef[#U]:ClgElecUse[4],  CUACResultsRef[#U]:ClgElecUse[5],  CUACResultsRef[#U]:ClgElecUse[6],  CUACResultsRef[#U]:ClgElecUse[7],
                              CUACResultsRef[#U]:ClgElecUse[8], CUACResultsRef[#U]:ClgElecUse[9], CUACResultsRef[#U]:ClgElecUse[10], CUACResultsRef[#U]:ClgElecUse[11], CUACResultsRef[#U]:ClgElecUse[12], CUACResultsRef[#U]:ClgElecUse[13] )  endif  }

   "Write CUAC I/O CSV results"  CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, ",Heating kWh Usage:\n" )  }
   "Write CUAC I/O CSV results"  for:#U=(1to7)   CUAC:Action =
               {  if (IfValidAnd( AffordableUnitsByBedrms[#U] > 0 )==0 .OR. LocalCompAssigned( CUACResultsRef[#U] ) < 1) then  UNCHANGED
                  else  WriteToExportFile( InOutCSVFileIdx, ",,%s,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,,%.0f\n", UnitTypeLabels[#U],            CUACResultsRef[#U]:HtgElecUse[1],  
                              CUACResultsRef[#U]:HtgElecUse[2], CUACResultsRef[#U]:HtgElecUse[3], CUACResultsRef[#U]:HtgElecUse[4],  CUACResultsRef[#U]:HtgElecUse[5],  CUACResultsRef[#U]:HtgElecUse[6],  CUACResultsRef[#U]:HtgElecUse[7],
                              CUACResultsRef[#U]:HtgElecUse[8], CUACResultsRef[#U]:HtgElecUse[9], CUACResultsRef[#U]:HtgElecUse[10], CUACResultsRef[#U]:HtgElecUse[11], CUACResultsRef[#U]:HtgElecUse[12], CUACResultsRef[#U]:HtgElecUse[13] )  endif  }

   "Write CUAC I/O CSV results"  CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, ",Heating kBtu Usage:\n" )  }
   "Write CUAC I/O CSV results"  for:#U=(1to7)   CUAC:Action =
               {  if (IfValidAnd( AffordableUnitsByBedrms[#U] > 0 )==0 .OR. LocalCompAssigned( CUACResultsRef[#U] ) < 1) then  UNCHANGED
                  else  WriteToExportFile( InOutCSVFileIdx, ",,%s,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,,%.0f\n", UnitTypeLabels[#U],        CUACResultsRef[#U]:HtgGasUse[1],  
                              CUACResultsRef[#U]:HtgGasUse[2], CUACResultsRef[#U]:HtgGasUse[3], CUACResultsRef[#U]:HtgGasUse[4],  CUACResultsRef[#U]:HtgGasUse[5],  CUACResultsRef[#U]:HtgGasUse[6],  CUACResultsRef[#U]:HtgGasUse[7],
                              CUACResultsRef[#U]:HtgGasUse[8], CUACResultsRef[#U]:HtgGasUse[9], CUACResultsRef[#U]:HtgGasUse[10], CUACResultsRef[#U]:HtgGasUse[11], CUACResultsRef[#U]:HtgGasUse[12], CUACResultsRef[#U]:HtgGasUse[13] )  endif  }

   "Write CUAC I/O CSV results"  CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, ",Water Heating kWh Usage:\n" )  }
   "Write CUAC I/O CSV results"  for:#U=(1to7)   CUAC:Action =
               {  if (IfValidAnd( AffordableUnitsByBedrms[#U] > 0 )==0 .OR. LocalCompAssigned( CUACResultsRef[#U] ) < 1) then  UNCHANGED
                  else  WriteToExportFile( InOutCSVFileIdx, ",,%s,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,,%.0f\n", UnitTypeLabels[#U],            CUACResultsRef[#U]:DHWElecUse[1],  
                              CUACResultsRef[#U]:DHWElecUse[2], CUACResultsRef[#U]:DHWElecUse[3], CUACResultsRef[#U]:DHWElecUse[4],  CUACResultsRef[#U]:DHWElecUse[5],  CUACResultsRef[#U]:DHWElecUse[6],  CUACResultsRef[#U]:DHWElecUse[7],
                              CUACResultsRef[#U]:DHWElecUse[8], CUACResultsRef[#U]:DHWElecUse[9], CUACResultsRef[#U]:DHWElecUse[10], CUACResultsRef[#U]:DHWElecUse[11], CUACResultsRef[#U]:DHWElecUse[12], CUACResultsRef[#U]:DHWElecUse[13] )  endif  }

   "Write CUAC I/O CSV results"  CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, ",Water Heating kBtu Usage:\n" )  }
   "Write CUAC I/O CSV results"  for:#U=(1to7)   CUAC:Action =
               {  if (IfValidAnd( AffordableUnitsByBedrms[#U] > 0 )==0 .OR. LocalCompAssigned( CUACResultsRef[#U] ) < 1) then  UNCHANGED
                  else  WriteToExportFile( InOutCSVFileIdx, ",,%s,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,,%.0f\n", UnitTypeLabels[#U],        CUACResultsRef[#U]:DHWGasUse[1],  
                              CUACResultsRef[#U]:DHWGasUse[2], CUACResultsRef[#U]:DHWGasUse[3], CUACResultsRef[#U]:DHWGasUse[4],  CUACResultsRef[#U]:DHWGasUse[5],  CUACResultsRef[#U]:DHWGasUse[6],  CUACResultsRef[#U]:DHWGasUse[7],
                              CUACResultsRef[#U]:DHWGasUse[8], CUACResultsRef[#U]:DHWGasUse[9], CUACResultsRef[#U]:DHWGasUse[10], CUACResultsRef[#U]:DHWGasUse[11], CUACResultsRef[#U]:DHWGasUse[12], CUACResultsRef[#U]:DHWGasUse[13] )  endif  }

   "Write CUAC I/O CSV results"  CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, ",Photovoltaic kWh Generated On-site:\n" )  }
   "Write CUAC I/O CSV results"  for:#U=(1to7)   CUAC:Action =
               {  if (IfValidAnd( AffordableUnitsByBedrms[#U] > 0 )==0 .OR. LocalCompAssigned( CUACResultsRef[#U] ) < 1) then  UNCHANGED
                  else  WriteToExportFile( InOutCSVFileIdx, ",,%s,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,,%.0f\n", UnitTypeLabels[#U],                                        abs(CUACResultsRef[#U]:PVSysElecUse[1]),  
                              abs(CUACResultsRef[#U]:PVSysElecUse[2]), abs(CUACResultsRef[#U]:PVSysElecUse[3]), abs(CUACResultsRef[#U]:PVSysElecUse[4]),  abs(CUACResultsRef[#U]:PVSysElecUse[5]),  abs(CUACResultsRef[#U]:PVSysElecUse[6]),  abs(CUACResultsRef[#U]:PVSysElecUse[7]),
                              abs(CUACResultsRef[#U]:PVSysElecUse[8]), abs(CUACResultsRef[#U]:PVSysElecUse[9]), abs(CUACResultsRef[#U]:PVSysElecUse[10]), abs(CUACResultsRef[#U]:PVSysElecUse[11]), abs(CUACResultsRef[#U]:PVSysElecUse[12]), abs(CUACResultsRef[#U]:PVSysElecUse[13]) )  endif  }

   "Write CUAC I/O CSV results"  CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, "\n,Electric kWh Usage by End Use:\n" )  }
   "Write CUAC I/O CSV results"  CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, ",,Unit,End Use,Daily Avg,Total,,Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\n" )  }
   "Write CUAC I/O CSV results" for:#U=(1to7)  CUAC:Action  = {   if (IfValidAnd( AffordableUnitsByBedrms[#U] > 0 )==0 .OR. LocalCompAssigned( CUACResultsRef[#U] ) < 1) then  UNCHANGED
                                                                  else  EvalRulelist( "CUAC_WriteInputOutputCSV_ElecEndUse_#U" )  endif  }

   "Write CUAC I/O CSV results"  CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, "\n,Gas kBtu Usage by End Use:\n" )  }
   "Write CUAC I/O CSV results"  CUAC:Action  = {  WriteToExportFile( InOutCSVFileIdx, ",,Unit,End Use,Daily Avg,Total,,Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\n" )  }
   "Write CUAC I/O CSV results" for:#U=(1to7)  CUAC:Action  = {   if (IfValidAnd( AffordableUnitsByBedrms[#U] > 0 )==0 .OR. LocalCompAssigned( CUACResultsRef[#U] ) < 1) then  UNCHANGED
                                                                  else  EvalRulelist( "CUAC_WriteInputOutputCSV_GasEndUse_#U" )  endif  }

      ; avoid writing hourly sim results label for Old (monthly energy use) projects - SAC 09/20/23
   "Write CUAC I/O CSV results"  CUAC:Action  = {  if (IfValidAnd( CUAC_OldAccessDB > 0 )) then  UNCHANGED
                                                   else  WriteToExportFile( InOutCSVFileIdx, "\nHourly Simulation Results:\n" )  endif  }

   "Close CUAC I/O CSV file"     CUAC:Action = {  CloseExportFile( InOutCSVFileIdx )  }
END
;*************************************************************************

;************************************************************************* SAC 10/20/22
RULELIST "CUAC_WriteInputOutputCSV_ElecEndUse_1" 1 0 0 0
   "Write CUAC I/O CSV results"  for:#U=(1to1)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,%s,Cooking,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",     UnitTypeLabels[#U], CUACResultsRef[#U]:CkgElecUse[14], CUACResultsRef[#U]:CkgElecUse[13],
                              CUACResultsRef[#U]:CkgElecUse[1], CUACResultsRef[#U]:CkgElecUse[2], CUACResultsRef[#U]:CkgElecUse[3], CUACResultsRef[#U]:CkgElecUse[4],  CUACResultsRef[#U]:CkgElecUse[5],  CUACResultsRef[#U]:CkgElecUse[6],
                              CUACResultsRef[#U]:CkgElecUse[7], CUACResultsRef[#U]:CkgElecUse[8], CUACResultsRef[#U]:CkgElecUse[9], CUACResultsRef[#U]:CkgElecUse[10], CUACResultsRef[#U]:CkgElecUse[11], CUACResultsRef[#U]:CkgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(1to1)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Cooling,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                           CUACResultsRef[#U]:ClgElecUse[14], CUACResultsRef[#U]:ClgElecUse[13],
                              CUACResultsRef[#U]:ClgElecUse[1], CUACResultsRef[#U]:ClgElecUse[2], CUACResultsRef[#U]:ClgElecUse[3], CUACResultsRef[#U]:ClgElecUse[4],  CUACResultsRef[#U]:ClgElecUse[5],  CUACResultsRef[#U]:ClgElecUse[6],
                              CUACResultsRef[#U]:ClgElecUse[7], CUACResultsRef[#U]:ClgElecUse[8], CUACResultsRef[#U]:ClgElecUse[9], CUACResultsRef[#U]:ClgElecUse[10], CUACResultsRef[#U]:ClgElecUse[11], CUACResultsRef[#U]:ClgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(1to1)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,DHW,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                               CUACResultsRef[#U]:DHWElecUse[14], CUACResultsRef[#U]:DHWElecUse[13],
                              CUACResultsRef[#U]:DHWElecUse[1], CUACResultsRef[#U]:DHWElecUse[2], CUACResultsRef[#U]:DHWElecUse[3], CUACResultsRef[#U]:DHWElecUse[4],  CUACResultsRef[#U]:DHWElecUse[5],  CUACResultsRef[#U]:DHWElecUse[6],
                              CUACResultsRef[#U]:DHWElecUse[7], CUACResultsRef[#U]:DHWElecUse[8], CUACResultsRef[#U]:DHWElecUse[9], CUACResultsRef[#U]:DHWElecUse[10], CUACResultsRef[#U]:DHWElecUse[11], CUACResultsRef[#U]:DHWElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(1to1)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Dishwasher,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                            CUACResultsRef[#U]:DishElecUse[14], CUACResultsRef[#U]:DishElecUse[13],
                              CUACResultsRef[#U]:DishElecUse[1], CUACResultsRef[#U]:DishElecUse[2], CUACResultsRef[#U]:DishElecUse[3], CUACResultsRef[#U]:DishElecUse[4],  CUACResultsRef[#U]:DishElecUse[5],  CUACResultsRef[#U]:DishElecUse[6],
                              CUACResultsRef[#U]:DishElecUse[7], CUACResultsRef[#U]:DishElecUse[8], CUACResultsRef[#U]:DishElecUse[9], CUACResultsRef[#U]:DishElecUse[10], CUACResultsRef[#U]:DishElecUse[11], CUACResultsRef[#U]:DishElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(1to1)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Dryer,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                     CUACResultsRef[#U]:DryerElecUse[14], CUACResultsRef[#U]:DryerElecUse[13],
                              CUACResultsRef[#U]:DryerElecUse[1], CUACResultsRef[#U]:DryerElecUse[2], CUACResultsRef[#U]:DryerElecUse[3], CUACResultsRef[#U]:DryerElecUse[4],  CUACResultsRef[#U]:DryerElecUse[5],  CUACResultsRef[#U]:DryerElecUse[6],
                              CUACResultsRef[#U]:DryerElecUse[7], CUACResultsRef[#U]:DryerElecUse[8], CUACResultsRef[#U]:DryerElecUse[9], CUACResultsRef[#U]:DryerElecUse[10], CUACResultsRef[#U]:DryerElecUse[11], CUACResultsRef[#U]:DryerElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(1to1)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Heating,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                           CUACResultsRef[#U]:HtgElecUse[14], CUACResultsRef[#U]:HtgElecUse[13],
                              CUACResultsRef[#U]:HtgElecUse[1], CUACResultsRef[#U]:HtgElecUse[2], CUACResultsRef[#U]:HtgElecUse[3], CUACResultsRef[#U]:HtgElecUse[4],  CUACResultsRef[#U]:HtgElecUse[5],  CUACResultsRef[#U]:HtgElecUse[6],
                              CUACResultsRef[#U]:HtgElecUse[7], CUACResultsRef[#U]:HtgElecUse[8], CUACResultsRef[#U]:HtgElecUse[9], CUACResultsRef[#U]:HtgElecUse[10], CUACResultsRef[#U]:HtgElecUse[11], CUACResultsRef[#U]:HtgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(1to1)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,IAQ Ventilation,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                   CUACResultsRef[#U]:IAQVentElecUse[14], CUACResultsRef[#U]:IAQVentElecUse[13],
                              CUACResultsRef[#U]:IAQVentElecUse[1], CUACResultsRef[#U]:IAQVentElecUse[2], CUACResultsRef[#U]:IAQVentElecUse[3], CUACResultsRef[#U]:IAQVentElecUse[4],  CUACResultsRef[#U]:IAQVentElecUse[5],  CUACResultsRef[#U]:IAQVentElecUse[6],
                              CUACResultsRef[#U]:IAQVentElecUse[7], CUACResultsRef[#U]:IAQVentElecUse[8], CUACResultsRef[#U]:IAQVentElecUse[9], CUACResultsRef[#U]:IAQVentElecUse[10], CUACResultsRef[#U]:IAQVentElecUse[11], CUACResultsRef[#U]:IAQVentElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(1to1)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Lighting,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                          CUACResultsRef[#U]:LtgElecUse[14], CUACResultsRef[#U]:LtgElecUse[13],
                              CUACResultsRef[#U]:LtgElecUse[1], CUACResultsRef[#U]:LtgElecUse[2], CUACResultsRef[#U]:LtgElecUse[3], CUACResultsRef[#U]:LtgElecUse[4],  CUACResultsRef[#U]:LtgElecUse[5],  CUACResultsRef[#U]:LtgElecUse[6],
                              CUACResultsRef[#U]:LtgElecUse[7], CUACResultsRef[#U]:LtgElecUse[8], CUACResultsRef[#U]:LtgElecUse[9], CUACResultsRef[#U]:LtgElecUse[10], CUACResultsRef[#U]:LtgElecUse[11], CUACResultsRef[#U]:LtgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(1to1)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Plug Loads,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                        CUACResultsRef[#U]:PlugLdsElecUse[14], CUACResultsRef[#U]:PlugLdsElecUse[13],
                              CUACResultsRef[#U]:PlugLdsElecUse[1], CUACResultsRef[#U]:PlugLdsElecUse[2], CUACResultsRef[#U]:PlugLdsElecUse[3], CUACResultsRef[#U]:PlugLdsElecUse[4],  CUACResultsRef[#U]:PlugLdsElecUse[5],  CUACResultsRef[#U]:PlugLdsElecUse[6],
                              CUACResultsRef[#U]:PlugLdsElecUse[7], CUACResultsRef[#U]:PlugLdsElecUse[8], CUACResultsRef[#U]:PlugLdsElecUse[9], CUACResultsRef[#U]:PlugLdsElecUse[10], CUACResultsRef[#U]:PlugLdsElecUse[11], CUACResultsRef[#U]:PlugLdsElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(1to1)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Refrigerator,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                          CUACResultsRef[#U]:RfrgElecUse[14], CUACResultsRef[#U]:RfrgElecUse[13],
                              CUACResultsRef[#U]:RfrgElecUse[1], CUACResultsRef[#U]:RfrgElecUse[2], CUACResultsRef[#U]:RfrgElecUse[3], CUACResultsRef[#U]:RfrgElecUse[4],  CUACResultsRef[#U]:RfrgElecUse[5],  CUACResultsRef[#U]:RfrgElecUse[6],
                              CUACResultsRef[#U]:RfrgElecUse[7], CUACResultsRef[#U]:RfrgElecUse[8], CUACResultsRef[#U]:RfrgElecUse[9], CUACResultsRef[#U]:RfrgElecUse[10], CUACResultsRef[#U]:RfrgElecUse[11], CUACResultsRef[#U]:RfrgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(1to1)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Washer,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                CUACResultsRef[#U]:WashElecUse[14], CUACResultsRef[#U]:WashElecUse[13],
                              CUACResultsRef[#U]:WashElecUse[1], CUACResultsRef[#U]:WashElecUse[2], CUACResultsRef[#U]:WashElecUse[3], CUACResultsRef[#U]:WashElecUse[4],  CUACResultsRef[#U]:WashElecUse[5],  CUACResultsRef[#U]:WashElecUse[6],
                              CUACResultsRef[#U]:WashElecUse[7], CUACResultsRef[#U]:WashElecUse[8], CUACResultsRef[#U]:WashElecUse[9], CUACResultsRef[#U]:WashElecUse[10], CUACResultsRef[#U]:WashElecUse[11], CUACResultsRef[#U]:WashElecUse[12] )  }
END
;*************************************************************************
RULELIST "CUAC_WriteInputOutputCSV_ElecEndUse_2" 1 0 0 0
   "Write CUAC I/O CSV results"  for:#U=(2to2)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,%s,Cooking,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",     UnitTypeLabels[#U], CUACResultsRef[#U]:CkgElecUse[14], CUACResultsRef[#U]:CkgElecUse[13],
                              CUACResultsRef[#U]:CkgElecUse[1], CUACResultsRef[#U]:CkgElecUse[2], CUACResultsRef[#U]:CkgElecUse[3], CUACResultsRef[#U]:CkgElecUse[4],  CUACResultsRef[#U]:CkgElecUse[5],  CUACResultsRef[#U]:CkgElecUse[6],
                              CUACResultsRef[#U]:CkgElecUse[7], CUACResultsRef[#U]:CkgElecUse[8], CUACResultsRef[#U]:CkgElecUse[9], CUACResultsRef[#U]:CkgElecUse[10], CUACResultsRef[#U]:CkgElecUse[11], CUACResultsRef[#U]:CkgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(2to2)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Cooling,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                           CUACResultsRef[#U]:ClgElecUse[14], CUACResultsRef[#U]:ClgElecUse[13],
                              CUACResultsRef[#U]:ClgElecUse[1], CUACResultsRef[#U]:ClgElecUse[2], CUACResultsRef[#U]:ClgElecUse[3], CUACResultsRef[#U]:ClgElecUse[4],  CUACResultsRef[#U]:ClgElecUse[5],  CUACResultsRef[#U]:ClgElecUse[6],
                              CUACResultsRef[#U]:ClgElecUse[7], CUACResultsRef[#U]:ClgElecUse[8], CUACResultsRef[#U]:ClgElecUse[9], CUACResultsRef[#U]:ClgElecUse[10], CUACResultsRef[#U]:ClgElecUse[11], CUACResultsRef[#U]:ClgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(2to2)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,DHW,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                               CUACResultsRef[#U]:DHWElecUse[14], CUACResultsRef[#U]:DHWElecUse[13],
                              CUACResultsRef[#U]:DHWElecUse[1], CUACResultsRef[#U]:DHWElecUse[2], CUACResultsRef[#U]:DHWElecUse[3], CUACResultsRef[#U]:DHWElecUse[4],  CUACResultsRef[#U]:DHWElecUse[5],  CUACResultsRef[#U]:DHWElecUse[6],
                              CUACResultsRef[#U]:DHWElecUse[7], CUACResultsRef[#U]:DHWElecUse[8], CUACResultsRef[#U]:DHWElecUse[9], CUACResultsRef[#U]:DHWElecUse[10], CUACResultsRef[#U]:DHWElecUse[11], CUACResultsRef[#U]:DHWElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(2to2)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Dishwasher,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                            CUACResultsRef[#U]:DishElecUse[14], CUACResultsRef[#U]:DishElecUse[13],
                              CUACResultsRef[#U]:DishElecUse[1], CUACResultsRef[#U]:DishElecUse[2], CUACResultsRef[#U]:DishElecUse[3], CUACResultsRef[#U]:DishElecUse[4],  CUACResultsRef[#U]:DishElecUse[5],  CUACResultsRef[#U]:DishElecUse[6],
                              CUACResultsRef[#U]:DishElecUse[7], CUACResultsRef[#U]:DishElecUse[8], CUACResultsRef[#U]:DishElecUse[9], CUACResultsRef[#U]:DishElecUse[10], CUACResultsRef[#U]:DishElecUse[11], CUACResultsRef[#U]:DishElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(2to2)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Dryer,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                     CUACResultsRef[#U]:DryerElecUse[14], CUACResultsRef[#U]:DryerElecUse[13],
                              CUACResultsRef[#U]:DryerElecUse[1], CUACResultsRef[#U]:DryerElecUse[2], CUACResultsRef[#U]:DryerElecUse[3], CUACResultsRef[#U]:DryerElecUse[4],  CUACResultsRef[#U]:DryerElecUse[5],  CUACResultsRef[#U]:DryerElecUse[6],
                              CUACResultsRef[#U]:DryerElecUse[7], CUACResultsRef[#U]:DryerElecUse[8], CUACResultsRef[#U]:DryerElecUse[9], CUACResultsRef[#U]:DryerElecUse[10], CUACResultsRef[#U]:DryerElecUse[11], CUACResultsRef[#U]:DryerElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(2to2)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Heating,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                           CUACResultsRef[#U]:HtgElecUse[14], CUACResultsRef[#U]:HtgElecUse[13],
                              CUACResultsRef[#U]:HtgElecUse[1], CUACResultsRef[#U]:HtgElecUse[2], CUACResultsRef[#U]:HtgElecUse[3], CUACResultsRef[#U]:HtgElecUse[4],  CUACResultsRef[#U]:HtgElecUse[5],  CUACResultsRef[#U]:HtgElecUse[6],
                              CUACResultsRef[#U]:HtgElecUse[7], CUACResultsRef[#U]:HtgElecUse[8], CUACResultsRef[#U]:HtgElecUse[9], CUACResultsRef[#U]:HtgElecUse[10], CUACResultsRef[#U]:HtgElecUse[11], CUACResultsRef[#U]:HtgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(2to2)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,IAQ Ventilation,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                   CUACResultsRef[#U]:IAQVentElecUse[14], CUACResultsRef[#U]:IAQVentElecUse[13],
                              CUACResultsRef[#U]:IAQVentElecUse[1], CUACResultsRef[#U]:IAQVentElecUse[2], CUACResultsRef[#U]:IAQVentElecUse[3], CUACResultsRef[#U]:IAQVentElecUse[4],  CUACResultsRef[#U]:IAQVentElecUse[5],  CUACResultsRef[#U]:IAQVentElecUse[6],
                              CUACResultsRef[#U]:IAQVentElecUse[7], CUACResultsRef[#U]:IAQVentElecUse[8], CUACResultsRef[#U]:IAQVentElecUse[9], CUACResultsRef[#U]:IAQVentElecUse[10], CUACResultsRef[#U]:IAQVentElecUse[11], CUACResultsRef[#U]:IAQVentElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(2to2)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Lighting,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                          CUACResultsRef[#U]:LtgElecUse[14], CUACResultsRef[#U]:LtgElecUse[13],
                              CUACResultsRef[#U]:LtgElecUse[1], CUACResultsRef[#U]:LtgElecUse[2], CUACResultsRef[#U]:LtgElecUse[3], CUACResultsRef[#U]:LtgElecUse[4],  CUACResultsRef[#U]:LtgElecUse[5],  CUACResultsRef[#U]:LtgElecUse[6],
                              CUACResultsRef[#U]:LtgElecUse[7], CUACResultsRef[#U]:LtgElecUse[8], CUACResultsRef[#U]:LtgElecUse[9], CUACResultsRef[#U]:LtgElecUse[10], CUACResultsRef[#U]:LtgElecUse[11], CUACResultsRef[#U]:LtgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(2to2)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Plug Loads,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                        CUACResultsRef[#U]:PlugLdsElecUse[14], CUACResultsRef[#U]:PlugLdsElecUse[13],
                              CUACResultsRef[#U]:PlugLdsElecUse[1], CUACResultsRef[#U]:PlugLdsElecUse[2], CUACResultsRef[#U]:PlugLdsElecUse[3], CUACResultsRef[#U]:PlugLdsElecUse[4],  CUACResultsRef[#U]:PlugLdsElecUse[5],  CUACResultsRef[#U]:PlugLdsElecUse[6],
                              CUACResultsRef[#U]:PlugLdsElecUse[7], CUACResultsRef[#U]:PlugLdsElecUse[8], CUACResultsRef[#U]:PlugLdsElecUse[9], CUACResultsRef[#U]:PlugLdsElecUse[10], CUACResultsRef[#U]:PlugLdsElecUse[11], CUACResultsRef[#U]:PlugLdsElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(2to2)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Refrigerator,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                          CUACResultsRef[#U]:RfrgElecUse[14], CUACResultsRef[#U]:RfrgElecUse[13],
                              CUACResultsRef[#U]:RfrgElecUse[1], CUACResultsRef[#U]:RfrgElecUse[2], CUACResultsRef[#U]:RfrgElecUse[3], CUACResultsRef[#U]:RfrgElecUse[4],  CUACResultsRef[#U]:RfrgElecUse[5],  CUACResultsRef[#U]:RfrgElecUse[6],
                              CUACResultsRef[#U]:RfrgElecUse[7], CUACResultsRef[#U]:RfrgElecUse[8], CUACResultsRef[#U]:RfrgElecUse[9], CUACResultsRef[#U]:RfrgElecUse[10], CUACResultsRef[#U]:RfrgElecUse[11], CUACResultsRef[#U]:RfrgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(2to2)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Washer,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                CUACResultsRef[#U]:WashElecUse[14], CUACResultsRef[#U]:WashElecUse[13],
                              CUACResultsRef[#U]:WashElecUse[1], CUACResultsRef[#U]:WashElecUse[2], CUACResultsRef[#U]:WashElecUse[3], CUACResultsRef[#U]:WashElecUse[4],  CUACResultsRef[#U]:WashElecUse[5],  CUACResultsRef[#U]:WashElecUse[6],
                              CUACResultsRef[#U]:WashElecUse[7], CUACResultsRef[#U]:WashElecUse[8], CUACResultsRef[#U]:WashElecUse[9], CUACResultsRef[#U]:WashElecUse[10], CUACResultsRef[#U]:WashElecUse[11], CUACResultsRef[#U]:WashElecUse[12] )  }
END
;*************************************************************************
RULELIST "CUAC_WriteInputOutputCSV_ElecEndUse_3" 1 0 0 0
   "Write CUAC I/O CSV results"  for:#U=(3to3)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,%s,Cooking,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",     UnitTypeLabels[#U], CUACResultsRef[#U]:CkgElecUse[14], CUACResultsRef[#U]:CkgElecUse[13],
                              CUACResultsRef[#U]:CkgElecUse[1], CUACResultsRef[#U]:CkgElecUse[2], CUACResultsRef[#U]:CkgElecUse[3], CUACResultsRef[#U]:CkgElecUse[4],  CUACResultsRef[#U]:CkgElecUse[5],  CUACResultsRef[#U]:CkgElecUse[6],
                              CUACResultsRef[#U]:CkgElecUse[7], CUACResultsRef[#U]:CkgElecUse[8], CUACResultsRef[#U]:CkgElecUse[9], CUACResultsRef[#U]:CkgElecUse[10], CUACResultsRef[#U]:CkgElecUse[11], CUACResultsRef[#U]:CkgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(3to3)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Cooling,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                           CUACResultsRef[#U]:ClgElecUse[14], CUACResultsRef[#U]:ClgElecUse[13],
                              CUACResultsRef[#U]:ClgElecUse[1], CUACResultsRef[#U]:ClgElecUse[2], CUACResultsRef[#U]:ClgElecUse[3], CUACResultsRef[#U]:ClgElecUse[4],  CUACResultsRef[#U]:ClgElecUse[5],  CUACResultsRef[#U]:ClgElecUse[6],
                              CUACResultsRef[#U]:ClgElecUse[7], CUACResultsRef[#U]:ClgElecUse[8], CUACResultsRef[#U]:ClgElecUse[9], CUACResultsRef[#U]:ClgElecUse[10], CUACResultsRef[#U]:ClgElecUse[11], CUACResultsRef[#U]:ClgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(3to3)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,DHW,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                               CUACResultsRef[#U]:DHWElecUse[14], CUACResultsRef[#U]:DHWElecUse[13],
                              CUACResultsRef[#U]:DHWElecUse[1], CUACResultsRef[#U]:DHWElecUse[2], CUACResultsRef[#U]:DHWElecUse[3], CUACResultsRef[#U]:DHWElecUse[4],  CUACResultsRef[#U]:DHWElecUse[5],  CUACResultsRef[#U]:DHWElecUse[6],
                              CUACResultsRef[#U]:DHWElecUse[7], CUACResultsRef[#U]:DHWElecUse[8], CUACResultsRef[#U]:DHWElecUse[9], CUACResultsRef[#U]:DHWElecUse[10], CUACResultsRef[#U]:DHWElecUse[11], CUACResultsRef[#U]:DHWElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(3to3)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Dishwasher,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                            CUACResultsRef[#U]:DishElecUse[14], CUACResultsRef[#U]:DishElecUse[13],
                              CUACResultsRef[#U]:DishElecUse[1], CUACResultsRef[#U]:DishElecUse[2], CUACResultsRef[#U]:DishElecUse[3], CUACResultsRef[#U]:DishElecUse[4],  CUACResultsRef[#U]:DishElecUse[5],  CUACResultsRef[#U]:DishElecUse[6],
                              CUACResultsRef[#U]:DishElecUse[7], CUACResultsRef[#U]:DishElecUse[8], CUACResultsRef[#U]:DishElecUse[9], CUACResultsRef[#U]:DishElecUse[10], CUACResultsRef[#U]:DishElecUse[11], CUACResultsRef[#U]:DishElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(3to3)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Dryer,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                     CUACResultsRef[#U]:DryerElecUse[14], CUACResultsRef[#U]:DryerElecUse[13],
                              CUACResultsRef[#U]:DryerElecUse[1], CUACResultsRef[#U]:DryerElecUse[2], CUACResultsRef[#U]:DryerElecUse[3], CUACResultsRef[#U]:DryerElecUse[4],  CUACResultsRef[#U]:DryerElecUse[5],  CUACResultsRef[#U]:DryerElecUse[6],
                              CUACResultsRef[#U]:DryerElecUse[7], CUACResultsRef[#U]:DryerElecUse[8], CUACResultsRef[#U]:DryerElecUse[9], CUACResultsRef[#U]:DryerElecUse[10], CUACResultsRef[#U]:DryerElecUse[11], CUACResultsRef[#U]:DryerElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(3to3)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Heating,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                           CUACResultsRef[#U]:HtgElecUse[14], CUACResultsRef[#U]:HtgElecUse[13],
                              CUACResultsRef[#U]:HtgElecUse[1], CUACResultsRef[#U]:HtgElecUse[2], CUACResultsRef[#U]:HtgElecUse[3], CUACResultsRef[#U]:HtgElecUse[4],  CUACResultsRef[#U]:HtgElecUse[5],  CUACResultsRef[#U]:HtgElecUse[6],
                              CUACResultsRef[#U]:HtgElecUse[7], CUACResultsRef[#U]:HtgElecUse[8], CUACResultsRef[#U]:HtgElecUse[9], CUACResultsRef[#U]:HtgElecUse[10], CUACResultsRef[#U]:HtgElecUse[11], CUACResultsRef[#U]:HtgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(3to3)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,IAQ Ventilation,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                   CUACResultsRef[#U]:IAQVentElecUse[14], CUACResultsRef[#U]:IAQVentElecUse[13],
                              CUACResultsRef[#U]:IAQVentElecUse[1], CUACResultsRef[#U]:IAQVentElecUse[2], CUACResultsRef[#U]:IAQVentElecUse[3], CUACResultsRef[#U]:IAQVentElecUse[4],  CUACResultsRef[#U]:IAQVentElecUse[5],  CUACResultsRef[#U]:IAQVentElecUse[6],
                              CUACResultsRef[#U]:IAQVentElecUse[7], CUACResultsRef[#U]:IAQVentElecUse[8], CUACResultsRef[#U]:IAQVentElecUse[9], CUACResultsRef[#U]:IAQVentElecUse[10], CUACResultsRef[#U]:IAQVentElecUse[11], CUACResultsRef[#U]:IAQVentElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(3to3)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Lighting,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                          CUACResultsRef[#U]:LtgElecUse[14], CUACResultsRef[#U]:LtgElecUse[13],
                              CUACResultsRef[#U]:LtgElecUse[1], CUACResultsRef[#U]:LtgElecUse[2], CUACResultsRef[#U]:LtgElecUse[3], CUACResultsRef[#U]:LtgElecUse[4],  CUACResultsRef[#U]:LtgElecUse[5],  CUACResultsRef[#U]:LtgElecUse[6],
                              CUACResultsRef[#U]:LtgElecUse[7], CUACResultsRef[#U]:LtgElecUse[8], CUACResultsRef[#U]:LtgElecUse[9], CUACResultsRef[#U]:LtgElecUse[10], CUACResultsRef[#U]:LtgElecUse[11], CUACResultsRef[#U]:LtgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(3to3)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Plug Loads,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                        CUACResultsRef[#U]:PlugLdsElecUse[14], CUACResultsRef[#U]:PlugLdsElecUse[13],
                              CUACResultsRef[#U]:PlugLdsElecUse[1], CUACResultsRef[#U]:PlugLdsElecUse[2], CUACResultsRef[#U]:PlugLdsElecUse[3], CUACResultsRef[#U]:PlugLdsElecUse[4],  CUACResultsRef[#U]:PlugLdsElecUse[5],  CUACResultsRef[#U]:PlugLdsElecUse[6],
                              CUACResultsRef[#U]:PlugLdsElecUse[7], CUACResultsRef[#U]:PlugLdsElecUse[8], CUACResultsRef[#U]:PlugLdsElecUse[9], CUACResultsRef[#U]:PlugLdsElecUse[10], CUACResultsRef[#U]:PlugLdsElecUse[11], CUACResultsRef[#U]:PlugLdsElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(3to3)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Refrigerator,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                          CUACResultsRef[#U]:RfrgElecUse[14], CUACResultsRef[#U]:RfrgElecUse[13],
                              CUACResultsRef[#U]:RfrgElecUse[1], CUACResultsRef[#U]:RfrgElecUse[2], CUACResultsRef[#U]:RfrgElecUse[3], CUACResultsRef[#U]:RfrgElecUse[4],  CUACResultsRef[#U]:RfrgElecUse[5],  CUACResultsRef[#U]:RfrgElecUse[6],
                              CUACResultsRef[#U]:RfrgElecUse[7], CUACResultsRef[#U]:RfrgElecUse[8], CUACResultsRef[#U]:RfrgElecUse[9], CUACResultsRef[#U]:RfrgElecUse[10], CUACResultsRef[#U]:RfrgElecUse[11], CUACResultsRef[#U]:RfrgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(3to3)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Washer,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                CUACResultsRef[#U]:WashElecUse[14], CUACResultsRef[#U]:WashElecUse[13],
                              CUACResultsRef[#U]:WashElecUse[1], CUACResultsRef[#U]:WashElecUse[2], CUACResultsRef[#U]:WashElecUse[3], CUACResultsRef[#U]:WashElecUse[4],  CUACResultsRef[#U]:WashElecUse[5],  CUACResultsRef[#U]:WashElecUse[6],
                              CUACResultsRef[#U]:WashElecUse[7], CUACResultsRef[#U]:WashElecUse[8], CUACResultsRef[#U]:WashElecUse[9], CUACResultsRef[#U]:WashElecUse[10], CUACResultsRef[#U]:WashElecUse[11], CUACResultsRef[#U]:WashElecUse[12] )  }
END
;*************************************************************************
RULELIST "CUAC_WriteInputOutputCSV_ElecEndUse_4" 1 0 0 0
   "Write CUAC I/O CSV results"  for:#U=(4to4)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,%s,Cooking,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",     UnitTypeLabels[#U], CUACResultsRef[#U]:CkgElecUse[14], CUACResultsRef[#U]:CkgElecUse[13],
                              CUACResultsRef[#U]:CkgElecUse[1], CUACResultsRef[#U]:CkgElecUse[2], CUACResultsRef[#U]:CkgElecUse[3], CUACResultsRef[#U]:CkgElecUse[4],  CUACResultsRef[#U]:CkgElecUse[5],  CUACResultsRef[#U]:CkgElecUse[6],
                              CUACResultsRef[#U]:CkgElecUse[7], CUACResultsRef[#U]:CkgElecUse[8], CUACResultsRef[#U]:CkgElecUse[9], CUACResultsRef[#U]:CkgElecUse[10], CUACResultsRef[#U]:CkgElecUse[11], CUACResultsRef[#U]:CkgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(4to4)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Cooling,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                           CUACResultsRef[#U]:ClgElecUse[14], CUACResultsRef[#U]:ClgElecUse[13],
                              CUACResultsRef[#U]:ClgElecUse[1], CUACResultsRef[#U]:ClgElecUse[2], CUACResultsRef[#U]:ClgElecUse[3], CUACResultsRef[#U]:ClgElecUse[4],  CUACResultsRef[#U]:ClgElecUse[5],  CUACResultsRef[#U]:ClgElecUse[6],
                              CUACResultsRef[#U]:ClgElecUse[7], CUACResultsRef[#U]:ClgElecUse[8], CUACResultsRef[#U]:ClgElecUse[9], CUACResultsRef[#U]:ClgElecUse[10], CUACResultsRef[#U]:ClgElecUse[11], CUACResultsRef[#U]:ClgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(4to4)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,DHW,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                               CUACResultsRef[#U]:DHWElecUse[14], CUACResultsRef[#U]:DHWElecUse[13],
                              CUACResultsRef[#U]:DHWElecUse[1], CUACResultsRef[#U]:DHWElecUse[2], CUACResultsRef[#U]:DHWElecUse[3], CUACResultsRef[#U]:DHWElecUse[4],  CUACResultsRef[#U]:DHWElecUse[5],  CUACResultsRef[#U]:DHWElecUse[6],
                              CUACResultsRef[#U]:DHWElecUse[7], CUACResultsRef[#U]:DHWElecUse[8], CUACResultsRef[#U]:DHWElecUse[9], CUACResultsRef[#U]:DHWElecUse[10], CUACResultsRef[#U]:DHWElecUse[11], CUACResultsRef[#U]:DHWElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(4to4)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Dishwasher,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                            CUACResultsRef[#U]:DishElecUse[14], CUACResultsRef[#U]:DishElecUse[13],
                              CUACResultsRef[#U]:DishElecUse[1], CUACResultsRef[#U]:DishElecUse[2], CUACResultsRef[#U]:DishElecUse[3], CUACResultsRef[#U]:DishElecUse[4],  CUACResultsRef[#U]:DishElecUse[5],  CUACResultsRef[#U]:DishElecUse[6],
                              CUACResultsRef[#U]:DishElecUse[7], CUACResultsRef[#U]:DishElecUse[8], CUACResultsRef[#U]:DishElecUse[9], CUACResultsRef[#U]:DishElecUse[10], CUACResultsRef[#U]:DishElecUse[11], CUACResultsRef[#U]:DishElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(4to4)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Dryer,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                     CUACResultsRef[#U]:DryerElecUse[14], CUACResultsRef[#U]:DryerElecUse[13],
                              CUACResultsRef[#U]:DryerElecUse[1], CUACResultsRef[#U]:DryerElecUse[2], CUACResultsRef[#U]:DryerElecUse[3], CUACResultsRef[#U]:DryerElecUse[4],  CUACResultsRef[#U]:DryerElecUse[5],  CUACResultsRef[#U]:DryerElecUse[6],
                              CUACResultsRef[#U]:DryerElecUse[7], CUACResultsRef[#U]:DryerElecUse[8], CUACResultsRef[#U]:DryerElecUse[9], CUACResultsRef[#U]:DryerElecUse[10], CUACResultsRef[#U]:DryerElecUse[11], CUACResultsRef[#U]:DryerElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(4to4)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Heating,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                           CUACResultsRef[#U]:HtgElecUse[14], CUACResultsRef[#U]:HtgElecUse[13],
                              CUACResultsRef[#U]:HtgElecUse[1], CUACResultsRef[#U]:HtgElecUse[2], CUACResultsRef[#U]:HtgElecUse[3], CUACResultsRef[#U]:HtgElecUse[4],  CUACResultsRef[#U]:HtgElecUse[5],  CUACResultsRef[#U]:HtgElecUse[6],
                              CUACResultsRef[#U]:HtgElecUse[7], CUACResultsRef[#U]:HtgElecUse[8], CUACResultsRef[#U]:HtgElecUse[9], CUACResultsRef[#U]:HtgElecUse[10], CUACResultsRef[#U]:HtgElecUse[11], CUACResultsRef[#U]:HtgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(4to4)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,IAQ Ventilation,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                   CUACResultsRef[#U]:IAQVentElecUse[14], CUACResultsRef[#U]:IAQVentElecUse[13],
                              CUACResultsRef[#U]:IAQVentElecUse[1], CUACResultsRef[#U]:IAQVentElecUse[2], CUACResultsRef[#U]:IAQVentElecUse[3], CUACResultsRef[#U]:IAQVentElecUse[4],  CUACResultsRef[#U]:IAQVentElecUse[5],  CUACResultsRef[#U]:IAQVentElecUse[6],
                              CUACResultsRef[#U]:IAQVentElecUse[7], CUACResultsRef[#U]:IAQVentElecUse[8], CUACResultsRef[#U]:IAQVentElecUse[9], CUACResultsRef[#U]:IAQVentElecUse[10], CUACResultsRef[#U]:IAQVentElecUse[11], CUACResultsRef[#U]:IAQVentElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(4to4)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Lighting,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                          CUACResultsRef[#U]:LtgElecUse[14], CUACResultsRef[#U]:LtgElecUse[13],
                              CUACResultsRef[#U]:LtgElecUse[1], CUACResultsRef[#U]:LtgElecUse[2], CUACResultsRef[#U]:LtgElecUse[3], CUACResultsRef[#U]:LtgElecUse[4],  CUACResultsRef[#U]:LtgElecUse[5],  CUACResultsRef[#U]:LtgElecUse[6],
                              CUACResultsRef[#U]:LtgElecUse[7], CUACResultsRef[#U]:LtgElecUse[8], CUACResultsRef[#U]:LtgElecUse[9], CUACResultsRef[#U]:LtgElecUse[10], CUACResultsRef[#U]:LtgElecUse[11], CUACResultsRef[#U]:LtgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(4to4)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Plug Loads,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                        CUACResultsRef[#U]:PlugLdsElecUse[14], CUACResultsRef[#U]:PlugLdsElecUse[13],
                              CUACResultsRef[#U]:PlugLdsElecUse[1], CUACResultsRef[#U]:PlugLdsElecUse[2], CUACResultsRef[#U]:PlugLdsElecUse[3], CUACResultsRef[#U]:PlugLdsElecUse[4],  CUACResultsRef[#U]:PlugLdsElecUse[5],  CUACResultsRef[#U]:PlugLdsElecUse[6],
                              CUACResultsRef[#U]:PlugLdsElecUse[7], CUACResultsRef[#U]:PlugLdsElecUse[8], CUACResultsRef[#U]:PlugLdsElecUse[9], CUACResultsRef[#U]:PlugLdsElecUse[10], CUACResultsRef[#U]:PlugLdsElecUse[11], CUACResultsRef[#U]:PlugLdsElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(4to4)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Refrigerator,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                          CUACResultsRef[#U]:RfrgElecUse[14], CUACResultsRef[#U]:RfrgElecUse[13],
                              CUACResultsRef[#U]:RfrgElecUse[1], CUACResultsRef[#U]:RfrgElecUse[2], CUACResultsRef[#U]:RfrgElecUse[3], CUACResultsRef[#U]:RfrgElecUse[4],  CUACResultsRef[#U]:RfrgElecUse[5],  CUACResultsRef[#U]:RfrgElecUse[6],
                              CUACResultsRef[#U]:RfrgElecUse[7], CUACResultsRef[#U]:RfrgElecUse[8], CUACResultsRef[#U]:RfrgElecUse[9], CUACResultsRef[#U]:RfrgElecUse[10], CUACResultsRef[#U]:RfrgElecUse[11], CUACResultsRef[#U]:RfrgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(4to4)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Washer,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                CUACResultsRef[#U]:WashElecUse[14], CUACResultsRef[#U]:WashElecUse[13],
                              CUACResultsRef[#U]:WashElecUse[1], CUACResultsRef[#U]:WashElecUse[2], CUACResultsRef[#U]:WashElecUse[3], CUACResultsRef[#U]:WashElecUse[4],  CUACResultsRef[#U]:WashElecUse[5],  CUACResultsRef[#U]:WashElecUse[6],
                              CUACResultsRef[#U]:WashElecUse[7], CUACResultsRef[#U]:WashElecUse[8], CUACResultsRef[#U]:WashElecUse[9], CUACResultsRef[#U]:WashElecUse[10], CUACResultsRef[#U]:WashElecUse[11], CUACResultsRef[#U]:WashElecUse[12] )  }
END
;*************************************************************************
RULELIST "CUAC_WriteInputOutputCSV_ElecEndUse_5" 1 0 0 0
   "Write CUAC I/O CSV results"  for:#U=(5to5)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,%s,Cooking,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",     UnitTypeLabels[#U], CUACResultsRef[#U]:CkgElecUse[14], CUACResultsRef[#U]:CkgElecUse[13],
                              CUACResultsRef[#U]:CkgElecUse[1], CUACResultsRef[#U]:CkgElecUse[2], CUACResultsRef[#U]:CkgElecUse[3], CUACResultsRef[#U]:CkgElecUse[4],  CUACResultsRef[#U]:CkgElecUse[5],  CUACResultsRef[#U]:CkgElecUse[6],
                              CUACResultsRef[#U]:CkgElecUse[7], CUACResultsRef[#U]:CkgElecUse[8], CUACResultsRef[#U]:CkgElecUse[9], CUACResultsRef[#U]:CkgElecUse[10], CUACResultsRef[#U]:CkgElecUse[11], CUACResultsRef[#U]:CkgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(5to5)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Cooling,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                           CUACResultsRef[#U]:ClgElecUse[14], CUACResultsRef[#U]:ClgElecUse[13],
                              CUACResultsRef[#U]:ClgElecUse[1], CUACResultsRef[#U]:ClgElecUse[2], CUACResultsRef[#U]:ClgElecUse[3], CUACResultsRef[#U]:ClgElecUse[4],  CUACResultsRef[#U]:ClgElecUse[5],  CUACResultsRef[#U]:ClgElecUse[6],
                              CUACResultsRef[#U]:ClgElecUse[7], CUACResultsRef[#U]:ClgElecUse[8], CUACResultsRef[#U]:ClgElecUse[9], CUACResultsRef[#U]:ClgElecUse[10], CUACResultsRef[#U]:ClgElecUse[11], CUACResultsRef[#U]:ClgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(5to5)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,DHW,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                               CUACResultsRef[#U]:DHWElecUse[14], CUACResultsRef[#U]:DHWElecUse[13],
                              CUACResultsRef[#U]:DHWElecUse[1], CUACResultsRef[#U]:DHWElecUse[2], CUACResultsRef[#U]:DHWElecUse[3], CUACResultsRef[#U]:DHWElecUse[4],  CUACResultsRef[#U]:DHWElecUse[5],  CUACResultsRef[#U]:DHWElecUse[6],
                              CUACResultsRef[#U]:DHWElecUse[7], CUACResultsRef[#U]:DHWElecUse[8], CUACResultsRef[#U]:DHWElecUse[9], CUACResultsRef[#U]:DHWElecUse[10], CUACResultsRef[#U]:DHWElecUse[11], CUACResultsRef[#U]:DHWElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(5to5)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Dishwasher,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                            CUACResultsRef[#U]:DishElecUse[14], CUACResultsRef[#U]:DishElecUse[13],
                              CUACResultsRef[#U]:DishElecUse[1], CUACResultsRef[#U]:DishElecUse[2], CUACResultsRef[#U]:DishElecUse[3], CUACResultsRef[#U]:DishElecUse[4],  CUACResultsRef[#U]:DishElecUse[5],  CUACResultsRef[#U]:DishElecUse[6],
                              CUACResultsRef[#U]:DishElecUse[7], CUACResultsRef[#U]:DishElecUse[8], CUACResultsRef[#U]:DishElecUse[9], CUACResultsRef[#U]:DishElecUse[10], CUACResultsRef[#U]:DishElecUse[11], CUACResultsRef[#U]:DishElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(5to5)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Dryer,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                     CUACResultsRef[#U]:DryerElecUse[14], CUACResultsRef[#U]:DryerElecUse[13],
                              CUACResultsRef[#U]:DryerElecUse[1], CUACResultsRef[#U]:DryerElecUse[2], CUACResultsRef[#U]:DryerElecUse[3], CUACResultsRef[#U]:DryerElecUse[4],  CUACResultsRef[#U]:DryerElecUse[5],  CUACResultsRef[#U]:DryerElecUse[6],
                              CUACResultsRef[#U]:DryerElecUse[7], CUACResultsRef[#U]:DryerElecUse[8], CUACResultsRef[#U]:DryerElecUse[9], CUACResultsRef[#U]:DryerElecUse[10], CUACResultsRef[#U]:DryerElecUse[11], CUACResultsRef[#U]:DryerElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(5to5)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Heating,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                           CUACResultsRef[#U]:HtgElecUse[14], CUACResultsRef[#U]:HtgElecUse[13],
                              CUACResultsRef[#U]:HtgElecUse[1], CUACResultsRef[#U]:HtgElecUse[2], CUACResultsRef[#U]:HtgElecUse[3], CUACResultsRef[#U]:HtgElecUse[4],  CUACResultsRef[#U]:HtgElecUse[5],  CUACResultsRef[#U]:HtgElecUse[6],
                              CUACResultsRef[#U]:HtgElecUse[7], CUACResultsRef[#U]:HtgElecUse[8], CUACResultsRef[#U]:HtgElecUse[9], CUACResultsRef[#U]:HtgElecUse[10], CUACResultsRef[#U]:HtgElecUse[11], CUACResultsRef[#U]:HtgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(5to5)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,IAQ Ventilation,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                   CUACResultsRef[#U]:IAQVentElecUse[14], CUACResultsRef[#U]:IAQVentElecUse[13],
                              CUACResultsRef[#U]:IAQVentElecUse[1], CUACResultsRef[#U]:IAQVentElecUse[2], CUACResultsRef[#U]:IAQVentElecUse[3], CUACResultsRef[#U]:IAQVentElecUse[4],  CUACResultsRef[#U]:IAQVentElecUse[5],  CUACResultsRef[#U]:IAQVentElecUse[6],
                              CUACResultsRef[#U]:IAQVentElecUse[7], CUACResultsRef[#U]:IAQVentElecUse[8], CUACResultsRef[#U]:IAQVentElecUse[9], CUACResultsRef[#U]:IAQVentElecUse[10], CUACResultsRef[#U]:IAQVentElecUse[11], CUACResultsRef[#U]:IAQVentElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(5to5)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Lighting,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                          CUACResultsRef[#U]:LtgElecUse[14], CUACResultsRef[#U]:LtgElecUse[13],
                              CUACResultsRef[#U]:LtgElecUse[1], CUACResultsRef[#U]:LtgElecUse[2], CUACResultsRef[#U]:LtgElecUse[3], CUACResultsRef[#U]:LtgElecUse[4],  CUACResultsRef[#U]:LtgElecUse[5],  CUACResultsRef[#U]:LtgElecUse[6],
                              CUACResultsRef[#U]:LtgElecUse[7], CUACResultsRef[#U]:LtgElecUse[8], CUACResultsRef[#U]:LtgElecUse[9], CUACResultsRef[#U]:LtgElecUse[10], CUACResultsRef[#U]:LtgElecUse[11], CUACResultsRef[#U]:LtgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(5to5)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Plug Loads,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                        CUACResultsRef[#U]:PlugLdsElecUse[14], CUACResultsRef[#U]:PlugLdsElecUse[13],
                              CUACResultsRef[#U]:PlugLdsElecUse[1], CUACResultsRef[#U]:PlugLdsElecUse[2], CUACResultsRef[#U]:PlugLdsElecUse[3], CUACResultsRef[#U]:PlugLdsElecUse[4],  CUACResultsRef[#U]:PlugLdsElecUse[5],  CUACResultsRef[#U]:PlugLdsElecUse[6],
                              CUACResultsRef[#U]:PlugLdsElecUse[7], CUACResultsRef[#U]:PlugLdsElecUse[8], CUACResultsRef[#U]:PlugLdsElecUse[9], CUACResultsRef[#U]:PlugLdsElecUse[10], CUACResultsRef[#U]:PlugLdsElecUse[11], CUACResultsRef[#U]:PlugLdsElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(5to5)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Refrigerator,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                          CUACResultsRef[#U]:RfrgElecUse[14], CUACResultsRef[#U]:RfrgElecUse[13],
                              CUACResultsRef[#U]:RfrgElecUse[1], CUACResultsRef[#U]:RfrgElecUse[2], CUACResultsRef[#U]:RfrgElecUse[3], CUACResultsRef[#U]:RfrgElecUse[4],  CUACResultsRef[#U]:RfrgElecUse[5],  CUACResultsRef[#U]:RfrgElecUse[6],
                              CUACResultsRef[#U]:RfrgElecUse[7], CUACResultsRef[#U]:RfrgElecUse[8], CUACResultsRef[#U]:RfrgElecUse[9], CUACResultsRef[#U]:RfrgElecUse[10], CUACResultsRef[#U]:RfrgElecUse[11], CUACResultsRef[#U]:RfrgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(5to5)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Washer,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                CUACResultsRef[#U]:WashElecUse[14], CUACResultsRef[#U]:WashElecUse[13],
                              CUACResultsRef[#U]:WashElecUse[1], CUACResultsRef[#U]:WashElecUse[2], CUACResultsRef[#U]:WashElecUse[3], CUACResultsRef[#U]:WashElecUse[4],  CUACResultsRef[#U]:WashElecUse[5],  CUACResultsRef[#U]:WashElecUse[6],
                              CUACResultsRef[#U]:WashElecUse[7], CUACResultsRef[#U]:WashElecUse[8], CUACResultsRef[#U]:WashElecUse[9], CUACResultsRef[#U]:WashElecUse[10], CUACResultsRef[#U]:WashElecUse[11], CUACResultsRef[#U]:WashElecUse[12] )  }
END
;*************************************************************************
RULELIST "CUAC_WriteInputOutputCSV_ElecEndUse_6" 1 0 0 0
   "Write CUAC I/O CSV results"  for:#U=(6to6)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,%s,Cooking,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",     UnitTypeLabels[#U], CUACResultsRef[#U]:CkgElecUse[14], CUACResultsRef[#U]:CkgElecUse[13],
                              CUACResultsRef[#U]:CkgElecUse[1], CUACResultsRef[#U]:CkgElecUse[2], CUACResultsRef[#U]:CkgElecUse[3], CUACResultsRef[#U]:CkgElecUse[4],  CUACResultsRef[#U]:CkgElecUse[5],  CUACResultsRef[#U]:CkgElecUse[6],
                              CUACResultsRef[#U]:CkgElecUse[7], CUACResultsRef[#U]:CkgElecUse[8], CUACResultsRef[#U]:CkgElecUse[9], CUACResultsRef[#U]:CkgElecUse[10], CUACResultsRef[#U]:CkgElecUse[11], CUACResultsRef[#U]:CkgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(6to6)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Cooling,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                           CUACResultsRef[#U]:ClgElecUse[14], CUACResultsRef[#U]:ClgElecUse[13],
                              CUACResultsRef[#U]:ClgElecUse[1], CUACResultsRef[#U]:ClgElecUse[2], CUACResultsRef[#U]:ClgElecUse[3], CUACResultsRef[#U]:ClgElecUse[4],  CUACResultsRef[#U]:ClgElecUse[5],  CUACResultsRef[#U]:ClgElecUse[6],
                              CUACResultsRef[#U]:ClgElecUse[7], CUACResultsRef[#U]:ClgElecUse[8], CUACResultsRef[#U]:ClgElecUse[9], CUACResultsRef[#U]:ClgElecUse[10], CUACResultsRef[#U]:ClgElecUse[11], CUACResultsRef[#U]:ClgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(6to6)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,DHW,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                               CUACResultsRef[#U]:DHWElecUse[14], CUACResultsRef[#U]:DHWElecUse[13],
                              CUACResultsRef[#U]:DHWElecUse[1], CUACResultsRef[#U]:DHWElecUse[2], CUACResultsRef[#U]:DHWElecUse[3], CUACResultsRef[#U]:DHWElecUse[4],  CUACResultsRef[#U]:DHWElecUse[5],  CUACResultsRef[#U]:DHWElecUse[6],
                              CUACResultsRef[#U]:DHWElecUse[7], CUACResultsRef[#U]:DHWElecUse[8], CUACResultsRef[#U]:DHWElecUse[9], CUACResultsRef[#U]:DHWElecUse[10], CUACResultsRef[#U]:DHWElecUse[11], CUACResultsRef[#U]:DHWElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(6to6)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Dishwasher,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                            CUACResultsRef[#U]:DishElecUse[14], CUACResultsRef[#U]:DishElecUse[13],
                              CUACResultsRef[#U]:DishElecUse[1], CUACResultsRef[#U]:DishElecUse[2], CUACResultsRef[#U]:DishElecUse[3], CUACResultsRef[#U]:DishElecUse[4],  CUACResultsRef[#U]:DishElecUse[5],  CUACResultsRef[#U]:DishElecUse[6],
                              CUACResultsRef[#U]:DishElecUse[7], CUACResultsRef[#U]:DishElecUse[8], CUACResultsRef[#U]:DishElecUse[9], CUACResultsRef[#U]:DishElecUse[10], CUACResultsRef[#U]:DishElecUse[11], CUACResultsRef[#U]:DishElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(6to6)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Dryer,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                     CUACResultsRef[#U]:DryerElecUse[14], CUACResultsRef[#U]:DryerElecUse[13],
                              CUACResultsRef[#U]:DryerElecUse[1], CUACResultsRef[#U]:DryerElecUse[2], CUACResultsRef[#U]:DryerElecUse[3], CUACResultsRef[#U]:DryerElecUse[4],  CUACResultsRef[#U]:DryerElecUse[5],  CUACResultsRef[#U]:DryerElecUse[6],
                              CUACResultsRef[#U]:DryerElecUse[7], CUACResultsRef[#U]:DryerElecUse[8], CUACResultsRef[#U]:DryerElecUse[9], CUACResultsRef[#U]:DryerElecUse[10], CUACResultsRef[#U]:DryerElecUse[11], CUACResultsRef[#U]:DryerElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(6to6)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Heating,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                           CUACResultsRef[#U]:HtgElecUse[14], CUACResultsRef[#U]:HtgElecUse[13],
                              CUACResultsRef[#U]:HtgElecUse[1], CUACResultsRef[#U]:HtgElecUse[2], CUACResultsRef[#U]:HtgElecUse[3], CUACResultsRef[#U]:HtgElecUse[4],  CUACResultsRef[#U]:HtgElecUse[5],  CUACResultsRef[#U]:HtgElecUse[6],
                              CUACResultsRef[#U]:HtgElecUse[7], CUACResultsRef[#U]:HtgElecUse[8], CUACResultsRef[#U]:HtgElecUse[9], CUACResultsRef[#U]:HtgElecUse[10], CUACResultsRef[#U]:HtgElecUse[11], CUACResultsRef[#U]:HtgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(6to6)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,IAQ Ventilation,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                   CUACResultsRef[#U]:IAQVentElecUse[14], CUACResultsRef[#U]:IAQVentElecUse[13],
                              CUACResultsRef[#U]:IAQVentElecUse[1], CUACResultsRef[#U]:IAQVentElecUse[2], CUACResultsRef[#U]:IAQVentElecUse[3], CUACResultsRef[#U]:IAQVentElecUse[4],  CUACResultsRef[#U]:IAQVentElecUse[5],  CUACResultsRef[#U]:IAQVentElecUse[6],
                              CUACResultsRef[#U]:IAQVentElecUse[7], CUACResultsRef[#U]:IAQVentElecUse[8], CUACResultsRef[#U]:IAQVentElecUse[9], CUACResultsRef[#U]:IAQVentElecUse[10], CUACResultsRef[#U]:IAQVentElecUse[11], CUACResultsRef[#U]:IAQVentElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(6to6)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Lighting,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                          CUACResultsRef[#U]:LtgElecUse[14], CUACResultsRef[#U]:LtgElecUse[13],
                              CUACResultsRef[#U]:LtgElecUse[1], CUACResultsRef[#U]:LtgElecUse[2], CUACResultsRef[#U]:LtgElecUse[3], CUACResultsRef[#U]:LtgElecUse[4],  CUACResultsRef[#U]:LtgElecUse[5],  CUACResultsRef[#U]:LtgElecUse[6],
                              CUACResultsRef[#U]:LtgElecUse[7], CUACResultsRef[#U]:LtgElecUse[8], CUACResultsRef[#U]:LtgElecUse[9], CUACResultsRef[#U]:LtgElecUse[10], CUACResultsRef[#U]:LtgElecUse[11], CUACResultsRef[#U]:LtgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(6to6)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Plug Loads,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                        CUACResultsRef[#U]:PlugLdsElecUse[14], CUACResultsRef[#U]:PlugLdsElecUse[13],
                              CUACResultsRef[#U]:PlugLdsElecUse[1], CUACResultsRef[#U]:PlugLdsElecUse[2], CUACResultsRef[#U]:PlugLdsElecUse[3], CUACResultsRef[#U]:PlugLdsElecUse[4],  CUACResultsRef[#U]:PlugLdsElecUse[5],  CUACResultsRef[#U]:PlugLdsElecUse[6],
                              CUACResultsRef[#U]:PlugLdsElecUse[7], CUACResultsRef[#U]:PlugLdsElecUse[8], CUACResultsRef[#U]:PlugLdsElecUse[9], CUACResultsRef[#U]:PlugLdsElecUse[10], CUACResultsRef[#U]:PlugLdsElecUse[11], CUACResultsRef[#U]:PlugLdsElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(6to6)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Refrigerator,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                          CUACResultsRef[#U]:RfrgElecUse[14], CUACResultsRef[#U]:RfrgElecUse[13],
                              CUACResultsRef[#U]:RfrgElecUse[1], CUACResultsRef[#U]:RfrgElecUse[2], CUACResultsRef[#U]:RfrgElecUse[3], CUACResultsRef[#U]:RfrgElecUse[4],  CUACResultsRef[#U]:RfrgElecUse[5],  CUACResultsRef[#U]:RfrgElecUse[6],
                              CUACResultsRef[#U]:RfrgElecUse[7], CUACResultsRef[#U]:RfrgElecUse[8], CUACResultsRef[#U]:RfrgElecUse[9], CUACResultsRef[#U]:RfrgElecUse[10], CUACResultsRef[#U]:RfrgElecUse[11], CUACResultsRef[#U]:RfrgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(6to6)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Washer,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                CUACResultsRef[#U]:WashElecUse[14], CUACResultsRef[#U]:WashElecUse[13],
                              CUACResultsRef[#U]:WashElecUse[1], CUACResultsRef[#U]:WashElecUse[2], CUACResultsRef[#U]:WashElecUse[3], CUACResultsRef[#U]:WashElecUse[4],  CUACResultsRef[#U]:WashElecUse[5],  CUACResultsRef[#U]:WashElecUse[6],
                              CUACResultsRef[#U]:WashElecUse[7], CUACResultsRef[#U]:WashElecUse[8], CUACResultsRef[#U]:WashElecUse[9], CUACResultsRef[#U]:WashElecUse[10], CUACResultsRef[#U]:WashElecUse[11], CUACResultsRef[#U]:WashElecUse[12] )  }
END
;*************************************************************************
RULELIST "CUAC_WriteInputOutputCSV_ElecEndUse_7" 1 0 0 0
   "Write CUAC I/O CSV results"  for:#U=(7to7)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,%s,Cooking,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",     UnitTypeLabels[#U], CUACResultsRef[#U]:CkgElecUse[14], CUACResultsRef[#U]:CkgElecUse[13],
                              CUACResultsRef[#U]:CkgElecUse[1], CUACResultsRef[#U]:CkgElecUse[2], CUACResultsRef[#U]:CkgElecUse[3], CUACResultsRef[#U]:CkgElecUse[4],  CUACResultsRef[#U]:CkgElecUse[5],  CUACResultsRef[#U]:CkgElecUse[6],
                              CUACResultsRef[#U]:CkgElecUse[7], CUACResultsRef[#U]:CkgElecUse[8], CUACResultsRef[#U]:CkgElecUse[9], CUACResultsRef[#U]:CkgElecUse[10], CUACResultsRef[#U]:CkgElecUse[11], CUACResultsRef[#U]:CkgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(7to7)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Cooling,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                           CUACResultsRef[#U]:ClgElecUse[14], CUACResultsRef[#U]:ClgElecUse[13],
                              CUACResultsRef[#U]:ClgElecUse[1], CUACResultsRef[#U]:ClgElecUse[2], CUACResultsRef[#U]:ClgElecUse[3], CUACResultsRef[#U]:ClgElecUse[4],  CUACResultsRef[#U]:ClgElecUse[5],  CUACResultsRef[#U]:ClgElecUse[6],
                              CUACResultsRef[#U]:ClgElecUse[7], CUACResultsRef[#U]:ClgElecUse[8], CUACResultsRef[#U]:ClgElecUse[9], CUACResultsRef[#U]:ClgElecUse[10], CUACResultsRef[#U]:ClgElecUse[11], CUACResultsRef[#U]:ClgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(7to7)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,DHW,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                               CUACResultsRef[#U]:DHWElecUse[14], CUACResultsRef[#U]:DHWElecUse[13],
                              CUACResultsRef[#U]:DHWElecUse[1], CUACResultsRef[#U]:DHWElecUse[2], CUACResultsRef[#U]:DHWElecUse[3], CUACResultsRef[#U]:DHWElecUse[4],  CUACResultsRef[#U]:DHWElecUse[5],  CUACResultsRef[#U]:DHWElecUse[6],
                              CUACResultsRef[#U]:DHWElecUse[7], CUACResultsRef[#U]:DHWElecUse[8], CUACResultsRef[#U]:DHWElecUse[9], CUACResultsRef[#U]:DHWElecUse[10], CUACResultsRef[#U]:DHWElecUse[11], CUACResultsRef[#U]:DHWElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(7to7)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Dishwasher,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                            CUACResultsRef[#U]:DishElecUse[14], CUACResultsRef[#U]:DishElecUse[13],
                              CUACResultsRef[#U]:DishElecUse[1], CUACResultsRef[#U]:DishElecUse[2], CUACResultsRef[#U]:DishElecUse[3], CUACResultsRef[#U]:DishElecUse[4],  CUACResultsRef[#U]:DishElecUse[5],  CUACResultsRef[#U]:DishElecUse[6],
                              CUACResultsRef[#U]:DishElecUse[7], CUACResultsRef[#U]:DishElecUse[8], CUACResultsRef[#U]:DishElecUse[9], CUACResultsRef[#U]:DishElecUse[10], CUACResultsRef[#U]:DishElecUse[11], CUACResultsRef[#U]:DishElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(7to7)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Dryer,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                     CUACResultsRef[#U]:DryerElecUse[14], CUACResultsRef[#U]:DryerElecUse[13],
                              CUACResultsRef[#U]:DryerElecUse[1], CUACResultsRef[#U]:DryerElecUse[2], CUACResultsRef[#U]:DryerElecUse[3], CUACResultsRef[#U]:DryerElecUse[4],  CUACResultsRef[#U]:DryerElecUse[5],  CUACResultsRef[#U]:DryerElecUse[6],
                              CUACResultsRef[#U]:DryerElecUse[7], CUACResultsRef[#U]:DryerElecUse[8], CUACResultsRef[#U]:DryerElecUse[9], CUACResultsRef[#U]:DryerElecUse[10], CUACResultsRef[#U]:DryerElecUse[11], CUACResultsRef[#U]:DryerElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(7to7)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Heating,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                           CUACResultsRef[#U]:HtgElecUse[14], CUACResultsRef[#U]:HtgElecUse[13],
                              CUACResultsRef[#U]:HtgElecUse[1], CUACResultsRef[#U]:HtgElecUse[2], CUACResultsRef[#U]:HtgElecUse[3], CUACResultsRef[#U]:HtgElecUse[4],  CUACResultsRef[#U]:HtgElecUse[5],  CUACResultsRef[#U]:HtgElecUse[6],
                              CUACResultsRef[#U]:HtgElecUse[7], CUACResultsRef[#U]:HtgElecUse[8], CUACResultsRef[#U]:HtgElecUse[9], CUACResultsRef[#U]:HtgElecUse[10], CUACResultsRef[#U]:HtgElecUse[11], CUACResultsRef[#U]:HtgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(7to7)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,IAQ Ventilation,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                   CUACResultsRef[#U]:IAQVentElecUse[14], CUACResultsRef[#U]:IAQVentElecUse[13],
                              CUACResultsRef[#U]:IAQVentElecUse[1], CUACResultsRef[#U]:IAQVentElecUse[2], CUACResultsRef[#U]:IAQVentElecUse[3], CUACResultsRef[#U]:IAQVentElecUse[4],  CUACResultsRef[#U]:IAQVentElecUse[5],  CUACResultsRef[#U]:IAQVentElecUse[6],
                              CUACResultsRef[#U]:IAQVentElecUse[7], CUACResultsRef[#U]:IAQVentElecUse[8], CUACResultsRef[#U]:IAQVentElecUse[9], CUACResultsRef[#U]:IAQVentElecUse[10], CUACResultsRef[#U]:IAQVentElecUse[11], CUACResultsRef[#U]:IAQVentElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(7to7)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Lighting,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                          CUACResultsRef[#U]:LtgElecUse[14], CUACResultsRef[#U]:LtgElecUse[13],
                              CUACResultsRef[#U]:LtgElecUse[1], CUACResultsRef[#U]:LtgElecUse[2], CUACResultsRef[#U]:LtgElecUse[3], CUACResultsRef[#U]:LtgElecUse[4],  CUACResultsRef[#U]:LtgElecUse[5],  CUACResultsRef[#U]:LtgElecUse[6],
                              CUACResultsRef[#U]:LtgElecUse[7], CUACResultsRef[#U]:LtgElecUse[8], CUACResultsRef[#U]:LtgElecUse[9], CUACResultsRef[#U]:LtgElecUse[10], CUACResultsRef[#U]:LtgElecUse[11], CUACResultsRef[#U]:LtgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(7to7)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Plug Loads,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                        CUACResultsRef[#U]:PlugLdsElecUse[14], CUACResultsRef[#U]:PlugLdsElecUse[13],
                              CUACResultsRef[#U]:PlugLdsElecUse[1], CUACResultsRef[#U]:PlugLdsElecUse[2], CUACResultsRef[#U]:PlugLdsElecUse[3], CUACResultsRef[#U]:PlugLdsElecUse[4],  CUACResultsRef[#U]:PlugLdsElecUse[5],  CUACResultsRef[#U]:PlugLdsElecUse[6],
                              CUACResultsRef[#U]:PlugLdsElecUse[7], CUACResultsRef[#U]:PlugLdsElecUse[8], CUACResultsRef[#U]:PlugLdsElecUse[9], CUACResultsRef[#U]:PlugLdsElecUse[10], CUACResultsRef[#U]:PlugLdsElecUse[11], CUACResultsRef[#U]:PlugLdsElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(7to7)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Refrigerator,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                          CUACResultsRef[#U]:RfrgElecUse[14], CUACResultsRef[#U]:RfrgElecUse[13],
                              CUACResultsRef[#U]:RfrgElecUse[1], CUACResultsRef[#U]:RfrgElecUse[2], CUACResultsRef[#U]:RfrgElecUse[3], CUACResultsRef[#U]:RfrgElecUse[4],  CUACResultsRef[#U]:RfrgElecUse[5],  CUACResultsRef[#U]:RfrgElecUse[6],
                              CUACResultsRef[#U]:RfrgElecUse[7], CUACResultsRef[#U]:RfrgElecUse[8], CUACResultsRef[#U]:RfrgElecUse[9], CUACResultsRef[#U]:RfrgElecUse[10], CUACResultsRef[#U]:RfrgElecUse[11], CUACResultsRef[#U]:RfrgElecUse[12] )  }
   "Write CUAC I/O CSV results"  for:#U=(7to7)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Washer,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                CUACResultsRef[#U]:WashElecUse[14], CUACResultsRef[#U]:WashElecUse[13],
                              CUACResultsRef[#U]:WashElecUse[1], CUACResultsRef[#U]:WashElecUse[2], CUACResultsRef[#U]:WashElecUse[3], CUACResultsRef[#U]:WashElecUse[4],  CUACResultsRef[#U]:WashElecUse[5],  CUACResultsRef[#U]:WashElecUse[6],
                              CUACResultsRef[#U]:WashElecUse[7], CUACResultsRef[#U]:WashElecUse[8], CUACResultsRef[#U]:WashElecUse[9], CUACResultsRef[#U]:WashElecUse[10], CUACResultsRef[#U]:WashElecUse[11], CUACResultsRef[#U]:WashElecUse[12] )  }
END
;*************************************************************************

; updated all Gas enduse writing rules to report kBtu (as opposed to before when it was reporting therms) - SAC 02/09/23
;************************************************************************* SAC 10/20/22
RULELIST "CUAC_WriteInputOutputCSV_GasEndUse_1" 1 0 0 0
   "Write CUAC I/O CSV results"  for:#U=(1to1)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,%s,Cooking,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", UnitTypeLabels[#U],                 CUACResultsRef[#U]:CkgGasUse[14]*100, CUACResultsRef[#U]:CkgGasUse[13]*100,
                              CUACResultsRef[#U]:CkgGasUse[1]*100, CUACResultsRef[#U]:CkgGasUse[2]*100, CUACResultsRef[#U]:CkgGasUse[3]*100, CUACResultsRef[#U]:CkgGasUse[4]*100,  CUACResultsRef[#U]:CkgGasUse[5]*100,  CUACResultsRef[#U]:CkgGasUse[6]*100,
                              CUACResultsRef[#U]:CkgGasUse[7]*100, CUACResultsRef[#U]:CkgGasUse[8]*100, CUACResultsRef[#U]:CkgGasUse[9]*100, CUACResultsRef[#U]:CkgGasUse[10]*100, CUACResultsRef[#U]:CkgGasUse[11]*100, CUACResultsRef[#U]:CkgGasUse[12]*100 )  }
   "Write CUAC I/O CSV results"  for:#U=(1to1)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,DHW,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                           CUACResultsRef[#U]:DHWGasUse[14]*100, CUACResultsRef[#U]:DHWGasUse[13]*100,
                              CUACResultsRef[#U]:DHWGasUse[1]*100, CUACResultsRef[#U]:DHWGasUse[2]*100, CUACResultsRef[#U]:DHWGasUse[3]*100, CUACResultsRef[#U]:DHWGasUse[4]*100,  CUACResultsRef[#U]:DHWGasUse[5]*100,  CUACResultsRef[#U]:DHWGasUse[6]*100,
                              CUACResultsRef[#U]:DHWGasUse[7]*100, CUACResultsRef[#U]:DHWGasUse[8]*100, CUACResultsRef[#U]:DHWGasUse[9]*100, CUACResultsRef[#U]:DHWGasUse[10]*100, CUACResultsRef[#U]:DHWGasUse[11]*100, CUACResultsRef[#U]:DHWGasUse[12]*100 )  }
   "Write CUAC I/O CSV results"  for:#U=(1to1)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Dryer,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                                 CUACResultsRef[#U]:DryerGasUse[14]*100, CUACResultsRef[#U]:DryerGasUse[13]*100,
                              CUACResultsRef[#U]:DryerGasUse[1]*100, CUACResultsRef[#U]:DryerGasUse[2]*100, CUACResultsRef[#U]:DryerGasUse[3]*100, CUACResultsRef[#U]:DryerGasUse[4]*100,  CUACResultsRef[#U]:DryerGasUse[5]*100,  CUACResultsRef[#U]:DryerGasUse[6]*100,
                              CUACResultsRef[#U]:DryerGasUse[7]*100, CUACResultsRef[#U]:DryerGasUse[8]*100, CUACResultsRef[#U]:DryerGasUse[9]*100, CUACResultsRef[#U]:DryerGasUse[10]*100, CUACResultsRef[#U]:DryerGasUse[11]*100, CUACResultsRef[#U]:DryerGasUse[12]*100 )  }
   "Write CUAC I/O CSV results"  for:#U=(1to1)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Heating,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                       CUACResultsRef[#U]:HtgGasUse[14]*100, CUACResultsRef[#U]:HtgGasUse[13]*100,
                              CUACResultsRef[#U]:HtgGasUse[1]*100, CUACResultsRef[#U]:HtgGasUse[2]*100, CUACResultsRef[#U]:HtgGasUse[3]*100, CUACResultsRef[#U]:HtgGasUse[4]*100,  CUACResultsRef[#U]:HtgGasUse[5]*100,  CUACResultsRef[#U]:HtgGasUse[6]*100,
                              CUACResultsRef[#U]:HtgGasUse[7]*100, CUACResultsRef[#U]:HtgGasUse[8]*100, CUACResultsRef[#U]:HtgGasUse[9]*100, CUACResultsRef[#U]:HtgGasUse[10]*100, CUACResultsRef[#U]:HtgGasUse[11]*100, CUACResultsRef[#U]:HtgGasUse[12]*100 )  }
END
;*************************************************************************
RULELIST "CUAC_WriteInputOutputCSV_GasEndUse_2" 1 0 0 0
   "Write CUAC I/O CSV results"  for:#U=(2to2)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,%s,Cooking,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", UnitTypeLabels[#U],                 CUACResultsRef[#U]:CkgGasUse[14]*100, CUACResultsRef[#U]:CkgGasUse[13]*100,
                              CUACResultsRef[#U]:CkgGasUse[1]*100, CUACResultsRef[#U]:CkgGasUse[2]*100, CUACResultsRef[#U]:CkgGasUse[3]*100, CUACResultsRef[#U]:CkgGasUse[4]*100,  CUACResultsRef[#U]:CkgGasUse[5]*100,  CUACResultsRef[#U]:CkgGasUse[6]*100,
                              CUACResultsRef[#U]:CkgGasUse[7]*100, CUACResultsRef[#U]:CkgGasUse[8]*100, CUACResultsRef[#U]:CkgGasUse[9]*100, CUACResultsRef[#U]:CkgGasUse[10]*100, CUACResultsRef[#U]:CkgGasUse[11]*100, CUACResultsRef[#U]:CkgGasUse[12]*100 )  }
   "Write CUAC I/O CSV results"  for:#U=(2to2)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,DHW,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                           CUACResultsRef[#U]:DHWGasUse[14]*100, CUACResultsRef[#U]:DHWGasUse[13]*100,
                              CUACResultsRef[#U]:DHWGasUse[1]*100, CUACResultsRef[#U]:DHWGasUse[2]*100, CUACResultsRef[#U]:DHWGasUse[3]*100, CUACResultsRef[#U]:DHWGasUse[4]*100,  CUACResultsRef[#U]:DHWGasUse[5]*100,  CUACResultsRef[#U]:DHWGasUse[6]*100,
                              CUACResultsRef[#U]:DHWGasUse[7]*100, CUACResultsRef[#U]:DHWGasUse[8]*100, CUACResultsRef[#U]:DHWGasUse[9]*100, CUACResultsRef[#U]:DHWGasUse[10]*100, CUACResultsRef[#U]:DHWGasUse[11]*100, CUACResultsRef[#U]:DHWGasUse[12]*100 )  }
   "Write CUAC I/O CSV results"  for:#U=(2to2)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Dryer,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                                 CUACResultsRef[#U]:DryerGasUse[14]*100, CUACResultsRef[#U]:DryerGasUse[13]*100,
                              CUACResultsRef[#U]:DryerGasUse[1]*100, CUACResultsRef[#U]:DryerGasUse[2]*100, CUACResultsRef[#U]:DryerGasUse[3]*100, CUACResultsRef[#U]:DryerGasUse[4]*100,  CUACResultsRef[#U]:DryerGasUse[5]*100,  CUACResultsRef[#U]:DryerGasUse[6]*100,
                              CUACResultsRef[#U]:DryerGasUse[7]*100, CUACResultsRef[#U]:DryerGasUse[8]*100, CUACResultsRef[#U]:DryerGasUse[9]*100, CUACResultsRef[#U]:DryerGasUse[10]*100, CUACResultsRef[#U]:DryerGasUse[11]*100, CUACResultsRef[#U]:DryerGasUse[12]*100 )  }
   "Write CUAC I/O CSV results"  for:#U=(2to2)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Heating,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                       CUACResultsRef[#U]:HtgGasUse[14]*100, CUACResultsRef[#U]:HtgGasUse[13]*100,
                              CUACResultsRef[#U]:HtgGasUse[1]*100, CUACResultsRef[#U]:HtgGasUse[2]*100, CUACResultsRef[#U]:HtgGasUse[3]*100, CUACResultsRef[#U]:HtgGasUse[4]*100,  CUACResultsRef[#U]:HtgGasUse[5]*100,  CUACResultsRef[#U]:HtgGasUse[6]*100,
                              CUACResultsRef[#U]:HtgGasUse[7]*100, CUACResultsRef[#U]:HtgGasUse[8]*100, CUACResultsRef[#U]:HtgGasUse[9]*100, CUACResultsRef[#U]:HtgGasUse[10]*100, CUACResultsRef[#U]:HtgGasUse[11]*100, CUACResultsRef[#U]:HtgGasUse[12]*100 )  }
END
;*************************************************************************
RULELIST "CUAC_WriteInputOutputCSV_GasEndUse_3" 1 0 0 0
   "Write CUAC I/O CSV results"  for:#U=(3to3)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,%s,Cooking,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", UnitTypeLabels[#U],                 CUACResultsRef[#U]:CkgGasUse[14]*100, CUACResultsRef[#U]:CkgGasUse[13]*100,
                              CUACResultsRef[#U]:CkgGasUse[1]*100, CUACResultsRef[#U]:CkgGasUse[2]*100, CUACResultsRef[#U]:CkgGasUse[3]*100, CUACResultsRef[#U]:CkgGasUse[4]*100,  CUACResultsRef[#U]:CkgGasUse[5]*100,  CUACResultsRef[#U]:CkgGasUse[6]*100,
                              CUACResultsRef[#U]:CkgGasUse[7]*100, CUACResultsRef[#U]:CkgGasUse[8]*100, CUACResultsRef[#U]:CkgGasUse[9]*100, CUACResultsRef[#U]:CkgGasUse[10]*100, CUACResultsRef[#U]:CkgGasUse[11]*100, CUACResultsRef[#U]:CkgGasUse[12]*100 )  }
   "Write CUAC I/O CSV results"  for:#U=(3to3)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,DHW,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                           CUACResultsRef[#U]:DHWGasUse[14]*100, CUACResultsRef[#U]:DHWGasUse[13]*100,
                              CUACResultsRef[#U]:DHWGasUse[1]*100, CUACResultsRef[#U]:DHWGasUse[2]*100, CUACResultsRef[#U]:DHWGasUse[3]*100, CUACResultsRef[#U]:DHWGasUse[4]*100,  CUACResultsRef[#U]:DHWGasUse[5]*100,  CUACResultsRef[#U]:DHWGasUse[6]*100,
                              CUACResultsRef[#U]:DHWGasUse[7]*100, CUACResultsRef[#U]:DHWGasUse[8]*100, CUACResultsRef[#U]:DHWGasUse[9]*100, CUACResultsRef[#U]:DHWGasUse[10]*100, CUACResultsRef[#U]:DHWGasUse[11]*100, CUACResultsRef[#U]:DHWGasUse[12]*100 )  }
   "Write CUAC I/O CSV results"  for:#U=(3to3)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Dryer,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                                 CUACResultsRef[#U]:DryerGasUse[14]*100, CUACResultsRef[#U]:DryerGasUse[13]*100,
                              CUACResultsRef[#U]:DryerGasUse[1]*100, CUACResultsRef[#U]:DryerGasUse[2]*100, CUACResultsRef[#U]:DryerGasUse[3]*100, CUACResultsRef[#U]:DryerGasUse[4]*100,  CUACResultsRef[#U]:DryerGasUse[5]*100,  CUACResultsRef[#U]:DryerGasUse[6]*100,
                              CUACResultsRef[#U]:DryerGasUse[7]*100, CUACResultsRef[#U]:DryerGasUse[8]*100, CUACResultsRef[#U]:DryerGasUse[9]*100, CUACResultsRef[#U]:DryerGasUse[10]*100, CUACResultsRef[#U]:DryerGasUse[11]*100, CUACResultsRef[#U]:DryerGasUse[12]*100 )  }
   "Write CUAC I/O CSV results"  for:#U=(3to3)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Heating,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                       CUACResultsRef[#U]:HtgGasUse[14]*100, CUACResultsRef[#U]:HtgGasUse[13]*100,
                              CUACResultsRef[#U]:HtgGasUse[1]*100, CUACResultsRef[#U]:HtgGasUse[2]*100, CUACResultsRef[#U]:HtgGasUse[3]*100, CUACResultsRef[#U]:HtgGasUse[4]*100,  CUACResultsRef[#U]:HtgGasUse[5]*100,  CUACResultsRef[#U]:HtgGasUse[6]*100,
                              CUACResultsRef[#U]:HtgGasUse[7]*100, CUACResultsRef[#U]:HtgGasUse[8]*100, CUACResultsRef[#U]:HtgGasUse[9]*100, CUACResultsRef[#U]:HtgGasUse[10]*100, CUACResultsRef[#U]:HtgGasUse[11]*100, CUACResultsRef[#U]:HtgGasUse[12]*100 )  }
END
;*************************************************************************
RULELIST "CUAC_WriteInputOutputCSV_GasEndUse_4" 1 0 0 0
   "Write CUAC I/O CSV results"  for:#U=(4to4)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,%s,Cooking,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", UnitTypeLabels[#U],                 CUACResultsRef[#U]:CkgGasUse[14]*100, CUACResultsRef[#U]:CkgGasUse[13]*100,
                              CUACResultsRef[#U]:CkgGasUse[1]*100, CUACResultsRef[#U]:CkgGasUse[2]*100, CUACResultsRef[#U]:CkgGasUse[3]*100, CUACResultsRef[#U]:CkgGasUse[4]*100,  CUACResultsRef[#U]:CkgGasUse[5]*100,  CUACResultsRef[#U]:CkgGasUse[6]*100,
                              CUACResultsRef[#U]:CkgGasUse[7]*100, CUACResultsRef[#U]:CkgGasUse[8]*100, CUACResultsRef[#U]:CkgGasUse[9]*100, CUACResultsRef[#U]:CkgGasUse[10]*100, CUACResultsRef[#U]:CkgGasUse[11]*100, CUACResultsRef[#U]:CkgGasUse[12]*100 )  }
   "Write CUAC I/O CSV results"  for:#U=(4to4)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,DHW,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                           CUACResultsRef[#U]:DHWGasUse[14]*100, CUACResultsRef[#U]:DHWGasUse[13]*100,
                              CUACResultsRef[#U]:DHWGasUse[1]*100, CUACResultsRef[#U]:DHWGasUse[2]*100, CUACResultsRef[#U]:DHWGasUse[3]*100, CUACResultsRef[#U]:DHWGasUse[4]*100,  CUACResultsRef[#U]:DHWGasUse[5]*100,  CUACResultsRef[#U]:DHWGasUse[6]*100,
                              CUACResultsRef[#U]:DHWGasUse[7]*100, CUACResultsRef[#U]:DHWGasUse[8]*100, CUACResultsRef[#U]:DHWGasUse[9]*100, CUACResultsRef[#U]:DHWGasUse[10]*100, CUACResultsRef[#U]:DHWGasUse[11]*100, CUACResultsRef[#U]:DHWGasUse[12]*100 )  }
   "Write CUAC I/O CSV results"  for:#U=(4to4)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Dryer,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                                 CUACResultsRef[#U]:DryerGasUse[14]*100, CUACResultsRef[#U]:DryerGasUse[13]*100,
                              CUACResultsRef[#U]:DryerGasUse[1]*100, CUACResultsRef[#U]:DryerGasUse[2]*100, CUACResultsRef[#U]:DryerGasUse[3]*100, CUACResultsRef[#U]:DryerGasUse[4]*100,  CUACResultsRef[#U]:DryerGasUse[5]*100,  CUACResultsRef[#U]:DryerGasUse[6]*100,
                              CUACResultsRef[#U]:DryerGasUse[7]*100, CUACResultsRef[#U]:DryerGasUse[8]*100, CUACResultsRef[#U]:DryerGasUse[9]*100, CUACResultsRef[#U]:DryerGasUse[10]*100, CUACResultsRef[#U]:DryerGasUse[11]*100, CUACResultsRef[#U]:DryerGasUse[12]*100 )  }
   "Write CUAC I/O CSV results"  for:#U=(4to4)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Heating,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                       CUACResultsRef[#U]:HtgGasUse[14]*100, CUACResultsRef[#U]:HtgGasUse[13]*100,
                              CUACResultsRef[#U]:HtgGasUse[1]*100, CUACResultsRef[#U]:HtgGasUse[2]*100, CUACResultsRef[#U]:HtgGasUse[3]*100, CUACResultsRef[#U]:HtgGasUse[4]*100,  CUACResultsRef[#U]:HtgGasUse[5]*100,  CUACResultsRef[#U]:HtgGasUse[6]*100,
                              CUACResultsRef[#U]:HtgGasUse[7]*100, CUACResultsRef[#U]:HtgGasUse[8]*100, CUACResultsRef[#U]:HtgGasUse[9]*100, CUACResultsRef[#U]:HtgGasUse[10]*100, CUACResultsRef[#U]:HtgGasUse[11]*100, CUACResultsRef[#U]:HtgGasUse[12]*100 )  }
END
;*************************************************************************
RULELIST "CUAC_WriteInputOutputCSV_GasEndUse_5" 1 0 0 0
   "Write CUAC I/O CSV results"  for:#U=(5to5)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,%s,Cooking,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", UnitTypeLabels[#U],                 CUACResultsRef[#U]:CkgGasUse[14]*100, CUACResultsRef[#U]:CkgGasUse[13]*100,
                              CUACResultsRef[#U]:CkgGasUse[1]*100, CUACResultsRef[#U]:CkgGasUse[2]*100, CUACResultsRef[#U]:CkgGasUse[3]*100, CUACResultsRef[#U]:CkgGasUse[4]*100,  CUACResultsRef[#U]:CkgGasUse[5]*100,  CUACResultsRef[#U]:CkgGasUse[6]*100,
                              CUACResultsRef[#U]:CkgGasUse[7]*100, CUACResultsRef[#U]:CkgGasUse[8]*100, CUACResultsRef[#U]:CkgGasUse[9]*100, CUACResultsRef[#U]:CkgGasUse[10]*100, CUACResultsRef[#U]:CkgGasUse[11]*100, CUACResultsRef[#U]:CkgGasUse[12]*100 )  }
   "Write CUAC I/O CSV results"  for:#U=(5to5)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,DHW,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                           CUACResultsRef[#U]:DHWGasUse[14]*100, CUACResultsRef[#U]:DHWGasUse[13]*100,
                              CUACResultsRef[#U]:DHWGasUse[1]*100, CUACResultsRef[#U]:DHWGasUse[2]*100, CUACResultsRef[#U]:DHWGasUse[3]*100, CUACResultsRef[#U]:DHWGasUse[4]*100,  CUACResultsRef[#U]:DHWGasUse[5]*100,  CUACResultsRef[#U]:DHWGasUse[6]*100,
                              CUACResultsRef[#U]:DHWGasUse[7]*100, CUACResultsRef[#U]:DHWGasUse[8]*100, CUACResultsRef[#U]:DHWGasUse[9]*100, CUACResultsRef[#U]:DHWGasUse[10]*100, CUACResultsRef[#U]:DHWGasUse[11]*100, CUACResultsRef[#U]:DHWGasUse[12]*100 )  }
   "Write CUAC I/O CSV results"  for:#U=(5to5)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Dryer,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                                 CUACResultsRef[#U]:DryerGasUse[14]*100, CUACResultsRef[#U]:DryerGasUse[13]*100,
                              CUACResultsRef[#U]:DryerGasUse[1]*100, CUACResultsRef[#U]:DryerGasUse[2]*100, CUACResultsRef[#U]:DryerGasUse[3]*100, CUACResultsRef[#U]:DryerGasUse[4]*100,  CUACResultsRef[#U]:DryerGasUse[5]*100,  CUACResultsRef[#U]:DryerGasUse[6]*100,
                              CUACResultsRef[#U]:DryerGasUse[7]*100, CUACResultsRef[#U]:DryerGasUse[8]*100, CUACResultsRef[#U]:DryerGasUse[9]*100, CUACResultsRef[#U]:DryerGasUse[10]*100, CUACResultsRef[#U]:DryerGasUse[11]*100, CUACResultsRef[#U]:DryerGasUse[12]*100 )  }
   "Write CUAC I/O CSV results"  for:#U=(5to5)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Heating,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                       CUACResultsRef[#U]:HtgGasUse[14]*100, CUACResultsRef[#U]:HtgGasUse[13]*100,
                              CUACResultsRef[#U]:HtgGasUse[1]*100, CUACResultsRef[#U]:HtgGasUse[2]*100, CUACResultsRef[#U]:HtgGasUse[3]*100, CUACResultsRef[#U]:HtgGasUse[4]*100,  CUACResultsRef[#U]:HtgGasUse[5]*100,  CUACResultsRef[#U]:HtgGasUse[6]*100,
                              CUACResultsRef[#U]:HtgGasUse[7]*100, CUACResultsRef[#U]:HtgGasUse[8]*100, CUACResultsRef[#U]:HtgGasUse[9]*100, CUACResultsRef[#U]:HtgGasUse[10]*100, CUACResultsRef[#U]:HtgGasUse[11]*100, CUACResultsRef[#U]:HtgGasUse[12]*100 )  }
END
;*************************************************************************
RULELIST "CUAC_WriteInputOutputCSV_GasEndUse_6" 1 0 0 0
   "Write CUAC I/O CSV results"  for:#U=(6to6)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,%s,Cooking,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", UnitTypeLabels[#U],                 CUACResultsRef[#U]:CkgGasUse[14]*100, CUACResultsRef[#U]:CkgGasUse[13]*100,
                              CUACResultsRef[#U]:CkgGasUse[1]*100, CUACResultsRef[#U]:CkgGasUse[2]*100, CUACResultsRef[#U]:CkgGasUse[3]*100, CUACResultsRef[#U]:CkgGasUse[4]*100,  CUACResultsRef[#U]:CkgGasUse[5]*100,  CUACResultsRef[#U]:CkgGasUse[6]*100,
                              CUACResultsRef[#U]:CkgGasUse[7]*100, CUACResultsRef[#U]:CkgGasUse[8]*100, CUACResultsRef[#U]:CkgGasUse[9]*100, CUACResultsRef[#U]:CkgGasUse[10]*100, CUACResultsRef[#U]:CkgGasUse[11]*100, CUACResultsRef[#U]:CkgGasUse[12]*100 )  }
   "Write CUAC I/O CSV results"  for:#U=(6to6)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,DHW,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                           CUACResultsRef[#U]:DHWGasUse[14]*100, CUACResultsRef[#U]:DHWGasUse[13]*100,
                              CUACResultsRef[#U]:DHWGasUse[1]*100, CUACResultsRef[#U]:DHWGasUse[2]*100, CUACResultsRef[#U]:DHWGasUse[3]*100, CUACResultsRef[#U]:DHWGasUse[4]*100,  CUACResultsRef[#U]:DHWGasUse[5]*100,  CUACResultsRef[#U]:DHWGasUse[6]*100,
                              CUACResultsRef[#U]:DHWGasUse[7]*100, CUACResultsRef[#U]:DHWGasUse[8]*100, CUACResultsRef[#U]:DHWGasUse[9]*100, CUACResultsRef[#U]:DHWGasUse[10]*100, CUACResultsRef[#U]:DHWGasUse[11]*100, CUACResultsRef[#U]:DHWGasUse[12]*100 )  }
   "Write CUAC I/O CSV results"  for:#U=(6to6)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Dryer,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                                 CUACResultsRef[#U]:DryerGasUse[14]*100, CUACResultsRef[#U]:DryerGasUse[13]*100,
                              CUACResultsRef[#U]:DryerGasUse[1]*100, CUACResultsRef[#U]:DryerGasUse[2]*100, CUACResultsRef[#U]:DryerGasUse[3]*100, CUACResultsRef[#U]:DryerGasUse[4]*100,  CUACResultsRef[#U]:DryerGasUse[5]*100,  CUACResultsRef[#U]:DryerGasUse[6]*100,
                              CUACResultsRef[#U]:DryerGasUse[7]*100, CUACResultsRef[#U]:DryerGasUse[8]*100, CUACResultsRef[#U]:DryerGasUse[9]*100, CUACResultsRef[#U]:DryerGasUse[10]*100, CUACResultsRef[#U]:DryerGasUse[11]*100, CUACResultsRef[#U]:DryerGasUse[12]*100 )  }
   "Write CUAC I/O CSV results"  for:#U=(6to6)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Heating,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                       CUACResultsRef[#U]:HtgGasUse[14]*100, CUACResultsRef[#U]:HtgGasUse[13]*100,
                              CUACResultsRef[#U]:HtgGasUse[1]*100, CUACResultsRef[#U]:HtgGasUse[2]*100, CUACResultsRef[#U]:HtgGasUse[3]*100, CUACResultsRef[#U]:HtgGasUse[4]*100,  CUACResultsRef[#U]:HtgGasUse[5]*100,  CUACResultsRef[#U]:HtgGasUse[6]*100,
                              CUACResultsRef[#U]:HtgGasUse[7]*100, CUACResultsRef[#U]:HtgGasUse[8]*100, CUACResultsRef[#U]:HtgGasUse[9]*100, CUACResultsRef[#U]:HtgGasUse[10]*100, CUACResultsRef[#U]:HtgGasUse[11]*100, CUACResultsRef[#U]:HtgGasUse[12]*100 )  }
END
;*************************************************************************
RULELIST "CUAC_WriteInputOutputCSV_GasEndUse_7" 1 0 0 0
   "Write CUAC I/O CSV results"  for:#U=(7to7)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,%s,Cooking,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", UnitTypeLabels[#U],                 CUACResultsRef[#U]:CkgGasUse[14]*100, CUACResultsRef[#U]:CkgGasUse[13]*100,
                              CUACResultsRef[#U]:CkgGasUse[1]*100, CUACResultsRef[#U]:CkgGasUse[2]*100, CUACResultsRef[#U]:CkgGasUse[3]*100, CUACResultsRef[#U]:CkgGasUse[4]*100,  CUACResultsRef[#U]:CkgGasUse[5]*100,  CUACResultsRef[#U]:CkgGasUse[6]*100,
                              CUACResultsRef[#U]:CkgGasUse[7]*100, CUACResultsRef[#U]:CkgGasUse[8]*100, CUACResultsRef[#U]:CkgGasUse[9]*100, CUACResultsRef[#U]:CkgGasUse[10]*100, CUACResultsRef[#U]:CkgGasUse[11]*100, CUACResultsRef[#U]:CkgGasUse[12]*100 )  }
   "Write CUAC I/O CSV results"  for:#U=(7to7)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,DHW,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                           CUACResultsRef[#U]:DHWGasUse[14]*100, CUACResultsRef[#U]:DHWGasUse[13]*100,
                              CUACResultsRef[#U]:DHWGasUse[1]*100, CUACResultsRef[#U]:DHWGasUse[2]*100, CUACResultsRef[#U]:DHWGasUse[3]*100, CUACResultsRef[#U]:DHWGasUse[4]*100,  CUACResultsRef[#U]:DHWGasUse[5]*100,  CUACResultsRef[#U]:DHWGasUse[6]*100,
                              CUACResultsRef[#U]:DHWGasUse[7]*100, CUACResultsRef[#U]:DHWGasUse[8]*100, CUACResultsRef[#U]:DHWGasUse[9]*100, CUACResultsRef[#U]:DHWGasUse[10]*100, CUACResultsRef[#U]:DHWGasUse[11]*100, CUACResultsRef[#U]:DHWGasUse[12]*100 )  }
   "Write CUAC I/O CSV results"  for:#U=(7to7)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Dryer,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                                 CUACResultsRef[#U]:DryerGasUse[14]*100, CUACResultsRef[#U]:DryerGasUse[13]*100,
                              CUACResultsRef[#U]:DryerGasUse[1]*100, CUACResultsRef[#U]:DryerGasUse[2]*100, CUACResultsRef[#U]:DryerGasUse[3]*100, CUACResultsRef[#U]:DryerGasUse[4]*100,  CUACResultsRef[#U]:DryerGasUse[5]*100,  CUACResultsRef[#U]:DryerGasUse[6]*100,
                              CUACResultsRef[#U]:DryerGasUse[7]*100, CUACResultsRef[#U]:DryerGasUse[8]*100, CUACResultsRef[#U]:DryerGasUse[9]*100, CUACResultsRef[#U]:DryerGasUse[10]*100, CUACResultsRef[#U]:DryerGasUse[11]*100, CUACResultsRef[#U]:DryerGasUse[12]*100 )  }
   "Write CUAC I/O CSV results"  for:#U=(7to7)   CUAC:Action =
               {  WriteToExportFile( InOutCSVFileIdx, ",,,Heating,%.2f,%.0f,,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n",                                       CUACResultsRef[#U]:HtgGasUse[14]*100, CUACResultsRef[#U]:HtgGasUse[13]*100,
                              CUACResultsRef[#U]:HtgGasUse[1]*100, CUACResultsRef[#U]:HtgGasUse[2]*100, CUACResultsRef[#U]:HtgGasUse[3]*100, CUACResultsRef[#U]:HtgGasUse[4]*100,  CUACResultsRef[#U]:HtgGasUse[5]*100,  CUACResultsRef[#U]:HtgGasUse[6]*100,
                              CUACResultsRef[#U]:HtgGasUse[7]*100, CUACResultsRef[#U]:HtgGasUse[8]*100, CUACResultsRef[#U]:HtgGasUse[9]*100, CUACResultsRef[#U]:HtgGasUse[10]*100, CUACResultsRef[#U]:HtgGasUse[11]*100, CUACResultsRef[#U]:HtgGasUse[12]*100 )  }
END
;*************************************************************************




;*************************************************************************
;*************************************************************************

ENDFILE
