; -------------------------------------------------------------------------
; Rules pertaining to:   Conversion of Proposed Building Model into Budget/Standard Design
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2014, California Energy Commission
; Copyright (c) 2012-2014, Wrightsoft Corporation
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
; STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------

ENUM_PROPERTIES_VALUE   ; ensures retrieval/logic/us of enum properties assume numeric value (alternative is ENUM_PROPERTIES_STRING)

;*************************************************************************
;*************************************************************************
;55555
RULELIST  "BudgetConversion" 1 0 1 0
;
;   Rules that govern the conversion of the proposed building design to the
;   budget building design.  Any building database parameters that are not
;   defined in these rules will be copied from the proposed building design.
;
;*************************************************************************
;*************************************************************************
;"log status"   ResProj:Action = {  if (DevMode==0 .OR. LocalStatus(RunAbbrev) < 1 .OR. EnergyCodeYearNum < 2019) then  UNCHANGED  else
;   PostMessageToLog( "    evaluating 'BudgetConversion' rules on '%s' model...", RunAbbrev )  endif  }

;	"store BEMProc details"		ResProj:Action = {  StoreBEMProc( "begin BudgetConv", 0 )  }
;"dbg" Proj:Action = {  PostMessageToLog( "   eval rulelist 'BudgetConversion' for run %s", RunAbbrev )  }

   ;--------------------------------------------------------------------
   ; BudgetConversion: ResProject Rules
   ;--------------------------------------------------------------------

	"Set ResProj:StdsVersionYr"	ResProj:StdsVersionYr	=        ; ensure consistency w/ StandardsVersion (which may have been reset due to source code mod of StdDesignBase) - SAC 11/30/21 (MFam)
      {  if (IsComRuleset) then  UNCHANGED
         else  StandardsVersion  endif  }

  ; SAC 12/14/12 - added rules to setup certain run ID-related properties
  ; SAC 3/27/15 - revisions to support DesignRating simulation (RunNum = StdDesign RunNum + 1)
  ; "Set ResProj:RunNumber"			ResProj:RunNumber			= {	if (AllOrientations < 0.5) then  2  else  5  endif  }
;	"Set ResProj:RunNumber"			ResProj:RunNumber			= {	RunNumber + 1  }		- SAC 4/21/15 - now set in source code
;	"Set ResProj:RunAbbrev"			ResProj:RunAbbrev			= {	if ( AnalysisType == 13 .AND.       - now set in compliance engine source - SAC 8/4/17
;																				  ( (AllOrientations < 0.5 .AND. RunNumber == 2) .OR.
;																					 (AllOrientations > 0.5 .AND. RunNumber == 5) ) ) then  "s"  else  "dr"  endif  }
;"dbg" ResProj:Action = { MessageBox( "in BudgetConversion, RunAbbrev = %s", RunAbbrev ) }
	"Set ResProj:RunID"				ResProj:RunID				= {	if (RunAbbrev == "s" .OR. RunAbbrev == "zb") then  "Standard"
                                                         else if (RunAbbrev == "smf") then  "StdMixedFuel"
                                                         else  "DesignRating"  endif endif  }
	"Set ResProj:RunIDProcFile"	ResProj:RunIDProcFile	= {	if (RunAbbrev == "s" .OR. RunAbbrev == "zb") then	" - Std"
                                                         else if (RunAbbrev == "smf") then  " - SMF"
                                                         else  " - DRtg"       endif endif  }
	"Set ResProj:DRtgRefRunID"		ResProj:DRtgRefRunID		= {	if (AllowDesignRating > 0.5 .AND. RunAbbrev == "dr") then  DesignRatingBase  else  0  endif  }		; SAC 3/11/16 - added to facilitate RESNET2014 rules

   "Store ResProj:PropSFamCompactFactor for use in modeling Alt/Ex DHW systems"        ResProj:PropSFamCompactFactor =        ; SAC 09/02/20 (tic #1187)
      {  if (IfValidAnd( SFamCompactFactor > 0 ))
         then  SFamCompactFactor
         else  UNDEFINED  endif  }
   "Store DwellUnitType:PropCompactFactor for use in modeling Alt/Ex DHW systems"   DwellUnitType:PropCompactFactor =   ; SAC 09/02/20 (tic #1187)
      {  if (IfValidAnd( CompactFactor > 0 ))
         then  CompactFactor
         else  UNDEFINED  endif  }

;   "Convert any ResOtherZn and DwellUnitType IAQOptions from Central* to Individual IAQ Fans (to facilitate std design conversions)"   ResProj:Action =     ; SAC 06/06/22
;      {  EvalRulelist( "Convert_ResVent_CentralToIndividual" )  }

   "Set ResProj:ApplyStdDesignIAQFromTable - whether or not to apply std design IAQ settings from the custom std design table"   ResProj:ApplyStdDesignIAQFromTable =   ; SAC 04/03/21
      {  if ((IfValidAnd( AllowStdDesignFuel > 0 ) .OR. IfValidAnd( Proj:AnalysisVersion >= 220000 )) .AND. IfValidAnd( StdDesignIAQType[1] > 0 ) .AND.
             IfValidAnd( BypassRuleLimits > 0 )==0 .AND.
             (IfValidAnd( MostUserDUIAQ_Exhaust > 0 ) .OR. IfValidAnd( IAQSupInletsAccessible > 0 )) .AND.
             (RunAbbrev == "s" .OR. RunAbbrev == "zb" .OR. RunAbbrev == "smf"))
         then  1  else  0  endif  }

;"dbg" ResProj:Action = {  PostMessageToLog( "   BudgetConversion set appl fuel:  RunAbbrev %s / AllowStdDesignFuel %g / AnalysisVersion %g / StdDesignFuel %g", RunAbbrev, AllowStdDesignFuel, Proj:AnalysisVersion, StdDesignFuel )  }
   "Transform current model enduse fuel to force Standard/Design Rating model fuel"    ResProj:Action =     ; SAC 6/13/20 (2022AllElecStd) - SAC 6/18/20 - SAC 7/2/20   | revised fixing std design & adding DRtg - SAC 01/15/21   | prevent fuel switching for EAA runs - SAC 11/30/21 (MFam)
      {  if ((RunAbbrev == "s" .OR. RunAbbrev == "zb" .OR. (SMFFollowsStdDesignFuel .AND. RunAbbrev == "smf")) .AND.
             (IfValidAnd( AllowStdDesignFuel > 0 ) .OR. IfValidAnd( Proj:AnalysisVersion >= 220000 )) .AND. RunScope == 1 .AND. IfValidAnd( StdDesignFuel > 0 ))
         then  EvalRulelist( "BudgetConversion_Std_SpecifyFuel" )
         else if (RunAbbrev == "dr" .AND. IfValidAnd( AllowDRtgDesignFuel > 0 ) .AND. IfValidAnd( DRtgDesignFuel > 0 ))
         then  EvalRulelist( "BudgetConversion_DRtg_SpecifyFuel" )
         else  UNCHANGED  endif endif  }

   ; added rule to fix problem where Std design HVAC system not properly setup in EAA models - SAC 10/03/22 (Res tic #1301) - merged from Res - SAC 10/09/22
   "Transform HVACSys settings in EAA models where needed"     HVACSys:Action =
      {  if (IfValidAnd( ResProj:EnergyCodeYearNum >= 2022 )==0 .OR. ResProj:RunScope == 1 .OR.
             Status < 2) then  UNCHANGED
         else if (ResProj:RunAbbrev == "s" .OR. (ResProj:SMFFollowsStdDesignFuel .AND. ResProj:RunAbbrev == "smf"))
         then  if (     Type == 2 .AND. IfValidAnd( StdHeatingType = 1 ))    ; CntrlFurnace
               then  EvalRulelist( "ConvertTo_HVACSys_ACFurnace", 1 )
               else if (Type != 2 .AND. IfValidAnd( StdHeatingType = 4 ))    ; SplitHeatPump
               then  EvalRulelist( "ConvertTo_HVACSys_HeatPump", 1 )
               else  UNCHANGED
               endif endif
         else  UNCHANGED
         endif endif  }  

   "Convert Central HVAC to AC/Furn or HtPump"     HVACSys:Action  =       ; SAC 09/22/22
      {  if (Type == 4 .AND. Status == 3 .AND. IfValidAnd( FloorAreaServed[1] > 0 ))
         then  switch (T24RCustomStandardDesign:HVAC( "StdOption", EnumString( ResProj:StdDesignFuel ), "BldgType", ResProj:BldgTypeTblStr, "NumPropHPWH", ResProj:NumProposedHPWHs, "ClimateZone", Proj:ClimateZone ))
                  case "Electricity"  :  EvalRulelist( "ConvertTo_HVACSys_HeatPump", 1 )
                  case "Gas"          :  EvalRulelist( "ConvertTo_HVACSys_ACFurnace", 1 )
                  case "Proposed"     :  switch (EnumString( HVACCentralRef[1]:Type ))
                                            case "Four-pipe fan coil"         :  EvalRulelist( "ConvertTo_HVACSys_ACFurnace", 1 )
                                            case "Water source heat pump"     :  EvalRulelist( "ConvertTo_HVACSys_HeatPump", 1 )
                                            case "Variable refrigerant flow"  :  EvalRulelist( "ConvertTo_HVACSys_HeatPump", 1 )
                                            default                           :  PostError( "Missing mapping to Standard Design HVAC type for central residential HVAC system '%s', type '%s'", Name, EnumString( HVACCentralRef[1]:Type ) )
                                         endswitch
                  default             :  PostError( "Unexpected Standard Design HVAC type returned for central residential HVAC system '%s'", Name )
               endswitch
         else  UNCHANGED  endif  }

	; SAC 4/18/16 - bug fix - ensure EDR reference runs ALWAYS based on 2013 internal gains mechanism
	"Set ResProj:IntGainsMethod"	ResProj:IntGainsMethod	= {	if (DRtgRefRunID == 2014) then  2013  else  UNCHANGED  endif  }
;"debugging" ResProj:Action = { if (RunAbbrev == "s") then  MessageBox( "Model stored for %s:%g run", RunID, StdsVersionYr )  else  MessageBox( "Model stored for %s:%s run", RunID, EnumString( DesignRatingBase ) )  endif }
   ; SAC 2/28/18 - revised logic to prevent mods to ResProj:FuelTDVLabel & Fuel_Have* for 2019+ analysis (w/ no NatGasAvailable flag) (tic #992)
	"Set ResProj:FuelTDVLabel"					ResProj:FuelTDVLabel			= {
         if (IfValidAnd( EnergyCodeYearNum >= 2019 )) then  UNCHANGED
         else if (StdsVersionYr > 2016)		; SAC 11/9/15
         then	if (NatGasAvailable > 0.5) then  "Natural Gas"  else  "Other"  endif
         else  UNCHANGED  endif endif  }
	; SAC 11/9/15 - moved setting of ResProj:Fuel_Have* flags from CSE_Sim rulelist to here and elsewhere (to support 2016 analysis)
	"Set flag - ResProj:Fuel_HaveElec"		ResProj:Fuel_HaveElec		= {	1 }
	"Set flag - ResProj:Fuel_HaveNatGas"	ResProj:Fuel_HaveNatGas		= {
         if (IfValidAnd( EnergyCodeYearNum >= 2019 )) then  UNCHANGED
         else if (NatGasAvailable > 0.5) then  1  else  0  endif endif  }
	"Set flag - ResProj:Fuel_HaveOther"		ResProj:Fuel_HaveOther		= {
         if (IfValidAnd( EnergyCodeYearNum >= 2019 )) then  UNCHANGED
         else if (Fuel_HaveNatGas > 0.5) then  0  else  1  endif endif  }

	; reset appliance data that may NOT have been for Proposed model if BypassRuleLimits is activated - SAC 7/27/15
	"Re-default any/all appliance data"		ResProj:Action	= {	EvalRulelist( "OverrideApplianceData" )  }
	; SAC 1/6/16 - added one additional appliance adjustment not done in OverrideApplianceData
	; SAC 4/30/17 - added logic to prevent override of ApplDryerFuel for DRtg runs (tic #837)
   ; SAC 6/22/17 - added logic to ensure no standard design change in appliance fuel for 2016+ code vintages (tic #844)
	"Reset ResProj:ApplDryerFuel[1]"				ResProj:ApplDryerFuel[1]	= {
         if (Appl_HaveDryer[1] < 0.5 .OR. StdsVersionYr >= 2016 .OR. DRtgRefRunID == 2014) then  UNCHANGED
         else	if (Fuel_HaveNatGas == 0) then  1  else  2  endif endif  }

	; ensure no user-specified ResZn:TstatIncludeFile data preserved in baseline design
	"Blast any ResZn:TstatIncludeFile specification"		ResZn:TstatIncludeFile	= {	UNDEFINED  }

	; ensure no user-specified disabling of IAQ vent preserved in baseline design
	"Reset ResProj:DisableIAQ flag"					ResProj:DisableIAQ				= {	0  }
	"Reset DwellUnitType:DisableIAQ flag"		DwellUnitType:DisableIAQ	= {	0  }

  ; SAC 12/31/15 - reset possible user specification of reduced attic relief free vent area (tic 596)
	"Reset ResProj:UnitClVentLowArea"		ResProj:UnitClVentLowArea	= {	0  }		; Whether or not there is reduced attic relief vent free area
   ; SAC 11/5/17 - added ClVentVerified for 2019 analysis (tic #920)
   "Reset ResProj:ClVentVerified"         ResProj:ClVentVerified     = {   0  }

  ; SAC 4/3/17 - ensure PreCooling toggled OFF
   "Ensure ResProj:UsePreCooling off"     ResProj:UsePreCooling      = {   0  }

	; setup budget model cooling (in cases where cooling not simulated in proposed model for No Cooling systems) - SAC 7/30/15
	"Setup budget cooling, etc."		ResProj:Action		= {	if (SumAll( HVACSys:NoPropCoolingSim ) < 1) then  UNCHANGED
																			else	EvalRulelist( "SetupBudgetHVAC" )  endif  }

   ; SAC 7/2/20 - added rules to ensure proper values for NEM & NSC in standard (& design rating) models
   "Set Proj:NetEnergyMeteringTDVAdj"  Proj:NetEnergyMeteringTDVAdj  =        ; SAC 6/10/20 (CommunitySolar)
      {  if (IfValidAnd( CommunitySolarProjID > 0 )) then  0
         else if (IfValidAnd( EngyCodeYearNum >= 2019 ))
         then  0.985 / ValidOr( TDVMult_Elec, 1 )     ; NEM 2.0 TDV adjustment factor
         else  UNCHANGED  endif endif  }
   "Set Proj:NetEnergyMeteringNSCAdj"  Proj:NetEnergyMeteringNSCAdj  =        ; SAC 6/10/20 (CommunitySolar)
      {  if (IfValidAnd( CommunitySolarProjID > 0 )) then  0
         else if (IfValidAnd( EngyCodeYearNum >= 2019 ))
         then  int( (1000 * T24RClimateZoneCodeBase:NetSurpComp( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:CompCodeBase, "BldgType", Proj:BldgTypeTblStr ) / 3.412) + 0.5 ) / 1000
         else  UNCHANGED  endif endif  }


; SAC 11/3/14 - moved this Attic stuff UP from below - prior to CathedralCeiling obejcts being converted to CeilingBelowAttics for std design model
   ;--------------------------------------------------------------------
   ; BudgetConversion: Ensure Conditioned/Sealed attic reverted to Ventilated for standard run  - SAC 4/27/14
   ;--------------------------------------------------------------------
	"Reset Attic:Type to 'Ventilated' (value = 0)"		Attic:Type	= {	if (FloorArea > 0.1 .AND. Type == 1) then  0  else  UNCHANGED  endif  }

	; SAC 11/3/14 - call subordinate rulelist to evaluate certain other attic area rules used to determine when attics are cool-ventable and can be assigned to CathedralCeilings converted to CeilingBelowAttics for std design model
	"Perform more Attic area defaulting"	Attic:Action	= {	EvalRulelist( "Default_AtticAreas", 1 )  }


   ;--------------------------------------------------------------------
   ; BudgetConversion: for SFam or <2022 analysis: Convert CathedralCeiling objects to CeilingBelowAttic
   ;                   for MFam 2022+: retain CathedralCeiling and update Construction
   ;--------------------------------------------------------------------
	"Set ResProj:NumPropClgBlwAtticObjs"		ResProj:NumPropClgBlwAtticObjs	= {	ComponentCount( CeilingBelowAttic )  }
   "Budget conversion of CathedralCeiling"   Proj:Action =
      {  if (ComponentCount( CathedralCeiling ) < 1) then  UNCHANGED
         else if (Proj:IsSFamResRuleset .OR. AnalysisVersion <= 220000)
         then  EvalRulelist( "BudgetConversion_Res_CathClgToAttic" )
         else  EvalRulelist( "BudgetConversion_Res_MFamCathClg" )
         endif endif  }

	"Eval ProposedInput rules to setup other Attic & Roof-related objects if new CeilingBelowAttic objects were just created"     ResProj:Action	=
		{  if (ComponentCount( CeilingBelowAttic ) < (NumPropClgBlwAtticObjs + 0.5)) then  UNCHANGED
			else if (IfValidAnd( IsSFamResRuleset > 0 ))
         then  EvalRulelist( "ProposedInput" )
         else  EvalRulelist( "ProposedInput_MFam" )  endif endif  }


   ;--------------------------------------------------------------------
   ; BudgetConversion: AirNet (building-wide ACH50) - Res ACM section 2.2.2.1
	; mjb E+A+A	12/3/13
   ;--------------------------------------------------------------------
;   "Set ResProj:ACH50 for standard design"		ResProj:ACH50	= {	5.0  }
; SAC 9/4/13 - added logic to fix ACH50 defaulting bug (GC issue 169)
	"Assign altered ACH50"							ResProj:AltACH50 = { ACH50 }
; mjb 1/30/15 - mod to lookup std. ACH50 from T24RClimateZoneCodeBase
; SAC 4/15/15 - adjust for MFam duplex/townhomes options (based on ResProj:IsMFamDupOrTownhm)
   "Set ResProj:ACH50 for standard design"		ResProj:ACH50	= {	if (IsNew .OR. IsAltered) then
;   																					if (ResProj:IsMultiFamily > 0.5) then	7.0  else  5.0  endif
   																					T24RClimateZoneCodeBase:ACH50( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
   																					else UNCHANGED endif  }
  "Change Altered ACH50 to Exist ACH50 if better than Code"  
      													ResProj:ACH50    = { 	if (IsAltered .AND. IsVerified) then
																							if ( AltACH50 <= ACH50) then exACH50
																							else UNCHANGED endif
																						else UNCHANGED endif	}

   ;--------------------------------------------------------------------
   ; BudgetConversion: Insulation Quality - Res ACM section 2.2.3
   ;--------------------------------------------------------------------
;    "Set ResProj:InsulConsQuality for standard design"		ResProj:InsulConsQuality	= {	"Standard"  }
; temp setting for QII in RESNET Reference Spec - mjb 10/26/15
   ; SAC 4/11/17 - revised std design fixed 'Standard' to reference T24RClimateZoneCodeBase table
   ; SAC 1/16/19 - selection switched from Std/Improved to No/Yes for 2019 (tic #1064)
   "Set ResProj:InsulConsQuality for standard design or design rating"     ResProj:InsulConsQuality	= {
         if (ResProj:DRtgRefRunID == 2014)
         then  if (IfValidAnd( EnergyCodeYearNum >= 2019 )) then  "Yes"  else  "Improved"  endif
         else  T24RClimateZoneCodeBase:StdInsulConsQuality( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )  endif  }
       ;  else "Standard" endif  }

; change setpoint schedules for design rating   mjb  RESNET 02/12/16
	"Reset ResZn:CoolTDaySched for Design Rating model"
			ResZn:CoolTDaySched	= {	if (ResProj:DRtgRefRunID == 2014) then RuleLibrary( SchDay, "RESNET SZ Cool Hrly" )
															else  UNCHANGED   endif  }
	"Reset ResZn:HeatTDaySched for Design Rating model"
			ResZn:HeatTDaySched	= {	if (ResProj:DRtgRefRunID == 2014) then  RuleLibrary( SchDay, "RESNET SZ Heat Hrly" )
															else  UNCHANGED   endif  }
   ; SAC 9/19/19 - OtherZone (MFamProto)
	"Reset ResOtherZn:CoolTDaySched for Design Rating model"
			ResOtherZn:CoolTDaySched	= {	if (ResProj:DRtgRefRunID == 2014) then RuleLibrary( SchDay, "RESNET SZ Cool Hrly" )
															else  UNCHANGED   endif  }
	"Reset ResOtherZn:HeatTDaySched for Design Rating model"
			ResOtherZn:HeatTDaySched	= {	if (ResProj:DRtgRefRunID == 2014) then  RuleLibrary( SchDay, "RESNET SZ Heat Hrly" )
															else  UNCHANGED   endif  }

   ;--------------------------------------------------------------------
   ; BudgetConversion: general construction defaulting/setup
   ; mjb-10/28/13	moved up from bottom of BudgetConversion rulelist to ensure that Cons objects have calculated Uvalues before E+A+A rules are evaluated 
   ;--------------------------------------------------------------------
; SAC 5/1/14 - RE-IMPORT std lib objects used in Cons object defaulting
	"Import SoftWood ResMat from library (if needed)"		ResProj:LibMat_SoftWood		= {	if (LocalCompAssigned( LibMat_SoftWood )) then  UNCHANGED
																												else  RuleLibrary( ResMat, "SoftWood" )  endif  }
	"Import Steel ResMat from library (if needed)"			ResProj:LibMat_Steel			= {	if (LocalCompAssigned( LibMat_Steel )) then  UNCHANGED
																												else  RuleLibrary( ResMat, "Steel" )  endif  }
	"Import SIPSskin ResMat from library (if needed)"		ResProj:LibMat_SIPSskin		= {	if (LocalCompAssigned( LibMat_SIPSskin )) then  UNCHANGED
																												else  RuleLibrary( ResMat, "SIPSskin" )  endif  }
	"Import Ceiling Ins ResMat from library (if needed)"	ResProj:LibMat_CeilingIns	= {	if (LocalCompAssigned( LibMat_CeilingIns )) then  UNCHANGED
																												else  RuleLibrary( ResMat, "Ceiling Insul" )  endif  }
	"Import Other Ins ResMat from library (if needed)"		ResProj:LibMat_OtherIns		= {	if (LocalCompAssigned( LibMat_OtherIns )) then  UNCHANGED
																												else  RuleLibrary( ResMat, "Other Insul" )  endif  }
	"Import VertWallCavity ResMat from library (if needed)"		ResProj:LibMat_VertWallCavity		= {	if (LocalCompAssigned( LibMat_VertWallCavity )) then  UNCHANGED
																												else  RuleLibrary( ResMat, "VertWallCavity" )  endif  }

	"Default ResMat ConductivityQII"	ResProj:Action	= {	EvalRulelist( "DefaultMatCondQII" )  }		; SAC 3/18/14
  ; SAC 5/7/12 - added rulelist eval to ensure that Cons properties are properly defaulted (and ResMat components have been re-created)
	"Default Cons properties"		Cons:Action = {	EvalRulelist( "DefaultConsObject", 1 )  }
	; SAC 3/12/14 - consolidate rules to setup final cavity materials, LayerParams objects and call to ConsUFactoRes() call
	"Perform final Ufactor prep and call ConsUFactoRes()"		ResProj:Action	= {	EvalRulelist( "SetupCons_UValue_All" )  }
;	"debug ResExtWall Cons"				ResExtWall:Action = { if (ParentType == 1 .AND. IsAltered) then PostWarning( "ResExtWall Cons after ConsUFactorRes call from BUDG CONV: '%s' WinterDesUValue = %g", Construction:Name, Construction:WinterDesUValue ) else UNCHANGED endif }
;	"debug CeilingBelowAttic"		CeilingBelowAttic:Action = { if (IsAltered) then PostWarning( "after ConsUFactorRes call from BUDG CONV - CeilingBelowAttic: '%s' Cons: '%s' WinterDesUValue: %g", Name, Construction:Name, Construction:WinterDesUValue ) else UNCHANGED endif }

   ;--------------------------------------------------------------------
   ; BudgetConversion: Demising ResIntWall construction - Res ACM section ?????
	; mjb	E+A+A	12/2/13
   ;--------------------------------------------------------------------
	"Assign Altered ResIntWall Cons UValue"					ResIntWall:AltConsUValue = {	if (ParentComponentType() == "ResZn" .AND. IsDemising)
                                                                              		then if (Parent( Type ) < 10 .AND. IsAltered)
                                                                                			then Construction:WinterDesUValue 
																													else UNCHANGED endif 
																												else UNCHANGED endif }
   ; SAC 6/28/17 - replace T24RClimateZoneCodeBase:StdFrameIntWallCons lookup for altered ResIntWall cons to logic for 2x4 vs. 2x6 Altered cons objects from library (tic #780)
	"Set ResIntWall:Construction (for demising walls)"		ResIntWall:Construction	= {
         if (IsDemising < 0.5) then  UNCHANGED 
         else if (IsNew) then
            if( Proj:IsComRuleset > 0 )
            then ; JP 2/21/23 MF demising wall - tic #3401
              if( Construction:Type = 0 ) ; wood framed wall
              then RuleLibrary(Cons, "T24-2022 IntWall 2x4 16oc R11" )
              else if( Construction:Type = 1 ) ; metal framed wall
              then RuleLibrary(Cons, "T24-2022 IntWall 2x4 16oc R3.6" )
              else UNCHANGED
              endif endif
            ;KN 03/20/2015 Updated for T24RClimateZoneCodeBase lookup table
            ;RuleLibrary( Cons, "T24-2013 R15 IntWall Cons" )
            else RuleLibrary(Cons, T24RClimateZoneCodeBase:StdFrameIntWallCons( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) )
            endif
         else if (IsAltered)
         then  if (Construction:FrameLayer > 600)
               then  RuleLibrary( Cons, "T24-2016 IntWall 2x6 16oc R19" )
               else  RuleLibrary( Cons, "T24-2013 R13 IntWall Cons"     )  endif
         else UNCHANGED endif endif endif	}	

  "Change Altered ResIntWall to Exist Cons if better than Code"  
      ResIntWall:Construction    = { 	if (ParentComponentType() == "ResZn" .AND. IsDemising)
															then if (Parent( Type ) < 10 .AND. IsAltered) 
																then if ( IsVerified )
																	then if ( AltConsUValue <= Construction:T24AltConsUValue ) then exConstruction
																	else UNCHANGED endif
																else UNCHANGED endif
										     	  			else UNCHANGED endif 
										    			else UNCHANGED endif }

   ;--------------------------------------------------------------------
   ; BudgetConversion: Demising ResIntFlr construction - Res ACM section ?????
	; mjb	E+A+A	12/2/13
   ;--------------------------------------------------------------------
	"Assign Altered ResIntFlr Cons UValue"					ResIntFlr:AltConsUValue = {	if (ParentComponentType() == "ResZn" .AND. IsDemising)
                                                                              						then if (Parent( Type ) < 10 .AND. IsAltered)
                                                                                							then Construction:WinterDesUValue 
																																	else UNCHANGED endif 
																																else UNCHANGED endif }
   ; added reference to new StdConcIntFloorCons lookup for concrete demising walls - SAC 06/08/22
	"Set ResIntFlr:Construction (for demising flrs)"		ResIntFlr:Construction	=
      {  if (IsNew .OR. IsAltered)
         then  if (IsDemising < 0.5) then  UNCHANGED
               else if (IfValidAnd( Construction:Type = 25 ) .AND.      ; "Concrete / ICF / Brick"
                        T24RClimateZoneCodeBase:StdConcIntFloorCons(  "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) != "none")
               then  RuleLibrary(Cons, T24RClimateZoneCodeBase:StdConcIntFloorCons(  "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) )
               else  RuleLibrary(Cons, T24RClimateZoneCodeBase:StdFrameIntFloorCons( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) )
               endif endif
         else UNCHANGED endif	}	
;KN 04/11/2015 removed this from above to implement call to codebase
;																																	else	RuleLibrary( Cons, "T24-2013 R19 IntFloor Cons" )  endif

  "Change Altered ResIntFlr to Exist Cons if better than Code"  
      ResIntFlr:Construction    = { 	if (ParentComponentType() == "ResZn" .AND. IsDemising)
															then if (Parent( Type ) < 10 .AND. IsAltered) 
																then if ( IsVerified )
																	then if ( AltConsUValue <= Construction:T24AltConsUValue ) then exConstruction
																	else UNCHANGED endif
																else UNCHANGED endif
										     	  			else UNCHANGED endif 
										    			else UNCHANGED endif }

   ;--------------------------------------------------------------------
   ; BudgetConversion: Demising ResDr Ufactor - Res ACM section ?????
	; mjb	E+A+A	12/2/13
   ;--------------------------------------------------------------------
	"Assign Altered ResDr Ufactor"					ResDr:AltUfactor = {	Ufactor }
	"Set ResDr:Ufactor (for demising doors)"	ResDr:Ufactor	= {	if (IsNew .OR. IsAltered) then
																							if (ParentComponentType() == "ResIntWall")
																								then  if (Parent( ResIntWall:IsDemising ) > 0.5) 
                                                                              then  T24RClimateZoneCodeBase:DoorUfactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
																										else  UNCHANGED  endif
																								else  UNCHANGED  endif
																							else UNCHANGED endif	}	
  "Change Altered ResDr to Exist Cons if better than Code"  
      ResDr:Ufactor    = { 	if (ParentComponentType() == "ResIntWall")
											then if (Parent( ResIntWall:IsDemising ) > 0.5 .AND. IsAltered) 
												then if ( IsVerified )
													then if ( AltUfactor <= Ufactor .AND. LocalStatus( exUfactor ) > 0) then exUfactor
													else UNCHANGED endif
												else UNCHANGED endif
										    else UNCHANGED endif 
									else UNCHANGED endif }

   ;--------------------------------------------------------------------
   ; BudgetConversion: Ceiling below Attic construction - Res ACM section 2.3.5.1 & 2.4.1
   ;--------------------------------------------------------------------
  "Assign Altered ClgBlwAttic Cons UValue"     CeilingBelowAttic:AltConsUValue   = {   if (ParentComponentType() == "ResZn")
                                                                                       then if (Parent( Type ) < 10 .AND. IsAltered)
                                                                                          then if (WasCathCeil) then CathCeilUValue
                                                                                          	else Construction:WinterDesUValue endif
                                                                                          else UNCHANGED endif 
                                                                                       else UNCHANGED endif }
;	mjb 1/12/15 - use new T24RClimateZoneCodeBase lookup table	
	; SAC 9/18/15 - mods to referenec new PrescripAdditions_CeilingBelowAtticCons for ceiling below attic cons assignments
	"Set CeilingBelowAttic:Construction for ceilings of conditioned zones"
				CeilingBelowAttic:Construction	= {	if (ParentComponentType() == "ResZn")
																	then	if (Parent( Type ) < 10)
                                                   		then	if (IfValidAnd( ResProj:CondAdditionSizeWithMult > 0.1 ) .AND. IsNew)
                                                   				then	RuleLibrary(Cons, PrescripAdditions_CeilingBelowAtticCons:CeilingBelowAtticCons( "CodeBase", Proj:StdDesignBase, "ClimateZone", Proj:CliZnNum, "AdditionSize", ResProj:CondAdditionSizeWithMult ) )
                                                   				else if (IsNew) 
																					then	RuleLibrary(Cons, T24RClimateZoneCodeBase:StdCeilCons( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) )
                                                   				else if (IsAltered)
                                                   				then	if ( WasCathCeil )
                                                      					then RuleLibrary( Cons, "T24-2013 Altered CC ClgBlwAttic" )
                                                      					else RuleLibrary( Cons, "T24-2013 Altered ClgBlwAttic" )
                                                      					endif
																					else  UNCHANGED  endif endif endif
                                                			else UNCHANGED endif
																	else  UNCHANGED  endif  }
;																						default : PostError( "Unexpected ceiling below attic cavity R-value (%g) in budget conversion.", ClimateZoneTable( Global( Proj:CliZnNum ), 7 ) )

;	mjb 1/12/15																		then  switch( ClimateZoneTable( Global( Proj:CliZnNum ), 7 ) )
;	removed these lines in above rule													case 30 : RuleLibrary( Cons, "T24-2013 R30 ClgBlwAttic Cons" )
;	would not compile with lines commented out										case 38 : RuleLibrary( Cons, "T24-2013 R38 ClgBlwAttic Cons" )
;																									default : PostError( "Unexpected ceiling below attic cavity R-value in budget conversion." )
;																								endswitch

  ; SAC 10/15/14 - added in the course of moving attic edge properties from Cons to CeilingBelowAttic (for multiple attics)
	"Set CeilingBelowAttic:AtcEdg_ClgCons"		CeilingBelowAttic:AtcEdg_ClgCons	= {	if (LocalCompAssigned( Construction ) > 0.5) then  Construction  else  UNDEFINED  endif  }


 "Change Altered ClgBlwAttic CavityLayer to Exist Cons CavityLayer if better than Code"   
      CeilingBelowAttic:Construction:CavityLayer = {  if (ParentComponentType() == "ResZn")
                                             then if (Parent( Type ) < 10 .AND. IsAltered) 
                                                then if ( IsVerified )
                                                   then if ( AltConsUValue <= Construction:T24AltConsUValue ) then exConstruction:CavityLayer
                                                   else UNCHANGED endif
                                                else UNCHANGED endif
                                             else UNCHANGED endif
                                          else UNCHANGED endif }
;	"debug CeilingBelowAttic"					CeilingBelowAttic:Action = { if (IsAltered) then PostWarning( "CeilingBelowAttic: '%s' Cons: '%s' OverallCodeUValue: %g  AltConsUValue: %g  T24AltConsUValue: %g", Name, Construction:Name, Construction:OverallCodeUValue, AltConsUValue, Construction:T24AltConsUValue ) else UNCHANGED endif }

   ;--------------------------------------------------------------------
   ; BudgetConversion: Window Overhang & Sidefins - Res ACM section 2.3.5.5.1
   ; mjb-10/15/13  mods for E+A+A
   ;--------------------------------------------------------------------

; mjb-10/18/13	if Altered Window is Verified, use overhangs and fins from existing window
	"Modify window overhang depending on window status"		ResWin:OverhangDepth	= { if ( IsExisting ) then UNCHANGED else
													if ( IsNew ) then 0 else			
														if ( IsVerified ) then exOverhangDepth else 0 endif
													endif endif }
	"Modify window left fin depending on window status"		ResWin:LeftFinDepth	= { if ( IsExisting ) then UNCHANGED else
													if ( IsNew ) then 0 else			
														if ( IsVerified ) then exLeftFinDepth else 0 endif
													endif endif  }
	"Modify window right fin depending on window status"		ResWin:RightFinDepth	= { if ( IsExisting ) then UNCHANGED else
													if ( IsNew ) then 0 else			
														if ( IsVerified ) then exRightFinDepth else 0 endif
													endif endif  }
; mjb-10/18/13	add other overhang/fin parameters in case Verified

	"Modify OverhangDistUp depending on window status"		ResWin:OverhangDistUp	= { if ( IsExisting ) then UNCHANGED else
													if ( IsNew ) then 0 else			
														if ( IsVerified ) then exOverhangDistUp else 0 endif
													endif endif }
	"Modify OverhangExL depending on window status"			ResWin:OverhangExL	= { if ( IsExisting ) then UNCHANGED else
													if ( IsNew ) then 0 else			
														if ( IsVerified ) then exOverhangExL else 0 endif
													endif endif }
	"Modify OverhangExR depending on window status"			ResWin:OverhangExR	= { if ( IsExisting ) then UNCHANGED else
													if ( IsNew ) then 0 else			
														if ( IsVerified ) then exOverhangExR else 0 endif
													endif endif }
	"Modify OverhangFlap depending on window status"		ResWin:OverhangFlap	= { if ( IsExisting ) then UNCHANGED else
													if ( IsNew ) then 0 else			
														if ( IsVerified ) then exOverhangFlap else 0 endif
													endif endif }
	"Modify LeftFinTopUp depending on window status"		ResWin:LeftFinTopUp	= { if ( IsExisting ) then UNCHANGED else
													if ( IsNew ) then 0 else			
														if ( IsVerified ) then exLeftFinTopUp else 0 endif
													endif endif }
	"Modify LeftFinDistL depending on window status"		ResWin:LeftFinDistL	= { if ( IsExisting ) then UNCHANGED else
													if ( IsNew ) then 0 else			
														if ( IsVerified ) then exLeftFinDistL else 0 endif
													endif endif }
	"Modify LeftFinBotUp depending on window status"		ResWin:LeftFinBotUp	= { if ( IsExisting ) then UNCHANGED else
													if ( IsNew ) then 0 else			
														if ( IsVerified ) then exLeftFinBotUp else 0 endif
													endif endif }
	"Modify RightFinTopUp depending on window status"		ResWin:RightFinTopUp	= { if ( IsExisting ) then UNCHANGED else
													if ( IsNew ) then 0 else			
														if ( IsVerified ) then exRightFinTopUp else 0 endif
													endif endif }
	"Modify RightFinDistR depending on window status"		ResWin:RightFinDistR	= { if ( IsExisting ) then UNCHANGED else
													if ( IsNew ) then 0 else			
														if ( IsVerified ) then exRightFinDistR else 0 endif
													endif endif }
	"Modify RightFinBotUp depending on window status"		ResWin:RightFinBotUp	= { if ( IsExisting ) then UNCHANGED else
													if ( IsNew ) then 0 else			
														if ( IsVerified ) then exRightFinBotUp else 0 endif
													endif endif }

   ; added window view factor setting to account for overhang - SAC 6/22/17
   "Reset OvrhngViewFctrSky depending on window status"     ResWin:OvrhngViewFctrSky  = {
         if ( IsExisting ) then  UNCHANGED
         else if ( IsNew ) then  -1
         else if ( IsVerified ) then exOvrhngViewFctrSky
         else  -1  endif endif endif  }


   ;--------------------------------------------------------------------
   ; BudgetConversion: Raised Floor construction - Res ACM section 2.3.5.8
   ; 
   ; mjb-10/30/13	E+A+A mods
   ;--------------------------------------------------------------------
	"Assign Altered ExtFlr Cons UValue"			ResExtFlr:AltConsUValue = {  if (ParentComponentType() == "ResZn")
                                                                              then if (Parent( Type ) < 10 .AND. IsAltered)
                                                                                then Construction:WinterDesUValue 
																											else UNCHANGED endif 
																										else UNCHANGED endif }
; mjb 7/9/14 - avoid raised concrete floor from being compared to wood framed (EPro issue)
;StdFrameExtFloorCons

;	mjb 1/12/15 - use new T24RClimateZoneCodeBase lookup table
	; SAC 9/17/15 - added unique references for std design Concrete floors
	"Set Cons for exterior floors of conditioned zones"
				ResExtFlr:Construction	= {	if (ParentComponentType() == "ResZn")
															then	if (Parent( Type ) < 10 .AND. IsNew)
																	then	if (IfValidAnd( Construction:Type = 25 ))		; "Concrete / ICF / Brick"	
																			then	RuleLibrary(Cons, T24RClimateZoneCodeBase:StdConcExtFloorCons(  "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) )
																			else	RuleLibrary(Cons, T24RClimateZoneCodeBase:StdFrameExtFloorCons( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) )
																			endif
																	else if (Parent( Type ) < 10 .AND. IsAltered .AND. Construction:Type == 20) 
																	then RuleLibrary( Cons, "T24-2013 Altered Ext Floor" )
																	else UNCHANGED
																	endif endif
																else  UNCHANGED  endif  }
;	mjb 1/12/15 - replaced this line with RuleLibrary call above:					then  RuleLibrary( Cons, "T24-2013 R19 ExtFloor Cons" )
  "Change Altered ExtFlr to Exist Cons if better than Code"   
         ResExtFlr:Construction  = {  if (ParentComponentType() == "ResZn")
														then	if (Parent( Type ) < 10 .AND. IsAltered) 
																then	if ( IsVerified )
																		then	if ( AltConsUValue <= Construction:T24AltConsUValue ) then exConstruction 
																				else UNCHANGED endif
										     	  						else UNCHANGED endif
																else UNCHANGED endif
										    			else UNCHANGED endif }


	"Assign Altered FlrOvrCrawl Cons UValue"			FloorOverCrawl:AltConsUValue = {  if (ParentComponentType() == "ResZn")
                                                                              			then if (Parent( Type ) < 10 .AND. IsAltered)
                                                                                					then Construction:WinterDesUValue 
																															else UNCHANGED endif 
																													else UNCHANGED endif }
;	mjb 1/12/15 - use new T24RClimateZoneCodeBase lookup table
	; SAC 9/17/15 - added unique references for std design Concrete floors
	"Set Cons for FlrOvrCrawl of conditioned zones"
				FloorOverCrawl:Construction	= {	if (ParentComponentType() == "ResZn")
																then	if (Parent( Type ) < 10 .AND. IsNew)
																		then	if (IfValidAnd( Construction:Type = 25 ))		; "Concrete / ICF / Brick"	
																				then	RuleLibrary(Cons, T24RClimateZoneCodeBase:StdConcFlrOvrCrawlCons( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) )
																				else	RuleLibrary(Cons, T24RClimateZoneCodeBase:StdFlrOvrCrawlCons(     "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) )
																				endif
                                            				else if (Parent( Type ) < 10 .AND. IsAltered) 
																		then RuleLibrary( Cons, "T24-2013 Altered Floor Over Crawlspace" )
																		else UNCHANGED
																		endif endif
																else  UNCHANGED  endif  }
;	replaced this line with RuleLibrary call above:									then  RuleLibrary( Cons, "T24-2013 R19 FlrOvrCrawl Cons" )

  "Change Altered FlrOvrCrawl to Exist Cons if better than Code"  
      FloorOverCrawl:Construction    = { 	if (ParentComponentType() == "ResZn")
														then	if (Parent( Type ) < 10 .AND. IsAltered) 
																then	if ( IsVerified )
																		then	if ( AltConsUValue <= Construction:T24AltConsUValue ) then exConstruction
																				else UNCHANGED endif
																		else UNCHANGED endif
										     	  				else UNCHANGED endif 
										    			else UNCHANGED endif }


   ;--------------------------------------------------------------------
   ; BudgetConversion: Attic Roof construction - Res ACM section 2.4.5.5 - The Standard Design shall be 2x4 trusses at 24 in. o. c. 
   ; 
   ; mjb-10/30/13	E+A+A mods
   ;mjb 1/13/14 E+A+A fixes - need to keep Existing Attic layers if Verified
   ;--------------------------------------------------------------------
	"Set Attic:Construction:CavityLayer"	Attic:Construction:CavityLayer	= { if(ResProj:EnergyCodeYearNum = 2019 .AND. IfValidAnd( Proj:AnalysisVersion <= 190101 ))
														                                                Then if (IsNew .OR. (IsAltered .AND. IsVerified < 1)) then "- no insulation -"
                                                       													else if (IsVerified) then exConstruction:CavityLayer
												                                                           	else UNCHANGED endif endif else UNCHANGED endif }

	"Set Attic:Construction:FrameLayer"				Attic:Construction:FrameLayer				= {	if (IsNew .OR. (IsAltered .AND. IsVerified < 1)) then "2x4 Top Cord of Roof Truss @ 24 in. O.C."
																																else if (IsVerified) then exConstruction:FrameLayer
																																else UNCHANGED endif endif }
  ; not spelled out in RACM - mentioned in GC issue #28
	"Set Attic:Construction:InsideFinishLayer"	Attic:Construction:InsideFinishLayer	= {	if (IsNew .OR. (IsAltered .AND. IsVerified < 1)) then "- select inside finish -"
																																else if (IsVerified) then exConstruction:InsideFinishLayer
																																else UNCHANGED endif endif }
;	"debug Attic"					Attic:Action = { PostWarning( "Attic: '%s' IsVerified: %g  exConstruction:CavityLayer: '%s' Construction:CavityLayer: '%s'", Name, IsVerified, exConstruction:CavityLayer, Construction:CavityLayer ) }

  ; SAC 10/15/14 - added in the course of moving attic edge properties from Cons to CeilingBelowAttic (for multiple attics)
	"Set CeilingBelowAttic:AtcEdg_AtcCons"		CeilingBelowAttic:AtcEdg_AtcCons	= {	if (LocalCompAssigned( AtticZone ) > 0.5)
																												then  if (LocalCompAssigned( AtticZone:Construction ) > 0.5) then  AtticZone:Construction  else  UNDEFINED  endif
																												else  UNDEFINED  endif  }

   ;--------------------------------------------------------------------
   ; BudgetConversion: Attic Roof construction - Res ACM section 2.4.5.3 - no additional above deck insulation
   ;--------------------------------------------------------------------
; mjb 1/31/15 - mod to lookup above deck insulation from T24RClimateZoneCodeBase
;	"Set Attic:Construction:AbvDeckInsulLayer"	Attic:Construction:AbvDeckInsulLayer	= {	if (IsNew .OR. (IsAltered .AND. IsVerified < 1)) then "- no insulation -"
;																																else if (IsVerified) then exConstruction:AbvDeckInsulLayer
;																																else UNCHANGED endif endif }
; KN 03/20/2015 replaced with rules futher below
;	"Set Attic:Construction:AbvDeckInsulLayer"	Attic:Construction:AbvDeckInsulLayer	= {	if (IsNew .OR. (IsAltered .AND. IsVerified < 1)) then T24RClimateZoneCodeBase:RoofAboveDeckIns( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
;																																else if (IsVerified) then exConstruction:AbvDeckInsulLayer
;																																else UNCHANGED endif endif }

; KN 03/23/2015 Perhaps this and roofing section should be switched to looking up whole assembly in codebase but concerned about side effects. Temporary implementation using above and below deck insulation
; Right now, stdRoofCons in codebase not used!
;	"Set Attic:Construction for roofs of conditioned zones"	Attic:Construction	= {	RuleLibrary(Cons, T24RClimateZoneCodeBase:StdRoofCons( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )	}
				
;KN 03/20/2015 A test statement to avoid doing these assignments if attic is above conditioned space. Not vetted for E+A+A
	"Set Attic:Construction:AbvDeckInsulLayer"	Attic:Construction:AbvDeckInsulLayer	= {	if (FloorAreaOverCond > 0.5) then
																																if (IsNew .OR. (IsAltered .AND. IsVerified < 1)) then T24RClimateZoneCodeBase:RoofAboveDeckIns( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
																																else if (IsVerified) then exConstruction:AbvDeckInsulLayer
																																else UNCHANGED endif endif 
																																else UNCHANGED endif } 
	"Set Attic:Construction:AbvDeckInsulLayerRpt"	Attic:Construction:AbvDeckInsulLayerRpt	= {	Construction:AbvDeckInsulLayer  }      ; SAC 10/21/19 (tic #1121)

   ; KN 03/20/2015 - change for 2016 to set below deck needed for 2016 not vetted for E+A+A
   ; SAC 4/12/17 - separated out single and multi-family settings from T24RClimateZoneCodeBase table
   ; JP 9/17/19 - address the case that only replacing the roof surface (tic #867)
   "Set Attic:Construction:CavityLayer"   Attic:Construction:CavityLayer   =
      {  if (ResProj:EnergyCodeYearNum = 2019 .AND. IfValidAnd( Proj:AnalysisVersion <= 190101 ))
         then  if (FloorAreaOverCond > 0.5)
               then  if (IfValidAnd( ResProj:CondAdditionSizeWithMult > 0.1 ) .AND. (IsNew .OR. (IsAltered .AND. IsVerified < 1)))
                     then  PrescripAdditions_RoofDeckInsul:RoofBelowDeckIns( "CodeBase", Proj:StdDesignBase, "ClimateZone", Proj:CliZnNum, "AdditionSize", ResProj:CondAdditionSizeWithMult )
                     else if (IsNew .OR. (IsAltered .AND. IsVerified < 1))
                     then  T24RClimateZoneCodeBase:RoofBelowDeckIns( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
                     else if (IsVerified) then exConstruction:CavityLayer
                     else  UNCHANGED  endif endif endif 
               else  UNCHANGED  endif 
         else if (FloorAreaOverCond > 0.5 .AND. (IsNew .OR. IsAltered))
         then  if (ResProj:RunScope == 2 .AND. ifValidAnd( ResProj:CondAdditionSizeWithMult <= 700 ) .AND. IsNew)
               Then  "- no insulation -" 
               else if (IsAltered .AND. IsVerified)
               then  exConstruction:CavityLayer
               else  T24RClimateZoneCodeBase:RoofBelowDeckIns( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
               endif endif
         else  UNCHANGED  endif endif}

   ; SAC 4/12/17 - set CavInsulOverFrame to std design value
   "Set Attic:Construction:CavInsulOverFrame"   Attic:Construction:CavInsulOverFrame  = {
         if (FloorAreaOverCond > 0.5)
         then  if (IfValidAnd( ResProj:CondAdditionSize > 0.1 ) .AND. (IsNew .OR. (IsAltered .AND. IsVerified < 1)))
               then  UNCHANGED
               else if (IsNew .OR. (IsAltered .AND. IsVerified < 1))
               then  T24RClimateZoneCodeBase:RoofCavInsOverFrm( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
               else  UNCHANGED  endif endif
         else  UNCHANGED  endif  }

; SAC 9/23/15 - modified rule logic changing RoofingType for new cons attic roofs in 2016 runs - per new approach proposed by BAW and approved by CEC
	"Set Attic:Construction:RoofingType"	Attic:Construction:RoofingType	= {	if (Proj:StdDesignBase >= 2016 .AND. (IsNew .OR. IsAltered) .AND. IfValidAnd( SteepRoofArea > 0.5 )) 
																											then 100206 ; "Steep Slope Roof tile, metal tile, or wood shakes"
																											else UNCHANGED endif }
; SAC 5/11/15 - added logic to ensure proper RoofingLayer for New/Altered standard design roof surfaces
;	"Set Attic:Construction:RoofingLayer"	Attic:Construction:RoofingLayer	= {	if (Proj:StdDesignBase >= 2016 .AND. IsNew .AND. Construction:RoofingLayer == 100201) 
;																											then 100203 ; "10 PSF (RoofTile)"
; SAC 9/23/15 - revised 2016 logic for setting RoofingLayer for new cons attic roofs in 2016 runs - per new approach proposed by BAW and approved by CEC
	"Set Attic:Construction:RoofingLayer"	Attic:Construction:RoofingLayer	= {	if (Proj:StdDesignBase >= 2016 .AND. (IsNew .OR. IsAltered))
																											then	if (IfValidAnd( SteepRoofArea > 0.5 ))
																													then	100203											; steep slope (pitch > 2 in 12)  =>  "10 PSF (RoofTileAirGap)"
																													else	100201  endif									; low slope (pitch <= 2 in 12)   =>  "Light Roof (Asphalt Shingle)"
																											else if (Proj:StdDesignBase < 2016 .AND. (IsNew .OR. IsAltered))
																											then	if (Construction:RoofingType == 100206)		; "Steep Slope Roof tile, metal tile, or wood shakes"
																													then	100203													; "10 PSF (RoofTileNoGap)"
																													else if (Construction:RoofingType == 0)		; "all others"
																													then	100201													; "Light Roof (Asphalt Shingle)"
																													else	UNCHANGED  endif endif
																											else	UNCHANGED  endif endif	 }

	"Assign Altered Attic RoofSolReflect"		Attic:AltSolReflect = {	RoofSolReflect }

	;"Set Attic:RoofSolReflect"					Attic:RoofSolReflect					= {	if (LocalCompAssigned( Construction ))
	;																										then	if (Construction:RoofingLayer == 100201)	; "Light Roof (Asphalt Shingle)"
	;																												then  0.08
	;																												else  0.10  endif
	;																										else  0.10  endif  }
; mjb 1/13/14	removed cool roof requirements for Alterations
;	mjb	8/21/14 - added them back in, consistent with 2013 RACM - don't remember why we removed them???
;	mjb 1/12/15 - use new T24RClimateZoneCodeBase lookup table
; SAC 9/18/15 - added logic to DISABLE requirement for 2013 & 2016 additions <= 300 SF
; SAC 9/21/15 - fixed bug where EAA <= 300 SF addition logic being applied to both New & EAA projects (revised to apply only to EAA projects)
; SAC 9/23/15 - switched from CondAdditionSize to AdditionCFA (former is always 0 for NewCons-AdditionAlone) and revised logic again to ensure that 300 AdditionCFA also applies to New Cons when IsAddAlone checked
; JP 9/17/19  - fixed altered case was included in EAA <=300 case & added replacing roof surface only (tic #867) 
"Set Attic:RoofSolReflect"	Attic:RoofSolReflect	= {	if ( IsNew .OR. IsAltered  .OR. IsAlteredSurface)
											                                then	if (Construction:RoofingLayer == 100205)		; "25 PSF (Very Heavy Ballast or Pavers)"
													                                  then	UNCHANGED
												                                    else if ((ResProj:RunScope == 2 .OR. (ResProj:RunScope == 1 .AND. IfValidAnd( ResProj:IsAddAlone > 0.5 ))) .AND. IfValidAnd( ResProj:AdditionCFA <= 300 ))
													                                       then	UNCHANGED
													                                       else if ( SteepSlope > 0.5 )
													                                            then	T24RClimateZoneCodeBase:SteepRoofReflect( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
													                                            else	T24RClimateZoneCodeBase:FlatRoofReflect(  "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
													                            endif endif endif else UNCHANGED endif }

;	mjb 1/12/15 - removed these lines from above rule:												else if (SteepSlope > 0.5 .AND.  Proj:CliZnNum >= 10 .AND. Proj:CliZnNum <= 15 ) then  0.2
;																													else if (SteepSlope < 0.5 .AND. (Proj:CliZnNum == 13 .OR.  Proj:CliZnNum == 15)) then  0.63
;																													else  0.1  endif endif endif  

;	"Change to Exist RoofSolReflect if better than Code"	
;														Attic:RoofSolReflect = { if ( IsAltered ) then
;																							if ( IsVerified ) then
;																								if ( AltSolReflect >= RoofSolReflect ) then exSolReflect else UNCHANGED endif
;																								else UNCHANGED endif 											   
;																							else UNCHANGED endif }

; TC 1/29/15 - changed existing and verified solar reflectance to existing value
	"Change to Exist RoofSolReflect"	
														Attic:RoofSolReflect = { if (IsVerified) then 	exSolReflect else UNCHANGED endif}

	;"Set Attic:RoofEmiss"						Attic:RoofEmiss						= {	0.75  }
	;"Set Attic:RoofEmiss"						Attic:RoofEmiss						= {	if ( IsNew .OR. IsAltered) then 0.85 else UNCHANGED endif  }

   ; SAC 11/12/19 - switched 0.75 RoofEmiss to prior (& default) 0.85 due to this used for some time as most representative of real roofing products
  "Set Attic:RoofEmiss"		Attic:RoofEmiss		= {if(ResProj:EnergyCodeYearNum = 2019 .AND. IfValidAnd( Proj:AnalysisVersion <= 190101 ))
					                                     then if ( IsNew .OR. IsAltered) then 0.85 else UNCHANGED endif
					                                          else if (IsNew .OR. IsAltered .OR. ISAlteredSurface)
                                                         then if (ResProj:RunScope == 2 .AND. IfValidAnd( ResProj:AdditionCFA <= 300 ) .AND. IsNew) then UNCHANGED
                                                              else if (IsVerified) then exSolEmiss
                                                                   else if (RoofSolReflect != 0.1) then 0.85
                                                                        else UNCHANGED endif endif endif
                                               else UNCHANGED endif endif}

   ;--------------------------------------------------------------------
   ; BudgetConversion: Attic Radiant Barrier - Res Standard table 150.1-A  (& Std sec 110.8-j)
   ;--------------------------------------------------------------------
; mjb-12/2/13	E+A+A make mods to radiant barrier - should be a compliance credit if Altered - done mjb	8/21/14
; SAC 11/19/14 - modified in two ways - only set RadiantBarrier to CZ table value if the attic is over conditioned space -and- removed RadiantBarrier over attic over only unconditioned space
; mjb 1/12/15 - using new T24RClimateZoneCodeBase for code level lookups
	; SAC 9/18/15 - modified rule to take CondAdditionSize into account when setting RadiantBarrier
	"Toggle attic roof Cons:RadiantBarrier based on climate zone requirement"
				Attic:Construction:RadiantBarrier	= {   if (Attic:IsNew .AND. IfValidAnd( FloorAreaOverCond > 0.5 ))
																		then	if (Construction:CanAssignTo == 1 .AND. Construction:AtcEdg_ConsType == 0)	; "Attic Roofs" & "n/a"
													                     then	if (IfValidAnd( ResProj:CondAdditionSizeWithMult > 0.1 ))
													                     		then	PrescripAdditions_RadiantBarrier:RadiantBarrier( "CodeBase", Proj:StdDesignBase, "ClimateZone", Proj:CliZnNum, "AdditionSize", ResProj:CondAdditionSizeWithMult )
													                     		else	T24RClimateZoneCodeBase:RadiantBarrier( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
													                     		endif
													                     else	UNCHANGED  endif 
													               else if (Attic:IsAltered .OR. IfValidAnd( OnlyOverUncond > 0.5 )) then 0 else UNCHANGED endif endif }

;	mjb 1/12/15 - replaced this line in above rule:	         then  ClimateZoneTable( Global( Proj:CliZnNum ), 8 )


; SAC 11/3/14 - moved this and a related defaulting rule up above where CathedralCeiling obejcts are converted to CeilingBelowAttics for std design model
;   ;--------------------------------------------------------------------
;   ; BudgetConversion: Ensure Conditioned/Sealed attic reverted to Ventilated for standard run  - SAC 4/27/14
;   ;--------------------------------------------------------------------
;	"Reset Attic:Type to 'Ventilated' (value = 0)"		Attic:Type	= {	if (FloorArea > 0.1 .AND. Type == 1) then  0  else  UNCHANGED  endif  }


;  mjb   7/10/14  - remove floor area limitation for new construction
;	mjb	8/1/14	- add back limitation for new Additions < 1000sf
;	mjb	8/3/14	- added back orignal condition for new construction > 1000 sf
	"(re-)Set ResProj:EnableClVent (to reflect latest Attic:Type)"		ResProj:EnableClVent		= {
							if (IsMultiFamily < 0.5 .AND. ComponentCount( Zone ) > 0.5 .AND. SumAll( ResZn:CondClgBlwAtticArea ) > 0.1 .AND. ComponentCount( Attic ) > 0)
							then  if (MinAll( Attic:Type ) < 1 .AND. ( (RunScope == 1 .AND. IsAddAlone .AND. CondFloorArea > 1000) .OR. (RunScope == 2 .AND. AdditionCFA > 1000) .OR.
											(RunScope == 1 .AND. IsAddAlone < 0.5))) then  1  else  0  endif
							else  0  endif  }

   ; revised to eval Prop rules if ANY CeilingBelowAttic exist, needed since revised ClgBlwAttic insulation can alter attic space for ducts - SAC 04/28/21 (tic #1270)
   "RE-evaluate construction, attic & cool vent properties (needed before possibly specifying this attic as location for ducts)"    ResProj:Action	=     ; SAC 08/17/20 - 08/18/20 (tic #1151)
      {  if (ComponentCount( CeilingBelowAttic ) < 1) then  UNCHANGED
         else if (IfValidAnd( IsSFamResRuleset > 0 ))
         then  EvalRulelist( "ProposedInput" )
         else  EvalRulelist( "ProposedInput_MFam" )  endif endif  }
;         ResProj:Action	= {	if (ComponentCount( CeilingBelowAttic ) < (NumPropClgBlwAtticObjs + 0.5)) then  UNCHANGED  else  EvalRulelist( "ProposedInput" )  endif  }


   ;--------------------------------------------------------------------
   ; BudgetConversion: Building-wide window area multiplier rules - related to Res ACM section 2.3.5.5
   ;
   ;mjb-10/21/13	
   ;	E+A+A - need to treat New Windows differently than Existing or Altered Windows
   ;          - all parameters used for summing and allocating window area on 4 cardinal-oriented walls below are for New Windows only:
   ;		ResExtWall:TotWinArea
   ;		ResZn:TotCondZoneWinArea
   ;		ResProj:TotCondZoneWinArea
   ;    TotAltWinArea - new ResExtWall parameter for total altered window area
   ;    TotCondZoneAltWinArea - new Zone and ResProj parameters for sum of TotAltWinArea + ChildAreaSum 
   ;	ResProj:CondWinAreaCFARat - based on sum of New and Altered Window Areas + New and Altered ResSkylt Areas   
   ;    ResProj:CondWinAreaMult - based on sum of New and Altered Window Areas + New and Altered ResSkylt Areas
	;					Status:
	;              1,    "Existing"
	;              2,    "Altered"
	;              3,    "New"
   ;--------------------------------------------------------------------
; mjb 12/17/13 - cannot lump new and altered window areas together - only NEW windows get added to cardinal-oriented walls
; SAC 2/20/15 - modified to REMOVE E+A+A Additions window/skylight area from New (item 2) and added separate Additions array element
	"Re-calculate ResWin:TotAreaInclMult[1] - total"								ResWin:TotAreaInclMult[1]		= {	Area * Multiplier * Parent2( Mult )  }       ; SAC 04/27/23 (tic #3392)
	"Re-calculate ResWin:TotAreaInclMult[3] - existing"							ResWin:TotAreaInclMult[3]		= {	if (ResProj:RunScope == 2 .AND. Status == 1) then  TotAreaInclMult[1]  else  0  endif  }
;	"Re-calculate ResWin:TotAreaInclMult[2] - new/altered"						ResWin:TotAreaInclMult[2]		= {	TotAreaInclMult[1] - TotAreaInclMult[3]  }
	"Re-calculate ResWin:TotAreaInclMult[2] - new (not add)"						ResWin:TotAreaInclMult[2]		= {	if (Status == 3 .AND. IsEAAAddZoneGChild == 0) then  TotAreaInclMult[1]  else  0  endif  }
	"Re-calculate ResWin:TotAreaInclMult[4] - additions"							ResWin:TotAreaInclMult[4]		= {	if (IsEAAAddZoneGChild) then  TotAreaInclMult[1]  else  0  endif  }
; mjb	2/19/14	add ResSkylt areas to totals for glazing % calcs
	"Calculate ResSkylt:TotAreaInclMult[1] - total"									ResSkylt:TotAreaInclMult[1]		= {	Area * Multiplier * Parent2( Mult )  }    ; SAC 04/27/23 (tic #3392)
	"Calculate ResSkylt:TotAreaInclMult[3] - existing"								ResSkylt:TotAreaInclMult[3]		= {	if (ResProj:RunScope == 2 .AND. Status == 1) then  TotAreaInclMult[1]  else  0  endif  }
	"Calculate ResSkylt:TotAreaInclMult[2] - new (not add)"						ResSkylt:TotAreaInclMult[2]		= {	if (Status == 3 .AND. IsEAAAddZoneGChild == 0) then  TotAreaInclMult[1]  else  0  endif  }
	"Calculate ResSkylt:TotAreaInclMult[4] - additions"							ResSkylt:TotAreaInclMult[4]		= {	if (IsEAAAddZoneGChild) then  TotAreaInclMult[1]  else  0  endif  }
	"Sum window area into parent ResExtWall objects[1] - total"    	  		ResExtWall:TotWinArea[1]		= {	SumChildren( ResWin:TotAreaInclMult[1] )  }
	"Sum window area into parent ResExtWall objects[3] - existing"   			ResExtWall:TotWinArea[3]		= {	SumChildren( ResWin:TotAreaInclMult[3] )  }
;	"Sum window area into parent ResExtWall objects[2] - new/altered"			ResExtWall:TotWinArea[2]		= {	SumChildren( ResWin:TotAreaInclMult[2] )  }
	"Sum window area into parent ResExtWall objects[2] - new (not add)"		ResExtWall:TotWinArea[2]		= {	SumChildren( ResWin:TotAreaInclMult[2] )  }
	"Sum window area into parent ResExtWall objects[4] - additions"			ResExtWall:TotWinArea[4]		= {	SumChildren( ResWin:TotAreaInclMult[4] )  }
	"Sum skylight area into parent CCeiling objects[1] - total"				CathedralCeiling:ChildAreaSum[1]		= {	SumChildren( ResSkylt:TotAreaInclMult[1] )  }
	"Sum skylight area into parent CCeiling objects[3] - existing"			CathedralCeiling:ChildAreaSum[3]		= {	SumChildren( ResSkylt:TotAreaInclMult[3] )  }
	"Sum skylight area into parent CCeiling objects[2] - new (not add)"	CathedralCeiling:ChildAreaSum[2]		= {	SumChildren( ResSkylt:TotAreaInclMult[2] )  }
	"Sum skylight area into parent CCeiling objects[4] - additions"		CathedralCeiling:ChildAreaSum[4]		= {	SumChildren( ResSkylt:TotAreaInclMult[4] )  }

	"Sum window area into parent Zone objects[1] - total"						ResZn:TotCondZoneWinArea[1]	= {	if (Type < 10) then  SumChildren( ResExtWall:TotWinArea[1] ) + SumChildren( CathedralCeiling:ChildAreaSum[1] ) else  0  endif  }
	"Sum window area into parent Zone objects[3] - existing"					ResZn:TotCondZoneWinArea[3]	= {	if (Type < 10) then  SumChildren( ResExtWall:TotWinArea[3] ) + SumChildren( CathedralCeiling:ChildAreaSum[3] ) else  0  endif  }
;	"Sum window area into parent Zone objects[2] - new/altered"				ResZn:TotCondZoneWinArea[2]	= {	if (Type < 10) then  SumChildren( ResExtWall:TotWinArea[2] ) else  0  endif  }
	"Sum window area into parent Zone objects[2] - new (not add)"			ResZn:TotCondZoneWinArea[2]	= {	if (Type < 10) then  SumChildren( ResExtWall:TotWinArea[2] ) + SumChildren( CathedralCeiling:ChildAreaSum[2] ) else  0  endif  }
	"Sum window area into parent Zone objects[4] - additions"				ResZn:TotCondZoneWinArea[4]	= {	if (Type < 10) then  SumChildren( ResExtWall:TotWinArea[4] ) + SumChildren( CathedralCeiling:ChildAreaSum[4] ) else  0  endif  }

   ; SAC 9/19/19 - OtherZone (MFamProto)
	"Sum window area into parent OtherZone objects[1] - total"				ResOtherZn:TotCondZoneWinArea[1]	= {	if (Type < 10) then  SumChildren( ResExtWall:TotWinArea[1] ) + SumChildren( CathedralCeiling:ChildAreaSum[1] ) else  0  endif  }
	"Sum window area into parent OtherZone objects[3] - existing"			ResOtherZn:TotCondZoneWinArea[3]	= {	if (Type < 10) then  SumChildren( ResExtWall:TotWinArea[3] ) + SumChildren( CathedralCeiling:ChildAreaSum[3] ) else  0  endif  }
;	"Sum window area into parent OtherZone objects[2] - new/altered"		ResOtherZn:TotCondZoneWinArea[2]	= {	if (Type < 10) then  SumChildren( ResExtWall:TotWinArea[2] ) else  0  endif  }
	"Sum window area into parent OtherZone objects[2] - new (not add)"	ResOtherZn:TotCondZoneWinArea[2]	= {	if (Type < 10) then  SumChildren( ResExtWall:TotWinArea[2] ) + SumChildren( CathedralCeiling:ChildAreaSum[2] ) else  0  endif  }
	"Sum window area into parent OtherZone objects[4] - additions"			ResOtherZn:TotCondZoneWinArea[4]	= {	if (Type < 10) then  SumChildren( ResExtWall:TotWinArea[4] ) + SumChildren( CathedralCeiling:ChildAreaSum[4] ) else  0  endif  }

	"Sum cond zone window across entire model[1] - total"						ResProj:TotCondZoneWinArea[1]	= {	SumAll( ResZn:TotCondZoneWinArea[1] ) + SumAll( ResOtherZn:TotCondZoneWinArea[1] )  }
	"Sum cond zone window across entire model[3] - existing"					ResProj:TotCondZoneWinArea[3]	= {	SumAll( ResZn:TotCondZoneWinArea[3] ) + SumAll( ResOtherZn:TotCondZoneWinArea[3] )  }
;	"Sum cond zone window across entire model[2] - new/altered"				ResProj:TotCondZoneWinArea[2]	= {	SumAll( ResZn:TotCondZoneWinArea[2] ) + SumAll( ResOtherZn:TotCondZoneWinArea[2] )  }
	"Sum cond zone window across entire model[2] - new (not add)"			ResProj:TotCondZoneWinArea[2]	= {	SumAll( ResZn:TotCondZoneWinArea[2] ) + SumAll( ResOtherZn:TotCondZoneWinArea[2] )  }
	"Sum cond zone window across entire model[4] - additions"				ResProj:TotCondZoneWinArea[4]	= {	SumAll( ResZn:TotCondZoneWinArea[4] ) + SumAll( ResOtherZn:TotCondZoneWinArea[4] )  }
; SAC 12/3/13 - replaced below w/ above to sum and facilitate scaling of existing windows separate from new/altered
;	"Re-calculate TotAreaInclMult for all Windows"		ResWin:TotAreaInclMult	= {	if ( IsNew ) then Area * Multiplier else 0 endif	}
;	"Sum window area into parent ResExtWall objects"		ResExtWall:TotWinArea	= {	SumChildren( ResWin:TotAreaInclMult )  }
;	"Sum window area into parent Zone objects"		ResZn:TotCondZoneWinArea	= {	if (Type < 10) then  SumChildren( ResExtWall:TotWinArea ) else  0  endif  }
;
;	"Calc TotAreaInclMult for Altered and Exist Windows"	ResWin:TotAreaInclMult	= {	if ( IsAltered .OR. IsExisting ) then Area * Multiplier else UNCHANGED endif	}
;	"Sum Alt window area into parent ResExtWall objects"	ResExtWall:TotAltWinArea	= {	if ( IsAltered ) then SumChildren( ResWin:TotAreaInclMult ) else 0 endif }
;	"Sum Alt window area into parent Zone objects"		ResZn:TotCondZoneAltWinArea	= {	if (Type < 10) then  SumChildren( ResExtWall:TotAltWinArea ) else  0  endif  }
;
;	"Sum cond zone New window across entire model"		ResProj:TotCondZoneWinArea	= {	SumAll( ResZn:TotCondZoneWinArea )  }
;	"Sum cond zone Altered window across entire model"	ResProj:TotCondZoneAltWinArea	= {	SumAll( ResZn:TotCondZoneAltWinArea )  }

;	MJB	4/14/14	Window/Floor Area Ratio determined only from New Windows
	"Set model's TOTAL win area / cond floor area ratio"		ResProj:CondWinAreaCFARat	= {	if (CondFloorArea > 0) then  TotCondZoneWinArea[2] / CondFloorAreaWithMult else  0  endif  }

	; SAC 2/20/15 - new rules to set addition window area ratios based on prescriptive additions table
	"Set ResProj:CondAddWinAreaCFARat"		ResProj:CondAddWinAreaCFARat	= {	if (CondAdditionSize < 0.1) then  0  else  TotCondZoneWinArea[4] / CondAdditionSizeWithMult  endif  }
	"Set ResProj:MaxAddWinAreaCFARat"		ResProj:MaxAddWinAreaCFARat	= {	if (CondAdditionSize < 0.1) then  0
																								else  max(	PrescripAdditions_MaxGlazingArea:MaxWinArea(     "AdditionSize", AdditionSizeWithMult ) / CondAdditionSizeWithMult,
																												PrescripAdditions_MaxGlazingArea:MaxFracWinArea( "AdditionSize", AdditionSizeWithMult ) )		endif  }

;	MJB	4/14/14	keep all existing windows in Std. Design
;	"Set model's cond zone Existing win area multiplier"		ResProj:CondExWinAreaMult	= {	if (CondWinAreaCFARat <= 0.2 .OR. CondFloorArea <= 0 .OR. TotCondZoneWinArea[3] <= 0) then  1.0
;																														else if (TotCondZoneWinArea[3] / CondFloorArea <= 0.2) then  1.0
;																														else  0.2 / (TotCondZoneWinArea[3] / CondFloorArea)  endif endif  }
	"Set model's cond zone Existing win area multiplier"		ResProj:CondExWinAreaMult	= {	1.0	}
;	"Set model's cond zone New/Altered win area multiplier"	ResProj:CondNewWinAreaMult	= {	if (CondWinAreaCFARat <= 0.2 .OR. CondFloorArea <= 0 .OR. TotCondZoneWinArea[2] <= 0) then  1.0
;																														else if (TotCondZoneWinArea[3] > 0 .AND. CondExWinAreaMult < 1.0) then  0.0
;																														else  ((0.2 * CondFloorArea) - (TotCondZoneWinArea[3] * CondExWinAreaMult)) / TotCondZoneWinArea[2]  endif endif  }
; SAC 2/20/15 - revised logic to use floor and window areas that exclude AdditionSize
; KN 04/22/2015 to support different glazing percentages such as the 18% needed in IECC
;	"Set model's cond zone New/Altered win area multiplier"	ResProj:CondNewWinAreaMult	= {	if (AdditionSize < 0.1)
;																														then  if (CondWinAreaCFARat <= 0.2 .OR. (CondFloorArea - CondAdditionSize) <= 0 .OR. TotCondZoneWinArea[2] <= 0) then  1.0
;																																else  (0.2 * (CondFloorArea - CondAdditionSize)) / TotCondZoneWinArea[2]  endif
;																														else	if (CondAddWinAreaCFARat <= MaxAddWinAreaCFARat .OR. CondAdditionSize <= 0 .OR. TotCondZoneWinArea[4] <= 0) then  1.0
;																																else  (MaxAddWinAreaCFARat * CondAdditionSize) / TotCondZoneWinArea[4]  endif
;																														endif	}
	"Set model's cond zone New/Altered win area multiplier"	ResProj:CondNewWinAreaMult	= {	if (AdditionSize < 0.1)
																														then  if (CondWinAreaCFARat <= T24RClimateZoneCodeBase:WindowFrac( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) .OR.
                                                                                                    (CondFloorAreaWithMult - CondAdditionSizeWithMult) <= 0 .OR. TotCondZoneWinArea[2] <= 0) then  1.0
																																else  (T24RClimateZoneCodeBase:WindowFrac( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) * (CondFloorAreaWithMult - CondAdditionSizeWithMult)) / TotCondZoneWinArea[2]  endif
																														else	if (CondAddWinAreaCFARat <= MaxAddWinAreaCFARat .OR. CondAdditionSizeWithMult <= 0 .OR. TotCondZoneWinArea[4] <= 0) then  1.0
																																else  (MaxAddWinAreaCFARat * CondAdditionSizeWithMult) / TotCondZoneWinArea[4]  endif
																														endif	}
; SAC 12/31/13 - fixed bug where CondNewWinAreaMult invalid when New win area exceeds limit of 0.2 Win/CFA
;																														else  ((0.2 * CondFloorArea) - (TotCondZoneWinArea[3] / (TotCondZoneWinArea[1] - TotCondZoneWinArea[3]))) endif endif  }

	"Set ResWin:WinAreaMult"	ResWin:WinAreaMult	= {	if (IsNew .OR. IsAltered) then  ResProj:CondNewWinAreaMult  else  ResProj:CondExWinAreaMult  endif  }
; 	"Debug log message - ResExtWall Window Area"			ResExtWall:Action		= {	PostMessageToLog( "ResExtWall '%s' TotWinArea = %g", Name, TotWinArea[1] )  }


   ;--------------------------------------------------------------------
   ; BudgetConversion: Remove all user-defined Skylights - related to Res ACM section 2.3.5.5
	; mjb	E+A+A	12/1/13
	; mjb	2/19/14	moved entire ResSkylt BC rules below Building-wide window area rules, so that Proposed ResSkylt areas get counted in % glazing calcs
   ;--------------------------------------------------------------------

	
;  mjb   7/11/14  correct Skylight E+A+A rules - do not use Library.txt WinType look up, get Alteration values from CA13CZ table
;	"Assign Code-level WinType for Altered Skylight"	
;										ResSkylt:WinType = { if (IsAltered) then RuleLibrary( WindowType, "T24-2013 Altered Skylight" ) else UNCHANGED endif }	
; mjb 1/12/15 - new lookup table for code values
;	"Assign Code-level Ufactor for Altered Window"	ResSkylt:AltUfactor = {	T24RClimateZoneDesignDay:AltSkyUFactor( "WeatherFileSet", ResProj:WeatherFileSet, "ClimateZone", Proj:CliZnNum )  }	
;	"Assign Code-level SHGC for Altered Window"		ResSkylt:AltSHGC = {		T24RClimateZoneDesignDay:AltSkySHGC( "WeatherFileSet", ResProj:WeatherFileSet, "ClimateZone", Proj:CliZnNum )  }	
	"Assign Code-level Ufactor for Altered Window"	ResSkylt:AltUfactor = {	T24RClimateZoneCodeBase:AltSkyUFactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )  }	
	"Assign Code-level SHGC for Altered Window"		ResSkylt:AltSHGC = {		T24RClimateZoneCodeBase:AltSkySHGC(    "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )  }	

	"Change to Exist Ufactor if better than Code"	
										ResSkylt:NFRCUfactor = { if ( IsAltered ) then
																		if ( IsVerified ) then
																			if ( NFRCUfactor <= AltUfactor ) then exNFRCUfactor else AltUfactor endif
																		else AltUfactor endif 
																		else UNCHANGED endif }

	"Change to Exist SHGC if better than Code"	
										ResSkylt:NFRCSHGC = { if ( IsAltered ) then
																	if ( IsVerified ) then
																		if ( NFRCSHGC <= AltSHGC ) then exNFRCSHGC else AltSHGC endif
																		else AltSHGC endif 											   
																	else UNCHANGED endif }
																	

;  LDH 8/21/16 - remove rule - no credit/penalty should be given for removed/added slylight area (tic 509)
;	"Keep ResSkylt Area if Verified"		ResSkylt:Area = { if ( IsVerified ) then exArea else UNCHANGED endif }


   ;--------------------------------------------------------------------
   ; call subordinate rulelist to handle bulk mods to ensure equal-orientation wall & window areas - SAC 11/9/19
   "mods to ensure equal-orientation wall & window areas"   ResProj:Action  =       ; SFam vs. MFam logic - SAC 11/12/21
      {  if (IfValidAnd( IsSFamResRuleset > 0 ))
         then  EvalRulelist( "BudgetConversion_EqualOrientation" )
         else  EvalRulelist( "BudgetConversion_MFam_Envelope" )  endif  }        ; BudgetConversion_MFam_Envelope - SAC 12/01/21 (MFam)
   ;--------------------------------------------------------------------


	"Call subordinate rulelist to deal with Garage standard design conversion"
			ResProj:Action	= {	if (HasGarage < 0.5 .OR. ComponentCount( Garage ) < 0.1) then  UNCHANGED
									else if (IfValidAnd( IsSFamResRuleset > 0 ))
                           then  EvalRulelist( "BudgetConversion_Garage" )
                           else  UNCHANGED  endif endif  }   ; what to do here for MFam models? - SAC 11/12/21


   ;--------------------------------------------------------------------
   ; BudgetConversion: Slab Floor Rules - related to Res ACM section 2.3.5.7
   ;--------------------------------------------------------------------
  ; mjb 12/2/13 - assign AltEdgeRValue before resetting EdgeInsulation & EdgeInsulOption
	"Altered SlabFloor:EdgeInsulDepth"		SlabFloor:AltEdgeDepth	= {	if (IsAltered .AND. IsVerified) then 
																										if (EdgeInsulation < 0.5) then  0
																											else if (EdgeInsulOption > 0) then  mod( Local( EdgeInsulOption ), 1000 )
																											else  0   ; ???
																											endif endif
																										else UNCHANGED endif }
	"Altered SlabFloor:EdgeInsulRValue"		SlabFloor:AltEdgeRValue		= {	if (IsAltered .AND. IsVerified) then 
																										if (EdgeInsulation < 0.5 .OR. EdgeInsulDepth < 0.1) then  0
																											else if (EdgeInsulOption > 0) then  (EdgeInsulOption - EdgeInsulDepth) / 1000
																											else  0   ; ???
																											endif endif  
																										else UNCHANGED endif }

  ; SAC 6/6/13 - added HeatedSlab property - set to 0 for standard design (?)
  ; mjb 5/6/14 - but not for E+A+A
	"Set SlabFloor:HeatedSlab"			SlabFloor:HeatedSlab			= {	if ( ResProj:RunScope == 2 .AND. IsAltered ) then 0 else UNCHANGED endif }  ; Standard design retains same heated slab state as proposed design - per GC issue #98 - unless Altered mjb 5/6/14
	"Set SlabFloor:Surface"				SlabFloor:Surface				= {	if ( IsNew .OR. IsAltered ) then 
																								if (ParentComponentType() == "ResGarage") then  2   ; Exposed
                                                                        else if (ParentComponentType() == "ResOtherZn")
                                                                        then  if (IfValidAnd( ResOtherZn:AreaParking > 1 )) then  2
                                                                              else  0  endif
																								else  0  endif endif			; "Default (80% carpeted/covered, 20% exposed)"
																							else UNCHANGED endif  }
; mjb	E+A+A	12/1/13
;	mjb 1/12/15 - use new T24RClimateZoneCodeBase lookup table	
	"Set SlabFloor:EdgeInsulation"	SlabFloor:EdgeInsulation	= {	if ( IsNew .OR. IsAltered ) then 
																								if (HeatedSlab > 0.5) then  1		; SAC 6/7/13 - added HeatedSlab setting - per GC issue #98
																									else if (ParentComponentType() == "ResGarage") then  0   ; SAC 6/13/13 - prevent insulation in garage slabs - per GC issue #69
																									else	if ( T24RClimateZoneCodeBase:SlabEdgeIns( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) > 0.5 ) then 1 else 0 endif
																									endif endif
																								else UNCHANGED endif  }

;	mjb 1/12/15 - removed these lines in above rule:								else	switch (Global( Proj:CliZnNum ))
;																												case 16:	1
;																												default:	0
;																											endswitch  endif endif

;	mjb 1/12/15 - use new T24RClimateZoneCodeBase lookup table	
	"Set SlabFloor:EdgeInsulOption"	SlabFloor:EdgeInsulOption	= {	if ( IsNew .OR. IsAltered ) then 
																								if (HeatedSlab > 0.5)		; SAC 6/7/13 - added HeatedSlab setting - per GC issue #98
																									then T24RClimateZoneCodeBase:HtSlabEdgeIns( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
																								else T24RClimateZoneCodeBase:SlabEdgeIns( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) endif
																							else UNCHANGED endif  }

;	mjb 1/12/15 - removed these lines in above rule:							then  switch (Global( Proj:CliZnNum ))
;																											case 16:	 10016   ; "R-10, 16 inches"
;																											default:	  5016   ; "R-5, 16 inches"
;																										endswitch
;																								else	switch (Global( Proj:CliZnNum ))
;																											case 16:	  7016   ; "R-7, 16 inches"
;																											default:	0
;; replaced w/ above by mjb 8/22/13	- changed 12/2/13 to 0 from 5016							default:	DEFAULT
;																										endswitch  endif

  ; SAC 6/7/13 - default EdgeInsulRValue & EdgeInsulDepth based on EdgeInsulation & EdgeInsulOption selections to facilitate HeatedSlab checks
	"Default SlabFloor:EdgeInsulDepth"		SlabFloor:EdgeInsulDepth	= {	if (EdgeInsulation < 0.5 .OR. EdgeInsulOption < 1) then  0
																									else if (EdgeInsulOption > 0) then  mod( Local( EdgeInsulOption ), 1000 )
																									else  0   ; ???
																									endif endif  }
	"Default SlabFloor:EdgeInsulRValue"		SlabFloor:EdgeInsulRValue	= {	if (EdgeInsulation < 0.5 .OR. EdgeInsulDepth < 0.1) then  0
																									else if (EdgeInsulOption > 0) then  (EdgeInsulOption - EdgeInsulDepth) / 1000
																									else  0   ; ???
																									endif endif  }

; mjb	E+A+A 	If Verified - reassign EdgeInsulRValue, EdgeInsulDepth and Surface based on proposed Altered slab versus prescriptive requirements	12/2/13
	"Default SlabFloor:exEdgeInsulDepth"		SlabFloor:exEdgeInsulDepth		= {	if (IfValidAnd( exEdgeInsulation < 0.5 ) .OR. IfValidAnd( exEdgeInsulOption < 1 )) then  0
																												else if (IfValidAnd( exEdgeInsulOption > 0 )) then  mod( Local( exEdgeInsulOption ), 1000 )
																												else  0   ; ???
																												endif endif  }
	"Default SlabFloor:exEdgeInsulRValue"		SlabFloor:exEdgeInsulRValue	= {	if (IfValidAnd( exEdgeInsulation < 0.5 ) .OR. IfValidAnd( exEdgeInsulDepth < 0.1 )) then  0
																												else if (IfValidAnd( exEdgeInsulOption > 0 )) then  (exEdgeInsulOption - exEdgeInsulDepth) / 1000
																												else  0   ; ???
																												endif endif  }
	"Re-assign EdgeInsulDepth if Verified"		SlabFloor:EdgeInsulDepth	= {	if (IsAltered .AND. IsVerified) then
																											if (AltEdgeDepth >= EdgeInsulDepth) then exEdgeInsulDepth else UNCHANGED endif
																										else UNCHANGED endif }
	"Re-assign EdgeInsulRValue if Verified"	SlabFloor:EdgeInsulRValue	= {	if (IsAltered .AND. IsVerified) then
																											if (AltEdgeRValue >= EdgeInsulRValue) then exEdgeInsulRValue else UNCHANGED endif
																										else UNCHANGED endif }
	"Re-assign Surface if Verified"				SlabFloor:Surface		= {	if (IsAltered .AND. IsVerified) then exSurface else UNCHANGED endif }

;	"debug SlabFloor"					SlabFloor:Action = { if (IsAltered) then PostWarning( "SlabFloor: '%s'  AltEdgeDepth: %g   EdgeInsulDepth: %g   AltEdgeRValue:  %g  AltEdgeRValue:  %g", Name, AltEdgeDepth, EdgeInsulDepth, AltEdgeRValue, EdgeInsulRValue ) else UNCHANGED endif }

   ;--------------------------------------------------------------------
   ; BudgetConversion: ResExtWall and Window E+A+A rules
   ; mjb-10/28/13	
   ;--------------------------------------------------------------------

;	"debug ResExtWall"					ResExtWall:Action = { if (ParentType == 1 .AND. IsAltered) then PostWarning( "ResExtWall: '%s' Cons: '%s'", Name, Construction:Name ) else UNCHANGED endif }
	"Assign Altered Wall Cons UValue"		ResExtWall:AltConsUValue = {  if (ParentType == 1 .AND. IsAltered) then Construction:WinterDesUValue else UNCHANGED endif }
	"Assign Code-level Altered Cons from Library"	ResExtWall:Construction = { if (ParentType == 1 .AND. IsAltered) then 
                                                                            if (Construction:FrameLayer > 600) then RuleLibrary( Cons, "T24-2013 2x6 Altered Wall" ) 
											   else RuleLibrary( Cons, "T24-2013 2x4 Altered Wall" ) endif
										    else UNCHANGED endif }
;	"debug ResExtWall Cons"				ResExtWall:Action = { if (ParentType == 1 .AND. IsAltered) then PostWarning( "ResExtWall Cons: '%s' OverallCodeUValue = %g  AltConsUValue = %g T24AltConsUValue = %g", Construction:Name, Construction:OverallCodeUValue, AltConsUValue, Construction:T24AltConsUValue ) else UNCHANGED endif }
	"Change to Exist Cons if better than Code"	ResExtWall:Construction = { if (ParentType == 1 .AND. IsAltered) then 
																									if ( IsVerified ) then
																										if ( AltConsUValue <= Construction:T24AltConsUValue ) then exConstruction else UNCHANGED endif
										     	  													else UNCHANGED endif 
										    													else UNCHANGED endif }
;	"debug ResExtWall Cons 2"				ResExtWall:Action = { if (ParentType == 1 .AND. IsAltered .AND. IsVerified) then PostWarning( "Altered ResExtWall Cons: '%s' ", Construction:Name ) else UNCHANGED endif }

   ; SAC 3/17/14 - before re-defaulting Cons stuff - blast all objects generated during previous COns defaulting
	"Blast all LayerParams objects"			ResProj:Action	= {	DeleteAllComps( LayerParams )  }
	"Blast ResMats marked for deletion"			ResMat:Action	= {	if (IfValidAnd( MarkForDeletion == 1 )) then  DeleteComp()  else  UNCHANGED  endif  }
;	"Blast ResMats not referenced by Cons:*"	ResMat:Action	= {	if (CountRefs( Cons:CavityPathMats ) < 1 .AND. CountRefs( Cons:FramePathMats ) < 1) then  DeleteComp()  else  UNCHANGED  endif  }		; SAC 3/21/14

; mjb-10/30/13 E+A+A - need to recalc details for ALL Constructions in case changed
	"Default ResMat ConductivityQII"				ResProj:Action	= {	EvalRulelist( "DefaultMatCondQII" )  }		; SAC 3/18/14
	"Calc Cons properties final time"		Cons:Action = {	EvalRulelist( "DefaultConsObject", 1 )  }
	; SAC 3/12/14 - consolidate rules to setup final cavity materials, LayerParams objects and call to ConsUFactoRes() call
	"Perform final Ufactor prep and call ConsUFactoRes()"		ResProj:Action	= {	EvalRulelist( "SetupCons_UValue_All" )  }


; mjb-10/21/13	E+A+A need to keep Altered and Existing Walls on actual azimuth
	"Assign azimuth to ResExtWall Orientation"				ResExtWall:OrientationValue				= {	if (IsStdCondZoneWall) then  UNCHANGED
																																else if (IsAltered .OR. IsExisting) then Local(Azimuth) else UNCHANGED endif endif }
;do same for UndWall and CathedralCeilings
;	"Assign azimuth to UndWall Orientation"				UndWall:OrientationValue				= { if (IsAltered .OR. IsExisting) then Local(Azimuth) else UNCHANGED endif }
	"Assign azimuth to CathedralCeiling Orientation"	CathedralCeiling:OrientationValue	= { if (IsAltered .OR. IsExisting) then Local(Azimuth) else UNCHANGED endif }

; mjb-10/28/13	E+A+A now apply Alteration rules to Windows
; mjb 1/12/15 change to new look up table for code levels
	"Assign Code-level Ufactor for Altered Window"	ResWin:AltUfactor = {	if (IsStdCondZoneWin) then  UNCHANGED
;																								else  T24RClimateZoneDesignDay:AltUFactor( "WeatherFileSet", ResProj:WeatherFileSet, "ClimateZone", Proj:CliZnNum )  endif }	
																								else  T24RClimateZoneCodeBase:AltUFactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )  endif }	
	"Assign Code-level SHGC for Altered Window"		ResWin:AltSHGC = {		if (IsStdCondZoneWin) then  UNCHANGED
;																								else  T24RClimateZoneDesignDay:AltSHGC( "WeatherFileSet", ResProj:WeatherFileSet, "ClimateZone", Proj:CliZnNum )  endif }	
																								else  T24RClimateZoneCodeBase:AltSHGC( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )  endif }	
;	"debug Window"				ResWin:Action = { if (IsAltered) then PostWarning( "Altered ResWin: '%s' Ufactor: %g  SHGC: %g  AltUfactor: %g  AltSHGC: %g", Name, NFRCUfactor, NFRCSHGC, AltUfactor, AltSHGC  ) else UNCHANGED endif }

	"Change to Exist Ufactor if better than Code"	ResWin:NFRCUfactor = {	if (IsStdCondZoneWin) then  UNCHANGED
																								else if ( IsAltered ) then
																									if ( IsVerified ) then
																										if ( NFRCUfactor <= AltUfactor ) then exNFRCUfactor else AltUfactor endif
																										else AltUfactor endif 
																									else UNCHANGED endif endif }

	"Change to Exist SHGC if better than Code"	ResWin:NFRCSHGC = {	if (IsStdCondZoneWin) then  UNCHANGED
																						else if ( IsAltered ) then
																							if ( IsVerified ) then
																								if ( NFRCSHGC <= AltSHGC ) then exNFRCSHGC else AltSHGC endif
																								else AltSHGC endif 											   
																							else UNCHANGED endif endif }
;; mjb-10/29/13	E+A+A only adjust Win Area for New and Altered Windows
;	"Adjust Area based on total CFA Ratio"		ResWin:Area = { if (IsNew .OR. IsAltered) then Area * ResProj:CondWinAreaMult else UNCHANGED endif }
;	"Recalc VentArea based on Area adjustment"	ResWin:VentArea = { if (IsNew .OR. IsAltered) then TotAreaInclMult * 0.1 * ResProj:CondWinAreaMult else UNCHANGED endif  }   
; SAC 12/3/13 - revise rules to handle scaling of all window area
	"Recalc VentArea based on adjusted Area"		ResWin:VentArea	= {  Area * Multiplier * 0.1  }   


   ;--------------------------------------------------------------------
   ; BudgetConversion: Underground Walls
	; mjb 1/12/15 - using new T24RClimateZoneCodeBase for std Constructions
   ;--------------------------------------------------------------------
	; revise UndWalls to reference T-24 construction
	"Set UndWall:Construction (for cond zones)"		UndWall:Construction	= {	if (ParentComponentType() != "ResZn") then  UNCHANGED
																										else if (Parent( Type ) > 9) then  UNCHANGED
																										else if (IsNew .OR. IsAltered)
;																										then	RuleLibrary( Cons, T24RClimateZoneDesignDay:StdMassUndWallCons( "WeatherFileSet", ResProj:WeatherFileSet, "ClimateZone", Proj:CliZnNum ) )
																										then	RuleLibrary(Cons, T24RClimateZoneCodeBase:StdMassUndWallCons( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) )
																										else  UNCHANGED  endif endif endif  }


; mjb-10/22/13	E+A+A Existing Walls and Windows should be OK without additional mods

   ;--------------------------------------------------------------------
   ; BudgetConversion: Thermostats
   ;--------------------------------------------------------------------
	"Specify single zone heating thermostat setpoint profile (ResZn:HeatTDaySched)"
				ResZn:HeatTDaySched	= {	switch (Local( Type ))
											case 1:	;	conditioned/single zone
													if (GlobalStatus( ResProj:SZHeat_DefaultTDaySch ) > 0) then  Global( ResProj:SZHeat_DefaultTDaySch )	else  UNCHANGED  endif
											case 2:	;	living
													if (GlobalStatus( ResProj:SZHeat_DefaultTDaySch ) > 0) then  Global( ResProj:SZHeat_DefaultTDaySch )	else  UNCHANGED  endif
											case 3:	;	sleeping
													if (GlobalStatus( ResProj:SZHeat_DefaultTDaySch ) > 0) then  Global( ResProj:SZHeat_DefaultTDaySch )	else  UNCHANGED  endif
											default: ; unconditioned
													UNCHANGED
										endswitch  }
	"Specify single zone cooling thermostat setpoint profile (ResZn:CoolTDaySched)"
				ResZn:CoolTDaySched	= {	switch (Local( Type ))
											case 1:	;	conditioned/single zone
													if (GlobalStatus( ResProj:SZCool_DefaultTDaySch ) > 0) then  Global( ResProj:SZCool_DefaultTDaySch )	else  UNCHANGED  endif
											case 2:	;	living
													if (GlobalStatus( ResProj:SZCool_DefaultTDaySch ) > 0) then  Global( ResProj:SZCool_DefaultTDaySch )	else  UNCHANGED  endif
											case 3:	;	sleeping
													if (GlobalStatus( ResProj:SZCool_DefaultTDaySch ) > 0) then  Global( ResProj:SZCool_DefaultTDaySch )	else  UNCHANGED  endif
											default: ; unconditioned
													UNCHANGED
										endswitch  }

   ; SAC 9/19/19 - OtherZone (MFamProto)
	"Specify single zone heating thermostat setpoint profile (ResOtherZn:HeatTDaySched)"
				ResOtherZn:HeatTDaySched	= {	switch (Local( Type ))
											case 1:	;	conditioned
													if (GlobalStatus( ResProj:SZHeat_DefaultTDaySch ) > 0) then  Global( ResProj:SZHeat_DefaultTDaySch )	else  UNCHANGED  endif
											default: ; unconditioned
													UNCHANGED
										endswitch  }
	"Specify single zone cooling thermostat setpoint profile (ResOtherZn:CoolTDaySched)"
				ResOtherZn:CoolTDaySched	= {	switch (Local( Type ))
											case 1:	;	conditioned
													if (GlobalStatus( ResProj:SZCool_DefaultTDaySch ) > 0) then  Global( ResProj:SZCool_DefaultTDaySch )	else  UNCHANGED  endif
											default: ; unconditioned
													UNCHANGED
										endswitch  }


   ;--------------------------------------------------------------------
   ; BudgetConversion: HVAC
   ;--------------------------------------------------------------------

; TO DO ?? - revised HVACSys:FloorAreaServed to ensure that cond zone area is not assigned to systems referenced by zone as Existing for altered & verified zones

   ; retrieve HVAC htg & clg caps from PrelimProp run(s) to inform 2022+ Std design Fan power - SAC 03/14/21
   "Set HVACSys:PrelimPropHtgCap"   HVACSys:PrelimPropHtgCap =       ; revised to prevent cap retrieval for unassigned systems or when no PreProp run performed - SAC 03/17/21
      { if (IfValidAnd( Proj:AnalysisVersion >= 220000 ) .AND. (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb") .AND.
            IfValidAnd( FloorAreaServed[1] > 0.5 ) .AND. IfValidAnd( ResProj:PrelimPropRunReqd > 0 ))
         then  if (IfValidAnd( ResProj:AllOrientations > 0 ))
               then  min(           RetrieveCSVValue( ValidOr( ResProj:ProcessingPath, "" ) + ValidOr( ResProj:ProjFileNameNoExt, "" ) + " - PreProp-N-HVACCaps.csv", 2, Name, 1 ),
                          min(      RetrieveCSVValue( ValidOr( ResProj:ProcessingPath, "" ) + ValidOr( ResProj:ProjFileNameNoExt, "" ) + " - PreProp-E-HVACCaps.csv", 2, Name, 1 ),
                               min( RetrieveCSVValue( ValidOr( ResProj:ProcessingPath, "" ) + ValidOr( ResProj:ProjFileNameNoExt, "" ) + " - PreProp-S-HVACCaps.csv", 2, Name, 1 ),
                                    RetrieveCSVValue( ValidOr( ResProj:ProcessingPath, "" ) + ValidOr( ResProj:ProjFileNameNoExt, "" ) + " - PreProp-W-HVACCaps.csv", 2, Name, 1 ) ) ) )
               else  RetrieveCSVValue( ValidOr( ResProj:ProcessingPath, "" ) + ValidOr( ResProj:ProjFileNameNoExt, "" ) + " - PreProp-HVACCaps.csv", 2, Name, 1 )
               endif
         else  UNCHANGED  endif  }
   "Set HVACSys:PrelimPropClgCap"   HVACSys:PrelimPropClgCap = 
      { if (IfValidAnd( Proj:AnalysisVersion >= 220000 ) .AND. (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb") .AND.
            IfValidAnd( FloorAreaServed[1] > 0.5 ) .AND. IfValidAnd( ResProj:PrelimPropRunReqd > 0 ))
         then  if (IfValidAnd( ResProj:AllOrientations > 0 ))
               then  min(           RetrieveCSVValue( ValidOr( ResProj:ProcessingPath, "" ) + ValidOr( ResProj:ProjFileNameNoExt, "" ) + " - PreProp-N-HVACCaps.csv", 2, Name, 2 ),
                          min(      RetrieveCSVValue( ValidOr( ResProj:ProcessingPath, "" ) + ValidOr( ResProj:ProjFileNameNoExt, "" ) + " - PreProp-E-HVACCaps.csv", 2, Name, 2 ),
                               min( RetrieveCSVValue( ValidOr( ResProj:ProcessingPath, "" ) + ValidOr( ResProj:ProjFileNameNoExt, "" ) + " - PreProp-S-HVACCaps.csv", 2, Name, 2 ),
                                    RetrieveCSVValue( ValidOr( ResProj:ProcessingPath, "" ) + ValidOr( ResProj:ProjFileNameNoExt, "" ) + " - PreProp-W-HVACCaps.csv", 2, Name, 2 ) ) ) )
               else  RetrieveCSVValue( ValidOr( ResProj:ProcessingPath, "" ) + ValidOr( ResProj:ProjFileNameNoExt, "" ) + " - PreProp-HVACCaps.csv", 2, Name, 2 )
               endif
         else  UNCHANGED  endif  }

   ; added (temporary) logic to PREVENT this check in MFam models w/ NumDUsServed > 1, since this system can serve multiple DUs and therefore doesn't represent a single (installed) system - SAC 04/21/21
   "Possibly revise HVACSys:LrgHtPumpStdFanPwr based on autosized result"     HVACSys:LrgHtPumpStdFanPwr =        ; SAC 03/14/21  ; SAC 03/15/21
      {  if (IfValidAnd( Proj:AnalysisVersion >= 220000 ) .AND. (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb") .AND.
             IfValidAnd( LrgHtPumpStdFanPwr = 0 ) .AND. IfValidAnd( PropHtPumpAutoSz > 0 ) .AND.
             max( ValidOr( PrelimPropHtgCap, 0 ), ValidOr( PrelimPropClgCap, 0 ) ) >= 54.0 .AND.
             (ResProj:IsMultiFamily < 0.5 .OR. IfValidAnd( NumDUsServed < 2 )))
         then  0.58
         else  UNCHANGED
         endif  }

   ; SAC 12/5/13 - setup certain E+A+A-related properties that may be referenced during Standard model HVAC setup
   ; will only work for Central Furnaces (StdHeatingType == 1)...  SAC 12/26/14 - revised to handle ALL system types
	"Set ResZn:VerifExistingAFUE"		ResZn:VerifExistingAFUE	= {	if (Type < 10 .AND. ResProj:RunScope == 2 .AND. HVACSysStatus == 2 .AND. HVACSysVerified .AND. LocalCompAssigned( exHVACSystem ))
																						then	if (IfValidAnd( exHVACSystem:HtSysAFUE > 0 ))
																								then  exHVACSystem:HtSysAFUE  else  0  endif
																						else	0  endif  }

   ; expanding to take into account HSPF2 - SAC 10/09/22 (tic #3431)
	"Set ResZn:VerifExistingHSPF"		ResZn:VerifExistingHSPF	= {	if (Type < 10 .AND. ResProj:RunScope == 2 .AND. HVACSysStatus == 2 .AND. HVACSysVerified .AND. LocalCompAssigned( exHVACSystem ))
																						then	if (exHVACSystem:EffMetric == 1 .AND. IfValidAnd( exHVACSystem:HPSysHSPF > 0 ))
																								then  exHVACSystem:HPSysHSPF
                                                                        else if (exHVACSystem:EffMetric == 2 .AND. IfValidAnd( exHVACSystem:HPSysHSPF2 > 0 ))
																								then  exHVACSystem:HPSysHSPF2
                                                                        else  0  endif endif
																						else	0  endif  }

   ; will only work for Split or Pkg AC (StdCoolingType == 2 or 3)...  SAC 12/26/14 - revised to handle ALL system types
   ; expanding to take into account SEER2/EER2 - SAC 09/19/22 (tic #1331)
	"Set ResZn:VerifExistingSEER"			ResZn:VerifExistingSEER			= {	if (Type < 10 .AND. ResProj:RunScope == 2 .AND. HVACSysStatus == 2 .AND. HVACSysVerified .AND. LocalCompAssigned( exHVACSystem ))
																									then	if (exHVACSystem:EffMetric == 1 .AND. IfValidAnd( exHVACSystem:ClSysSEER > 0 ))
                                                                                 then  exHVACSystem:ClSysSEER
                                                                                 else if (exHVACSystem:EffMetric == 2 .AND. IfValidAnd( exHVACSystem:ClSysSEER2 > 0 ))
																											then  exHVACSystem:ClSysSEER2
                                                                                 else  0  endif endif
																									else	0  endif  }
	"Set ResZn:VerifExistingEER"			ResZn:VerifExistingEER			= {	if (Type < 10 .AND. ResProj:RunScope == 2 .AND. HVACSysStatus == 2 .AND. HVACSysVerified .AND. LocalCompAssigned( exHVACSystem ))
																									then	if (exHVACSystem:EffMetric == 1 .AND. IfValidAnd( exHVACSystem:ClSysEER > 0 ))
                                                                                 then  exHVACSystem:ClSysEER
                                                                                 else if (exHVACSystem:EffMetric == 2 .AND. IfValidAnd( exHVACSystem:ClSysEER2 > 0 ))
																											then  exHVACSystem:ClSysEER2
                                                                                 else  0  endif endif
																									else	0  endif  }
	"Set ResZn:VerifExistingCFMperTon"	ResZn:VerifExistingCFMperTon	= {	if (Type < 10 .AND. ResProj:RunScope == 2 .AND. HVACSysStatus == 2 .AND. HVACSysVerified .AND. LocalCompAssigned( exHVACSystem ))
																									then	if (IfValidAnd( exHVACSystem:ClSysCFMperTon > 0 ))
																											then  exHVACSystem:ClSysCFMperTon  else  0  endif
																									else	0  endif  }
	"Set ResZn:VerifExistingFChg"			ResZn:VerifExistingFChg			= {	if (Type < 10 .AND. ResProj:RunScope == 2 .AND. HVACSysStatus == 2 .AND. HVACSysVerified .AND. LocalCompAssigned( exHVACSystem ))
																									then	if (IfValidAnd( exHVACSystem:ClSysRefrigChgAdjFctr > 0 ))
																											then  exHVACSystem:ClSysRefrigChgAdjFctr  else  0  endif
																									else	0  endif  }
;	"debug Verif flags"			ResZn:Action = { PostWarning( "ResZn:VerifyExisting... - Zone '%s'  VerifExistingAFUE: %g  VerifExistingSEER: %g VerifExistingCFMperTon: %g", Name, VerifExistingAFUE, VerifExistingSEER, VerifExistingCFMperTon )  }

; "DBG msg" HVACSys:Action = { MessageBox( "in BudgetConversion -> HVACSys:FloorAreaServed = %g  /  HVACSys:StdHeatingType = '%s' (%g)", FloorAreaServed, EnumString( StdHeatingType ), StdHeatingType ) }

; SAC 4/29/14 - Added rules to ensure standard design ducts when applicable (GC #296)
; mjb	10/24/14	- mods to keep existing HVAC in Std Design for Additions Alone
; mjb 10/27/14 - mods to keep existing HVAC in Std Design for E+A+A
; revisions throughout BudgetConversion replacing ResOtherZn:CondFloorArea w/ ResOtherZn:NewOrAltHVACFloorArea - SAC 06/28/23 (tic #3479)
	; SAC 8/31/15 - replaced references to ResZn:HVACSystem with ResZn:ActiveHVACSystem, since ResZn:HVACSystem assigned only for New systems
  "Turn on heating ducts if proposed model had them toggled off: HVACSys:HeatDucted"      ; SAC 9/19/19 - OtherZone (MFamProto)
  HVACSys:HeatDucted	= {	
	  if (Type == 2)		
    then ; heat pump system
      if (HtPumpSysType < 1 .OR. LocalCompAssigned( HtPumpSystem[1] ) == 0 .OR. 
          (SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:NewOrAltHVACFloorArea ) < 1 .AND.
		      ((ResProj:IsAddAlone > 0.5 .AND. MinRevRef( ResZn:ActiveHVACSystem, ResZn:HVACSysStatus ) < 2) .OR. 
             (ResProj:RunScope == 2 .AND. MinRevRef( ResZn:ActiveHVACSystem, ResZn:HVACSysStatus ) < 2)) ))
      then  UNCHANGED
			else if (T24RHeatingEquipment:DuctFlag( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", HtPumpSysTypeAbbrev ) != 0)
			then  1
			else  UNCHANGED
			endif endif
    else
    if (HeatSysType < 1 .OR. LocalCompAssigned( HeatSystem[1] ) == 0 .OR. 
        (SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:NewOrAltHVACFloorArea ) < 1 .AND.
		    ((ResProj:IsAddAlone > 0.5 .AND. MinRevRef( ResZn:ActiveHVACSystem, ResZn:HVACSysStatus ) < 2) .OR. 
           (ResProj:RunScope == 2 .AND. MinRevRef( ResZn:ActiveHVACSystem, ResZn:HVACSysStatus ) < 2)) ))
    then  UNCHANGED
    else if (T24RHeatingEquipment:DuctFlag( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", HeatSysTypeAbbrev ) != 0) ; TO DO: DR - Revise to be = 1?
    then  1
    else  UNCHANGED
    endif endif endif  }
  "Turn on cooling ducts if proposed model had them toggled off: HVACSys:CoolDucted"      ; SAC 9/19/19 - OtherZone (MFamProto)
  HVACSys:CoolDucted	= {
    if (Type == 2)		; heat pump system
    then
      if (HtPumpSysType < 1 .OR. LocalCompAssigned( HtPumpSystem[1] ) == 0 .OR. 
          (SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:NewOrAltHVACFloorArea ) < 1 .AND.
		      ((ResProj:IsAddAlone > 0.5 .AND. MinRevRef( ResZn:ActiveHVACSystem, ResZn:HVACSysStatus ) < 2) .OR. 
             (ResProj:RunScope == 2 .AND. MinRevRef( ResZn:ActiveHVACSystem, ResZn:HVACSysStatus ) < 2)) ))
      then  UNCHANGED
			else if (T24RHeatingEquipment:DuctFlag( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", HtPumpSysTypeAbbrev ) != 0) 
			then  1
			else  UNCHANGED
			endif endif
    else 
    if (CoolSysType < 1 .OR. LocalCompAssigned( CoolSystem[1] ) == 0 .OR. 
        (SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:NewOrAltHVACFloorArea ) < 1 .AND.
		     ((ResProj:IsAddAlone > 0.5 .AND. MinRevRef( ResZn:ActiveHVACSystem, ResZn:HVACSysStatus ) < 2) .OR. 
            (ResProj:RunScope == 2 .AND. MinRevRef( ResZn:ActiveHVACSystem, ResZn:HVACSysStatus ) < 2)) )) 
    then  UNCHANGED
		else if (T24RCoolingEquipment:DuctFlag( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", CoolSysTypeAbbrev ) != 0) then 1
		else  UNCHANGED
		endif endif endif }

;"dbg"  HVACSys:Action = {  PostMessageToLog( "  about to force HtSys setup: Status %g, IsVerified %g, FloorAreaServed %g, StdHeatingType %g", Status, IsVerified, FloorAreaServed, StdHeatingType )  }
;"dbg"  HVACSys:Action = {  if (FloorAreaServed < 1) then  UNCHANGED
;                           else  MessageBox( "  about to force HtSys setup: HeatSysType '%s' (%g) / StdHeatingType '%s' (%g)", EnumString(HeatSysType), HeatSysType, EnumString(StdHeatingType), StdHeatingType )  endif  }
	"Setup Standard non-heat pump heating system properties"		; SAC 12/26/14 - added logic to ensure that Altered/Verified systems get processed via Setup_HVACSys_Heat_*   ; SAC 9/19/19 - OtherZone (MFamProto)
			HVACSys:Action		= {	if ((Status != 2 .OR. IsVerified < 0.5) .AND.
												 (FloorAreaServed < 0.1 .OR.
												   (SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:NewOrAltHVACFloorArea ) < 1 .AND.
												      ((ResProj:IsAddAlone > 0.5 .AND. MinRevRef( ResZn:ActiveHVACSystem, ResZn:HVACSysStatus ) < 2) .OR.
												 		 (ResProj:RunScope  == 2   .AND. MinRevRef( ResZn:ActiveHVACSystem, ResZn:HVACSysStatus ) < 2))) )) then  UNCHANGED
											else	switch (StdHeatingType)
														case  1 :	EvalRulelist( "Setup_HVACSys_Heat_CntrlFurnace" , 1 )
														case  2 :	EvalRulelist( "Setup_HVACSys_Heat_WallFurnaceFan"       , 1 )
														case  3 :	EvalRulelist( "Setup_HVACSys_Heat_Boiler"       , 1 )
														case  4 :	UNCHANGED	; SplitHeatPump
														case 14 :	EvalRulelist( "Setup_HVACSys_Heat_WallFurnaceGravity" , 1 )		; SAC 11/25/14 - value 4->14
														case 15 : EvalRulelist( "Setup_HVACSys_Heat_FloorFurnace"       , 1 )		; SAC 11/25/14 - value 5->15
														case 16 : EvalRulelist( "Setup_HVACSys_Heat_RoomHeater"  , 1 )				; SAC 11/25/14 - value 6->16
														case 19 :	UNCHANGED  ; SDHVSplitHeatPump
														case 10 :	UNCHANGED  ; DuctlessHeatPump
														case  7 :	UNCHANGED  ; RoomHeatPump
														case  8 :	EvalRulelist( "Setup_HVACSys_Heat_Electric"     , 1 )
														case  9 :	EvalRulelist( "Setup_HVACSys_Heat_CombHydro"    , 1 )
														default :	PostError( "Unexpected standard design heating system type (%g) encountered for ResHVACSys '%s'", StdHeatingType, Name )
													endswitch  endif  }
													
	"Setup Standard heat pump system properties"		; SAC 12/26/14 - added logic to ensure that Altered/Verified systems get processed via Setup_HVACSys_HtPump_*   ; SAC 9/19/19 - OtherZone (MFamProto)
			HVACSys:Action		= {	if ((Status != 2 .OR. IsVerified < 0.5) .AND.
												 (FloorAreaServed < 0.1 .OR.
												   (SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:NewOrAltHVACFloorArea ) < 1 .AND.
												      ((ResProj:IsAddAlone > 0.5 .AND. MinRevRef( ResZn:ActiveHVACSystem, ResZn:HVACSysStatus ) < 2) .OR.
												 		 (ResProj:RunScope == 2 .AND. MinRevRef( ResZn:ActiveHVACSystem, ResZn:HVACSysStatus ) < 2))) )) then  UNCHANGED
											else	switch (StdHeatingType)
														case  1 :	UNCHANGED  ; CntrlFurnace
														case  2 :	UNCHANGED  ; Heater
														case  3 :	UNCHANGED  ; Boiler
														case  4 :	EvalRulelist( "Setup_HVACSys_HtPump_SplitHeatPump", 1 )
														case 19 :	EvalRulelist( "Setup_HVACSys_HtPump_SDHVSplitHeatPump", 1 )
														case 10 :	EvalRulelist( "Setup_HVACSys_HtPump_DuctlessMiniSplitHeatPump", 1 )
														case  7 :	EvalRulelist( "Setup_HVACSys_HtPump_RoomHeatPump" , 1 )
														case  8 :	UNCHANGED  ; Electric
														case  9 :	UNCHANGED  ; CombHydro
														default :	PostError( "Unexpected standard design heat pump system type (%g) encountered for ResHVACSys '%s'", StdHeatingType, Name )
													endswitch  endif  }
; DEBUGGING
;	"store BEMProc details"		ResProj:Action = {  StoreBEMProc( "following budg HtPump setup", 0 )  }

;	"debug HVAC"			HVACSys:Action = { PostWarning( "BudgetConversion-HVACSys  StdCoolingType: %g",  StdCoolingType )  }
	"Setup Standard cooling system properties"		; SAC 12/26/14 - added logic to ensure that Altered/Verified systems get processed via Setup_HVACSys_Cool_*   ; SAC 9/19/19 - OtherZone (MFamProto)
			HVACSys:Action		= {	if ((Status != 2 .OR. IsVerified < 0.5) .AND.
												 (FloorAreaServed < 0.1 .OR.
												   (SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:NewOrAltHVACFloorArea ) < 1 .AND.
												      ((ResProj:IsAddAlone > 0.5 .AND. MinRevRef( ResZn:ActiveHVACSystem, ResZn:HVACSysStatus ) < 2) .OR.
												 		 (ResProj:RunScope == 2 .AND. MinRevRef( ResZn:ActiveHVACSystem, ResZn:HVACSysStatus ) < 2))) )) then  UNCHANGED
											else	switch (StdCoolingType)
														case  2 :	Evalrulelist( "Setup_HVACSys_Cool_SplitAirCond" , 1 )
														case  5 :	Evalrulelist( "Setup_HVACSys_Cool_RoomAirCond"  , 1 )
														case  6 :	Evalrulelist( "Setup_HVACSys_Cool_SplitHeatPump", 1 )
														case 10 :	Evalrulelist( "Setup_HVACSys_Cool_RoomHeatPump" , 1 )
														default :	PostError( "Unexpected standard design cooling system type (%g) encountered for ResHVACSys '%s'", StdCoolingType, Name )
													endswitch  endif  }
   ; SAC 7/22/19 - ensure use of T24RClimateZoneCodeBase:CFMperTon for Existing systems w/ Ducts that are New, Altered or Exist+New (tic #1141)
   ; SAC 10/18/19 - added logic to ensure that 2019.1.1 release produces identical results to 1.0
   "Set Standard HVACSys:ClSysCFMperTon for Existing systems having Altered, New or Existing+New Ducts"     HVACSys:ClSysCFMperTon  =
      {  if (ResProj:RunScope != 2 .OR. Status != 1 .OR. IfValidAnd( Proj:AnalysisVersion <= 190101 )) then  UNCHANGED
         else if (T24RCoolingEquipment:DuctFlag( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", EnumString( StdCoolingType ) ) < 1 .OR.
                  LocalCompAssigned( DistribSystem ) < 1 .OR. IfValidAnd( DistribSystem:Status = 1 )) then  UNCHANGED
         else  T24RClimateZoneCodeBase:CFMperTon( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
         endif endif  }

   "Setup budget ducts & fan"    ; SAC 1/17/18
      ResProj:Action = {  EvalRulelist( "BudgetConversion_SetupDuctsAndFan" )  }
;"store BEMProc details" ResProj:Action = {  if (RunAbbrev == "s") then  StoreBEMProc( "frc HVACDist-type", 0 ) else  UNCHANGED  endif  }
;"debugging" ResProj:Action = { if (RunAbbrev == "s") then  MessageBox( "Model stored for %s:%g run", RunID, StdsVersionYr )  else  UNCHANGED  endif }

; mjb	10/24/14	- mods to keep existing HVAC in Std Design for Additions Alone
;	mjb	10/27/14 - mods to keep existing HVAC in Std Design for E+A+A
   "Initialize other generic properties (common to Ht/Cl/HP)"		HVACSys:Action	=           ; SAC 9/19/19 - OtherZone (MFamProto)
      {	if ( SumRevRef( ResOtherZn:ActiveHVACSystem, ResOtherZn:NewOrAltHVACFloorArea ) < 1 .AND.
		         ( (ResProj:IsAddAlone > 0.5 .AND. MinRevRef( ResZn:ActiveHVACSystem, ResZn:HVACSysStatus ) < 2) .OR.
                 (ResProj:RunScope == 2 .AND. MinRevRef( ResZn:ActiveHVACSystem, ResZn:HVACSysStatus ) < 2) ) ) then  UNCHANGED
         else EvalRulelist( "SetupHVACSys_Round2_common", 1 ) endif  }
; "store BEMProc details"		HVACSys:Action = {  StoreBEMProc( "aftr Budget DistSys creation", 0 )  }

;	mjb	7/29/14	added std design setting for EvapCond params
	"Reset HVACSys:HaveEvapCond"			HVACSys:HaveEvapCond		= {	0  }		
;	"Reset HVACSys:SysEvapCondEff"		HVACSys:SysEvapCondEff	= {	UNDEFINED  }		


   ;--------------------------------------------------------------------
   ; BudgetConversion: Distribution System
   ; mjb 12/10/13 E+A+A
   ;--------------------------------------------------------------------

; "debug"		HVACDist:Action	= {	MessageBox( "BUDG CONV -- HVACDist '%s':  ResProj:RunScope = %g,  Status = %g,  IsVerified = %g,  DuctInsRvalue = %g", Name, ResProj:RunScope, Status, IsVerified,	DuctInsRvalue )  }

   ; SAC 5/7/18 - new HVACDist flag tracking scenario where Existing Ducts assigned to Altered & Verified HVACSys (=> retain Existing HVACDist data in std design) (tic #986)
   "Set HVACDist:ExistDuctsInVerifSys flag to track scenario where Existing Ducts assigned to Altered & Verified HVACSys"
      ResZn:AltHVACSystem:DistribSystem:ExistDuctsInVerifSys  = {
         if (AltHVACSystem:DistribSystem:Status == 2 .AND. AltHVACSystem:DistribSystem:IsVerified) then UNCHANGED
         else if (AltHVACSystem:DistribSystem:Status == 1 .AND. HVACSysVerified) then  1
         else  UNCHANGED  endif endif  }

	"Assign Altered and Verified HVACDist exDuctInsRvalOpt from Existing system level specs if Verified specified at System level"
			ResZn:AltHVACSystem:DistribSystem:exDuctInsRvalOpt	= { if ( AltHVACSystem:DistribSystem:Status == 2 .AND. AltHVACSystem:DistribSystem:IsVerified ) then UNCHANGED		; already set via this property on the HVACDist dialog
																						else if (HVACSysVerified) then exHVACSystem:DistribSystem:DuctInsRvalOpt
																					 				else UNCHANGED endif
																					 	endif }

   ; SAC 12/26/14 - additional rules to handle altered/verified duct leakage
   ; SAC 5/7/18 - revised logic to set exDuctLeakageValUse in scenario where AltHVACSystem references an Existing HVACDist (tic #986)
	"Assign Altered and Verified HVACDist exDuctLeakageValUse from Existing system level specs if Verified specified at System level"
			ResZn:AltHVACSystem:DistribSystem:exDuctLeakageValUse	= {
            if (HVACSysStatus == 2 .AND. HVACSysVerified .AND. 
                (AltHVACSystem:DuctsVsStandard >= 0 .OR. AltHVACSystem:DistribSystem:Status == 1))
				then exHVACSystem:DistribSystem:DuctLeakageValUse
				else UNCHANGED endif }

	"Assign HVACDist EAA Status from altered system level specs"
			ResZn:AltHVACSystem:DistribSystem:Status	= { if (AltHVACSystem:DistribSystem:Status == 2 .AND. AltHVACSystem:DistribSystem:IsVerified) then UNCHANGED
																				else if (HVACSysVerified) then
																					2
																				else UNCHANGED endif	endif }

	"Assign HVACDist EAA IsVerified from altered system level specs"
			ResZn:AltHVACSystem:DistribSystem:IsVerified	= { if (AltHVACSystem:DistribSystem:Status == 2 .AND. AltHVACSystem:DistribSystem:IsVerified) then UNCHANGED
																				else if (HVACSysVerified) then
																					1
																				else UNCHANGED endif	endif }

;	mjb	1/13/14	corrected Status check from 3 to 1, the correct assignment for EXISTING Status
;	mjb	4/17/14	rearranged rule to not overwrite DuctInsRvalOpt for new HVACDist Status = 4  (Existing + New)
	"Assign HVACDist exDuctInsRvalOpt from existing system level specs"
			ResZn:exHVACSystem:DistribSystem:exDuctInsRvalOpt	= { if (exHVACSystem:DistribSystem:Status == 1) then exHVACSystem:DistribSystem:DuctInsRvalOpt
																						else UNCHANGED endif }

;	"debug"		HVACDist:Action	= {	MessageBox( "BUDG CONV -- HVACDist '%s':  ResProj:RunScope = %g,  Status = %g,  IsVerified = %g,  DuctInsRvalue = %g,  exDuctInsRvalOpt = %g", Name, ResProj:RunScope, Status, IsVerified, DuctInsRvalue, exDuctInsRvalOpt )  }
;	mjb	4/17/14	added check for new HVACDist Status flag = 4 (Existing + New)
   ; SAC 5/7/18 - revised following 2 rules to set ex*DuctInsRvalue for EAA or AA runs regardless of local Status/Verified so that it is always set (even when Ex system just switched to Alt/Verified) (tic #986)
	"Set HVACDist:exDuctInsRvalue"		HVACDist:exDuctInsRvalue		= {	if ( (ResProj:RunScope == 2 .OR. ResProj:IsAddAlone > 0.5) .AND. IfValidAnd( exDuctInsRvalOpt > 0 ) )
																									then	exDuctInsRvalOpt / 100
																									else  UNDEFINED  endif	 }
	;"Set HVACDist:exDuctInsRvalue"		HVACDist:exDuctInsRvalue		= {	if ( (ResProj:RunScope == 2 .AND. Status == 2 .AND. IsVerified .AND. DuctInsRvalue >= 6.0)
	;																										.OR. ( (ResProj:RunScope == 2 .OR. ResProj:IsAddAlone > 0.5) .AND. (Status == 1 .OR. Status == 4)) )
	;																								then	exDuctInsRvalOpt / 100
	;																								else  UNDEFINED  endif	 }
;	"debug"		HVACDist:Action	= {	MessageBox( "BUDG CONV -- HVACDist '%s':  exDuctInsRvalue = %g", Name, exDuctInsRvalue )  }
	"Set HVACDist:exRetDuctInsRvalue"	HVACDist:exRetDuctInsRvalue	= {	if ( (ResProj:RunScope == 2 .OR. ResProj:IsAddAlone > 0.5) .AND. IfValidAnd( exDuctInsRvalOpt > 0 ) )
																									then	exDuctInsRvalOpt / 100
																									else  UNDEFINED  endif	 }
	;"Set HVACDist:exRetDuctInsRvalue"	HVACDist:exRetDuctInsRvalue	= {	if ( (ResProj:RunScope == 2 .AND. Status == 2 .AND. IsVerified .AND. RetDuctInsRvalue >= 6.0)
	;																										.OR. ( (ResProj:RunScope == 2 .OR. ResProj:IsAddAlone > 0.5) .AND. (Status == 1 .OR. Status == 4)) )
	;																								then	exDuctInsRvalOpt / 100
	;																								else  UNDEFINED  endif	 }

;"store BEMProc details"		ResProj:Action = {  StoreBEMProc( Format( "b4 Dist dflt-%s", RunAbbrev ), 0 )  }
;"debugging"		ResProj:Action		= {	MessageBox( "BudgetConversion prior to HVACDist defaulting (%s model)", RunAbbrev )  }
;"dbg msg" HVACSys:Action = { if (FloorAreaServed[1] < 0.1) then  UNCHANGED  else if (LocalCompAssigned( DistribSystem ) == 0 ) then  PostMessageToLog( "BudgConv: HVACSys '%s', DuctsRequired %g / no DistribSystem assigned", Name, DuctsRequired )
;   else  PostMessageToLog( "BudgConv: HVACSys '%s', DuctsRequired %g / Dist '%s', Type '%s'", Name, DuctsRequired, DistribSystem:Name, EnumString( DistribSystem:Type ) )  endif endif }  ; SAC 01/11/23

	; SAC 4/1/15 - moved rules setting HVACDist:Type & HVACDist:DefaultSystem into separate rulelist w/ Resets turned OFF to resolve issue where resets are blasting data needed later in HVACDist setup
	"Set HVACDist:Type & HVACDist:DefaultSystem via subordinate rulelist"	HVACDist:Action	= {	EvalRulelist( "BudgetConversion_HVACDist_TypeAndDefaultSystem_NoResets", 1 )  }

;"store BEMProc details"		ResProj:Action = {  StoreBEMProc( Format( "aft Dist dflt-%s", RunAbbrev ), 0 )  }
;"debugging"		ResProj:Action		= {	MessageBox( "BudgetConversion after HVACDist defaulting (%s model)", RunAbbrev )  }

;	mjb	4/24/14	added std design for buried ducts
	"Reset HVACDist:AreBuried"				HVACDist:AreBuried			= {	0  }		
	"Reset HVACDist:AreDeeplyBuried"		HVACDist:AreDeeplyBuried	= {	0  }		
;	mjb	7/29/14	added std design setting for E+A+A duct length
	"Reset HVACDist:IsLessThanFortyFt"	HVACDist:IsLessThanFortyFt	= {	0  }		

; mjb	5/6/14 added std design for leakage
; mjb 1/29/15 - mods to lookup Std Duct Leakage from T24RClimateZoneCodeBase table
;	"Reset HVACDist:DuctLeakageValUse"	HVACDist:DuctLeakageValUse	= {	if (ResProj:RunScope == 2 .AND. Status == 1) then 15 else 6 endif }		
; SAC 5/22/17 - mods to ensure use of higher T24RClimateZoneCodeBase:exDuctLkg setting for Existing+New ducts where IsLessThanFortyFt = 0 (tic #822)
; SAC 5/7/18 - added logic to treat AA models the same as EAA (tic #986)
      ;   if (ResProj:RunScope == 2 .AND. ((Status == 4 .AND. IfValidAnd( IsLessThanFortyFt = 0 )) .OR. Status == 1) )
	"Reset HVACDist:DuctLeakageValUse"	HVACDist:DuctLeakageValUse	= {
         if ((ResProj:RunScope == 2 .OR. ResProj:IsAddAlone > 0.5) .AND.
             ((Status == 4 .AND. IfValidAnd( IsLessThanFortyFt = 0 )) .OR. Status == 1) )
         then T24RClimateZoneCodeBase:exDuctLkg( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
         else T24RClimateZoneCodeBase:DuctLkg(   "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )  endif  }		
	"Reset HVACDist:LowLkgAH"				HVACDist:LowLkgAH 			= {	0  }


   ;--------------------------------------------------------------------
   ; BudgetConversion: Whole House Fan
   ;--------------------------------------------------------------------
; SAC 5/20/13 - replaced old ClVent stuff w/ following
; mjb 2/17/13 - do not add WHF to E+A+A Std Design (unless WHFs are in Prop Design)
; mjb 4/24/14 - need to add WHF in Additions > 1000 sf
; SAC 5/21/14 - revised logic to ensure that ClVent added to New Construction projects (regardless of addition settings) (GC #317 related)
; mjb 7/29/14 - revised logic to ensure that ClVent NOT added to Additions < 1000sf (GC #337 related)
; mjb 8/1/14  - revised logic to ensure that ClVent added to Additions > 1000sf (GC #337 related)
; mjb 1/12/15 - modified to use new look up table for code levels
	"Set ResZn:NeedStdClVent"		ResZn:NeedStdClVent		= {	if (( ResProj:RunScope == 2 .AND. Status == 3 .AND. AdditionCFA > 1000) .OR. (ResProj:RunScope == 1 .AND. ResProj:IsAddAlone > 0.5 .AND. CondFloorArea > 1000) .OR. (ResProj:RunScope ==1 .AND. ResProj:IsAddAlone < 0.5) ) then
;																							if (T24RClimateZoneDesignDay:WHFan( "WeatherFileSet", ResProj:WeatherFileSet, "ClimateZone", ClimateZone ) > 0.5) then 1 else 0 endif  
																							if (T24RClimateZoneCodeBase:WHFan( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) > 0.5) then 1 else 0 endif  
																						else  0  endif   }

	"Check NeedStdClVent"			ResProj:EnableClVent		= {	if (MaxChild(ResZn:NeedStdClVent) > 0.5) then 1 else UNCHANGED endif	}

	"Set main Cool Vent option based on CZ"
;			ResProj:UnitClVentOption	= {	if (EnableClVent < 0.5 .OR. IsMultiFamily > 0.5 .OR. T24RClimateZoneDesignDay:WHFan( "WeatherFileSet", ResProj:WeatherFileSet, "ClimateZone", ClimateZone ) < 0.5)
			ResProj:UnitClVentOption	= {	if (EnableClVent < 0.5 .OR. IsMultiFamily > 0.5 .OR. T24RClimateZoneCodeBase:WHFan( "ClimateZone", ClimateZone, "CodeBase", StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) < 0.5)
														then	0					; none
														else	1  endif 	}		; "Default Prescriptive Whole House Fan"

   "Default ResProj:UnitClVentZone[1]" 	ResProj:UnitClVentZone[1] 	= {	if (UnitClVentOption > 0.5 .AND. ComponentCount( Zone ) > 0.5) then  MaxAllComp( ResZn:CondClgBlwAtticArea )  else  UNDEFINED  endif  }

;	"debug"		ResProj:Action	= {	PostWarning( "BUDG CONV -- WHF:  EnableClVent = %g  UnitClVentOption = %g  UnitClVentZone[1] = '%s'", EnableClVent, UnitClVentOption, UnitClVentZone[1] )  }

   ;--------------------------------------------------------------------
   ; BudgetConversion: IAQ Ventilation
   ;--------------------------------------------------------------------
   ; SAC 4/24/20 - revise SFam (main home) IAQ fans to reflect new Type (tic #1174)       ; SAC 08/27/20   ; ApplyStdDesignIAQFromTable - SAC 04/03/21
   "Override ResProj:UnitIAQFan1[1]:IAQFanType in certain circumstances"      ResProj:UnitIAQFan1[1]:IAQFanType  =
      {  if (IsMultiFamily > 0.5 .OR. (IfValidAnd( BypassRuleLimits > 0 )==0 .AND. ApplyStdDesignIAQFromTable < 1)) then  UNCHANGED
         else if (IfValidAnd( StdDesignIAQType[1] > 0 )==0) then  UNCHANGED
         else  min( StdDesignIAQType[1], 3 )  endif endif  }
   "Override ResProj:UnitIAQFan2[1]:IAQFanType in certain circumstances"      ResProj:UnitIAQFan2[1]:IAQFanType  =
      {  if (IsMultiFamily > 0.5 .OR. (IfValidAnd( BypassRuleLimits > 0 )==0 .AND. ApplyStdDesignIAQFromTable < 1)) then  UNCHANGED
         else if (IfValidAnd( StdDesignIAQType[1] > 0 )==0) then  UNCHANGED
         else  min( StdDesignIAQType[1], 3 )  endif endif  }
   "Override ResProj:UnitIAQFan3[1]:IAQFanType in certain circumstances"      ResProj:UnitIAQFan3[1]:IAQFanType  =
      {  if (IsMultiFamily > 0.5 .OR. (IfValidAnd( BypassRuleLimits > 0 )==0 .AND. ApplyStdDesignIAQFromTable < 1)) then  UNCHANGED
         else if (IfValidAnd( StdDesignIAQType[1] > 0 )==0) then  UNCHANGED
         else  min( StdDesignIAQType[1], 3 )  endif endif  }
   "Override ResProj:UnitIAQFan4[1]:IAQFanType in certain circumstances"      ResProj:UnitIAQFan4[1]:IAQFanType  =
      {  if (IsMultiFamily > 0.5 .OR. (IfValidAnd( BypassRuleLimits > 0 )==0 .AND. ApplyStdDesignIAQFromTable < 1)) then  UNCHANGED
         else if (IfValidAnd( StdDesignIAQType[1] > 0 )==0) then  UNCHANGED
         else  min( StdDesignIAQType[1], 3 )  endif endif  }

   "Override all MFam IAQFan:IAQFanType (in certain circumstances) - only effective for IAQ via assigned fans"     IAQFan:IAQFanType  =    ; SAC 5/13/20    ; SAC 08/27/20
      {  if (ResProj:IsMultiFamily < 0.5 .OR. IfValidAnd( ResProj:BypassRuleLimits > 0 )==0 ) 
         then  UNCHANGED
         else if (IfValidAnd( ResProj:StdDesignIAQType[1] > 0 )==0) then  UNCHANGED
         else if (IfValidAnd( ResProj:ApplyStdIAQMaxPwrToDRtg > 0 ) .AND. IfValidAnd( ResProj:BypassRuleLimits > 0 )) 
         then  min( ResProj:StdDesignIAQType[1], 3 )
         else  UNCHANGED  endif endif endif  }
   ; secondary rule to address MFam IAQFan type change for DwellUnitType generic (non-fan) settings - SAC 5/13/20       ; SAC 08/27/20
   "Override MFam DwellUnitType IAQ Type (in certain circumstances) - IAQ w/out assigned fans"   DwellUnitType:IAQOption  =
      {  if (ResProj:IsMultiFamily < 0.5 .OR. IfValidAnd( ResProj:BypassRuleLimits > 0 )==0 )
         then  UNCHANGED
         else if (IfValidAnd( ResProj:StdDesignIAQType[1] > 0 )==0) then  UNCHANGED
         else if (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf" .OR.
                  (IfValidAnd( ResProj:ApplyStdIAQMaxPwrToDRtg > 0 ) .AND. IfValidAnd( ResProj:BypassRuleLimits > 0 ))) 
         then  if (     ResProj:StdDesignIAQType[1]  = 1 .AND. IAQOption = 4) then  5     ; Balanced -> Exhaust
               else if (ResProj:StdDesignIAQType[1] >= 3 .AND. IAQOption = 5) then  4     ; Exhaust -> Balanced
               else  UNCHANGED  endif endif
         else  UNCHANGED  endif endif endif  }

   ; adjust IAQ fan powers for StdDesignIAQWperCFM if specified - SAC 5/13/20
   "Call subordinate rulelist to adjust DwellUnit IAQPwr properties in Std/DRtg runs"     DwellUnit:Action =      ; SAC 6/12/20 - split out to allow eval in earlier stages of std design setup
      {  if (IfValidAnd( DwellUnitTypeRef:IAQDisabled > 0 ) .OR.
             (IfValidAnd( ResProj:BypassRuleLimits > 0 )==0) .OR.
             (GlobalStatus( ResProj:StdDesignIAQWperCFM ) < 4 .AND. LocalStatus( DwellUnitTypeRef:MaxStdDesignIAQWperCFM ) < 4) .OR.
             (ResProj:RunAbbrev != "s" .AND. ResProj:RunAbbrev != "zb" .AND. ResProj:RunAbbrev != "smf" .AND.
              (ResProj:RunAbbrev != "dr" .OR. (IfValidAnd( ResProj:ApplyStdIAQMaxPwrToDRtg > 0 )==0 .AND. IfValidAnd( ResProj:BypassRuleLimits > 0 ))))) then  UNCHANGED
         else  EvalRulelist( "StandardDefaulting_DwellUnit_IAQPower", 1 )  endif  }

	; SAC 12/16/19 - sum IAQ data into Zones (& OtherZones) prior to setting up StdDesign multipliers
	"Set ResZn:IAQ*"		ResProj:Action	= {	if (IsMultiFamily < 0.5)
														then  EvalRulelist( "Set_ZoneIAQ_SFam" )
														else	EvalRulelist( "Set_ZoneIAQ_MFam" )  endif  }

   "Call subordinate rulelists to handle remaining IAQ mods - needed for ResProj:IAQSupInletsAccessible"    ResProj:Action =     ; SAC 01/26/21   ; logic to prevent application of InletsNotAccessible rules to Exhaust systems - SAC 03/18/21
      {  if (ResProj:IsMultiFamily > 0.5) then UNCHANGED
         else if (IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND. IAQSupInletsAccessible < 1 .AND.
             (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf") .AND.
             (IfValidAnd( MostDUIAQ_Balanced > 0 ) .OR. IfValidAnd( MostDUIAQ_Supply > 0 )))
         then  EvalRulelist( "BudgetConversion_IAQ_SupplyInletsNotAccessible" )  ; rules to PREVENT any Proposed model IAQ credit (results in std model higher or equal eff to prop)
         else  EvalRulelist( "BudgetConversion_IAQ_SupplyInletsAccessible" )     ; regular std and drtg model rules
         endif endif }


   ;--------------------------------------------------------------------
   ; BudgetConversion: Generic HVAC (furnace) Fans
	; mjb	12/13/13	E+A+A
   ;--------------------------------------------------------------------
	"Assign AltWperCFMCool"		HVACFan:AltWperCFMCool	=	{ if (ResProj:RunScope == 2 .AND. Status == 2) then WperCFMCool  else UNDEFINED endif  }
	"Assign exWperCFMCool when HVACSys Status is existing"		
		HVACFan:exWperCFMCool	=	{ if (ResProj:RunScope == 2 .AND. Status == 1) then WperCFMCool else UNCHANGED endif }

;"store BEMProc details"		ResProj:Action = {  StoreBEMProc( Format( "b4 set Fan WpCFM-%s", RunAbbrev ), 0 )  }
;"debugging"		ResProj:Action		= {	MessageBox( "BudgetConversion logic to create fan(s) (%s model)", RunAbbrev )  }
;"testing" HVACFan:Action = { PostMessageToLog( Format( "HVACFan:WperCFMCool = %g @ BudgConv 1643, status = %g for fan '%s' in run %s", WperCFMCool, LocalStatus( WperCFMCool ), Name, ResProj:RunAbbrev ) ) }
   ;  mjb   10/28/14 - mods to keep existing Fan info when used in Additions Alone
   ; SAC 2/5/18 - added logic to reference GasFurn vs. other WperCFM from code baselines table (tic #928)
   ; SAC 5/17/19 - revised to switch logic from checking for GasFurnace vs. HeatPump
   ; JP  8/16/19 - revised to switch logic from checking for SDHV vs. GasFurnace vs. Other    - SAC 10/28/19 - further revisions to ensure 2019.1.1 results consistent w/ 2019.1.0
   ; added logic to prevent mods to HVACFan:WperCFMCool for 2022+ small HtPump std design fans - SAC 03/11/21  ; small->Large HP - SAC 03/15/21
	"Set fan Watts per CFM to <codeVal> for central air handlers"  ; GC issue #82
		HVACFan:WperCFMCool	=
      {  if (IfValidAnd( WperCFMCool = 0.58 ) .AND. MaxRevRef( HVACSys:Fan, HVACSys:LrgHtPumpStdFanPwr ) == 0.58) then  UNCHANGED 
         else if (IfValidAnd( Proj:AnalysisVersion > 190101 ))
         then  if (Type != 1 .OR. (ResProj:IsAddAlone > 0.5 .AND. MinRevRef( HVACSys:Fan, HVACSys:Status ) < 2)) then  UNCHANGED		; unchanged if HVACFan:Type != "Single Speed Fan"
					else if (FloorAreaServed > 1 .AND. SDHVAreaServed = FloorAreaServed)
               then  T24RClimateZoneCodeBase:SDHVWperCFM(      "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) 
					else if (FloorAreaServed > 1 .AND. GasFurnAreaServed = FloorAreaServed)
               then  T24RClimateZoneCodeBase:GFurnWperCFM(      "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )  
               else  T24RClimateZoneCodeBase:WperCFM( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )  
					endif endif endif
         else  ; 2019.1.0 and earlier logic
               if (Type != 1 .OR. (ResProj:IsAddAlone > 0.5 .AND. MinRevRef( HVACSys:Fan, HVACSys:Status ) < 2)) then  UNCHANGED		; unchanged if HVACFan:Type != "Single Speed Fan"
               ; KN 03/21/2015 Updated to use codebase lookup. Not vetted for E+A+A. 
					;else  0.58
					else if (FloorAreaServed > 1 .AND. HtPumpAreaServed = FloorAreaServed)
               then  T24RClimateZoneCodeBase:WperCFM(      "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )  
               else  T24RClimateZoneCodeBase:GFurnWperCFM( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )  
					endif endif
			endif endif  }

   ; mjb 1/30/15 - found bug in logic for E+A+A - should be <= std. for fan watts NOT >= std.
   ; SAC 2/5/18 - added logic to reference GasFurn vs. other WperCFM from code baselines table (tic #928)
	"Reset HVACFan:WperCFMCool based on Alteration Status"
;		HVACFan:WperCFMCool	= {	if ( (ResProj:RunScope == 2 .AND. Status == 2 .AND. IsVerified .AND. IfValidAnd( AltWperCFMCool >= 0.58 )) .OR. (ResProj:RunScope == 2 .AND. Status == 1) )
;												then	exWperCFMCool
;												else	UNCHANGED  endif  }
; mjb 1/30/15 - modified to use T24RClimateZoneCodeBase table for fan watt draw std.
;		HVACFan:WperCFMCool	= {	if ( (ResProj:RunScope == 2 .AND. Status == 2 .AND. IsVerified .AND. IfValidAnd( AltWperCFMCool <= 0.58 )) .OR. (ResProj:RunScope == 2 .AND. Status == 1) )
;												then	exWperCFMCool
;												else	UNCHANGED  endif  }
   ; SAC 5/17/19 - revised to switch logic from checking for GasFurnace vs. HeatPump (tic #1074)
   ; JP  8/16/19 - revised to switch logic from checking for SDHV vs. GasFurnace vs. Other (tic #1130)    - SAC 10/28/19 - further revisions to ensure 2019.1.1 results consistent w/ 2019.1.0
   ; added logic to prevent mods to HVACFan:WperCFMCool for 2022+ small HtPump std design fans - SAC 03/11/21  ; small->Large HP - SAC 03/15/21
		HVACFan:WperCFMCool	=
      {  if (IfValidAnd( WperCFMCool = 0.58 ) .AND. MaxRevRef( HVACSys:Fan, HVACSys:LrgHtPumpStdFanPwr ) == 0.58) then  UNCHANGED 
         else if (IfValidAnd( Proj:AnalysisVersion > 190101 ))
         then  if ( (ResProj:RunScope == 2 .AND. Status == 2 .AND. IsVerified .AND. 
                     ( ( (FloorAreaServed >  1 .AND. SDHVAreaServed  = FloorAreaServed) .AND.
                         IfValidAnd( AltWperCFMCool <= T24RClimateZoneCodeBase:SDHVWPerCFM(      "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) )) .OR.
                       ( (FloorAreaServed > 1 .AND. GasFurnAreaServed = FloorAreaServed) .AND.
                         IfValidAnd( AltWperCFMCool <= T24RClimateZoneCodeBase:GFurnWperCFM( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) )) .OR.
                       ( (FloorAreaServed <= 1 .AND. HtPumpAreaServed != FloorAreaServed) .AND.
                         IfValidAnd( AltWperCFMCool <= T24RClimateZoneCodeBase:WperCFM( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) )) ))
               .OR. (ResProj:RunScope == 2 .AND. Status == 1) )
					then	exWperCFMCool
					else	UNCHANGED  endif
         else  ; 2019.1.0 and earlier logic
               if ( (ResProj:RunScope == 2 .AND. Status == 2 .AND. IsVerified .AND. 
                     ( ( (FloorAreaServed >  1 .AND. HtPumpAreaServed  = FloorAreaServed) .AND.
                         IfValidAnd( AltWperCFMCool <= T24RClimateZoneCodeBase:WperCFM(      "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) )) .OR.
                       ( (FloorAreaServed <= 1 .AND. HtPumpAreaServed != FloorAreaServed) .AND.
                         IfValidAnd( AltWperCFMCool <= T24RClimateZoneCodeBase:GFurnWperCFM( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) )) ))
               .OR. (ResProj:RunScope == 2 .AND. Status == 1) )
					then	exWperCFMCool
					else	UNCHANGED  endif
			endif endif  }
;"testing" HVACFan:Action = { PostMessageToLog( Format( "HVACFan:WperCFMCool = %g @ BudgConv 1706, status = %g for fan '%s' in run %s", WperCFMCool, LocalStatus( WperCFMCool ), Name, ResProj:RunAbbrev ) ) }


   ;--------------------------------------------------------------------
   ; BudgetConversion: DHW System(s)
   ;--------------------------------------------------------------------
	; SAC 6/8/15 - separate out DHWSys & DHWHeater rules into separate rule modules for mods/additions needed to produce standard design system/heater descriptions in rules (rather than relying on the DHW engine DLL)
	"Call subordinate rulelist to setup DHWSys and DHWHeater data"
		Proj:Action		= {	EvalRulelist( "BudgetConversion_DHW" )  }

   "Call subordinate rulelist to reset all ResExtWall:StdWindow:NFRCUfactor if one or more std design HPWHs have been assigned"    ; SAC 2/16/18 - (tic #983)
      ResProj:Action  = {
         if (SumAll( DHWSys:IsStdDesignElec ) > 0  .AND.
             T24RClimateZoneCodeBase:ElecDHWWIndowUfactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) > 0)
         then  EvalRulelist( "BudgetConversion_ElecDHW_StdWindowUfactor" )
         else  UNCHANGED  endif  }


   ;--------------------------------------------------------------------
   ; BudgetConversion: Final Calcs
   ;--------------------------------------------------------------------

	"Set Attic:RoofFramingFactor => fraction of gross wall area that includes frame" 
		Attic:RoofFramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set InteriorCeiling:FramingFactor => fraction of gross ceiling area that includes frame" 
		InteriorCeiling:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set ResExtWall:FramingFactor => fraction of gross wall area that includes frame" 
		ResExtWall:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set UndWall:FramingFactor => fraction of gross wall area that includes frame" 
		UndWall:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set ResIntWall:FramingFactor => fraction of gross wall area that includes frame" 
		ResIntWall:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set ResExtFlr:FramingFactor => fraction of gross wall area that includes frame" 
		ResExtFlr:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set FloorOverCrawl:FramingFactor => fraction of gross wall area that includes frame" 
		FloorOverCrawl:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set ResIntFlr:FramingFactor => fraction of gross wall area that includes frame" 
		ResIntFlr:FramingFactor	= {	LocalRef( Construction:FramingFactor )  }

	"Set UndFloor:FramingFactor => fraction of gross wall area that includes frame" 
		UndFloor:FramingFactor	= {	0 }  ; LocalRef( Construction:FramingFactor )  }

;	"Evaluate rules to summarize building model for reporting purposes"		ResProj:Action	= {	EvalRulelist( "Reporting_SummarizeModel" )  }

   ; setup Std Design PV system for 2019+ code vintages - SAC 1/9/18
   "Setup Std Design PV (2019+ codes only)"  ResProj:Action = {
         if (IfValidAnd( EnergyCodeYearNum >= 2019 )==0 .OR. (RunAbbrev != "s" .AND. RunAbbrev != "zb")) then  UNCHANGED
         else if (IfValidAnd( IsSFamResRuleset > 0 ))
         then  EvalRulelist( "Setup_StdDesignPV" )
         else  UNCHANGED  endif endif  }   ; what to do here for MFam models? - SAC 11/12/21

   ; SAC 3/17/14 - blast all objects generated during previous COns defaulting
	"Blast all LayerParams objects"			ResProj:Action	= {	DeleteAllComps( LayerParams )  }
	"Blast ResMats marked for deletion"			ResMat:Action	= {	if (IfValidAnd( MarkForDeletion == 1 )) then  DeleteComp()  else  UNCHANGED  endif  }
;	"Blast ResMats not referenced by Cons:*"	ResMat:Action	= {	if (CountRefs( Cons:CavityPathMats ) < 1 .AND. CountRefs( Cons:FramePathMats ) < 1) then  DeleteComp()  else  UNCHANGED  endif  }		; SAC 3/21/14
;	mjb	6/13/14	Set HVACFan and HVACDist TypeRpt so that these objects are written to Std Dsn Bldg Sum Rpt
; mjb	7/17/14 removed the following because they seem to be changing the TypeRpt to 1 in the Proposed Design for HVACSys with Ducts???
;	"Set TypeRpt for HVACFan"		HVACFan:TypeRpt	=	{ 1 }
;	"Set TypeRpt for HVACDist"		HVACDist:TypeRpt	=	{ 1 }

;"dbg BEMProc details"  ResProj:Action = {  StoreBEMProc( "at end of BudgetConversion", 0 )  }
;"dbg" ResProj:Action = {  MessageBox( "End of 'BudgetConversion' for run %s", RunAbbrev )  }

END
;*************************************************************************


;************************************************************************* SAC 03/21/22
RULELIST  "BudgetConversion_Res_MFamCathClg" 1 0 1 0
;*************************************************************************
   "Set CathedralCeiling:Construction"    CathedralCeiling:Construction	=
      {  if (IsNew .OR. IsAltered) 
         then  RuleLibrary(Cons, T24RClimateZoneCodeBase:StdWdFrameCathClgCons( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:CompCodeBase, "BldgType", Proj:BldgTypeTblStr ) )
         else UNCHANGED endif	}	
END
;*************************************************************************
RULELIST  "BudgetConversion_Res_CathClgToAttic" 1 0 1 0
;*************************************************************************
; moved these rules into this subordinate ruelist from BudgetConversion - SAC 03/21/22

   ;--------------------------------------------------------------------
   ; BudgetConversion: Convert CathedralCeiling objects to CeilingBelowAttic - and evaluate ProposedInput rules to generate Attic object if necessary   - SAC 10/3/13
   ; mjb-10/15/13  mods for E+A+A
   ;                 - don't create Attics for EXISTING Cathedral Ceilings
   ;                 - apply Status of Cathedral Ceilings (IsNew, IsAltered, IsVerified) to newly created Ceiling Below Attics
   ;                 - apply Existing Construction of Cathedral Ceilings to newly created Ceiling Below Attics
   ;--------------------------------------------------------------------
; unnecessary - duct location reset to Attic w/out this addition
;	; SAC 10/8/13 - added to ensure proper adjustment of duct locations before/after conversion of proposed CathedralCeilings to CeilingBelowAttic
;	"Set ResZn:NumPropCathClgObjs"				ResZn:NumPropCathClgObjs			= {	ChildCount( CathedralCeiling )  }

	"Create CathedralCeiling:StdDesignCeiling (if necessary)"	CathedralCeiling:StdDesignCeiling	= {	if (ParentComponentType() != "ResZn") then  UNDEFINED
                                                                      else if (IsNew .OR. IsAltered) then 
                                                                              CreateComp( CeilingBelowAttic, Local( Name ) + "-ClgBlwAtc" )
                                                                            else UNCHANGED endif
                                                                      endif }

	"Assign (or create) Attic above ceiling"	CathedralCeiling:StdDesignCeiling:AtticZone	= {	if (MaxAll( Attic:StdCathClgAtticArea ) > 1) then  MaxAllComp( Attic:StdCathClgAtticArea )
																																else  CreateComp( Attic, "Std Design CathClg Attic", "Setup_StdCathClgAttic" )  endif  }
	; SAC 4/14/15 - revised following rule to evalute different Attic defaulting rules that will setup Construction and Rise/Pitch/misc properties PRIOR to evaluation of other Attic:Cons BudgetConversion rules
	"Refresh all Attic defaults"			Attic:Action	= {	EvalRulelist( "Default_Attic", 1 )  }

	"Set CathedralCeiling:StdDesignCeiling:Parent"			CathedralCeiling:StdDesignCeiling:Parent			= {	Parent( Name )  }
  "Set CathedralCeiling:StdDesignCeiling:Status"      CathedralCeiling:StdDesignCeiling:Status     = { Status  }  ; need to assign this now, since Proposed Input rules called below for new CeilingBelowAttics will otherwise incorrectly set the IsNew... flags
  "Set CathedralCeiling:StdDesignCeiling:IsNew"         CathedralCeiling:StdDesignCeiling:IsNew   = { IsNew  }   ; redundant with what will be set from Status in PI rules - but may need to be set for subsequent rules below
  "Set CathedralCeiling:StdDesignCeiling:IsAltered"  CathedralCeiling:StdDesignCeiling:IsAltered  = { IsAltered  }  ; redundant with what will be set from Status in PI rules - but may need to be set for subsequent rules below
  "Set CathedralCeiling:StdDesignCeiling:IsVerified"  CathedralCeiling:StdDesignCeiling:IsVerified = { IsVerified  }
  "Set CathedralCeiling:StdDesignCeiling:exConstruction"  CathedralCeiling:StdDesignCeiling:exConstruction = { exConstruction  } ; this is not going to work - changing from cathedral ceiling to ceiling below attic Cons...
  ; assign minimal (R0) construction first, which may get switched to something minimally compliant later in this rulelist
	"Set CathedralCeiling:StdDesignCeiling:Construction"	CathedralCeiling:StdDesignCeiling:Construction	= {	RuleLibrary( Cons, "R0 ClgBlwAttic Cons" )  }
	"Set CathedralCeiling:StdDesignCeiling:CathCeilUValue"	CathedralCeiling:StdDesignCeiling:CathCeilUValue	= {	Construction:WinterDesUValue  }
  ; set area of CeilingBelowAttic to the horizontal projection of the pitched CathedralCeiling area
	"Set CathedralCeiling:StdDesignCeiling:Area"				CathedralCeiling:StdDesignCeiling:Area				= {	Area * cos( (RoofTilt * 3.14159265 / 180) )  }
  "Set CathedralCeiling:StdDesignCeiling:WasCathCeil"  CathedralCeiling:StdDesignCeiling:WasCathCeil = { 1  }		;	mjb	2/20/14	needed later for CBA budget conversion rules

;	"debug CeilingBelowAttic"					CathedralCeiling:Action = { if (IsAltered) then PostWarning( "CathedralCeiling: '%s' Cons: '%s' WinterDesUValue: %g ", Name, Construction:Name, Construction:WinterDesUValue	 ) else UNCHANGED endif }

; mjb	E+A+A	12/1/13	2/20/14	moved rules here
	"Assign Altered CathedralCeiling RoofSolReflect"					CathedralCeiling:AltSolReflect = {	RoofSolReflect }
; mjb 1/13/14	removed cool roof requirements for Alterations
;	mjb	8/21/14 - added them back in, consistent with 2013 RACM - don't remember why we removed them???
;	mjb 1/12/15 - use new T24RClimateZoneCodeBase lookup table
; SAC 9/18/15 - added logic to DISABLE requirement for 2013 & 2016 additions <= 300 SF
; SAC 9/21/15 - fixed bug where EAA <= 300 SF addition logic being applied to both New & EAA projects (revised to apply only to EAA projects)
; SAC 10/2/15 - revised if statement to include New Cons Addition Alone in check for additionCFA <= 300SF
; JP 10/3/19 - added a case for re-roofing (tic #867)
"Set CathedralCeiling:RoofSolReflect"	CathedralCeiling:RoofSolReflect	= {	if ( IsNew .OR. IsAltered .OR. IsAlteredSurface)
                                                                          then	if (Construction:RoofingLayer == 100205)		; "25 PSF (Very Heavy Ballast or Pavers)"
									                                                              then	UNCHANGED
								                                                                else if ((ResProj:EnergyCodeYearNum = 2019 .AND. IfValidAnd( Proj:AnalysisVersion <= 190101 ) .AND. 
									                                                                       (ResProj:RunScope == 2 .OR. (ResProj:RunScope == 1 .AND. IfValidAnd( ResProj:IsAddAlone > 0.5 ))) .AND.IfValidAnd( ResProj:AdditionCFA <= 300 ))
                                                                          							 .OR. (ResProj:RunScope == 2 .AND. IfValidAnd( ResProj:AdditionCFA <= 300 ) .AND. IsNew))
                                                                      							 then	UNCHANGED
                                                                  								   else if ( SteepSlope > 0.5 )
                                                                       									  then	T24RClimateZoneCodeBase:SteepRoofReflect( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
                                                                       									  else	T24RClimateZoneCodeBase:FlatRoofReflect(  "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
                                                                          endif endif endif else UNCHANGED endif }
;	mjb 1/12/15 - removed these lines from above rule:												else if (SteepSlope > 0.5 .AND.  Proj:CliZnNum >= 10 .AND. Proj:CliZnNum <= 15 ) then  0.2
;																													else if (SteepSlope < 0.5 .AND. (Proj:CliZnNum == 13 .OR.  Proj:CliZnNum == 15)) then  0.63
;																													else  0.1  endif endif endif

;	"Change to Exist RoofSolReflect if better than Code"	
;										CathedralCeiling:RoofSolReflect = { if ( IsAltered ) then
;																							if ( IsVerified ) then
;																								if ( AltSolReflect >= RoofSolReflect ) then exSolReflect else UNCHANGED endif
;																								else UNCHANGED endif 											   
;																						else UNCHANGED endif }

; TC 1/29/15 - changed existing and verified solar reflectance to existing value
	"Change to Exist RoofSolReflect"	
										CathedralCeiling:RoofSolReflect = { if (IsVerified) then exSolReflect	else UNCHANGED endif}

; TC 1/29/15 - need to change existing and verified solar emittance to existing value
; JP 10/3/19 - added a case for re-roofing (tic #867)    ; SAC 11/12/19 - switched 0.75 RoofEmiss to prior (& default) 0.85 due to this used for some time as most representative of real roofing products
	"Set SolEmiss"	
										CathedralCeiling:RoofEmiss = {if(ResProj:EnergyCodeYearNum = 2019 .AND. IfValidAnd( Proj:AnalysisVersion <= 190101 ))
					                                        Then UNCHANGED
					                                        Else if (IsNew .OR. IsAltered .OR. ISAlteredSurface)
                                                        then if (ResProj:RunScope == 2 .AND. IfValidAnd( ResProj:AdditionCFA <= 300 ) .AND. IsNew) then UNCHANGED
                                                             else if (IsVerified) then exSolEmiss
                                                             else if (RoofSolReflect != 0.1) then 0.85
                                                             else UNCHANGED endif endif endif
                                                  else UNCHANGED endif endif}


;	mjb	2/20/14	make assignments to CeilingBelowAttic's Attic from CathedralCeiling
  "Set CathedralCeiling:StdDesignCeiling - Attic roof reflectance"
  			CathedralCeiling:StdDesignCeiling:AtticZone:RoofSolReflect	 = { RoofSolReflect  }

  "Set CathedralCeiling:StdDesignCeiling - Attic roof SolEmiss"
  			CathedralCeiling:StdDesignCeiling:AtticZone:RoofEmiss	 = { if(ResProj:EnergyCodeYearNum = 2019 .AND. IfValidAnd( Proj:AnalysisVersion <= 190101 )) then UNCHANGED else RoofEmiss endif }

	"Delete CathedralCeiling objects that are being replaced by a CeilingBelowAttic"
			CathedralCeiling:Action	= {	if (LocalCompAssigned( StdDesignCeiling )) then  DeleteComp()  else  UNCHANGED  endif  }

END
;*************************************************************************


;*************************************************************************  - rules to PREVENT any Proposed model IAQ credit (results in std model higher or equal eff to prop) - SAC 01/26/21 (tic #1243)
RULELIST  "BudgetConversion_IAQ_SupplyInletsNotAccessible" 1 0 1 0

   ; updated following rules w/ data from 2022.1.0 Multifamily IAQ Summary writeup from OB360/DR - SAC 06/07/22

   ; added to simplify following rules - sac 06/07/22
   "Set ResIAQFan:StdWperCFM - default std design IAQ fan power"     ResIAQFan:StdWperCFM =     
      {  if (Proj:IsComRuleset .AND. IfValidAnd( Proj:AnalysisVersion >= 220100 ))
         then  if (IfValidAnd( ResProj:MostDUIAQ_Exhaust > 0 ) .OR. IfValidAnd( ResProj:MostDUIAQ_Supply > 0 ))
               then  0.35
               else  0.6
               endif
         else if (IAQFanType == 3)
         then  0.7
         else  0.35
         endif endif  }
            ; removed CZ dependence on Bal W/CFM for 2022, from .4, .6 or .7 (by CZ) to .6 regardless of CZ - SAC 10/10/22 (tic #3422)
            ;   else if (IfValidAnd( Proj:CliZnNum <= 2 ) .OR. (IfValidAnd( Proj:CliZnNum >= 11 ) .AND. IfValidAnd( Proj:CliZnNum <= 16 )))
            ;   then  0.6   ; bal w/ HtRecov
            ;   else if (IfValidAnd( ResProj:NumStories < 4 ) .AND. (IfValidAnd( Proj:CliZnNum >= 4 ) .AND. IfValidAnd( Proj:CliZnNum <= 10 )))
            ;   then  0.4
            ;   else  0.7
            ;   endif endif endif

   "Set ResIAQFan:HardwireStdFanPower flag"     ResIAQFan:HardwireStdFanPower =     ; SAC 03/18/21 (tic #1243)
      {  if ( (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf") .AND.
              (ValidOr( WperCFMIAQ, 0 ) * ValidOr( FanPowerMult, 1 )) > StdWperCFM ) 
         then  1.0
         else  UNDEFINED  endif  }
   "Hardwire ResIAQFan:FanPowerMult to 1.0 if Std/SMF power lower than Prop"     ResIAQFan:FanPowerMult =      ; SAC 03/18/21 (tic #1243)
      {  if (IfValidAnd( HardwireStdFanPower > 0 ))
         then  1.0
         else  UNCHANGED  endif  }  
	"Ensure Std Watts per CFM <= Proposed"    ResIAQFan:WperCFMIAQ =     ; revised to reference HardwireStdFanPower - SAC 03/18/21 (tic #1243)
		{  if (IfValidAnd( HardwireStdFanPower > 0 ))
         then  StdWperCFM
         else  UNCHANGED  endif  }

;   "Reset ResIAQFan:IAQRecovEffect"	ResIAQFan:IAQRecovEffect = {  0  }      - RETAIN heat recovery settings
;   "Reset ResIAQFan:IncludesRecov"  ResIAQFan:IncludesRecov  =      
;   "Set ResIAQFan:FanPowerMult"        ResIAQFan:FanPowerMult     = {  1.0  }  
;   "Set ResIAQFan:FanHeatRecovMult"    ResIAQFan:FanHeatRecovMult = {  1.0  }
;   "Set ResIAQFan:SensRecovEff"        ResIAQFan:SensRecovEff =    
;   "Set ResIAQFan:AdjSensRecovEff"     ResIAQFan:AdjSensRecovEff =         ; SAC 08/29/20

   "Set ResZn:IAQCFMScaleFactor[1] if appropriate"     ResZn:IAQCFMScaleFactor[1]  =        ; SAC 9/9/19 - new logic to prevent MFam evaluation
      {  if (ResProj:IsMultiFamily == 0 .AND. IfValidAnd( ResProj:IAQCFMScaleFactor[1] > 0 ) .AND.
             ( (ResProj:ApplyStdIAQCFMLimitToDRtg .AND. IfValidAnd( Proj:AnalysisVersion > 190101 )) .OR.
               ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf" )) then  ResProj:IAQCFMScaleFactor[1]
         else if (ResProj:IsMultiFamily > 0 .AND. IfValidAnd( StdDesignIAQCFM > 0 ) .AND.
                  (IAQCFM_Exhaust[1] + IAQCFM_Supply[1] + IAQHRVCFM[1]) > 0.1 .AND.
                  ( (ResProj:ApplyStdIAQCFMLimitToDRtg .AND. IfValidAnd( Proj:AnalysisVersion > 190101 )) .OR.
                    ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf" ))
         then  StdDesignIAQCFM / (IAQCFM_Exhaust[1] + IAQCFM_Supply[1] + IAQHRVCFM[1])
         else  UNDEFINED  endif endif  }
   "Set ResZn:IAQCFMScaleFactor[2] if appropriate"     ResZn:IAQCFMScaleFactor[2]  =        ; SAC 9/9/19 - new logic to prevent MFam evaluation
      {  if (ResProj:IsMultiFamily == 0 .AND. IfValidAnd( ResProj:IAQCFMScaleFactor[2] > 0 ) .AND.
             ( (ResProj:ApplyStdIAQCFMLimitToDRtg .AND. IfValidAnd( Proj:AnalysisVersion > 190101 )) .OR.
               ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf" )) then  ResProj:IAQCFMScaleFactor[2]
         else  UNDEFINED  endif  }
   "Set ResZn:IAQPwrScaleFactor[1] if appropriate"     ResZn:IAQPwrScaleFactor[1]  =        ; SAC 12/16/19 - added separate scaling factor for IAQ power (for MFam)   ; remove for AnalysisVersion >= 190200 - SAC 01/26/21 (tic #1243)
      {  if (IfValidAnd( Proj:AnalysisVersion < 190200 ) .AND.
             ResProj:IsMultiFamily > 0 .AND. IfValidAnd( MaxStdDesignIAQPower > 0 ) .AND.
             (IAQPwr_Exhaust[1] + IAQPwr_Supply[1] + IAQHRVPwr[1]) > 0.1 .AND.
             ( (ResProj:ApplyStdIAQMaxPwrToDRtg .AND. IfValidAnd( Proj:AnalysisVersion > 190101 )) .OR.
               ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf" ))
         then  min( 1, MaxStdDesignIAQPower / (IAQPwr_Exhaust[1] + IAQPwr_Supply[1] + IAQHRVPwr[1]) )
         else  UNDEFINED  endif  }

   "Set ResOtherZn:IAQCFMScaleFactor if appropriate"      ResOtherZn:IAQCFMScaleFactor  =      ; SAC 12/15/19
      {  if (ResProj:IsMultiFamily == 0 .AND. IfValidAnd( ResProj:IAQCFMScaleFactor[1] > 0 ) .AND.
             ( (ResProj:ApplyStdIAQCFMLimitToDRtg .AND. IfValidAnd( Proj:AnalysisVersion > 190101 )) .OR.
               ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf" )) then  ResProj:IAQCFMScaleFactor[1]
         else if (ResProj:IsMultiFamily > 0 .AND. IfValidAnd( StdDesignIAQCFM > 0 ) .AND.
                  (IAQCFM_Exhaust[1] + IAQCFM_Supply[1] + IAQHRVCFM[1]) > 0.1 .AND.
                  ( (ResProj:ApplyStdIAQCFMLimitToDRtg .AND. IfValidAnd( Proj:AnalysisVersion > 190101 )) .OR.
                    ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf" ))
         then  StdDesignIAQCFM / (IAQCFM_Exhaust[1] + IAQCFM_Supply[1] + IAQHRVCFM[1])
         else  UNDEFINED  endif endif  }
   "Set ResOtherZn:IAQPwrScaleFactor if appropriate"      ResOtherZn:IAQPwrScaleFactor  =      ; SAC 12/16/19 - added separate scaling factor for IAQ power (for MFam)   ; remove for AnalysisVersion >= 190200 - SAC 01/26/21 (tic #1243)
      {  if (IfValidAnd( Proj:AnalysisVersion < 190200 ) .AND.
             ResProj:IsMultiFamily > 0 .AND. IfValidAnd( MaxStdDesignIAQPower > 0 ) .AND.
             (IAQPwr_Exhaust[1] + IAQPwr_Supply[1] + IAQHRVPwr[1]) > 0.1 .AND.
             ( (ResProj:ApplyStdIAQMaxPwrToDRtg .AND. IfValidAnd( Proj:AnalysisVersion > 190101 )) .OR.
               ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf" ))
         then  min( 1, MaxStdDesignIAQPower / (IAQPwr_Exhaust[1] + IAQPwr_Supply[1] + IAQHRVPwr[1]) )
         else  UNDEFINED  endif  }

   "Call subordinate rulelist to turn on or adjust IAQ heat recovery"   ResIAQFan:Action =      ; SAC 06/07/22
      {  if (Proj:IsComRuleset .AND. IfValidAnd( Proj:AnalysisVersion >= 220100 ) .AND.
             ResProj:RunAbbrev == "zb" .AND. IAQFanType == 3)
         then  if ( ( IfValidAnd( IncludesRecov > 0 )==0 .AND.    ; if no htrecov & CZ requires it
                      (IfValidAnd( Proj:CliZnNum <= 2 ) .OR. (IfValidAnd( Proj:CliZnNum >= 11 ) .AND. IfValidAnd( Proj:CliZnNum <= 16 ))) ) .OR.
                    ( IfValidAnd( IncludesRecov > 0 ) .AND.       ; if have htrecov but efficiencies lower than std
                      (IfValidAnd( SensRecovEff >= 67 )==0 .OR. IfValidAnd( AdjSensRecovEff >= 72 )==0) ) )
               then  EvalRulelist( "ForceStandard_IAQ_HeatRecovery", 1 )   ; add std design heat recovery where called for
               else  UNCHANGED  endif
         else  UNCHANGED  endif  }

END
;*************************************************************************  - regular std and drtg model rules
RULELIST  "BudgetConversion_IAQ_SupplyInletsAccessible" 1 0 1 0

   ; SAC 9/5/19 - revised to reference new ResProj properties related to std & EDR reference IAQ fan power   ; SAC 9/9/19 - new logic to prevent MFam evaluation
   ; SAC 10/24/19 - revisions to restore 2019.1.0 logic for 2019.1.1 release     ; SAC 2/12/20 - installed new std design ResIAQFan:WperCFMIAQ of 0.3 & 0.6 for SFam/MFam (tic #1174)
   ; SAC 4/24/20 - revised to reference ResProj:StdDesignIAQWperCFM as THE SFam Std/DRtg IAQ fan power (tic #1174)
   ; updated MFam to be based on Bal/Unbal, else use StdDesignIAQWperCFM only when BypassRuleLimits, else max of 1.2 W/CFM - SAC 7/20/20 (tic #1174)   ; SAC 7/27/20
   ; updated std design WperCFMIAQ 0.3->0.35 & 0.6->0.7 - SAC 01/19/21 (tic #1243)
   ; simplify logic to rely on StdDesignIAQWperCFM regardless of BypassRuleLimits (for AnalysisVersion >= 190200) - SAC 01/25/21 (tic #1243)   ; ApplyStdDesignIAQFromTable - SAC 04/03/21
   ; updated w/ data from 2022.1.0 Multifamily IAQ Summary writeup from OB360/DR - SAC 06/07/22
	"Keep Proposed Design IAQ Fans but limit Watts per CFM"     ResIAQFan:WperCFMIAQ =  
		{  if (Proj:IsComRuleset .AND. IfValidAnd( Proj:AnalysisVersion >= 220100 ))
         then  if (IfValidAnd( ResProj:MostDUIAQ_Exhaust > 0 ) .OR. IfValidAnd( ResProj:MostDUIAQ_Supply > 0 ))
               then  0.35
               else if (IfValidAnd( Proj:CliZnNum <= 2 ) .OR. (IfValidAnd( Proj:CliZnNum >= 11 ) .AND. IfValidAnd( Proj:CliZnNum <= 16 )))
               then  0.6   ; bal w/ HtRecov
               else if (IfValidAnd( ResProj:NumStories < 4 ) .AND. (IfValidAnd( Proj:CliZnNum >= 4 ) .AND. IfValidAnd( Proj:CliZnNum <= 10 )))
               then  0.4
               else  0.7
               endif endif endif
         else if (IfValidAnd( Proj:AnalysisVersion >= 190200 ))
		   then  if (IfValidAnd( ResProj:StdDesignIAQWperCFM > 0 ) .AND.
                   ( IfValidAnd( ResProj:ApplyStdDesignIAQFromTable > 0 ) .OR. 
                     ( IfValidAnd( ResProj:BypassRuleLimits > 0 ) .AND. 
                       (ResProj:ApplyStdIAQMaxPwrToDRtg .OR. ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf")) ))
		         then  ResProj:StdDesignIAQWperCFM
               else if (IAQFanType == 3)  ; Balanced
		         then  0.7  else  0.35  endif endif
		   else if (IfValidAnd( Proj:AnalysisVersion <= 190101 ))
         then  switch ( IAQFanType )
                  case  1 :   Min( WperCFMIAQ, 1.2 )      ; "Exhaust"                                      
                  case  2 :   Min( WperCFMIAQ, 1.2 )      ; "Supply"                                       
                  case  3 :   Min( WperCFMIAQ, 1.2 )      ; "Balanced"                                     
               ;   case  4 :   Min( WperCFMIAQ, 0.58 )      ; "Central"  - not yet implemented - MJB 4/22/13 
                  default :   UNDEFINED
               endswitch
         else if (ResProj:IsMultiFamily > 0) then  UNCHANGED
         else if (ResProj:ApplyStdIAQMaxPwrToDRtg .OR. ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf")
         then  switch ( IAQFanType )
                  case  1 :   Min( WperCFMIAQ, ResProj:StdDesignIAQWperCFM )      ; "Exhaust"                                      
                  case  2 :   Min( WperCFMIAQ, ResProj:StdDesignIAQWperCFM )      ; "Supply"                                       
                  case  3 :   Min( WperCFMIAQ, ResProj:StdDesignIAQWperCFM )      ; "Balanced"                                     
               ;   case  4 :   Min( WperCFMIAQ, 0.58 )      ; "Central"  - not yet implemented - MJB 4/22/13 
                  default :   UNDEFINED
               endswitch
         else  UNCHANGED  endif endif endif endif endif  }

   ; SAC 1/11/16 - ensure IAQRecovEffect is zero (tic 599)
   "Reset ResIAQFan:IAQRecovEffect"	ResIAQFan:IAQRecovEffect = {  0  }     ; No Heat Recovery
   ; SAC 2/5/20 (tic #1174)      ; modified to RETAIN HtRecov in Std & SMF models for SFam in versions 19.2.0+ - SAC 7/20/20 (tic #1174)
   ; revised for more project-level testing inputs - SAC 08/27/20
   "Reset ResIAQFan:IncludesRecov"  ResIAQFan:IncludesRecov  =             ; toggle OFF HRV in std design - SAC 01/28/21 (tic #1243)   ; added ApplyStdDesignIAQFromTable check - SAC 04/03/21
      {  if (((IfValidAnd( ResProj:BypassRuleLimits > 0 ) .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )) .OR. ResProj:ApplyStdDesignIAQFromTable) .AND.
             IfValidAnd( ResProj:StdDesignIAQType[1] = 4 ) .AND.
             IfValidAnd( ResProj:StdIAQHtRec_SRE[1] > 0 ) .AND. IfValidAnd( ResProj:StdIAQHtRec_ASRE[1] > 0 ))
         then  UNCHANGED  ; should already be toggled on
         else  0  endif  }
      ;   else if (IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND. ResProj:IsMultiFamily == 0 .AND.
      ;            (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf"))
      ;   then  UNCHANGED
   "Set ResIAQFan:FanPowerMult"        ResIAQFan:FanPowerMult     = {  1.0  }     ; SAC 7/20/20 (tic #1174)
   "Set ResIAQFan:FanHeatRecovMult"    ResIAQFan:FanHeatRecovMult = {  1.0  }
   "Set ResIAQFan:SensRecovEff"        ResIAQFan:SensRecovEff =            ; SAC 08/29/20   ; flipped logic and added ApplyStdDesignIAQFromTable check - SAC 04/02/21
      {  if ((ResProj:BypassRuleLimits > 0 .OR. ResProj:ApplyStdDesignIAQFromTable) .AND. IfValidAnd( ResProj:StdIAQHtRec_SRE[1] > 0 ) .AND.
             IfValidAnd( ResProj:StdDesignIAQType[1] = 4 )) 
         then  ResProj:StdIAQHtRec_SRE[1]  else  UNCHANGED  endif  }
   "Set ResIAQFan:AdjSensRecovEff"     ResIAQFan:AdjSensRecovEff =         ; SAC 08/29/20
      {  if ((ResProj:BypassRuleLimits > 0 .OR. ResProj:ApplyStdDesignIAQFromTable) .AND. IfValidAnd( ResProj:StdIAQHtRec_ASRE[1] > 0 ) .AND.
             IfValidAnd( ResProj:StdDesignIAQType[1] = 4 ))
         then  ResProj:StdIAQHtRec_ASRE[1]  else  UNCHANGED  endif  }

   ; SAC 3/20/19 - rule to define IAQCFMScaleFactor[3&4] to be used in simulation for standard design (tic #1083)
   ; SAC 9/5/19 - revised to reference new ResProj properties related to applying IAQCFMScaleFactor to EDR reference run
   ; SAC 10/24/19 - revised 9/5 mods to prevent changes to results for 2019.1.1 release
   ; SAC 12/15/19 - switched from ResProj-level scaling factors to Zone (for MFam)
   ; SAC 12/16/19 - added scaling factor setup for MFam models
   "Set ResZn:IAQCFMScaleFactor[1] if appropriate"     ResZn:IAQCFMScaleFactor[1]  =        ; SAC 9/9/19 - new logic to prevent MFam evaluation
      {  if (ResProj:IsMultiFamily == 0 .AND. IfValidAnd( ResProj:IAQCFMScaleFactor[1] > 0 ) .AND.
             ( (ResProj:ApplyStdIAQCFMLimitToDRtg .AND. IfValidAnd( Proj:AnalysisVersion > 190101 )) .OR.
               ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf" )) then  ResProj:IAQCFMScaleFactor[1]
         else if (ResProj:IsMultiFamily > 0 .AND. IfValidAnd( StdDesignIAQCFM > 0 ) .AND.
                  (IAQCFM_Exhaust[1] + IAQCFM_Supply[1] + IAQHRVCFM[1]) > 0.1 .AND.
                  ( (ResProj:ApplyStdIAQCFMLimitToDRtg .AND. IfValidAnd( Proj:AnalysisVersion > 190101 )) .OR.
                    ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf" ))
         then  StdDesignIAQCFM / (IAQCFM_Exhaust[1] + IAQCFM_Supply[1] + IAQHRVCFM[1])
         else  UNDEFINED  endif endif  }
   "Set ResZn:IAQCFMScaleFactor[2] if appropriate"     ResZn:IAQCFMScaleFactor[2]  =        ; SAC 9/9/19 - new logic to prevent MFam evaluation
      {  if (ResProj:IsMultiFamily == 0 .AND. IfValidAnd( ResProj:IAQCFMScaleFactor[2] > 0 ) .AND.
             ( (ResProj:ApplyStdIAQCFMLimitToDRtg .AND. IfValidAnd( Proj:AnalysisVersion > 190101 )) .OR.
               ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf" )) then  ResProj:IAQCFMScaleFactor[2]
         else  UNDEFINED  endif  }
   "Set ResZn:IAQPwrScaleFactor[1] if appropriate"     ResZn:IAQPwrScaleFactor[1]  =        ; SAC 12/16/19 - added separate scaling factor for IAQ power (for MFam)   ; remove for AnalysisVersion >= 190200 - SAC 01/26/21 (tic #1243)
      {  if (IfValidAnd( Proj:AnalysisVersion < 190200 ) .AND.
             ResProj:IsMultiFamily > 0 .AND. IfValidAnd( MaxStdDesignIAQPower > 0 ) .AND.
             (IAQPwr_Exhaust[1] + IAQPwr_Supply[1] + IAQHRVPwr[1]) > 0.1 .AND.
             ( (ResProj:ApplyStdIAQMaxPwrToDRtg .AND. IfValidAnd( Proj:AnalysisVersion > 190101 )) .OR.
               ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf" ))
         then  min( 1, MaxStdDesignIAQPower / (IAQPwr_Exhaust[1] + IAQPwr_Supply[1] + IAQHRVPwr[1]) )
         else  UNDEFINED  endif  }

   "Set ResOtherZn:IAQCFMScaleFactor if appropriate"      ResOtherZn:IAQCFMScaleFactor  =      ; SAC 12/15/19
      {  if (ResProj:IsMultiFamily == 0 .AND. IfValidAnd( ResProj:IAQCFMScaleFactor[1] > 0 ) .AND.
             ( (ResProj:ApplyStdIAQCFMLimitToDRtg .AND. IfValidAnd( Proj:AnalysisVersion > 190101 )) .OR.
               ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf" )) then  ResProj:IAQCFMScaleFactor[1]
         else if (ResProj:IsMultiFamily > 0 .AND. IfValidAnd( StdDesignIAQCFM > 0 ) .AND.
                  (IAQCFM_Exhaust[1] + IAQCFM_Supply[1] + IAQHRVCFM[1]) > 0.1 .AND.
                  ( (ResProj:ApplyStdIAQCFMLimitToDRtg .AND. IfValidAnd( Proj:AnalysisVersion > 190101 )) .OR.
                    ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf" ))
         then  StdDesignIAQCFM / (IAQCFM_Exhaust[1] + IAQCFM_Supply[1] + IAQHRVCFM[1])
         else  UNDEFINED  endif endif  }
   "Set ResOtherZn:IAQPwrScaleFactor if appropriate"      ResOtherZn:IAQPwrScaleFactor  =      ; SAC 12/16/19 - added separate scaling factor for IAQ power (for MFam)   ; remove for AnalysisVersion >= 190200 - SAC 01/26/21 (tic #1243)
      {  if (IfValidAnd( Proj:AnalysisVersion < 190200 ) .AND.
             ResProj:IsMultiFamily > 0 .AND. IfValidAnd( MaxStdDesignIAQPower > 0 ) .AND.
             (IAQPwr_Exhaust[1] + IAQPwr_Supply[1] + IAQHRVPwr[1]) > 0.1 .AND.
             ( (ResProj:ApplyStdIAQMaxPwrToDRtg .AND. IfValidAnd( Proj:AnalysisVersion > 190101 )) .OR.
               ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf" ))
         then  min( 1, MaxStdDesignIAQPower / (IAQPwr_Exhaust[1] + IAQPwr_Supply[1] + IAQHRVPwr[1]) )
         else  UNDEFINED  endif  }

   "Call subordinate rulelist to turn on or adjust IAQ heat recovery"   ResIAQFan:Action =         ; SAC 06/07/22
      {  if (Proj:IsComRuleset .AND. IfValidAnd( Proj:AnalysisVersion >= 220100 ) .AND.
             ResProj:RunAbbrev == "zb" .AND. IAQFanType == 3)
         then  if (IfValidAnd( Proj:CliZnNum <= 2 ) .OR. (IfValidAnd( Proj:CliZnNum >= 11 ) .AND. IfValidAnd( Proj:CliZnNum <= 16 )))
               then  EvalRulelist( "ForceStandard_IAQ_HeatRecovery", 1 )   ; add std design heat recovery where called for
               else  UNCHANGED  endif
         else  UNCHANGED  endif  }

END

;*************************************************************************  JP 11/29/22 (tic #3425)
RULELIST  "BudgetConversion_IAQ_DwellUnitType" 0 0 0 0

; apply scale factor to standard design
  "Set DwellUnitType:IAQCFM_Exhaust" DwellUnitType:IAQCFM_Exhaust = { IAQCFM_Exhaust * IAQCFMScaleFactor }
  "Set DwellUnitType:IAQCFM_Supply"  DwellUnitType:IAQCFM_Supply  = { IAQCFM_Supply  * IAQCFMScaleFactor }
  "Set DwellUnitType:IAQHRVCFM"      DwellUnitType:IAQHRVCFM      = { IAQHRVCFM      * IAQCFMScaleFactor }
  "Set DwellUnitType:IAQBalCFM"      DwellUnitType:IAQBalCFM      = { IAQBalCFM      * IAQCFMScaleFactor }
  "Set DwellUnitType:IAQPwr_Exhaust" DwellUnitType:IAQPwr_Exhaust = { IAQPwr_Exhaust * IAQCFMScaleFactor }
  "Set DwellUnitType:IAQPwr_Supply"	 DwellUnitType:IAQPwr_Supply	= { IAQPwr_Supply  * IAQCFMScaleFactor }
  "Set DwellUnitType:IAQHRVPwr"      DwellUnitType:IAQHRVPwr      = { IAQHRVPwr      * IAQCFMScaleFactor }
  "Set DwellUnitType:IAQBalPwr"      DwellUnitType:IAQBalPwr      = { IAQBalPwr      * IAQCFMScaleFactor }
  "Set DwellUnitType:IAQHRVCFMxSRE"  DwellUnitType:IAQHRVCFMxSRE  = { IAQHRVCFMxSRE  * IAQCFMScaleFactor }
  "Set DwellUnitType:IAQHRVCFMxASRE" DwellUnitType:IAQHRVCFMxASRE = { IAQHRVCFMxASRE * IAQCFMScaleFactor }
  
; re-allocate flow rate and fan power
  ; separate HRV from balanced for fan power calcs (will combine later)
  "Set DwellUnitType:IAQHRVCFM"      DwellUnitType:IAQHRVCFM      = { IAQHRVCFM - IAQBalCFM }
  "Set DwellUnitType:IAQHRVPwr"      DwellUnitType:IAQHRVPwr      = { IAQHRVPwr - IAQBalPwr }
  ; include balanced exhaust + supply to balanced for fan power calc
  "Set DwellUnitType:IAQBalCFM"      DwellUnitType:IAQBalCFM      = { IAQBalCFM + min( IAQCFM_Exhaust, IAQCFM_Supply ) }
  "Set DwellUnitType:IAQBalPwr"      DwellUnitType:IAQBalPwr      = { 
      if( IAQCFM_Exhaust > IAQCFM_Supply )
      then IAQBalPwr + IAQPwr_Exhaust * IAQCFM_Supply / IAQCFM_Exhaust + IAQPwr_Supply
      else if( IAQCFM_Supply > 0 )
      then IAQBalPwr + IAQPwr_Supply * IAQCFM_Exhaust / IAQCFM_Supply + IAQPwr_Exhaust
      else UNCHANGED endif endif }
  ; extral exhaust or supply
  "Set DwellUnitType:IAQPwr_Exhaust" DwellUnitType:IAQPwr_Exhaust = {
      if( IAQCFM_Exhaust > IAQCFM_Supply )
      then IAQPwr_Exhaust * ( 1 - IAQCFM_Supply / IAQCFM_Exhaust )
      else 0 endif }
  "Set DwellUnitType:IAQPwr_Supply"  DwellUnitType:IAQPwr_Supply = {
      if( IAQCFM_Supply > IAQCFM_Exhaust )
      then IAQPwr_Supply * ( 1 - IAQCFM_Exhaust / IAQCFM_Supply )
      else 0 endif }
  "Set DwellUnitType:IAQCFM_Exhaust" DwellUnitType:IAQCFM_Exhaust = { 
      if( IAQCFM_Exhaust > IAQCFM_Supply )
      then IAQCFM_Exhaust - IAQCFM_Supply
      else 0 endif }
  "Set DwellUnitType:IAQCFM_Supply" DwellUnitType:IAQCFM_Supply = { 
      if( IAQCFM_Exhaust = 0 )
      then StdDesignIAQCFM - IAQBalCFM - IAQHRVCFM
      else 0 endif } 
      
; set standard design IAQ fan performance
  "Set DwellUnitType:IAQPwr_Exhaust" DwellUnitType:IAQPwr_Exhaust = { IAQCFM_Exhaust * 0.35 }
  "Set DwellUnitType:IAQPwr_Supply"	 DwellUnitType:IAQPwr_Supply	= {
      if( IAQSupInletsAccessible > 0.5 )
      then IAQCFM_Supply * 0.35
      else min( IAQCFM_Supply * 0.35, IAQPwr_Supply )
      endif }
  "Set DwellUnitType:IAQHRVPwr"      DwellUnitType:IAQHRVPwr      = {
      if( IAQSupInletsAccessible > 0.5 )
      then if( IfValidAnd( Proj:CliZnNum <= 2 ) .OR. (IfValidAnd( Proj:CliZnNum >= 11 ) .AND. IfValidAnd( Proj:CliZnNum <= 16 )) )
           then IAQHRVCFM * 0.6    ; w/ HtRcvry
           else if( IfValidAnd( ResProj:NumStories < 4 ) .AND. (IfValidAnd( Proj:CliZnNum >= 4 ) .AND. IfValidAnd( Proj:CliZnNum <= 10 )) )
           then IAQHRVCFM * 0.4    ; will remove HtRcvry
           else IAQHRVCFM * 0.7    ; will remove HtRcvry
           endif endif
      else min( IAQHRVCFM * 0.6, IAQHRVPwr)    ; w/ HtRcvry
      endif }
  "Set DwellUnitType:IAQBalPwr"      DwellUnitType:IAQBalPwr      = {
      if( IAQSupInletsAccessible > 0.5 )
      then if( IfValidAnd( Proj:CliZnNum <= 2 ) .OR. (IfValidAnd( Proj:CliZnNum >= 11 ) .AND. IfValidAnd( Proj:CliZnNum <= 16 )) )
           then IAQBalCFM * 0.6    ; will add HtRcvry
           else if( IfValidAnd( ResProj:NumStories < 4 ) .AND. (IfValidAnd( Proj:CliZnNum >= 4 ) .AND. IfValidAnd( Proj:CliZnNum <= 10 )) )
           then IAQBalCFM * 0.4    ; w/o HtRcvry
           else IAQBalCFM * 0.7    ; w/o HtRcvry
           endif endif
      else if( IfValidAnd( Proj:CliZnNum <= 2 ) .OR. (IfValidAnd( Proj:CliZnNum >= 11 ) .AND. IfValidAnd( Proj:CliZnNum <= 16 )) )
           then min( IAQBalCFM * 0.6, IAQBalPwr )    ; w/ HtRcvry
           else if( IfValidAnd( ResProj:NumStories < 4 ) .AND. (IfValidAnd( Proj:CliZnNum >= 4 ) .AND. IfValidAnd( Proj:CliZnNum <= 10 )) )
           then min( IAQBalCFM * 0.4, IAQBalPwr )
           else min( IAQBalCFM * 0.7, IAQBalPwr )
      endif endif endif }
  "Set DwellUnitType:IAQHRVCFMxSRE"  DwellUnitType:IAQHRVCFMxSRE  = { 
      if( IAQSupInletsAccessible > 0.5 )
      then if( IfValidAnd( Proj:CliZnNum <= 2 ) .OR. (IfValidAnd( Proj:CliZnNum >= 11 ) .AND. IfValidAnd( Proj:CliZnNum <= 16 )) )
           then ( IAQHRVCFM + IAQBalCFM ) * 67
           else 0
           endif
      else if( IfValidAnd( Proj:CliZnNum <= 2 ) .OR. (IfValidAnd( Proj:CliZnNum >= 11 ) .AND. IfValidAnd( Proj:CliZnNum <= 16 )) )
           then max( ( IAQHRVCFM + IAQBalCFM ) * 67, IAQHRVCFMxSRE )    ; w/ HtRcvry
           else UNCHANGED
      endif endif }
  "Set DwellUnitType:IAQHRVCFMxASRE" DwellUnitType:IAQHRVCFMxASRE = {
      if( IAQSupInletsAccessible > 0.5 )
      then if( IfValidAnd( Proj:CliZnNum <= 2 ) .OR. (IfValidAnd( Proj:CliZnNum >= 11 ) .AND. IfValidAnd( Proj:CliZnNum <= 16 )) )
           then ( IAQHRVCFM + IAQBalCFM ) * 72
           else 0
           endif
      else if( IfValidAnd( Proj:CliZnNum <= 2 ) .OR. (IfValidAnd( Proj:CliZnNum >= 11 ) .AND. IfValidAnd( Proj:CliZnNum <= 16 )) )
           then max( ( IAQHRVCFM + IAQBalCFM ) * 72, IAQHRVCFMxASRE )    ; w/ HtRcvry
           else UNCHANGED
      endif endif }
  
; combine HRV & Balanced
  "Set DwellUnitType:IAQHRVCFM"      DwellUnitType:IAQHRVCFM      = { IAQHRVCFM + IAQBalCFM }
  "Set DwellUnitType:IAQHRVPwr"      DwellUnitType:IAQHRVPwr      = { IAQHRVPwr + IAQBalPwr }
  "Set DwellUnitType:IAQBalCFM"      DwellUnitType:IAQBalCFM      = { 
      if( IAQSupInletsAccessible > 0.5 )
      then if( IfValidAnd( Proj:CliZnNum <= 2 ) .OR. (IfValidAnd( Proj:CliZnNum >= 11 ) .AND. IfValidAnd( Proj:CliZnNum <= 16 )) )
           then 0
           else IAQHRVCFM
           endif
      else if( IfValidAnd( Proj:CliZnNum <= 2 ) .OR. (IfValidAnd( Proj:CliZnNum >= 11 ) .AND. IfValidAnd( Proj:CliZnNum <= 16 )) )
           then 0
           else UNCHANGED
      endif endif }
  "Set DwellUnitType:IAQBalPwr"      DwellUnitType:IAQBalPwr      = {
      if( IAQSupInletsAccessible > 0.5 )
      then if( IfValidAnd( Proj:CliZnNum <= 2 ) .OR. (IfValidAnd( Proj:CliZnNum >= 11 ) .AND. IfValidAnd( Proj:CliZnNum <= 16 )) )
           then 0
           else IAQHRVPwr
           endif
      else if( IfValidAnd( Proj:CliZnNum <= 2 ) .OR. (IfValidAnd( Proj:CliZnNum >= 11 ) .AND. IfValidAnd( Proj:CliZnNum <= 16 )) )
           then 0
           else UNCHANGED
      endif endif }
END

;************************************************************************* SAC 06/07/22
RULELIST  "ForceStandard_IAQ_HeatRecovery" 1 0 1 1
   "Toggle on ResIAQFan:IncludesRecov"    ResIAQFan:IncludesRecov    = {   1  }
   "Set ResIAQFan:SensRecovEff"           ResIAQFan:SensRecovEff     = {  67  }
   "Set ResIAQFan:AdjSensRecovEff"        ResIAQFan:AdjSensRecovEff  = {  72  }
END
;*************************************************************************



;*************************************************************************  - SAC 2/16/18 - rules to override std design window U-factor w/ revised value in models w/ single dwelling unit HPWHs (tic #983)
RULELIST  "BudgetConversion_ElecDHW_StdWindowUfactor" 1 0 1 0
   "Set ResExtWall:StdWindow:NFRCUfactor"    ResExtWall:StdWindow:NFRCUfactor  = {
      T24RClimateZoneCodeBase:ElecDHWWIndowUfactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )  }
END

;*************************************************************************  - split out from BudgetConversion to be called from StdMixedFuel setup- SAC 1/17/18
RULELIST  "BudgetConversion_SetupDuctsAndFan" 1 0 1 0

; "store BEMProc details"		HVACSys:Action = {  StoreBEMProc( "b4 Budget DistSys creation", 0 )  }
  ; SAC 5/4/14 - added rules similar to those in ProposedModelCodeAdditions rulelist to create HVACDist & HVACFan for HVACSys if one is required but not present
; SAC 11/25/14 - added logic to prevent toggling ducts on/off for EXISTING HVAC systems
	"Set HVACSys:DuctsRequired - 1 (heating)"		HVACSys:DuctsRequired	= {	if (HaveHeating < 0.5) then  0
																										else if (FloorAreaServed < 0.1 .OR. (ResProj:IsAddAlone > 0.5 .AND. MinRevRef( ResZn:ActiveHVACSystem, ResZn:HVACSysStatus ) < 2) .OR.
																																						(ResProj:RunScope == 2 .AND. MinRevRef( ResZn:ActiveHVACSystem, ResZn:HVACSysStatus ) < 2)) then  UNCHANGED
																										else if (T24RHeatingEquipment:DuctFlag( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", EnumString( StdHeatingType ) ) == 1)
																										then	1  else  0  endif endif endif  }
	"Set HVACSys:DuctsRequired - 2 (cooling)"		HVACSys:DuctsRequired	= {	if (HaveCooling < 0.5 .OR. FloorAreaServed < 0.1 .OR.
																												(ResProj:IsAddAlone > 0.5 .AND. MinRevRef( ResZn:ActiveHVACSystem, ResZn:HVACSysStatus ) < 2) .OR.
																												(ResProj:RunScope == 2 .AND. MinRevRef( ResZn:ActiveHVACSystem, ResZn:HVACSysStatus ) < 2)) then  UNCHANGED
																										else if (T24RCoolingEquipment:DuctFlag( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", EnumString( StdCoolingType ) ) == 1)
																										then	1  else  UNCHANGED  endif endif  }

;	"store BEMProc details"		HVACSys:Action = {  StoreBEMProc( "b4 Budget Distrib Creation", 0 )  }
;"dbg msg" HVACSys:Action = { if (FloorAreaServed[1] < 0.1) then  UNCHANGED  else if (LocalCompAssigned( DistribSystem ) == 0 ) then  PostMessageToLog( "BudgConv: HVACSys '%s', DuctsRequired %g / no DistribSystem assigned", Name, DuctsRequired )
;   else  PostMessageToLog( "BudgConv: HVACSys '%s', DuctsRequired %g / Dist '%s', Type '%s'", Name, DuctsRequired, DistribSystem:Name, EnumString( DistribSystem:Type ) )  endif endif }  ; SAC 01/11/23
	"Add DistribSystem to any systems requiring it"
			HVACSys:DistribSystem	= {	if (	LocalCompAssigned( DistribSystem ) == 0 .AND. FloorAreaServed[1] > 0.1 .AND. DuctsRequired > 0.5 )
													then	CreateComp( HVACDist, Local( Name ) + "-dist", "Default_HVACDist_ForceTypeDefault" )
													else  UNCHANGED  endif  }

; SAC 7/12/14 - new rule added to ensure that HVACDist created specifically for analysis is properly re-defaulted when addition of attic should cause re-location of ducts to attic
; SAC 4/15/15 - adjust for MFam duplex/townhomes options (based on ResProj:IsMFamDupOrTownhm)
	"Force re-default of HVACDist in certain cases"
			HVACDist:Action 	= {	if (	IfValidAnd( DuctsCreatedForAnalysis > 0.5 ) .AND. IfValidAnd( Type == 7 ) .AND.  ; 7 => DuctsInAll
										; SAC 11/24/14 - revised logic to ignore whether this dist serves a zone under attic...
										;			ResProj:IsMultiFamily == 0 .AND. MaxRevRef( HVACSys:DistribSystem, HVACSys:UncondAtticArea ) > 1 .AND. 
													(ResProj:IsMultiFamily == 0 .OR. ResProj:IsMFamDupOrTownhm > 0.5) .AND. MaxAll( Attic:FloorArea ) > 1 .AND.
													SumAll( Attic:FloorAreaOverCond ) > 0 .AND. IfValidAnd( ResProj:CondFloorArea > 1 ))
											then  if ((SumAll( Attic:FloorAreaOverCond ) / ResProj:CondFloorArea) >= 0.1)
													then	EvalRulelist( "Default_HVACDist_ForceTypeDefault", 1 )
													else  UNCHANGED  endif
											else  UNCHANGED  endif  }

;"store BEMProc details"		ResProj:Action = {  StoreBEMProc( Format( "b4 Budget Fan Creation-%s", RunAbbrev ), 0 )  }
;"debugging"		ResProj:Action		= {	MessageBox( "BudgetConversion logic to create fan(s) (%s model)", RunAbbrev )  }

   ; SAC 2/5/18 - rules to determine if a GasFurnace-only Fan object must get created and assigned to ensure proper GFurn & other fan power simulation (tic #928)
   ; SAC 6/25/20 - replaced logic 'HeatSysType == 1' to 'StdHeatingType == 1'   - SAC 6/26/20 - rolled back prior day mod to prevent WallFurn std design change
   ; SAC 7/3/20 - added PkgGasFurnace to HeatSysTypes that are considered 'Gas Furnace' (tic #1227)
   "Set HVACSys:GasFurnAreaServed - area served iff heating type is Gas Furnace"     ; 2019 code (tic #928) - SAC 2/5/18
      HVACSys:GasFurnAreaServed  = {
         if ((Type == 1 .OR. Type == 3) .AND. (HeatSysType == 1 .OR. HeatSysType == 18))
         then  FloorAreaServed[1]    ; "CntrlFurnace - Fuel-fired central furnace"
         else  0  endif  }
   "Set HVACSys:HtPmpFlrAreaServed - area served by heat pump"    HVACSys:HtPmpFlrAreaServed[1] =   ; SAC 5/17/19 - added to fix 2019 fan power bug (tic #1074)
      {  if (Type == 2 .AND. IfValidAnd( NumHtPumpSystemTypes >= 1 ) .AND. IfValidAnd( HtPumpSystem[1]:Type > 0 ))
         then  FloorAreaServed[1]
         else  0  endif  }
   "Set HVACSys:SDHVFlrAreaServed - area served by SDHV system"   HVACSys:SDHVFlrAreaServed =   ; SAC 8/19/19 (tic #1041, #1130)
      {  if (ResProj:EnergyCodeYearNum < 2019) then  0
         else if ( ( Type == 2                 .AND. IfValidAnd( NumHtPumpSystemTypes >= 1 ) .AND. IfValidAnd( HtPumpSystem[1]:Type = 19 )) .OR.
                   ((Type == 1 .OR. Type == 3) .AND. IfValidAnd( NumCoolSystemTypes   >= 1 ) .AND. IfValidAnd(   CoolSystem[1]:Type = 18 )) )
         then  FloorAreaServed[1]
         else  0  endif endif  }

	"Set HVACFan:FloorAreaServed"  	HVACFan:FloorAreaServed   = {  SumRevRef( HVACSys:Fan, HVACSys:FloorAreaServed[1] )  }
	"Set HVACFan:GasFurnAreaServed"  HVACFan:GasFurnAreaServed = {  SumRevRef( HVACSys:Fan, HVACSys:GasFurnAreaServed  )  }		; 2019 code (tic #928) - SAC 2/5/18
	"Set HVACFan:HtPumpAreaServed"   HVACFan:HtPumpAreaServed  = {  SumRevRef( HVACSys:Fan, HVACSys:HtPmpFlrAreaServed[1]  )  }	; 2019 fan power defaulting (tic #1074) - SAC 5/17/19
	"Set HVACFan:SDHVAreaServed"     HVACFan:SDHVAreaServed    = {  SumRevRef( HVACSys:Fan, HVACSys:SDHVFlrAreaServed      )  }	; 2019 fan power defaulting (tic #1041) - SAC 8/19/19
   "Set HVACSys:StdGasFurnFanPwr - Fan power of std model Gas Furnace fan needing to be created (since current fan assign to both GFurn & other system(s))"    ; 2019 code (tic #928)
      HVACSys:StdGasFurnFanPwr  = {
         if (FloorAreaServed[1] < 0.1 .OR. Type == 2 .OR. HeatSysType != 1) then  0
			else if (LocalCompAssigned( Fan ) == 0) then  0
         else if (IfValidAnd( Fan:GasFurnAreaServed < Fan:FloorAreaServed ) .AND.
                  T24RClimateZoneCodeBase:GFurnWperCFM( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) !=
                  T24RClimateZoneCodeBase:WperCFM(      "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ))
         then  Fan:WperCFMCool
         else  0  endif endif endif  }
   ; added logic and load of RuleLibrary HVACFan for 2022 small HtPump fan (w/ 0.45 W/CFM) - SAC 03/11/21  ; switched check and library from small to Large HP fan - SAC 03/15/21
   "Create new HVACSys:Fan if necessary (if lrg HtPump equip (2022+) or current fan assigned to both GFurn & other system(s))"  ; 2019 (tic #928)
      HVACSys:Fan  = {  if ( (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. (ResProj:SMFFollowsStdDesignFuel .AND. ResProj:RunAbbrev == "smf")) .AND.
                             IfValidAnd( Proj:AnalysisVersion >= 220000 ) .AND. IfValidAnd( LrgHtPumpStdFanPwr = 0.58 ) )
                        then  RuleLibrary( HVACFan, "t24-Fan-LrgHtPump-0.58" )
                        else if (IfValidAnd( Proj:AnalysisVersion < 220000 ) .AND. IfValidAnd( StdGasFurnFanPwr > 0 )==0) then  UNCHANGED
                        else  CreateComp( HVACFan, Local( Name ) + "-gffan", "Setup_HVACDistFan" )
                        endif endif  }

   "If new GasFurn fan created, store prev fan pwr to the new fan (to ensure accurate Altered-Verified fan performance)"
      HVACSys:Fan:WperCFMCool  = {
         if (IfValidAnd( StdGasFurnFanPwr > 0 )==0) then  UNCHANGED
         else  StdGasFurnFanPwr  endif  }
	"Reset HVACFan:FloorAreaServed"     HVACFan:FloorAreaServed   = {  SumRevRef( HVACSys:Fan, HVACSys:FloorAreaServed[1] )  }
	"Reset HVACFan:GasFurnAreaServed"   HVACFan:GasFurnAreaServed = {  SumRevRef( HVACSys:Fan, HVACSys:GasFurnAreaServed  )  }		; 2019 code (tic #928) - SAC 2/5/18
	"Reset HVACFan:HtPumpAreaServed"    HVACFan:HtPumpAreaServed  = {  SumRevRef( HVACSys:Fan, HVACSys:HtPmpFlrAreaServed[1]  )  }	; 2019 fan power defaulting (tic #1074) - SAC 5/17/19
	"Reset HVACFan:SDHVAreaServed"      HVACFan:SDHVAreaServed    = {  SumRevRef( HVACSys:Fan, HVACSys:SDHVFlrAreaServed      )  }	; 2019 fan power defaulting (tic #1041) - SAC 8/19/19

;"dbg msg" HVACSys:Action = {
;   if (LocalCompAssigned( Fan ))
;   then  PostMessageToLog( "Run '%s' BudgConv creation of HVACFan:  HVACSys '%s' Fan Assigned / DistribSystem:DuctsPresent = %g / :DuctsCreatedForAnalysis = %g", ResProj:RunAbbrev, Name, DistribSystem:DuctsPresent, DistribSystem:DuctsCreatedForAnalysis )
;   else  PostMessageToLog( "Run '%s' BudgConv creation of HVACFan:  HVACSys '%s' Fan NOT Assigned / DistribSystem:DuctsPresent = %g / :DuctsCreatedForAnalysis = %g", ResProj:RunAbbrev, Name, DistribSystem:DuctsPresent, DistribSystem:DuctsCreatedForAnalysis )  endif  }
   ; SAC 2/13/19 - revised logic to force Fan creation if not assigned and DistribSystem:DuctsCreatedForAnalysis (VCHP)
	"Add Fan for ducted HVAC systems when needed"
			HVACSys:Fan		= {	if (FloorAreaServed[1] < 0.1 .OR. LocalCompAssigned( DistribSystem ) == 0) then  UNCHANGED
										else if ( DistribSystem:DuctsPresent < 0.5 .AND. IfValidAnd( DistribSystem:DuctsCreatedForAnalysis > 0 )==0) then  UNCHANGED
										else if (LocalCompAssigned( Fan ) == 0)
										then	CreateComp( HVACFan, Local( Name ) + "-fan", "Setup_HVACDistFan" )
										else	UNCHANGED  endif endif endif  }

   ; SAC 5/14/19 - added logic to prevent T24RHeatingEquipment lookups w/ invalid StdHeatingType
	"Reset HVACSys:HtPumpDucted (if needed)"		HVACSys:HtPumpDucted		= {	if (FloorAreaServed[1] < 0.1 .OR. Status < 2) then  UNCHANGED
	                                                                           else if (DuctsRequired .AND. LocalCompAssigned( DistribSystem ) .AND. HtPumpDucted < 0.5 .AND.
																										      	T24RHeatingEquipment:IsHP( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", EnumString( StdHeatingType ) ) == 1)
																										then	1  else  UNCHANGED  endif endif  }
	"Reset HVACSys:HeatDucted (if needed)"			HVACSys:HeatDucted		= {	if (FloorAreaServed[1] < 0.1 .OR. Status < 2) then  UNCHANGED
	                                                                           else if (DuctsRequired .AND. LocalCompAssigned( DistribSystem ) .AND. HeatDucted < 0.5 .AND.
																										      	T24RHeatingEquipment:IsHP( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", EnumString( StdHeatingType ) ) < 0.5)
																										then	1  else  UNCHANGED  endif endif  }
	"Reset HVACSys:CoolDucted (if needed)"			HVACSys:CoolDucted		= {	if (FloorAreaServed[1] < 0.1 .OR. Status < 2) then  UNCHANGED
	                                                                           else if (DuctsRequired .AND. LocalCompAssigned( DistribSystem ) .AND. CoolDucted < 0.5 .AND.
																										      	T24RHeatingEquipment:IsHP( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", EnumString( StdHeatingType ) ) < 0.5)
																										then	1  else  UNCHANGED  endif endif  }
	"Set HVACSys:HtOrClDucted - heat"	HVACSys:HtOrClDucted		= {	
	  if (Type == 2)
		then
		  if (HtPumpDucted > 0.5) 
		  then  1
		  else  0
		  endif
		else if (HaveHeating)
		  then
		  if (HeatDucted > 0.5)
		  then  1
		  else  0
		  endif
		else  0
		endif endif  }
	"Set HVACSys:HtOrClDucted - cool"	HVACSys:HtOrClDucted		= {	
	  if (Type == 2)
	  then if (HtPumpDucted > 0.5)
	    then  HtOrClDucted + 2
	    else  UNCHANGED
	    endif
    else if (HaveCooling)
		then
		  if (CoolDucted > 0.5)
  		then  HtOrClDucted + 2
  		else  UNCHANGED
  		endif
		else  UNCHANGED
		endif endif  }
END
;*************************************************************************


; SAC 11/3/14 - rulelist to setup new 'Std Design CathClg Attic' to ensure that we don't generate separate Attic obejcts for each CathedralCeiling converted to CeilingBelowAttic
;*************************************************************************
RULELIST "Setup_StdCathClgAttic"  0 0 0 0
	"Set temporary value for Attic:StdCathClgAtticArea"	Attic:StdCathClgAtticArea	= {	10  }
END
;*************************************************************************


;*************************************************************************
; SAC 4/1/15 - moved rules setting HVACDist:Type & HVACDist:DefaultSystem into separate rulelist w/ Resets turned OFF to resolve issue where resets are blasting data needed later in HVACDist setup
RULELIST "BudgetConversion_HVACDist_TypeAndDefaultSystem_NoResets" 1 0 1 1
   ; SAC 6/1/17 - tic #621
   "Default HVACDist properties that may impact default Type"  HVACDist:Action  = {
         EvalRulelist( "Default_HVACDist_PriorToType", 1 )  }

	; SAC 4/7/13 - revisions to handle DuctsInAll (Type=7) in fixing GC Issue #50 - also added logic to more accurately represent Res ACM section 2.2.13
	; SAC 9/4/13 - added logic to ensure duct's w/ Verified low Leakage... get reset to std design ducts (GC issue 163)
	; SAC 12/12/13 - moved this rule down here BELOW above rules that need DuctInsRvalue & RetDuctInsRvalue to still be valid before setting Type (which ends up blasting these values)
	; mjb 12/16/13 - make sure Existing ducts do not get reset
	; SAC 8/3/14 - revised logic to prevent assignment of ducts in attic if attic area < 33% of assigned floor area (GC #338)
	; SAC 4/15/15 - adjust for MFam duplex/townhomes options
   ; SAC 3/31/17 - expand check before setting Type = Attic (1) to include ModelCheck logic preventing attic ducts for very small attics (user EAA support)
   ; SAC 6/1/17 - added logic to prevent Type default of 1 (attic) if attic too small for default ducts (tic #621)
   ; added logic to ensure adequate attic and crawlspace area before assigning ducts to those areas - SAC 08/13/20 (tic #1062)
   ; added logic checking for MaxSupDuctArea >= SupplyDuctArea before assigning to attic - SAC 06/30/21    - further revise MaxSupDuctArea check to ignore cases where it is invalid - SAC 07/12/21 (tic #1270)
   ; added logic to ensure HVACDist:Type switched from 'Distribution systems without ducts' to another option when assigning system(s) require ducts - SAC 01/11/23 
	"Reset HVACDist:Type in certain cases"		HVACDist:Type	= {
				if (Status == 1 .OR. Status == 4) then UNCHANGED else
					if ( DuctsPresent < 0.5 .AND. Type != 7 .AND. Type != 12 .AND.
                    (Type != 8 .OR. SumRevRef( HVACSys:DistribSystem, HVACSys:DuctsRequired ) < 1) ) then  UNCHANGED
					else if (ResProj:IsMultiFamily > 0 .AND. ResProj:IsMFamDupOrTownhm < 0.5)			 then	 7		; "Ducts located entirely in conditioned space"
					else if (MaxAll( Attic:FloorArea ) > 1) 	; then  1		; "Ducts located in unconditioned attic"
					then	if (MaxAll( Attic:FloorArea ) >= (MaxRevRef( HVACSys:DistribSystem, HVACSys:FloorAreaServed[1] ) * 0.333) .AND.
                         IfValidAnd( ResProj:AtticAreaOKForDucts > 0 ) .AND.
                         IfValidAnd( DuctsTooLrgForAttic = 0 ) .AND.
                         ( IfValidAnd( MaxSupDuctArea >= 0 )==0 .OR.
                           IfValidAnd( MaxSupDuctArea < SupplyDuctArea )==0 ) )
			; SAC 10/16/14 - revised to accommodate multiple attics
			; SAC 11/24/14 - reverted to original logic (above) to ignore conditioned state of connected attics -AND- to allow assignment of attic not above served zones
			;		else if (MaxRevRef( HVACSys:DistribSystem, HVACSys:UncondAtticArea ) > 1)
			;		then	if (MaxRevRef( HVACSys:DistribSystem, HVACSys:UncondAtticArea ) >= (MaxRevRef( HVACSys:DistribSystem, HVACSys:FloorAreaServed[1] ) * 0.333))
							then		1		; "Ducts located in unconditioned attic"
							else		9		; "DuctsOutdoor - Ducts located in exposed outdoor locations"
							endif
					else if (IfValidAnd( ResProj:CrawlAreaOKForDucts > 0 )) then  2		; "Ducts located in a crawl space"
		;		else if (MaxAll(    UndWall:Area ) > 1) then  5
																	 else  7		; "Ducts located entirely in conditioned space"
				endif endif endif endif endif  }

; mjb 12/2/15 - need no duct losses in Design Rating model for RESNET harmonization
	"Reset HVACDist:Type"		HVACDist:Type	 	= {	if (ResProj:DRtgRefRunID == 2014) then  12
	                                                   else UNCHANGED endif }

;  mjb   10/28/14 - do not reset Ducts if they are existing
	"Set HVACDist:DefaultSystem"		HVACDist:DefaultSystem	= {	if (Status == 1) then  0  else  1  endif  }

END
;*************************************************************************


;************************************************************************* SAC 7/2/20 (2022AllElecStd)
RULELIST "BudgetConversion_Std_SpecifyFuel" 1 0 1 1
   "Setup Cooking Fuel"       ResProj:Action =        ; SAC 01/19/21   ; modified to allow 'Proposed' fuel options - SAC 02/06/21
      {  if (StdDesignFuel == 1 .OR. (StdDesignFuel >= 3 .AND. StdDesignFuel_Ckg == 1))
         then  EvalRulelist( "BudgetConversion_SetupElectricCooking" )
         else if (StdDesignFuel >= 3 .AND. StdDesignFuel_Ckg == 0) then  UNCHANGED     ; std = proposed
         else  EvalRulelist( "BudgetConversion_SetupGasCooking" )  endif endif  }
   "Setup Clothes Dryer Fuel" ResProj:Action =
      {  if (StdDesignFuel == 1 .OR. (StdDesignFuel >= 3 .AND. StdDesignFuel_Dry == 1))
         then  EvalRulelist( "BudgetConversion_SetupElectricDryer" )
         else if (StdDesignFuel >= 3 .AND. StdDesignFuel_Dry == 0) then  UNCHANGED     ; std = proposed
         else  EvalRulelist( "BudgetConversion_SetupGasDryer" )  endif endif  }
   "Setup HVAC Fuel"          ResProj:Action =
      {  if (StdDesignFuel == 1 .OR. (StdDesignFuel >= 3 .AND. StdDesignFuel_HVAC == 1))
         then  EvalRulelist( "BudgetConversion_SetupElectricHVAC" )
         else if (StdDesignFuel >= 3 .AND. StdDesignFuel_HVAC == 0) then  UNCHANGED    ; std = proposed
         else  EvalRulelist( "BudgetConversion_SetupGasHVAC" )  endif endif  }
   "Setup DHW Fuel"           ResProj:Action =
      {  if (StdDesignFuel == 1 .OR. (StdDesignFuel >= 3 .AND. StdDesignFuel_DHW == 1))
         then  EvalRulelist( "BudgetConversion_SetupElectricDHW" )
         else if (StdDesignFuel >= 3 .AND. StdDesignFuel_DHW == 0) then  UNCHANGED     ; std = proposed
         else  EvalRulelist( "BudgetConversion_SetupGasDHW" )  endif endif  }

   "Eval ProposedInput rules to re-default properties related to changes made above"   ResProj:Action	=
      {  if (IfValidAnd( IsSFamResRuleset > 0 ))
         then  EvalRulelist( "ProposedInput" )
         else  EvalRulelist( "ProposedInput_MFam" )  endif  }
   "Eval ProposedInput rules #2 to get MFam HACSys"   ResProj:Action	=
      {  if (IfValidAnd( IsSFamResRuleset > 0 ))
         then  EvalRulelist( "ProposedInput" )
         else  EvalRulelist( "ProposedInput_MFam" )  endif  }
END
;************************************************************************* SAC 6/12/20 (2022AllElecStd) - SAC 7/2/20
RULELIST "BudgetConversion_SetupElectricAppliances" 1 0 1 1
   "Set ResProj:ApplDryerFuel[1]"      ResProj:ApplDryerFuel[1]    = {  "Electricity"  }
   "Set ResProj:ApplCookFuel[1]"       ResProj:ApplCookFuel[1]     = {  "Electricity"  }
   "Set DwellUnitType:DryerFuel"    DwellUnitType:DryerFuel  = {  "Electricity"  }     ; SAC 6/15/20 (2022AllElecStd)
   "Set DwellUnitType:CookFuel"     DwellUnitType:CookFuel   = {  "Electricity"  }
END
;************************************************************************* SAC 01/19/21
RULELIST "BudgetConversion_SetupElectricCooking" 1 0 1 1
   "Set ResProj:ApplCookFuel[1]"       ResProj:ApplCookFuel[1]     = {  "Electricity"  }
   "Set DwellUnitType:CookFuel"     DwellUnitType:CookFuel   = {  "Electricity"  }
END
;************************************************************************* SAC 01/19/21
RULELIST "BudgetConversion_SetupElectricDryer" 1 0 1 1
   "Set ResProj:ApplDryerFuel[1]"      ResProj:ApplDryerFuel[1]    = {  "Electricity"  }
   "Set DwellUnitType:DryerFuel"    DwellUnitType:DryerFuel  = {  "Electricity"  }
END
;************************************************************************* SAC 6/12/20 (2022AllElecStd) - SAC 7/2/20
RULELIST "BudgetConversion_SetupElectricHVAC" 1 0 1 1
   "Convert AC/Furn HVACSys to HtPump"    HVACSys:Action  =
      {  if (Type == 2 .OR. Status != 3 .OR. IfValidAnd( FloorAreaServed[1] > 0 )==0) then  UNCHANGED
         else  EvalRulelist( "ConvertTo_HVACSys_HeatPump", 1 )  endif  }
END
;************************************************************************* SAC 6/12/20 (2022AllElecStd) - SAC 7/2/20
RULELIST "BudgetConversion_SetupElectricDHW" 1 0 1 1
   "Convert non-elec DHWSys to HPWH"      DHWSys:Action  =
      {  if (IfValidAnd( HeatersAllElec > 0 ) .OR. Status != 3 .OR. IfValidAnd( FloorAreaServed[1] > 0 )==0) then  UNCHANGED
         else  EvalRulelist( "ConvertTo_DHWSys_HPWH", 1 )  endif  }
END
;************************************************************************* SAC 6/18/20 (2022AllElecStd) - SAC 7/2/20
RULELIST "BudgetConversion_SetupGasAppliances" 1 0 1 1
   "Set ResProj:ApplDryerFuel[1]"      ResProj:ApplDryerFuel[1]    = {  "Gas"  }
   "Set ResProj:ApplCookFuel[1]"       ResProj:ApplCookFuel[1]     = {  "Gas"  }
   "Set DwellUnitType:DryerFuel"    DwellUnitType:DryerFuel  = {  "Gas"  }
   "Set DwellUnitType:CookFuel"     DwellUnitType:CookFuel   = {  "Gas"  }
END
;************************************************************************* SAC 01/19/21
RULELIST "BudgetConversion_SetupGasCooking" 1 0 1 1
   "Set ResProj:ApplCookFuel[1]"       ResProj:ApplCookFuel[1]     = {  "Gas"  }
   "Set DwellUnitType:CookFuel"     DwellUnitType:CookFuel   = {  "Gas"  }
END
;************************************************************************* SAC 01/19/21
RULELIST "BudgetConversion_SetupGasDryer" 1 0 1 1
   "Set ResProj:ApplDryerFuel[1]"      ResProj:ApplDryerFuel[1]    = {  "Gas"  }
   "Set DwellUnitType:DryerFuel"    DwellUnitType:DryerFuel  = {  "Gas"  }
END
;************************************************************************* SAC 6/18/20 (2022AllElecStd) - SAC 7/2/20
RULELIST "BudgetConversion_SetupGasHVAC" 1 0 1 1
   "Convert HtPump HVACSys to AC/Furn"    HVACSys:Action  =
      {  if (Type != 2 .OR. Status != 3 .OR. IfValidAnd( FloorAreaServed[1] > 0 )==0) then  UNCHANGED
         else  EvalRulelist( "ConvertTo_HVACSys_ACFurnace", 1 )  endif  }
END
;************************************************************************* SAC 6/18/20 (2022AllElecStd) - SAC 7/2/20
RULELIST "BudgetConversion_SetupGasDHW" 1 0 1 1
   "Convert elec DHWSys to Gas"     DHWSys:Action  =
      {  if (IfValidAnd( HeatersAllElec > 0 )==0 .OR. Status != 3 .OR. IfValidAnd( FloorAreaServed[1] > 0 )==0) then  UNCHANGED
         else  EvalRulelist( "ConvertTo_DHWSys_Gas", 1 )  endif  }
END
;************************************************************************* SAC 6/12/20 (2022AllElecStd)
RULELIST "ConvertTo_HVACSys_HeatPump" 1 0 1 0
   "Set HVACSys:Type to HtPump"        HVACSys:Type  = {  2  }
   "Set HVACSys:NumHtPumpSystemTypes"  HVACSys:NumHtPumpSystemTypes  = {  1  }
   "Assign HVACSys:HtPumpSystem[1]"    HVACSys:HtPumpSystem[1]  =
      {  RuleLibrary( HVACHtPump, "t24-SplitHeatPump" )  }
   "Set HVACSys:HtPumpSystemCount[1]"  HVACSys:HtPumpSystemCount[1]  =
      {  if (IfValidAnd( HeatSystemCount[1] > 1 ))
         then HeatSystemCount[1]  
         else if (IfValidAnd( CentralEquipCount[1] > 1 ))
         then CentralEquipCount[1]
         else 1 endif endif  }
   "Set HVACSys:AutoSizeHeatInp"       HVACSys:AutoSizeHeatInp       = {  0  }
   "Set HVACSys:AutoSizeHeat[1]"       HVACSys:AutoSizeHeat[1]       = {  0  }
   "Set HVACSys:StdHeatingType"        HVACSys:StdHeatingType        =
      {  T24RHeatingEquipment:DuctedStdSys( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", "SplitHeatPump" )  }
   "Assign HVACSys:DistribSystem"      HVACSys:DistribSystem  =
      {  if (LocalCompAssigned( DistribSystem ) > 0) then  UNCHANGED
         else  RuleLibrary( HVACDist, "t24-Ducts-CondSpace" )  endif  }
   "Assign HVACSys:Fan"                HVACSys:Fan  =
      {  if (LocalCompAssigned( Fan ) > 0) then  UNCHANGED
         else  RuleLibrary( HVACFan, "t24-Fan-Furnace" )  endif  }
END
;************************************************************************* SAC 6/18/20 (2022AllElecStd)
RULELIST "ConvertTo_HVACSys_ACFurnace" 1 0 1 0
   "Set HVACSys:Type to Other"         HVACSys:Type  = {  1  }
   "Set HVACSys:NumHeatSystemTypes"    HVACSys:NumHeatSystemTypes  = {  1  }
   "Assign HVACSys:HeatSystem[1]"      HVACSys:HeatSystem[1]  =
      {  RuleLibrary( HVACHeat, "t24-CntrlFurnace" )  }
   "Set HVACSys:HeatSystemCount[1]"    HVACSys:HeatSystemCount[1]  =
      {  if (IfValidAnd( HtPumpSystemCount[1] > 1 ))
         then  HtPumpSystemCount[1]  
         else if (IfValidAnd( CentralEquipCount[1] > 1 ))
         then CentralEquipCount[1]
         else 1 endif endif  }
;   "Set HVACSys:AutoSizeHeatInp"       HVACSys:AutoSizeHeatInp       = {  0  }
   "Set HVACSys:AutoSizeHeat[1]"       HVACSys:AutoSizeHeat[1]       = {  1  }   ; added to fix problem where converting Prop HtPump sys to Furn erroring due to AutoSizeHeat = 0 w/ no capacity info - SAC 03/21/22
   "Set HVACSys:StdHeatingType"        HVACSys:StdHeatingType        =
      {  T24RHeatingEquipment:DuctedStdSys( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", "CntrlFurnace" )  }

   "Set HVACSys:NumCoolSystemTypes"    HVACSys:NumCoolSystemTypes  = {  1  }
   "Assign HVACSys:CoolSystem[1]"      HVACSys:CoolSystem[1]  =
      {  RuleLibrary( HVACCool, "t24-SplitAirCond" )  }
   "Set HVACSys:CoolSystemCount[1]"    HVACSys:CoolSystemCount[1]  =
      {  if (IfValidAnd( HtPumpSystemCount[1] > 1 ))
         then  HtPumpSystemCount[1]  
         else if (IfValidAnd( CentralEquipCount[1] > 1 ))
         then CentralEquipCount[1]
         else 1 endif endif  }
   "Set HVACSys:StdCoolingType"        HVACSys:StdCoolingType        =
      {  T24RCoolingEquipment:StdSystem( "CodeBase", Proj:StdDesignBase, "StdVer", ResProj:StdsVersionYr, "SysType", "SplitAirCond" )  }

   "Assign HVACSys:DistribSystem"      HVACSys:DistribSystem  =
      {  if (LocalCompAssigned( DistribSystem ) > 0) then  UNCHANGED
         else  RuleLibrary( HVACDist, "t24-Ducts-CondSpace" )  endif  }
   "Assign HVACSys:Fan"                HVACSys:Fan  =
      {  if (LocalCompAssigned( Fan ) > 0) then  UNCHANGED
         else  RuleLibrary( HVACFan, "t24-Fan-Furnace" )  endif  }
END
;************************************************************************* SAC 6/12/20 (2022AllElecStd)
RULELIST "ConvertTo_DHWSys_HPWH" 1 0 1 1
   "Set first DHWHeater as Elec"    DHWSys:DHWHeater[1] =
      {  if (IfValidAnd( DHWHeater[1]:HeaterElementType = 0 ) .OR.
             IfValidAnd( DHWHeater[1]:HeaterElementType = 5 )) then  UNCHANGED
         else  RuleLibrary( DHWHeater, "t24-HPWH-UEF" )  endif  }
   "Set DHWSys:HeaterMult[1]"    DHWSys:HeaterMult[1]  = {  1  }
   "Blast DHWSys:DHWHeater[2]"   DHWSys:DHWHeater[2]   = {  UNDEFINED  }
   "Blast DHWSys:DHWHeater[3]"   DHWSys:DHWHeater[3]   = {  UNDEFINED  }
   "Blast DHWSys:DHWHeater[4]"   DHWSys:DHWHeater[4]   = {  UNDEFINED  }
   "Blast DHWSys:DHWHeater[5]"   DHWSys:DHWHeater[5]   = {  UNDEFINED  }
   "Blast DHWSys:DHWHeater[6]"   DHWSys:DHWHeater[6]   = {  UNDEFINED  }
END
;************************************************************************* SAC 6/18/20 (2022AllElecStd)
RULELIST "ConvertTo_DHWSys_Gas" 1 0 1 1
   "Set first DHWHeater to Gas"    DHWSys:DHWHeater[1] =
      {  if (IfValidAnd( DHWHeater[1]:HeaterElementType = 1 )) then  UNCHANGED
         else  RuleLibrary( DHWHeater, "t24-GasStorage" )  endif  }
   "Set DHWSys:HeaterMult[1]"    DHWSys:HeaterMult[1]  = {  1  }
   "Blast DHWSys:DHWHeater[2]"   DHWSys:DHWHeater[2]   = {  UNDEFINED  }
   "Blast DHWSys:DHWHeater[3]"   DHWSys:DHWHeater[3]   = {  UNDEFINED  }
   "Blast DHWSys:DHWHeater[4]"   DHWSys:DHWHeater[4]   = {  UNDEFINED  }
   "Blast DHWSys:DHWHeater[5]"   DHWSys:DHWHeater[5]   = {  UNDEFINED  }
   "Blast DHWSys:DHWHeater[6]"   DHWSys:DHWHeater[6]   = {  UNDEFINED  }
END
;*************************************************************************



;*************************************************************************
;*************************************************************************
;66666
RULELIST  "BudgetHVACSizing" 1 0 0 1
;
;   Rules applied to the budget building following a design day run.  These
;   rules can utilize design day run results to perform any of these tasks:
;      1) Resize HVAC systems and cause re-execution of design day run.
;      2) Resize HVAC systems for final run.
;      3) Set any other building parameters based on design day run results.
;
;*************************************************************************
;*************************************************************************

   ;--------------------------------------------------------------------
   ; ... Rules
   ;--------------------------------------------------------------------

END


;*************************************************************************
;*************************************************************************
;77777
RULELIST  "BudgetFinal" 1 0 0 1
;
;   Rules applied to the budget building design just prior to executing the
;   final annual simulation.  These rules may define final HVAC system sizes
;   and/or other simulation data such as energy rate assignments, etc.
;
;*************************************************************************
;*************************************************************************

   ;--------------------------------------------------------------------
   ; ... Rules
   ;--------------------------------------------------------------------

END
;*************************************************************************


;*************************************************************************
;*************************************************************************

ENDFILE
